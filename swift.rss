<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/swift.rss</id>
    <title>Security Advisory for Swift</title>
    <updated>2023-09-27T08:01:40.998Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Aswift"/>
    <subtitle>Security Advisory for Swift on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[https://github.com/weichsel/ZIPFoundation] Path traversal in ZIPFoundation]]></title>
        <id>https://github.com/advisories/GHSA-c2cc-3569-6jh2</id>
        <link href="https://github.com/advisories/GHSA-c2cc-3569-6jh2"/>
        <updated>2023-09-06T21:05:42.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in ZIPFoundation v0.9.16 allows attackers to execute a path traversal via extracting a crafted zip file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39138">https://nvd.nist.gov/vuln/detail/CVE-2023-39138</a></li>
<li><a href="https://github.com/weichsel/ZIPFoundation/issues/282">https://github.com/weichsel/ZIPFoundation/issues/282</a></li>
<li><a href="https://blog.ostorlab.co/zip-packages-exploitation.html">https://blog.ostorlab.co/zip-packages-exploitation.html</a></li>
<li><a href="https://ostorlab.co/vulndb/advisory/OVE-2023-4">https://ostorlab.co/vulndb/advisory/OVE-2023-4</a></li>
<li><a href="https://ostorlab.co/vulndb/advisory/OVE-2023-6">https://ostorlab.co/vulndb/advisory/OVE-2023-6</a></li>
<li><a href="https://github.com/advisories/GHSA-c2cc-3569-6jh2">https://github.com/advisories/GHSA-c2cc-3569-6jh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2cc-3569-6jh2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-31T00:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[https://github.com/marmelroy/Zip] Path traversal in Zip Swift]]></title>
        <id>https://github.com/advisories/GHSA-g454-wj9r-jpg4</id>
        <link href="https://github.com/advisories/GHSA-g454-wj9r-jpg4"/>
        <updated>2023-09-06T21:31:01.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in Zip Swift v2.1.2 allows attackers to execute a path traversal attack via a crafted zip entry.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39135">https://nvd.nist.gov/vuln/detail/CVE-2023-39135</a></li>
<li><a href="https://github.com/marmelroy/Zip/issues/245">https://github.com/marmelroy/Zip/issues/245</a></li>
<li><a href="https://blog.ostorlab.co/zip-packages-exploitation.html">https://blog.ostorlab.co/zip-packages-exploitation.html</a></li>
<li><a href="https://ostorlab.co/vulndb/advisory/OVE-2023-1">https://ostorlab.co/vulndb/advisory/OVE-2023-1</a></li>
<li><a href="https://security.snyk.io/research/zip-slip-vulnerability">https://security.snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-g454-wj9r-jpg4">https://github.com/advisories/GHSA-g454-wj9r-jpg4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g454-wj9r-jpg4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-31T00:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[https://github.com/mongodb/mongo-swift-driver] MongoDB Driver may publish events containing authentication-related data]]></title>
        <id>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</id>
        <link href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7"/>
        <updated>2023-09-07T21:32:23.000Z</updated>
        <content type="html"><![CDATA[<p>Some MongoDB Drivers may erroneously publish events containing authentication-related data to a command listener configured by an application. The published events may contain security-sensitive data when specific authentication-related commands are executed.</p>
<p>Without due care, an application may inadvertently expose this sensitive information, e.g., by writing it to a log file. This issue only arises if an application enables the command listener feature (this is not enabled by default).</p>
<p>This issue affects the MongoDB C Driver 1.0.0 prior to 1.17.7, MongoDB PHP Driver 1.0.0 prior to 1.9.2, MongoDB Swift Driver 1.0.0 prior to 1.1.1, MongoDB Node.js Driver 3.6 prior to 3.6.10, MongoDB Node.js Driver 4.0 prior to 4.17.0 and MongoDB Node.js Driver 5.0 prior to 5.8.0. This issue also affects users of the MongoDB C++ Driver dependent on the C driver 1.0.0 prior to 1.17.7 (C++ driver prior to 3.7.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32050">https://nvd.nist.gov/vuln/detail/CVE-2021-32050</a></li>
<li><a href="https://jira.mongodb.org/browse/CDRIVER-3797">https://jira.mongodb.org/browse/CDRIVER-3797</a></li>
<li><a href="https://jira.mongodb.org/browse/CXX-2028">https://jira.mongodb.org/browse/CXX-2028</a></li>
<li><a href="https://jira.mongodb.org/browse/NODE-3356">https://jira.mongodb.org/browse/NODE-3356</a></li>
<li><a href="https://jira.mongodb.org/browse/PHPC-1869">https://jira.mongodb.org/browse/PHPC-1869</a></li>
<li><a href="https://jira.mongodb.org/browse/SWIFT-1229">https://jira.mongodb.org/browse/SWIFT-1229</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/pull/1235">https://github.com/mongodb/mongo-php-driver/pull/1235</a></li>
<li><a href="https://github.com/mongodb/mongo-swift-driver/pull/643">https://github.com/mongodb/mongo-swift-driver/pull/643</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748">https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748</a></li>
<li><a href="https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0">https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0</a></li>
<li><a href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7">https://github.com/advisories/GHSA-vxvm-qww3-2fh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-nio-http2] swift-nio-http2 vulnerable to denial of service via invalid HTTP/2 HEADERS frame length]]></title>
        <id>https://github.com/advisories/GHSA-ccw9-q5h2-8c2w</id>
        <link href="https://github.com/advisories/GHSA-ccw9-q5h2-8c2w"/>
        <updated>2023-07-27T15:53:34.000Z</updated>
        <content type="html"><![CDATA[<p>A program using swift-nio-http2 is vulnerable to a denial of service attack, caused by a network peer sending a specially crafted HTTP/2 frame. This attack affects all swift-nio-http2 versions from 1.0.0 to 1.19.1. It is fixed in 1.19.2 and later releases.</p>
<p>This vulnerability is caused by a logical error when parsing a HTTP/2 HEADERS frame where the frame contains priority information without any other data. This logical error caused confusion about the size of the frame, leading to a parsing error. This parsing error immediately crashes the entire process.</p>
<p>Sending a HEADERS frame with HTTP/2 priority information does not require any special permission, so any HTTP/2 connection peer may send such a frame. For clients, this means any server to which they connect may launch this attack. For servers, anyone they allow to connect to them may launch such an attack.</p>
<p>The attack is low-effort: it takes very little resources to send an appropriately crafted frame. The impact on availability is high: receiving the frame immediately crashes the server, dropping all in-flight connections and causing the service to need to restart. It is straightforward for an attacker to repeatedly send appropriately crafted frames, so attackers require very few resources to achieve a substantial denial of service.</p>
<p>The attack does not have any confidentiality or integrity risks in and of itself: swift-nio-http2 is parsing the frame in memory-safe code, so the crash is safe. However, sudden process crashes can lead to violations of invariants in services, so it is possible that this attack can be used to trigger an error condition that has confidentiality or integrity risks.</p>
<p>The risk can be mitigated if untrusted peers can be prevented from communicating with the service. This mitigation is not available to many services.</p>
<p>The issue is fixed by rewriting the parsing code to correctly handle the condition. The issue was found by automated fuzzing by oss-fuzz.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-http2/security/advisories/GHSA-ccw9-q5h2-8c2w">https://github.com/apple/swift-nio-http2/security/advisories/GHSA-ccw9-q5h2-8c2w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24666">https://nvd.nist.gov/vuln/detail/CVE-2022-24666</a></li>
<li><a href="https://github.com/apple/swift-nio-http2/commit/93215774aa7d223a5ad5aa0b80453375d669fa8f">https://github.com/apple/swift-nio-http2/commit/93215774aa7d223a5ad5aa0b80453375d669fa8f</a></li>
<li><a href="https://github.com/apple/swift-nio-http2/releases/tag/1.19.2">https://github.com/apple/swift-nio-http2/releases/tag/1.19.2</a></li>
<li><a href="https://github.com/advisories/GHSA-ccw9-q5h2-8c2w">https://github.com/advisories/GHSA-ccw9-q5h2-8c2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccw9-q5h2-8c2w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-05-18T17:30:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[https://github.com/migueldeicaza/SwiftTerm] SwiftTerm Code Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jq43-q8mx-r7mq</id>
        <link href="https://github.com/advisories/GHSA-jq43-q8mx-r7mq"/>
        <updated>2023-07-14T21:58:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attacker could modify the window title via a certain character escape sequence and then insert it back to the command line in the user's terminal, e.g. when the user views a file containing the malicious sequence, which could allow the attacker to execute arbitrary commands.</p>
<h3 id="credit">Credit</h3>
<p>These bugs were found and disclosed by David Leadbeater <a href="mailto:dgl@dgl.cx">dgl@dgl.cx</a> (@dgl at Github.com)</p>
<h3 id="patches">Patches</h3>
<p>Fixed in version ce596e0dc8cdb288bc7ed5c6a59011ee3a8dc171</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds available</p>
<h3 id="references">References</h3>
<p>Similar exploits to this existed in the past, for terminal emulators:</p>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2003-0063">https://nvd.nist.gov/vuln/detail/CVE-2003-0063</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2008-2383">https://nvd.nist.gov/vuln/detail/CVE-2008-2383</a></p>
<p>Additional background and information is also available:</p>
<p><a href="https://marc.info/?l=bugtraq&amp;m=104612710031920&amp;w=2">https://marc.info/?l=bugtraq&amp;m=104612710031920&amp;w=2</a>
<a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=510030">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=510030</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/migueldeicaza/SwiftTerm/security/advisories/GHSA-jq43-q8mx-r7mq">https://github.com/migueldeicaza/SwiftTerm/security/advisories/GHSA-jq43-q8mx-r7mq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23465">https://nvd.nist.gov/vuln/detail/CVE-2022-23465</a></li>
<li><a href="https://github.com/migueldeicaza/SwiftTerm/commit/a94e6b24d24ce9680ad79884992e1dff8e150a31">https://github.com/migueldeicaza/SwiftTerm/commit/a94e6b24d24ce9680ad79884992e1dff8e150a31</a></li>
<li><a href="https://github.com/advisories/GHSA-jq43-q8mx-r7mq">https://github.com/advisories/GHSA-jq43-q8mx-r7mq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jq43-q8mx-r7mq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-14T21:58:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-nio-http2] Duplicate advisory: swift-nio-http2 vulnerable to denial of service via invalid HTTP/2 HEADERS frame length]]></title>
        <id>https://github.com/advisories/GHSA-pv7r-9vjg-g3f9</id>
        <link href="https://github.com/advisories/GHSA-pv7r-9vjg-g3f9"/>
        <updated>2023-06-19T17:00:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-pgfx-g6rc-8cjv. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A program using swift-nio-http2 is vulnerable to a denial of service attack, caused by a network peer sending a specially crafted HTTP/2 frame. This attack affects all swift-nio-http2 versions from 1.0.0 to 1.19.1. This vulnerability is caused by a logical error when parsing a HTTP/2 HEADERS frame where the frame contains priority information without any other data. This logical error caused confusion about the size of the frame, leading to a parsing error. This parsing error immediately crashes the entire process. Sending a HEADERS frame with HTTP/2 priority information does not require any special permission, so any HTTP/2 connection peer may send such a frame. For clients, this means any server to which they connect may launch this attack. For servers, anyone they allow to connect to them may launch such an attack. The attack is low-effort: it takes very little resources to send an appropriately crafted frame. The impact on availability is high: receiving the frame immediately crashes the server, dropping all in-flight connections and causing the service to need to restart. It is straightforward for an attacker to repeatedly send appropriately crafted frames, so attackers require very few resources to achieve a substantial denial of service. The attack does not have any confidentiality or integrity risks in and of itself: swift-nio-http2 is parsing the frame in memory-safe code, so the crash is safe. However, sudden process crashes can lead to violations of invariants in services, so it is possible that this attack can be used to trigger an error condition that has confidentiality or integrity risks. The risk can be mitigated if untrusted peers can be prevented from communicating with the service. This mitigation is not available to many services. The issue is fixed by rewriting the parsing code to correctly handle the condition. The issue was found by automated fuzzing by oss-fuzz.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-http2/security/advisories/GHSA-ccw9-q5h2-8c2w">https://github.com/apple/swift-nio-http2/security/advisories/GHSA-ccw9-q5h2-8c2w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24666">https://nvd.nist.gov/vuln/detail/CVE-2022-24666</a></li>
<li><a href="https://github.com/advisories/GHSA-pv7r-9vjg-g3f9">https://github.com/advisories/GHSA-pv7r-9vjg-g3f9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pv7r-9vjg-g3f9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-11T00:00:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-nio-http2] Duplicate advisory: swift-nio-http2 vulnerable to denial of service via mishandled HPACK variable length integer encoding]]></title>
        <id>https://github.com/advisories/GHSA-wfvq-p7qf-vv64</id>
        <link href="https://github.com/advisories/GHSA-wfvq-p7qf-vv64"/>
        <updated>2023-06-19T16:54:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-w3f6-pc54-gfw7. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A program using swift-nio-http2 is vulnerable to a denial of service attack, caused by a network peer sending a specially crafted HPACK-encoded header block. This attack affects all swift-nio-http2 versions from 1.0.0 to 1.19.1. There are a number of implementation errors in the parsing of HPACK-encoded header blocks that allow maliciously crafted HPACK header blocks to cause crashes in processes using swift-nio-http2. Each of these crashes is triggered instead of an integer overflow. A malicious HPACK header block could be sent on any of the HPACK-carrying frames in a HTTP/2 connection (HEADERS and PUSH_PROMISE), at any position. Sending a HPACK header block does not require any special permission, so any HTTP/2 connection peer may send one. For clients, this means any server to which they connect may launch this attack. For servers, anyone they allow to connect to them may launch such an attack. The attack is low-effort: it takes very little resources to send an appropriately crafted field block. The impact on availability is high: receiving a frame carrying this field block immediately crashes the server, dropping all in-flight connections and causing the service to need to restart. It is straightforward for an attacker to repeatedly send appropriately crafted field blocks, so attackers require very few resources to achieve a substantial denial of service. The attack does not have any confidentiality or integrity risks in and of itself: swift-nio-http2 is parsing the field block in memory-safe code and the crash is triggered instead of an integer overflow. However, sudden process crashes can lead to violations of invariants in services, so it is possible that this attack can be used to trigger an error condition that has confidentiality or integrity risks. The risk can be mitigated if untrusted peers can be prevented from communicating with the service. This mitigation is not available to many services. The issue is fixed by rewriting the parsing code to correctly handle all conditions in the function. The principal issue was found by automated fuzzing by oss-fuzz, but several associated bugs in the same code were found by code audit and fixed at the same time</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-http2/security/advisories/GHSA-w3f6-pc54-gfw7">https://github.com/apple/swift-nio-http2/security/advisories/GHSA-w3f6-pc54-gfw7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24667">https://nvd.nist.gov/vuln/detail/CVE-2022-24667</a></li>
<li><a href="https://github.com/advisories/GHSA-wfvq-p7qf-vv64">https://github.com/advisories/GHSA-wfvq-p7qf-vv64</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wfvq-p7qf-vv64</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-11T00:00:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-nio-http2] Duplicate advisory: swift-nio-http2 vulnerable to denial of service via ALTSVC or ORIGIN frames]]></title>
        <id>https://github.com/advisories/GHSA-gpgx-whwh-r297</id>
        <link href="https://github.com/advisories/GHSA-gpgx-whwh-r297"/>
        <updated>2023-06-19T16:50:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-pgfx-g6rc-8cjv. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>A program using swift-nio-http2 is vulnerable to a denial of service attack caused by a network peer sending ALTSVC or ORIGIN frames. This attack affects all swift-nio-http2 versions from 1.0.0 to 1.19.1. This vulnerability is caused by a logical error after frame parsing but before frame handling. ORIGIN and ALTSVC frames are not currently supported by swift-nio-http2, and should be ignored. However, one code path that encounters them has a deliberate trap instead. This was left behind from the original development process and was never removed. Sending an ALTSVC or ORIGIN frame does not require any special permission, so any HTTP/2 connection peer may send such a frame. For clients, this means any server to which they connect may launch this attack. For servers, anyone they allow to connect to them may launch such an attack. The attack is low-effort: it takes very little resources to send one of these frames. The impact on availability is high: receiving the frame immediately crashes the server, dropping all in-flight connections and causing the service to need to restart. It is straightforward for an attacker to repeatedly send these frames, so attackers require very few resources to achieve a substantial denial of service. The attack does not have any confidentiality or integrity risks in and of itself. This is a controlled, intentional crash. However, sudden process crashes can lead to violations of invariants in services, so it is possible that this attack can be used to trigger an error condition that has confidentiality or integrity risks. The risk can be mitigated if untrusted peers can be prevented from communicating with the service. This mitigation is not available to many services. The issue is fixed by rewriting the parsing code to correctly handle the condition. The issue was found by automated fuzzing by oss-fuzz.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-http2/security/advisories/GHSA-pgfx-g6rc-8cjv">https://github.com/apple/swift-nio-http2/security/advisories/GHSA-pgfx-g6rc-8cjv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24668">https://nvd.nist.gov/vuln/detail/CVE-2022-24668</a></li>
<li><a href="https://github.com/advisories/GHSA-gpgx-whwh-r297">https://github.com/advisories/GHSA-gpgx-whwh-r297</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpgx-whwh-r297</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-11T00:00:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[https://github.com/grpc/grpc-swift.git] Denial of Service via reachable assertion]]></title>
        <id>https://github.com/advisories/GHSA-r6ww-5963-7r95</id>
        <link href="https://github.com/advisories/GHSA-r6ww-5963-7r95"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>A grpc-swift server is vulnerable to a denial of service attack via a reachable assertion. This was due to incorrect logic when handling <code>GOAWAY</code> frames.</p>
<p>The attack is low-effort: it takes very little resources to construct and send the required sequence of frames. The impact on availability is high as the server will crash, dropping all in flight connections and requests.</p>
<p>The issue was discovered by automated fuzz testing and is resolved by fixing the relevant state handling code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-swift/security/advisories/GHSA-r6ww-5963-7r95">https://github.com/grpc/grpc-swift/security/advisories/GHSA-r6ww-5963-7r95</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24777">https://nvd.nist.gov/vuln/detail/CVE-2022-24777</a></li>
<li><a href="https://github.com/grpc/grpc-swift/commit/858f977f2a51fca2292f384cf7a108dc2e73a3bd">https://github.com/grpc/grpc-swift/commit/858f977f2a51fca2292f384cf7a108dc2e73a3bd</a></li>
<li><a href="https://github.com/advisories/GHSA-r6ww-5963-7r95">https://github.com/advisories/GHSA-r6ww-5963-7r95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6ww-5963-7r95</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T19:33:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[https://github.com/apple/swift-nio-http2.git] Denial of service via HTTP/2 HEADERS frames padding]]></title>
        <id>https://github.com/advisories/GHSA-q36x-r5x4-h4q6</id>
        <link href="https://github.com/advisories/GHSA-q36x-r5x4-h4q6"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>A program using swift-nio-http2 is vulnerable to a denial of service attack, caused by a network peer sending a specially crafted HTTP/2 frame. This attack affects all swift-nio-http2 versions from 1.0.0 to 1.19.2. It is fixed in 1.20.0 and later releases.</p>
<p>This vulnerability is caused by a logical error when parsing a HTTP/2 HEADERS or HTTP/2 PUSH_PROMISE frame where the frame contains padding information without any other data. This logical error caused confusion about the size of the frame, leading to a parsing error. This parsing error immediately crashes the entire process.</p>
<p>Sending a HEADERS frame or PUSH_PROMISE frame with HTTP/2 padding information does not require any special permission, so any HTTP/2 connection peer may send such a frame. For clients, this means any server to which they connect may launch this attack. For servers, anyone they allow to connect to them may launch such an attack.</p>
<p>The attack is low-effort: it takes very little resources to send an appropriately crafted frame. The impact on availability is high: receiving the frame immediately crashes the server, dropping all in-flight connections and causing the service to need to restart. It is straightforward for an attacker to repeatedly send appropriately crafted frames, so attackers require very few resources to achieve a substantial denial of service.</p>
<p>The attack does not have any confidentiality or integrity risks in and of itself: swift-nio-http2 is parsing the frame in memory-safe code, so the crash is safe. However, sudden process crashes can lead to violations of invariants in services, so it is possible that this attack can be used to trigger an error condition that has confidentiality or integrity risks.</p>
<p>The risk can be mitigated if untrusted peers can be prevented from communicating with the service. This mitigation is not available to many services.</p>
<p>The issue is fixed by rewriting the parsing code to correctly handle the condition. The issue was found by automated fuzzing by oss-fuzz.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-http2/security/advisories/GHSA-q36x-r5x4-h4q6">https://github.com/apple/swift-nio-http2/security/advisories/GHSA-q36x-r5x4-h4q6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0618">https://nvd.nist.gov/vuln/detail/CVE-2022-0618</a></li>
<li><a href="https://github.com/apple/swift-nio-http2/commit/ac2a5afce3dbb6795b4f78ec3f19726dc28f5617">https://github.com/apple/swift-nio-http2/commit/ac2a5afce3dbb6795b4f78ec3f19726dc28f5617</a></li>
<li><a href="https://github.com/advisories/GHSA-q36x-r5x4-h4q6">https://github.com/advisories/GHSA-q36x-r5x4-h4q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q36x-r5x4-h4q6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T19:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/leaf-kit] LeafKit allows XSS with untrusted user input]]></title>
        <id>https://github.com/advisories/GHSA-rv3x-xq3r-8j9h</id>
        <link href="https://github.com/advisories/GHSA-rv3x-xq3r-8j9h"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This affects anyone passing unsanitised data to Leaf's variable tags. Before this fix, Leaf would not escape any strings passed to tags as variables. If an attacker managed to find a variable that was rendered with their unsanitised data, they could inject scripts into a generated Leaf page, which could enable XSS attacks if other mitigations such as a Content Security Policy were not enabled.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in 1.3.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitise any untrusted input before passing it to Leaf and enable a CSP to block inline script and CSS data.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/vapor/leaf-kit-ghsa-rv3x-xq3r-8j9h/pull/1">https://github.com/vapor/leaf-kit-ghsa-rv3x-xq3r-8j9h/pull/1</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/vapor/leaf-kit">Leaf Kit</a></li>
<li>Email us at <a href="mailto:security@vapor.codes">security@vapor.codes</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vapor/leaf-kit/security/advisories/GHSA-rv3x-xq3r-8j9h">https://github.com/vapor/leaf-kit/security/advisories/GHSA-rv3x-xq3r-8j9h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37634">https://nvd.nist.gov/vuln/detail/CVE-2021-37634</a></li>
<li><a href="https://github.com/vapor/leaf-kit/releases/tag/1.3.0">https://github.com/vapor/leaf-kit/releases/tag/1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-rv3x-xq3r-8j9h">https://github.com/advisories/GHSA-rv3x-xq3r-8j9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv3x-xq3r-8j9h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T19:32:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grpc/grpc-swift] Incomplete Internal State Distinction in GRPCWebToHTTP2ServerCodec]]></title>
        <id>https://github.com/advisories/GHSA-2jx2-qcm4-rf9h</id>
        <link href="https://github.com/advisories/GHSA-2jx2-qcm4-rf9h"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Affected gRPC Swift servers are vulnerable to precondition failures when parsing certain gRPC Web requests. This may lead to a denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.2.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround is available. Users must upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-swift/security/advisories/GHSA-2jx2-qcm4-rf9h">https://github.com/grpc/grpc-swift/security/advisories/GHSA-2jx2-qcm4-rf9h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-36153">https://nvd.nist.gov/vuln/detail/CVE-2021-36153</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35267">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35267</a></li>
<li><a href="https://github.com/grpc/grpc-swift/releases">https://github.com/grpc/grpc-swift/releases</a></li>
<li><a href="https://github.com/advisories/GHSA-2jx2-qcm4-rf9h">https://github.com/advisories/GHSA-2jx2-qcm4-rf9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jx2-qcm4-rf9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T19:32:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/grpc/grpc-swift] Uncontrolled Resource Consumption in LengthPrefixedMessageReader]]></title>
        <id>https://github.com/advisories/GHSA-rxmj-hg9v-vp3p</id>
        <link href="https://github.com/advisories/GHSA-rxmj-hg9v-vp3p"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Affected gRPC Swift clients and servers are vulnerable to uncontrolled resource consumption attacks. Excessive memory may be allocated when parsing messages. This can lead to a denial of service.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in 1.2.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround is available. Users must upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-swift/security/advisories/GHSA-rxmj-hg9v-vp3p">https://github.com/grpc/grpc-swift/security/advisories/GHSA-rxmj-hg9v-vp3p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-36155">https://nvd.nist.gov/vuln/detail/CVE-2021-36155</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35303">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=35303</a></li>
<li><a href="https://github.com/grpc/grpc-swift/releases/tag/1.2.0">https://github.com/grpc/grpc-swift/releases/tag/1.2.0</a></li>
<li><a href="https://github.com/advisories/GHSA-rxmj-hg9v-vp3p">https://github.com/advisories/GHSA-rxmj-hg9v-vp3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rxmj-hg9v-vp3p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T19:32:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/vapor] Untrusted data fed into `Data.init(base32Encoded:)` can result in exposing server memory and/or crash]]></title>
        <id>https://github.com/advisories/GHSA-pqwh-c2f3-vxmq</id>
        <link href="https://github.com/advisories/GHSA-pqwh-c2f3-vxmq"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug in the <code>Data.init(base32Encoded:)</code> function opens up the potential for exposing server memory and/or crashing the server (Denial of Service) for applications where untrusted data can end up in said function. Vapor does not currently use this function itself so this only impact applications that use the impacted function directly or through other dependencies.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in 4.47.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Use an alternative to Vapor's built-in <code>Data.init(base32Encoded:)</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/vapor/vapor">Vapor</a></li>
<li>Ask in <a href="http://vapor.team">Discord</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vapor/vapor/security/advisories/GHSA-pqwh-c2f3-vxmq">https://github.com/vapor/vapor/security/advisories/GHSA-pqwh-c2f3-vxmq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32742">https://nvd.nist.gov/vuln/detail/CVE-2021-32742</a></li>
<li><a href="https://github.com/vapor/vapor/releases/tag/4.47.2">https://github.com/vapor/vapor/releases/tag/4.47.2</a></li>
<li><a href="https://github.com/advisories/GHSA-pqwh-c2f3-vxmq">https://github.com/advisories/GHSA-pqwh-c2f3-vxmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqwh-c2f3-vxmq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T19:31:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/vapor] Vapor's Metrics integration could cause a system drain]]></title>
        <id>https://github.com/advisories/GHSA-gcj9-jj38-hwmc</id>
        <link href="https://github.com/advisories/GHSA-gcj9-jj38-hwmc"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a DoS attack against anyone who Bootstraps a metrics backend for their Vapor app with the following attack vector:</p>
<ol>
<li>send unlimited requests against a vapor instance with different paths. this will create “unlimited” counters and timers, which will eventually drain the system.</li>
<li>downstream services might suffer from this attack as well by being spammed with error paths</li>
</ol>
<h3 id="patches">Patches</h3>
<p>This has been patched in 4.40.1. The <code>DefaultResponder</code> will rewrite any undefined route paths for to <code>vapor_route_undefined</code> to avoid unlimited counters.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Don't bootstrap a metrics system or upgrade to 4.40.1</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/vapor/vapor">Vapor</a></li>
<li>Ask in <a href="http://vapor.team">Discord</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vapor/vapor/security/advisories/GHSA-gcj9-jj38-hwmc">https://github.com/vapor/vapor/security/advisories/GHSA-gcj9-jj38-hwmc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21328">https://nvd.nist.gov/vuln/detail/CVE-2021-21328</a></li>
<li><a href="https://github.com/vapor/vapor/commit/e3aa712508db2854ac0ab905696c65fd88fa7e23">https://github.com/vapor/vapor/commit/e3aa712508db2854ac0ab905696c65fd88fa7e23</a></li>
<li><a href="https://github.com/vapor/vapor/releases/tag/4.40.1">https://github.com/vapor/vapor/releases/tag/4.40.1</a></li>
<li><a href="https://vapor.codes/">https://vapor.codes/</a></li>
<li><a href="https://github.com/advisories/GHSA-gcj9-jj38-hwmc">https://github.com/advisories/GHSA-gcj9-jj38-hwmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gcj9-jj38-hwmc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T19:31:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/vapor] Arbitrary file read using percent-encoded relative paths in FileMiddleware]]></title>
        <id>https://github.com/advisories/GHSA-vcvg-xgr8-p5gq</id>
        <link href="https://github.com/advisories/GHSA-vcvg-xgr8-p5gq"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Attackers can access data at arbitrary filesystem paths on the same host as an application using <code>FileMiddleware</code>.</p>
<h3 id="patches">Patches</h3>
<p>Version <a href="https://github.com/vapor/vapor/releases/tag/4.29.4">4.29.4</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to 4.24.4 or later, or disable <code>FileMiddleware</code>.</p>
<h3 id="references">References</h3>
<ul>
<li>Introduced in <a href="https://github.com/vapor/vapor/pull/2223">https://github.com/vapor/vapor/pull/2223</a></li>
<li>Fixed by <a href="https://github.com/vapor/vapor/pull/2500">https://github.com/vapor/vapor/pull/2500</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open <a href="https://github.com/vapor/vapor/issues">an issue</a></li>
<li>Email us at <a href="mailto:security@vapor.codes">security@vapor.codes</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vapor/vapor/security/advisories/GHSA-vcvg-xgr8-p5gq">https://github.com/vapor/vapor/security/advisories/GHSA-vcvg-xgr8-p5gq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15230">https://nvd.nist.gov/vuln/detail/CVE-2020-15230</a></li>
<li><a href="https://github.com/vapor/vapor/pull/2500">https://github.com/vapor/vapor/pull/2500</a></li>
<li><a href="https://github.com/vapor/vapor/commit/cf1651f7ff76515593f4d8ca6e6e15d2247fe255">https://github.com/vapor/vapor/commit/cf1651f7ff76515593f4d8ca6e6e15d2247fe255</a></li>
<li><a href="https://github.com/advisories/GHSA-vcvg-xgr8-p5gq">https://github.com/advisories/GHSA-vcvg-xgr8-p5gq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vcvg-xgr8-p5gq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T19:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/vapor] Vapor vulnerable to denial of service in HTTP Range Request of FileMiddleware]]></title>
        <id>https://github.com/advisories/GHSA-vj2m-9f5j-mpr5</id>
        <link href="https://github.com/advisories/GHSA-vj2m-9f5j-mpr5"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>Vapor is an HTTP web framework for Swift and <a href="https://docs.vapor.codes/advanced/middleware/">middleware</a> is a logic chain between the client and a Vapor route handler. <a href="https://docs.vapor.codes/advanced/middleware/#file-middleware">FileMiddleware</a> enables the serving of assets from the Public folder of a project to the client. </p>
<p>Vapor before 4.60.3 is vulnerable to denial of service due to an integer overflow when given invalid range headers while using FileMiddleware. This is patched in 4.60.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vapor/vapor/security/advisories/GHSA-vj2m-9f5j-mpr5">https://github.com/vapor/vapor/security/advisories/GHSA-vj2m-9f5j-mpr5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31005">https://nvd.nist.gov/vuln/detail/CVE-2022-31005</a></li>
<li><a href="https://github.com/vapor/vapor/commit/953a349b539b3e0d3653585c8ffb50c427986df1">https://github.com/vapor/vapor/commit/953a349b539b3e0d3653585c8ffb50c427986df1</a></li>
<li><a href="https://github.com/vapor/vapor/releases/tag/4.60.3">https://github.com/vapor/vapor/releases/tag/4.60.3</a></li>
<li><a href="https://github.com/advisories/GHSA-vj2m-9f5j-mpr5">https://github.com/advisories/GHSA-vj2m-9f5j-mpr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vj2m-9f5j-mpr5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-07T16:26:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/vapor/vapor] Vapor vulnerable to denial of service in URLEncodedFormDecoder]]></title>
        <id>https://github.com/advisories/GHSA-qvxg-wjxc-r4gg</id>
        <link href="https://github.com/advisories/GHSA-qvxg-wjxc-r4gg"/>
        <updated>2023-06-30T20:15:42.000Z</updated>
        <content type="html"><![CDATA[<p>Vapor is an HTTP web framework for Swift. Vapor versions earlier than 4.61.1 are vulnerable to a denial of service in the URLEncodedFormDecoder.</p>
<h3 id="impact">Impact</h3>
<p>When using automatic content decoding, e.g. </p>
<pre><code class="language-swift">app.post("foo") { request -&gt; String in
  let foo = try request.content.decode(Foo.self)
  return "\(foo)"
}
</code></pre>
<p>An attacker can craft a request body that can make the server crash with the following request:</p>
<pre><code>curl -d "array[_0][0][array][_0][0][array]$(for f in $(seq 1100); do echo -n '[_0][0][array]'; done)[string][_0]=hello%20world" http://localhost:8080/foo
</code></pre>
<p>The issue is unbounded, attacker controlled stack growth which will at some point lead to a stack overflow.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in 4.61.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you don't need to decode Form URL Encoded data, you can disable the <code>ContentConfiguration</code> so it won't be used. E.g. in <strong>configure.swift</strong></p>
<pre><code class="language-swift">var contentConfig = ContentConfiguration()
contentConfig.use(encoder: JSONEncoder.custom(dates: .iso8601), for: .json)
contentConfig.use(decoder: JSONDecoder.custom(dates: .iso8601), for: .json)
contentConfig.use(encoder: JSONEncoder.custom(dates: .iso8601), for: .jsonAPI)
contentConfig.use(decoder: JSONDecoder.custom(dates: .iso8601), for: .jsonAPI)
ContentConfiguration.global = contentConfig
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/vapor/vapor">the Vapor repo</a></li>
<li>Ask in <a href="http://vapor.team">Vapor Discord</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vapor/vapor/security/advisories/GHSA-qvxg-wjxc-r4gg">https://github.com/vapor/vapor/security/advisories/GHSA-qvxg-wjxc-r4gg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31019">https://nvd.nist.gov/vuln/detail/CVE-2022-31019</a></li>
<li><a href="https://github.com/vapor/vapor/commit/6c63226a4ab82ce53730eb1afb9ca63866fcf033">https://github.com/vapor/vapor/commit/6c63226a4ab82ce53730eb1afb9ca63866fcf033</a></li>
<li><a href="https://github.com/advisories/GHSA-qvxg-wjxc-r4gg">https://github.com/advisories/GHSA-qvxg-wjxc-r4gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qvxg-wjxc-r4gg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-07T16:11:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-corelibs-foundation] Swift-corelibs-foundation denial of service in JSON decoding with JSONDecoder]]></title>
        <id>https://github.com/advisories/GHSA-239c-6cv2-wwx8</id>
        <link href="https://github.com/advisories/GHSA-239c-6cv2-wwx8"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A program using swift-corelibs-foundation is vulnerable to a denial of service attack caused by a potentially malicious source producing a JSON document containing a type mismatch.</p>
<p>This vulnerability is caused by the interaction between a deserialization mechanism offered by the Swift standard library, the Codable protocol; and the JSONDecoder class offered by swift-corelibs-foundation, which can deserialize types that adopt the Codable protocol based on the content of a provided JSON document. When a type that adopts Codable requests the initialization of a field with an integer value, the JSONDecoder class uses a type-erased container with different accessor methods to attempt and coerce a corresponding JSON value and produce an integer. In the case the JSON value was a numeric literal with a floating-point portion, JSONDecoder used different type-eraser methods during validation than it did during the final casting of the value. The checked casting produces a deterministic crash due to this mismatch.</p>
<p>The JSONDecoder class is often wrapped by popular Swift-based web frameworks to parse the body of HTTP requests and perform basic type validation. This makes the attack low-effort: sending a specifically crafted JSON document during a request to these endpoints will cause them to crash.</p>
<p>The attack does not have any confidentiality or integrity risks in and of itself; the crash is produced deterministically by an abort function that ensures that execution does not continue in the face of this violation of assumptions. However, unexpected crashes can lead to violations of invariants in services, so it's possible that this attack can be used to trigger error conditions that escalate the risk. Producing a denial of service may also be the goal of an attacker in itself.</p>
<h3 id="resolution">Resolution</h3>
<p>This issue is solved in Swift 5.6.2 for Linux and Windows. This issue was solved by ensuring that the same methods are invoked both when validating and during casting, so that no type mismatch occurs.</p>
<p>Swift for Linux and Windows versions are not ABI-interchangeable. To upgrade a service, its owner must update to this version of the Swift toolchain, then recompile and redeploy their software. The new version of Swift includes an updated swift-corelibs-foundation package.</p>
<p>The resolution is also included in recent development snapshots of Swift available on swift.org for those platforms.</p>
<p>Versions of Swift running on Darwin-based operating systems are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users that can control which payload is parsed with JSONDecoder can ensure that fields that are intended to initialize Swift integer types use a JSON numeric constant without a fractional part. This will avoid the crash, but it is rare that a user has full control on the JSON payload they will parse.</p>
<p>As a workaround, users that can alter their current software but cannot perform an upgrade can perform JSON parsing directly (e.g., through the JSONSerialization class) rather than using the JSONDecoder class.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-corelibs-foundation/security/advisories/GHSA-239c-6cv2-wwx8">https://github.com/apple/swift-corelibs-foundation/security/advisories/GHSA-239c-6cv2-wwx8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1642">https://nvd.nist.gov/vuln/detail/CVE-2022-1642</a></li>
<li><a href="https://github.com/apple/swift-corelibs-foundation/commit/b541491f73b39007a38f3ff5a0cbe89d09ef1614">https://github.com/apple/swift-corelibs-foundation/commit/b541491f73b39007a38f3ff5a0cbe89d09ef1614</a></li>
<li><a href="https://github.com/advisories/GHSA-239c-6cv2-wwx8">https://github.com/advisories/GHSA-239c-6cv2-wwx8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-239c-6cv2-wwx8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-07T16:07:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github.com/apple/swift-nio-extras] SwiftNIO Extras vulnerable to improper detection of complete HTTP body decompression]]></title>
        <id>https://github.com/advisories/GHSA-773g-x274-8qmf</id>
        <link href="https://github.com/advisories/GHSA-773g-x274-8qmf"/>
        <updated>2023-06-19T16:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>SwiftNIO Extras provides a pair of helpers for transparently decompressing received HTTP request or response bodies. These two objects (<code>HTTPRequestDecompressor</code> and <code>HTTPResponseDecompressor</code>) both failed to detect when the decompressed body was considered complete. If trailing junk data was appended to the HTTP message body, the code would repeatedly attempt to decompress this data and fail. This would lead to an infinite loop making no forward progress, leading to livelock of the system and denial-of-service.</p>
<p>This issue can be triggered by any attacker capable of sending a compressed HTTP message. Most commonly this is HTTP servers, as compressed HTTP messages cannot be negotiated for HTTP requests, but it is possible that users have configured decompression for HTTP requests as well. The attack is low effort, and likely to be reached without requiring any privilege or system access. The impact on availability is high: the process immediately becomes unavailable but does not immediately crash, meaning that it is possible for the process to remain in this state until an administrator intervenes or an automated circuit breaker fires. If left unchecked this issue will very slowly exhaust memory resources due to repeated buffer allocation, but the buffers are not written to and so it is possible that the processes will not terminate for quite some time.</p>
<p>This risk can be mitigated by removing transparent HTTP message decompression. The issue is fixed by correctly detecting the termination of the compressed body as reported by zlib and refusing to decompress further data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apple/swift-nio-extras/security/advisories/GHSA-773g-x274-8qmf">https://github.com/apple/swift-nio-extras/security/advisories/GHSA-773g-x274-8qmf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3252">https://nvd.nist.gov/vuln/detail/CVE-2022-3252</a></li>
<li><a href="https://github.com/apple/swift-nio-extras/pull/177">https://github.com/apple/swift-nio-extras/pull/177</a></li>
<li><a href="https://github.com/apple/swift-nio-extras/pull/177/commits/359015de2c49e426c27b1d25dbf599b08a9d3ee6">https://github.com/apple/swift-nio-extras/pull/177/commits/359015de2c49e426c27b1d25dbf599b08a9d3ee6</a></li>
<li><a href="https://github.com/advisories/GHSA-773g-x274-8qmf">https://github.com/advisories/GHSA-773g-x274-8qmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-773g-x274-8qmf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-07T16:05:48.000Z</published>
    </entry>
</feed>