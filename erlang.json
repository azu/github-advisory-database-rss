{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Erlang/Elixir packages hosted at hex.pm",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Aerlang",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/erlang.json",
    "description": "Security Advisory for Erlang/Elixir packages hosted at hex.pm on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>In certain <em>very specific</em> situations, it was possible for the policies of an update action to be skipped. This occurred only on \"empty\" update actions (no changing fields), and would allow their hooks (side effects) to be performed when they should not have been. Note that this does not allow reading new data that the user should not have had access to, only triggering a side effect a user should not have been able to trigger.</p>\n<p>You must have an update action that:</p>\n<ul>\n<li>Is on a resource with no attributes containing an \"update default\" (updated_at timestamp, for example)</li>\n<li>can be performed atomically. </li>\n<li>Does <em>not</em> have <code>require_atomic? false</code></li>\n<li>Has at least one authorizer (typically <code>Ash.Policy.Authorizer</code>)</li>\n<li>Has at least one <code>change</code> (on the resource's <code>changes</code> block or in the action itself)\nThis is where the side-effects would be performed when they should not have been.</li>\n</ul>\n<hr>\n<ul>\n<li>Is there ever a place where you call this action manually, using <code>Ash.update</code>. \n Note that AshGraphql and AshJsonApi action calls are <em>not</em> affected as they use <code>Ash.bulk_update</code>.   </li>\n<li>If so, is there ever a case where you call the action with zero inputs, and have it produce zero changing fields.</li>\n<li>If so, could it then produce a side effect. This means you'd have an after_action hook that calls some other resource.</li>\n<li>If so, does that side effect bypass another resource's policies, i.e using <code>authorize?: false</code>, or not providing the same actor.</li>\n</ul>\n<p>Everything above the line can be checked with the provided script. Everything below it, must be checked manually. The script for checking this is available in the \"Might I be affected\" section. </p>\n<p><strong>The script can have false <em>positives</em>, but will not have any false <em>negatives</em>. So if you run the script, and it says \"No potential vulnerabilities found\", then all you need to do is update ash_postgres.</strong> </p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been patched in <code>2.4.10</code> of <code>ash_postgres</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You could:</p>\n<ol>\n<li>Determine that none of your actions are vulnerable using the script.</li>\n<li>Add <code>require_atomic? false</code> to any potentially affected update action</li>\n<li>Replace any usage of <code>Ash.update</code> with <code>Ash.bulk_update</code> for an affected action</li>\n<li>add an update timestamp to your action.</li>\n</ol>\n<h3 id=\"might-i-be-affected\">Might I be affected</h3>\n<p>This gist provides a script you can run to detect if you are potentially vulnerable.</p>\n<p><a href=\"https://gist.github.com/zachdaniel/e49166b765978c48dfaf998d06df436e\">https://gist.github.com/zachdaniel/e49166b765978c48dfaf998d06df436e</a></p>\n<h3 id=\"references\">References</h3>\n<p>Original Report/discovery: <a href=\"https://elixirforum.com/t/empty-update-action-with-policies/66954\">https://elixirforum.com/t/empty-update-action-with-policies/66954</a>\nFix commit: <a href=\"https://github.com/ash-project/ash_postgres/commit/1228fcd851f29a68609e236f7d6a2622a4b5c4ba\">https://github.com/ash-project/ash_postgres/commit/1228fcd851f29a68609e236f7d6a2622a4b5c4ba</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ash-project/ash_postgres/security/advisories/GHSA-hf59-7rwq-785m\">https://github.com/ash-project/ash_postgres/security/advisories/GHSA-hf59-7rwq-785m</a></li>\n<li><a href=\"https://github.com/ash-project/ash_postgres/commit/1228fcd851f29a68609e236f7d6a2622a4b5c4ba\">https://github.com/ash-project/ash_postgres/commit/1228fcd851f29a68609e236f7d6a2622a4b5c4ba</a></li>\n<li><a href=\"https://elixirforum.com/t/empty-update-action-with-policies/66954\">https://elixirforum.com/t/empty-update-action-with-policies/66954</a></li>\n<li><a href=\"https://gist.github.com/zachdaniel/e49166b765978c48dfaf998d06df436e\">https://gist.github.com/zachdaniel/e49166b765978c48dfaf998d06df436e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hf59-7rwq-785m\">https://github.com/advisories/GHSA-hf59-7rwq-785m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hf59-7rwq-785m",
            "title": "[ash_postgres] In AshPostgres, empty, atomic, non-bulk actions, policy bypass for side-effects vulnerability.",
            "date_modified": "2024-10-23T17:22:34.000Z",
            "date_published": "2024-10-23T17:22:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hf59-7rwq-785m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Hex package manager hex_core version 0.3.0 and earlier contains a Signing oracle vulnerability in Package registry verification that can result in Package modifications not detected, allowing code execution. This attack appears to be exploitable via victim fetches packages from malicious/compromised mirror. This vulnerability appears to have been fixed in 0.4.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-1000013\">https://nvd.nist.gov/vuln/detail/CVE-2019-1000013</a></li>\n<li><a href=\"https://github.com/hexpm/hex_core/pull/48\">https://github.com/hexpm/hex_core/pull/48</a></li>\n<li><a href=\"https://github.com/hexpm/hex_core/pull/51\">https://github.com/hexpm/hex_core/pull/51</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q3cc-rr2c-87r6\">https://github.com/advisories/GHSA-q3cc-rr2c-87r6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q3cc-rr2c-87r6",
            "title": "[hex_core] Hex authenticity of signed packages not validated",
            "date_modified": "2024-05-02T12:18:23.000Z",
            "date_published": "2022-05-13T01:07:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q3cc-rr2c-87r6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>erlang-jose (aka JOSE for Erlang and Elixir) through 1.11.6 allow attackers to cause a denial of service (CPU consumption) via a large p2c (aka PBES2 Count) value in a JOSE header.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50966\">https://nvd.nist.gov/vuln/detail/CVE-2023-50966</a></li>\n<li><a href=\"https://github.com/P3ngu1nW/CVE_Request/blob/main/erlang-jose.md\">https://github.com/P3ngu1nW/CVE_Request/blob/main/erlang-jose.md</a></li>\n<li><a href=\"https://github.com/potatosalad/erlang-jose\">https://github.com/potatosalad/erlang-jose</a></li>\n<li><a href=\"https://hexdocs.pm/jose/JOSE.html\">https://hexdocs.pm/jose/JOSE.html</a></li>\n<li><a href=\"https://github.com/potatosalad/erlang-jose/commit/718d213f07b08056737923f8063d5df56dcb66ae\">https://github.com/potatosalad/erlang-jose/commit/718d213f07b08056737923f8063d5df56dcb66ae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9mg4-v392-8j68\">https://github.com/advisories/GHSA-9mg4-v392-8j68</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9mg4-v392-8j68",
            "title": "[jose] erlang-jose vulnerable to denial of service via large p2c value",
            "date_modified": "2024-04-10T21:19:23.000Z",
            "date_published": "2024-03-19T15:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9mg4-v392-8j68"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>socket/transport.ex in Phoenix before 1.6.14 mishandles check_origin wildcarding. NOTE: LiveView applications are unaffected by default because of the presence of a LiveView CSRF token.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-42975\">https://nvd.nist.gov/vuln/detail/CVE-2022-42975</a></li>\n<li><a href=\"https://github.com/phoenixframework/phoenix/commit/6e7185b33a59e0b1d1c0b4223adf340a73e963ae\">https://github.com/phoenixframework/phoenix/commit/6e7185b33a59e0b1d1c0b4223adf340a73e963ae</a></li>\n<li><a href=\"https://hexdocs.pm/phoenix/1.6.14/changelog.html#1-6-14-2022-10-10\">https://hexdocs.pm/phoenix/1.6.14/changelog.html#1-6-14-2022-10-10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8f7-22gq-m7j9\">https://github.com/advisories/GHSA-p8f7-22gq-m7j9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8f7-22gq-m7j9",
            "title": "[phoenix] Phoenix before 1.6.14 mishandles check_origin wildcarding",
            "date_modified": "2024-04-10T18:37:56.000Z",
            "date_published": "2022-10-17T12:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8f7-22gq-m7j9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>DOS by Atom exhaustion is possible by calling <code>oidcc_provider_configuration_worker:get_provider_configuration/1</code> or <code>oidcc_provider_configuration_worker:get_jwks/1</code>.</p>\n<p>Since the name is usually provided as a static value in the application using <code>oidcc</code>, this is unlikely to be exploited.</p>\n<h3 id=\"details\">Details</h3>\n<p>Example to illustrate the vulnerability.</p>\n<pre><code class=\"language-erlang\">{ok, Claims} =\n  oidcc:retrieve_userinfo(\n    Token,\n    myapp_oidcc_config_provider,\n    &lt;&lt;\"client_id\"&gt;&gt;,\n    &lt;&lt;\"client_secret\"&gt;&gt;,\n    #{}\n  )\n</code></pre>\n<p>The vulnerability is present in <code>oidcc_provider_configuration_worker:get_ets_table_name/1</code>.\nThe function <code>get_ets_table_name</code> is calling <code>erlang:list_to_atom/1</code>.</p>\n<p><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></p>\n<p>There might be a case (Very highly improbable) where the 2nd argument of\n<code>oidcc_provider_configuration_worker:get_*/1</code> is called with a different atom each time which eventually leads to\nthe atom table filling up and the node crashing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>3.0.2</code>, <code>3.1.2</code> &amp; <code>3.2.0-beta.3</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Make sure only valid provider configuration worker names are passed to the functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c\">https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649\">https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a\">https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a</a></li>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31209\">https://nvd.nist.gov/vuln/detail/CVE-2024-31209</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p",
            "title": "[oidcc] OpenID Connect client Atom Exhaustion in provider configuration worker ets table location",
            "date_modified": "2024-04-04T20:24:41.000Z",
            "date_published": "2024-04-03T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>DOS by Atom exhaustion is possible by calling <code>oidcc_provider_configuration_worker:get_provider_configuration/1</code> or <code>oidcc_provider_configuration_worker:get_jwks/1</code>.</p>\n<p>Since the name is usually provided as a static value in the application using <code>oidcc</code>, this is unlikely to be exploited.</p>\n<h3 id=\"details\">Details</h3>\n<p>Example to illustrate the vulnerability.</p>\n<pre><code class=\"language-erlang\">{ok, Claims} =\n  oidcc:retrieve_userinfo(\n    Token,\n    myapp_oidcc_config_provider,\n    &lt;&lt;\"client_id\"&gt;&gt;,\n    &lt;&lt;\"client_secret\"&gt;&gt;,\n    #{}\n  )\n</code></pre>\n<p>The vulnerability is present in <code>oidcc_provider_configuration_worker:get_ets_table_name/1</code>.\nThe function <code>get_ets_table_name</code> is calling <code>erlang:list_to_atom/1</code>.</p>\n<p><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></p>\n<p>There might be a case (Very highly improbable) where the 2nd argument of\n<code>oidcc_provider_configuration_worker:get_*/1</code> is called with a different atom each time which eventually leads to\nthe atom table filling up and the node crashing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>3.0.2</code>, <code>3.1.2</code> &amp; <code>3.2.0-beta.3</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Make sure only valid provider configuration worker names are passed to the functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c\">https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649\">https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a\">https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a</a></li>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31209\">https://nvd.nist.gov/vuln/detail/CVE-2024-31209</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p",
            "title": "[oidcc] OpenID Connect client Atom Exhaustion in provider configuration worker ets table location",
            "date_modified": "2024-04-04T20:24:41.000Z",
            "date_published": "2024-04-03T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>DOS by Atom exhaustion is possible by calling <code>oidcc_provider_configuration_worker:get_provider_configuration/1</code> or <code>oidcc_provider_configuration_worker:get_jwks/1</code>.</p>\n<p>Since the name is usually provided as a static value in the application using <code>oidcc</code>, this is unlikely to be exploited.</p>\n<h3 id=\"details\">Details</h3>\n<p>Example to illustrate the vulnerability.</p>\n<pre><code class=\"language-erlang\">{ok, Claims} =\n  oidcc:retrieve_userinfo(\n    Token,\n    myapp_oidcc_config_provider,\n    &lt;&lt;\"client_id\"&gt;&gt;,\n    &lt;&lt;\"client_secret\"&gt;&gt;,\n    #{}\n  )\n</code></pre>\n<p>The vulnerability is present in <code>oidcc_provider_configuration_worker:get_ets_table_name/1</code>.\nThe function <code>get_ets_table_name</code> is calling <code>erlang:list_to_atom/1</code>.</p>\n<p><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></p>\n<p>There might be a case (Very highly improbable) where the 2nd argument of\n<code>oidcc_provider_configuration_worker:get_*/1</code> is called with a different atom each time which eventually leads to\nthe atom table filling up and the node crashing.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>3.0.2</code>, <code>3.1.2</code> &amp; <code>3.2.0-beta.3</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Make sure only valid provider configuration worker names are passed to the functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/erlef/oidcc/security/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c\">https://github.com/erlef/oidcc/commit/2f304d877c7e0613d6fd952d7feacbf40dbc355c</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649\">https://github.com/erlef/oidcc/commit/48171fb62688fb4eec1ead0884aa501e0aa68649</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a\">https://github.com/erlef/oidcc/commit/ac458ed88dc292aad6fa7343f6a53e73c560fb1a</a></li>\n<li><a href=\"https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html\">https://erlef.github.io/security-wg/secure_coding_and_deployment_hardening/atom_exhaustion.html</a></li>\n<li><a href=\"https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388\">https://github.com/erlef/oidcc/blob/018dbb53dd752cb1e331637d8e0e6a489ba1fae9/src/oidcc_provider_configuration_worker.erl#L385-L388</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31209\">https://nvd.nist.gov/vuln/detail/CVE-2024-31209</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj35-2rgf-cv8p\">https://github.com/advisories/GHSA-mj35-2rgf-cv8p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p",
            "title": "[oidcc] OpenID Connect client Atom Exhaustion in provider configuration worker ets table location",
            "date_modified": "2024-04-04T20:24:41.000Z",
            "date_published": "2024-04-03T16:46:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj35-2rgf-cv8p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In the Samly package before 1.4.0 for Elixir, <code>Samly.State.Store.get_assertion/3</code> can return an expired session, which interferes with access control because Samly.AuthHandler uses a cached session and does not replace it, even after expiry.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-25718\">https://nvd.nist.gov/vuln/detail/CVE-2024-25718</a></li>\n<li><a href=\"https://github.com/dropbox/samly/pull/13\">https://github.com/dropbox/samly/pull/13</a></li>\n<li><a href=\"https://github.com/dropbox/samly/pull/13/commits/812b5c3ad076dc9c9334c1a560c8e6470607d1eb\">https://github.com/dropbox/samly/pull/13/commits/812b5c3ad076dc9c9334c1a560c8e6470607d1eb</a></li>\n<li><a href=\"https://diff.hex.pm/diff/samly/1.3.0..1.4.0\">https://diff.hex.pm/diff/samly/1.3.0..1.4.0</a></li>\n<li><a href=\"https://github.com/dropbox/samly\">https://github.com/dropbox/samly</a></li>\n<li><a href=\"https://github.com/handnot2/samly\">https://github.com/handnot2/samly</a></li>\n<li><a href=\"https://hex.pm/packages/samly\">https://hex.pm/packages/samly</a></li>\n<li><a href=\"https://github.com/dropbox/samly/commit/7637ebeef6c6b88ec2032f5323c32edcebbacbc6\">https://github.com/dropbox/samly/commit/7637ebeef6c6b88ec2032f5323c32edcebbacbc6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h3rw-77w7-92gf\">https://github.com/advisories/GHSA-h3rw-77w7-92gf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h3rw-77w7-92gf",
            "title": "[Samly] Samly access control vulnerability",
            "date_modified": "2024-10-21T21:40:48.000Z",
            "date_published": "2024-02-11T06:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h3rw-77w7-92gf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>mod_pubsub</code> module (mod_pubsub.erl) in ejabberd 2.1.8 and 3.0.0-alpha-3 allows remote authenticated users to cause a denial of service (infinite loop) via a stanza with a publish tag that lacks a node attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2011-4320\">https://nvd.nist.gov/vuln/detail/CVE-2011-4320</a></li>\n<li><a href=\"https://support.process-one.net/browse/EJAB-1498\">https://support.process-one.net/browse/EJAB-1498</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2011/11/19/1\">http://www.openwall.com/lists/oss-security/2011/11/19/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2011/11/19/2\">http://www.openwall.com/lists/oss-security/2011/11/19/2</a></li>\n<li><a href=\"http://www.process-one.net/en/ejabberd/release_notes/release_note_ejabberd_2.1.9\">http://www.process-one.net/en/ejabberd/release_notes/release_note_ejabberd_2.1.9</a></li>\n<li><a href=\"https://github.com/processone/ejabberd/commit/d3c4eab46f3cd54f7686cfed740d9c130b6801cf\">https://github.com/processone/ejabberd/commit/d3c4eab46f3cd54f7686cfed740d9c130b6801cf</a></li>\n<li><a href=\"https://github.com/processone/ejabberd/commit/d5b4d6785879f0a5192c26f5b5e218aec8104798\">https://github.com/processone/ejabberd/commit/d5b4d6785879f0a5192c26f5b5e218aec8104798</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h3q-v47h-f4rc\">https://github.com/advisories/GHSA-2h3q-v47h-f4rc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h3q-v47h-f4rc",
            "title": "[ejabberd] Ejabberd DoS via malformed stanza",
            "date_modified": "2024-01-19T19:14:35.000Z",
            "date_published": "2022-05-17T05:32:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h3q-v47h-f4rc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>mod_pubsub</code> module (mod_pubsub.erl) in ejabberd 2.1.8 and 3.0.0-alpha-3 allows remote authenticated users to cause a denial of service (infinite loop) via a stanza with a publish tag that lacks a node attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2011-4320\">https://nvd.nist.gov/vuln/detail/CVE-2011-4320</a></li>\n<li><a href=\"https://support.process-one.net/browse/EJAB-1498\">https://support.process-one.net/browse/EJAB-1498</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2011/11/19/1\">http://www.openwall.com/lists/oss-security/2011/11/19/1</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2011/11/19/2\">http://www.openwall.com/lists/oss-security/2011/11/19/2</a></li>\n<li><a href=\"http://www.process-one.net/en/ejabberd/release_notes/release_note_ejabberd_2.1.9\">http://www.process-one.net/en/ejabberd/release_notes/release_note_ejabberd_2.1.9</a></li>\n<li><a href=\"https://github.com/processone/ejabberd/commit/d3c4eab46f3cd54f7686cfed740d9c130b6801cf\">https://github.com/processone/ejabberd/commit/d3c4eab46f3cd54f7686cfed740d9c130b6801cf</a></li>\n<li><a href=\"https://github.com/processone/ejabberd/commit/d5b4d6785879f0a5192c26f5b5e218aec8104798\">https://github.com/processone/ejabberd/commit/d5b4d6785879f0a5192c26f5b5e218aec8104798</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2h3q-v47h-f4rc\">https://github.com/advisories/GHSA-2h3q-v47h-f4rc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2h3q-v47h-f4rc",
            "title": "[ejabberd] Ejabberd DoS via malformed stanza",
            "date_modified": "2024-01-19T19:14:35.000Z",
            "date_published": "2022-05-17T05:32:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2h3q-v47h-f4rc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in kphrx pleroma. It has been classified as problematic. This affects the function <code>Pleroma.Emoji.Pack</code> of the file <code>lib/pleroma/emoji/pack.ex</code>. The manipulation of the argument name leads to path traversal. The complexity of an attack is rather high. The exploitability is told to be difficult. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named 2c795094535537a8607cc0d3b7f076a609636f40. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-242187.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-5588\">https://nvd.nist.gov/vuln/detail/CVE-2023-5588</a></li>\n<li><a href=\"https://github.com/kphrx/pleroma/pull/197\">https://github.com/kphrx/pleroma/pull/197</a></li>\n<li><a href=\"https://github.com/kphrx/pleroma/commit/2c795094535537a8607cc0d3b7f076a609636f40\">https://github.com/kphrx/pleroma/commit/2c795094535537a8607cc0d3b7f076a609636f40</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.242187\">https://vuldb.com/?ctiid.242187</a></li>\n<li><a href=\"https://vuldb.com/?id.242187\">https://vuldb.com/?id.242187</a></li>\n<li><a href=\"https://github.com/kphrx/pleroma/commits/v2.5.3\">https://github.com/kphrx/pleroma/commits/v2.5.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2c28-m2m7-mf55\">https://github.com/advisories/GHSA-2c28-m2m7-mf55</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2c28-m2m7-mf55",
            "title": "[pleroma] Pleroma Path Traversal vulnerability",
            "date_modified": "2024-03-01T14:35:05.000Z",
            "date_published": "2023-10-16T00:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2c28-m2m7-mf55"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In the mtproto_proxy (aka MTProto proxy) component through 0.7.2 for Erlang, a low-privileged remote attacker can access an improperly secured default installation without authenticating and achieve remote command execution ability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45312\">https://nvd.nist.gov/vuln/detail/CVE-2023-45312</a></li>\n<li><a href=\"https://medium.com/@_sadshade/almost-2000-telegram-proxy-servers-are-potentially-vulnerable-to-rce-since-2018-742a455be16b\">https://medium.com/@_sadshade/almost-2000-telegram-proxy-servers-are-potentially-vulnerable-to-rce-since-2018-742a455be16b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-738q-mc72-2q22\">https://github.com/advisories/GHSA-738q-mc72-2q22</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-738q-mc72-2q22",
            "title": "[mtproto_proxy] MTProto proxy remote code execution vulnerability",
            "date_modified": "2023-11-05T05:01:41.000Z",
            "date_published": "2023-10-10T21:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-738q-mc72-2q22"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Stark Bank is a financial technology company that provides services to simplify and automate digital banking, by providing APIs to perform operations such as payments and transfers. In addition, Stark Bank maintains a number of cryptographic libraries to perform cryptographic signing and verification. These popular libraries are meant to be used to integrate with the Stark Bank ecosystem, but are also accessible on popular package manager platforms in order to be used by other projects. The node package manager reports around 16k weekly downloads for the <a href=\"https://www.npmjs.com/package/starkbank-ecdsa\">ecdsa-node</a> implementation while the Python implementation boasts over <a href=\"https://package.wiki/starkbank-ecdsa\">7.3M downloads in the last 90 days on PyPI</a>. A number of these libraries suffer from a vulnerability in the signature verification functions, allowing attackers to forge signatures for arbitrary messages which successfully verify with any public key.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can forge signatures on arbitrary messages that will verify for any public key. This may allow attackers to authenticate as any user within the Stark Bank platform, and bypass signature verification needed to perform operations on the platform, such as send payments and transfer funds. Additionally, the ability for attackers to forge signatures may impact other users and projects using these libraries in different and unforeseen ways.</p>\n<h3 id=\"details\">Details</h3>\n<p>The (slightly simplified) ECDSA verification of a signature <em><strong>(r, s)</strong></em> on a hashed message <em><strong>z</strong></em> with public key <em><strong>Q</strong></em> and curve order <em><strong>n</strong></em> works as follows:</p>\n<p>The (slightly simplified) ECDSA verification of a signature <em><strong>(r, s)</strong></em> on a hashed message <em><strong>z</strong></em> with public key <em><strong>Q</strong></em> and curve order <em><strong>n</strong></em> works as follows:</p>\n<ul>\n<li>Check that <em><strong>r</strong></em> and <em><strong>s</strong></em> are integers in the <em><strong>[1, n-1]</strong></em> range, return Invalid if not.</li>\n<li>Compute <em><strong>u<sub>1</sub> = zs<sup>-1</sup> mod n</strong></em> and <em><strong>u<sub>2</sub> = rs<sup>-1</sup> mod n</strong></em>.</li>\n<li>Compute the elliptic curve point <em><strong>(x, y) = u<sub>1</sub>G + u<sub>2</sub>Q</strong></em>, return Invalid if <em><strong>(x, y)</strong></em> is the point at infinity.</li>\n<li>Return Valid if <em><strong>r ≡ x mod n</strong></em>, Invalid otherwise.</li>\n</ul>\n<p>The ECDSA signature verification functions in the libraries listed above fail to perform the first check, ensuring that the r and s components of the signatures are in the correct range. Specifically, the libraries are not checking that the components of the signature are non-zero, which is an important check mandated by the standard, see X9.62:2005, Section 7.4.1/a:</p>\n<blockquote>\n<ol>\n<li>If <em><strong>r’</strong></em> is not an integer in the interval <em><strong>[1, n-1]</strong></em>, then reject the signature.</li>\n<li>If <em><strong>s’</strong></em> is not an integer in the interval <em><strong>[1, n-1]</strong></em>, then reject the signature.</li>\n</ol>\n</blockquote>\n<p>For example, consider the following excerpt of the verify function from the <a href=\"https://github.com/starkbank/ecdsa-python/blob/v2.0.0/ellipticcurve/ecdsa.py#L34-L41\">ecdsa-python implementation</a>.</p>\n<pre><code class=\"language-python\">def verify(cls, message, signature, publicKey, hashfunc=sha256):\n    byteMessage = hashfunc(toBytes(message)).digest()\n    numberMessage = numberFromByteString(byteMessage)\n    curve = publicKey.curve\n    r = signature.r\n    s = signature.s\n    inv = Math.inv(s, curve.N)\n    u1 = Math.multiply(curve.G, n=(numberMessage * inv) % curve.N, N=curve.N, A=curve.A, P=curve.P)\n    u2 = Math.multiply(publicKey.point, n=(r * inv) % curve.N, N=curve.N, A=curve.A, P=curve.P)\n    add = Math.add(u1, u2, A=curve.A, P=curve.P)\n    modX = add.x % curve.N\n    return r == modX\n</code></pre>\n<p>In that code snippet, the values <code>r</code> and <code>s</code> are extracted from the signature without any range check. An attacker supplying a signature equal to <code>(r, s) = (0, 0)</code> will not see their signature rejected. Proceeding with the verification, this function computes the inverse of the <code>s</code> component. Note that the <code>Math.inv()</code> function returns zero when supplied with a zero input (even though 0 does not admit an inverse). The code then computes the values <code>u1 = inv * numberMessage * G</code> and <code>u2 = inv * r * Q</code>, but since <code>inv</code> is zero, <code>u1</code> and <code>u2</code> will both be zero, i.e., the point at infinity, regardless of the value of numberMessage (the message hash, which we called <em><strong>z</strong></em> above) and <em><strong>Q</strong></em> (the public key). Subsequently, the implementation computes the intermediary curve point add by adding up the two previously computed points, which again results in the point at infinity. The final line checks that the r-component of the signature is equal to the x-coordinate of the curve point, essentially checking that <code>0 == 0</code> for all any message and any public key. Therefore, a signature <code>(r, s) = (0, 0)</code> is deemed valid by the code for any message, and under any public key.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>Users of the different Stark Bank ECDSA libraries should update to the latest versions. Specifically, versions larger or at least equal to the following should be used.</p>\n<ul>\n<li>ecdsa-python: v2.0.1</li>\n<li>ecdsa-java: v1.0.1</li>\n<li>ecdsa-dotnet: v1.3.2</li>\n<li>ecdsa-elixir v1.0.1</li>\n<li>ecdsa-node v1.1.3</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43568\">https://nvd.nist.gov/vuln/detail/CVE-2021-43568</a></li>\n<li><a href=\"https://github.com/starkbank/ecdsa-elixir/releases/tag/v1.0.1\">https://github.com/starkbank/ecdsa-elixir/releases/tag/v1.0.1</a></li>\n<li><a href=\"https://research.nccgroup.com/2021/11/08/technical-advisory-arbitrary-signature-forgery-in-stark-bank-ecdsa-libraries/\">https://research.nccgroup.com/2021/11/08/technical-advisory-arbitrary-signature-forgery-in-stark-bank-ecdsa-libraries/</a></li>\n<li><a href=\"https://github.com/starkbank/ecdsa-elixir/commit/4b960e26768bb698f449eb7686b5664936b70b61\">https://github.com/starkbank/ecdsa-elixir/commit/4b960e26768bb698f449eb7686b5664936b70b61</a></li>\n<li><a href=\"https://github.com/starkbank/ecdsa-elixir/commit/a5168f6d9cfbe0a0a62d92e2e9b1a97235d90343\">https://github.com/starkbank/ecdsa-elixir/commit/a5168f6d9cfbe0a0a62d92e2e9b1a97235d90343</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xx36-6rv4-gj8r\">https://github.com/advisories/GHSA-xx36-6rv4-gj8r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xx36-6rv4-gj8r",
            "title": "[ecdsa-elixir] ecdsa-elixir fails to check signatures, vulnerable to message forging",
            "date_modified": "2023-09-27T21:49:51.000Z",
            "date_published": "2022-05-24T19:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xx36-6rv4-gj8r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Use of <code>Pow.Store.Backend.MnesiaCache</code> is susceptible to session hijacking as expired keys are not being invalidated correctly on startup. A cache key may become expired when all <code>Pow.Store.Backend.MnesiaCache</code> instances have been shut down for a period that is longer than the keys' remaining TTL and the expired key won't be invalidated on startups.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The expired keys, including all expired sessions, can be manually invalidated by running:</p>\n<pre><code class=\"language-elixir\">:mnesia.sync_transaction(fn -&gt;\n  Enum.each(:mnesia.dirty_select(Pow.Store.Backend.MnesiaCache, [{{Pow.Store.Backend.MnesiaCache, :_, :_}, [], [:\"$_\"]}]), fn {_, key,  {_value, expire}} -&gt;\n    ttl = expire - :os.system_time(:millisecond)\n    if ttl &lt; 0, do: :mnesia.delete({Pow.Store.Backend.MnesiaCache, key})\n  end)\nend)\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/pow-auth/pow/commit/15dc525be03c466daa5d2119ca7acdec7b24ed17\">https://github.com/pow-auth/pow/commit/15dc525be03c466daa5d2119ca7acdec7b24ed17</a>\n<a href=\"https://github.com/pow-auth/pow/issues/713\">https://github.com/pow-auth/pow/issues/713</a>\n<a href=\"https://github.com/pow-auth/pow/pull/714\">https://github.com/pow-auth/pow/pull/714</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pow-auth/pow/security/advisories/GHSA-3cjh-p6pw-jhv9\">https://github.com/pow-auth/pow/security/advisories/GHSA-3cjh-p6pw-jhv9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-42446\">https://nvd.nist.gov/vuln/detail/CVE-2023-42446</a></li>\n<li><a href=\"https://github.com/pow-auth/pow/issues/713\">https://github.com/pow-auth/pow/issues/713</a></li>\n<li><a href=\"https://github.com/pow-auth/pow/pull/714\">https://github.com/pow-auth/pow/pull/714</a></li>\n<li><a href=\"https://github.com/pow-auth/pow/commit/15dc525be03c466daa5d2119ca7acdec7b24ed17\">https://github.com/pow-auth/pow/commit/15dc525be03c466daa5d2119ca7acdec7b24ed17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cjh-p6pw-jhv9\">https://github.com/advisories/GHSA-3cjh-p6pw-jhv9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cjh-p6pw-jhv9",
            "title": "[pow] Pow Mnesia cache doesn't invalidate all expired keys on startup",
            "date_modified": "2023-11-04T05:04:49.000Z",
            "date_published": "2023-09-19T17:00:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cjh-p6pw-jhv9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Phoenix team designed <code>Phoenix.Controller.redirect/2</code> to protect against redirects allowing user input to redirect to an external URL where your application code otherwise assumes a local path redirect. This is why the <code>:to</code> option is used for “local” URL redirects and why you must pass the <code>:external</code> option to intentionally allow external URLs to be redirected to. It has been disclosed that carefully crafted user input may be treated by some browsers as an external URL. An attacker can use this vulnerability to aid in social engineering attacks. The most common use would be to create highly believable phishing attacks. For example, the following user input would pass local URL validation, but be treated by Chrome and Firefox as external URLs: \n<code>http://localhost:4000/?redirect=/\\nexample.com</code>\nNot all browsers are affected, but latest Chrome and Firefox will issue a get request for <code>example.com</code> and successfully redirect externally</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-1000163\">https://nvd.nist.gov/vuln/detail/CVE-2017-1000163</a></li>\n<li><a href=\"https://elixirforum.com/t/security-releases-for-phoenix/4143\">https://elixirforum.com/t/security-releases-for-phoenix/4143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cmfh-8f8r-fj96\">https://github.com/advisories/GHSA-cmfh-8f8r-fj96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96",
            "title": "[phoenix] Phoenix Arbitrary URL Redirect",
            "date_modified": "2023-09-07T23:06:09.000Z",
            "date_published": "2022-04-12T21:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Phoenix team designed <code>Phoenix.Controller.redirect/2</code> to protect against redirects allowing user input to redirect to an external URL where your application code otherwise assumes a local path redirect. This is why the <code>:to</code> option is used for “local” URL redirects and why you must pass the <code>:external</code> option to intentionally allow external URLs to be redirected to. It has been disclosed that carefully crafted user input may be treated by some browsers as an external URL. An attacker can use this vulnerability to aid in social engineering attacks. The most common use would be to create highly believable phishing attacks. For example, the following user input would pass local URL validation, but be treated by Chrome and Firefox as external URLs: \n<code>http://localhost:4000/?redirect=/\\nexample.com</code>\nNot all browsers are affected, but latest Chrome and Firefox will issue a get request for <code>example.com</code> and successfully redirect externally</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-1000163\">https://nvd.nist.gov/vuln/detail/CVE-2017-1000163</a></li>\n<li><a href=\"https://elixirforum.com/t/security-releases-for-phoenix/4143\">https://elixirforum.com/t/security-releases-for-phoenix/4143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cmfh-8f8r-fj96\">https://github.com/advisories/GHSA-cmfh-8f8r-fj96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96",
            "title": "[phoenix] Phoenix Arbitrary URL Redirect",
            "date_modified": "2023-09-07T23:06:09.000Z",
            "date_published": "2022-04-12T21:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Phoenix team designed <code>Phoenix.Controller.redirect/2</code> to protect against redirects allowing user input to redirect to an external URL where your application code otherwise assumes a local path redirect. This is why the <code>:to</code> option is used for “local” URL redirects and why you must pass the <code>:external</code> option to intentionally allow external URLs to be redirected to. It has been disclosed that carefully crafted user input may be treated by some browsers as an external URL. An attacker can use this vulnerability to aid in social engineering attacks. The most common use would be to create highly believable phishing attacks. For example, the following user input would pass local URL validation, but be treated by Chrome and Firefox as external URLs: \n<code>http://localhost:4000/?redirect=/\\nexample.com</code>\nNot all browsers are affected, but latest Chrome and Firefox will issue a get request for <code>example.com</code> and successfully redirect externally</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-1000163\">https://nvd.nist.gov/vuln/detail/CVE-2017-1000163</a></li>\n<li><a href=\"https://elixirforum.com/t/security-releases-for-phoenix/4143\">https://elixirforum.com/t/security-releases-for-phoenix/4143</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cmfh-8f8r-fj96\">https://github.com/advisories/GHSA-cmfh-8f8r-fj96</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96",
            "title": "[phoenix] Phoenix Arbitrary URL Redirect",
            "date_modified": "2023-09-07T23:06:09.000Z",
            "date_published": "2022-04-12T21:16:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cmfh-8f8r-fj96"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>On Windows, it is possible to open a <code>livebook://</code> link from a browser which opens Livebook Desktop and triggers arbitrary code execution on victim's machine.</p>\n<p>Any user using Livebook Desktop on Windows is potentially vulnerable to arbitrary code execution when they expect Livebook to be opened from browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/livebook-dev/livebook/security/advisories/GHSA-564w-97r7-c6p9\">https://github.com/livebook-dev/livebook/security/advisories/GHSA-564w-97r7-c6p9</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/commit/2e11b59f677c6ed3b6aa82dad412a8b3406ffdf1\">https://github.com/livebook-dev/livebook/commit/2e11b59f677c6ed3b6aa82dad412a8b3406ffdf1</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/commit/beb10daaadcc765f0380e436bd7cd5f74cf086c8\">https://github.com/livebook-dev/livebook/commit/beb10daaadcc765f0380e436bd7cd5f74cf086c8</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/releases/tag/v0.8.2\">https://github.com/livebook-dev/livebook/releases/tag/v0.8.2</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/releases/tag/v0.9.3\">https://github.com/livebook-dev/livebook/releases/tag/v0.9.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-35174\">https://nvd.nist.gov/vuln/detail/CVE-2023-35174</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-564w-97r7-c6p9\">https://github.com/advisories/GHSA-564w-97r7-c6p9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-564w-97r7-c6p9",
            "title": "[livebook] Livebook Desktop's protocol handler can be exploited to execute arbitrary command on Windows",
            "date_modified": "2023-11-11T05:06:31.000Z",
            "date_published": "2023-06-21T22:07:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-564w-97r7-c6p9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>On Windows, it is possible to open a <code>livebook://</code> link from a browser which opens Livebook Desktop and triggers arbitrary code execution on victim's machine.</p>\n<p>Any user using Livebook Desktop on Windows is potentially vulnerable to arbitrary code execution when they expect Livebook to be opened from browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/livebook-dev/livebook/security/advisories/GHSA-564w-97r7-c6p9\">https://github.com/livebook-dev/livebook/security/advisories/GHSA-564w-97r7-c6p9</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/commit/2e11b59f677c6ed3b6aa82dad412a8b3406ffdf1\">https://github.com/livebook-dev/livebook/commit/2e11b59f677c6ed3b6aa82dad412a8b3406ffdf1</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/commit/beb10daaadcc765f0380e436bd7cd5f74cf086c8\">https://github.com/livebook-dev/livebook/commit/beb10daaadcc765f0380e436bd7cd5f74cf086c8</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/releases/tag/v0.8.2\">https://github.com/livebook-dev/livebook/releases/tag/v0.8.2</a></li>\n<li><a href=\"https://github.com/livebook-dev/livebook/releases/tag/v0.9.3\">https://github.com/livebook-dev/livebook/releases/tag/v0.9.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-35174\">https://nvd.nist.gov/vuln/detail/CVE-2023-35174</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-564w-97r7-c6p9\">https://github.com/advisories/GHSA-564w-97r7-c6p9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-564w-97r7-c6p9",
            "title": "[livebook] Livebook Desktop's protocol handler can be exploited to execute arbitrary command on Windows",
            "date_modified": "2023-11-11T05:06:31.000Z",
            "date_published": "2023-06-21T22:07:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-564w-97r7-c6p9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Ecto 2.2.0 lacks a certain protection mechanism associated with the interaction between <code>is_nil</code> and <code>raise</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-20166\">https://nvd.nist.gov/vuln/detail/CVE-2017-20166</a></li>\n<li><a href=\"https://github.com/elixir-ecto/ecto/pull/2125\">https://github.com/elixir-ecto/ecto/pull/2125</a></li>\n<li><a href=\"https://github.com/elixir-ecto/ecto/commit/db55b0cba6525c24ebddc88ef9ae0c1c00620250\">https://github.com/elixir-ecto/ecto/commit/db55b0cba6525c24ebddc88ef9ae0c1c00620250</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2xxx-fhc8-9qvq\">https://github.com/advisories/GHSA-2xxx-fhc8-9qvq</a></li>\n<li><a href=\"https://groups.google.com/forum/#!topic/elixir-ecto/0m4NPfg_MMU\">https://groups.google.com/forum/#!topic/elixir-ecto/0m4NPfg_MMU</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4r2f-6fm9-2qgh\">https://github.com/advisories/GHSA-4r2f-6fm9-2qgh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4r2f-6fm9-2qgh",
            "title": "[ecto] Ecto lacks a protection mechanism",
            "date_modified": "2023-01-29T05:03:47.000Z",
            "date_published": "2023-01-10T06:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4r2f-6fm9-2qgh"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}