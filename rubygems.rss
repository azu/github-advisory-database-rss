<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2024-03-16T11:01:16.476Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[turbo_boost-commands] TurboBoost Commands vulnerable to arbitrary method invocation]]></title>
        <id>https://github.com/advisories/GHSA-mp76-7w5v-pr75</id>
        <link href="https://github.com/advisories/GHSA-mp76-7w5v-pr75"/>
        <updated>2024-03-15T19:53:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.</p>
<h4 id="details">Details</h4>
<p>Commands verify that the class must be a <code>Command</code> and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  </p>
<h3 id="patches">Patches</h3>
<p>Patched in the following versions.</p>
<ul>
<li>0.1.3<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3">Ruby GEM</a></li>
</ul>
</li>
<li>0.2.2<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2">Ruby GEM</a></li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library.</p>
<pre><code class="language-ruby">class ApplicationCommand &lt; TurboBoost::Commands::Command
  before_command do
    method_name = params[:name].include?("#") ? params[:name].split("#").last : :perform
    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }
    throw :abort unless allowed # ← blocks invocation
    # raise "Invalid Command" unless allowed # ← blocks invocation
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75">https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28181">https://nvd.nist.gov/vuln/detail/CVE-2024-28181</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477">https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba">https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba</a></li>
<li><a href="https://github.com/advisories/GHSA-mp76-7w5v-pr75">https://github.com/advisories/GHSA-mp76-7w5v-pr75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp76-7w5v-pr75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T19:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[turbo_boost-commands] TurboBoost Commands vulnerable to arbitrary method invocation]]></title>
        <id>https://github.com/advisories/GHSA-mp76-7w5v-pr75</id>
        <link href="https://github.com/advisories/GHSA-mp76-7w5v-pr75"/>
        <updated>2024-03-15T19:53:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.</p>
<h4 id="details">Details</h4>
<p>Commands verify that the class must be a <code>Command</code> and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  </p>
<h3 id="patches">Patches</h3>
<p>Patched in the following versions.</p>
<ul>
<li>0.1.3<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3">Ruby GEM</a></li>
</ul>
</li>
<li>0.2.2<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2">Ruby GEM</a></li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library.</p>
<pre><code class="language-ruby">class ApplicationCommand &lt; TurboBoost::Commands::Command
  before_command do
    method_name = params[:name].include?("#") ? params[:name].split("#").last : :perform
    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }
    throw :abort unless allowed # ← blocks invocation
    # raise "Invalid Command" unless allowed # ← blocks invocation
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75">https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28181">https://nvd.nist.gov/vuln/detail/CVE-2024-28181</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477">https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba">https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba</a></li>
<li><a href="https://github.com/advisories/GHSA-mp76-7w5v-pr75">https://github.com/advisories/GHSA-mp76-7w5v-pr75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp76-7w5v-pr75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T19:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI gem has ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hww2-5g85-429m</id>
        <link href="https://github.com/advisories/GHSA-hww2-5g85-429m"/>
        <updated>2024-03-14T22:14:30.000Z</updated>
        <content type="html"><![CDATA[<p>A ReDoS issue was discovered in the URI component before 0.12.2 for Ruby. The URI parser mishandles invalid URLs that have specific characters. There is an increase in execution time for parsing strings to URI objects with <code>rfc2396_parser.rb</code> and <code>rfc3986_parser.rb</code>.</p>
<p>NOTE: this issue exists becuse of an incomplete fix for CVE-2023-28755. Version 0.10.3 is also a fixed version.</p>
<p><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617/">The Ruby advisory recommends</a> updating the uri gem to 0.12.2. In order to ensure compatibility with the bundled version in older Ruby series, you may update as follows instead:</p>
<ul>
<li>For Ruby 3.0: Update to uri 0.10.3</li>
<li>For Ruby 3.1 and 3.2: Update to uri 0.12.2.</li>
</ul>
<p>You can use gem update uri to update it. If you are using bundler, please add gem <code>uri</code>, <code>&gt;= 0.12.2</code> (or other version mentioned above) to your Gemfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36617">https://nvd.nist.gov/vuln/detail/CVE-2023-36617</a></li>
<li><a href="https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0">https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0</a></li>
<li><a href="https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f">https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f</a></li>
<li><a href="https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3">https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3</a></li>
<li><a href="https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa">https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml</a></li>
<li><a href="https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb">https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb</a></li>
<li><a href="https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6">https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6</a></li>
<li><a href="https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c">https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c</a></li>
<li><a href="https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921">https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230725-0002">https://security.netapp.com/advisory/ntap-20230725-0002</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617">https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617</a></li>
<li><a href="https://github.com/advisories/GHSA-hww2-5g85-429m">https://github.com/advisories/GHSA-hww2-5g85-429m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hww2-5g85-429m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T15:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI gem has ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hww2-5g85-429m</id>
        <link href="https://github.com/advisories/GHSA-hww2-5g85-429m"/>
        <updated>2024-03-14T22:14:30.000Z</updated>
        <content type="html"><![CDATA[<p>A ReDoS issue was discovered in the URI component before 0.12.2 for Ruby. The URI parser mishandles invalid URLs that have specific characters. There is an increase in execution time for parsing strings to URI objects with <code>rfc2396_parser.rb</code> and <code>rfc3986_parser.rb</code>.</p>
<p>NOTE: this issue exists becuse of an incomplete fix for CVE-2023-28755. Version 0.10.3 is also a fixed version.</p>
<p><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617/">The Ruby advisory recommends</a> updating the uri gem to 0.12.2. In order to ensure compatibility with the bundled version in older Ruby series, you may update as follows instead:</p>
<ul>
<li>For Ruby 3.0: Update to uri 0.10.3</li>
<li>For Ruby 3.1 and 3.2: Update to uri 0.12.2.</li>
</ul>
<p>You can use gem update uri to update it. If you are using bundler, please add gem <code>uri</code>, <code>&gt;= 0.12.2</code> (or other version mentioned above) to your Gemfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36617">https://nvd.nist.gov/vuln/detail/CVE-2023-36617</a></li>
<li><a href="https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0">https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0</a></li>
<li><a href="https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f">https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f</a></li>
<li><a href="https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3">https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3</a></li>
<li><a href="https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa">https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml</a></li>
<li><a href="https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb">https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb</a></li>
<li><a href="https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6">https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6</a></li>
<li><a href="https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c">https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c</a></li>
<li><a href="https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921">https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230725-0002">https://security.netapp.com/advisory/ntap-20230725-0002</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617">https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617</a></li>
<li><a href="https://github.com/advisories/GHSA-hww2-5g85-429m">https://github.com/advisories/GHSA-hww2-5g85-429m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hww2-5g85-429m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T15:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI gem has ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hww2-5g85-429m</id>
        <link href="https://github.com/advisories/GHSA-hww2-5g85-429m"/>
        <updated>2024-03-14T22:14:30.000Z</updated>
        <content type="html"><![CDATA[<p>A ReDoS issue was discovered in the URI component before 0.12.2 for Ruby. The URI parser mishandles invalid URLs that have specific characters. There is an increase in execution time for parsing strings to URI objects with <code>rfc2396_parser.rb</code> and <code>rfc3986_parser.rb</code>.</p>
<p>NOTE: this issue exists becuse of an incomplete fix for CVE-2023-28755. Version 0.10.3 is also a fixed version.</p>
<p><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617/">The Ruby advisory recommends</a> updating the uri gem to 0.12.2. In order to ensure compatibility with the bundled version in older Ruby series, you may update as follows instead:</p>
<ul>
<li>For Ruby 3.0: Update to uri 0.10.3</li>
<li>For Ruby 3.1 and 3.2: Update to uri 0.12.2.</li>
</ul>
<p>You can use gem update uri to update it. If you are using bundler, please add gem <code>uri</code>, <code>&gt;= 0.12.2</code> (or other version mentioned above) to your Gemfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36617">https://nvd.nist.gov/vuln/detail/CVE-2023-36617</a></li>
<li><a href="https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0">https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0</a></li>
<li><a href="https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f">https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f</a></li>
<li><a href="https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3">https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3</a></li>
<li><a href="https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa">https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml</a></li>
<li><a href="https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb">https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb</a></li>
<li><a href="https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6">https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6</a></li>
<li><a href="https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c">https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c</a></li>
<li><a href="https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921">https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230725-0002">https://security.netapp.com/advisory/ntap-20230725-0002</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617">https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617</a></li>
<li><a href="https://github.com/advisories/GHSA-hww2-5g85-429m">https://github.com/advisories/GHSA-hww2-5g85-429m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hww2-5g85-429m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T15:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri] URI gem has ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hww2-5g85-429m</id>
        <link href="https://github.com/advisories/GHSA-hww2-5g85-429m"/>
        <updated>2024-03-14T22:14:30.000Z</updated>
        <content type="html"><![CDATA[<p>A ReDoS issue was discovered in the URI component before 0.12.2 for Ruby. The URI parser mishandles invalid URLs that have specific characters. There is an increase in execution time for parsing strings to URI objects with <code>rfc2396_parser.rb</code> and <code>rfc3986_parser.rb</code>.</p>
<p>NOTE: this issue exists becuse of an incomplete fix for CVE-2023-28755. Version 0.10.3 is also a fixed version.</p>
<p><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617/">The Ruby advisory recommends</a> updating the uri gem to 0.12.2. In order to ensure compatibility with the bundled version in older Ruby series, you may update as follows instead:</p>
<ul>
<li>For Ruby 3.0: Update to uri 0.10.3</li>
<li>For Ruby 3.1 and 3.2: Update to uri 0.12.2.</li>
</ul>
<p>You can use gem update uri to update it. If you are using bundler, please add gem <code>uri</code>, <code>&gt;= 0.12.2</code> (or other version mentioned above) to your Gemfile.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36617">https://nvd.nist.gov/vuln/detail/CVE-2023-36617</a></li>
<li><a href="https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0">https://github.com/ruby/uri/commit/3cd938df20db26c9439e9f681aadfb9bbeb6d1c0</a></li>
<li><a href="https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f">https://github.com/ruby/uri/commit/4d02315181d8a485496f1bb107a6ab51d6f3a35f</a></li>
<li><a href="https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3">https://github.com/ruby/uri/commit/7e33934c91b7f8f3ea7b7a4258b468e19f636bc3</a></li>
<li><a href="https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa">https://github.com/ruby/uri/commit/ba36c8a3ecad8c16dd3e60a6da9abd768206c8fa</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/uri/CVE-2023-36617.yml</a></li>
<li><a href="https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb">https://github.com/ruby/uri/commit/05b1e7d026b886e65a60ee35625229da9ec220bb</a></li>
<li><a href="https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6">https://github.com/ruby/uri/commit/38bf797c488bcb4a37fb322bfa84977981863ec6</a></li>
<li><a href="https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c">https://github.com/ruby/uri/commit/70794abc162bb15bb934713b5669713d6700d35c</a></li>
<li><a href="https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921">https://github.com/ruby/uri/commit/9a8e0cc03da964054c2a4ea26b59c53c3bae4921</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230725-0002">https://security.netapp.com/advisory/ntap-20230725-0002</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617">https://www.ruby-lang.org/en/news/2023/06/29/redos-in-uri-CVE-2023-36617</a></li>
<li><a href="https://github.com/advisories/GHSA-hww2-5g85-429m">https://github.com/advisories/GHSA-hww2-5g85-429m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hww2-5g85-429m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-29T15:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[discordrb] discordrb OS Command Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8832-4mm5-x2r6</id>
        <link href="https://github.com/advisories/GHSA-8832-4mm5-x2r6"/>
        <updated>2024-03-14T20:37:58.000Z</updated>
        <content type="html"><![CDATA[<p>discordrb is an implementation of the Discord API using Ruby. In discordrb before commit <code>91e13043ffa</code> the <code>encoder.rb</code> file unsafely constructs a shell string using the file parameter, which can potentially leave clients of discordrb vulnerable to command injection. The library is not directly exploitable: the exploit requires that some client of the library calls the vulnerable method with user input. However, if unsafe input reaches the library method, then an attacker can execute arbitrary shell commands on the host machine. Full impact will depend on the permissions of the process running the <code>discordrb</code> library and will likely not be total system access. This issue has been addressed in code, but a new release of the <code>discordrb</code> gem has not been uploaded to rubygems. This issue is also tracked as <code>GHSL-2022-094</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28102">https://nvd.nist.gov/vuln/detail/CVE-2023-28102</a></li>
<li><a href="https://github.com/shardlab/discordrb/commit/91e13043ffa89227c3fcdc3408f06da237d28c95">https://github.com/shardlab/discordrb/commit/91e13043ffa89227c3fcdc3408f06da237d28c95</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/discordrb/CVE-2023-28102.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/discordrb/CVE-2023-28102.yml</a></li>
<li><a href="https://securitylab.github.com/advisories">https://securitylab.github.com/advisories</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-094_discordrb">https://securitylab.github.com/advisories/GHSL-2022-094_discordrb</a></li>
<li><a href="https://github.com/advisories/GHSA-8832-4mm5-x2r6">https://github.com/advisories/GHSA-8832-4mm5-x2r6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8832-4mm5-x2r6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-14T20:37:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-13T22:19:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-13T22:19:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-14T21:40:43.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/phlex/CVE-2024-28199.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json-jwt] json-jwt allows bypass of identity checks via a sign/encryption confusion attack]]></title>
        <id>https://github.com/advisories/GHSA-c8v6-786g-vjx6</id>
        <link href="https://github.com/advisories/GHSA-c8v6-786g-vjx6"/>
        <updated>2024-03-06T23:50:38.000Z</updated>
        <content type="html"><![CDATA[<p>The json-jwt (aka JSON::JWT) gem 1.16.x before 1.16.6, 1.15.x before 1.15.3.1 for Ruby sometimes allows bypass of identity checks via a sign/encryption confusion attack. For example, JWE can sometimes be used to bypass JSON::JWT.decode.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51774">https://nvd.nist.gov/vuln/detail/CVE-2023-51774</a></li>
<li><a href="https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md">https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/120">https://github.com/nov/json-jwt/issues/120</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0">https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/121">https://github.com/nov/json-jwt/issues/121</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c">https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c</a></li>
<li><a href="https://github.com/advisories/GHSA-c8v6-786g-vjx6">https://github.com/advisories/GHSA-c8v6-786g-vjx6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8v6-786g-vjx6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-29T03:33:14.000Z</published>
    </entry>
</feed>