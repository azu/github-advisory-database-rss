<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2022-06-01T00:24:39.610Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-05-27T16:36:51.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-05-27T16:36:51.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-05-27T16:36:51.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yajl-ruby] Buffer Overflow in yajl-ruby]]></title>
        <id>https://github.com/advisories/GHSA-jj47-x69x-mxrm</id>
        <link href="https://github.com/advisories/GHSA-jj47-x69x-mxrm"/>
        <updated>2022-05-26T18:54:25.000Z</updated>
        <content type="html"><![CDATA[<p><em>NOTE: A previous patch, 1.4.2, fixed the heap memory issue, but could still lead to a DoS infinite loop. Please update to version 1.4.3</em></p>
<p>The 1.x branch and the 2.x branch of <a href="https://github.com/lloyd/yajl">yajl</a> contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">reallocation logic at yajl_buf.c#L64</a> may result in the <code>need</code> 32bit integer wrapping to 0 when <code>need</code> approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf-&gt;alloc into a small heap chunk.</p>
<p>These integers are declared as <code>size_t</code> in the 2.x branch of <code>yajl</code>, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which <code>size_t</code> is a 32bit integer.</p>
<p>Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption.</p>
<h3 id="impact">Impact</h3>
<p>We rate this as a moderate severity vulnerability which mostly impacts process availability as we believe exploitation for arbitrary code execution to be unlikely.</p>
<h3 id="patches">Patches</h3>
<p>Patched in yajl-ruby 1.4.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing large inputs to YAJL</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/brianmario/yajl-ruby/issues">yajl-ruby</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm">https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24795">https://nvd.nist.gov/vuln/detail/CVE-2022-24795</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6">https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></li>
<li><a href="https://github.com/advisories/GHSA-jj47-x69x-mxrm">https://github.com/advisories/GHSA-jj47-x69x-mxrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj47-x69x-mxrm</uri>
        </author>
        <published>2022-04-05T15:55:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[random_password_generator] Insecure PRNG use in random_password_generator]]></title>
        <id>https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</id>
        <link href="https://github.com/advisories/GHSA-ggfx-h9xj-5v9c"/>
        <updated>2022-05-31T23:27:44.000Z</updated>
        <content type="html"><![CDATA[<p>The random_password_generator (aka RandomPasswordGenerator) gem through 1.0.0 for Ruby uses Kernel#rand to generate passwords, which, due to its cyclic nature, can facilitate password prediction.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25061">https://nvd.nist.gov/vuln/detail/CVE-2019-25061</a></li>
<li><a href="https://github.com/bvsatyaram/random_password_generator/pull/1">https://github.com/bvsatyaram/random_password_generator/pull/1</a></li>
<li><a href="https://github.com/bvsatyaram/random_password_generator/blob/2855e8d7d8803dbb580ddd6cf13846394eb4530e/lib/random_password_generator.rb#L23">https://github.com/bvsatyaram/random_password_generator/blob/2855e8d7d8803dbb580ddd6cf13846394eb4530e/lib/random_password_generator.rb#L23</a></li>
<li><a href="https://ruby-doc.org/core-3.1.2/Random.html">https://ruby-doc.org/core-3.1.2/Random.html</a></li>
<li><a href="https://stackoverflow.com/questions/42170239/security-of-rand-in-ruby-compared-to-other-methods/42170560">https://stackoverflow.com/questions/42170239/security-of-rand-in-ruby-compared-to-other-methods/42170560</a></li>
<li><a href="https://github.com/advisories/GHSA-ggfx-h9xj-5v9c">https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</uri>
        </author>
        <published>2022-05-19T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Improper Handling of Unexpected Data Type in Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-xh29-r2w5-wx8m</id>
        <link href="https://github.com/advisories/GHSA-xh29-r2w5-wx8m"/>
        <updated>2022-05-23T23:15:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Nokogiri <code>&lt; v1.13.6</code> does not type-check all inputs into the XML and HTML4 SAX parsers. For CRuby users, this may allow specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory.</p>
<h3 id="severity">Severity</h3>
<p>The Nokogiri maintainers have evaluated this as <strong>High 8.2</strong> (CVSS3.1).</p>
<h3 id="mitigation">Mitigation</h3>
<p>CRuby users should upgrade to Nokogiri <code>&gt;= 1.13.6</code>.</p>
<p>JRuby users are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To avoid this vulnerability in affected applications, ensure the untrusted input is a <code>String</code> by calling <code>#to_s</code> or equivalent.</p>
<h3 id="credit">Credit</h3>
<p>This vulnerability was responsibly reported by @agustingianni and the Github Security Lab.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xh29-r2w5-wx8m">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xh29-r2w5-wx8m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29181">https://nvd.nist.gov/vuln/detail/CVE-2022-29181</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267">https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.6">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.6</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-031_GHSL-2022-032_Nokogiri/">https://securitylab.github.com/advisories/GHSL-2022-031_GHSL-2022-032_Nokogiri/</a></li>
<li><a href="https://github.com/advisories/GHSA-xh29-r2w5-wx8m">https://github.com/advisories/GHSA-xh29-r2w5-wx8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xh29-r2w5-wx8m</uri>
        </author>
        <published>2022-05-23T23:15:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Integer Overflow or Wraparound in libxml2 affects Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-cgx6-hpwq-fhv5</id>
        <link href="https://github.com/advisories/GHSA-cgx6-hpwq-fhv5"/>
        <updated>2022-05-18T20:06:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Nokogiri v1.13.5 upgrades the packaged version of its dependency libxml2 from v2.9.13 to <a href="https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14">v2.9.14</a>.</p>
<p>libxml2 v2.9.14 addresses <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29824">CVE-2022-29824</a>. This version also includes several security-related bug fixes for which CVEs were not created, including a potential double-free, potential memory leaks, and integer-overflow.</p>
<p>Please note that this advisory only applies to the CRuby implementation of Nokogiri <code>&lt; 1.13.5</code>, and only if the <em>packaged</em> libraries are being used. If you've overridden defaults at installation time to use <em>system</em> libraries instead of packaged libraries, you should instead pay attention to your distro's <code>libxml2</code> and <code>libxslt</code> release announcements.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade to Nokogiri <code>&gt;= 1.13.5</code>.</p>
<p>Users who are unable to upgrade Nokogiri may also choose a more complicated mitigation: compile and link Nokogiri against external libraries libxml2 <code>&gt;= 2.9.14</code> which will also address these same issues.</p>
<h3 id="impact">Impact</h3>
<h4 id="libxml2-cve-2022-29824">libxml2 <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29824">CVE-2022-29824</a></h4>
<ul>
<li><strong>CVSS3 score</strong>:<ul>
<li>Unspecified upstream</li>
<li>Nokogiri maintainers evaluate at 8.6 (High) (<a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H">CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H</a>). Note that this is different from the CVSS assessed by NVD.</li>
</ul>
</li>
<li><strong>Type</strong>: Denial of service, information disclosure</li>
<li><strong>Description</strong>: In libxml2 before 2.9.14, several buffer handling functions in buf.c (xmlBuf*) and tree.c (xmlBuffer*) don't check for integer overflows. This can result in out-of-bounds memory writes. Exploitation requires a victim to open a crafted, multi-gigabyte XML file. Other software using libxml2's buffer functions, for example libxslt through 1.1.35, is affected as well.</li>
<li><strong>Fixed</strong>: <a href="https://gitlab.gnome.org/GNOME/libxml2/-/commit/2554a24">https://gitlab.gnome.org/GNOME/libxml2/-/commit/2554a24</a></li>
</ul>
<p>All versions of libml2 prior to v2.9.14 are affected.</p>
<p>Applications parsing or serializing multi-gigabyte documents (in excess of INT_MAX bytes) may be vulnerable to an integer overflow bug in buffer handling that could lead to exposure of confidential data, modification of unrelated data, or a segmentation fault resulting in a denial-of-service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14">libxml2 v2.9.14 release notes</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29824">CVE-2022-29824</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/119.html">CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-cgx6-hpwq-fhv5">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-cgx6-hpwq-fhv5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29824">https://nvd.nist.gov/vuln/detail/CVE-2022-29824</a></li>
<li><a href="https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14">https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14</a></li>
<li><a href="https://github.com/advisories/GHSA-cgx6-hpwq-fhv5">https://github.com/advisories/GHSA-cgx6-hpwq-fhv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cgx6-hpwq-fhv5</uri>
        </author>
        <published>2022-05-18T20:06:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[csv-safe] CSV-Safe improperly filters special characters potentially leading to CSV injection]]></title>
        <id>https://github.com/advisories/GHSA-f55g-x8qq-2569</id>
        <link href="https://github.com/advisories/GHSA-f55g-x8qq-2569"/>
        <updated>2022-05-18T19:20:00.000Z</updated>
        <content type="html"><![CDATA[<p>CSV-Safe gem &lt; 3.0.0 doesn't filter out special characters which could trigger CSV Injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-28481">https://nvd.nist.gov/vuln/detail/CVE-2022-28481</a></li>
<li><a href="https://github.com/zvory/csv-safe/issues/7">https://github.com/zvory/csv-safe/issues/7</a></li>
<li><a href="https://github.com/zvory/csv-safe/pull/8">https://github.com/zvory/csv-safe/pull/8</a></li>
<li><a href="https://github.com/WeblateOrg/weblate/commit/d9e136ff228e3760fd6dd7572869ac38e9a81809">https://github.com/WeblateOrg/weblate/commit/d9e136ff228e3760fd6dd7572869ac38e9a81809</a></li>
<li><a href="https://hackerone.com/reports/223999">https://hackerone.com/reports/223999</a></li>
<li><a href="https://github.com/advisories/GHSA-f55g-x8qq-2569">https://github.com/advisories/GHSA-f55g-x8qq-2569</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f55g-x8qq-2569</uri>
        </author>
        <published>2022-05-03T00:00:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sinatra] sinatra does not validate expanded path matches]]></title>
        <id>https://github.com/advisories/GHSA-qp49-3pvw-x4m5</id>
        <link href="https://github.com/advisories/GHSA-qp49-3pvw-x4m5"/>
        <updated>2022-05-10T14:09:42.000Z</updated>
        <content type="html"><![CDATA[<p>Sinatra before 2.2.0 does not validate that the expanded path matches public_dir when serving static files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29970">https://nvd.nist.gov/vuln/detail/CVE-2022-29970</a></li>
<li><a href="https://github.com/sinatra/sinatra/pull/1683/commits/462c3ca1db53ed3cfc394cf5948e9c948ad1c10e">https://github.com/sinatra/sinatra/pull/1683/commits/462c3ca1db53ed3cfc394cf5948e9c948ad1c10e</a></li>
<li><a href="https://github.com/skylightio/skylight-ruby/pull/294">https://github.com/skylightio/skylight-ruby/pull/294</a></li>
<li><a href="https://github.com/advisories/GHSA-qp49-3pvw-x4m5">https://github.com/advisories/GHSA-qp49-3pvw-x4m5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qp49-3pvw-x4m5</uri>
        </author>
        <published>2022-05-03T00:00:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gibbon] Server side request forgery in gibbon]]></title>
        <id>https://github.com/advisories/GHSA-vx9g-377x-xwxq</id>
        <link href="https://github.com/advisories/GHSA-vx9g-377x-xwxq"/>
        <updated>2022-05-02T22:31:39.000Z</updated>
        <content type="html"><![CDATA[<p>Gibbon v3.4.3 and below allows attackers to execute a Server-Side Request Forgery (SSRF) via a crafted URL. This issue has been resolved in version 3.4.4</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27311">https://nvd.nist.gov/vuln/detail/CVE-2022-27311</a></li>
<li><a href="https://github.com/amro/gibbon/pull/321">https://github.com/amro/gibbon/pull/321</a></li>
<li><a href="https://github.com/amro/gibbon/pull/321#issuecomment-1113147155">https://github.com/amro/gibbon/pull/321#issuecomment-1113147155</a></li>
<li><a href="https://github.com/advisories/GHSA-vx9g-377x-xwxq">https://github.com/advisories/GHSA-vx9g-377x-xwxq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx9g-377x-xwxq</uri>
        </author>
        <published>2022-04-26T00:00:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[blazer] SQL injection in blazer]]></title>
        <id>https://github.com/advisories/GHSA-qf9q-q4hh-qph3</id>
        <link href="https://github.com/advisories/GHSA-qf9q-q4hh-qph3"/>
        <updated>2022-04-29T21:07:18.000Z</updated>
        <content type="html"><![CDATA[<p>Blazer before 2.6.0 allows SQL Injection. In certain circumstances, an attacker could get a user to run a query they would not have normally run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29498">https://nvd.nist.gov/vuln/detail/CVE-2022-29498</a></li>
<li><a href="https://github.com/ankane/blazer/issues/392">https://github.com/ankane/blazer/issues/392</a></li>
<li><a href="https://github.com/advisories/GHSA-qf9q-q4hh-qph3">https://github.com/advisories/GHSA-qf9q-q4hh-qph3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qf9q-q4hh-qph3</uri>
        </author>
        <published>2022-04-22T00:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[git] Command injection in ruby-git]]></title>
        <id>https://github.com/advisories/GHSA-69p6-wvmq-27gg</id>
        <link href="https://github.com/advisories/GHSA-69p6-wvmq-27gg"/>
        <updated>2022-04-28T21:13:23.000Z</updated>
        <content type="html"><![CDATA[<p>The package git before 1.11.0 are vulnerable to Command Injection via git argument injection. When calling the fetch(remote = 'origin', opts = {}) function, the remote parameter is passed to the git fetch subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25648">https://nvd.nist.gov/vuln/detail/CVE-2022-25648</a></li>
<li><a href="https://github.com/ruby-git/ruby-git/pull/569">https://github.com/ruby-git/ruby-git/pull/569</a></li>
<li><a href="https://github.com/ruby-git/ruby-git/releases/tag/v1.11.0">https://github.com/ruby-git/ruby-git/releases/tag/v1.11.0</a></li>
<li><a href="https://snyk.io/vuln/SNYK-RUBY-GIT-2421270">https://snyk.io/vuln/SNYK-RUBY-GIT-2421270</a></li>
<li><a href="https://github.com/advisories/GHSA-69p6-wvmq-27gg">https://github.com/advisories/GHSA-69p6-wvmq-27gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69p6-wvmq-27gg</uri>
        </author>
        <published>2022-04-20T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionview] XSS Vulnerability in Action View tag helpers]]></title>
        <id>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</id>
        <link href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv"/>
        <updated>2022-04-27T23:00:15.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible XSS vulnerability in Action View tag helpers.  Passing
untrusted input as hash keys can lead to a possible XSS vulnerability. This
vulnerability has been assigned the CVE identifier CVE-2022-27777.</p>
<p>Versions Affected:  ALL
Not affected:       NONE
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1</p>
<h2 id="impact">Impact</h2>
<p>If untrusted data is passed as the hash key for tag attributes, there is a
possibility that the untrusted data may not be properly escaped which can
lead to an XSS vulnerability.</p>
<p>Impacted code will look something like this:</p>
<pre><code>check_box_tag('thename', 'thevalue', false, aria: { malicious_input =&gt; 'thevalueofaria' })
</code></pre>
<p>Where the "malicious_input" variable contains untrusted data.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The FIXED releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Escape the untrusted data before using it as a key for tag helper methods.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27777">https://nvd.nist.gov/vuln/detail/CVE-2022-27777</a></li>
<li><a href="https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85">https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw">https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw</a></li>
<li><a href="https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released">https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv">https://github.com/advisories/GHSA-ch3h-j2vf-95pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</uri>
        </author>
        <published>2022-04-27T22:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionview] XSS Vulnerability in Action View tag helpers]]></title>
        <id>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</id>
        <link href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv"/>
        <updated>2022-04-27T23:00:15.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible XSS vulnerability in Action View tag helpers.  Passing
untrusted input as hash keys can lead to a possible XSS vulnerability. This
vulnerability has been assigned the CVE identifier CVE-2022-27777.</p>
<p>Versions Affected:  ALL
Not affected:       NONE
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1</p>
<h2 id="impact">Impact</h2>
<p>If untrusted data is passed as the hash key for tag attributes, there is a
possibility that the untrusted data may not be properly escaped which can
lead to an XSS vulnerability.</p>
<p>Impacted code will look something like this:</p>
<pre><code>check_box_tag('thename', 'thevalue', false, aria: { malicious_input =&gt; 'thevalueofaria' })
</code></pre>
<p>Where the "malicious_input" variable contains untrusted data.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The FIXED releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Escape the untrusted data before using it as a key for tag helper methods.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27777">https://nvd.nist.gov/vuln/detail/CVE-2022-27777</a></li>
<li><a href="https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85">https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw">https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw</a></li>
<li><a href="https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released">https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv">https://github.com/advisories/GHSA-ch3h-j2vf-95pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</uri>
        </author>
        <published>2022-04-27T22:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionview] XSS Vulnerability in Action View tag helpers]]></title>
        <id>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</id>
        <link href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv"/>
        <updated>2022-04-27T23:00:15.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible XSS vulnerability in Action View tag helpers.  Passing
untrusted input as hash keys can lead to a possible XSS vulnerability. This
vulnerability has been assigned the CVE identifier CVE-2022-27777.</p>
<p>Versions Affected:  ALL
Not affected:       NONE
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1</p>
<h2 id="impact">Impact</h2>
<p>If untrusted data is passed as the hash key for tag attributes, there is a
possibility that the untrusted data may not be properly escaped which can
lead to an XSS vulnerability.</p>
<p>Impacted code will look something like this:</p>
<pre><code>check_box_tag('thename', 'thevalue', false, aria: { malicious_input =&gt; 'thevalueofaria' })
</code></pre>
<p>Where the "malicious_input" variable contains untrusted data.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The FIXED releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Escape the untrusted data before using it as a key for tag helper methods.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27777">https://nvd.nist.gov/vuln/detail/CVE-2022-27777</a></li>
<li><a href="https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85">https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw">https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw</a></li>
<li><a href="https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released">https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv">https://github.com/advisories/GHSA-ch3h-j2vf-95pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</uri>
        </author>
        <published>2022-04-27T22:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionview] XSS Vulnerability in Action View tag helpers]]></title>
        <id>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</id>
        <link href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv"/>
        <updated>2022-04-27T23:00:15.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible XSS vulnerability in Action View tag helpers.  Passing
untrusted input as hash keys can lead to a possible XSS vulnerability. This
vulnerability has been assigned the CVE identifier CVE-2022-27777.</p>
<p>Versions Affected:  ALL
Not affected:       NONE
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1</p>
<h2 id="impact">Impact</h2>
<p>If untrusted data is passed as the hash key for tag attributes, there is a
possibility that the untrusted data may not be properly escaped which can
lead to an XSS vulnerability.</p>
<p>Impacted code will look something like this:</p>
<pre><code>check_box_tag('thename', 'thevalue', false, aria: { malicious_input =&gt; 'thevalueofaria' })
</code></pre>
<p>Where the "malicious_input" variable contains untrusted data.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The FIXED releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Escape the untrusted data before using it as a key for tag helper methods.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27777">https://nvd.nist.gov/vuln/detail/CVE-2022-27777</a></li>
<li><a href="https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85">https://github.com/rails/rails/commit/649516ce0feb699ae06a8c5e81df75d460cc9a85</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionview/CVE-2022-27777.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw">https://groups.google.com/g/ruby-security-ann/c/9wJPEDv-iRw</a></li>
<li><a href="https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released">https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3h-j2vf-95pv">https://github.com/advisories/GHSA-ch3h-j2vf-95pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3h-j2vf-95pv</uri>
        </author>
        <published>2022-04-27T22:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] XSS Vulnerability in Action Pack]]></title>
        <id>https://github.com/advisories/GHSA-mm33-5vfq-3mm3</id>
        <link href="https://github.com/advisories/GHSA-mm33-5vfq-3mm3"/>
        <updated>2022-05-27T22:57:19.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible XSS vulnerability in Rails / Action Pack. This vulnerability has been
assigned the CVE identifier CVE-2022-22577.</p>
<p>Versions Affected:  &gt;= 5.2.0
Not affected:       &lt; 5.2.0
Fixed Versions:     7.0.2.4, 6.1.5.1, 6.0.4.8, 5.2.7.1</p>
<h2 id="impact">Impact</h2>
<p>CSP headers were only sent along with responses that Rails considered as
"HTML" responses.  This left API requests without CSP headers, which could
possibly expose users to XSS attacks.</p>
<h2 id="releases">Releases</h2>
<p>The FIXED releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Set a CSP for your API responses manually.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-22577">https://nvd.nist.gov/vuln/detail/CVE-2022-22577</a></li>
<li><a href="https://github.com/rails/rails/pull/44635">https://github.com/rails/rails/pull/44635</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2022-22577.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2022-22577.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/NuFRKaN5swI">https://groups.google.com/g/ruby-security-ann/c/NuFRKaN5swI</a></li>
<li><a href="https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released">https://rubyonrails.org/2022/4/26/Rails-7-0-2-4-6-1-5-1-6-0-4-8-and-5-2-7-1-have-been-released</a></li>
<li><a href="https://discuss.rubyonrails.org/t/cve-2022-22577-possible-xss-vulnerability-in-action-pack/80533">https://discuss.rubyonrails.org/t/cve-2022-22577-possible-xss-vulnerability-in-action-pack/80533</a></li>
<li><a href="https://github.com/advisories/GHSA-mm33-5vfq-3mm3">https://github.com/advisories/GHSA-mm33-5vfq-3mm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm33-5vfq-3mm3</uri>
        </author>
        <published>2022-04-27T22:28:59.000Z</published>
    </entry>
</feed>