<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2022-06-06T00:19:08.873Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[publify_core] Cross site scripting in publify]]></title>
        <id>https://github.com/advisories/GHSA-3hwx-c6cp-q972</id>
        <link href="https://github.com/advisories/GHSA-3hwx-c6cp-q972"/>
        <updated>2022-06-03T22:17:17.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted file upload allowed the attacker to manipulate the request and bypass the protection of HTML files using a text file. Stored XSS may be obtained.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1811">https://nvd.nist.gov/vuln/detail/CVE-2022-1811</a></li>
<li><a href="https://github.com/publify/publify/commit/0fb6b027fbaf17f6a6551f2148482a03eac12927">https://github.com/publify/publify/commit/0fb6b027fbaf17f6a6551f2148482a03eac12927</a></li>
<li><a href="https://huntr.dev/bounties/4d97f665-c9f1-4c38-b774-692255a7c44c">https://huntr.dev/bounties/4d97f665-c9f1-4c38-b774-692255a7c44c</a></li>
<li><a href="https://github.com/advisories/GHSA-3hwx-c6cp-q972">https://github.com/advisories/GHSA-3hwx-c6cp-q972</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hwx-c6cp-q972</uri>
        </author>
        <published>2022-05-24T00:01:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dragonfly] Arbitrary file write in dragonfly]]></title>
        <id>https://github.com/advisories/GHSA-fj34-jhjx-xmvv</id>
        <link href="https://github.com/advisories/GHSA-fj34-jhjx-xmvv"/>
        <updated>2022-06-03T22:16:59.000Z</updated>
        <content type="html"><![CDATA[<p>An argument injection vulnerability in Dragonfly Ruby Gem v1.3.0 allows attackers to read and write arbitrary files when the verify_url option is disabled. This vulnerability is exploited via a crafted URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33473">https://nvd.nist.gov/vuln/detail/CVE-2021-33473</a></li>
<li><a href="https://github.com/markevans/dragonfly/issues/513">https://github.com/markevans/dragonfly/issues/513</a></li>
<li><a href="https://github.com/markevans/dragonfly/commit/25399297bb457f7fcf8e3f91e85945b255b111b5">https://github.com/markevans/dragonfly/commit/25399297bb457f7fcf8e3f91e85945b255b111b5</a></li>
<li><a href="https://github.com/advisories/GHSA-fj34-jhjx-xmvv">https://github.com/advisories/GHSA-fj34-jhjx-xmvv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fj34-jhjx-xmvv</uri>
        </author>
        <published>2022-06-03T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Cross site scripting in publify]]></title>
        <id>https://github.com/advisories/GHSA-wmh9-x28j-c6gr</id>
        <link href="https://github.com/advisories/GHSA-wmh9-x28j-c6gr"/>
        <updated>2022-06-03T15:48:55.000Z</updated>
        <content type="html"><![CDATA[<p>In Publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS. A user with a “publisher” role is able to inject and execute arbitrary JavaScript code while creating a page/article.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25974">https://nvd.nist.gov/vuln/detail/CVE-2021-25974</a></li>
<li><a href="https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e">https://github.com/publify/publify/commit/fefd5f76302adcc425b2b6e7e7d23587cfc0083e</a></li>
<li><a href="https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974">https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974</a></li>
<li><a href="https://github.com/advisories/GHSA-wmh9-x28j-c6gr">https://github.com/advisories/GHSA-wmh9-x28j-c6gr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmh9-x28j-c6gr</uri>
        </author>
        <published>2022-05-24T22:29:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Cross site scripting in publify]]></title>
        <id>https://github.com/advisories/GHSA-3h7v-wqw7-ff28</id>
        <link href="https://github.com/advisories/GHSA-3h7v-wqw7-ff28"/>
        <updated>2022-06-03T15:48:45.000Z</updated>
        <content type="html"><![CDATA[<p>In publify, versions v8.0 to v9.2.4 are vulnerable to stored XSS as a result of an unrestricted file upload. This issue allows a user with “publisher” role to inject malicious JavaScript via the uploaded html file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25975">https://nvd.nist.gov/vuln/detail/CVE-2021-25975</a></li>
<li><a href="https://github.com/publify/publify/commit/d99c0870d3dbbfde7febdc6cad33199b84770101">https://github.com/publify/publify/commit/d99c0870d3dbbfde7febdc6cad33199b84770101</a></li>
<li><a href="https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974">https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25974</a></li>
<li><a href="https://github.com/advisories/GHSA-3h7v-wqw7-ff28">https://github.com/advisories/GHSA-3h7v-wqw7-ff28</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h7v-wqw7-ff28</uri>
        </author>
        <published>2022-05-24T22:28:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Code injection in publify]]></title>
        <id>https://github.com/advisories/GHSA-w78q-4w34-jrjx</id>
        <link href="https://github.com/advisories/GHSA-w78q-4w34-jrjx"/>
        <updated>2022-06-03T15:48:05.000Z</updated>
        <content type="html"><![CDATA[<p>Code Injection in GitHub repository publify/publify prior to 9.2.8.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0578">https://nvd.nist.gov/vuln/detail/CVE-2022-0578</a></li>
<li><a href="https://github.com/publify/publify/commit/b50df050c593cc532b2c516792989bcfce2d73f7">https://github.com/publify/publify/commit/b50df050c593cc532b2c516792989bcfce2d73f7</a></li>
<li><a href="https://huntr.dev/bounties/02c81928-eb47-476f-8000-e93dc796dbcc">https://huntr.dev/bounties/02c81928-eb47-476f-8000-e93dc796dbcc</a></li>
<li><a href="https://github.com/advisories/GHSA-w78q-4w34-jrjx">https://github.com/advisories/GHSA-w78q-4w34-jrjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w78q-4w34-jrjx</uri>
        </author>
        <published>2022-05-17T00:01:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Incorrect Authorization in publify]]></title>
        <id>https://github.com/advisories/GHSA-79m3-q3wh-c3qm</id>
        <link href="https://github.com/advisories/GHSA-79m3-q3wh-c3qm"/>
        <updated>2022-06-03T15:46:47.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control in GitHub repository publify/publify prior to 9.2.8. Anonymous users can't view but can leave comments on an article in draft mode.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0574">https://nvd.nist.gov/vuln/detail/CVE-2022-0574</a></li>
<li><a href="https://github.com/publify/publify/commit/0e6c66ac2002136517662399bca9d838c80d9739">https://github.com/publify/publify/commit/0e6c66ac2002136517662399bca9d838c80d9739</a></li>
<li><a href="https://huntr.dev/bounties/6f322c84-9e20-4df6-97e8-92bc271ede3f">https://huntr.dev/bounties/6f322c84-9e20-4df6-97e8-92bc271ede3f</a></li>
<li><a href="https://github.com/advisories/GHSA-79m3-q3wh-c3qm">https://github.com/advisories/GHSA-79m3-q3wh-c3qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79m3-q3wh-c3qm</uri>
        </author>
        <published>2022-05-17T00:01:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Improper Access Control in publify]]></title>
        <id>https://github.com/advisories/GHSA-c273-c6vg-4pv5</id>
        <link href="https://github.com/advisories/GHSA-c273-c6vg-4pv5"/>
        <updated>2022-06-02T20:38:51.000Z</updated>
        <content type="html"><![CDATA[<p>A low-privileged user can modify and delete admin articles just by changing the value of the article[id] parameter prior to 9.2.9.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1810">https://nvd.nist.gov/vuln/detail/CVE-2022-1810</a></li>
<li><a href="https://github.com/publify/publify/commit/c0aba87844d1e47da50c0d99a3465164a4d244ce">https://github.com/publify/publify/commit/c0aba87844d1e47da50c0d99a3465164a4d244ce</a></li>
<li><a href="https://huntr.dev/bounties/9b2d7579-032e-42da-b736-4b10a868eacb">https://huntr.dev/bounties/9b2d7579-032e-42da-b736-4b10a868eacb</a></li>
<li><a href="https://github.com/advisories/GHSA-c273-c6vg-4pv5">https://github.com/advisories/GHSA-c273-c6vg-4pv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c273-c6vg-4pv5</uri>
        </author>
        <published>2022-05-24T00:01:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[publify_core] Article metadata exposure in publify]]></title>
        <id>https://github.com/advisories/GHSA-5jm7-g527-m694</id>
        <link href="https://github.com/advisories/GHSA-5jm7-g527-m694"/>
        <updated>2022-06-01T21:44:52.000Z</updated>
        <content type="html"><![CDATA[<p>Leaking password protected articles content due to improper access control in GitHub repository publify/publify prior to 9.2.8. Attackers can leverage this vulnerability to view the contents of any password-protected article present on the publify website, compromising confidentiality and integrity of users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1553">https://nvd.nist.gov/vuln/detail/CVE-2022-1553</a></li>
<li><a href="https://github.com/publify/publify/commit/1a78f16f460847274265a12a9555b3524892d7db">https://github.com/publify/publify/commit/1a78f16f460847274265a12a9555b3524892d7db</a></li>
<li><a href="https://huntr.dev/bounties/b398e4c9-6cdf-4973-ad86-da796cde221f">https://huntr.dev/bounties/b398e4c9-6cdf-4973-ad86-da796cde221f</a></li>
<li><a href="https://github.com/advisories/GHSA-5jm7-g527-m694">https://github.com/advisories/GHSA-5jm7-g527-m694</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jm7-g527-m694</uri>
        </author>
        <published>2022-05-17T00:01:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend]]></title>
        <id>https://github.com/advisories/GHSA-8639-qx56-r428</id>
        <link href="https://github.com/advisories/GHSA-8639-qx56-r428"/>
        <updated>2022-06-01T20:26:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>
<p>Reproduction steps:</p>
<ul>
<li>Take an order's number.</li>
<li>Log in as an administrator.</li>
<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>
<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>
<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>
<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>
<li>Notice how the adjustments are again finalized.</li>
</ul>
<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html">Rails CSRF protection</a>.</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an <a href="https://github.com/solidusio/solidus/issues">issue</a> or a <a href="https://github.com/solidusio/solidus/discussions">discussion</a> in Solidus.</li>
<li>Email us at <a href="mailto:security@soliidus.io">security@solidus.io</a></li>
<li>Contact the core team on <a href="http://slack.solidus.io/">Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31000">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>
<li><a href="https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>
<li><a href="https://github.com/advisories/GHSA-8639-qx56-r428">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8639-qx56-r428</uri>
        </author>
        <published>2022-06-01T20:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend]]></title>
        <id>https://github.com/advisories/GHSA-8639-qx56-r428</id>
        <link href="https://github.com/advisories/GHSA-8639-qx56-r428"/>
        <updated>2022-06-01T20:26:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>
<p>Reproduction steps:</p>
<ul>
<li>Take an order's number.</li>
<li>Log in as an administrator.</li>
<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>
<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>
<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>
<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>
<li>Notice how the adjustments are again finalized.</li>
</ul>
<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html">Rails CSRF protection</a>.</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an <a href="https://github.com/solidusio/solidus/issues">issue</a> or a <a href="https://github.com/solidusio/solidus/discussions">discussion</a> in Solidus.</li>
<li>Email us at <a href="mailto:security@soliidus.io">security@solidus.io</a></li>
<li>Contact the core team on <a href="http://slack.solidus.io/">Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31000">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>
<li><a href="https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>
<li><a href="https://github.com/advisories/GHSA-8639-qx56-r428">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8639-qx56-r428</uri>
        </author>
        <published>2022-06-01T20:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solidus_backend] CSRF allows attacker to finalize/unfinalize order adjustments in solidus_backend]]></title>
        <id>https://github.com/advisories/GHSA-8639-qx56-r428</id>
        <link href="https://github.com/advisories/GHSA-8639-qx56-r428"/>
        <updated>2022-06-01T20:26:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>CSRF vulnerability allowing attackers to change the state of an order's adjustments if they hold its number, and the execution happens on a store administrator's computer.</p>
<p>Reproduction steps:</p>
<ul>
<li>Take an order's number.</li>
<li>Log in as an administrator.</li>
<li>Visit that order's adjustments section (<em>Orders -&gt; {Click on number} -&gt; Adjustments</em>) and check that its adjustments are finalized (closed padlock under the <strong>State</strong> column).</li>
<li>On another tab, visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/unfinalize</code>.</li>
<li>Notice how the adjustments are unfinalized (open padlock), even if the previous was a <code>GET</code> request which could have been linked from any other site.</li>
<li>Visit <code>{your_site_url}/admin/orders/{order_number}/adjustments/finalize</code>.</li>
<li>Notice how the adjustments are again finalized.</li>
</ul>
<p>That happened because both routes were handled as <code>GET</code> requests, which are skipped by Rails anti-forgery protection.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to solidus_backend v3.1.6, v3.0.6, or v2.11.16, depending on the major and minor versions in use.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html">Rails CSRF protection</a>.</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an <a href="https://github.com/solidusio/solidus/issues">issue</a> or a <a href="https://github.com/solidusio/solidus/discussions">discussion</a> in Solidus.</li>
<li>Email us at <a href="mailto:security@soliidus.io">security@solidus.io</a></li>
<li>Contact the core team on <a href="http://slack.solidus.io/">Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428">https://github.com/solidusio/solidus/security/advisories/GHSA-8639-qx56-r428</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31000">https://nvd.nist.gov/vuln/detail/CVE-2022-31000</a></li>
<li><a href="https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c">https://github.com/solidusio/solidus/commit/de796a2e0be7f154cae48b46e267501559d9716c</a></li>
<li><a href="https://github.com/advisories/GHSA-8639-qx56-r428">https://github.com/advisories/GHSA-8639-qx56-r428</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8639-qx56-r428</uri>
        </author>
        <published>2022-06-01T20:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Denial of Service Vulnerability in Rack Multipart Parsing]]></title>
        <id>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</id>
        <link href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2"/>
        <updated>2022-05-27T16:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible denial of service vulnerability in the multipart parsing
component of Rack.  This vulnerability has been assigned the CVE identifier
CVE-2022-30122.</p>
<p>Versions Affected:  &gt;= 1.2
Not affected:       &lt; 1.2
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted multipart POST requests can cause Rack's multipart parser to
take much longer than expected, leading to a possible denial of service
vulnerability.</p>
<p>Impacted code will use Rack's multipart parser to parse multipart posts.  This
includes directly using the multipart parser like this:</p>
<pre><code>params = Rack::Multipart.parse_multipart(env)
</code></pre>
<p>But it also includes reading POST data from a Rack request object like this:</p>
<pre><code>p request.POST # read POST data
p request.params # reads both query params and POST data
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30122.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk">https://groups.google.com/g/ruby-security-ann/c/L2Axto442qk</a></li>
<li><a href="https://github.com/advisories/GHSA-hxqx-xwvh-44m2">https://github.com/advisories/GHSA-hxqx-xwvh-44m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxqx-xwvh-44m2</uri>
        </author>
        <published>2022-05-27T16:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-06-01T19:28:39.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-06-01T19:28:39.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack] Possible shell escape sequence injection vulnerability in Rack]]></title>
        <id>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</id>
        <link href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr"/>
        <updated>2022-06-01T19:28:39.000Z</updated>
        <content type="html"><![CDATA[<p>There is a possible shell escape sequence injection vulnerability in the Lint
and CommonLogger components of Rack.  This vulnerability has been assigned the
CVE identifier CVE-2022-30123.</p>
<p>Versions Affected:  All.
Not affected:       None
Fixed Versions:     2.0.9.1, 2.1.4.1, 2.2.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted requests can cause shell escape sequences to be written to
the terminal via Rack's Lint middleware and CommonLogger middleware.  These
escape sequences can be leveraged to possibly execute commands in the victim's
terminal.</p>
<p>Impacted applications will have either of these middleware installed, and
vulnerable apps may have something like this:</p>
<pre><code>use Rack::Lint
</code></pre>
<p>Or</p>
<pre><code>use Rack::CommonLogger
</code></pre>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Remove these middleware from your application</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack/CVE-2022-30123.yml</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8">https://groups.google.com/g/ruby-security-ann/c/LWB10kWzag8</a></li>
<li><a href="https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88">https://github.com/rack/rack/commit/b426cc224908ec6ed6eb8729325392b048215d88</a></li>
<li><a href="https://github.com/advisories/GHSA-wq4h-7r42-5hrr">https://github.com/advisories/GHSA-wq4h-7r42-5hrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq4h-7r42-5hrr</uri>
        </author>
        <published>2022-05-27T16:36:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yajl-ruby] Buffer Overflow in yajl-ruby]]></title>
        <id>https://github.com/advisories/GHSA-jj47-x69x-mxrm</id>
        <link href="https://github.com/advisories/GHSA-jj47-x69x-mxrm"/>
        <updated>2022-05-26T18:54:25.000Z</updated>
        <content type="html"><![CDATA[<p><em>NOTE: A previous patch, 1.4.2, fixed the heap memory issue, but could still lead to a DoS infinite loop. Please update to version 1.4.3</em></p>
<p>The 1.x branch and the 2.x branch of <a href="https://github.com/lloyd/yajl">yajl</a> contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">reallocation logic at yajl_buf.c#L64</a> may result in the <code>need</code> 32bit integer wrapping to 0 when <code>need</code> approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf-&gt;alloc into a small heap chunk.</p>
<p>These integers are declared as <code>size_t</code> in the 2.x branch of <code>yajl</code>, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which <code>size_t</code> is a 32bit integer.</p>
<p>Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption.</p>
<h3 id="impact">Impact</h3>
<p>We rate this as a moderate severity vulnerability which mostly impacts process availability as we believe exploitation for arbitrary code execution to be unlikely.</p>
<h3 id="patches">Patches</h3>
<p>Patched in yajl-ruby 1.4.3</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing large inputs to YAJL</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/brianmario/yajl-ruby/issues">yajl-ruby</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm">https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24795">https://nvd.nist.gov/vuln/detail/CVE-2022-24795</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6">https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></li>
<li><a href="https://github.com/advisories/GHSA-jj47-x69x-mxrm">https://github.com/advisories/GHSA-jj47-x69x-mxrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj47-x69x-mxrm</uri>
        </author>
        <published>2022-04-05T15:55:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[random_password_generator] Insecure PRNG use in random_password_generator]]></title>
        <id>https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</id>
        <link href="https://github.com/advisories/GHSA-ggfx-h9xj-5v9c"/>
        <updated>2022-05-31T23:27:44.000Z</updated>
        <content type="html"><![CDATA[<p>The random_password_generator (aka RandomPasswordGenerator) gem through 1.0.0 for Ruby uses Kernel#rand to generate passwords, which, due to its cyclic nature, can facilitate password prediction.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25061">https://nvd.nist.gov/vuln/detail/CVE-2019-25061</a></li>
<li><a href="https://github.com/bvsatyaram/random_password_generator/pull/1">https://github.com/bvsatyaram/random_password_generator/pull/1</a></li>
<li><a href="https://github.com/bvsatyaram/random_password_generator/blob/2855e8d7d8803dbb580ddd6cf13846394eb4530e/lib/random_password_generator.rb#L23">https://github.com/bvsatyaram/random_password_generator/blob/2855e8d7d8803dbb580ddd6cf13846394eb4530e/lib/random_password_generator.rb#L23</a></li>
<li><a href="https://ruby-doc.org/core-3.1.2/Random.html">https://ruby-doc.org/core-3.1.2/Random.html</a></li>
<li><a href="https://stackoverflow.com/questions/42170239/security-of-rand-in-ruby-compared-to-other-methods/42170560">https://stackoverflow.com/questions/42170239/security-of-rand-in-ruby-compared-to-other-methods/42170560</a></li>
<li><a href="https://github.com/advisories/GHSA-ggfx-h9xj-5v9c">https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggfx-h9xj-5v9c</uri>
        </author>
        <published>2022-05-19T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Improper Handling of Unexpected Data Type in Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-xh29-r2w5-wx8m</id>
        <link href="https://github.com/advisories/GHSA-xh29-r2w5-wx8m"/>
        <updated>2022-05-23T23:15:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Nokogiri <code>&lt; v1.13.6</code> does not type-check all inputs into the XML and HTML4 SAX parsers. For CRuby users, this may allow specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory.</p>
<h3 id="severity">Severity</h3>
<p>The Nokogiri maintainers have evaluated this as <strong>High 8.2</strong> (CVSS3.1).</p>
<h3 id="mitigation">Mitigation</h3>
<p>CRuby users should upgrade to Nokogiri <code>&gt;= 1.13.6</code>.</p>
<p>JRuby users are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To avoid this vulnerability in affected applications, ensure the untrusted input is a <code>String</code> by calling <code>#to_s</code> or equivalent.</p>
<h3 id="credit">Credit</h3>
<p>This vulnerability was responsibly reported by @agustingianni and the Github Security Lab.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xh29-r2w5-wx8m">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xh29-r2w5-wx8m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29181">https://nvd.nist.gov/vuln/detail/CVE-2022-29181</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267">https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.6">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.6</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-031_GHSL-2022-032_Nokogiri/">https://securitylab.github.com/advisories/GHSL-2022-031_GHSL-2022-032_Nokogiri/</a></li>
<li><a href="https://github.com/advisories/GHSA-xh29-r2w5-wx8m">https://github.com/advisories/GHSA-xh29-r2w5-wx8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xh29-r2w5-wx8m</uri>
        </author>
        <published>2022-05-23T23:15:15.000Z</published>
    </entry>
</feed>