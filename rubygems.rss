<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2024-09-28T11:01:26.257Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[sqlite-vec] Heap-based Buffer Overflow in sqlite-vec]]></title>
        <id>https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</id>
        <link href="https://github.com/advisories/GHSA-vrcx-gx3g-j3h8"/>
        <updated>2024-09-26T21:47:07.000Z</updated>
        <content type="html"><![CDATA[<p>sqlite-vec v0.1.1 was discovered to contain a heap buffer overflow via the npy_token_next function. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46488">https://nvd.nist.gov/vuln/detail/CVE-2024-46488</a></li>
<li><a href="https://github.com/VulnSphere/LLMVulnSphere/blob/main/VectorDB/sqlite-vec/OOBR_2.md">https://github.com/VulnSphere/LLMVulnSphere/blob/main/VectorDB/sqlite-vec/OOBR_2.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vrcx-gx3g-j3h8">https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</a></li>
<li><a href="https://github.com/asg017/sqlite-vec/releases/tag/v0.1.3">https://github.com/asg017/sqlite-vec/releases/tag/v0.1.3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sqlite-vec/CVE-2024-46488.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sqlite-vec/CVE-2024-46488.yml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-25T18:31:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to stored XSS through user file upload (GHSL-2024-184)]]></title>
        <id>https://github.com/advisories/GHSA-75j2-9gmc-m855</id>
        <link href="https://github.com/advisories/GHSA-75j2-9gmc-m855"/>
        <updated>2024-09-25T21:53:27.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting has been found in the image upload functionality that can be used by normal registered users:
It is possible to upload a SVG image containing JavaScript and it's also possible to upload a HTML document when the format
parameter is manually changed to <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L105-L106">documents</a> or a string of an <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L110-L111">unsupported format</a>. If an authenticated user or administrator visits that uploaded image or document malicious JavaScript can be executed on their behalf (e.g. changing or deleting content inside of the CMS.)</p>
<h2 id="impact">Impact</h2>
<p>This issue may lead to account takeover due to reflected Cross-site scripting (XSS).</p>
<h2 id="remediation">Remediation</h2>
<p>Only allow the upload of safe files such as PNG, TXT and others or serve all "unsafe" files such as SVG and other files with a content-disposition: attachment header, which should prevent browsers from displaying them.</p>
<p>Additionally, a <a href="https://web.dev/articles/csp">Content security policy (CSP)</a> can be created that disallows inlined script. (Other parts of the application might need modification to continue functioning.)</p>
<p>To prevent the theft of the auth_token it could be marked with HttpOnly. This would however not prevent that actions could be performed as the authenticated user/administrator. Furthermore, it could make sense to use the authentication provided by Ruby on Rails, so that stolen tokens cannot be used anymore after some time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-8fx8-3rg2-79xw.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-8fx8-3rg2-79xw.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-75j2-9gmc-m855">https://github.com/advisories/GHSA-75j2-9gmc-m855</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75j2-9gmc-m855</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-25T21:53:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webrick] HTTP Request Smuggling in ruby webrick]]></title>
        <id>https://github.com/advisories/GHSA-6f62-3596-g6w7</id>
        <link href="https://github.com/advisories/GHSA-6f62-3596-g6w7"/>
        <updated>2024-09-25T17:53:10.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the WEBrick toolkit through 1.8.1 for Ruby. It allows HTTP request smuggling by providing both a Content-Length header and a Transfer-Encoding header, e.g., "GET /admin HTTP/1.1\r\n" inside of a "POST /user HTTP/1.1\r\n" request. NOTE: the supplier's position is "Webrick should not be used in production."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47220">https://nvd.nist.gov/vuln/detail/CVE-2024-47220</a></li>
<li><a href="https://github.com/ruby/webrick/issues/145">https://github.com/ruby/webrick/issues/145</a></li>
<li><a href="https://github.com/ruby/webrick/pull/146/commits/d88321da45dcd230ac2b4585cad4833d6d5e8841">https://github.com/ruby/webrick/pull/146/commits/d88321da45dcd230ac2b4585cad4833d6d5e8841</a></li>
<li><a href="https://github.com/ruby/webrick/commit/f5faca9222541591e1a7c3c97552ebb0c92733c7">https://github.com/ruby/webrick/commit/f5faca9222541591e1a7c3c97552ebb0c92733c7</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/webrick/CVE-2024-47220.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/webrick/CVE-2024-47220.yml</a></li>
<li><a href="https://github.com/ruby/webrick/issues/145#issuecomment-2369994610">https://github.com/ruby/webrick/issues/145#issuecomment-2369994610</a></li>
<li><a href="https://github.com/ruby/webrick/issues/145#issuecomment-2372838285">https://github.com/ruby/webrick/issues/145#issuecomment-2372838285</a></li>
<li><a href="https://github.com/advisories/GHSA-6f62-3596-g6w7">https://github.com/advisories/GHSA-6f62-3596-g6w7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6f62-3596-g6w7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-22T03:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to stored XSS through user file upload (GHSL-2024-184)]]></title>
        <id>https://github.com/advisories/GHSA-8fx8-3rg2-79xw</id>
        <link href="https://github.com/advisories/GHSA-8fx8-3rg2-79xw"/>
        <updated>2024-09-23T22:10:34.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting has been found in the image upload functionality that can be used by normal registered users: It is possible to upload a SVG image containing JavaScript and it's also possible to upload a HTML document when the format parameter is manually changed to <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L105-L106">documents</a> or a string of an <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L110-L111">unsupported format</a>. If an authenticated user or administrator visits that uploaded image or document malicious JavaScript can be executed on their behalf
(e.g. changing or deleting content inside of the CMS.)</p>
<h2 id="impact">Impact</h2>
<p>This issue may lead to account takeover due to reflected Cross-site scripting (XSS).</p>
<h2 id="remediation">Remediation</h2>
<p>Only allow the upload of safe files such as PNG, TXT and others or serve all "unsafe" files such as SVG and other files with a content-disposition: attachment header, which should prevent browsers from displaying them.</p>
<p>Additionally, a <a href="https://web.dev/articles/csp">Content security policy (CSP)</a> can be created that disallows inlined script. (Other parts of the application might need modification to continue functioning.)</p>
<p>To prevent the theft of the auth_token it could be marked with HttpOnly. This would however not prevent that actions could be performed as the authenticated user/administrator. Furthermore, it could make sense to use the authentication provided by Ruby on Rails, so that stolen tokens cannot be used anymore after some time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-r9cr-qmfw-pmrc.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-r9cr-qmfw-pmrc.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-8fx8-3rg2-79xw">https://github.com/advisories/GHSA-8fx8-3rg2-79xw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8fx8-3rg2-79xw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-23T22:10:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to remote code execution through code injection (GHSL-2024-185)]]></title>
        <id>https://github.com/advisories/GHSA-3hp8-6j24-m5gm</id>
        <link href="https://github.com/advisories/GHSA-3hp8-6j24-m5gm"/>
        <updated>2024-09-23T22:06:00.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L51-L52">actions</a> defined inside of the MediaController class do not check whether a given path is inside a certain path (e.g. inside the media folder). If an attacker performed an account takeover of an administrator account (See: GHSL-2024-184) they could delete arbitrary files or folders on the server hosting Camaleon CMS. The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L64-L65">crop_url</a> action might make arbitrary file writes (similar impact to GHSL-2024-182) for any authenticated user possible, but it doesn't seem to work currently.</p>
<p>Arbitrary file deletion can be exploited with following code path:
The parameter folder flows from the actions method:</p>
<pre><code class="language-ruby">  def actions
    authorize! :manage, :media if params[:media_action] != 'crop_url'
    params[:folder] = params[:folder].gsub('//', '/') if params[:folder].present?
    case params[:media_action]
    [..]
    when 'del_file'
      cama_uploader.delete_file(params[:folder].gsub('//', '/'))
      render plain: ''
</code></pre>
<p>into the method delete_file of the CamaleonCmsLocalUploader
class (when files are uploaded locally):</p>
<pre><code class="language-ruby">def delete_file(key)
  file = File.join(@root_folder, key)
  FileUtils.rm(file) if File.exist? file
  @instance.hooks_run('after_delete', key)
  get_media_collection.find_by_key(key).take.destroy
end
</code></pre>
<p>Where it is joined in an unchecked manner with the root folder and
then deleted.</p>
<p><strong>Proof of concept</strong>
The following request would delete the file README.md in the top folder of the Ruby on Rails application. (The values for auth_token, X-CSRF-Token and _cms_session would also need to be replaced with authenticated values in the curl command below)</p>
<pre><code>curl --path-as-is -i -s -k -X $'POST' \
    -H $'X-CSRF-Token: [..]' -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' -H $'Connection: keep-alive' \
    -b $'auth_token=[..]; _cms_session=[..]' \
    --data-binary $'versions=&amp;thumb_size=&amp;formats=&amp;media_formats=&amp;dimension=&amp;private=&amp;folder=..
2F..
2F..
2FREADME.md&amp;media_action=del_file' \
    $'https://&lt;camaleon-host&gt;/admin/media/actions?actions=true'
</code></pre>
<p><strong>Impact</strong></p>
<p>This issue may lead to a defective CMS or system.</p>
<p><strong>Remediation</strong></p>
<p>Normalize all file paths constructed from untrusted user input before using them and check that the resulting path is inside the
targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p><strong>See also:</strong></p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-7x4w-cj9r-h4v9.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/camaleon_cms/GHSA-7x4w-cj9r-h4v9.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-3hp8-6j24-m5gm">https://github.com/advisories/GHSA-3hp8-6j24-m5gm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hp8-6j24-m5gm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-23T22:05:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[devise-two-factor] Devise-Two-Factor Authentication Uses Insufficient Default OTP Shared Secret Length]]></title>
        <id>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</id>
        <link href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2"/>
        <updated>2024-09-20T20:20:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Under the default configuration, Devise-Two-Factor versions 1.0.0 or &gt;= 4.0.0 &amp; &lt; 6.0.0 generate TOTP shared secrets that are 120 bits instead of the 128-bit minimum defined by <a href="https://datatracker.ietf.org/doc/html/rfc4226">RFC 4226</a>. Using a shared secret shorter than the minimum to generate a multi-factor authentication code could make it easier for an attacker to guess the shared secret and generate valid TOTP codes.</p>
<h3 id="remediation">Remediation</h3>
<p>Devise-Two-Factor should be upgraded to version v6.0.0 as soon as possible. After upgrading, the length of shared secrets and TOTP URLs generated by the library will increase since the new shared secrets will be longer.</p>
<p>If upgrading is not possible, you can override the default <code>otp_secret_length</code> attribute in the model when configuring <code>two_factor_authenticable</code> and set it to a value of at least 26 to ensure newly generated shared secrets are at least 128-bits long.</p>
<p>After upgrading or implementing the workaround, applications using Devise-Two-Factor may wish to migrate users to the new OTP length to provide increased protection for those accounts. Turning off OTP for users by setting <code>otp_required_for_login</code> to false is not recommended since it would leave accounts unprotected. However, you may wish to implement application logic that checks the length of a user's shared secret and prompts users to re-enroll in OTP.</p>
<h3 id="background">Background</h3>
<p>Devise-Two-Factor uses <a href="https://github.com/mdp/rotp">ROTP</a> to generate shared secrets for TOTP. In ROTP &lt; 5.0.0, the first argument to the <code>ROTP::Base32#random_base32</code> function represented the number of bytes to read from SecureRandom which were then returned as a base32-encoded string. In ROTP 5.1.0, this function was changed so that the first argument now represents the length of the base32-encoded string returned by the function instead of the number of bytes to read from SecureRandom resulting in a shorter key being generated for the same input value. (<a href="https://github.com/mdp/rotp/commit/15d5104e3cb99f97d36c772f8f09cf7e2e77de20">https://github.com/mdp/rotp/commit/15d5104e3cb99f97d36c772f8f09cf7e2e77de20</a>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8796">https://nvd.nist.gov/vuln/detail/CVE-2024-8796</a></li>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19">https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19</a></li>
<li><a href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/advisories/GHSA-qjxf-mc72-wjr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:31:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[devise-two-factor] Devise-Two-Factor Authentication Uses Insufficient Default OTP Shared Secret Length]]></title>
        <id>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</id>
        <link href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2"/>
        <updated>2024-09-20T20:20:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Under the default configuration, Devise-Two-Factor versions 1.0.0 or &gt;= 4.0.0 &amp; &lt; 6.0.0 generate TOTP shared secrets that are 120 bits instead of the 128-bit minimum defined by <a href="https://datatracker.ietf.org/doc/html/rfc4226">RFC 4226</a>. Using a shared secret shorter than the minimum to generate a multi-factor authentication code could make it easier for an attacker to guess the shared secret and generate valid TOTP codes.</p>
<h3 id="remediation">Remediation</h3>
<p>Devise-Two-Factor should be upgraded to version v6.0.0 as soon as possible. After upgrading, the length of shared secrets and TOTP URLs generated by the library will increase since the new shared secrets will be longer.</p>
<p>If upgrading is not possible, you can override the default <code>otp_secret_length</code> attribute in the model when configuring <code>two_factor_authenticable</code> and set it to a value of at least 26 to ensure newly generated shared secrets are at least 128-bits long.</p>
<p>After upgrading or implementing the workaround, applications using Devise-Two-Factor may wish to migrate users to the new OTP length to provide increased protection for those accounts. Turning off OTP for users by setting <code>otp_required_for_login</code> to false is not recommended since it would leave accounts unprotected. However, you may wish to implement application logic that checks the length of a user's shared secret and prompts users to re-enroll in OTP.</p>
<h3 id="background">Background</h3>
<p>Devise-Two-Factor uses <a href="https://github.com/mdp/rotp">ROTP</a> to generate shared secrets for TOTP. In ROTP &lt; 5.0.0, the first argument to the <code>ROTP::Base32#random_base32</code> function represented the number of bytes to read from SecureRandom which were then returned as a base32-encoded string. In ROTP 5.1.0, this function was changed so that the first argument now represents the length of the base32-encoded string returned by the function instead of the number of bytes to read from SecureRandom resulting in a shorter key being generated for the same input value. (<a href="https://github.com/mdp/rotp/commit/15d5104e3cb99f97d36c772f8f09cf7e2e77de20">https://github.com/mdp/rotp/commit/15d5104e3cb99f97d36c772f8f09cf7e2e77de20</a>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8796">https://nvd.nist.gov/vuln/detail/CVE-2024-8796</a></li>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19">https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19</a></li>
<li><a href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/advisories/GHSA-qjxf-mc72-wjr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:31:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[puma] Puma's header normalization allows for client to clobber proxy set headers]]></title>
        <id>https://github.com/advisories/GHSA-9hf4-67fc-4vf4</id>
        <link href="https://github.com/advisories/GHSA-9hf4-67fc-4vf4"/>
        <updated>2024-09-20T22:12:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Clients could clobber values set by intermediate proxies (such as X-Forwarded-For) by providing a underscore version of the same header (X-Forwarded_For). Any users trusting headers set by their proxy may be affected. Attackers may be able to downgrade connections to HTTP (non-SSL) or redirect responses, which could cause confidentiality leaks if combined with a separate MITM attack. </p>
<h3 id="patches">Patches</h3>
<p>v6.4.3/v5.6.9 now discards any headers using underscores if the non-underscore version also exists. Effectively, allowing the proxy defined headers to always win.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Nginx has a <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers">underscores_in_headers</a> configuration variable to discard these headers at the proxy level.</p>
<p>Any users that are implicitly trusting the proxy defined headers for security or availability should immediately cease doing so until upgraded to the fixed versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/puma/puma/security/advisories/GHSA-9hf4-67fc-4vf4">https://github.com/puma/puma/security/advisories/GHSA-9hf4-67fc-4vf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45614">https://nvd.nist.gov/vuln/detail/CVE-2024-45614</a></li>
<li><a href="https://github.com/puma/puma/commit/cac3fd18cf29ed43719ff5d52d9cfec215f0a043">https://github.com/puma/puma/commit/cac3fd18cf29ed43719ff5d52d9cfec215f0a043</a></li>
<li><a href="https://github.com/puma/puma/commit/f196b23be24712fb8fb16051cc124798cc84f70e">https://github.com/puma/puma/commit/f196b23be24712fb8fb16051cc124798cc84f70e</a></li>
<li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers">https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puma/CVE-2024-45614.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puma/CVE-2024-45614.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-9hf4-67fc-4vf4">https://github.com/advisories/GHSA-9hf4-67fc-4vf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hf4-67fc-4vf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-20T14:40:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[puma] Puma's header normalization allows for client to clobber proxy set headers]]></title>
        <id>https://github.com/advisories/GHSA-9hf4-67fc-4vf4</id>
        <link href="https://github.com/advisories/GHSA-9hf4-67fc-4vf4"/>
        <updated>2024-09-20T22:12:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Clients could clobber values set by intermediate proxies (such as X-Forwarded-For) by providing a underscore version of the same header (X-Forwarded_For). Any users trusting headers set by their proxy may be affected. Attackers may be able to downgrade connections to HTTP (non-SSL) or redirect responses, which could cause confidentiality leaks if combined with a separate MITM attack. </p>
<h3 id="patches">Patches</h3>
<p>v6.4.3/v5.6.9 now discards any headers using underscores if the non-underscore version also exists. Effectively, allowing the proxy defined headers to always win.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Nginx has a <a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers">underscores_in_headers</a> configuration variable to discard these headers at the proxy level.</p>
<p>Any users that are implicitly trusting the proxy defined headers for security or availability should immediately cease doing so until upgraded to the fixed versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/puma/puma/security/advisories/GHSA-9hf4-67fc-4vf4">https://github.com/puma/puma/security/advisories/GHSA-9hf4-67fc-4vf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45614">https://nvd.nist.gov/vuln/detail/CVE-2024-45614</a></li>
<li><a href="https://github.com/puma/puma/commit/cac3fd18cf29ed43719ff5d52d9cfec215f0a043">https://github.com/puma/puma/commit/cac3fd18cf29ed43719ff5d52d9cfec215f0a043</a></li>
<li><a href="https://github.com/puma/puma/commit/f196b23be24712fb8fb16051cc124798cc84f70e">https://github.com/puma/puma/commit/f196b23be24712fb8fb16051cc124798cc84f70e</a></li>
<li><a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers">https://nginx.org/en/docs/http/ngx_http_core_module.html#underscores_in_headers</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puma/CVE-2024-45614.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/puma/CVE-2024-45614.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-9hf4-67fc-4vf4">https://github.com/advisories/GHSA-9hf4-67fc-4vf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hf4-67fc-4vf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-20T14:40:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[omniauth-saml] omniauth-saml vulnerable to Improper Verification of Cryptographic Signature]]></title>
        <id>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</id>
        <link href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq"/>
        <updated>2024-09-19T18:25:43.000Z</updated>
        <content type="html"><![CDATA[<p>ruby-saml, the dependent SAML gem of omniauth-saml has a signature wrapping vulnerability in &lt;= v1.12.0 and v1.13.0 to v1.16.0 , see <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a> 
As a result, omniauth-saml created a <a href="https://github.com/omniauth/omniauth-saml/releases">new release</a> by upgrading ruby-saml to the patched versions v1.17. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29">https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-11T21:08:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[omniauth-saml] omniauth-saml vulnerable to Improper Verification of Cryptographic Signature]]></title>
        <id>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</id>
        <link href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq"/>
        <updated>2024-09-19T18:25:43.000Z</updated>
        <content type="html"><![CDATA[<p>ruby-saml, the dependent SAML gem of omniauth-saml has a signature wrapping vulnerability in &lt;= v1.12.0 and v1.13.0 to v1.16.0 , see <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a> 
As a result, omniauth-saml created a <a href="https://github.com/omniauth/omniauth-saml/releases">new release</a> by upgrading ruby-saml to the patched versions v1.17. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29">https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-11T21:08:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[omniauth-saml] omniauth-saml vulnerable to Improper Verification of Cryptographic Signature]]></title>
        <id>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</id>
        <link href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq"/>
        <updated>2024-09-19T18:25:43.000Z</updated>
        <content type="html"><![CDATA[<p>ruby-saml, the dependent SAML gem of omniauth-saml has a signature wrapping vulnerability in &lt;= v1.12.0 and v1.13.0 to v1.16.0 , see <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a> 
As a result, omniauth-saml created a <a href="https://github.com/omniauth/omniauth-saml/releases">new release</a> by upgrading ruby-saml to the patched versions v1.17. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29">https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-11T21:08:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google-protobuf] protobuf-java has potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-735f-pc8j-v9w8</id>
        <link href="https://github.com/advisories/GHSA-735f-pc8j-v9w8"/>
        <updated>2024-09-20T22:14:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When parsing unknown fields in the Protobuf Java Lite and Full library, a maliciously crafted message can cause a StackOverflow error and lead to a program crash.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team <a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue affects all versions of both the Java full and lite Protobuf runtimes, as well as Protobuf for Kotlin and JRuby, which themselves use the Java Protobuf runtime.</p>
<h3 id="severity">Severity</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-7254">CVE-2024-7254</a> <strong>High</strong> CVSS4.0 Score 8.7 (NOTE: there may be a delay in publication)
This is a potential Denial of Service. Parsing nested groups as unknown fields with DiscardUnknownFieldsParser or Java Protobuf Lite parser, or against Protobuf map fields, creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests (Protobuf Java <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/lite/src/test/java/com/google/protobuf/LiteTest.java">LiteTest</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java">CodedInputStreamTest</a>) that identify the specific inputs that exercise this parsing weakness.</p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>We have been working diligently to address this issue and have released a mitigation that is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-java (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-javalite (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin-lite (3.25.5, 4.27.5, 4.28.2)</li>
<li>com-protobuf [JRuby gem only] (3.25.5, 4.27.5, 4.28.2)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7254">https://nvd.nist.gov/vuln/detail/CVE-2024-7254</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b">https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b">https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534">https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46">https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa">https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3">https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-735f-pc8j-v9w8">https://github.com/advisories/GHSA-735f-pc8j-v9w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-735f-pc8j-v9w8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-19T16:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google-protobuf] protobuf-java has potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-735f-pc8j-v9w8</id>
        <link href="https://github.com/advisories/GHSA-735f-pc8j-v9w8"/>
        <updated>2024-09-20T22:14:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When parsing unknown fields in the Protobuf Java Lite and Full library, a maliciously crafted message can cause a StackOverflow error and lead to a program crash.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team <a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue affects all versions of both the Java full and lite Protobuf runtimes, as well as Protobuf for Kotlin and JRuby, which themselves use the Java Protobuf runtime.</p>
<h3 id="severity">Severity</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-7254">CVE-2024-7254</a> <strong>High</strong> CVSS4.0 Score 8.7 (NOTE: there may be a delay in publication)
This is a potential Denial of Service. Parsing nested groups as unknown fields with DiscardUnknownFieldsParser or Java Protobuf Lite parser, or against Protobuf map fields, creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests (Protobuf Java <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/lite/src/test/java/com/google/protobuf/LiteTest.java">LiteTest</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java">CodedInputStreamTest</a>) that identify the specific inputs that exercise this parsing weakness.</p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>We have been working diligently to address this issue and have released a mitigation that is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-java (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-javalite (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin-lite (3.25.5, 4.27.5, 4.28.2)</li>
<li>com-protobuf [JRuby gem only] (3.25.5, 4.27.5, 4.28.2)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7254">https://nvd.nist.gov/vuln/detail/CVE-2024-7254</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b">https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b">https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534">https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46">https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa">https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3">https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-735f-pc8j-v9w8">https://github.com/advisories/GHSA-735f-pc8j-v9w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-735f-pc8j-v9w8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-19T16:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[google-protobuf] protobuf-java has potential Denial of Service issue]]></title>
        <id>https://github.com/advisories/GHSA-735f-pc8j-v9w8</id>
        <link href="https://github.com/advisories/GHSA-735f-pc8j-v9w8"/>
        <updated>2024-09-20T22:14:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When parsing unknown fields in the Protobuf Java Lite and Full library, a maliciously crafted message can cause a StackOverflow error and lead to a program crash.</p>
<p>Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team <a href="mailto:ecosystem@trailofbits.com">ecosystem@trailofbits.com</a></p>
<p>Affected versions: This issue affects all versions of both the Java full and lite Protobuf runtimes, as well as Protobuf for Kotlin and JRuby, which themselves use the Java Protobuf runtime.</p>
<h3 id="severity">Severity</h3>
<p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-7254">CVE-2024-7254</a> <strong>High</strong> CVSS4.0 Score 8.7 (NOTE: there may be a delay in publication)
This is a potential Denial of Service. Parsing nested groups as unknown fields with DiscardUnknownFieldsParser or Java Protobuf Lite parser, or against Protobuf map fields, creates unbounded recursions that can be abused by an attacker.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>For reproduction details, please refer to the unit tests (Protobuf Java <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/lite/src/test/java/com/google/protobuf/LiteTest.java">LiteTest</a> and <a href="https://github.com/protocolbuffers/protobuf/blob/a037f28ff81ee45ebe008c64ab632bf5372242ce/java/core/src/test/java/com/google/protobuf/CodedInputStreamTest.java">CodedInputStreamTest</a>) that identify the specific inputs that exercise this parsing weakness.</p>
<h3 id="remediation-and-mitigation">Remediation and Mitigation</h3>
<p>We have been working diligently to address this issue and have released a mitigation that is available now. Please update to the latest available versions of the following packages:</p>
<ul>
<li>protobuf-java (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-javalite (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin (3.25.5, 4.27.5, 4.28.2)</li>
<li>protobuf-kotlin-lite (3.25.5, 4.27.5, 4.28.2)</li>
<li>com-protobuf [JRuby gem only] (3.25.5, 4.27.5, 4.28.2)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8">https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7254">https://nvd.nist.gov/vuln/detail/CVE-2024-7254</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b">https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b">https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534">https://github.com/protocolbuffers/protobuf/commit/9a5f5fe752a20cbac2e722b06949ac985abdd534</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46">https://github.com/protocolbuffers/protobuf/commit/ac9fb5b4c71b0dd80985b27684e265d1f03abf46</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa">https://github.com/protocolbuffers/protobuf/commit/cc8b3483a5584b3301e3d43d17eb59704857ffaa</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3">https://github.com/protocolbuffers/protobuf/commit/d6c82fc55a76481c676f541a255571e8950bb8c3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/google-protobuf/CVE-2024-7254.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-735f-pc8j-v9w8">https://github.com/advisories/GHSA-735f-pc8j-v9w8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-735f-pc8j-v9w8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-19T16:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to remote code execution through code injection (GHSL-2024-185)]]></title>
        <id>https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</id>
        <link href="https://github.com/advisories/GHSA-7x4w-cj9r-h4v9"/>
        <updated>2024-09-18T15:48:33.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L51-L52">actions</a> defined inside of the MediaController class do not check whether a given path is inside a certain path (e.g. inside the media folder). If an attacker performed an account takeover of an administrator account (See: GHSL-2024-184) they could delete arbitrary files or folders on the server hosting Camaleon CMS. The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L64-L65">crop_url</a> action might make arbitrary file writes (similar impact to GHSL-2024-182) for any authenticated user possible, but it doesn't seem to work currently.</p>
<p>Arbitrary file deletion can be exploited with following code path: The parameter folder flows from the actions method:</p>
<pre><code class="language-ruby">  def actions
    authorize! :manage, :media if params[:media_action] != 'crop_url'
    params[:folder] = params[:folder].gsub('//', '/') if params[:folder].present?
    case params[:media_action]
    [..]
    when 'del_file'
      cama_uploader.delete_file(params[:folder].gsub('//', '/'))
      render plain: ''
</code></pre>
<p>into the method delete_file of the CamaleonCmsLocalUploader class (when files are uploaded locally):</p>
<pre><code class="language-ruby">def delete_file(key)
  file = File.join(@root_folder, key)
  FileUtils.rm(file) if File.exist? file
  @instance.hooks_run('after_delete', key)
  get_media_collection.find_by_key(key).take.destroy
end
</code></pre>
<p>Where it is joined in an unchecked manner with the root folder and then deleted.</p>
<p><strong>Proof of concept</strong>
The following request would delete the file README.md in the top folder of the Ruby on Rails application. (The values for auth_token, X-CSRF-Token and _cms_session would also need to be replaced with authenticated values in the curl command below)</p>
<pre><code>curl --path-as-is -i -s -k -X $'POST' \
    -H $'X-CSRF-Token: [..]' -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' -H $'Connection: keep-alive' \
    -b $'auth_token=[..]; _cms_session=[..]' \
    --data-binary $'versions=&amp;thumb_size=&amp;formats=&amp;media_formats=&amp;dimension=&amp;private=&amp;folder=..%2F..%2F..%2FREADME.md&amp;media_action=del_file' \
    $'https://&lt;camaleon-host&gt;/admin/media/actions?actions=true'
</code></pre>
<p><strong>Impact</strong>
This issue may lead to a defective CMS or system.</p>
<p><strong>Remediation</strong>
Normalize all file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p><strong>See also:</strong></p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/f5d032549fa0a204d06e738caf2663607967dee2">https://github.com/owen2345/camaleon-cms/commit/f5d032549fa0a204d06e738caf2663607967dee2</a></li>
<li><a href="https://github.com/advisories/GHSA-7x4w-cj9r-h4v9">https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:47:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to stored XSS through user file upload (GHSL-2024-184)]]></title>
        <id>https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</id>
        <link href="https://github.com/advisories/GHSA-r9cr-qmfw-pmrc"/>
        <updated>2024-09-18T15:47:58.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting has been found in the image upload functionality that can be used by normal registered users: It is possible to upload a SVG image containing JavaScript and it's also possible to upload a HTML document when the format parameter is manually changed to <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L105-L106">documents</a> or a string of an <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L110-L111">unsupported format</a>. If an authenticated user or administrator visits that uploaded image or document malicious JavaScript can be executed on their behalf (e.g. changing or deleting content inside of the CMS.)</p>
<p>Proof of concept
Login as a normal user (if user signup is enabled).
Go to the user's profile.
And upload the following profile picture via drag and drop.
The content of the SVG file could be as follows (e.g. name it test-xss.svg):</p>

<p><svg version="1.1" viewBox="0 0 198.4375 52.916666" height="500" width="500" xmlns="http://www.w3.org/2000/svg">
  <g transform="translate(-9.8676114,4.8833333)">
    <path transform="scale(1,-1)" style="fill:#131f6b;fill-opacity:1;stroke-width:0.05937638" d="m 107.79557,-10.430538 -7.33315,-0.02213 -3.647402,-6.361755 3.685742,-6.339624 7.33314,0.02213 3.64741,6.361756 z"></path>
  
  
  </g>
</svg>
The server might fail with a 500 internal server error, but the uploaded image should be available at a location like https:///media/1/test-xss-cookie.svg. If an authenticated user or administrator accesses that link their auth_token is reflected. Since the auth_token cookie contains a static <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/models/concerns/camaleon_cms/user_methods.rb#L18-L19">auth token</a> value that only changes when a user changes their password.</p>
<p>Impact
This issue may lead to account takeover due to reflected Cross-site scripting (XSS).</p>
<p>Remediation
Only allow the upload of safe files such as PNG, TXT and others or serve all "unsafe" files such as SVG and other files with a content-disposition: attachment header, which should prevent browsers from displaying them.</p>
<p>Additionally, a <a href="https://web.dev/articles/csp">Content security policy (CSP)</a> can be created that disallows inlined script. (Other parts of the application might need modification to continue functioning.)</p>
<p>To prevent the theft of the auth_token it could be marked with HttpOnly. This would however not prevent that actions could be performed as the authenticated user/administrator. Furthermore, it could make sense to use the authentication provided by Ruby on Rails, so that stolen tokens cannot be used anymore after some time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/b18fbc74f3ecd98a1f781d015f5466ef16b1425b">https://github.com/owen2345/camaleon-cms/commit/b18fbc74f3ecd98a1f781d015f5466ef16b1425b</a></li>
<li><a href="https://github.com/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T15:47:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to arbitrary path traversal (GHSL-2024-183)]]></title>
        <id>https://github.com/advisories/GHSA-cp65-5m9r-vc2c</id>
        <link href="https://github.com/advisories/GHSA-cp65-5m9r-vc2c"/>
        <updated>2024-09-18T19:24:19.000Z</updated>
        <content type="html"><![CDATA[<p>A path traversal vulnerability accessible via MediaController's download_private_file method allows authenticated users to download any file on the web server Camaleon CMS is running on (depending on the file permissions).</p>
<p>In the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L28">download_private_file</a> method:</p>
<pre><code class="language-ruby">def download_private_file
  cama_uploader.enable_private_mode!

  file = cama_uploader.fetch_file("private/#{params[:file]}")

  send_file file, disposition: 'inline'
end
</code></pre>
<p>The file parameter is passed to the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_local_uploader.rb#L27">fetch_file</a> method of the CamaleonCmsLocalUploader class (when files are uploaded locally):</p>
<pre><code class="language-ruby">def fetch_file(file_name)
  raise ActionController::RoutingError, 'File not found' unless file_exists?(file_name)

  file_name
end
</code></pre>
<p>If the file exists it's passed back to the download_private_file method where the file is sent to the user via <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L33-L34">send_file</a>.</p>
<p>Proof of concept
An authenticated user can download the /etc/passwd file by visiting an URL such as:</p>
<p>https:///admin/media/download_private_file?file=../../../../../../etc/passwd
Impact
This issue may lead to Information Disclosure.</p>
<p>Remediation
Normalize file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p>See also:</p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-cp65-5m9r-vc2c">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-cp65-5m9r-vc2c</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/071b1b09d6d61ab02a5960b1ccafd9d9c2155a3e">https://github.com/owen2345/camaleon-cms/commit/071b1b09d6d61ab02a5960b1ccafd9d9c2155a3e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46987">https://nvd.nist.gov/vuln/detail/CVE-2024-46987</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection">https://codeql.github.com/codeql-query-help/ruby/rb-path-injection</a></li>
<li><a href="https://owasp.org/www-community/attacks/Path_Traversal">https://owasp.org/www-community/attacks/Path_Traversal</a></li>
<li><a href="https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released">https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released</a></li>
<li><a href="https://github.com/advisories/GHSA-cp65-5m9r-vc2c">https://github.com/advisories/GHSA-cp65-5m9r-vc2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cp65-5m9r-vc2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:46:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS affected by arbitrary file write to RCE (GHSL-2024-182)]]></title>
        <id>https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</id>
        <link href="https://github.com/advisories/GHSA-wmjg-vqhv-q5p5"/>
        <updated>2024-09-18T19:24:04.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file write vulnerability accessible via the upload method of the MediaController allows authenticated users to write arbitrary files to any location on the web server Camaleon CMS is running on (depending on the permissions of the underlying filesystem). E.g. This can lead to a delayed remote code execution in case an attacker is able to write a Ruby file into the config/initializers/ subfolder of the Ruby on Rails application.</p>
<p>Once a user upload is started via the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L86-L87">upload</a> method, the file_upload and the folder parameter</p>
<pre><code class="language-ruby">def upload(settings = {})
  params[:dimension] = nil if params[:skip_auto_crop].present?
  f = { error: 'File not found.' }
  if params[:file_upload].present?
    f = upload_file(params[:file_upload],
                    { folder: params[:folder], dimension: params['dimension'], formats: params[:formats], versions: params[:versions],
                      thumb_size: params[:thumb_size] }.merge(settings))
  end
  [..]
end
</code></pre>
<p>are passed to the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L23-L24">upload_file</a> method. Inside that method the given settings are <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L41-L42">merged</a> with some presets. The file format is <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L61-L62">checked against</a> the formats settings we can override with the formats parameters.</p>
<pre><code class="language-ruby"># formats validations
  return { error: "#{ct('file_format_error')} (#{settings[:formats]})" } unless cama_uploader.class.validate_file_format(
    uploaded_io.path, settings[:formats]
 )
</code></pre>
<p>Our given folder is then <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L73-L74">passed unchecked</a> to the Cama_uploader:</p>
<pre><code class="language-ruby">key = File.join(settings[:folder], settings[:filename]).to_s.cama_fix_slash
res = cama_uploader.add_file(settings[:uploaded_io], key, { same_name: settings[:same_name] })
</code></pre>
<p>In the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_local_uploader.rb#L77">add_file</a> method of CamaleonCmsLocalUploader this key argument containing the unchecked path is then used to write the file to the file system:</p>
<pre><code class="language-ruby">def add_file(uploaded_io_or_file_path, key, args = {})
  [..]
  upload_io = uploaded_io_or_file_path.is_a?(String) ? File.open(uploaded_io_or_file_path) : uploaded_io_or_file_path
  File.open(File.join(@root_folder, key), 'wb') { |file| file.write(upload_io.read) }
  [..]
end
</code></pre>
<p>Proof of concept
Precondition: A valid account of a registered user is required. (The values for auth_token and _cms_session need to be replaced with authenticated values in the curl command below)</p>
<p>curl --path-as-is -i -s -k -X $'POST' <br> -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: multipart/form-data; boundary=----WebKitFormBoundary80dMC9jX3srWAsga' -H $'Accept: <em>/</em>' -H $'Connection: keep-alive' <br>    -b $'auth_token=[..]; _cms_session=[..]' <br>    --data-binary $'------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="file_upload"; filename="test.rb"\x0d\x0aContent-Type: text/x-ruby-script\x0d\x0a\x0d\x0aputs "================================="\x0aputs "================================="\x0aputs "= COMPROMISED                   ="\x0aputs "================================="\x0aputs "================================="\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="folder"\x0d\x0a\x0d\x0a../../../config/initializers/\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="skip_auto_crop"\x0d\x0a\x0d\x0atrue\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga--\x0d\x0a' <br>    $'https:///admin/media/upload?actions=false'
Note that the upload form field formats was removed so that Camaleon CMS accepts any file. The folder was set to ../../../config/initializers/so that following Ruby script is written into the initializers folder of the Rails web app:</p>
<p>puts "================================="
puts "================================="
puts "= COMPROMISED                   ="
puts "================================="
puts "================================="
Once Camaleon CMS is restarted following output will be visible in the log:</p>
<h1 id="">=================================</h1>
<h1 id="-compromised-------------------">= COMPROMISED                   =</h1>
<p>=================================
Impact
This issue may lead up to Remote Code Execution (RCE) via arbitrary file write.</p>
<p>Remediation
Normalize file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p>See also:</p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-wmjg-vqhv-q5p5">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-wmjg-vqhv-q5p5</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/b3b12b1e4a9e3fccaf5bb4330820fa7f8744e6bd">https://github.com/owen2345/camaleon-cms/commit/b3b12b1e4a9e3fccaf5bb4330820fa7f8744e6bd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46986">https://nvd.nist.gov/vuln/detail/CVE-2024-46986</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection">https://codeql.github.com/codeql-query-help/ruby/rb-path-injection</a></li>
<li><a href="https://owasp.org/www-community/attacks/Path_Traversal">https://owasp.org/www-community/attacks/Path_Traversal</a></li>
<li><a href="https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released">https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released</a></li>
<li><a href="https://github.com/advisories/GHSA-wmjg-vqhv-q5p5">https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T14:39:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sidekiq-unique-jobs] Cross Site Scripting vulnerability in Contribsys Sidekiq ]]></title>
        <id>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</id>
        <link href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5"/>
        <updated>2024-09-17T22:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Contribsys Sidekiq v.6.5.8 allows a remote attacker to obtain sensitive information via a crafted URL to the filter functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38">https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46950">https://nvd.nist.gov/vuln/detail/CVE-2023-46950</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829">https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7">https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7</a></li>
<li><a href="https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951">https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5">https://github.com/advisories/GHSA-fhx8-5c23-x7x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T15:31:37.000Z</published>
    </entry>
</feed>