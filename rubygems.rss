<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2022-04-12T00:18:37.324Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Denial of Service (DoS) in Nokogiri on JRuby]]></title>
        <id>https://github.com/advisories/GHSA-gx8x-g87m-h5q6</id>
        <link href="https://github.com/advisories/GHSA-gx8x-g87m-h5q6"/>
        <updated>2022-04-11T21:38:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri <code>v1.13.4</code> updates the vendored <code>org.cyberneko.html</code> library to <code>1.9.22.noko2</code> which addresses <a href="https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv">CVE-2022-24839</a>. That CVE is rated 7.5 (High Severity).</p>
<p>See <a href="https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv">GHSA-9849-p7jc-9rmv</a> for more information.</p>
<p>Please note that this advisory only applies to the <strong>JRuby</strong> implementation of Nokogiri <code>&lt; 1.13.4</code>.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Nokogiri <code>&gt;= 1.13.4</code>.</p>
<h2 id="impact">Impact</h2>
<h3 id="cve-2022-24839-in-nekohtml"><a href="https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv">CVE-2022-24839</a> in nekohtml</h3>
<ul>
<li><strong>Severity</strong>: High 7.5</li>
<li><strong>Type</strong>: <a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400</a> Uncontrolled Resource Consumption</li>
<li><strong>Description</strong>: The fork of <code>org.cyberneko.html</code> used by Nokogiri (Rubygem) raises a <code>java.lang.OutOfMemoryError</code> exception when parsing ill-formed HTML markup.</li>
<li><strong>See also</strong>: <a href="https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv">GHSA-9849-p7jc-9rmv</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv">https://github.com/sparklemotion/nekohtml/security/advisories/GHSA-9849-p7jc-9rmv</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-gx8x-g87m-h5q6">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-gx8x-g87m-h5q6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24839">https://nvd.nist.gov/vuln/detail/CVE-2022-24839</a></li>
<li><a href="https://github.com/sparklemotion/nekohtml/commit/a800fce3b079def130ed42a408ff1d09f89e773d">https://github.com/sparklemotion/nekohtml/commit/a800fce3b079def130ed42a408ff1d09f89e773d</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer">https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer</a></li>
<li><a href="https://github.com/advisories/GHSA-gx8x-g87m-h5q6">https://github.com/advisories/GHSA-gx8x-g87m-h5q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gx8x-g87m-h5q6</uri>
        </author>
        <published>2022-04-11T21:38:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] XML Injection in Xerces Java affects Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-xxx9-3xcr-gjj3</id>
        <link href="https://github.com/advisories/GHSA-xxx9-3xcr-gjj3"/>
        <updated>2022-04-11T21:39:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri v1.13.4 updates the vendored <code>xerces:xercesImpl</code> from 2.12.0 to 2.12.2, which addresses <a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23437">CVE-2022-23437</a>. That CVE is scored as CVSS 6.5 "Medium" on the NVD record.</p>
<p>Please note that this advisory only applies to the <strong>JRuby</strong> implementation of Nokogiri <code>&lt; 1.13.4</code>.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Nokogiri <code>&gt;= v1.13.4</code>.</p>
<h2 id="impact">Impact</h2>
<h3 id="cve-2022-23437-in-xerces-j"><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23437">CVE-2022-23437</a> in xerces-J</h3>
<ul>
<li><strong>Severity</strong>: Medium</li>
<li><strong>Type</strong>: <a href="https://cwe.mitre.org/data/definitions/91.html">CWE-91</a> XML Injection (aka Blind XPath Injection)</li>
<li><strong>Description</strong>: There's a vulnerability within the Apache Xerces Java (XercesJ) XML parser when handling specially crafted XML document payloads. This causes, the XercesJ XML parser to wait in an infinite loop, which may sometimes consume system resources for prolonged duration. This vulnerability is present within XercesJ version 2.12.1 and the previous versions.</li>
<li><strong>See also</strong>: <a href="https://github.com/advisories/GHSA-h65f-jvqw-m9fj">https://github.com/advisories/GHSA-h65f-jvqw-m9fj</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xxx9-3xcr-gjj3">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xxx9-3xcr-gjj3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23437">https://nvd.nist.gov/vuln/detail/CVE-2022-23437</a></li>
<li><a href="https://github.com/advisories/GHSA-h65f-jvqw-m9fj">https://github.com/advisories/GHSA-h65f-jvqw-m9fj</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer">https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer</a></li>
<li><a href="https://github.com/advisories/GHSA-xxx9-3xcr-gjj3">https://github.com/advisories/GHSA-xxx9-3xcr-gjj3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xxx9-3xcr-gjj3</uri>
        </author>
        <published>2022-04-11T21:30:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Out-of-bounds Write in zlib affects Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-v6gp-9mmm-c6p5</id>
        <link href="https://github.com/advisories/GHSA-v6gp-9mmm-c6p5"/>
        <updated>2022-04-11T21:40:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri v1.13.4 updates the vendored zlib from 1.2.11 to 1.2.12, which addresses <a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25032">CVE-2018-25032</a>. That CVE is scored as CVSS 7.4 "High" on the NVD record as of 2022-04-05.</p>
<p>Please note that this advisory only applies to the CRuby implementation of Nokogiri <code>&lt; 1.13.4</code>, and only if the packaged version of <code>zlib</code> is being used. Please see <a href="https://nokogiri.org/LICENSE-DEPENDENCIES.html#default-platform-release-ruby">this document</a> for a complete description of which platform gems vendor <code>zlib</code>. If you've overridden defaults at installation time to use system libraries instead of packaged libraries, you should instead pay attention to your distro's <code>zlib</code> release announcements. </p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Nokogiri <code>&gt;= v1.13.4</code>.</p>
<h2 id="impact">Impact</h2>
<h3 id="cve-2018-25032-in-zlib"><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25032">CVE-2018-25032</a> in zlib</h3>
<ul>
<li><strong>Severity</strong>: High</li>
<li><strong>Type</strong>: <a href="https://cwe.mitre.org/data/definitions/787.html">CWE-787</a> Out of bounds write</li>
<li><strong>Description</strong>: zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-v6gp-9mmm-c6p5">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-v6gp-9mmm-c6p5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25032">https://nvd.nist.gov/vuln/detail/CVE-2018-25032</a></li>
<li><a href="https://github.com/advisories/GHSA-jc36-42cf-vqwj">https://github.com/advisories/GHSA-jc36-42cf-vqwj</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer">https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer</a></li>
<li><a href="https://github.com/advisories/GHSA-v6gp-9mmm-c6p5">https://github.com/advisories/GHSA-v6gp-9mmm-c6p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6gp-9mmm-c6p5</uri>
        </author>
        <published>2022-04-11T21:21:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nokogiri] Inefficient Regular Expression Complexity in Nokogiri]]></title>
        <id>https://github.com/advisories/GHSA-crjr-9rc5-ghw8</id>
        <link href="https://github.com/advisories/GHSA-crjr-9rc5-ghw8"/>
        <updated>2022-04-11T21:22:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Nokogiri <code>&lt; v1.13.4</code> contains an inefficient regular expression that is susceptible to excessive backtracking when attempting to detect encoding in HTML documents.</p>
<h2 id="mitigation">Mitigation</h2>
<p>Upgrade to Nokogiri <code>&gt;= 1.13.4</code>.</p>
<h2 id="severity">Severity</h2>
<p>The Nokogiri maintainers have evaluated this as <a href="https://www.first.org/cvss/calculator/3.1#CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H"><strong>High Severity</strong> 7.5 (CVSS3.1)</a>.</p>
<h2 id="references">References</h2>
<p><a href="https://cwe.mitre.org/data/definitions/1333.html">CWE-1333</a> Inefficient Regular Expression Complexity</p>
<h2 id="credit">Credit</h2>
<p>This vulnerability was reported by HackerOne user ooooooo_q (ななおく).</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-crjr-9rc5-ghw8">https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-crjr-9rc5-ghw8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24836">https://nvd.nist.gov/vuln/detail/CVE-2022-24836</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/commit/e444525ef1634b675cd1cf52d39f4320ef0aecfd">https://github.com/sparklemotion/nokogiri/commit/e444525ef1634b675cd1cf52d39f4320ef0aecfd</a></li>
<li><a href="https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4">https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.4</a></li>
<li><a href="https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer">https://groups.google.com/g/ruby-security-ann/c/vX7qSjsvWis/m/TJWN4oOKBwAJ?utm_medium=email&amp;utm_source=footer</a></li>
<li><a href="https://github.com/advisories/GHSA-crjr-9rc5-ghw8">https://github.com/advisories/GHSA-crjr-9rc5-ghw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-crjr-9rc5-ghw8</uri>
        </author>
        <published>2022-04-11T21:18:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bundler] Dependency Confusion in Bundler]]></title>
        <id>https://github.com/advisories/GHSA-fp4w-jxhp-m23p</id>
        <link href="https://github.com/advisories/GHSA-fp4w-jxhp-m23p"/>
        <updated>2022-04-07T15:49:53.000Z</updated>
        <content type="html"><![CDATA[<p>Bundler 1.16.0 through 2.2.9 and 2.2.11 through 2.2.17 sometimes chooses a dependency source based on the highest gem version number, which means that a rogue gem found at a public source may be chosen, even if the intended choice was a private gem that is a dependency of another private gem that is explicitly depended on by the application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36327">https://nvd.nist.gov/vuln/detail/CVE-2020-36327</a></li>
<li><a href="https://github.com/rubygems/rubygems/issues/3982">https://github.com/rubygems/rubygems/issues/3982</a></li>
<li><a href="https://bundler.io/blog/2021/02/15/a-more-secure-bundler-we-fixed-our-source-priorities.html">https://bundler.io/blog/2021/02/15/a-more-secure-bundler-we-fixed-our-source-priorities.html</a></li>
<li><a href="https://mensfeld.pl/2021/02/rubygems-dependency-confusion-attack-side-of-things/">https://mensfeld.pl/2021/02/rubygems-dependency-confusion-attack-side-of-things/</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-24105">https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2021-24105</a></li>
<li><a href="https://www.zofrex.com/blog/2021/04/29/bundler-still-vulnerable-dependency-confusion-cve-2020-36327/">https://www.zofrex.com/blog/2021/04/29/bundler-still-vulnerable-dependency-confusion-cve-2020-36327/</a></li>
<li><a href="https://github.com/rubygems/rubygems/pull/4609">https://github.com/rubygems/rubygems/pull/4609</a></li>
<li><a href="https://github.com/rubygems/rubygems/commit/078bf682ac40017b309b5fc69f283ff640e7c129">https://github.com/rubygems/rubygems/commit/078bf682ac40017b309b5fc69f283ff640e7c129</a></li>
<li><a href="https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#2218-may-25-2021">https://github.com/rubygems/rubygems/blob/master/bundler/CHANGELOG.md#2218-may-25-2021</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bundler/CVE-2020-36327.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bundler/CVE-2020-36327.yml</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MWXHK5UUHVSHF7HTHMX6JY3WXDVNIHSL/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MWXHK5UUHVSHF7HTHMX6JY3WXDVNIHSL/</a></li>
<li><a href="https://github.com/advisories/GHSA-fp4w-jxhp-m23p">https://github.com/advisories/GHSA-fp4w-jxhp-m23p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fp4w-jxhp-m23p</uri>
        </author>
        <published>2021-05-24T18:12:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yajl-ruby] Buffer Overflow in yajl-ruby]]></title>
        <id>https://github.com/advisories/GHSA-jj47-x69x-mxrm</id>
        <link href="https://github.com/advisories/GHSA-jj47-x69x-mxrm"/>
        <updated>2022-04-06T21:08:35.000Z</updated>
        <content type="html"><![CDATA[<p>yajl-ruby is a streaming JSON parsing and encoding library for Ruby (C bindings to yajl) based on the YAJL library.
The 1.x branch and the 2.x branch of <a href="https://github.com/lloyd/yajl">yajl</a> contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs.</p>
<h3 id="details">Details</h3>
<p>The <a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">reallocation logic at yajl_buf.c#L64</a> may result in the <code>need</code> 32bit integer wrapping to 0 when <code>need</code> approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf-&gt;alloc into a small heap chunk.</p>
<p>These integers are declared as <code>size_t</code> in the 2.x branch of <code>yajl</code>, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which <code>size_t</code> is a 32bit integer.</p>
<p>Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption.</p>
<h3 id="impact">Impact</h3>
<p>We rate this as a moderate severity vulnerability which mostly impacts process availability as we believe exploitation for arbitrary code execution to be unlikely.</p>
<h3 id="patches">Patches</h3>
<p>Patched in yajl-ruby 1.4.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing large inputs to YAJL</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/brianmario/yajl-ruby/issues">yajl-ruby</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm">https://github.com/brianmario/yajl-ruby/security/advisories/GHSA-jj47-x69x-mxrm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24795">https://nvd.nist.gov/vuln/detail/CVE-2022-24795</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6">https://github.com/brianmario/yajl-ruby/commit/7168bd79b888900aa94523301126f968a93eb3a6</a></li>
<li><a href="https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64">https://github.com/brianmario/yajl-ruby/blob/7168bd79b888900aa94523301126f968a93eb3a6/ext/yajl/yajl_buf.c#L64</a></li>
<li><a href="https://github.com/advisories/GHSA-jj47-x69x-mxrm">https://github.com/advisories/GHSA-jj47-x69x-mxrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj47-x69x-mxrm</uri>
        </author>
        <published>2022-04-05T15:55:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cocoapods-downloader] Command injection in cocoapods-downloader]]></title>
        <id>https://github.com/advisories/GHSA-7627-mp87-jf6q</id>
        <link href="https://github.com/advisories/GHSA-7627-mp87-jf6q"/>
        <updated>2022-04-05T22:20:23.000Z</updated>
        <content type="html"><![CDATA[<p>The package cocoapods-downloader before 1.6.0, from 1.6.2 and before 1.6.3 are vulnerable to Command Injection via git argument injection. When calling the Pod::Downloader.preprocess_options function and using git, both the git and branch parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24440">https://nvd.nist.gov/vuln/detail/CVE-2022-24440</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-downloader/pull/124">https://github.com/CocoaPods/cocoapods-downloader/pull/124</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-downloader/pull/128">https://github.com/CocoaPods/cocoapods-downloader/pull/128</a></li>
<li><a href="https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414278">https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414278</a></li>
<li><a href="https://github.com/advisories/GHSA-7627-mp87-jf6q">https://github.com/advisories/GHSA-7627-mp87-jf6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7627-mp87-jf6q</uri>
        </author>
        <published>2022-04-02T00:00:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cocoapods-downloader] Command injection in cocoapods-downloader]]></title>
        <id>https://github.com/advisories/GHSA-7627-mp87-jf6q</id>
        <link href="https://github.com/advisories/GHSA-7627-mp87-jf6q"/>
        <updated>2022-04-05T22:20:23.000Z</updated>
        <content type="html"><![CDATA[<p>The package cocoapods-downloader before 1.6.0, from 1.6.2 and before 1.6.3 are vulnerable to Command Injection via git argument injection. When calling the Pod::Downloader.preprocess_options function and using git, both the git and branch parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24440">https://nvd.nist.gov/vuln/detail/CVE-2022-24440</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-downloader/pull/124">https://github.com/CocoaPods/cocoapods-downloader/pull/124</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-downloader/pull/128">https://github.com/CocoaPods/cocoapods-downloader/pull/128</a></li>
<li><a href="https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414278">https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414278</a></li>
<li><a href="https://github.com/advisories/GHSA-7627-mp87-jf6q">https://github.com/advisories/GHSA-7627-mp87-jf6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7627-mp87-jf6q</uri>
        </author>
        <published>2022-04-02T00:00:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cocoapods-downloader] Command injection in cocoapods-downloader]]></title>
        <id>https://github.com/advisories/GHSA-g397-v4w5-4m79</id>
        <link href="https://github.com/advisories/GHSA-g397-v4w5-4m79"/>
        <updated>2022-04-05T22:22:21.000Z</updated>
        <content type="html"><![CDATA[<p>The package cocoapods-downloader before 1.6.2 are vulnerable to Command Injection via hg argument injection. When calling the download function (when using hg), the url (and/or revision, tag, branch) is passed to the hg clone command in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21223">https://nvd.nist.gov/vuln/detail/CVE-2022-21223</a></li>
<li><a href="https://github.com/CocoaPods/cocoapods-downloader/pull/127">https://github.com/CocoaPods/cocoapods-downloader/pull/127</a></li>
<li><a href="https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414280">https://snyk.io/vuln/SNYK-RUBY-COCOAPODSDOWNLOADER-2414280</a></li>
<li><a href="https://github.com/advisories/GHSA-g397-v4w5-4m79">https://github.com/advisories/GHSA-g397-v4w5-4m79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g397-v4w5-4m79</uri>
        </author>
        <published>2022-04-02T00:00:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[asciidoctor-include-ext] Command Injection vulnerability in asciidoctor-include-ext]]></title>
        <id>https://github.com/advisories/GHSA-v222-6mr4-qj29</id>
        <link href="https://github.com/advisories/GHSA-v222-6mr4-qj29"/>
        <updated>2022-04-06T21:24:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Applications using <a href="https://github.com/asciidoctor/asciidoctor">Asciidoctor (Ruby)</a> with <a href="https://github.com/jirutka/asciidoctor-include-ext">asciidoctor-include-ext</a> (prior to version 0.4.0), which render user-supplied input in AsciiDoc markup, may allow an attacker to execute arbitrary system commands on the host operating system. <del>This attack is possible even when <code>allow-uri-read</code> is disabled!</del> (EDIT: it’s not)</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in commit c7ea001 (and further improved in cbaccf3), which is included in version <a href="https://rubygems.org/gems/asciidoctor-include-ext/versions/0.4.0">0.4.0</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<pre><code class="language-rb">require 'asciidoctor/include_ext'

class Asciidoctor::IncludeExt::IncludeProcessor
  # Overrides superclass private method to mitigate Command Injection
  # vulnerability in asciidoctor-include-ext &lt;0.4.0.
  def target_uri?(target)
    target.downcase.start_with?('http://', 'https://') \
      &amp;&amp; URI.parse(target).is_a?(URI::HTTP)
  rescue URI::InvalidURIError
    false
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://sakurity.com/blog/2015/02/28/openuri.html">https://sakurity.com/blog/2015/02/28/openuri.html</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>This vulnerability was discovered by Joern Schneeweisz from the GitLab Security Research Team.</p>
<h3 id="for-more-information">For more information</h3>
<p>See commit message c7ea001.</p>
<p>If you have any questions or comments about this advisory open an issue in <a href="https://github.com/jirutka/asciidoctor-include-ext/issues/">jirutka/asciidoctor-include-ext</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jirutka/asciidoctor-include-ext/security/advisories/GHSA-v222-6mr4-qj29">https://github.com/jirutka/asciidoctor-include-ext/security/advisories/GHSA-v222-6mr4-qj29</a></li>
<li><a href="https://github.com/jirutka/asciidoctor-include-ext/commit/c7ea001a597c7033575342c51483dab7b87ae155">https://github.com/jirutka/asciidoctor-include-ext/commit/c7ea001a597c7033575342c51483dab7b87ae155</a></li>
<li><a href="https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee">https://github.com/jirutka/asciidoctor-include-ext/commit/cbaccf3de533cbca224bf61d0b74e4b84d41d8ee</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24803">https://nvd.nist.gov/vuln/detail/CVE-2022-24803</a></li>
<li><a href="https://github.com/advisories/GHSA-v222-6mr4-qj29">https://github.com/advisories/GHSA-v222-6mr4-qj29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v222-6mr4-qj29</uri>
        </author>
        <published>2022-03-31T23:27:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[puma] HTTP Request Smuggling in puma]]></title>
        <id>https://github.com/advisories/GHSA-h99w-9q5r-gjq9</id>
        <link href="https://github.com/advisories/GHSA-h99w-9q5r-gjq9"/>
        <updated>2022-04-01T20:00:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using Puma behind a proxy that does not properly validate that the incoming HTTP request matches the RFC7230 standard, Puma and the frontend proxy may disagree on where a request starts and ends. This would allow requests to be smuggled via the front-end proxy to Puma.</p>
<p>The following vulnerabilities are addressed by this advisory:</p>
<ul>
<li>Lenient parsing of <code>Transfer-Encoding</code> headers, when unsupported encodings should be rejected and the final encoding must be <code>chunked</code>.</li>
<li>Lenient parsing of malformed <code>Content-Length</code> headers and chunk sizes, when only digits and hex digits should be allowed.</li>
<li>Lenient parsing of duplicate <code>Content-Length</code> headers, when they should be rejected.</li>
<li>Lenient parsing of the ending of chunked segments, when they should end with <code>\r\n</code>.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in 5.6.4 and 4.3.12.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When deploying a proxy in front of Puma, turning on any and all functionality to make sure that the request matches the RFC7230 standard. </p>
<p>These proxy servers are known to have "good" behavior re: this standard and upgrading Puma may not be necessary. Users are encouraged to validate for themselves.</p>
<ul>
<li>Nginx (latest)</li>
<li>Apache (latest)</li>
<li>Haproxy 2.5+</li>
<li>Caddy (latest)</li>
<li>Traefik (latest)</li>
</ul>
<h3 id="references">References</h3>
<p><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/puma/puma">Puma</a></li>
<li>See our <a href="https://github.com/puma/puma/security/policy">security policy</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/puma/puma/security/advisories/GHSA-h99w-9q5r-gjq9">https://github.com/puma/puma/security/advisories/GHSA-h99w-9q5r-gjq9</a></li>
<li><a href="https://github.com/puma/puma/commit/5bb7d202e24dec00a898dca4aa11db391d7787a5">https://github.com/puma/puma/commit/5bb7d202e24dec00a898dca4aa11db391d7787a5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24790">https://nvd.nist.gov/vuln/detail/CVE-2022-24790</a></li>
<li><a href="https://github.com/advisories/GHSA-h99w-9q5r-gjq9">https://github.com/advisories/GHSA-h99w-9q5r-gjq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h99w-9q5r-gjq9</uri>
        </author>
        <published>2022-03-30T21:48:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[puma] HTTP Request Smuggling in puma]]></title>
        <id>https://github.com/advisories/GHSA-h99w-9q5r-gjq9</id>
        <link href="https://github.com/advisories/GHSA-h99w-9q5r-gjq9"/>
        <updated>2022-04-01T20:00:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using Puma behind a proxy that does not properly validate that the incoming HTTP request matches the RFC7230 standard, Puma and the frontend proxy may disagree on where a request starts and ends. This would allow requests to be smuggled via the front-end proxy to Puma.</p>
<p>The following vulnerabilities are addressed by this advisory:</p>
<ul>
<li>Lenient parsing of <code>Transfer-Encoding</code> headers, when unsupported encodings should be rejected and the final encoding must be <code>chunked</code>.</li>
<li>Lenient parsing of malformed <code>Content-Length</code> headers and chunk sizes, when only digits and hex digits should be allowed.</li>
<li>Lenient parsing of duplicate <code>Content-Length</code> headers, when they should be rejected.</li>
<li>Lenient parsing of the ending of chunked segments, when they should end with <code>\r\n</code>.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been fixed in 5.6.4 and 4.3.12.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When deploying a proxy in front of Puma, turning on any and all functionality to make sure that the request matches the RFC7230 standard. </p>
<p>These proxy servers are known to have "good" behavior re: this standard and upgrading Puma may not be necessary. Users are encouraged to validate for themselves.</p>
<ul>
<li>Nginx (latest)</li>
<li>Apache (latest)</li>
<li>Haproxy 2.5+</li>
<li>Caddy (latest)</li>
<li>Traefik (latest)</li>
</ul>
<h3 id="references">References</h3>
<p><a href="https://portswigger.net/web-security/request-smuggling">HTTP Request Smuggling</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/puma/puma">Puma</a></li>
<li>See our <a href="https://github.com/puma/puma/security/policy">security policy</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/puma/puma/security/advisories/GHSA-h99w-9q5r-gjq9">https://github.com/puma/puma/security/advisories/GHSA-h99w-9q5r-gjq9</a></li>
<li><a href="https://github.com/puma/puma/commit/5bb7d202e24dec00a898dca4aa11db391d7787a5">https://github.com/puma/puma/commit/5bb7d202e24dec00a898dca4aa11db391d7787a5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24790">https://nvd.nist.gov/vuln/detail/CVE-2022-24790</a></li>
<li><a href="https://github.com/advisories/GHSA-h99w-9q5r-gjq9">https://github.com/advisories/GHSA-h99w-9q5r-gjq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h99w-9q5r-gjq9</uri>
        </author>
        <published>2022-03-30T21:48:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kubeclient] Improper Certificate Validation in kubeclient]]></title>
        <id>https://github.com/advisories/GHSA-69p3-xp37-f692</id>
        <link href="https://github.com/advisories/GHSA-69p3-xp37-f692"/>
        <updated>2022-04-08T21:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in all versions of kubeclient up to (but not including) v4.9.3, the Ruby client for Kubernetes REST API, in the way it parsed kubeconfig files. When the kubeconfig file does not configure custom CA to verify certs, kubeclient ends up accepting any certificate (it wrongly returns VERIFY_NONE). Ruby applications that leverage kubeclient to parse kubeconfig files are susceptible to Man-in-the-middle attacks (MITM).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0759">https://nvd.nist.gov/vuln/detail/CVE-2022-0759</a></li>
<li><a href="https://github.com/ManageIQ/kubeclient/issues/554">https://github.com/ManageIQ/kubeclient/issues/554</a></li>
<li><a href="https://github.com/ManageIQ/kubeclient/issues/555">https://github.com/ManageIQ/kubeclient/issues/555</a></li>
<li><a href="https://github.com/ManageIQ/kubeclient/pull/556">https://github.com/ManageIQ/kubeclient/pull/556</a></li>
<li><a href="https://github.com/advisories/GHSA-69p3-xp37-f692">https://github.com/advisories/GHSA-69p3-xp37-f692</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69p3-xp37-f692</uri>
        </author>
        <published>2022-03-26T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[foreman_ansible] Missing Authentication for Critical Function in Foreman Ansible]]></title>
        <id>https://github.com/advisories/GHSA-vvff-6wrr-4g7q</id>
        <link href="https://github.com/advisories/GHSA-vvff-6wrr-4g7q"/>
        <updated>2022-04-05T19:28:40.000Z</updated>
        <content type="html"><![CDATA[<p>An authorization flaw was found in Foreman Ansible. An authenticated attacker with certain permissions to create and run Ansible jobs can access hosts through job templates. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3589">https://nvd.nist.gov/vuln/detail/CVE-2021-3589</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2021-3589">https://access.redhat.com/security/cve/CVE-2021-3589</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1969265">https://bugzilla.redhat.com/show_bug.cgi?id=1969265</a></li>
<li><a href="https://github.com/theforeman/foreman_ansible/commit/a5e0827bc3ec6c8ab82f968907857a15646305d5">https://github.com/theforeman/foreman_ansible/commit/a5e0827bc3ec6c8ab82f968907857a15646305d5</a></li>
<li><a href="https://github.com/advisories/GHSA-vvff-6wrr-4g7q">https://github.com/advisories/GHSA-vvff-6wrr-4g7q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvff-6wrr-4g7q</uri>
        </author>
        <published>2022-03-24T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webrick] Moderate severity vulnerability that affects webrick]]></title>
        <id>https://github.com/advisories/GHSA-6mq2-37j5-w6r6</id>
        <link href="https://github.com/advisories/GHSA-6mq2-37j5-w6r6"/>
        <updated>2022-03-12T00:17:56.000Z</updated>
        <content type="html"><![CDATA[<p>WEBrick 1.3.1 in Ruby 1.8.6 through patchlevel 383, 1.8.7 through patchlevel 248, 1.8.8dev, 1.9.1 through patchlevel 376, and 1.9.2dev writes data to a log file without sanitizing non-printable characters, which might allow remote attackers to modify a window's title, or possibly execute arbitrary commands or overwrite files, via an HTTP request containing an escape sequence for a terminal emulator.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2009-4492">https://nvd.nist.gov/vuln/detail/CVE-2009-4492</a></li>
<li><a href="https://github.com/advisories/GHSA-6mq2-37j5-w6r6">https://github.com/advisories/GHSA-6mq2-37j5-w6r6</a></li>
<li><a href="http://secunia.com/advisories/37949">http://secunia.com/advisories/37949</a></li>
<li><a href="http://securitytracker.com/id?1023429">http://securitytracker.com/id?1023429</a></li>
<li><a href="http://www.redhat.com/support/errata/RHSA-2011-0908.html">http://www.redhat.com/support/errata/RHSA-2011-0908.html</a></li>
<li><a href="http://www.redhat.com/support/errata/RHSA-2011-0909.html">http://www.redhat.com/support/errata/RHSA-2011-0909.html</a></li>
<li><a href="http://www.ruby-lang.org/en/news/2010/01/10/webrick-escape-sequence-injection">http://www.ruby-lang.org/en/news/2010/01/10/webrick-escape-sequence-injection</a></li>
<li><a href="http://www.securityfocus.com/archive/1/508830/100/0/threaded">http://www.securityfocus.com/archive/1/508830/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/37710">http://www.securityfocus.com/bid/37710</a></li>
<li><a href="http://www.ush.it/team/ush/hack_httpd_escape/adv.txt">http://www.ush.it/team/ush/hack_httpd_escape/adv.txt</a></li>
<li><a href="http://www.vupen.com/english/advisories/2010/0089">http://www.vupen.com/english/advisories/2010/0089</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6mq2-37j5-w6r6</uri>
        </author>
        <published>2017-10-24T18:33:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Possible code injection vulnerability in Rails / Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-w749-p3v6-hccq</id>
        <link href="https://github.com/advisories/GHSA-w749-p3v6-hccq"/>
        <updated>2022-03-11T20:37:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Storage module of Rails starting with version 5.2.0 are possibly vulnerable to code injection. This issue was patched in versions 5.2.6.3, 6.0.4.7, 6.1.4.7, and 7.0.2.3. To work around this issue, applications should implement a strict allow-list on accepted transformation methods or arguments.  Additionally, a strict ImageMagick security policy will help mitigate this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21831">https://nvd.nist.gov/vuln/detail/CVE-2022-21831</a></li>
<li><a href="https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e">https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI">https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI</a></li>
<li><a href="https://rubysec.com/advisories/CVE-2022-21831/">https://rubysec.com/advisories/CVE-2022-21831/</a></li>
<li><a href="https://github.com/advisories/GHSA-w749-p3v6-hccq">https://github.com/advisories/GHSA-w749-p3v6-hccq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w749-p3v6-hccq</uri>
        </author>
        <published>2022-03-08T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Possible code injection vulnerability in Rails / Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-w749-p3v6-hccq</id>
        <link href="https://github.com/advisories/GHSA-w749-p3v6-hccq"/>
        <updated>2022-03-11T20:37:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Storage module of Rails starting with version 5.2.0 are possibly vulnerable to code injection. This issue was patched in versions 5.2.6.3, 6.0.4.7, 6.1.4.7, and 7.0.2.3. To work around this issue, applications should implement a strict allow-list on accepted transformation methods or arguments.  Additionally, a strict ImageMagick security policy will help mitigate this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21831">https://nvd.nist.gov/vuln/detail/CVE-2022-21831</a></li>
<li><a href="https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e">https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI">https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI</a></li>
<li><a href="https://rubysec.com/advisories/CVE-2022-21831/">https://rubysec.com/advisories/CVE-2022-21831/</a></li>
<li><a href="https://github.com/advisories/GHSA-w749-p3v6-hccq">https://github.com/advisories/GHSA-w749-p3v6-hccq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w749-p3v6-hccq</uri>
        </author>
        <published>2022-03-08T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Possible code injection vulnerability in Rails / Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-w749-p3v6-hccq</id>
        <link href="https://github.com/advisories/GHSA-w749-p3v6-hccq"/>
        <updated>2022-03-11T20:37:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Storage module of Rails starting with version 5.2.0 are possibly vulnerable to code injection. This issue was patched in versions 5.2.6.3, 6.0.4.7, 6.1.4.7, and 7.0.2.3. To work around this issue, applications should implement a strict allow-list on accepted transformation methods or arguments.  Additionally, a strict ImageMagick security policy will help mitigate this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21831">https://nvd.nist.gov/vuln/detail/CVE-2022-21831</a></li>
<li><a href="https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e">https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI">https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI</a></li>
<li><a href="https://rubysec.com/advisories/CVE-2022-21831/">https://rubysec.com/advisories/CVE-2022-21831/</a></li>
<li><a href="https://github.com/advisories/GHSA-w749-p3v6-hccq">https://github.com/advisories/GHSA-w749-p3v6-hccq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w749-p3v6-hccq</uri>
        </author>
        <published>2022-03-08T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Possible code injection vulnerability in Rails / Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-w749-p3v6-hccq</id>
        <link href="https://github.com/advisories/GHSA-w749-p3v6-hccq"/>
        <updated>2022-03-11T20:37:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Active Storage module of Rails starting with version 5.2.0 are possibly vulnerable to code injection. This issue was patched in versions 5.2.6.3, 6.0.4.7, 6.1.4.7, and 7.0.2.3. To work around this issue, applications should implement a strict allow-list on accepted transformation methods or arguments.  Additionally, a strict ImageMagick security policy will help mitigate this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21831">https://nvd.nist.gov/vuln/detail/CVE-2022-21831</a></li>
<li><a href="https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e">https://github.com/rails/rails/commit/0a72f7d670e9aa77a0bb8584cb1411ddabb7546e</a></li>
<li><a href="https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI">https://groups.google.com/g/rubyonrails-security/c/n-p-W1yxatI</a></li>
<li><a href="https://rubysec.com/advisories/CVE-2022-21831/">https://rubysec.com/advisories/CVE-2022-21831/</a></li>
<li><a href="https://github.com/advisories/GHSA-w749-p3v6-hccq">https://github.com/advisories/GHSA-w749-p3v6-hccq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w749-p3v6-hccq</uri>
        </author>
        <published>2022-03-08T21:25:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[commonmarker] Integer overflow in cmark-gfm table parsing extension leads to heap memory corruption]]></title>
        <id>https://github.com/advisories/GHSA-fmx4-26r3-wxpf</id>
        <link href="https://github.com/advisories/GHSA-fmx4-26r3-wxpf"/>
        <updated>2022-03-03T20:29:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>CommonMarker uses <code>cmark-gfm</code> for rendering <a href="https://github.github.com/gfm/">Github Flavored Markdown</a>. An <a href="https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x">integer overflow in <code>cmark-gfm</code>'s table row parsing</a> may lead to heap memory corruption when parsing tables who's marker rows contain more than UINT16_MAX columns. The impact of this heap corruption ranges from Information Leak to Arbitrary Code Execution.</p>
<p>If affected versions of CommonMarker are used for rendering remote user controlled markdown, this vulnerability may lead to Remote Code Execution (RCE).</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in the following CommonMarker release:</p>
<ul>
<li>v0.23.4</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>The vulnerability exists in the table markdown extensions of <code>cmark-gfm</code>. Disabling any use of the table extension will prevent this vulnerability from being triggered.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x">https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x</a></li>
</ul>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>We would like to thank Felix Wilhelm of Google's Project Zero for reporting this vulnerability</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="http://github.com/gjtorikian/commonmarker">CommonMarker</a><h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x">https://github.com/github/cmark-gfm/security/advisories/GHSA-mc3g-88wq-6f4x</a></li>
<li><a href="https://github.com/gjtorikian/commonmarker/security/advisories/GHSA-fmx4-26r3-wxpf">https://github.com/gjtorikian/commonmarker/security/advisories/GHSA-fmx4-26r3-wxpf</a></li>
<li><a href="https://github.com/gjtorikian/commonmarker/commit/ab4504fd17460627a6ab255bc3c63e8e5fc6aed3">https://github.com/gjtorikian/commonmarker/commit/ab4504fd17460627a6ab255bc3c63e8e5fc6aed3</a></li>
<li><a href="https://github.com/advisories/GHSA-fmx4-26r3-wxpf">https://github.com/advisories/GHSA-fmx4-26r3-wxpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fmx4-26r3-wxpf</uri>
        </author>
        <published>2022-03-03T20:28:47.000Z</published>
    </entry>
</feed>