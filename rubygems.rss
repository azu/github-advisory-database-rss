<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rubygems.rss</id>
    <title>Security Advisory for Ruby gems hosted at RubyGems.org</title>
    <updated>2024-03-14T08:01:28.191Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arubygems"/>
    <subtitle>Security Advisory for Ruby gems hosted at RubyGems.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-13T22:19:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-13T22:19:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phlex] Cross-site Scripting (XSS) possible with maliciously formed HTML attribute names and values in Phlex]]></title>
        <id>https://github.com/advisories/GHSA-242p-4v39-2v8g</id>
        <link href="https://github.com/advisories/GHSA-242p-4v39-2v8g"/>
        <updated>2024-03-13T20:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>There is a potential cross-site scripting (XSS) vulnerability that can be exploited via maliciously crafted user data. This was due to improper case-sensitivity in the code that was meant to prevent these attacks.</p>
<h3 id="impact">Impact</h3>
<p>If you render an <code>&lt;a&gt;</code> tag with an <code>href</code> attribute set to a user-provided link, that link could potentially execute JavaScript when clicked by another user.</p>
<pre><code class="language-ruby">a(href: user_profile) { "Profile" }
</code></pre>
<p>If you splat user-provided attributes when rendering any HTML or SVG tag, malicious event attributes could be included in the output, executing JavaScript when the events are triggered by another user.</p>
<pre><code class="language-ruby">h1(**JSON.parse(user_attributes))
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/phlex">available on RubyGems</a> for all <code>1.x</code> minor versions. The patched versions are:</p>
<ul>
<li><a href="https://rubygems.org/gems/phlex/versions/1.9.1">1.9.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.8.2">1.8.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.7.1">1.7.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.6.2">1.6.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.5.2">1.5.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.4.1">1.4.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.3.3">1.3.3</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.2.2">1.2.2</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.1.1">1.1.1</a></li>
<li><a href="https://rubygems.org/gems/phlex/versions/1.0.1">1.0.1</a></li>
</ul>
<p>If you are on <code>main</code>, it has been patched since <a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1"><code>aa50c60</code></a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Configuring a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">Content Security Policy</a> that does not allow <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline"><code>unsafe-inline</code></a> would effectively prevent this vulnerability from being exploited.</p>
<h3 id="references">References</h3>
<p>In addition to upgrading to a patched version of Phlex, we strongly recommend configuring a Content Security Policy header that does not allow <code>unsafe-inline</code>. Here’s how you can configure a Content Security Policy header in Rails. <a href="https://guides.rubyonrails.org/security.html#content-security-policy-header">https://guides.rubyonrails.org/security.html#content-security-policy-header</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g">https://github.com/phlex-ruby/phlex/security/advisories/GHSA-242p-4v39-2v8g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28199">https://nvd.nist.gov/vuln/detail/CVE-2024-28199</a></li>
<li><a href="https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1">https://github.com/phlex-ruby/phlex/commit/aa50c604cdee1d0ce7ef068a4c66cbd5d43f96a1</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy#unsafe-inline</a></li>
<li><a href="https://github.com/advisories/GHSA-242p-4v39-2v8g">https://github.com/advisories/GHSA-242p-4v39-2v8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-242p-4v39-2v8g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:39:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json-jwt] json-jwt allows bypass of identity checks via a sign/encryption confusion attack]]></title>
        <id>https://github.com/advisories/GHSA-c8v6-786g-vjx6</id>
        <link href="https://github.com/advisories/GHSA-c8v6-786g-vjx6"/>
        <updated>2024-03-06T23:50:38.000Z</updated>
        <content type="html"><![CDATA[<p>The json-jwt (aka JSON::JWT) gem 1.16.x before 1.16.6, 1.15.x before 1.15.3.1 for Ruby sometimes allows bypass of identity checks via a sign/encryption confusion attack. For example, JWE can sometimes be used to bypass JSON::JWT.decode.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51774">https://nvd.nist.gov/vuln/detail/CVE-2023-51774</a></li>
<li><a href="https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md">https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/120">https://github.com/nov/json-jwt/issues/120</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0">https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/121">https://github.com/nov/json-jwt/issues/121</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c">https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c</a></li>
<li><a href="https://github.com/advisories/GHSA-c8v6-786g-vjx6">https://github.com/advisories/GHSA-c8v6-786g-vjx6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8v6-786g-vjx6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-29T03:33:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json-jwt] json-jwt allows bypass of identity checks via a sign/encryption confusion attack]]></title>
        <id>https://github.com/advisories/GHSA-c8v6-786g-vjx6</id>
        <link href="https://github.com/advisories/GHSA-c8v6-786g-vjx6"/>
        <updated>2024-03-06T23:50:38.000Z</updated>
        <content type="html"><![CDATA[<p>The json-jwt (aka JSON::JWT) gem 1.16.x before 1.16.6, 1.15.x before 1.15.3.1 for Ruby sometimes allows bypass of identity checks via a sign/encryption confusion attack. For example, JWE can sometimes be used to bypass JSON::JWT.decode.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51774">https://nvd.nist.gov/vuln/detail/CVE-2023-51774</a></li>
<li><a href="https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md">https://github.com/P3ngu1nW/CVE_Request/blob/main/novjson-jwt.md</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/120">https://github.com/nov/json-jwt/issues/120</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0">https://github.com/nov/json-jwt/commit/9c4d842a9465bd7960570ca326c3de79b4abc9d0</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/json-jwt/CVE-2023-51774.yml</a></li>
<li><a href="https://github.com/nov/json-jwt/issues/121">https://github.com/nov/json-jwt/issues/121</a></li>
<li><a href="https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c">https://github.com/nov/json-jwt/commit/593ea8bcaf2629048bad8c036191f2da0a2e713c</a></li>
<li><a href="https://github.com/advisories/GHSA-c8v6-786g-vjx6">https://github.com/advisories/GHSA-c8v6-786g-vjx6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8v6-786g-vjx6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-29T03:33:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rack-cors] Rack CORS Middleware has Insecure File Permissions]]></title>
        <id>https://github.com/advisories/GHSA-785g-282q-pwvx</id>
        <link href="https://github.com/advisories/GHSA-785g-282q-pwvx"/>
        <updated>2024-03-04T18:51:52.000Z</updated>
        <content type="html"><![CDATA[<p>rack-cors (aka Rack CORS Middleware) 2.0.1 has 0666 permissions for the .rb files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27456">https://nvd.nist.gov/vuln/detail/CVE-2024-27456</a></li>
<li><a href="https://github.com/cyu/rack-cors/issues/274">https://github.com/cyu/rack-cors/issues/274</a></li>
<li><a href="https://github.com/advisories/GHSA-785g-282q-pwvx">https://github.com/advisories/GHSA-785g-282q-pwvx</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack-cors/CVE-2024-27456.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/rack-cors/CVE-2024-27456.yml</a></li>
<li><a href="https://github.com/cyu/rack-cors/blob/878063987bd1ca956282dda95697fd821bf24d2e/CHANGELOG.md#changed">https://github.com/cyu/rack-cors/blob/878063987bd1ca956282dda95697fd821bf24d2e/CHANGELOG.md#changed</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-785g-282q-pwvx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-26T18:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Rails has possible ReDoS vulnerability in Accept header parsing in Action Dispatch]]></title>
        <id>https://github.com/advisories/GHSA-jjhx-jhvp-74wq</id>
        <link href="https://github.com/advisories/GHSA-jjhx-jhvp-74wq"/>
        <updated>2024-03-01T23:30:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="possible-redos-vulnerability-in-accept-header-parsing-in-action-dispatch">Possible ReDoS vulnerability in Accept header parsing in Action Dispatch</h1>
<p>There is a possible ReDoS vulnerability in the Accept header parsing routines
of Action Dispatch. This vulnerability has been assigned the CVE identifier
CVE-2024-26142.</p>
<p>Versions Affected:  &gt;= 7.1.0, &lt; 7.1.3.1
Not affected:       &lt; 7.1.0
Fixed Versions:     7.1.3.1</p>
<h2 id="impact">Impact</h2>
<p>Carefully crafted Accept headers can cause Accept header parsing in Action
Dispatch to take an unexpected amount of time, possibly resulting in a DoS
vulnerability.  All users running an affected release should either upgrade or
use one of the workarounds immediately.</p>
<p>Ruby 3.2 has mitigations for this problem, so Rails applications using Ruby
3.2 or newer are unaffected.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h2 id="patches">Patches</h2>
<p>To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.</p>
<ul>
<li>7-1-accept-redox.patch - Patch for 7.1 series</li>
</ul>
<h2 id="credits">Credits</h2>
<p>Thanks <a href="https://hackerone.com/svalkanov">svalkanov</a> for the report and patch!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-jjhx-jhvp-74wq">https://github.com/rails/rails/security/advisories/GHSA-jjhx-jhvp-74wq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26142">https://nvd.nist.gov/vuln/detail/CVE-2024-26142</a></li>
<li><a href="https://github.com/rails/rails/commit/b4d3bfb5ed8a5b5a90aad3a3b28860c7a931e272">https://github.com/rails/rails/commit/b4d3bfb5ed8a5b5a90aad3a3b28860c7a931e272</a></li>
<li><a href="https://discuss.rubyonrails.org/t/possible-redos-vulnerability-in-accept-header-parsing-in-action-dispatch/84946">https://discuss.rubyonrails.org/t/possible-redos-vulnerability-in-accept-header-parsing-in-action-dispatch/84946</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26142.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26142.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-jjhx-jhvp-74wq">https://github.com/advisories/GHSA-jjhx-jhvp-74wq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjhx-jhvp-74wq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-27T21:41:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Rails has possible XSS Vulnerability in Action Controller]]></title>
        <id>https://github.com/advisories/GHSA-9822-6m93-xqf4</id>
        <link href="https://github.com/advisories/GHSA-9822-6m93-xqf4"/>
        <updated>2024-03-01T23:29:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="possible-xss-vulnerability-in-action-controller">Possible XSS Vulnerability in Action Controller</h1>
<p>There is a possible XSS vulnerability when using the translation helpers
(<code>translate</code>, <code>t</code>, etc) in Action Controller. This vulnerability has been
assigned the CVE identifier CVE-2024-26143.</p>
<p>Versions Affected:  &gt;= 7.0.0.
Not affected:       &lt; 7.0.0
Fixed Versions:     7.1.3.1, 7.0.8.1</p>
<h2 id="impact">Impact</h2>
<p>Applications using translation methods like <code>translate</code>, or <code>t</code> on a
controller, with a key ending in "_html", a <code>:default</code> key which contains
untrusted user input, and the resulting string is used in a view, may be
susceptible to an XSS vulnerability.</p>
<p>For example, impacted code will look something like this:</p>
<pre><code class="language-ruby">class ArticlesController &lt; ApplicationController
  def show  
    @message = t("message_html", default: untrusted_input)
    # The `show` template displays the contents of `@message`
  end
end
</code></pre>
<p>To reiterate the pre-conditions, applications must:</p>
<ul>
<li>Use a translation function from a controller (i.e. <em>not</em> I18n.t, or <code>t</code> from
a view)</li>
<li>Use a key that ends in <code>_html</code></li>
<li>Use a default value where the default value is untrusted and unescaped input</li>
<li>Send the text to the victim (whether that's part of a template, or a
<code>render</code> call)</li>
</ul>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h2 id="patches">Patches</h2>
<p>To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.</p>
<ul>
<li>7-0-translate-xss.patch - Patch for 7.0 series</li>
<li>7-1-translate-xss.patch - Patch for 7.1 series</li>
</ul>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ooooooo_q">ooooooo_q</a> for the patch and fix!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-9822-6m93-xqf4">https://github.com/rails/rails/security/advisories/GHSA-9822-6m93-xqf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26143">https://nvd.nist.gov/vuln/detail/CVE-2024-26143</a></li>
<li><a href="https://github.com/rails/rails/commit/4c83b331092a79d58e4adffe4be5f250fa5782cc">https://github.com/rails/rails/commit/4c83b331092a79d58e4adffe4be5f250fa5782cc</a></li>
<li><a href="https://github.com/rails/rails/commit/5187a9ef51980ad1b8e81945ebe0462d28f84f9e">https://github.com/rails/rails/commit/5187a9ef51980ad1b8e81945ebe0462d28f84f9e</a></li>
<li><a href="https://discuss.rubyonrails.org/t/possible-xss-vulnerability-in-action-controller/84947">https://discuss.rubyonrails.org/t/possible-xss-vulnerability-in-action-controller/84947</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26143.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26143.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-9822-6m93-xqf4">https://github.com/advisories/GHSA-9822-6m93-xqf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9822-6m93-xqf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-27T21:41:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actionpack] Rails has possible XSS Vulnerability in Action Controller]]></title>
        <id>https://github.com/advisories/GHSA-9822-6m93-xqf4</id>
        <link href="https://github.com/advisories/GHSA-9822-6m93-xqf4"/>
        <updated>2024-03-01T23:29:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="possible-xss-vulnerability-in-action-controller">Possible XSS Vulnerability in Action Controller</h1>
<p>There is a possible XSS vulnerability when using the translation helpers
(<code>translate</code>, <code>t</code>, etc) in Action Controller. This vulnerability has been
assigned the CVE identifier CVE-2024-26143.</p>
<p>Versions Affected:  &gt;= 7.0.0.
Not affected:       &lt; 7.0.0
Fixed Versions:     7.1.3.1, 7.0.8.1</p>
<h2 id="impact">Impact</h2>
<p>Applications using translation methods like <code>translate</code>, or <code>t</code> on a
controller, with a key ending in "_html", a <code>:default</code> key which contains
untrusted user input, and the resulting string is used in a view, may be
susceptible to an XSS vulnerability.</p>
<p>For example, impacted code will look something like this:</p>
<pre><code class="language-ruby">class ArticlesController &lt; ApplicationController
  def show  
    @message = t("message_html", default: untrusted_input)
    # The `show` template displays the contents of `@message`
  end
end
</code></pre>
<p>To reiterate the pre-conditions, applications must:</p>
<ul>
<li>Use a translation function from a controller (i.e. <em>not</em> I18n.t, or <code>t</code> from
a view)</li>
<li>Use a key that ends in <code>_html</code></li>
<li>Use a default value where the default value is untrusted and unescaped input</li>
<li>Send the text to the victim (whether that's part of a template, or a
<code>render</code> call)</li>
</ul>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>There are no feasible workarounds for this issue.</p>
<h2 id="patches">Patches</h2>
<p>To aid users who aren't able to upgrade immediately we have provided patches for
the two supported release series. They are in git-am format and consist of a
single changeset.</p>
<ul>
<li>7-0-translate-xss.patch - Patch for 7.0 series</li>
<li>7-1-translate-xss.patch - Patch for 7.1 series</li>
</ul>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/ooooooo_q">ooooooo_q</a> for the patch and fix!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-9822-6m93-xqf4">https://github.com/rails/rails/security/advisories/GHSA-9822-6m93-xqf4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26143">https://nvd.nist.gov/vuln/detail/CVE-2024-26143</a></li>
<li><a href="https://github.com/rails/rails/commit/4c83b331092a79d58e4adffe4be5f250fa5782cc">https://github.com/rails/rails/commit/4c83b331092a79d58e4adffe4be5f250fa5782cc</a></li>
<li><a href="https://github.com/rails/rails/commit/5187a9ef51980ad1b8e81945ebe0462d28f84f9e">https://github.com/rails/rails/commit/5187a9ef51980ad1b8e81945ebe0462d28f84f9e</a></li>
<li><a href="https://discuss.rubyonrails.org/t/possible-xss-vulnerability-in-action-controller/84947">https://discuss.rubyonrails.org/t/possible-xss-vulnerability-in-action-controller/84947</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26143.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26143.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-9822-6m93-xqf4">https://github.com/advisories/GHSA-9822-6m93-xqf4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9822-6m93-xqf4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-27T21:41:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Rails has possible Sensitive Session Information Leak in Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-8h22-8cf7-hq6g</id>
        <link href="https://github.com/advisories/GHSA-8h22-8cf7-hq6g"/>
        <updated>2024-03-01T23:28:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="possible-sensitive-session-information-leak-in-active-storage">Possible Sensitive Session Information Leak in Active Storage</h1>
<p>There is a possible sensitive session information leak in Active Storage.  By
default, Active Storage sends a <code>Set-Cookie</code> header along with the user's
session cookie when serving blobs.  It also sets <code>Cache-Control</code> to public.
Certain proxies may cache the Set-Cookie, leading to an information leak.</p>
<p>This vulnerability has been assigned the CVE identifier CVE-2024-26144.</p>
<p>Versions Affected:  &gt;= 5.2.0, &lt; 7.1.0
Not affected:       &lt; 5.2.0, &gt; 7.1.0
Fixed Versions:     7.0.8.1, 6.1.7.7</p>
<h2 id="impact">Impact</h2>
<p>A proxy which chooses to caches this request can cause users to share
sessions. This may include a user receiving an attacker's session or vice
versa.</p>
<p>This was patched in 7.1.0 but not previously identified as a security
vulnerability.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Upgrade to Rails 7.1.X, or configure caching proxies not to cache the
Set-Cookie headers.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/tyage">tyage</a> for reporting this!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-8h22-8cf7-hq6g">https://github.com/rails/rails/security/advisories/GHSA-8h22-8cf7-hq6g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26144">https://nvd.nist.gov/vuln/detail/CVE-2024-26144</a></li>
<li><a href="https://github.com/rails/rails/commit/723f54566023e91060a67b03353e7c03e7436433">https://github.com/rails/rails/commit/723f54566023e91060a67b03353e7c03e7436433</a></li>
<li><a href="https://github.com/rails/rails/commit/78fe149509fac5b05e54187aaaef216fbb5fd0d3">https://github.com/rails/rails/commit/78fe149509fac5b05e54187aaaef216fbb5fd0d3</a></li>
<li><a href="https://discuss.rubyonrails.org/t/possible-sensitive-session-information-leak-in-active-storage/84945">https://discuss.rubyonrails.org/t/possible-sensitive-session-information-leak-in-active-storage/84945</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26144.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26144.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activestorage/CVE-2024-26144.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activestorage/CVE-2024-26144.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-8h22-8cf7-hq6g">https://github.com/advisories/GHSA-8h22-8cf7-hq6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h22-8cf7-hq6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-27T21:41:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[activestorage] Rails has possible Sensitive Session Information Leak in Active Storage]]></title>
        <id>https://github.com/advisories/GHSA-8h22-8cf7-hq6g</id>
        <link href="https://github.com/advisories/GHSA-8h22-8cf7-hq6g"/>
        <updated>2024-03-01T23:28:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="possible-sensitive-session-information-leak-in-active-storage">Possible Sensitive Session Information Leak in Active Storage</h1>
<p>There is a possible sensitive session information leak in Active Storage.  By
default, Active Storage sends a <code>Set-Cookie</code> header along with the user's
session cookie when serving blobs.  It also sets <code>Cache-Control</code> to public.
Certain proxies may cache the Set-Cookie, leading to an information leak.</p>
<p>This vulnerability has been assigned the CVE identifier CVE-2024-26144.</p>
<p>Versions Affected:  &gt;= 5.2.0, &lt; 7.1.0
Not affected:       &lt; 5.2.0, &gt; 7.1.0
Fixed Versions:     7.0.8.1, 6.1.7.7</p>
<h2 id="impact">Impact</h2>
<p>A proxy which chooses to caches this request can cause users to share
sessions. This may include a user receiving an attacker's session or vice
versa.</p>
<p>This was patched in 7.1.0 but not previously identified as a security
vulnerability.</p>
<p>All users running an affected release should either upgrade or use one of the
workarounds immediately.</p>
<h2 id="releases">Releases</h2>
<p>The fixed releases are available at the normal locations.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Upgrade to Rails 7.1.X, or configure caching proxies not to cache the
Set-Cookie headers.</p>
<h2 id="credits">Credits</h2>
<p>Thanks to <a href="https://hackerone.com/tyage">tyage</a> for reporting this!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rails/rails/security/advisories/GHSA-8h22-8cf7-hq6g">https://github.com/rails/rails/security/advisories/GHSA-8h22-8cf7-hq6g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26144">https://nvd.nist.gov/vuln/detail/CVE-2024-26144</a></li>
<li><a href="https://github.com/rails/rails/commit/723f54566023e91060a67b03353e7c03e7436433">https://github.com/rails/rails/commit/723f54566023e91060a67b03353e7c03e7436433</a></li>
<li><a href="https://github.com/rails/rails/commit/78fe149509fac5b05e54187aaaef216fbb5fd0d3">https://github.com/rails/rails/commit/78fe149509fac5b05e54187aaaef216fbb5fd0d3</a></li>
<li><a href="https://discuss.rubyonrails.org/t/possible-sensitive-session-information-leak-in-active-storage/84945">https://discuss.rubyonrails.org/t/possible-sensitive-session-information-leak-in-active-storage/84945</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26144.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2024-26144.yml</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activestorage/CVE-2024-26144.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/activestorage/CVE-2024-26144.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-8h22-8cf7-hq6g">https://github.com/advisories/GHSA-8h22-8cf7-hq6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h22-8cf7-hq6g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-27T21:41:16.000Z</published>
    </entry>
</feed>