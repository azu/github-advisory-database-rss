<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-07-09T21:01:13.312Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[zerovec-derive] zerovec-derive incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</id>
        <link href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2"/>
        <updated>2024-07-09T19:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.3</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0346.html">https://rustsec.org/advisories/RUSTSEC-2024-0346.html</a></li>
<li><a href="https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069">https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069</a></li>
<li><a href="https://github.com/rustsec/advisory-db/pull/2007">https://github.com/rustsec/advisory-db/pull/2007</a></li>
<li><a href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2">https://github.com/advisories/GHSA-74r5-g7vc-j2v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phonenumber] panic on parsing crafted phonenumber inputs]]></title>
        <id>https://github.com/advisories/GHSA-mjw4-jj88-v687</id>
        <link href="https://github.com/advisories/GHSA-mjw4-jj88-v687"/>
        <updated>2024-07-09T15:40:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The phonenumber parsing code may panic due to a reachable <code>assert!</code> guard on the phonenumber string.</p>
<p>In a typical deployment of rust-phonenumber, this may get triggered by feeding a maliciously crafted phonenumber, e.g. over the network, specifically strings of the form <code>+dwPAA;phone-context=AA</code>, where the "number" part potentially parses as a number larger than 2^56.</p>
<p>Since f69abee1/0.3.4/#52.</p>
<p>0.2.x series is not affected.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.3.6 or higher.</p>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<p>Whereas <a href="https://github.com/whisperfish/rust-phonenumber/issues/69">https://github.com/whisperfish/rust-phonenumber/issues/69</a> did not provide an example code path, property testing found a few: <code>+dwPAA;phone-context=AA</code>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/whisperfish/rust-phonenumber/security/advisories/GHSA-mjw4-jj88-v687">https://github.com/whisperfish/rust-phonenumber/security/advisories/GHSA-mjw4-jj88-v687</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/issues/69">https://github.com/whisperfish/rust-phonenumber/issues/69</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/pull/52">https://github.com/whisperfish/rust-phonenumber/pull/52</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/commit/b792151b17fc90231c232a23935830c2266f3203">https://github.com/whisperfish/rust-phonenumber/commit/b792151b17fc90231c232a23935830c2266f3203</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/commit/f69abee1481fac0d6d531407bae90020e39c6407">https://github.com/whisperfish/rust-phonenumber/commit/f69abee1481fac0d6d531407bae90020e39c6407</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39697">https://nvd.nist.gov/vuln/detail/CVE-2024-39697</a></li>
<li><a href="https://github.com/advisories/GHSA-mjw4-jj88-v687">https://github.com/advisories/GHSA-mjw4-jj88-v687</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjw4-jj88-v687</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-09T14:13:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec-derive] zerovec-derive incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</id>
        <link href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2"/>
        <updated>2024-07-09T19:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.3</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0346.html">https://rustsec.org/advisories/RUSTSEC-2024-0346.html</a></li>
<li><a href="https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069">https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069</a></li>
<li><a href="https://github.com/rustsec/advisory-db/pull/2007">https://github.com/rustsec/advisory-db/pull/2007</a></li>
<li><a href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2">https://github.com/advisories/GHSA-74r5-g7vc-j2v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec] zerovec incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-xrv3-jmcp-374j</id>
        <link href="https://github.com/advisories/GHSA-xrv3-jmcp-374j"/>
        <updated>2024-07-08T18:36:41.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.4</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0347.html">https://rustsec.org/advisories/RUSTSEC-2024-0347.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xrv3-jmcp-374j">https://github.com/advisories/GHSA-xrv3-jmcp-374j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrv3-jmcp-374j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec] zerovec incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-xrv3-jmcp-374j</id>
        <link href="https://github.com/advisories/GHSA-xrv3-jmcp-374j"/>
        <updated>2024-07-08T18:36:41.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.4</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0347.html">https://rustsec.org/advisories/RUSTSEC-2024-0347.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xrv3-jmcp-374j">https://github.com/advisories/GHSA-xrv3-jmcp-374j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrv3-jmcp-374j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ntpd] Unlimited number of NTS-KE connections can crash ntpd-rs server]]></title>
        <id>https://github.com/advisories/GHSA-2xpx-vcmq-5f72</id>
        <link href="https://github.com/advisories/GHSA-2xpx-vcmq-5f72"/>
        <updated>2024-07-02T02:26:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Missing limit for accepted NTS-KE connections allows an unauthenticated remote attacker to crash ntpd-rs when an NTS-KE server is configured. Non NTS-KE server configurations, such as the default ntpd-rs configuration, are unaffected.</p>
<h3 id="details">Details</h3>
<p>Operating systems have a limit for the number of open file descriptors (which includes sockets) in a single process, e.g. 1024 on Linux by default. When ntpd-rs is configured as an NTS server, it accepts TCP connections for the NTS-KE service. If the process has reached the descriptor limit and tries to accept a new TCP connection, the accept() system call will return with the EMFILE error and cause ntpd-rs to abort.</p>
<p>A remote attacker can open a large number of parallel TCP connections to the server to trigger this crash. The connections need to be opened quickly enough to avoid the <code>key-exchange-timeout-ms</code> timeout (by default 1000 milliseconds).</p>
<h3 id="impact">Impact</h3>
<p>Only NTS-KE server configuration are affected. Those without an NTS-KE server configuration such as NTS client only or NTP only configuration are unaffected. For affected configurations the ntpd-rs daemon can made completely unavailable by crashing the service. If ntpd-rs is automatically restarted, an attacker can repeat the attack to prevent ntpd-rs from doing anything useful.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable NTS-KE server functionality</li>
<li>Increase system resource limits (<code>RLIMIT_NOFILE</code>) to make the attack more difficult</li>
<li>Lower the <code>key-exchange-timeout-ms</code> configuration setting to make the attack more difficult</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-2xpx-vcmq-5f72">https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-2xpx-vcmq-5f72</a></li>
<li><a href="https://github.com/pendulum-project/ntpd-rs/commit/6049687006ea5b26eeac927964b5fcc80d7bde50">https://github.com/pendulum-project/ntpd-rs/commit/6049687006ea5b26eeac927964b5fcc80d7bde50</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38528">https://nvd.nist.gov/vuln/detail/CVE-2024-38528</a></li>
<li><a href="https://github.com/advisories/GHSA-2xpx-vcmq-5f72">https://github.com/advisories/GHSA-2xpx-vcmq-5f72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xpx-vcmq-5f72</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-28T21:05:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sequoia-openpgp] Low severity (DoS) vulnerability in sequoia-openpgp]]></title>
        <id>https://github.com/advisories/GHSA-9344-p847-qm5c</id>
        <link href="https://github.com/advisories/GHSA-9344-p847-qm5c"/>
        <updated>2024-06-26T19:10:17.000Z</updated>
        <content type="html"><![CDATA[<p>There is a denial-of-service vulnerability in sequoia-openpgp, our
crate providing a low-level interface to our OpenPGP implementation.
When triggered, the process will enter an infinite loop.</p>
<p>Many thanks to Andrew Gallagher for disclosing the issue to us.</p>
<h2 id="impact">Impact</h2>
<p>Any software directly or indirectly using the interface
<code>sequoia_openpgp::cert::raw::RawCertParser</code>.  Notably, this includes all
software using the <code>sequoia_cert_store</code> crate.</p>
<h2 id="details">Details</h2>
<p>The <code>RawCertParser</code> does not advance the input stream when
encountering unsupported cert (primary key) versions, resulting in an
infinite loop.</p>
<p>The fix introduces a new raw-cert-specific
<code>cert::raw::Error::UnuspportedCert</code>.</p>
<h2 id="affected-software">Affected software</h2>
<ul>
<li>sequoia-openpgp 1.13.0</li>
<li>sequoia-openpgp 1.14.0</li>
<li>sequoia-openpgp 1.15.0</li>
<li>sequoia-openpgp 1.16.0</li>
<li>sequoia-openpgp 1.17.0</li>
<li>sequoia-openpgp 1.18.0</li>
<li>sequoia-openpgp 1.19.0</li>
<li>sequoia-openpgp 1.20.0</li>
<li>Any software built against a vulnerable version of sequoia-openpgp
which is directly or indirectly using the interface
sequoia_<code>openpgp::cert::raw::RawCertParser</code>.  Notably, this includes
all software using the <code>sequoia_cert_store</code> crate.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://gitlab.com/sequoia-pgp/sequoia/-/issues/1106">https://gitlab.com/sequoia-pgp/sequoia/-/issues/1106</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0345.html">https://rustsec.org/advisories/RUSTSEC-2024-0345.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9344-p847-qm5c">https://github.com/advisories/GHSA-9344-p847-qm5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9344-p847-qm5c</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-26T19:10:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[curve25519-dalek] curve25519-dalek has timing variability in `curve25519-dalek`'s `Scalar29::sub`/`Scalar52::sub`]]></title>
        <id>https://github.com/advisories/GHSA-x4gp-pqpj-f43q</id>
        <link href="https://github.com/advisories/GHSA-x4gp-pqpj-f43q"/>
        <updated>2024-06-18T21:56:25.000Z</updated>
        <content type="html"><![CDATA[<p>Timing variability of any kind is problematic when working with  potentially secret values such as
elliptic curve scalars, and such issues can potentially leak private keys and other secrets. Such a
problem was recently discovered in <code>curve25519-dalek</code>.</p>
<p>The <code>Scalar29::sub</code> (32-bit) and <code>Scalar52::sub</code> (64-bit) functions contained usage of a mask value
inside a loop where LLVM saw an opportunity to insert a branch instruction (<code>jns</code> on x86) to
conditionally bypass this code section when the mask value is set to zero as can be seen in godbolt:</p>
<ul>
<li>32-bit (see L106): <a href="https://godbolt.org/z/zvaWxzvqv">https://godbolt.org/z/zvaWxzvqv</a></li>
<li>64-bit (see L48): <a href="https://godbolt.org/z/PczYj7Pda">https://godbolt.org/z/PczYj7Pda</a></li>
</ul>
<p>A similar problem was recently discovered in the Kyber reference implementation:</p>
<p><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ</a></p>
<p>As discussed on that thread, one portable solution, which is also used in this PR, is to introduce a
volatile read as an optimization barrier, which prevents the compiler from optimizing it away.</p>
<p>The fix can be validated in godbolt here:</p>
<ul>
<li>32-bit: <a href="https://godbolt.org/z/jc9j7eb8E">https://godbolt.org/z/jc9j7eb8E</a></li>
<li>64-bit: <a href="https://godbolt.org/z/x8d46Yfah">https://godbolt.org/z/x8d46Yfah</a></li>
</ul>
<p>The problem was discovered and the solution independently verified by 
Alexander Wagner <a href="mailto:alexander.wagner@aisec.fraunhofer.de">alexander.wagner@aisec.fraunhofer.de</a> and Lea Themint <a href="mailto:lea.thiemt@tum.de">lea.thiemt@tum.de</a> using
their DATA tool:</p>
<p><a href="https://github.com/Fraunhofer-AISEC/DATA">https://github.com/Fraunhofer-AISEC/DATA</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dalek-cryptography/curve25519-dalek/pull/659">https://github.com/dalek-cryptography/curve25519-dalek/pull/659</a></li>
<li><a href="https://github.com/dalek-cryptography/curve25519-dalek/commit/415892acf1cdf9161bd6a4c99bc2f4cb8fae5e6a">https://github.com/dalek-cryptography/curve25519-dalek/commit/415892acf1cdf9161bd6a4c99bc2f4cb8fae5e6a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0344.html">https://rustsec.org/advisories/RUSTSEC-2024-0344.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x4gp-pqpj-f43q">https://github.com/advisories/GHSA-x4gp-pqpj-f43q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4gp-pqpj-f43q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-18T21:56:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rhai] Rhai stack overflow vulenrability]]></title>
        <id>https://github.com/advisories/GHSA-67fv-9r7g-432h</id>
        <link href="https://github.com/advisories/GHSA-67fv-9r7g-432h"/>
        <updated>2024-07-05T21:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A stack overflow vulnerability was found in version 1.18.0 of rhai. The flaw position is: (/ SRC/rhai/SRC/eval/STMT. Rs in rhai: : eval: : STMT: : _ $LT $impl $u20 $rhai.. engine.. Engine$GT$::eval_stmt::h3f1d68ce37fc6e96). Due to the stack overflow is a recursive call/SRC/rhai/SRC/eval/STMT. Rs file eval_stmt_block function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36760">https://nvd.nist.gov/vuln/detail/CVE-2024-36760</a></li>
<li><a href="https://github.com/MageWeiG/VulnerabilityCollection/blob/main/CVE-2024-36760/info.md">https://github.com/MageWeiG/VulnerabilityCollection/blob/main/CVE-2024-36760/info.md</a></li>
<li><a href="https://github.com/rhaiscript/rhai/commit/308d07a11d3bff0d230f685a6320292181e5a445">https://github.com/rhaiscript/rhai/commit/308d07a11d3bff0d230f685a6320292181e5a445</a></li>
<li><a href="https://github.com/advisories/GHSA-67fv-9r7g-432h">https://github.com/advisories/GHSA-67fv-9r7g-432h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-67fv-9r7g-432h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-13T18:31:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[time] Segmentation fault in time]]></title>
        <id>https://github.com/advisories/GHSA-wcg3-cvx6-7396</id>
        <link href="https://github.com/advisories/GHSA-wcg3-cvx6-7396"/>
        <updated>2024-06-10T18:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>
<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>
<ul>
<li><code>time::UtcOffset::local_offset_at</code></li>
<li><code>time::UtcOffset::try_local_offset_at</code></li>
<li><code>time::UtcOffset::current_local_offset</code></li>
<li><code>time::UtcOffset::try_current_local_offset</code></li>
<li><code>time::OffsetDateTime::now_local</code></li>
<li><code>time::OffsetDateTime::try_now_local</code></li>
</ul>
<p>The affected functions in time 0.1 (all versions) are:</p>
<ul>
<li><code>at</code></li>
<li><code>at_utc</code></li>
<li><code>now</code></li>
</ul>
<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>
<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>
<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/time-rs/time/issues/293">time-rs/time#293</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0071.html">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>
<li><a href="https://crates.io/crates/time/0.2.23">https://crates.io/crates/time/0.2.23</a></li>
<li><a href="https://github.com/advisories/GHSA-wcg3-cvx6-7396">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcg3-cvx6-7396</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[time] Segmentation fault in time]]></title>
        <id>https://github.com/advisories/GHSA-wcg3-cvx6-7396</id>
        <link href="https://github.com/advisories/GHSA-wcg3-cvx6-7396"/>
        <updated>2024-06-10T18:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>
<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>
<ul>
<li><code>time::UtcOffset::local_offset_at</code></li>
<li><code>time::UtcOffset::try_local_offset_at</code></li>
<li><code>time::UtcOffset::current_local_offset</code></li>
<li><code>time::UtcOffset::try_current_local_offset</code></li>
<li><code>time::OffsetDateTime::now_local</code></li>
<li><code>time::OffsetDateTime::try_now_local</code></li>
</ul>
<p>The affected functions in time 0.1 (all versions) are:</p>
<ul>
<li><code>at</code></li>
<li><code>at_utc</code></li>
<li><code>now</code></li>
</ul>
<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>
<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>
<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/time-rs/time/issues/293">time-rs/time#293</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0071.html">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>
<li><a href="https://crates.io/crates/time/0.2.23">https://crates.io/crates/time/0.2.23</a></li>
<li><a href="https://github.com/advisories/GHSA-wcg3-cvx6-7396">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcg3-cvx6-7396</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping]]></title>
        <id>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</id>
        <link href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw"/>
        <updated>2024-06-10T12:32:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.</p>
<h3 id="details">Details</h3>
<p>In <a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">the patch for CVE-2023-28446</a>, Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.</p>
<p>For example, requesting the read permission with <code>/tmp/hello\u001b[/../../etc/hosts</code> as a path will display the <code>/tmp/hellotc/hosts</code> in the permission prompt, but the actual permission given to the program is <code>/tmp/hello\u001b[/../../etc/hosts</code>, which is <code>/etc/hosts</code> after the normalization.</p>
<p>This difference allows a malicious Deno program to spoof the contents of the permission prompt.</p>
<h3 id="poc">PoC</h3>
<p>Run the following JavaScript and observe that <code>/tmp/hellotc/hosts</code> is displayed in the permission prompt instead of <code>/etc/hosts</code>, although Deno gives access to <code>/etc/hosts</code>.</p>
<pre><code class="language-javascript">const permission = { name: "read", path: "/tmp/hello\u001b[/../../etc/hosts" };
await Deno.permissions.request(permission);
console.log(await Deno.readTextFile("/etc/hosts"));
</code></pre>
<h4 id="expected-prompt">Expected prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/etc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h4 id="actual-prompt">Actual prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/tmp/hellotc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
<li><a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d</a></li>
<li><a href="https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5">https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27936">https://nvd.nist.gov/vuln/detail/CVE-2024-27936</a></li>
<li><a href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:54:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping]]></title>
        <id>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</id>
        <link href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw"/>
        <updated>2024-06-10T12:32:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.</p>
<h3 id="details">Details</h3>
<p>In <a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">the patch for CVE-2023-28446</a>, Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.</p>
<p>For example, requesting the read permission with <code>/tmp/hello\u001b[/../../etc/hosts</code> as a path will display the <code>/tmp/hellotc/hosts</code> in the permission prompt, but the actual permission given to the program is <code>/tmp/hello\u001b[/../../etc/hosts</code>, which is <code>/etc/hosts</code> after the normalization.</p>
<p>This difference allows a malicious Deno program to spoof the contents of the permission prompt.</p>
<h3 id="poc">PoC</h3>
<p>Run the following JavaScript and observe that <code>/tmp/hellotc/hosts</code> is displayed in the permission prompt instead of <code>/etc/hosts</code>, although Deno gives access to <code>/etc/hosts</code>.</p>
<pre><code class="language-javascript">const permission = { name: "read", path: "/tmp/hello\u001b[/../../etc/hosts" };
await Deno.permissions.request(permission);
console.log(await Deno.readTextFile("/etc/hosts"));
</code></pre>
<h4 id="expected-prompt">Expected prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/etc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h4 id="actual-prompt">Actual prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/tmp/hellotc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
<li><a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d</a></li>
<li><a href="https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5">https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27936">https://nvd.nist.gov/vuln/detail/CVE-2024-27936</a></li>
<li><a href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:54:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmer] Symlink bypasses filesystem sandbox]]></title>
        <id>https://github.com/advisories/GHSA-55f3-3qvg-8pv5</id>
        <link href="https://github.com/advisories/GHSA-55f3-3qvg-8pv5"/>
        <updated>2024-06-20T14:14:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If the preopened directory has a symlink pointing outside, WASI programs can traverse the symlink and access host filesystem if the caller sets both <code>oflags::creat</code> and <code>rights::fd_write</code>. Programs can also crash the runtime by creating a symlink pointing outside with <code>path_symlink</code> and <code>path_open</code>ing the link.</p>
<h3 id="details">Details</h3>
<h3 id="poc">PoC</h3>
<p>Setup a filesystem as follows.</p>
<pre><code>.
├── outside.file
└── preopen
    └── dir
        └── file -&gt; ../../outside.file
</code></pre>
<p>Compile this Rust snippet with <code>wasi</code> v0.11 (for the preview1 API).</p>
<pre><code class="language-rust">fn main() {
    unsafe {
        let filefd = wasi::path_open(
            5,
            wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,
            "app/dir/file",
            wasi::OFLAGS_CREAT,
            wasi::RIGHTS_FD_READ | wasi::RIGHTS_FD_WRITE,
            0,
            0,
        )
        .unwrap();
        eprintln!("filefd: {filefd}");

        let mut buf = [0u8; 10];
        let iovs = [wasi::Iovec {
            buf: buf.as_mut_ptr(),
            buf_len: buf.len(),
        }];

        let read = wasi::fd_read(filefd, &amp;iovs).unwrap();

        eprintln!("read {read}: {}", String::from_utf8_lossy(&amp;buf));
    }
}
</code></pre>
<p>Run the compiled binary with Wasmer preopening <code>preopen/</code>:</p>
<pre><code>wasmer run --mapdir /app:preopen a.wasm
</code></pre>
<p>This should not print the contents of the <code>outside.file</code>. Other runtimes like Wasmtime can successfully block this call. But Wasmer prints the contents of the file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5">https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5</a></li>
<li><a href="https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662">https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38358">https://nvd.nist.gov/vuln/detail/CVE-2024-38358</a></li>
<li><a href="https://github.com/advisories/GHSA-55f3-3qvg-8pv5">https://github.com/advisories/GHSA-55f3-3qvg-8pv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55f3-3qvg-8pv5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-07T19:40:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-tls] s2n-tls has a potentially observable differences in RSA premaster secret handling]]></title>
        <id>https://github.com/advisories/GHSA-52xf-5p2m-9wrv</id>
        <link href="https://github.com/advisories/GHSA-52xf-5p2m-9wrv"/>
        <updated>2024-06-06T14:26:27.000Z</updated>
        <content type="html"><![CDATA[<p>When receiving a message from a client that sent an invalid RSA premaster secret, an issue in s2n-tls results in the server performing additional processing when the premaster secret contains an incorrect client hello version. While no practical attack on s2n-tls has been demonstrated, this causes a small timing difference which could theoretically be used as described in the Marvin Attack [1].</p>
<p>We would like to thank Hubert Kario [2] for reporting this issue.</p>
<h3 id="impact">Impact</h3>
<p>The extent of this issue is a timing difference. No practical attack on s2n-tls has been demonstrated.</p>
<p>This issue affects server applications that permit RSA key exchange. Applications that use the default, built-in blinding feature or properly implement self-service blinding are not affected.</p>
<p>Impacted versions: &lt;= v1.4.15.</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in v1.4.16 [3].</p>
<h3 id="workarounds">Workarounds</h3>
<p>Applications can work around this issue by using an s2n-tls security policy that disallows RSA key exchange.</p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [4] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] <a href="https://people.redhat.com/~hkario/marvin/">https://people.redhat.com/~hkario/marvin/</a>
[2] <a href="https://github.com/tomato42">https://github.com/tomato42</a>
[3] <a href="https://github.com/aws/s2n-tls/releases/tag/v1.4.16">https://github.com/aws/s2n-tls/releases/tag/v1.4.16</a>
[4] <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-tls/security/advisories/GHSA-52xf-5p2m-9wrv">https://github.com/aws/s2n-tls/security/advisories/GHSA-52xf-5p2m-9wrv</a></li>
<li><a href="https://github.com/aws/s2n-tls/commit/114ccab0ff2cde491203ac841837d0d39b767412">https://github.com/aws/s2n-tls/commit/114ccab0ff2cde491203ac841837d0d39b767412</a></li>
<li><a href="https://github.com/aws/s2n-tls/releases/tag/v1.4.16">https://github.com/aws/s2n-tls/releases/tag/v1.4.16</a></li>
<li><a href="https://github.com/advisories/GHSA-52xf-5p2m-9wrv">https://github.com/advisories/GHSA-52xf-5p2m-9wrv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-52xf-5p2m-9wrv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-06T14:26:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nano-id] Unable to generate the correct character set]]></title>
        <id>https://github.com/advisories/GHSA-9hc7-6w9r-wj94</id>
        <link href="https://github.com/advisories/GHSA-9hc7-6w9r-wj94"/>
        <updated>2024-06-17T15:09:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="reduced-entropy-due-to-inadequate-character-set-usage">Reduced entropy due to inadequate character set usage</h1>
<h2 id="description">Description</h2>
<p>Affected versions of the nano-id crate incorrectly generated IDs using a reduced character set in the <code>nano_id::base62</code> and <code>nano_id::base58</code> functions. Specifically, the <code>base62</code> function used a character set of 32 symbols instead of the intended 62 symbols, and the <code>base58</code> function used a character set of 16 symbols instead of the intended 58 symbols. Additionally, the <code>nano_id::gen</code> macro is also affected when a custom character set that is not a power of 2 in size is specified.</p>
<p>It should be noted that <code>nano_id::base64</code> is not affected by this vulnerability.</p>
<h2 id="impact">Impact</h2>
<p>This can result in a significant reduction in entropy, making the generated IDs predictable and vulnerable to brute-force attacks when the IDs are used in security-sensitive contexts such as session tokens or unique identifiers.</p>
<h2 id="patches">Patches</h2>
<p>The flaws were corrected in commit <a href="https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23">a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a> by updating the the <code>nano_id::gen</code> macro to use all specified characters correctly.</p>
<h2 id="poc">PoC</h2>
<pre><code class="language-rust">use std::collections::BTreeSet;

fn main() {
    test_base58();
    test_base62();
}

fn test_base58() {
    let mut produced_symbols = BTreeSet::new();

    for _ in 0..100_000 {
        let id = nano_id::base58::&lt;10&gt;();
        for c in id.chars() {
            produced_symbols.insert(c);
        }
    }

    println!(
        "{} symbols generated from nano_id::base58",
        produced_symbols.len()
    );
}

fn test_base62() {
    let mut produced_symbols = BTreeSet::new();

    for _ in 0..100_000 {
        let id = nano_id::base62::&lt;10&gt;();
        for c in id.chars() {
            produced_symbols.insert(c);
        }
    }

    println!(
        "{} symbols generated from nano_id::base62",
        produced_symbols.len()
    );
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94">https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36400">https://nvd.nist.gov/vuln/detail/CVE-2024-36400</a></li>
<li><a href="https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23">https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0343.html">https://rustsec.org/advisories/RUSTSEC-2024-0343.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9hc7-6w9r-wj94">https://github.com/advisories/GHSA-9hc7-6w9r-wj94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hc7-6w9r-wj94</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-04T18:40:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nano-id] nano-id reduced entropy due to inadequate character set usage]]></title>
        <id>https://github.com/advisories/GHSA-2hfw-w739-p7x5</id>
        <link href="https://github.com/advisories/GHSA-2hfw-w739-p7x5"/>
        <updated>2024-06-04T17:49:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>Affected versions of the nano-id crate incorrectly generated IDs using a reduced character set in the <code>nano_id::base62</code> and <code>nano_id::base58</code> functions. Specifically, the <code>base62</code> function used a character set of 32 symbols instead of the intended 62 symbols, and the <code>base58</code> function used a character set of 16 symbols instead of the intended 58 symbols. Additionally, the <code>nano_id::gen</code> macro is also affected when a custom character set that is not a power of 2 in size is specified.</p>
<p>It should be noted that <code>nano_id::base64</code> is not affected by this vulnerability.</p>
<h2 id="impact">Impact</h2>
<p>This can result in a significant reduction in entropy, making the generated IDs predictable and vulnerable to brute-force attacks when the IDs are used in security-sensitive contexts such as session tokens or unique identifiers.</p>
<h2 id="patches">Patches</h2>
<p>The flaws were corrected in commit <a href="https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23">a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a> by updating the the <code>nano_id::gen</code> macro to use all specified characters correctly.</p>
<h2 id="poc">PoC</h2>
<pre><code class="language-rust">use std::collections::BTreeSet;

fn main() {
    test_base58();
    test_base62();
}

fn test_base58() {
    let mut produced_symbols = BTreeSet::new();

    for _ in 0..100_000 {
id = "RUSTSEC-2024-0343"
        for c in id.chars() {
            produced_symbols.insert(c);
        }
    }

    println!(
        "{} symbols generated from nano_id::base58",
        produced_symbols.len()
    );
}

fn test_base62() {
    let mut produced_symbols = BTreeSet::new();

    for _ in 0..100_000 {
id = "RUSTSEC-2024-0343"
        for c in id.chars() {
            produced_symbols.insert(c);
        }
    }

    println!(
        "{} symbols generated from nano_id::base62",
        produced_symbols.len()
    );
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23">https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0343.html">https://rustsec.org/advisories/RUSTSEC-2024-0343.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2hfw-w739-p7x5">https://github.com/advisories/GHSA-2hfw-w739-p7x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hfw-w739-p7x5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-04T17:49:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qdrant] qdrant is vulnerable to path traversal due to improper input validation in the `/collections/{name}/snapshots/upload` endpoint]]></title>
        <id>https://github.com/advisories/GHSA-xcr2-h8hv-6227</id>
        <link href="https://github.com/advisories/GHSA-xcr2-h8hv-6227"/>
        <updated>2024-06-02T22:30:10.000Z</updated>
        <content type="html"><![CDATA[<p>qdrant/qdrant version 1.9.0-dev is vulnerable to path traversal due to improper input validation in the <code>/collections/{name}/snapshots/upload</code> endpoint. By manipulating the <code>name</code> parameter through URL encoding, an attacker can upload a file to an arbitrary location on the system, such as <code>/root/poc.txt</code>. This vulnerability allows for the writing and overwriting of arbitrary files on the server, potentially leading to a full takeover of the system. The issue is fixed in version 1.9.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-3584">https://nvd.nist.gov/vuln/detail/CVE-2024-3584</a></li>
<li><a href="https://github.com/qdrant/qdrant/commit/15479a45ffa3b955485ae516696f7e933a8cce8a">https://github.com/qdrant/qdrant/commit/15479a45ffa3b955485ae516696f7e933a8cce8a</a></li>
<li><a href="https://huntr.com/bounties/5c7c82e2-4873-40b7-a5f3-0f4a42642f73">https://huntr.com/bounties/5c7c82e2-4873-40b7-a5f3-0f4a42642f73</a></li>
<li><a href="https://github.com/advisories/GHSA-xcr2-h8hv-6227">https://github.com/advisories/GHSA-xcr2-h8hv-6227</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcr2-h8hv-6227</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-02T22:30:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tauri] iFrames Bypass Origin Checks for Tauri API Access Control]]></title>
        <id>https://github.com/advisories/GHSA-57fm-592m-34r7</id>
        <link href="https://github.com/advisories/GHSA-57fm-592m-34r7"/>
        <updated>2024-05-23T16:06:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the <a href="https://v1.tauri.app/api/config/#securityconfig.dangerousremotedomainipcaccess"><code>dangerousRemoteDomainIpcAccess</code></a> in v1 and in the <a href="https://v2.tauri.app/security/capabilities/#remote-api-access"><code>capabilities</code></a> in v2.
This bypasses the origin check and allows iFrames to access the IPC endpoints exposed to the parent window.</p>
<p>For this to be exploitable, an attacker must have script execution (e.g. XSS) in a script-enabled iFrame of a Tauri application.</p>
<h2 id="patches">Patches</h2>
<p>The patches include changes to wry and the behaviour of Tauri applications using iFrames. Previously, we injected the Tauri IPC initialization script into iFrames on MacOS, which was unintended. This is now also disabled to be consistent with all other supported operating systems.</p>
<p>This means that the Tauri invoke functionality is no longer accessible from iFrames, except on Windows when the origin of the Tauri window and the origin of the iFrame are the same.</p>
<p>We have also added a new protection mechanism to the IPC layer to protect against iFrames directly using the WebView IPC functionality (e.g. via <code>window.ipc.postMessage</code>).
This introduces an invoke key (<code>__TAURI_INVOKE_KEY__</code>) which is used to prevent frames that have not been initialized by the Tauri core from sending messages to the Tauri IPC.
This key is <strong>not</strong> used to protect against compromised Tauri windows or WebViews and is <strong>only</strong> intended to block IPC access from sub-frames.</p>
<p>Unauthorized messages to the Tauri IPC from an iFrame or other non-initialized context will log a warning and the potentially malicious IPC call will be ignored.</p>
<h2 id="workarounds">Workarounds</h2>
<p>These workarounds should only be considered if you are unable to upgrade to the patched Tauri version in time.</p>
<p>As a workaround for v1 Tauri applications, we recommend using a dedicated window for untrusted origins instead of iFrames, or disabling script execution within the iFrame.</p>
<p>For v2 Tauri applications targeting Linux, it is possible to use either a dedicated window or <a href="https://github.com/tauri-apps/tauri/tree/dev/examples/multiwebview">multiple WebViews</a> in the main window to simulate iFrame behavior.
On other platforms, it is only possible to use dedicated windows or disable script execution inside the iFrame, as described for v1.</p>
<h2 id="references">References</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in tauri or
Email us at <a href="mailto:security@tauri.app">security@tauri.app</a></p>
<p>The original submissions from the reporter:</p>
<blockquote>
<h3 id="context">Context</h3>
<p>This is following up on the comments here: <a href="https://github.com/tauri-apps/tauri/issues/8316">https://github.com/tauri-apps/tauri/issues/8316</a>, and here: <a href="https://discord.com/channels/616186924390023171/1227969106091966475">https://discord.com/channels/616186924390023171/1227969106091966475</a>. I was asked to submit my findings as a vulnerability report.</p>
<p>Firstly, thank you to all of you from the core team that helped out and guided me through understanding this issue! Huge fan of Tauri, and I'm excited to see it succeed!</p>
<h3 id="summary">Summary</h3>
<p>In short, <strong>any iframe you add in your Tauri frontend will get access to Tauri APIs, even in isolation mode</strong>.</p>
<p>Any embedded iframe that you don't own will be able to invoke the same APIs your app does. While isolation mode allows for finer grained control of what Tauri APIs can be called, it is not possible to determine if a request is coming your own app, or from a potentially malicious iframe.</p>
<p>This means your app could be open to malicious iframe being able to execute any command your app can, and there doesn't seem to be a mechanism to filter these out.</p>
<h3 id="details">Details</h3>
<p>I'm not an expert in Tauri source code, so I can't be sure I'm on the right track here, but I assume this has to do with how the webview is bootstrapped with the Tauri APIs.</p>
<p>I know there's various handlers that get set, such as opening <code>target="_blank"</code> links via a shell command, and of course setting <code>invoke</code> and other such APIs. Sounds like the issue is somewhere there and the APIs are being injected where they shouldn't.</p>
<p>Technically it seems that an attacker couldn't actually receive a response from the command it executes. Tauri IPC can't route the response back to the invoking iframe, but the action is still executed, with the response just being dropped. You see these messages in the logs:</p>
<pre><code>[Warning] [TAURI] Couldn't find callback id 3399436348 in window. This happens when the app is reloaded while Rust is running an asynchronous operation.
</code></pre>
<h3 id="poc">PoC</h3>
<p>Repository with reproduction steps: <a href="https://github.com/begleynk/tauri-sandbox-iframe-escape-poc">https://github.com/begleynk/tauri-sandbox-iframe-escape-poc</a></p>
<p>Building on that POC, here is a video of a Codepen iframe running inside an isolation mode Tauri app, invoking the same "Greet" command the frontend is invoking.</p>
<p><a href="https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c">https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c</a></p>
<p>This is done with the following code running inside Codepen:</p>
<pre><code class="language-javascript">window.__TAURI_INVOKE__("greet", { name: "From CodePen" })
</code></pre>
<h3 id="impact-1">Impact</h3>
<p>Valid commands with potentially unwanted consequences ("delete project", "transfer credits", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app.</p>
</blockquote>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7">https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7</a></li>
<li><a href="https://github.com/tauri-apps/tauri/issues/8316">https://github.com/tauri-apps/tauri/issues/8316</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d">https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608">https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35222">https://nvd.nist.gov/vuln/detail/CVE-2024-35222</a></li>
<li><a href="https://github.com/advisories/GHSA-57fm-592m-34r7">https://github.com/advisories/GHSA-57fm-592m-34r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-57fm-592m-34r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-23T14:11:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tauri] iFrames Bypass Origin Checks for Tauri API Access Control]]></title>
        <id>https://github.com/advisories/GHSA-57fm-592m-34r7</id>
        <link href="https://github.com/advisories/GHSA-57fm-592m-34r7"/>
        <updated>2024-05-23T16:06:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the <a href="https://v1.tauri.app/api/config/#securityconfig.dangerousremotedomainipcaccess"><code>dangerousRemoteDomainIpcAccess</code></a> in v1 and in the <a href="https://v2.tauri.app/security/capabilities/#remote-api-access"><code>capabilities</code></a> in v2.
This bypasses the origin check and allows iFrames to access the IPC endpoints exposed to the parent window.</p>
<p>For this to be exploitable, an attacker must have script execution (e.g. XSS) in a script-enabled iFrame of a Tauri application.</p>
<h2 id="patches">Patches</h2>
<p>The patches include changes to wry and the behaviour of Tauri applications using iFrames. Previously, we injected the Tauri IPC initialization script into iFrames on MacOS, which was unintended. This is now also disabled to be consistent with all other supported operating systems.</p>
<p>This means that the Tauri invoke functionality is no longer accessible from iFrames, except on Windows when the origin of the Tauri window and the origin of the iFrame are the same.</p>
<p>We have also added a new protection mechanism to the IPC layer to protect against iFrames directly using the WebView IPC functionality (e.g. via <code>window.ipc.postMessage</code>).
This introduces an invoke key (<code>__TAURI_INVOKE_KEY__</code>) which is used to prevent frames that have not been initialized by the Tauri core from sending messages to the Tauri IPC.
This key is <strong>not</strong> used to protect against compromised Tauri windows or WebViews and is <strong>only</strong> intended to block IPC access from sub-frames.</p>
<p>Unauthorized messages to the Tauri IPC from an iFrame or other non-initialized context will log a warning and the potentially malicious IPC call will be ignored.</p>
<h2 id="workarounds">Workarounds</h2>
<p>These workarounds should only be considered if you are unable to upgrade to the patched Tauri version in time.</p>
<p>As a workaround for v1 Tauri applications, we recommend using a dedicated window for untrusted origins instead of iFrames, or disabling script execution within the iFrame.</p>
<p>For v2 Tauri applications targeting Linux, it is possible to use either a dedicated window or <a href="https://github.com/tauri-apps/tauri/tree/dev/examples/multiwebview">multiple WebViews</a> in the main window to simulate iFrame behavior.
On other platforms, it is only possible to use dedicated windows or disable script execution inside the iFrame, as described for v1.</p>
<h2 id="references">References</h2>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in tauri or
Email us at <a href="mailto:security@tauri.app">security@tauri.app</a></p>
<p>The original submissions from the reporter:</p>
<blockquote>
<h3 id="context">Context</h3>
<p>This is following up on the comments here: <a href="https://github.com/tauri-apps/tauri/issues/8316">https://github.com/tauri-apps/tauri/issues/8316</a>, and here: <a href="https://discord.com/channels/616186924390023171/1227969106091966475">https://discord.com/channels/616186924390023171/1227969106091966475</a>. I was asked to submit my findings as a vulnerability report.</p>
<p>Firstly, thank you to all of you from the core team that helped out and guided me through understanding this issue! Huge fan of Tauri, and I'm excited to see it succeed!</p>
<h3 id="summary">Summary</h3>
<p>In short, <strong>any iframe you add in your Tauri frontend will get access to Tauri APIs, even in isolation mode</strong>.</p>
<p>Any embedded iframe that you don't own will be able to invoke the same APIs your app does. While isolation mode allows for finer grained control of what Tauri APIs can be called, it is not possible to determine if a request is coming your own app, or from a potentially malicious iframe.</p>
<p>This means your app could be open to malicious iframe being able to execute any command your app can, and there doesn't seem to be a mechanism to filter these out.</p>
<h3 id="details">Details</h3>
<p>I'm not an expert in Tauri source code, so I can't be sure I'm on the right track here, but I assume this has to do with how the webview is bootstrapped with the Tauri APIs.</p>
<p>I know there's various handlers that get set, such as opening <code>target="_blank"</code> links via a shell command, and of course setting <code>invoke</code> and other such APIs. Sounds like the issue is somewhere there and the APIs are being injected where they shouldn't.</p>
<p>Technically it seems that an attacker couldn't actually receive a response from the command it executes. Tauri IPC can't route the response back to the invoking iframe, but the action is still executed, with the response just being dropped. You see these messages in the logs:</p>
<pre><code>[Warning] [TAURI] Couldn't find callback id 3399436348 in window. This happens when the app is reloaded while Rust is running an asynchronous operation.
</code></pre>
<h3 id="poc">PoC</h3>
<p>Repository with reproduction steps: <a href="https://github.com/begleynk/tauri-sandbox-iframe-escape-poc">https://github.com/begleynk/tauri-sandbox-iframe-escape-poc</a></p>
<p>Building on that POC, here is a video of a Codepen iframe running inside an isolation mode Tauri app, invoking the same "Greet" command the frontend is invoking.</p>
<p><a href="https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c">https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c</a></p>
<p>This is done with the following code running inside Codepen:</p>
<pre><code class="language-javascript">window.__TAURI_INVOKE__("greet", { name: "From CodePen" })
</code></pre>
<h3 id="impact-1">Impact</h3>
<p>Valid commands with potentially unwanted consequences ("delete project", "transfer credits", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app.</p>
</blockquote>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7">https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7</a></li>
<li><a href="https://github.com/tauri-apps/tauri/issues/8316">https://github.com/tauri-apps/tauri/issues/8316</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d">https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608">https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35222">https://nvd.nist.gov/vuln/detail/CVE-2024-35222</a></li>
<li><a href="https://github.com/advisories/GHSA-57fm-592m-34r7">https://github.com/advisories/GHSA-57fm-592m-34r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-57fm-592m-34r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-23T14:11:24.000Z</published>
    </entry>
</feed>