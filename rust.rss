<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-09-06T22:01:30.068Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[gix-path] gix-path improperly resolves configuration path reported by Git]]></title>
        <id>https://github.com/advisories/GHSA-m8rp-vv92-46c7</id>
        <link href="https://github.com/advisories/GHSA-m8rp-vv92-46c7"/>
        <updated>2024-09-06T19:55:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-path</code> runs <code>git</code> to find the path of a configuration file associated with the <code>git</code> installation, but improperly resolves paths containing unusual or non-ASCII characters, in rare cases enabling a local attacker to inject configuration leading to code execution.</p>
<h3 id="details">Details</h3>
<p>In <code>gix_path::env</code>, the underlying implementation of the <code>installation_config</code> and <code>installation_config_prefix</code> functions calls <code>git config -l --show-origin</code> to find the path of a file to treat as belonging to the <code>git</code> installation.</p>
<p>Affected versions of <code>gix-path</code> do not pass <code>-z</code>/<code>--null</code> to cause <code>git</code> to report literal paths (650a1b5cf25e086197cc55a68525a411e1c28031). Instead, to cover the occasional case that <code>git</code> outputs a quoted path, they attempt to parse the path by stripping the quotation marks:</p>
<p><a href="https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142">https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142</a></p>
<p>The problem is that, when a path is quoted, it may change in substantial ways beyond the concatenation of quotation marks. If not reversed, these changes can result in another valid path that is not equivalent to the original.</p>
<p>This is not limited to paths with unusual characters such as quotation marks or newlines. Unless <code>git</code> is explicitly configured with <code>core.quotePath</code> set to <code>false</code>, it also happens when the path contains most non-ASCII characters, including accented or non-English letters. For example, <code>é</code> is transformed to <code>\303\251</code>, with literal backslashes. (This is an octal representation of the bytes in its UTF-8 encoding. This behavior is not limited to systems that encode paths with UTF-8 on disk.)</p>
<p>Rarely, the configuration file <code>gix-path</code> wrongly attempts to open can be created by an attacker who has a limited user account on the system. The attacker would often need to request an account username tailored to carrying out the attack.</p>
<h3 id="poc">PoC</h3>
<h4 id="quick-demonstration-on-unix">Quick demonstration on Unix</h4>
<p>On a Unix-like system in which Git supports no higher scope than <code>system</code> for configuration variables (i.e., not on macOS with Apple Git), in a locale that supports UTF-8, with <code>gitoxide</code> installed, run:</p>
<pre><code class="language-sh">mkdir myrepo
cd myrepo
git init
printf '[real]\n\trealvar = realval\n' &gt; 'é'
printf '[fake]\n\tfakevar = fakeval\n' &gt; '\303\251'
GIT_CONFIG_SYSTEM='é' gix config
</code></pre>
<p>If the above conditions are satisfied and the <code>gix</code> command was built against an affected version of <code>gix-path</code>, then the last command's output looks something like this:</p>
<pre><code class="language-text"># From '\303\251' (GitInstallation)
[fake]
        fakevar = fakeval

# From 'é' (System)
[real]
        realvar = realval

# From '/home/ubuntu/.gitconfig' (User)
[init]
        defaultBranch = main

# From './.git/config' (Local)
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
</code></pre>
<h4 id="demonstration-across-user-accounts-on-windows">Demonstration across user accounts on Windows</h4>
<p>On a test system running Windows on which Git for Windows is <em>not</em> installed system-wide—resembling a scenario in which users who wish to use Git are expected to install it themselves for their accounts—create two accounts, with these usernames:</p>
<ul>
<li><em>Renée</em>, the target of the attack. This user may be a limited user or an administrator. Its user profile directory is assumed to be <code>C:\Users\Renée</code>.</li>
<li><em>Ren</em>, the user who carries out the attack. This user should be a limited user, since an administrator would not need to exploit this vulnerability to inject configuration. Its user profile directory is assumed to be <code>C:\Users\Ren</code>.</li>
</ul>
<p>As <em>Ren</em>, run these commands in PowerShell:</p>
<pre><code class="language-powershell">$d = "$HOME\303\251e\AppData\Local\Programs\Git\etc"
mkdir $d
git config --file $d\gitconfig core.sshCommand calc.exe
icacls $HOME\303 /grant 'Renée:(RX)' /T
</code></pre>
<p>(The <code>gitconfig</code> file can instead be written manually, in which case <em>Ren</em> need not have <code>git</code>.)</p>
<p>As <em>Renée</em>:</p>
<ol>
<li><p>Install Git for Windows in the default location for non-systemwide installations, which for that user account is inside <code>C:\Users\Renée\AppData\Local\Programs</code>. For a non-administrative installation, Git for Windows will pick this location automatically. Allow the installer to place the directory containing <code>git</code> in the user's <code>PATH</code>, as it does by default.</p>
<p>(The scenario can be modified for any location the attacker can predict. So, for example, <em>Renée</em> can install Git for Windows with <a href="https://scoop.sh/"><code>scoop</code></a>, and <em>Ren</em> could carry out the attack with correspondingly modified path components in place of <code>AppData\Local\Programs\Git</code>.)</p>
</li>
<li><p>Install <code>gitoxide</code> using any common technique, such as by <a href="https://www.rust-lang.org/tools/install">installing Rust</a> and then running <code>cargo install gitoxide</code>.</p>
</li>
<li><p>Open a PowerShell window and run a <code>gix</code> command that attempts to run the SSH client for transport. For example:</p>
<pre><code class="language-pwsh">gix clone ssh://localhost/myrepo.git
</code></pre>
<p>At least one, and usually two, instances of the Windows calculator will pop up. This happens because <code>calc.exe</code> was configured in the fake configuration file the user <em>Ren</em> was able to cause to be used, by placing it at the location <code>gix-path</code> wrongly resolved the path of <em>Renée</em>'s own configuration file to.</p>
</li>
</ol>
<p>The <code>gitconfig</code> file written by the attacker can be adjusted with an arbitrary choice of payload, or to set other configuration variables.</p>
<h3 id="impact">Impact</h3>
<p>On a single-user system, it is not possible to exploit this, unless <code>GIT_CONFIG_SYSTEM</code> and <code>GIT_CONFIG_GLOBAL</code> have been set to unusual values or Git has been installed in an unusual way. Such a scenario is not expected.</p>
<p>Exploitation is unlikely even on a multi-user system, though it is plausible in some uncommon configurations or use cases. It is especially unlikely with Apple Git on macOS, due to its very high scoped configuration in <code>/Library</code> or <code>/Applications</code> that would be detected instead, as in CVE-2024-45305.</p>
<p>The likelihood of exploitation may be higher on Windows, where attacks such as those shown in the Windows proof-of-concept above can be performed due to the status of <code>\</code> as a directory separator, and where there is no restriction on usernames containing accented or non-English letters (though the latter is also permitted on some other systems). Even then, complex user interaction is required. In most cases, a system administrator would have to approve an innocuous-seeming username, and then the targeted user (who could be the same or a different user) would have to use an application that uses <code>gix-path</code>.</p>
<p>In general, exploitation is more likely to succeed if at least one of the following applies:</p>
<ul>
<li>Users are expected to install <code>git</code> themselves, and are likely to do so in predictable locations.</li>
<li>Locations where <code>git</code> is installed, whether due to usernames in their paths or otherwise, contain characters that <code>git</code> quotes by default in paths, such as non-English letters and accented letters.</li>
<li>A custom <code>system</code>-scope configuration file is specified with the <code>GIT_CONFIG_SYSTEM</code> environment variable, and its path is in an unusual location or has strangely named components.</li>
<li>A <code>system</code>-scope configuration file is absent, empty, or suppressed by means other than <code>GIT_CONFIG_NOSYSTEM</code>. Currently, <code>gix-path</code> can treat a <code>global</code>-scope configuration file as belonging to the installation if no higher scope configuration file is available. This increases the likelihood of exploitation even on a system where <code>git</code> is installed system-wide in an ordinary way.</li>
</ul>
<p>However, exploitation is expected to be very difficult even under any combination of those factors.</p>
<p>Although the effect here is similar to <a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">CVE-2022-24765</a> once exploited, a greater degree of user interaction would usually be required, and the attack complexity here is much higher because the necessary conditions are uncommon and challenging to predict.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-m8rp-vv92-46c7">https://github.com/Byron/gitoxide/security/advisories/GHSA-m8rp-vv92-46c7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45405">https://nvd.nist.gov/vuln/detail/CVE-2024-45405</a></li>
<li><a href="https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031">https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142">https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142</a></li>
<li><a href="https://github.com/advisories/GHSA-m8rp-vv92-46c7">https://github.com/advisories/GHSA-m8rp-vv92-46c7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8rp-vv92-46c7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:55:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-06T19:11:53.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aardvark-dns] Missing connection timeout in Aardvark-dns]]></title>
        <id>https://github.com/advisories/GHSA-g5jh-57wm-p79m</id>
        <link href="https://github.com/advisories/GHSA-g5jh-57wm-p79m"/>
        <updated>2024-09-04T17:22:37.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Aardvark-dns versions 1.12.0 and 1.12.1. They contain a denial of service vulnerability due to serial processing of TCP DNS queries. This flaw allows a malicious client to keep a TCP connection open indefinitely, causing other DNS queries to time out and resulting in a denial of service for all other containers using aardvark-dns.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8418">https://nvd.nist.gov/vuln/detail/CVE-2024-8418</a></li>
<li><a href="https://github.com/containers/aardvark-dns/issues/500">https://github.com/containers/aardvark-dns/issues/500</a></li>
<li><a href="https://github.com/containers/aardvark-dns/pull/503">https://github.com/containers/aardvark-dns/pull/503</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-8418">https://access.redhat.com/security/cve/CVE-2024-8418</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2309683">https://bugzilla.redhat.com/show_bug.cgi?id=2309683</a></li>
<li><a href="https://github.com/containers/aardvark-dns/commit/aa109bbd6743abd7027e589cc4b871dd2dce7d50">https://github.com/containers/aardvark-dns/commit/aa109bbd6743abd7027e589cc4b871dd2dce7d50</a></li>
<li><a href="https://github.com/advisories/GHSA-g5jh-57wm-p79m">https://github.com/advisories/GHSA-g5jh-57wm-p79m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g5jh-57wm-p79m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-04T15:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[olm-sys] olm-sys: wrapped library unmaintained, potentially vulnerable]]></title>
        <id>https://github.com/advisories/GHSA-p2q9-36vw-c468</id>
        <link href="https://github.com/advisories/GHSA-p2q9-36vw-c468"/>
        <updated>2024-09-03T21:11:22.000Z</updated>
        <content type="html"><![CDATA[<p>After several cryptographic vulnerabilities in <code>libolm</code> were disclosed publicly, the Matrix Foundation has <a href="https://matrix.org/blog/2024/08/libolm-deprecation/">officially deprecated the library</a>. <code>olm-sys</code> is a thin wrapper around <code>libolm</code> and is now deprecated and potentially vulnerable in kind.</p>
<p>Users of <code>olm-sys</code> and its higher-level abstraction, <code>olm-rs</code>, are highly encouraged to switch to <a href="https://crates.io/crates/vodozemac"><code>vodozemac</code></a> as soon as possible. It is the successor effort to <code>libolm</code> and is written in Rust.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://gitlab.gnome.org/BrainBlasted/olm-sys/-/issues/12">https://gitlab.gnome.org/BrainBlasted/olm-sys/-/issues/12</a></li>
<li><a href="https://matrix.org/blog/2024/08/libolm-deprecation">https://matrix.org/blog/2024/08/libolm-deprecation</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0368.html">https://rustsec.org/advisories/RUSTSEC-2024-0368.html</a></li>
<li><a href="https://github.com/advisories/GHSA-p2q9-36vw-c468">https://github.com/advisories/GHSA-p2q9-36vw-c468</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2q9-36vw-c468</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T21:11:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[quinn-proto] Denial of service in quinn-proto when using `Endpoint::retry()`]]></title>
        <id>https://github.com/advisories/GHSA-vr26-jcq5-fjj8</id>
        <link href="https://github.com/advisories/GHSA-vr26-jcq5-fjj8"/>
        <updated>2024-09-03T20:49:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>As of quinn-proto 0.11, it is possible for a server to <code>accept()</code>, <code>retry()</code>, <code>refuse()</code>, or <code>ignore()</code> an <code>Incoming</code> connection. However, calling <code>retry()</code> on an unvalidated connection exposes the server to a likely panic in the following situations:</p>
<ul>
<li>Calling <code>refuse</code> or <code>ignore</code> on the resulting validated connection, if a duplicate initial packet is received<ul>
<li>This issue can go undetected until a server's <code>refuse()</code>/<code>ignore()</code> code path is exercised, such as to stop a denial of service attack.</li>
</ul>
</li>
<li>Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesn't exhaust connection IDs is received.<ul>
<li>This issue can go undetected if clients are well-behaved.</li>
</ul>
</li>
</ul>
<p>The former situation was observed in a real application, while the latter is only theoretical.</p>
<h3 id="details">Details</h3>
<p>Location of panic: <a href="https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213">https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213</a></p>
<h3 id="impact">Impact</h3>
<p>Denial of service for internet-facing server</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/quinn-rs/quinn/security/advisories/GHSA-vr26-jcq5-fjj8">https://github.com/quinn-rs/quinn/security/advisories/GHSA-vr26-jcq5-fjj8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45311">https://nvd.nist.gov/vuln/detail/CVE-2024-45311</a></li>
<li><a href="https://github.com/quinn-rs/quinn/commit/e01609ccd8738bd438d86fa7185a0f85598cb58f">https://github.com/quinn-rs/quinn/commit/e01609ccd8738bd438d86fa7185a0f85598cb58f</a></li>
<li><a href="https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213">https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213</a></li>
<li><a href="https://github.com/advisories/GHSA-vr26-jcq5-fjj8">https://github.com/advisories/GHSA-vr26-jcq5-fjj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr26-jcq5-fjj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T20:49:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-path] gix-path uses local config across repos when it is the highest scope]]></title>
        <id>https://github.com/advisories/GHSA-v26r-4c9c-h3j6</id>
        <link href="https://github.com/advisories/GHSA-v26r-4c9c-h3j6"/>
        <updated>2024-09-03T20:21:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-path</code> executes <code>git</code> to find the path of a configuration file that belongs to the <code>git</code> installation itself, but mistakenly treats the local repository's configuration as system-wide if no higher scoped configuration is found. In rare cases, this causes a less trusted repository to be treated as more trusted, or leaks sensitive information from one repository to another, such as sending credentials to another repository's remote.</p>
<h3 id="details">Details</h3>
<p>In <code>gix_path::env</code>, the underlying implementation of the <code>installation_config</code> and <code>installation_config_prefix</code> functions calls <code>git config -l --show-origin</code> and parses the first line of the output to extract the path to the configuration file holding the configuration variable of highest <a href="https://git-scm.com/docs/git-config#SCOPES">scope</a>:</p>
<p><a href="https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L91">https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L91</a></p>
<p><a href="https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L112">https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L112</a></p>
<p>While the configuration variable of highest scope is not usually in the local scope, there are practical situations where this occurs:</p>
<ul>
<li>A configuration file truly associated with the installation is not present on all systems and can occasionally be empty. Likewise, there may be no variables in the global scope.</li>
<li>Configuration files associated with those higher scopes may be deliberately skipped by setting the <code>GIT_CONFIG_SYSTEM</code> and <code>GIT_CONFIG_GLOBAL</code> environment variables to <code>/dev/null</code> (or to <code>NUL</code> on Windows). This prevents <code>gix-path</code> from finding the path of configuration files for those scopes, while not preventing downstream components such as the function in <code>gix-config</code> from reporting a local path as being associated with the installation.</li>
<li>The <code>GIT_CONFIG_NOSYSTEM</code> environment variable can be used to disable configuration associated with the installation. (<code>GIT_CONFIG_NOSYSTEM=1</code> is more powerful than <code>GIT_CONFIG_SYSTEM=/dev/null</code> on systems where an additional "unknown" scope is associated with the installation, as occurs on macOS with Apple Git.) This will cause the local scope to be the highest nonempty scope under even more situations, though in practice it is less dangerous because most, though possibly not all, downstream components would disregard the value.</li>
</ul>
<p>A user may use either or both of the latter two techniques to turn off an undesired configuration or to create a more replicable environment. Such a user would expect that this results in a more controlled configuration.</p>
<p>Often, when located inside one repository, a user performs operations on that repository or that are not specific to any repository. In such use, local configuration is typically desired or at least acceptable, and mistaking it as coming from another scope is not typically harmful.</p>
<p>However, sometimes a user is in one repository and operates on another repository. A major case where this occurs is cloning one repository while located in another. This can be done in an ad-hoc fashion, including when cloning the repository outside of the one we are inside. It may also potentially be automated by an application for purposes such as submodule handling. Two kinds of problems are anticipated:</p>
<ul>
<li>A less secure configuration may be set for a specific repository where it is judged acceptable, even though it would not be wanted for other repositories, such as to enable a protocol or set up debugging.</li>
<li>More likely, a configuration that supplies secrets for use in one repository's remote can be used to send those secrets to another repository's remote.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>In this example, we send mock <code>Authorization: Basic ...</code> credentials meant for one repository's remote to another remote, by running <code>gix</code> while inside the first repository to clone the second repository.</p>
<p>These instructions are written for a Unix shell, but they will work in other shells, including in PowerShell on Windows if the method of setting environment variables is adapted and <code>/dev/null</code> is replaced with <code>NUL</code>. This procedure is likely to demonstrate the problem on all systems <em>except</em> macOS. This is due to the high-scoped "unknown" configuration that usually accompanies Apple Git, and reflects that gix-path is in practice much less vulnerable on macOS (though still potentially vulnerable).</p>
<ol>
<li><p>Install <a href="https://crates.io/crates/dummyhttp"><code>dummyhttp</code></a> to serve as a local HTTP server for the demonstration.</p>
</li>
<li><p>Obtain a build of <code>gitoxide</code> with the <code>max</code> feature set enabled. While this vulnerability affects other builds, this example requires <code>max</code> for <code>http.extraHeader</code> support.</p>
<p>Running <code>cargo install gitoxide</code> will install such a build though it may build against a patched version of <code>gix-path</code>. Cloning the repository (12251eb052df30105538fa831e641eea557f13d8 and earlier are affected) and building with <code>cargo build</code> or <code>cargo install --path .</code> are also sufficient. In contrast, installing from published binaries with <code>binstall</code> or <code>quickinstall</code> does not provide the <code>max</code> feature, as of this writing.</p>
</li>
<li><p>Run: <code>dummyhttp -i 127.0.0.1 -c 403 -v</code></p>
</li>
<li><p>In a separate terminal, create a new local repository and set up a mock remote and <code>http.extraHeader</code> configuration:</p>
<pre><code class="language-sh">git init myrepo
cd myrepo
git remote add origin http://127.0.0.1:8080/mygit.git
git config --local http.extraHeader 'Authorization: Basic abcde'
</code></pre>
</li>
<li><p>Make sure the testing setup is working by running <code>gix fetch</code> in the repository and checking that it fails in the expected way. In the terminal where that is run, a message should be shown indicating an HTTP 403 error. The more interesting output is in the terminal where <code>dummyhttp</code> is running, which should look like this:</p>
<pre><code class="language-text">2024-30-30 03:30:16 127.0.0.1:55689 GET /myrepo.git/info/refs?service=git-upload-pack HTTP/1.1
┌─Incoming request
│ GET /myrepo.git/info/refs?service=git-upload-pack HTTP/1.1
│ Accept: */*
│ Authorization: Basic abcde
│ Git-Protocol: version=2
│ Host: 127.0.0.1:8080
│ User-Agent: git/oxide-0.42.2
┌─Outgoing response
│ HTTP/1.1 403 Forbidden
│ Content-Length: 9
│ Content-Type: text/plain; charset=utf-8
│ Date: Fri, 30 Aug 2024 03:30:16 -0400
</code></pre>
<p>Some details may differ, especially dates and times. But <code>Authorization: Basic abcde</code> should be shown.</p>
</li>
<li><p>Now, in the terminal where you ran <code>gix fetch</code>, try cloning a separate repository:</p>
<pre><code class="language-sh">gix clone http://127.0.0.1:8080/other.git
</code></pre>
<p>Check the output appended in the terminal where <code>dummyhttp</code> is running. This is to observe that <code>Authorization: Basic abcde</code> was rightly <em>not</em> sent.</p>
<p>Alternatively, if it <em>does</em> appear, then your system may be in one of the uncommon configurations that is vulnerable without further action.</p>
</li>
<li><p>Now rerun that command, but with a modified environment, to cause <code>gix-path</code> to wrongly treat configuration from the local scope as being associated with the <code>git</code> installation:</p>
<pre><code class="language-sh">env GIT_CONFIG_SYSTEM=/dev/null GIT_CONFIG_GLOBAL=/dev/null gix clone http://127.0.0.1:8080/other.git
</code></pre>
<p>Check the output appended in the terminal where <code>dummyhttp</code> is running. Observe that <code>Authorization: Basic abcde</code> was wrongly sent.</p>
</li>
</ol>
<p>While this procedure uses the same remote host for both repositories, this is not a required element. If the second repository had a different, untrusted host, the extra header would still be sent.</p>
<h3 id="impact">Impact</h3>
<p>It is believed to be very difficult to exploit this vulnerability deliberately, due to the need either to anticipate a situation in which higher-scoped configuration variables would be absent, or to arrange for this to happen. Although any operating system may be affected, users running Apple Git on macOS are much less likely to be affected.</p>
<p>In the example shown above, more secure general practices would avoid it: using a credential manager, or even using <code>http.&lt;url&gt;.extraHeader</code> with as specific a <code>&lt;url&gt;</code> as possible, rather than the more general <code>http.extraHeader</code>. Many scenarios are analogous: if each repository's configuration is as secure as possible for how the repository is used, and secrets are stored securely and separately, then the circumstances under which an unacceptably unsecure configuration is used, or under which a leak of credentials would occur, become unlikely.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-v26r-4c9c-h3j6">https://github.com/Byron/gitoxide/security/advisories/GHSA-v26r-4c9c-h3j6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45305">https://nvd.nist.gov/vuln/detail/CVE-2024-45305</a></li>
<li><a href="https://git-scm.com/docs/git-config#SCOPES">https://git-scm.com/docs/git-config#SCOPES</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L112">https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L112</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L91">https://github.com/Byron/gitoxide/blob/12251eb052df30105538fa831e641eea557f13d8/gix-path/src/env/git/mod.rs#L91</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0367.html">https://rustsec.org/advisories/RUSTSEC-2024-0367.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v26r-4c9c-h3j6">https://github.com/advisories/GHSA-v26r-4c9c-h3j6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v26r-4c9c-h3j6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-03T20:21:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pagefind] DOM clobbering could escalate to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</id>
        <link href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx"/>
        <updated>2024-09-03T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>Pagefind initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script you load. This information is gathered by looking up the value of <code>document.currentScript.src</code>.</p>
<p>It is possible to "clobber" this lookup with otherwise benign HTML on the page, for example:</p>
<pre><code class="language-html">&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;
</code></pre>
<p>This will cause <code>document.currentScript.src</code> to resolve as an external domain, which will then be used by Pagefind to load dependencies.</p>
<p>This exploit would only work in the case that an attacker could inject HTML to your live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, <code>img</code> tags with a <code>name</code> attribute), but not others, as adding a <code>script</code> to the page would itself be the XSS vector.</p>
<p>Pagefind has tightened this resolution by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.</p>
<h3 id="original-report">Original Report</h3>
<p>If an attacker can inject benign html, such as:
<code>&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;</code></p>
<p>they can clobber <code>document.currentScript.src</code> leading to XSS in your library.</p>
<p>Here is the same attack on webpack that was accepted: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb">https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45389">https://nvd.nist.gov/vuln/detail/CVE-2024-45389</a></li>
<li><a href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/advisories/GHSA-gprj-6m2f-j9hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T19:33:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo prior to Rust 1.26.0 may download the wrong dependency]]></title>
        <id>https://github.com/advisories/GHSA-9f3p-wvj7-q82x</id>
        <link href="https://github.com/advisories/GHSA-9f3p-wvj7-q82x"/>
        <updated>2024-08-29T18:03:17.000Z</updated>
        <content type="html"><![CDATA[<p>Cargo prior to Rust 1.26.0 may download the wrong dependency if your package.toml file uses the <code>package</code> configuration key. Usage of the <code>package</code> key to rename dependencies in <code>Cargo.toml</code> is ignored in Rust 1.25.0 and prior. When Rust 1.25.0 and prior is used Cargo may download the wrong dependency, which could be squatted on crates.io to be a malicious package. This not only affects manifests that you write locally yourself, but also manifests published to crates.io. Rust 1.0.0 through Rust 1.25.0 is affected by this advisory because Cargo will ignore the <code>package</code> key in manifests. Rust 1.26.0 through Rust 1.30.0 are not affected and typically will emit an error because the <code>package</code> key is unstable. Rust 1.31.0 and after are not affected because Cargo understands the <code>package</code> key. Users of the affected versions are strongly encouraged to update their compiler to the latest available one. Preventing this issue from happening requires updating your compiler to be either Rust 1.26.0 or newer. There will be no point release for Rust versions prior to 1.26.0. Users of Rust 1.19.0 to Rust 1.25.0 can instead apply linked patches to mitigate the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/rust/security/advisories/GHSA-phjm-8x66-qw4r">https://github.com/rust-lang/rust/security/advisories/GHSA-phjm-8x66-qw4r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16760">https://nvd.nist.gov/vuln/detail/CVE-2019-16760</a></li>
<li><a href="https://gist.github.com/pietroalbini/0d293b24a44babbeb6187e06eebd4992">https://gist.github.com/pietroalbini/0d293b24a44babbeb6187e06eebd4992</a></li>
<li><a href="https://groups.google.com/forum/#!topic/rustlang-security-announcements/rVQ5e3TDnpQ">https://groups.google.com/forum/#!topic/rustlang-security-announcements/rVQ5e3TDnpQ</a></li>
<li><a href="https://groups.google.com/forum/#%21topic/rustlang-security-announcements/rVQ5e3TDnpQ">https://groups.google.com/forum/#%21topic/rustlang-security-announcements/rVQ5e3TDnpQ</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/10/08/3">http://www.openwall.com/lists/oss-security/2019/10/08/3</a></li>
<li><a href="https://github.com/advisories/GHSA-9f3p-wvj7-q82x">https://github.com/advisories/GHSA-9f3p-wvj7-q82x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9f3p-wvj7-q82x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:57:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] CWA-2023-004: Excessive number of function parameters in compiled Wasm]]></title>
        <id>https://github.com/advisories/GHSA-75qh-gg76-p2w4</id>
        <link href="https://github.com/advisories/GHSA-75qh-gg76-p2w4"/>
        <updated>2024-08-27T19:55:41.000Z</updated>
        <content type="html"><![CDATA[<p>A specifically crafted Wasm file can cause the VM to consume excessive amounts of memory when compiling a contract.
This can lead to high memory usage, slowdowns, potentially a crash and can poison a lock in the VM,
preventing any further interaction with contracts.</p>
<p>For more information, see <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">CWA-2023-004</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840">https://forum.cosmos.network/t/high-severity-security-patch-upcoming-on-wed-10th-cwa-2023-004-brought-to-you-by-certik-and-confio/12840</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2023-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0366.html">https://rustsec.org/advisories/RUSTSEC-2024-0366.html</a></li>
<li><a href="https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023">https://www.certik.com/resources/blog/risk-and-security-enhancement-for-app-chains-an-in-depth-writeup-of-cwa-2023</a></li>
<li><a href="https://github.com/advisories/GHSA-75qh-gg76-p2w4">https://github.com/advisories/GHSA-75qh-gg76-p2w4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75qh-gg76-p2w4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:55:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apollo-router] Apollo Router Coprocessors may cause Denial-of-Service when handling request bodies]]></title>
        <id>https://github.com/advisories/GHSA-x6xq-whh3-gg32</id>
        <link href="https://github.com/advisories/GHSA-x6xq-whh3-gg32"/>
        <updated>2024-08-27T20:31:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>Instances of the Apollo Router using either of the following may be impacted by a denial-of-service vulnerability.</p>
<ol>
<li>External Coprocessing with specific configurations; or</li>
<li>Native Rust Plugins accessing the Router request body in the RouterService layer</li>
</ol>
<p>Router customizations using Rhai scripts are <strong>not</strong> impacted.</p>
<h3 id="when-using-external-coprocessing">When using External Coprocessing:</h3>
<p>Instances of the Apollo Router running versions &gt;=1.21.0 and &lt;1.52.1 are impacted by a denial-of-service vulnerability if <strong>all</strong> of the following are true:</p>
<ol>
<li>Router has been configured to support External Coprocessing.</li>
<li>Router has been configured to send request bodies to coprocessors. This is a non-default configuration and must be configured intentionally by administrators.</li>
</ol>
<p>You can identify if you are impacted by reviewing your router's configuration YAML for the following config:</p>
<pre><code class="language-yaml">...
coprocessor:
  url: http://localhost:9000 # likely different in your environment
  router:
    request:
      body: true # this must be set to 'true' to be impacted
...
</code></pre>
<p>External Coprocessing was initially made available as an experimental feature with <a href="https://github.com/apollographql/router/releases/tag/v1.21.0">Router version 1.21.0</a> on 2023-06-20 and was made generally available with <a href="https://github.com/apollographql/router/releases/tag/v1.38.0">Router version 1.38.0</a> on 2024-01-19. More information about the Router’s <a href="https://www.apollographql.com/docs/router/customizations/coprocessor">External Coprocessing feature is available here</a>.</p>
<h3 id="when-using-native-rust-plugins">When using Native Rust Plugins:</h3>
<p>Instances of the Apollo Router running versions &gt;=1.7.0 and &lt;1.52.1 are impacted by a denial-of-service vulnerability if <strong>all</strong> of the following are true:</p>
<ol>
<li>Router has been configured to use a custom-developed Native Rust Plugin</li>
<li>The plugin accesses <code>Request.router_request</code> in the <code>RouterService</code> layer</li>
<li>You are accumulating the body from <code>Request.router_request</code> into memory</li>
</ol>
<p>To use a plugin, you need to be running a customized Router binary. Additionally, you need to have a <code>plugins</code> section with at least one plugin defined in your Router’s configuration YAML. That plugin would also need to define a custom <code>router_service</code> method.</p>
<p>You can check for a defined plugin by reviewing for the following in your Router’s configuration YAML:</p>
<pre><code class="language-yaml">...
plugins:
    custom_plugin_name:
        # custom config here
...
</code></pre>
<p>You can check for a custom <code>router_service</code> method in a plugin, by reviewing for the following function signature in your plugin’s source:</p>
<pre><code class="language-rust">fn router_service(&amp;self, service: router::BoxService) -&gt; router::BoxService
</code></pre>
<p>More information about the Router’s <a href="https://www.apollographql.com/docs/router/customizations/native">Native Rust Plugin feature is available here</a>.</p>
<h2 id="impact-detail">Impact Detail</h2>
<p>If using an impacted configuration, the Router will load entire HTTP request bodies into memory without respect to other HTTP request size-limiting configurations like <code>limits.http_max_request_bytes</code>. This can cause the Router to be out-of-memory (OOM) terminated if a sufficiently large request is sent to the Router.</p>
<p>By default, the Router sets <code>limits.http_max_request_bytes</code> to 2 MB. More information about the Router’s <a href="https://www.apollographql.com/docs/router/configuration/overview/#request-limits">request limiting features is available here</a>.</p>
<h2 id="patches">Patches</h2>
<p><a href="https://github.com/apollographql/router/releases/tag/v1.52.1">Apollo Router 1.52.1</a></p>
<p>If you have an impacted configuration as defined above, please upgrade to at least Apollo Router 1.52.1.</p>
<h2 id="workarounds">Workarounds</h2>
<p>If you cannot upgrade, you can mitigate the denial-of-service opportunity impacting External Coprocessors by setting the <code>coprocessor.router.request.body</code> configuration option to <code>false</code>. Please note that changing this configuration option will change the information sent to any coprocessors you have configured and may impact functionality implemented by those coprocessors. </p>
<p>If you have developed a Native Rust Plugin and cannot upgrade, you can update your plugin to either not accumulate the request body or enforce a maximum body size limit. </p>
<p>You can also mitigate this issue by limiting HTTP body payload sizes prior to the Router (e.g., in a proxy or web application firewall appliance).</p>
<h2 id="references">References</h2>
<p><a href="https://github.com/apollographql/router/releases/tag/v1.52.1">Apollo Router 1.52.1 Release Notes</a>
<a href="https://www.apollographql.com/docs/router/customizations/coprocessor">External Coprocessing documentation</a>
<a href="https://www.apollographql.com/docs/router/configuration/overview/#request-limits">HTTP Request Limiting documentation</a>
<a href="https://www.apollographql.com/docs/router/customizations/native">Native Rust Plugin documentation</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/router/security/advisories/GHSA-x6xq-whh3-gg32">https://github.com/apollographql/router/security/advisories/GHSA-x6xq-whh3-gg32</a></li>
<li><a href="https://github.com/apollographql/router/commit/7a9c020608a62dcaa306b72ed0f6980f15923b14">https://github.com/apollographql/router/commit/7a9c020608a62dcaa306b72ed0f6980f15923b14</a></li>
<li><a href="https://github.com/apollographql/router/releases/tag/v1.52.1">https://github.com/apollographql/router/releases/tag/v1.52.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43783">https://nvd.nist.gov/vuln/detail/CVE-2024-43783</a></li>
<li><a href="https://www.apollographql.com/docs/router/configuration/overview/#request-limits">https://www.apollographql.com/docs/router/configuration/overview/#request-limits</a></li>
<li><a href="https://www.apollographql.com/docs/router/customizations/coprocessor">https://www.apollographql.com/docs/router/customizations/coprocessor</a></li>
<li><a href="https://www.apollographql.com/docs/router/customizations/native">https://www.apollographql.com/docs/router/customizations/native</a></li>
<li><a href="https://github.com/advisories/GHSA-x6xq-whh3-gg32">https://github.com/advisories/GHSA-x6xq-whh3-gg32</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x6xq-whh3-gg32</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-27T18:14:29.000Z</published>
    </entry>
</feed>