<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-10-09T12:02:06.077Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] Improper Authorization in Select Permissions]]></title>
        <id>https://github.com/advisories/GHSA-9722-9j67-vjcr</id>
        <link href="https://github.com/advisories/GHSA-9722-9j67-vjcr"/>
        <updated>2024-10-08T22:21:11.000Z</updated>
        <content type="html"><![CDATA[<p>Due to the order in which permissions were processed, some statements, filters and computations could lead to leaking field values or record contents to users without the required permissions. This behavior could be triggered in different scenarios:</p>
<ul>
<li><p>When performing a <code>SELECT</code> operation on a table, the values that would be returned were iterated over, field permissions would be validated and any unauthorized value would be removed from the result returned. However, performing a <code>SELECT VALUE</code> operation (e.g. <code>SELECT VALUE private FROM data</code>) would result in a non-iterable value, which would not be removed from the returned result.</p>
</li>
<li><p>When aliasing a field (e.g. <code>SELECT private AS public FROM data</code>) for which the user did not have <code>SELECT</code> permissions within a <code>SELECT</code> query, permissions would be checked against the field of the resulting document containing the aliased field instead of the original document containing the original field. As a consequence, the original field value would be returned as the returned field would not match the original field where permissions had been defined.</p>
</li>
<li><p>When calling a function in the context of a <code>SELECT</code> query and passing a field with permissions as an argument to the function (e.g. <code>SELECT string::lowercase(private) FROM data</code>), the function would receive the field value before it had been removed from the document due to <code>SELECT</code> permissions. As a result, the function would have access to the value of the field regardless of field permissions. This case includes functions called from within events and other clauses that support function calling.</p>
</li>
<li><p>When executing a query containing a <code>WHERE</code> clause filtering records by a field that the querying user does not have access to <code>SELECT</code> (e.g. <code>SELECT public FROM data WHERE private ~ "secret"</code>), the response of that query would still take the value of the field into account. Even though the value of the protected field would not be returned, this behavior could be used as a side channel by the querying user to infer information about the value of the field.</p>
</li>
<li><p>When performing <code>UPDATE</code> or <code>DELETE</code> operations over a table with a user that had those permissions but no <code>SELECT</code> permission, the <code>RETURN BEFORE</code> clause could be used (e.g. <code>DELETE data RETURN BEFORE</code>) to read the contents of the records prior to the authorized update or the deletion despite the querying user not being authorized to perform <code>SELECT</code> operations.</p>
</li>
<li><p>When performing <code>UPDATE</code> operations on a table for which the user had <code>SELECT</code> and <code>UPDATE</code> permissions, the <code>SET</code> clause could reference fields that the user had <code>UPDATE</code> but no <code>SELECT</code> permission for (e.g. <code>UPDATE data SET public = private</code>) in order to update the value of a field that the user had permission to <code>SELECT</code> to the value of another field for which the user did not.</p>
</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Clients that were authorized by table permissions to execute <code>SELECT</code> statements for a table but were not authorized by field permissions to run <code>SELECT</code> queries for a specific field could still have been able to gain knowledge of the value of that field. Additionally, clients that were authorized to execute <code>UPDATE</code> or <code>DELETE</code> statements for a table but not authorized to execute <code>SELECT</code> statements for the same table may have been able to gain knowledge of the contents of records in that table. This could only be exploited by users who were already authorized to execute queries on the database with the affected table or field.</p>
<p>Due to its relationship with table and field permissions, which apply mainly to record users rather than system users, this issue mostly affects users relying on SurrealDB as a backend-as-a-service rather than SurrealDB as a traditional database backend.</p>
<h3 id="patches">Patches</h3>
<p>The behavior when evaluating table or field permissions and filtering records or fields as a result of those evaluations has been improved to consider permissions before any changes to the document have been made and, when relevant, permissions after changes to the document have taken place. When a user is unauthorized to view record contents and field values by permissions, the returned documents will behave as if the record or field did not exist in order to prevent leaking any information.</p>
<ul>
<li>Version 2.0.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users affected by this issue and unable to update should not rely on the authorization provided by field permissions when it comes to the <code>SELECT</code> permission. Instead, read access to fields in affected versions should be restricted at the table level. When allowing the <code>UPDATE</code> or <code>DELETE</code> operations for records via table permissions, users should not rely of the authorization provided by the <code>SELECT</code> permission. Instead, users should not allow clients to <code>UPDATE</code> or <code>DELETE</code> records that they should not be able to view.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-9722-9j67-vjcr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-9722-9j67-vjcr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/2161">https://github.com/surrealdb/surrealdb/issues/2161</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/3924">https://github.com/surrealdb/surrealdb/issues/3924</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4785">https://github.com/surrealdb/surrealdb/pull/4785</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4800">https://github.com/surrealdb/surrealdb/pull/4800</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4873">https://github.com/surrealdb/surrealdb/pull/4873</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/439ab99e15314ec5cf87047bf58246db646e3f8c">https://github.com/surrealdb/surrealdb/commit/439ab99e15314ec5cf87047bf58246db646e3f8c</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/c382fa158dc84b329328606f663efe574f102a7d">https://github.com/surrealdb/surrealdb/commit/c382fa158dc84b329328606f663efe574f102a7d</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/e75e7736b3a028c4b6a4a4bdf00791d76f77e339">https://github.com/surrealdb/surrealdb/commit/e75e7736b3a028c4b6a4a4bdf00791d76f77e339</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/summary#permissions">https://surrealdb.com/docs/surrealdb/security/summary#permissions</a></li>
<li><a href="https://surrealdb.com/docs/surrealql/statements/define/field#setting-permissions-on-fields">https://surrealdb.com/docs/surrealql/statements/define/field#setting-permissions-on-fields</a></li>
<li><a href="https://surrealdb.com/docs/surrealql/statements/define/table#defining-permissions">https://surrealdb.com/docs/surrealql/statements/define/table#defining-permissions</a></li>
<li><a href="https://github.com/advisories/GHSA-9722-9j67-vjcr">https://github.com/advisories/GHSA-9722-9j67-vjcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9722-9j67-vjcr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T22:21:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Improper Authorization in Select Permissions]]></title>
        <id>https://github.com/advisories/GHSA-9722-9j67-vjcr</id>
        <link href="https://github.com/advisories/GHSA-9722-9j67-vjcr"/>
        <updated>2024-10-08T22:21:11.000Z</updated>
        <content type="html"><![CDATA[<p>Due to the order in which permissions were processed, some statements, filters and computations could lead to leaking field values or record contents to users without the required permissions. This behavior could be triggered in different scenarios:</p>
<ul>
<li><p>When performing a <code>SELECT</code> operation on a table, the values that would be returned were iterated over, field permissions would be validated and any unauthorized value would be removed from the result returned. However, performing a <code>SELECT VALUE</code> operation (e.g. <code>SELECT VALUE private FROM data</code>) would result in a non-iterable value, which would not be removed from the returned result.</p>
</li>
<li><p>When aliasing a field (e.g. <code>SELECT private AS public FROM data</code>) for which the user did not have <code>SELECT</code> permissions within a <code>SELECT</code> query, permissions would be checked against the field of the resulting document containing the aliased field instead of the original document containing the original field. As a consequence, the original field value would be returned as the returned field would not match the original field where permissions had been defined.</p>
</li>
<li><p>When calling a function in the context of a <code>SELECT</code> query and passing a field with permissions as an argument to the function (e.g. <code>SELECT string::lowercase(private) FROM data</code>), the function would receive the field value before it had been removed from the document due to <code>SELECT</code> permissions. As a result, the function would have access to the value of the field regardless of field permissions. This case includes functions called from within events and other clauses that support function calling.</p>
</li>
<li><p>When executing a query containing a <code>WHERE</code> clause filtering records by a field that the querying user does not have access to <code>SELECT</code> (e.g. <code>SELECT public FROM data WHERE private ~ "secret"</code>), the response of that query would still take the value of the field into account. Even though the value of the protected field would not be returned, this behavior could be used as a side channel by the querying user to infer information about the value of the field.</p>
</li>
<li><p>When performing <code>UPDATE</code> or <code>DELETE</code> operations over a table with a user that had those permissions but no <code>SELECT</code> permission, the <code>RETURN BEFORE</code> clause could be used (e.g. <code>DELETE data RETURN BEFORE</code>) to read the contents of the records prior to the authorized update or the deletion despite the querying user not being authorized to perform <code>SELECT</code> operations.</p>
</li>
<li><p>When performing <code>UPDATE</code> operations on a table for which the user had <code>SELECT</code> and <code>UPDATE</code> permissions, the <code>SET</code> clause could reference fields that the user had <code>UPDATE</code> but no <code>SELECT</code> permission for (e.g. <code>UPDATE data SET public = private</code>) in order to update the value of a field that the user had permission to <code>SELECT</code> to the value of another field for which the user did not.</p>
</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Clients that were authorized by table permissions to execute <code>SELECT</code> statements for a table but were not authorized by field permissions to run <code>SELECT</code> queries for a specific field could still have been able to gain knowledge of the value of that field. Additionally, clients that were authorized to execute <code>UPDATE</code> or <code>DELETE</code> statements for a table but not authorized to execute <code>SELECT</code> statements for the same table may have been able to gain knowledge of the contents of records in that table. This could only be exploited by users who were already authorized to execute queries on the database with the affected table or field.</p>
<p>Due to its relationship with table and field permissions, which apply mainly to record users rather than system users, this issue mostly affects users relying on SurrealDB as a backend-as-a-service rather than SurrealDB as a traditional database backend.</p>
<h3 id="patches">Patches</h3>
<p>The behavior when evaluating table or field permissions and filtering records or fields as a result of those evaluations has been improved to consider permissions before any changes to the document have been made and, when relevant, permissions after changes to the document have taken place. When a user is unauthorized to view record contents and field values by permissions, the returned documents will behave as if the record or field did not exist in order to prevent leaking any information.</p>
<ul>
<li>Version 2.0.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users affected by this issue and unable to update should not rely on the authorization provided by field permissions when it comes to the <code>SELECT</code> permission. Instead, read access to fields in affected versions should be restricted at the table level. When allowing the <code>UPDATE</code> or <code>DELETE</code> operations for records via table permissions, users should not rely of the authorization provided by the <code>SELECT</code> permission. Instead, users should not allow clients to <code>UPDATE</code> or <code>DELETE</code> records that they should not be able to view.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-9722-9j67-vjcr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-9722-9j67-vjcr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/2161">https://github.com/surrealdb/surrealdb/issues/2161</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/3924">https://github.com/surrealdb/surrealdb/issues/3924</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4785">https://github.com/surrealdb/surrealdb/pull/4785</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4800">https://github.com/surrealdb/surrealdb/pull/4800</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4873">https://github.com/surrealdb/surrealdb/pull/4873</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/439ab99e15314ec5cf87047bf58246db646e3f8c">https://github.com/surrealdb/surrealdb/commit/439ab99e15314ec5cf87047bf58246db646e3f8c</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/c382fa158dc84b329328606f663efe574f102a7d">https://github.com/surrealdb/surrealdb/commit/c382fa158dc84b329328606f663efe574f102a7d</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/e75e7736b3a028c4b6a4a4bdf00791d76f77e339">https://github.com/surrealdb/surrealdb/commit/e75e7736b3a028c4b6a4a4bdf00791d76f77e339</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/summary#permissions">https://surrealdb.com/docs/surrealdb/security/summary#permissions</a></li>
<li><a href="https://surrealdb.com/docs/surrealql/statements/define/field#setting-permissions-on-fields">https://surrealdb.com/docs/surrealql/statements/define/field#setting-permissions-on-fields</a></li>
<li><a href="https://surrealdb.com/docs/surrealql/statements/define/table#defining-permissions">https://surrealdb.com/docs/surrealql/statements/define/table#defining-permissions</a></li>
<li><a href="https://github.com/advisories/GHSA-9722-9j67-vjcr">https://github.com/advisories/GHSA-9722-9j67-vjcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9722-9j67-vjcr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T22:21:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB has an Uncaught Exception Handling Parsing Errors on Empty Strings]]></title>
        <id>https://github.com/advisories/GHSA-qjrv-v6qp-x99x</id>
        <link href="https://github.com/advisories/GHSA-qjrv-v6qp-x99x"/>
        <updated>2024-10-08T22:20:06.000Z</updated>
        <content type="html"><![CDATA[<p>The error rendering code from the parser would panic when handling failed parsing of queries where the error occurred when converting an empty string to a SurrealDB value. This would be the case when casting an empty string to a <code>record</code>, <code>duration</code> or <code>datetime</code>, as well as potentially when parsing an empty string to JSON or providing an empty string to the <code>type::field</code> and <code>type::fields</code> functions.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to execute a malformed query which would fail to parse when converting an empty string and cause a panic in the error rendering code. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 2.0.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-qjrv-v6qp-x99x">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-qjrv-v6qp-x99x</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4923">https://github.com/surrealdb/surrealdb/pull/4923</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/709d6efe901dbf3e207b4fc2ebc30775595efc16">https://github.com/surrealdb/surrealdb/commit/709d6efe901dbf3e207b4fc2ebc30775595efc16</a></li>
<li><a href="https://github.com/advisories/GHSA-qjrv-v6qp-x99x">https://github.com/advisories/GHSA-qjrv-v6qp-x99x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjrv-v6qp-x99x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T22:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB has an Uncaught Exception Handling Parsing Errors on Empty Strings]]></title>
        <id>https://github.com/advisories/GHSA-qjrv-v6qp-x99x</id>
        <link href="https://github.com/advisories/GHSA-qjrv-v6qp-x99x"/>
        <updated>2024-10-08T22:20:06.000Z</updated>
        <content type="html"><![CDATA[<p>The error rendering code from the parser would panic when handling failed parsing of queries where the error occurred when converting an empty string to a SurrealDB value. This would be the case when casting an empty string to a <code>record</code>, <code>duration</code> or <code>datetime</code>, as well as potentially when parsing an empty string to JSON or providing an empty string to the <code>type::field</code> and <code>type::fields</code> functions.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server would be able to execute a malformed query which would fail to parse when converting an empty string and cause a panic in the error rendering code. This would crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 2.0.4 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Affected users who are unable to update may want to limit the ability of untrusted clients to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-qjrv-v6qp-x99x">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-qjrv-v6qp-x99x</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4923">https://github.com/surrealdb/surrealdb/pull/4923</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/709d6efe901dbf3e207b4fc2ebc30775595efc16">https://github.com/surrealdb/surrealdb/commit/709d6efe901dbf3e207b4fc2ebc30775595efc16</a></li>
<li><a href="https://github.com/advisories/GHSA-qjrv-v6qp-x99x">https://github.com/advisories/GHSA-qjrv-v6qp-x99x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjrv-v6qp-x99x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-08T22:20:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[async-graphql] async-graphql Directive Overload]]></title>
        <id>https://github.com/advisories/GHSA-5gc2-7c65-8fq8</id>
        <link href="https://github.com/advisories/GHSA-5gc2-7c65-8fq8"/>
        <updated>2024-10-03T18:27:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>Service Disruption: The server may become unresponsive or extremely slow, potentially leading to downtime.</li>
<li>Resource Exhaustion: Excessive use of server resources, such as CPU and memory, could negatively impact other services running on the same infrastructure.</li>
<li>User Experience Degradation: Users may experience delays or failures when accessing the service, which could lead to frustration and loss of trust in the service.</li>
</ul>
<h3 id="patches">Patches</h3>
<ol>
<li>Upgrade to v7.0.10</li>
<li>Use <a href="https://docs.rs/async-graphql/latest/async_graphql/struct.SchemaBuilder.html#method.limit_directives">SchemaBuilder.limit_directives</a> to limit the maximum number of directives for a single field.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/async-graphql/async-graphql/security/advisories/GHSA-5gc2-7c65-8fq8">https://github.com/async-graphql/async-graphql/security/advisories/GHSA-5gc2-7c65-8fq8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47614">https://nvd.nist.gov/vuln/detail/CVE-2024-47614</a></li>
<li><a href="https://github.com/async-graphql/async-graphql/commit/7f1791488463d4e9c5adcd543962173e2f6cbd34">https://github.com/async-graphql/async-graphql/commit/7f1791488463d4e9c5adcd543962173e2f6cbd34</a></li>
<li><a href="https://github.com/advisories/GHSA-5gc2-7c65-8fq8">https://github.com/advisories/GHSA-5gc2-7c65-8fq8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gc2-7c65-8fq8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-03T18:27:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Denial of service by double-checked locking in openssl-src]]></title>
        <id>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</id>
        <link href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r"/>
        <updated>2024-10-02T18:03:45.000Z</updated>
        <content type="html"><![CDATA[<p>If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the <code>-policy' argument to the command line utilities or by calling either </code>X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3996">https://nvd.nist.gov/vuln/detail/CVE-2022-3996</a></li>
<li><a href="https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7">https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r">https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T18:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cocoon] cocoon Reuses a Nonce, Key Pair in Encryption]]></title>
        <id>https://github.com/advisories/GHSA-r2jw-c95q-rj29</id>
        <link href="https://github.com/advisories/GHSA-r2jw-c95q-rj29"/>
        <updated>2024-10-02T17:57:50.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package cocoon before 0.4.0 are vulnerable to Reusing a Nonce, Key Pair in Encryption when the encrypt, wrap, and dump functions are sequentially called. An attacker can generate the same ciphertext by creating a new encrypted message with the same cocoon object.</p>
<p><strong>Note:</strong>
The issue does NOT affect objects created with Cocoon::new which utilizes ThreadRng.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21530">https://nvd.nist.gov/vuln/detail/CVE-2024-21530</a></li>
<li><a href="https://github.com/fadeevab/cocoon/issues/22">https://github.com/fadeevab/cocoon/issues/22</a></li>
<li><a href="https://github.com/fadeevab/cocoon/commit/1b6392173ce35db4736a94b62b2d2973f9a71441">https://github.com/fadeevab/cocoon/commit/1b6392173ce35db4736a94b62b2d2973f9a71441</a></li>
<li><a href="https://github.com/advisories/GHSA-6878-6wc2-pf5h">https://github.com/advisories/GHSA-6878-6wc2-pf5h</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0068.html">https://rustsec.org/advisories/RUSTSEC-2023-0068.html</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-COCOON-6028364">https://security.snyk.io/vuln/SNYK-RUST-COCOON-6028364</a></li>
<li><a href="https://github.com/advisories/GHSA-r2jw-c95q-rj29">https://github.com/advisories/GHSA-r2jw-c95q-rj29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r2jw-c95q-rj29</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-02T06:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tonic] Tonic has remotely exploitable denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4jwc-w2hc-78qv</id>
        <link href="https://github.com/advisories/GHSA-4jwc-w2hc-78qv"/>
        <updated>2024-10-02T16:20:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><strong>note:</strong> this only affects v0.12.0 - v0.12.2</p>
<p>When using <code>tonic::transport::Server</code> there is a remote DoS attack that can cause the server to exit cleanly on accepting a tcp/tls stream. This can be triggered via causing the accept call to error out with errors there were not covered correctly causing the accept loop to exit. </p>
<p>More information can be found <a href="https://github.com/hyperium/tonic/issues/1897">here</a></p>
<h3 id="patches">Patches</h3>
<p>Upgrading to tonic <code>0.12.3</code> and above contains the fix. </p>
<h3 id="workarounds">Workarounds</h3>
<p>A custom accept loop is a possible workaround.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperium/tonic/security/advisories/GHSA-4jwc-w2hc-78qv">https://github.com/hyperium/tonic/security/advisories/GHSA-4jwc-w2hc-78qv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47609">https://nvd.nist.gov/vuln/detail/CVE-2024-47609</a></li>
<li><a href="https://github.com/hyperium/tonic/issues/1897">https://github.com/hyperium/tonic/issues/1897</a></li>
<li><a href="https://github.com/hyperium/tonic/commit/a4472a86f3290e60c7c01348b7e6a8164d6e7e48">https://github.com/hyperium/tonic/commit/a4472a86f3290e60c7c01348b7e6a8164d6e7e48</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0376.html">https://rustsec.org/advisories/RUSTSEC-2024-0376.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4jwc-w2hc-78qv">https://github.com/advisories/GHSA-4jwc-w2hc-78qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4jwc-w2hc-78qv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T22:27:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sqlite-vec] Heap-based Buffer Overflow in sqlite-vec]]></title>
        <id>https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</id>
        <link href="https://github.com/advisories/GHSA-vrcx-gx3g-j3h8"/>
        <updated>2024-10-02T21:16:02.000Z</updated>
        <content type="html"><![CDATA[<p>sqlite-vec v0.1.1 was discovered to contain a heap buffer overflow via the npy_token_next function. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46488">https://nvd.nist.gov/vuln/detail/CVE-2024-46488</a></li>
<li><a href="https://github.com/VulnSphere/LLMVulnSphere/blob/main/VectorDB/sqlite-vec/OOBR_2.md">https://github.com/VulnSphere/LLMVulnSphere/blob/main/VectorDB/sqlite-vec/OOBR_2.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vrcx-gx3g-j3h8">https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</a></li>
<li><a href="https://github.com/asg017/sqlite-vec/releases/tag/v0.1.3">https://github.com/asg017/sqlite-vec/releases/tag/v0.1.3</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sqlite-vec/CVE-2024-46488.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/sqlite-vec/CVE-2024-46488.yml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrcx-gx3g-j3h8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-25T18:31:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ouch] Ouch! allows a segmentation fault due to use of uninitialized memory]]></title>
        <id>https://github.com/advisories/GHSA-2wq5-g96f-mv3v</id>
        <link href="https://github.com/advisories/GHSA-2wq5-g96f-mv3v"/>
        <updated>2024-09-23T20:47:28.000Z</updated>
        <content type="html"><![CDATA[<p>When trying to decompress a file using "ouch", we can reach the function "ouch::archive::zip::convert_zip_date_time". In the function, there is a unsafe function, "transmute". Once the "transmute" function is called to convert the type of "month" object, the address of the object is changed to the uninitialized memory region. After that, when other function tries to dereference "month", segmentation fault occurs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ouch-org/ouch/issues/707">https://github.com/ouch-org/ouch/issues/707</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0374.html">https://rustsec.org/advisories/RUSTSEC-2024-0374.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2wq5-g96f-mv3v">https://github.com/advisories/GHSA-2wq5-g96f-mv3v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2wq5-g96f-mv3v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-23T20:47:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lexical-core] lexical-core has multiple soundness issues]]></title>
        <id>https://github.com/advisories/GHSA-2326-pfpj-vx3h</id>
        <link href="https://github.com/advisories/GHSA-2326-pfpj-vx3h"/>
        <updated>2024-09-16T17:19:02.000Z</updated>
        <content type="html"><![CDATA[<p><code>RUSTSEC-2024-0377</code> contains multiple soundness issues:</p>
<ol>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">Bytes::read() allows creating instances of types with invalid bit patterns</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">BytesIter::read() advances iterators out of bounds</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">The <code>BytesIter</code> trait has safety invariants but is public and not marked <code>unsafe</code></a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95"><code>write_float()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126"><code>radix()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
</ol>
<p>Version 1.0 fixes these issues, removes the vast majority of <code>unsafe</code> code, and also fixes some correctness issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">https://github.com/Alexhuszagh/rust-lexical/issues/101</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">https://github.com/Alexhuszagh/rust-lexical/issues/102</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">https://github.com/Alexhuszagh/rust-lexical/issues/104</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126">https://github.com/Alexhuszagh/rust-lexical/issues/126</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95">https://github.com/Alexhuszagh/rust-lexical/issues/95</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4">https://github.com/advisories/GHSA-c2hm-mjxv-89r4</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0055">https://rustsec.org/advisories/RUSTSEC-2023-0055</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0086.html">https://rustsec.org/advisories/RUSTSEC-2023-0086.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2326-pfpj-vx3h">https://github.com/advisories/GHSA-2326-pfpj-vx3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2326-pfpj-vx3h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T17:19:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lexical] Multiple soundness issues in lexical]]></title>
        <id>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</id>
        <link href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4"/>
        <updated>2024-09-16T16:50:15.000Z</updated>
        <content type="html"><![CDATA[<p><code>lexical</code> contains multiple soundness issues:</p>
<ol>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">Bytes::read() allows creating instances of types with invalid bit patterns</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">BytesIter::read() advances iterators out of bounds</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">The <code>BytesIter</code> trait has safety invariants but is public and not marked <code>unsafe</code></a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95"><code>write_float()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126"><code>radix()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
</ol>
<p>The crate also has some correctness issues.</p>
<h2 id="alternatives">Alternatives</h2>
<p>For quickly parsing floating-point numbers third-party crates are no longer needed. A fast float parsing algorithm by the author of <code>lexical</code> has been <a href="https://github.com/rust-lang/rust/pull/86761">merged</a> into libcore.</p>
<p>For quickly parsing integers, consider <code>atoi</code> and <code>btoi</code> crates (100% safe code). <code>atoi_radix10</code> provides even faster parsing, but only with <code>-C target-cpu=native</code>, and at the cost of some <code>unsafe</code>.</p>
<p>For formatting integers in a <code>#[no_std]</code> context consider the <a href="https://crates.io/crates/numtoa"><code>numtoa</code></a> crate.</p>
<p>For working with big numbers consider <code>num-bigint</code> and <code>num-traits</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Alexhuszagh/rust-lexical">https://github.com/Alexhuszagh/rust-lexical</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0055.html">https://rustsec.org/advisories/RUSTSEC-2023-0055.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4">https://github.com/advisories/GHSA-c2hm-mjxv-89r4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-04T17:02:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[compu-brotli-sys] Integer overflow in the bundled Brotli C library]]></title>
        <id>https://github.com/advisories/GHSA-5v8v-66v8-mwm7</id>
        <link href="https://github.com/advisories/GHSA-5v8v-66v8-mwm7"/>
        <updated>2024-09-16T14:29:05.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overflow exists in the Brotli library versions prior to 1.0.8 where an attacker controlling the input length of a "one-shot" decompression request to a script can trigger a crash, which happens when copying over chunks of data larger than 2 GiB. It is recommended to update your Brotli library to 1.0.8 or later. If one cannot update, we recommend to use the "streaming" API as opposed to the "one-shot" API, and impose chunk size limits.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8927">https://nvd.nist.gov/vuln/detail/CVE-2020-8927</a></li>
<li><a href="https://github.com/google/brotli/releases/tag/v1.0.9">https://github.com/google/brotli/releases/tag/v1.0.9</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/12/msg00003.html">https://lists.debian.org/debian-lts-announce/2020/12/msg00003.html</a></li>
<li><a href="https://www.debian.org/security/2020/dsa-4801">https://www.debian.org/security/2020/dsa-4801</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-09/msg00108.html">http://lists.opensuse.org/opensuse-security-announce/2020-09/msg00108.html</a></li>
<li><a href="https://github.com/bitemyapp/brotli2-rs/issues/45">https://github.com/bitemyapp/brotli2-rs/issues/45</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0131.html">https://rustsec.org/advisories/RUSTSEC-2021-0131.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0132.html">https://rustsec.org/advisories/RUSTSEC-2021-0132.html</a></li>
<li><a href="https://github.com/github/advisory-database/issues/785">https://github.com/github/advisory-database/issues/785</a></li>
<li><a href="https://github.com/google/brotli/commit/223d80cfbec8fd346e32906c732c8ede21f0cea6">https://github.com/google/brotli/commit/223d80cfbec8fd346e32906c732c8ede21f0cea6</a></li>
<li><a href="https://usn.ubuntu.com/4568-1">https://usn.ubuntu.com/4568-1</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZXEQ3GQVELA2T4HNZG7VPMS2HDVXMJRG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZXEQ3GQVELA2T4HNZG7VPMS2HDVXMJRG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WW62OZEY2GHJL4JCOLJRBSRETXDHMWRK">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WW62OZEY2GHJL4JCOLJRBSRETXDHMWRK</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W23CUADGMVMQQNFKHPHXVP7RPZJZNN6I">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W23CUADGMVMQQNFKHPHXVP7RPZJZNN6I</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQLM7ABVCYJLF6JRPF3M3EBXW63GNC27">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQLM7ABVCYJLF6JRPF3M3EBXW63GNC27</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MMBKACMLSRX7JJSKBTR35UOEP2WFR6QP">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MMBKACMLSRX7JJSKBTR35UOEP2WFR6QP</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4VCDOJGL6BK3HB4XRD2WETBPYX2ITF6">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4VCDOJGL6BK3HB4XRD2WETBPYX2ITF6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J4E265WKWKYMK2RYYSIXBEGZTDY5IQE6">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J4E265WKWKYMK2RYYSIXBEGZTDY5IQE6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4TOGTZ2ZWDH662ZNFFSZVL3M5AJXV6JF">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4TOGTZ2ZWDH662ZNFFSZVL3M5AJXV6JF</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/356JOYTWW4BWSZ42SEFLV7NYHL3S3AEH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/356JOYTWW4BWSZ42SEFLV7NYHL3S3AEH</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/brotli/PYSEC-2020-29.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/brotli/PYSEC-2020-29.yaml</a></li>
<li><a href="https://github.com/google/brotli/releases/tag/v1.0.8">https://github.com/google/brotli/releases/tag/v1.0.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5v8v-66v8-mwm7">https://github.com/advisories/GHSA-5v8v-66v8-mwm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5v8v-66v8-mwm7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:28:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[arrayfire] Potential memory corruption in arrayfire]]></title>
        <id>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</id>
        <link href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg"/>
        <updated>2024-09-12T20:47:22.000Z</updated>
        <content type="html"><![CDATA[<p>The attribute repr() added to enums to be compatible with C-FFI caused memory corruption on MSVC toolchain.</p>
<p>arrayfire crates &lt;= version 3.5.0 do not have this issue when used with Rust versions 1.27 or earlier. The issue only started to appear since Rust version 1.28.</p>
<p>The issue seems to be interlinked with which version of Rust is being used.</p>
<p>The issue was fixed in crate 3.6.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20998">https://nvd.nist.gov/vuln/detail/CVE-2018-20998</a></li>
<li><a href="https://github.com/arrayfire/arrayfire-rust/pull/177">https://github.com/arrayfire/arrayfire-rust/pull/177</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0011.html">https://rustsec.org/advisories/RUSTSEC-2018-0011.html</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml</a></li>
<li><a href="https://github.com/arrayfire/arrayfire-rust/commit/a5256f3e5e23b83eaad69699e0b04653aba04fb8">https://github.com/arrayfire/arrayfire-rust/commit/a5256f3e5e23b83eaad69699e0b04653aba04fb8</a></li>
<li><a href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg">https://github.com/advisories/GHSA-69fv-gw6g-8ccg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:43:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
</feed>