<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-09-21T11:01:37.116Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[stack] Out-of-bounds write in stack]]></title>
        <id>https://github.com/advisories/GHSA-h45v-vgvp-3h5v</id>
        <link href="https://github.com/advisories/GHSA-h45v-vgvp-3h5v"/>
        <updated>2023-09-18T21:09:42.000Z</updated>
        <content type="html"><![CDATA[<p>ArrayVec::insert allows insertion of an element into the array object into the specified index. Due to a missing check on the upperbound of this index, it is possible to write out of bounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35895">https://nvd.nist.gov/vuln/detail/CVE-2020-35895</a></li>
<li><a href="https://github.com/arcnmx/stack-rs/issues/4">https://github.com/arcnmx/stack-rs/issues/4</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0042.html">https://rustsec.org/advisories/RUSTSEC-2020-0042.html</a></li>
<li><a href="https://github.com/arcnmx/stack-rs/commit/369e55736f9bd29c37b1712afc2923f4028148c6">https://github.com/arcnmx/stack-rs/commit/369e55736f9bd29c37b1712afc2923f4028148c6</a></li>
<li><a href="https://github.com/advisories/GHSA-h45v-vgvp-3h5v">https://github.com/advisories/GHSA-h45v-vgvp-3h5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h45v-vgvp-3h5v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:49:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[smallvec] Buffer overflow in SmallVec::insert_many]]></title>
        <id>https://github.com/advisories/GHSA-43w2-9j62-hq99</id>
        <link href="https://github.com/advisories/GHSA-43w2-9j62-hq99"/>
        <updated>2023-09-18T20:41:17.000Z</updated>
        <content type="html"><![CDATA[<p>A bug in the SmallVec::insert_many method caused it to allocate a buffer that was smaller than needed. It then wrote past the end of the buffer, causing a buffer overflow and memory corruption on the heap. This bug was only triggered if the iterator passed to insert_many yielded more items than the lower bound returned from its size_hint method.</p>
<p>The flaw was corrected in smallvec 0.6.14 and 1.6.1, by ensuring that additional space is always reserved for each item inserted. The fix also simplified the implementation of insert_many to use less unsafe code, so it is easier to verify its correctness.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25900">https://nvd.nist.gov/vuln/detail/CVE-2021-25900</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0003.html">https://rustsec.org/advisories/RUSTSEC-2021-0003.html</a></li>
<li><a href="https://github.com/servo/rust-smallvec/issues/252">https://github.com/servo/rust-smallvec/issues/252</a></li>
<li><a href="https://github.com/servo/rust-smallvec/commit/5757ac500d4e544485d796b542e4e589749c291b">https://github.com/servo/rust-smallvec/commit/5757ac500d4e544485d796b542e4e589749c291b</a></li>
<li><a href="https://github.com/servo/rust-smallvec/commit/9998ba0694a6b51aa6604748b00b6a98f0a0039e">https://github.com/servo/rust-smallvec/commit/9998ba0694a6b51aa6604748b00b6a98f0a0039e</a></li>
<li><a href="https://github.com/advisories/GHSA-43w2-9j62-hq99">https://github.com/advisories/GHSA-43w2-9j62-hq99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43w2-9j62-hq99</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:40:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[smallvec] Buffer overflow in SmallVec::insert_many]]></title>
        <id>https://github.com/advisories/GHSA-43w2-9j62-hq99</id>
        <link href="https://github.com/advisories/GHSA-43w2-9j62-hq99"/>
        <updated>2023-09-18T20:41:17.000Z</updated>
        <content type="html"><![CDATA[<p>A bug in the SmallVec::insert_many method caused it to allocate a buffer that was smaller than needed. It then wrote past the end of the buffer, causing a buffer overflow and memory corruption on the heap. This bug was only triggered if the iterator passed to insert_many yielded more items than the lower bound returned from its size_hint method.</p>
<p>The flaw was corrected in smallvec 0.6.14 and 1.6.1, by ensuring that additional space is always reserved for each item inserted. The fix also simplified the implementation of insert_many to use less unsafe code, so it is easier to verify its correctness.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-25900">https://nvd.nist.gov/vuln/detail/CVE-2021-25900</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0003.html">https://rustsec.org/advisories/RUSTSEC-2021-0003.html</a></li>
<li><a href="https://github.com/servo/rust-smallvec/issues/252">https://github.com/servo/rust-smallvec/issues/252</a></li>
<li><a href="https://github.com/servo/rust-smallvec/commit/5757ac500d4e544485d796b542e4e589749c291b">https://github.com/servo/rust-smallvec/commit/5757ac500d4e544485d796b542e4e589749c291b</a></li>
<li><a href="https://github.com/servo/rust-smallvec/commit/9998ba0694a6b51aa6604748b00b6a98f0a0039e">https://github.com/servo/rust-smallvec/commit/9998ba0694a6b51aa6604748b00b6a98f0a0039e</a></li>
<li><a href="https://github.com/advisories/GHSA-43w2-9j62-hq99">https://github.com/advisories/GHSA-43w2-9j62-hq99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43w2-9j62-hq99</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:40:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyo3] Reference counting error in pyo3]]></title>
        <id>https://github.com/advisories/GHSA-2vx6-fcw6-hpr6</id>
        <link href="https://github.com/advisories/GHSA-2vx6-fcw6-hpr6"/>
        <updated>2023-09-18T20:33:15.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the pyo3 crate before 0.12.4 for Rust. There is a reference-counting error and use-after-free in From&lt;Py&gt;.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35917">https://nvd.nist.gov/vuln/detail/CVE-2020-35917</a></li>
<li><a href="https://github.com/PyO3/pyo3/pull/1297">https://github.com/PyO3/pyo3/pull/1297</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0074.html">https://rustsec.org/advisories/RUSTSEC-2020-0074.html</a></li>
<li><a href="https://github.com/PyO3/pyo3/commit/8f81f595dd770b586c7ca7195b42004a6c976eb9">https://github.com/PyO3/pyo3/commit/8f81f595dd770b586c7ca7195b42004a6c976eb9</a></li>
<li><a href="https://github.com/advisories/GHSA-2vx6-fcw6-hpr6">https://github.com/advisories/GHSA-2vx6-fcw6-hpr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2vx6-fcw6-hpr6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:49:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libwebp-sys] libwebp: OOB write in BuildHuffmanTable]]></title>
        <id>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</id>
        <link href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr"/>
        <updated>2023-09-18T18:40:11.000Z</updated>
        <content type="html"><![CDATA[<p>Heap buffer overflow in WebP allow a remote attacker to perform an out of bounds memory write via a crafted HTML page. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-4863">https://nvd.nist.gov/vuln/detail/CVE-2023-4863</a></li>
<li><a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html">https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html</a></li>
<li><a href="https://crbug.com/1479274">https://crbug.com/1479274</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/pull/21">https://github.com/qnighy/libwebp-sys2-rs/pull/21</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b">https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b</a></li>
<li><a href="https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a">https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1215231">https://bugzilla.suse.com/show_bug.cgi?id=1215231</a></li>
<li><a href="https://en.bandisoft.com/honeyview/history/">https://en.bandisoft.com/honeyview/history/</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863</a></li>
<li><a href="https://news.ycombinator.com/item?id=37478403">https://news.ycombinator.com/item?id=37478403</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0060.html">https://rustsec.org/advisories/RUSTSEC-2023-0060.html</a></li>
<li><a href="https://security-tracker.debian.org/tracker/CVE-2023-4863">https://security-tracker.debian.org/tracker/CVE-2023-4863</a></li>
<li><a href="https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863/">https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863/</a></li>
<li><a href="https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks/">https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks/</a></li>
<li><a href="https://www.mozilla.org/en-US/security/advisories/mfsa2023-40/">https://www.mozilla.org/en-US/security/advisories/mfsa2023-40/</a></li>
<li><a href="https://github.com/electron/electron/pull/39823">https://github.com/electron/electron/pull/39823</a></li>
<li><a href="https://github.com/electron/electron/pull/39825">https://github.com/electron/electron/pull/39825</a></li>
<li><a href="https://github.com/electron/electron/pull/39826">https://github.com/electron/electron/pull/39826</a></li>
<li><a href="https://github.com/electron/electron/pull/39827">https://github.com/electron/electron/pull/39827</a></li>
<li><a href="https://github.com/electron/electron/pull/39828">https://github.com/electron/electron/pull/39828</a></li>
<li><a href="https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway/">https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway/</a></li>
<li><a href="https://github.com/webmproject/libwebp/releases/tag/v1.3.2">https://github.com/webmproject/libwebp/releases/tag/v1.3.2</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0061.html">https://rustsec.org/advisories/RUSTSEC-2023-0061.html</a></li>
<li><a href="https://security.gentoo.org/glsa/202309-05">https://security.gentoo.org/glsa/202309-05</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5496">https://www.debian.org/security/2023/dsa-5496</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5497">https://www.debian.org/security/2023/dsa-5497</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5498">https://www.debian.org/security/2023/dsa-5498</a></li>
<li><a href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr">https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-12T15:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Miscompilation of wasm `i64x2.shr_s` instruction with constant input on x86_64]]></title>
        <id>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</id>
        <link href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh"/>
        <updated>2023-09-20T19:05:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime versions from 10.0.0 to 12.0.1 contain a miscompilation of the WebAssembly <code>i64x2.shr_s</code> instruction on x86_64 platforms when the shift amount is a constant value that is larger than 32. Only x86_64 is affected so all other targets are not affected by this. The miscompilation results in the instruction producing an incorrect result, namely the low 32-bits of the second lane of the vector are derived from the low 32-bits of the second lane of the input vector instead of the high 32-bits. The primary impact of this issue is that any WebAssembly program using the <code>i64x2.shr_s</code> with a constant shift amount larger than 32 may produce an incorrect result.</p>
<p>This issue is not an escape from the WebAssembly sandbox. Execution of WebAssembly guest programs will still behave correctly with respect to memory sandboxing and isolation from the host. Wasmtime considers non-spec-compliant behavior as a security issue nonetheless.</p>
<p>This issue was discovered through fuzzing of Wasmtime's code generator Cranelift.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime versions 10.0.2, 11.0.2, and 12.0.2 are all patched to no longer have this miscompilation.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue only affects x86_64 hosts and the only workaround is to either scan for this pattern in wasm modules which is nontrivial or to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">disable the SIMD proposal for WebAssembly</a>. Users prior to 10.0.0 are unaffected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">PR which introduced this bug to Wasmtime</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/B8PJgg6bEdg">Mailing list announcement</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">https://github.com/bytecodealliance/wasmtime/pull/6372</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240">https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41880">https://nvd.nist.gov/vuln/detail/CVE-2023-41880</a></li>
<li><a href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-14T19:33:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Miscompilation of wasm `i64x2.shr_s` instruction with constant input on x86_64]]></title>
        <id>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</id>
        <link href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh"/>
        <updated>2023-09-20T19:05:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime versions from 10.0.0 to 12.0.1 contain a miscompilation of the WebAssembly <code>i64x2.shr_s</code> instruction on x86_64 platforms when the shift amount is a constant value that is larger than 32. Only x86_64 is affected so all other targets are not affected by this. The miscompilation results in the instruction producing an incorrect result, namely the low 32-bits of the second lane of the vector are derived from the low 32-bits of the second lane of the input vector instead of the high 32-bits. The primary impact of this issue is that any WebAssembly program using the <code>i64x2.shr_s</code> with a constant shift amount larger than 32 may produce an incorrect result.</p>
<p>This issue is not an escape from the WebAssembly sandbox. Execution of WebAssembly guest programs will still behave correctly with respect to memory sandboxing and isolation from the host. Wasmtime considers non-spec-compliant behavior as a security issue nonetheless.</p>
<p>This issue was discovered through fuzzing of Wasmtime's code generator Cranelift.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime versions 10.0.2, 11.0.2, and 12.0.2 are all patched to no longer have this miscompilation.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue only affects x86_64 hosts and the only workaround is to either scan for this pattern in wasm modules which is nontrivial or to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">disable the SIMD proposal for WebAssembly</a>. Users prior to 10.0.0 are unaffected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">PR which introduced this bug to Wasmtime</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/B8PJgg6bEdg">Mailing list announcement</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">https://github.com/bytecodealliance/wasmtime/pull/6372</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240">https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41880">https://nvd.nist.gov/vuln/detail/CVE-2023-41880</a></li>
<li><a href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-14T19:33:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Miscompilation of wasm `i64x2.shr_s` instruction with constant input on x86_64]]></title>
        <id>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</id>
        <link href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh"/>
        <updated>2023-09-20T19:05:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime versions from 10.0.0 to 12.0.1 contain a miscompilation of the WebAssembly <code>i64x2.shr_s</code> instruction on x86_64 platforms when the shift amount is a constant value that is larger than 32. Only x86_64 is affected so all other targets are not affected by this. The miscompilation results in the instruction producing an incorrect result, namely the low 32-bits of the second lane of the vector are derived from the low 32-bits of the second lane of the input vector instead of the high 32-bits. The primary impact of this issue is that any WebAssembly program using the <code>i64x2.shr_s</code> with a constant shift amount larger than 32 may produce an incorrect result.</p>
<p>This issue is not an escape from the WebAssembly sandbox. Execution of WebAssembly guest programs will still behave correctly with respect to memory sandboxing and isolation from the host. Wasmtime considers non-spec-compliant behavior as a security issue nonetheless.</p>
<p>This issue was discovered through fuzzing of Wasmtime's code generator Cranelift.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime versions 10.0.2, 11.0.2, and 12.0.2 are all patched to no longer have this miscompilation.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue only affects x86_64 hosts and the only workaround is to either scan for this pattern in wasm modules which is nontrivial or to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">disable the SIMD proposal for WebAssembly</a>. Users prior to 10.0.0 are unaffected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">PR which introduced this bug to Wasmtime</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/B8PJgg6bEdg">Mailing list announcement</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gw5p-q8mj-p7gh#:~:text=Mailing%20list%20announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/pull/6372">https://github.com/bytecodealliance/wasmtime/pull/6372</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240">https://github.com/bytecodealliance/wasmtime/commit/8d7eda15b0badcbea83a7aac2d08f80788b59240</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41880">https://nvd.nist.gov/vuln/detail/CVE-2023-41880</a></li>
<li><a href="https://github.com/advisories/GHSA-gw5p-q8mj-p7gh">https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw5p-q8mj-p7gh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-14T19:33:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bcder] BER/CER/DER decoder panics on invalid input]]></title>
        <id>https://github.com/advisories/GHSA-6jmw-6mxw-w4jc</id>
        <link href="https://github.com/advisories/GHSA-6jmw-6mxw-w4jc"/>
        <updated>2023-09-14T16:41:58.000Z</updated>
        <content type="html"><![CDATA[<p>NLnet Labs’ bcder library up to and including version 0.7.2 panics while decoding certain invalid input data rather than rejecting the data with an error. This can affect both the actual decoding stage as well as accessing content of types that utilized delayed decoding.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39914">https://nvd.nist.gov/vuln/detail/CVE-2023-39914</a></li>
<li><a href="https://nlnetlabs.nl/downloads/bcder/CVE-2023-39914.txt">https://nlnetlabs.nl/downloads/bcder/CVE-2023-39914.txt</a></li>
<li><a href="https://github.com/NLnetLabs/bcder/commit/4da91c3fd853e3d466d8581cf1d82b7f3255de56">https://github.com/NLnetLabs/bcder/commit/4da91c3fd853e3d466d8581cf1d82b7f3255de56</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0062.html">https://rustsec.org/advisories/RUSTSEC-2023-0062.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6jmw-6mxw-w4jc">https://github.com/advisories/GHSA-6jmw-6mxw-w4jc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jmw-6mxw-w4jc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-13T15:31:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libwebp-sys2] libwebp: OOB write in BuildHuffmanTable]]></title>
        <id>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</id>
        <link href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr"/>
        <updated>2023-09-18T18:40:11.000Z</updated>
        <content type="html"><![CDATA[<p>Heap buffer overflow in WebP allow a remote attacker to perform an out of bounds memory write via a crafted HTML page. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-4863">https://nvd.nist.gov/vuln/detail/CVE-2023-4863</a></li>
<li><a href="https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html">https://chromereleases.googleblog.com/2023/09/stable-channel-update-for-desktop_11.html</a></li>
<li><a href="https://crbug.com/1479274">https://crbug.com/1479274</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/pull/21">https://github.com/qnighy/libwebp-sys2-rs/pull/21</a></li>
<li><a href="https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b">https://github.com/qnighy/libwebp-sys2-rs/commit/4560c473a76ec8bd8c650f19ddf9d7a44f719f8b</a></li>
<li><a href="https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a">https://github.com/webmproject/libwebp/commit/902bc9190331343b2017211debcec8d2ab87e17a</a></li>
<li><a href="https://bugzilla.suse.com/show_bug.cgi?id=1215231">https://bugzilla.suse.com/show_bug.cgi?id=1215231</a></li>
<li><a href="https://en.bandisoft.com/honeyview/history/">https://en.bandisoft.com/honeyview/history/</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2023-4863</a></li>
<li><a href="https://news.ycombinator.com/item?id=37478403">https://news.ycombinator.com/item?id=37478403</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0060.html">https://rustsec.org/advisories/RUSTSEC-2023-0060.html</a></li>
<li><a href="https://security-tracker.debian.org/tracker/CVE-2023-4863">https://security-tracker.debian.org/tracker/CVE-2023-4863</a></li>
<li><a href="https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863/">https://stackdiary.com/critical-vulnerability-in-webp-codec-cve-2023-4863/</a></li>
<li><a href="https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks/">https://www.bleepingcomputer.com/news/google/google-fixes-another-chrome-zero-day-bug-exploited-in-attacks/</a></li>
<li><a href="https://www.mozilla.org/en-US/security/advisories/mfsa2023-40/">https://www.mozilla.org/en-US/security/advisories/mfsa2023-40/</a></li>
<li><a href="https://github.com/electron/electron/pull/39823">https://github.com/electron/electron/pull/39823</a></li>
<li><a href="https://github.com/electron/electron/pull/39825">https://github.com/electron/electron/pull/39825</a></li>
<li><a href="https://github.com/electron/electron/pull/39826">https://github.com/electron/electron/pull/39826</a></li>
<li><a href="https://github.com/electron/electron/pull/39827">https://github.com/electron/electron/pull/39827</a></li>
<li><a href="https://github.com/electron/electron/pull/39828">https://github.com/electron/electron/pull/39828</a></li>
<li><a href="https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway/">https://adamcaudill.com/2023/09/14/whose-cve-is-it-anyway/</a></li>
<li><a href="https://github.com/webmproject/libwebp/releases/tag/v1.3.2">https://github.com/webmproject/libwebp/releases/tag/v1.3.2</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00015.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00016.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html">https://lists.debian.org/debian-lts-announce/2023/09/msg00017.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6T655QF7CQ3DYAMPFV7IECQYGDEUIVVT/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/FYYKLG6CRGEDTNRBSU26EEWAO6D6U645/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/OZDGWWMJREPAGKWCJKSCM4WYLANSKIFX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PYZV7TMKF4QHZ54SFJX54BDN52VHGGCX/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WHOLML7N2G5KCAZXFWC5IDFFHSQS5SDB/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0061.html">https://rustsec.org/advisories/RUSTSEC-2023-0061.html</a></li>
<li><a href="https://security.gentoo.org/glsa/202309-05">https://security.gentoo.org/glsa/202309-05</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5496">https://www.debian.org/security/2023/dsa-5496</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5497">https://www.debian.org/security/2023/dsa-5497</a></li>
<li><a href="https://www.debian.org/security/2023/dsa-5498">https://www.debian.org/security/2023/dsa-5498</a></li>
<li><a href="https://github.com/advisories/GHSA-j7hp-h8jx-5ppr">https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-12T15:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[inventory] Inventory exposes reference to non-Sync data to an arbitrary thread]]></title>
        <id>https://github.com/advisories/GHSA-36xm-35qq-795w</id>
        <link href="https://github.com/advisories/GHSA-36xm-35qq-795w"/>
        <updated>2023-09-11T20:44:12.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions do not enforce a <code>Sync</code> bound on the type of caller-provided value held in the plugin registry. References to these values are made accessible to arbitrary threads other than the one that constructed them.</p>
<p>A caller could use this flaw to submit thread-unsafe data into inventory, then access it as a reference simultaneously from multiple threads.</p>
<p>The flaw was corrected by enforcing that data submitted by the caller into inventory is <code>Sync</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dtolnay/inventory/pull/42">https://github.com/dtolnay/inventory/pull/42</a></li>
<li><a href="https://github.com/dtolnay/inventory/commit/e1e347d2725b9c9dd4a70b63eb08532ca9687652">https://github.com/dtolnay/inventory/commit/e1e347d2725b9c9dd4a70b63eb08532ca9687652</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0058.html">https://rustsec.org/advisories/RUSTSEC-2023-0058.html</a></li>
<li><a href="https://github.com/advisories/GHSA-36xm-35qq-795w">https://github.com/advisories/GHSA-36xm-35qq-795w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-36xm-35qq-795w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-11T20:43:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[users] Users vulnerable to unaligned read of `*const *const c_char` pointer]]></title>
        <id>https://github.com/advisories/GHSA-jcr6-4frq-9gjj</id>
        <link href="https://github.com/advisories/GHSA-jcr6-4frq-9gjj"/>
        <updated>2023-09-13T14:04:08.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions dereference a potentially unaligned pointer. The pointer is commonly unaligned in practice, resulting in undefined behavior.</p>
<p>In some build modes, this is observable as a panic followed by abort. In other build modes the UB may manifest in some other way, including the possibility of working correctly in some architectures.</p>
<p>The crate is not currently maintained, so a patched version is not available.</p>
<h2 id="recommended-alternatives">Recommended alternatives</h2>
<ul>
<li><a href="https://crates.io/crates/uzers"><code>uzers</code></a> (an actively maintained fork of the <code>users</code> crate)</li>
<li><a href="https://crates.io/crates/sysinfo"><code>sysinfo</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ogham/rust-users/issues/55">https://github.com/ogham/rust-users/issues/55</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0059.html">https://rustsec.org/advisories/RUSTSEC-2023-0059.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jcr6-4frq-9gjj">https://github.com/advisories/GHSA-jcr6-4frq-9gjj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jcr6-4frq-9gjj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-11T20:43:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[inventory] Inventory fails to prohibit standard library access prior to initialization of Rust standard library runtime]]></title>
        <id>https://github.com/advisories/GHSA-ghc8-5cgm-5rpf</id>
        <link href="https://github.com/advisories/GHSA-ghc8-5cgm-5rpf"/>
        <updated>2023-09-11T20:44:11.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions allow arbitrary caller-provided code to execute before the lifetime of <code>main</code>.</p>
<p>If the caller-provided code accesses particular pieces of the standard library that require an initialized Rust runtime, such as <code>std::io</code> or <code>std::thread</code>, these may not behave as documented. Panics are likely; UB is possible.</p>
<p>The flaw was corrected by enforcing that only code written within the <code>inventory</code> crate, which is guaranteed not to access runtime-dependent parts of the standard library, runs before <code>main</code>. Caller-provided code is restricted to running at compile time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dtolnay/inventory/pull/43">https://github.com/dtolnay/inventory/pull/43</a></li>
<li><a href="https://github.com/dtolnay/inventory/commit/b853350a3800e38d2cb9950355b80bc8b8d3959c">https://github.com/dtolnay/inventory/commit/b853350a3800e38d2cb9950355b80bc8b8d3959c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0057.html">https://rustsec.org/advisories/RUSTSEC-2023-0057.html</a></li>
<li><a href="https://github.com/advisories/GHSA-ghc8-5cgm-5rpf">https://github.com/advisories/GHSA-ghc8-5cgm-5rpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ghc8-5cgm-5rpf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-11T20:43:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apollo-router] Apollo Router Unnamed "Subscription" operation results in Denial-of-Service]]></title>
        <id>https://github.com/advisories/GHSA-w8vq-3hf9-xppx</id>
        <link href="https://github.com/advisories/GHSA-w8vq-3hf9-xppx"/>
        <updated>2023-09-08T21:04:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a Denial-of-Service (DoS) type vulnerability which causes the Router to panic and terminate when GraphQL Subscriptions are enabled.  It can be triggered when <strong>all of the following conditions are met</strong>:</p>
<ol>
<li>Running Apollo Router v1.28.0, v1.28.1 or v1.29.0 ("impacted versions"); <strong>and</strong></li>
<li>The Supergraph schema provided to the Router (either via Apollo Uplink or explicitly via other configuration)&nbsp;<strong>has a <code>subscription</code> type</strong> with root-fields defined; <strong>and</strong></li>
<li>The YAML configuration provided to the Router <strong>has subscriptions enabled</strong> (they are <em>disabled</em> by default), either by setting <code>enabled: true</code> <em>or</em> by setting a valid <code>mode</code> within the <code>subscriptions</code> object (as seen in <a href="https://www.apollographql.com/docs/router/executing-operations/subscription-support/#router-setup">subscriptions' documentation</a>); <strong>and</strong></li>
<li>An <a href="https://spec.graphql.org/draft/#sec-Anonymous-Operation-Definitions">anonymous</a> (i.e., un-named) <code>subscription</code> operation (e.g., <code>subscription { ... }</code>) is received by the Router</li>
</ol>
<p>If <strong>all four</strong> of these criteria are met, the impacted versions will panic and terminate.  There is no data-privacy risk or sensitive-information exposure aspect to this vulnerability.</p>
<p>Depending on the environment in which impacted versions are running and the high-availability characteristics of that environment, a single Router's termination may result in limited or reduced availability or other knock-on effects which are deployment-specific (e.g., depending on if there are multiple instances, auto-restart policies, etc.)</p>
<h3 id="discovery">Discovery</h3>
<p>This vulnerability was discovered by an internal Apollo team.  We have no reports or evidence to support that that has been exploited outside of our own testing, research and follow-up.</p>
<p>Our public security policy can be reviewed at <a href="https://github.com/apollographql/router/security/policy">https://github.com/apollographql/router/security/policy</a> and we consider the security of our projects a top priority.  Please review the linked policy for more details.</p>
<h3 id="patches">Patches</h3>
<p>This is fixed in <a href="https://github.com/apollographql/router/releases/tag/v1.29.1">Apollo Router v1.29.1</a>, which is available on:</p>
<ul>
<li><a href="https://github.com/apollographql/router/releases">GitHub Releases</a> as <code>v1.29.1</code></li>
<li><a href="https://github.com/apollographql/router/pkgs/container/router">GitHub Packages Container Registry</a> as <code>v1.29.1</code></li>
<li><a href="https://github.com/apollographql/router/pkgs/container/helm-charts%2Frouter">Helm Chart Repository</a> as <code>1.29.1</code> (without the <code>v</code>)</li>
</ul>
<p>We recommend all users running the impacted configuration above to update to a patched version of the Router immediately.  Router v1.29.1 should be a very simple upgrade from any impacted version. </p>
<h3 id="workarounds">Workarounds</h3>
<p>Updating to v1.29.1 should be a clear and simple upgrade path for those running impacted versions.  However, if Subscriptions are <strong>not</strong> necessary for your Graph – but are enabled via configuration — then disabling subscriptions is another option to mitigate the risk.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/apollographql/router">the <code>router</code> repository</a></li>
<li>Email us at <code>security</code> <code>[at]</code> <code>apollographql</code> <code>[dot]</code> <code>com</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apollographql/router/security/advisories/GHSA-w8vq-3hf9-xppx">https://github.com/apollographql/router/security/advisories/GHSA-w8vq-3hf9-xppx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41317">https://nvd.nist.gov/vuln/detail/CVE-2023-41317</a></li>
<li><a href="https://github.com/apollographql/router/commit/b295c103dd86c57c848397d32e8094edfa8502aa">https://github.com/apollographql/router/commit/b295c103dd86c57c848397d32e8094edfa8502aa</a></li>
<li><a href="https://github.com/apollographql/router/releases/tag/v1.29.1">https://github.com/apollographql/router/releases/tag/v1.29.1</a></li>
<li><a href="https://github.com/advisories/GHSA-w8vq-3hf9-xppx">https://github.com/advisories/GHSA-w8vq-3hf9-xppx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w8vq-3hf9-xppx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-07T12:58:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpki] webpki: CPU denial of service in certificate path building]]></title>
        <id>https://github.com/advisories/GHSA-8qv2-5vq6-g2g7</id>
        <link href="https://github.com/advisories/GHSA-8qv2-5vq6-g2g7"/>
        <updated>2023-09-06T17:41:03.000Z</updated>
        <content type="html"><![CDATA[<p>When this crate is given a pathological certificate chain to validate, it will spend CPU time exponential with the number of candidate certificates at each step of path building.</p>
<p>Both TLS clients and TLS servers that accept client certificate are affected.</p>
<p>This was previously reported in <a href="https://github.com/briansmith/webpki/issues/69">https://github.com/briansmith/webpki/issues/69</a>.</p>
<p><code>rustls-webpki</code> is a fork of this crate which contains a fix for this issue and is actively maintained.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/crypto-com/sgx-vendor">https://github.com/crypto-com/sgx-vendor</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0052.html">https://rustsec.org/advisories/RUSTSEC-2023-0052.html</a></li>
<li><a href="https://github.com/briansmith/webpki/issues/69">https://github.com/briansmith/webpki/issues/69</a></li>
<li><a href="https://github.com/briansmith/webpki/issues/69#issuecomment-1699894848">https://github.com/briansmith/webpki/issues/69#issuecomment-1699894848</a></li>
<li><a href="https://github.com/briansmith/webpki/commit/30a108e0802fd09585e0d071013f24b8272d139b">https://github.com/briansmith/webpki/commit/30a108e0802fd09585e0d071013f24b8272d139b</a></li>
<li><a href="https://github.com/advisories/GHSA-8qv2-5vq6-g2g7">https://github.com/advisories/GHSA-8qv2-5vq6-g2g7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qv2-5vq6-g2g7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-25T00:12:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src NULL pointer Dereference in signature_algorithms processing]]></title>
        <id>https://github.com/advisories/GHSA-83mx-573x-5rw9</id>
        <link href="https://github.com/advisories/GHSA-83mx-573x-5rw9"/>
        <updated>2023-09-05T14:49:34.000Z</updated>
        <content type="html"><![CDATA[<p>An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3449">https://nvd.nist.gov/vuln/detail/CVE-2021-3449</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-772220.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-772220.pdf</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fb9fa6b51defd48157eeb207f52181f735d96148">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fb9fa6b51defd48157eeb207f52181f735d96148</a></li>
<li><a href="https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44845">https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44845</a></li>
<li><a href="https://kc.mcafee.com/corporate/index?page=content&amp;id=SB10356">https://kc.mcafee.com/corporate/index?page=content&amp;id=SB10356</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/CCBFLLVQVILIVGZMBJL3IXZGKWQISYNP/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/CCBFLLVQVILIVGZMBJL3IXZGKWQISYNP/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0013">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2021-0013</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0055">https://rustsec.org/advisories/RUSTSEC-2021-0055</a></li>
<li><a href="https://security.FreeBSD.org/advisories/FreeBSD-SA-21:07.openssl.asc">https://security.FreeBSD.org/advisories/FreeBSD-SA-21:07.openssl.asc</a></li>
<li><a href="https://security.gentoo.org/glsa/202103-03">https://security.gentoo.org/glsa/202103-03</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210326-0006/">https://security.netapp.com/advisory/ntap-20210326-0006/</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0002/">https://security.netapp.com/advisory/ntap-20210513-0002/</a></li>
<li><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-2021-GHY28dJd">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-2021-GHY28dJd</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-4875">https://www.debian.org/security/2021/dsa-4875</a></li>
<li><a href="https://www.openssl.org/news/secadv/20210325.txt">https://www.openssl.org/news/secadv/20210325.txt</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-05">https://www.tenable.com/security/tns-2021-05</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-06">https://www.tenable.com/security/tns-2021-06</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-09">https://www.tenable.com/security/tns-2021-09</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-10">https://www.tenable.com/security/tns-2021-10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/03/27/1">http://www.openwall.com/lists/oss-security/2021/03/27/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/03/27/2">http://www.openwall.com/lists/oss-security/2021/03/27/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/03/28/3">http://www.openwall.com/lists/oss-security/2021/03/28/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/03/28/4">http://www.openwall.com/lists/oss-security/2021/03/28/4</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/08/msg00029.html">https://lists.debian.org/debian-lts-announce/2021/08/msg00029.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0055.html">https://rustsec.org/advisories/RUSTSEC-2021-0055.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-83mx-573x-5rw9">https://github.com/advisories/GHSA-83mx-573x-5rw9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-83mx-573x-5rw9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:54:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lexical] Multiple soundness issues in lexical]]></title>
        <id>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</id>
        <link href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4"/>
        <updated>2023-09-04T17:02:00.000Z</updated>
        <content type="html"><![CDATA[<p><code>lexical</code> contains multiple soundness issues:</p>
<ol>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">Bytes::read() allows creating instances of types with invalid bit patterns</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">BytesIter::read() advances iterators out of bounds</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">The <code>BytesIter</code> trait has safety invariants but is public and not marked <code>unsafe</code></a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95"><code>write_float()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
</ol>
<p>The crate also has some correctness issues and appears to be unmaintained.</p>
<h2 id="alternatives">Alternatives</h2>
<p>For quickly parsing floating-point numbers third-party crates are no longer needed. A fast float parsing algorith by the author of <code>lexical</code> has been <a href="https://github.com/rust-lang/rust/pull/86761">merged</a> into libcore.</p>
<p>For quickly parsing integers, consider <code>atoi</code> and <code>btoi</code> crates (100% safe code). <code>atoi_radix10</code> provides even faster parsing, but only with <code>-C target-cpu=native</code>, and at the cost of some <code>unsafe</code>.</p>
<p>For formatting integers in a <code>#[no_std]</code> context consider the <a href="https://crates.io/crates/numtoa"><code>numtoa</code></a> crate.</p>
<p>For working with big numbers consider <code>num-bigint</code> and <code>num-traits</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Alexhuszagh/rust-lexical">https://github.com/Alexhuszagh/rust-lexical</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0055.html">https://rustsec.org/advisories/RUSTSEC-2023-0055.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4">https://github.com/advisories/GHSA-c2hm-mjxv-89r4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-04T17:02:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vm-memory] Default functions in VolatileMemory trait lack bounds checks, potentially leading to out-of-bounds memory accesses]]></title>
        <id>https://github.com/advisories/GHSA-49hh-fprx-m68g</id>
        <link href="https://github.com/advisories/GHSA-49hh-fprx-m68g"/>
        <updated>2023-09-07T21:19:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue was discovered in the default implementations of the <code>VolatileMemory::{get_atomic_ref, aligned_as_ref, aligned_as_mut, get_ref, get_array_ref}</code> trait functions, which allows out-of-bounds memory access if the <code>VolatileMemory::get_slice</code> function returns a <code>VolatileSlice</code> whose length is less than the function’s <code>count</code> argument. No implementations of <code>get_slice</code> provided in <code>vm_memory</code> are affected. Users of custom <code>VolatileMemory</code> implementations may be impacted if the custom implementation does not adhere to <code>get_slice</code>'s documentation.</p>
<h3 id="patches">Patches</h3>
<p>The issue started in version 0.1.0 but was fixed in version 0.12.2 by inserting a check that verifies that the <code>VolatileSlice</code> returned by <code>get_slice</code> is of the correct length.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Not Required</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8">https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8</a>
<a href="https://crates.io/crates/vm-memory/0.12.2">https://crates.io/crates/vm-memory/0.12.2</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rust-vmm/vm-memory/security/advisories/GHSA-49hh-fprx-m68g">https://github.com/rust-vmm/vm-memory/security/advisories/GHSA-49hh-fprx-m68g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41051">https://nvd.nist.gov/vuln/detail/CVE-2023-41051</a></li>
<li><a href="https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8">https://github.com/rust-vmm/vm-memory/commit/aff1dd4a5259f7deba56692840f7a2d9ca34c9c8</a></li>
<li><a href="https://crates.io/crates/vm-memory/0.12.2">https://crates.io/crates/vm-memory/0.12.2</a></li>
<li><a href="https://github.com/rust-vmm/vm-memory/issues/250">https://github.com/rust-vmm/vm-memory/issues/250</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0056.html">https://rustsec.org/advisories/RUSTSEC-2023-0056.html</a></li>
<li><a href="https://github.com/advisories/GHSA-49hh-fprx-m68g">https://github.com/advisories/GHSA-49hh-fprx-m68g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-49hh-fprx-m68g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-04T16:35:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lzf] Invalid use of `mem::uninitialized` causes `use-of-uninitialized-value`]]></title>
        <id>https://github.com/advisories/GHSA-5m39-wx2q-mxg3</id>
        <link href="https://github.com/advisories/GHSA-5m39-wx2q-mxg3"/>
        <updated>2023-08-25T00:12:30.000Z</updated>
        <content type="html"><![CDATA[<p>The compression and decompression function used <code>mem:uninitialized</code> to create an array of uninitialized values, to later write values into it. This later leads to reads from uninitialized memory.</p>
<p>The flaw was corrected in commit b633bf265e41c60dfce3be7eac4e4dd5e18d06cf by using a heap-allocated <code>Vec</code> and removing out use of <code>mem::uninitialized</code>. The fix was released in v0.3.2 and v1.0.0</p>
<p>Subsequently, the crate was deprecated and its use is discouraged.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/badboy/lzf-rs/issues/9">https://github.com/badboy/lzf-rs/issues/9</a></li>
<li><a href="https://github.com/badboy/lzf-rs/commit/b633bf265e41c60dfce3be7eac4e4dd5e18d06cf">https://github.com/badboy/lzf-rs/commit/b633bf265e41c60dfce3be7eac4e4dd5e18d06cf</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0067.html">https://rustsec.org/advisories/RUSTSEC-2022-0067.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5m39-wx2q-mxg3">https://github.com/advisories/GHSA-5m39-wx2q-mxg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5m39-wx2q-mxg3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-08T21:42:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sodiumoxide] Incorrect Comparison in sodiumoxide]]></title>
        <id>https://github.com/advisories/GHSA-wrvc-72w7-xpmj</id>
        <link href="https://github.com/advisories/GHSA-wrvc-72w7-xpmj"/>
        <updated>2023-08-25T00:12:29.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the sodiumoxide crate starting with 0.2.0 and prior to 0.2.5 for Rust. <code>generichash::Digest::eq</code> compares itself to itself and thus has degenerate security properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25002">https://nvd.nist.gov/vuln/detail/CVE-2019-25002</a></li>
<li><a href="https://github.com/sodiumoxide/sodiumoxide/pull/381">https://github.com/sodiumoxide/sodiumoxide/pull/381</a></li>
<li><a href="https://github.com/sodiumoxide/sodiumoxide/pull/381/commits/fae052b834b097ced9a89a8fff8466e18f383070">https://github.com/sodiumoxide/sodiumoxide/pull/381/commits/fae052b834b097ced9a89a8fff8466e18f383070</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0026.html">https://rustsec.org/advisories/RUSTSEC-2019-0026.html</a></li>
<li><a href="https://github.com/sodiumoxide/sodiumoxide/commit/38490723927f230498adf795153e6cd3cb08b6a8">https://github.com/sodiumoxide/sodiumoxide/commit/38490723927f230498adf795153e6cd3cb08b6a8</a></li>
<li><a href="https://github.com/advisories/GHSA-wrvc-72w7-xpmj">https://github.com/advisories/GHSA-wrvc-72w7-xpmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrvc-72w7-xpmj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:45:54.000Z</published>
    </entry>
</feed>