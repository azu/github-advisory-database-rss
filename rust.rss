<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-05-07T00:18:55.924Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Infinite loop in `BN_mod_sqrt()` reachable when parsing certificates]]></title>
        <id>https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</id>
        <link href="https://github.com/advisories/GHSA-x3mh-jvjw-3xwx"/>
        <updated>2022-05-03T20:40:35.000Z</updated>
        <content type="html"><![CDATA[<p>The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0778">https://nvd.nist.gov/vuln/detail/CVE-2022-0778</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=3118eb64934499d93db3230748a452351d1d9a65">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=3118eb64934499d93db3230748a452351d1d9a65</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=380085481c64de749a6dd25cdf0bcf4360b30f83">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=380085481c64de749a6dd25cdf0bcf4360b30f83</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a466912611aa6cbdf550cd10601390e587451246">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a466912611aa6cbdf550cd10601390e587451246</a></li>
<li><a href="https://www.openssl.org/news/secadv/20220315.txt">https://www.openssl.org/news/secadv/20220315.txt</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/03/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/03/msg00023.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/03/msg00024.html">https://lists.debian.org/debian-lts-announce/2022/03/msg00024.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5103">https://www.debian.org/security/2022/dsa-5103</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220321-0002/">https://security.netapp.com/advisory/ntap-20220321-0002/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GDB3GQVJPXJE7X5C5JN6JAA4XUDWD6E6/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GDB3GQVJPXJE7X5C5JN6JAA4XUDWD6E6/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0002">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0002</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-06">https://www.tenable.com/security/tns-2022-06</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-07">https://www.tenable.com/security/tns-2022-07</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/323SNN6ZX7PRJJWP2BUAFLPUAE42XWLZ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/323SNN6ZX7PRJJWP2BUAFLPUAE42XWLZ/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W6K3PR542DXWLEFFMFIDMME4CWMHJRMG/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W6K3PR542DXWLEFFMFIDMME4CWMHJRMG/</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-08">https://www.tenable.com/security/tns-2022-08</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0014.html">https://rustsec.org/advisories/RUSTSEC-2022-0014.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220429-0005/">https://security.netapp.com/advisory/ntap-20220429-0005/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-09">https://www.tenable.com/security/tns-2022-09</a></li>
<li><a href="https://github.com/advisories/GHSA-x3mh-jvjw-3xwx">https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</uri>
        </author>
        <published>2022-03-16T00:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Infinite loop in `BN_mod_sqrt()` reachable when parsing certificates]]></title>
        <id>https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</id>
        <link href="https://github.com/advisories/GHSA-x3mh-jvjw-3xwx"/>
        <updated>2022-05-03T20:40:35.000Z</updated>
        <content type="html"><![CDATA[<p>The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0778">https://nvd.nist.gov/vuln/detail/CVE-2022-0778</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=3118eb64934499d93db3230748a452351d1d9a65">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=3118eb64934499d93db3230748a452351d1d9a65</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=380085481c64de749a6dd25cdf0bcf4360b30f83">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=380085481c64de749a6dd25cdf0bcf4360b30f83</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a466912611aa6cbdf550cd10601390e587451246">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a466912611aa6cbdf550cd10601390e587451246</a></li>
<li><a href="https://www.openssl.org/news/secadv/20220315.txt">https://www.openssl.org/news/secadv/20220315.txt</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/03/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/03/msg00023.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/03/msg00024.html">https://lists.debian.org/debian-lts-announce/2022/03/msg00024.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5103">https://www.debian.org/security/2022/dsa-5103</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220321-0002/">https://security.netapp.com/advisory/ntap-20220321-0002/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GDB3GQVJPXJE7X5C5JN6JAA4XUDWD6E6/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/GDB3GQVJPXJE7X5C5JN6JAA4XUDWD6E6/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0002">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0002</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-06">https://www.tenable.com/security/tns-2022-06</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-07">https://www.tenable.com/security/tns-2022-07</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/323SNN6ZX7PRJJWP2BUAFLPUAE42XWLZ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/323SNN6ZX7PRJJWP2BUAFLPUAE42XWLZ/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W6K3PR542DXWLEFFMFIDMME4CWMHJRMG/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W6K3PR542DXWLEFFMFIDMME4CWMHJRMG/</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-08">https://www.tenable.com/security/tns-2022-08</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0014.html">https://rustsec.org/advisories/RUSTSEC-2022-0014.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220429-0005/">https://security.netapp.com/advisory/ntap-20220429-0005/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.tenable.com/security/tns-2022-09">https://www.tenable.com/security/tns-2022-09</a></li>
<li><a href="https://github.com/advisories/GHSA-x3mh-jvjw-3xwx">https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3mh-jvjw-3xwx</uri>
        </author>
        <published>2022-03-16T00:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rand_core] Unaligned memory access in rand_core]]></title>
        <id>https://github.com/advisories/GHSA-mmc9-pwm7-qj5w</id>
        <link href="https://github.com/advisories/GHSA-mmc9-pwm7-qj5w"/>
        <updated>2022-05-02T20:41:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Affected versions of this crate violated alignment when casting byte slices to integer slices, resulting in undefined behavior. <code>rand_core::BlockRng::next_u64</code> and <code>rand_core::BlockRng::fill_bytes</code> are affected.</p>
<h3 id="patches">Patches</h3>
<p>The flaw was corrected by Ralf Jung and Diggory Hardy for <code>rand_core &gt;= 0.4.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>See <a href="https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06">Rand's changelog</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, <a href="https://github.com/rust-random/rand/issues/new/choose">open an issue in the Rand repository</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rust-random/rand/security/advisories/GHSA-mmc9-pwm7-qj5w">https://github.com/rust-random/rand/security/advisories/GHSA-mmc9-pwm7-qj5w</a></li>
<li><a href="https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06">https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md#050---2019-06-06</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0035.html">https://rustsec.org/advisories/RUSTSEC-2019-0035.html</a></li>
<li><a href="https://github.com/advisories/GHSA-mmc9-pwm7-qj5w">https://github.com/advisories/GHSA-mmc9-pwm7-qj5w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmc9-pwm7-qj5w</uri>
        </author>
        <published>2021-08-25T20:56:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rand_core] Incorrect check on buffer length in rand_core]]></title>
        <id>https://github.com/advisories/GHSA-w7j2-35mf-95p7</id>
        <link href="https://github.com/advisories/GHSA-w7j2-35mf-95p7"/>
        <updated>2022-04-29T17:25:04.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the rand_core crate before 0.6.2 for Rust. Because <code>read_u32_into</code> and <code>read_u64_into</code> mishandle certain buffer-length checks, a random number generator may be seeded with too little data. The vulnerability was introduced in v0.6.0. The advisory doesn't apply to earlier minor version numbers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-27378">https://nvd.nist.gov/vuln/detail/CVE-2021-27378</a></li>
<li><a href="https://github.com/rust-random/rand/pull/1096">https://github.com/rust-random/rand/pull/1096</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0023.html">https://rustsec.org/advisories/RUSTSEC-2021-0023.html</a></li>
<li><a href="https://github.com/rust-random/rand/compare/0.6.0...rand_core-0.6.2#diff-f41b3dfa5ce28f3bee390d327c50621e141cf3569921f8e9ca15ccfcf25263a9R19">https://github.com/rust-random/rand/compare/0.6.0...rand_core-0.6.2#diff-f41b3dfa5ce28f3bee390d327c50621e141cf3569921f8e9ca15ccfcf25263a9R19</a></li>
<li><a href="https://github.com/rust-random/rand/compare/0.6.0...rand_core-0.6.2#diff-f41b3dfa5ce28f3bee390d327c50621e141cf3569921f8e9ca15ccfcf25263a9R28">https://github.com/rust-random/rand/compare/0.6.0...rand_core-0.6.2#diff-f41b3dfa5ce28f3bee390d327c50621e141cf3569921f8e9ca15ccfcf25263a9R28</a></li>
<li><a href="https://github.com/advisories/GHSA-w7j2-35mf-95p7">https://github.com/advisories/GHSA-w7j2-35mf-95p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7j2-35mf-95p7</uri>
        </author>
        <published>2021-08-25T20:52:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Exposure of Resource to Wrong Sphere in Simple-Wayland-HotKey-Daemon]]></title>
        <id>https://github.com/advisories/GHSA-h5wh-7h2j-h999</id>
        <link href="https://github.com/advisories/GHSA-h5wh-7h2j-h999"/>
        <updated>2022-04-26T13:04:23.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 consumes the keyboard events of unintended users. This could potentially cause an information leak, but is usually a denial of functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27817">https://nvd.nist.gov/vuln/detail/CVE-2022-27817</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2022/04/14/1">https://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-h5wh-7h2j-h999">https://github.com/advisories/GHSA-h5wh-7h2j-h999</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h5wh-7h2j-h999</uri>
        </author>
        <published>2022-04-15T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Exposure of Resource to Wrong Sphere in Simple-Wayland-HotKey-Daemon]]></title>
        <id>https://github.com/advisories/GHSA-x446-3xhq-5xfp</id>
        <link href="https://github.com/advisories/GHSA-x446-3xhq-5xfp"/>
        <updated>2022-04-26T13:03:53.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 allows arbitrary file-existence tests via the -c option.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27814">https://nvd.nist.gov/vuln/detail/CVE-2022-27814</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2022/04/14/1">https://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-x446-3xhq-5xfp">https://github.com/advisories/GHSA-x446-3xhq-5xfp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x446-3xhq-5xfp</uri>
        </author>
        <published>2022-04-15T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Dep Group Remote Memory Exhaustion (Denial of Service) in ckb]]></title>
        <id>https://github.com/advisories/GHSA-j35p-q24r-5367</id>
        <link href="https://github.com/advisories/GHSA-j35p-q24r-5367"/>
        <updated>2022-04-22T20:23:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A remote attacker could exploit this vulnerability to exhaust ckb process memory of an affected node.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.43.1 or later.</p>
<h3 id="references">References</h3>
<p>After resolving the outpoints of one dep group, we put the corresponding content into a vec ( <a href="https://github.com/nervosnetwork/ckb/blob/v0.42.0/util/types/src/core/cell.rs#L600-L617">https://github.com/nervosnetwork/ckb/blob/v0.42.0/util/types/src/core/cell.rs#L600-L617</a> ), there is a vulnerability to a memory dos attack because there is no determination of whether the outpoints is duplicated.</p>
<p>PoC:</p>
<pre><code>before send dos tx rss:
105700

after rss:
2306932
</code></pre>
<p>DoS cost: 25.6 KB * 150 + dep_tx out_points capacity ( 36 * 150 * 100 = 540000 ) = 4380000 CKB
Send 50 dos_tx, memory exhausted: (25.6 KB * 150  * 100) * 50 = 19.2 GB</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-j35p-q24r-5367">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-j35p-q24r-5367</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/blob/v0.42.0/util/types/src/core/cell.rs#L600-L617">https://github.com/nervosnetwork/ckb/blob/v0.42.0/util/types/src/core/cell.rs#L600-L617</a></li>
<li><a href="https://github.com/advisories/GHSA-j35p-q24r-5367">https://github.com/advisories/GHSA-j35p-q24r-5367</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j35p-q24r-5367</uri>
        </author>
        <published>2022-04-22T20:23:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[afire] Relative Path Traversal in afire serve_static]]></title>
        <id>https://github.com/advisories/GHSA-3227-r97m-8j95</id>
        <link href="https://github.com/advisories/GHSA-3227-r97m-8j95"/>
        <updated>2022-04-22T20:16:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability effects the built-in afire serve_static extension allowing paths containing <code>//....</code> to bypass the previous path sanitation and request files in higher directories that should not be accessible.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in <a href="https://crates.io/crates/afire/1.1.0">afire 1.1.0</a>.
If you can, just update to the newest version of afire.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you can't update afire you can simply disallow paths containing <code>/..</code> with the following middleware.
Make sure this is the last middleware added to the server so it runs first, stopping the bad requests.</p>
<pre><code class="language-rust">use afire::prelude::*;

struct PathTraversalFix;

impl Middleware for PathTraversalFix {
    fn pre(&amp;self, req: Request) -&gt; MiddleRequest {
        if req.path.replace("\\", "/").contains("/..") {
            return MiddleRequest::Send(
                Response::new()
                    .status(400)
                    .text("Paths containing `..` are not allowed"),
            );
        }

        MiddleRequest::Continue
    }
}
</code></pre>
<pre><code class="language-rust">let mut server = Server::new(host, port);
PathTraversalFix.attach(&amp;mut server);
</code></pre>
<h3 id="references">References</h3>
<p>You can read about the new changes to afire in 1.1.0 <a href="https://connorcode.com/writing/afire/update-3">here</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory you can email me or message me on discord.
[<a href="https://connorcode.com/contact">https://connorcode.com/contact</a>]</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Basicprogrammer10/afire/security/advisories/GHSA-3227-r97m-8j95">https://github.com/Basicprogrammer10/afire/security/advisories/GHSA-3227-r97m-8j95</a></li>
<li><a href="https://github.com/Basicprogrammer10/afire/commit/da7904c04f82e1cb43cc42eaf6a1dba072b5c921">https://github.com/Basicprogrammer10/afire/commit/da7904c04f82e1cb43cc42eaf6a1dba072b5c921</a></li>
<li><a href="https://github.com/Basicprogrammer10/afire/releases/tag/v1.1.0">https://github.com/Basicprogrammer10/afire/releases/tag/v1.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-3227-r97m-8j95">https://github.com/advisories/GHSA-3227-r97m-8j95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3227-r97m-8j95</uri>
        </author>
        <published>2022-04-22T20:16:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Insecure temporary file usage in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-r3r5-jhw6-4634</id>
        <link href="https://github.com/advisories/GHSA-r3r5-jhw6-4634"/>
        <updated>2022-04-19T18:16:59.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 unsafely uses the /tmp/swhkd.sock pathname. There can be an information leak or denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27818">https://nvd.nist.gov/vuln/detail/CVE-2022-27818</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/f70b99dd575fab79d8a942111a6980431f006818">https://github.com/waycrate/swhkd/commit/f70b99dd575fab79d8a942111a6980431f006818</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases/tag/1.1.7">https://github.com/waycrate/swhkd/releases/tag/1.1.7</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-r3r5-jhw6-4634">https://github.com/advisories/GHSA-r3r5-jhw6-4634</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3r5-jhw6-4634</uri>
        </author>
        <published>2022-04-08T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Unsafe parsing in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-h6xw-mghq-7523</id>
        <link href="https://github.com/advisories/GHSA-h6xw-mghq-7523"/>
        <updated>2022-04-15T16:14:51.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 allows unsafe parsing via the -c option. An information leak might occur but there is a simple denial of service (memory exhaustion) upon an attempt to parse a large or infinite file (such as a block or character device).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27819">https://nvd.nist.gov/vuln/detail/CVE-2022-27819</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021">https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases/tag/1.1.7">https://github.com/waycrate/swhkd/releases/tag/1.1.7</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xw-mghq-7523">https://github.com/advisories/GHSA-h6xw-mghq-7523</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xw-mghq-7523</uri>
        </author>
        <published>2022-04-08T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Insecure Temporary File in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-p4jg-pccf-h82c</id>
        <link href="https://github.com/advisories/GHSA-p4jg-pccf-h82c"/>
        <updated>2022-04-19T18:21:49.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD is a display protocol-independent hotkey daemon made in Rust. In SWHKD versions 1.1.5 and prior, SWHKD uses the /tmp/swhkd.pid pathname. As /tmp is accessible to all users, there can be an information leak or denial of service. No known workarounds exist. A patch is available on the <code>1.1.0</code> branch of the repository.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27815">https://nvd.nist.gov/vuln/detail/CVE-2022-27815</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/e661a4940df78fbb7b52c622ac4ae6a3a7f7d8aa">https://github.com/waycrate/swhkd/commit/e661a4940df78fbb7b52c622ac4ae6a3a7f7d8aa</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-p4jg-pccf-h82c">https://github.com/advisories/GHSA-p4jg-pccf-h82c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4jg-pccf-h82c</uri>
        </author>
        <published>2022-03-31T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Data Loss/Denial of Service in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-8m49-2xj8-67v9</id>
        <link href="https://github.com/advisories/GHSA-8m49-2xj8-67v9"/>
        <updated>2022-04-28T18:02:04.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 unsafely uses the /tmp/swhks.pid pathname. There can be data loss or a denial of service. A patch is available on the <code>1.1.0</code> branch of the repository.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27816">https://nvd.nist.gov/vuln/detail/CVE-2022-27816</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575">https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/advisories/GHSA-8m49-2xj8-67v9">https://github.com/advisories/GHSA-8m49-2xj8-67v9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m49-2xj8-67v9</uri>
        </author>
        <published>2022-03-31T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2022-04-12T23:16:18.000Z</updated>
        <content type="html"><![CDATA[<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>
<li><a href="https://github.com/WebAssembly/reference-types">https://github.com/WebAssembly/reference-types</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2022-04-12T23:16:18.000Z</updated>
        <content type="html"><![CDATA[<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>
<li><a href="https://github.com/WebAssembly/reference-types">https://github.com/WebAssembly/reference-types</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Sandbox bypass leading to arbitrary code execution in Deno]]></title>
        <id>https://github.com/advisories/GHSA-838h-jqp6-cf2f</id>
        <link href="https://github.com/advisories/GHSA-838h-jqp6-cf2f"/>
        <updated>2022-05-02T19:39:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The versions of Deno between release 1.18.0 and 1.20.2 (inclusive) are vulnerable to an attack where a malicious actor controlling the code executed in a Deno runtime could bypass permission checks and execute arbitrary shell code.</p>
<p>There is <strong>no</strong> evidence that this vulnerability has been exploited in the wild.</p>
<p>This vulnerability does <strong>not</strong> affect users of Deno Deploy.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in Deno 1.20.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround. All users are recommended to upgrade to 1.20.3 immediately</p>
<hr>
<p>The cause of this error was that certain FFI operations did not correctly check for permissions. The issue was fixed in <a href="https://github.com/denoland/deno/pull/14115">this</a> pull request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-838h-jqp6-cf2f">https://github.com/denoland/deno/security/advisories/GHSA-838h-jqp6-cf2f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24783">https://nvd.nist.gov/vuln/detail/CVE-2022-24783</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.20.3">https://github.com/denoland/deno/releases/tag/v1.20.3</a></li>
<li><a href="https://github.com/denoland/deno/pull/14115">https://github.com/denoland/deno/pull/14115</a></li>
<li><a href="https://github.com/advisories/GHSA-838h-jqp6-cf2f">https://github.com/advisories/GHSA-838h-jqp6-cf2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-838h-jqp6-cf2f</uri>
        </author>
        <published>2022-03-29T22:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[regex] Regular expression denial of service in Rust's regex crate]]></title>
        <id>https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</id>
        <link href="https://github.com/advisories/GHSA-m5pq-gvj9-9vr8"/>
        <updated>2022-04-20T19:12:42.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>This is a cross-post of <a href="https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw">the official security advisory</a>. The official advisory contains a signed version with our PGP key, as well.</p>
</blockquote>
<p>The Rust Security Response WG was notified that the <code>regex</code> crate did not properly limit the complexity of the regular expressions (regex) it parses. An attacker could use this security issue to perform a denial of service, by sending a specially crafted regex to a service accepting untrusted regexes. No known vulnerability is present when parsing untrusted input with trusted regexes.</p>
<p>This issue has been assigned CVE-2022-24713. The severity of this vulnerability is "high" when the <code>regex</code> crate is used to parse untrusted regexes. Other uses of the <code>regex</code> crate are not affected by this vulnerability.</p>
<h2 id="overview">Overview</h2>
<p>The <code>regex</code> crate features built-in mitigations to prevent denial of service attacks caused by untrusted regexes, or untrusted input matched by trusted regexes. Those (tunable) mitigations already provide sane defaults to prevent attacks. This guarantee is documented and it's considered part of the crate's API.</p>
<p>Unfortunately a bug was discovered in the mitigations designed to prevent untrusted regexes to take an arbitrary amount of time during parsing, and it's possible to craft regexes that bypass such mitigations. This makes it possible to perform denial of service attacks by sending specially crafted regexes to services accepting user-controlled, untrusted regexes.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>All versions of the <code>regex</code> crate before or equal to 1.5.4 are affected by this issue. The fix is include starting from  <code>regex</code> 1.5.5.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend everyone accepting user-controlled regexes to upgrade immediately to the latest version of the <code>regex</code> crate.</p>
<p>Unfortunately there is no fixed set of problematic regexes, as there are practically infinite regexes that could be crafted to exploit this vulnerability. Because of this, we do not recommend denying known problematic regexes.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Addison Crump for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>, and for helping review the fix.</p>
<p>We also want to thank Andrew Gallant for developing the fix, and Pietro Albini for coordinating the disclosure and writing this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8">https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8</a></li>
<li><a href="https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e">https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e</a></li>
<li><a href="https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw">https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24713">https://nvd.nist.gov/vuln/detail/CVE-2022-24713</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/04/msg00003.html">https://lists.debian.org/debian-lts-announce/2022/04/msg00003.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5113">https://www.debian.org/security/2022/dsa-5113</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/04/msg00009.html">https://lists.debian.org/debian-lts-announce/2022/04/msg00009.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5118">https://www.debian.org/security/2022/dsa-5118</a></li>
<li><a href="https://github.com/advisories/GHSA-m5pq-gvj9-9vr8">https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</uri>
        </author>
        <published>2022-03-08T20:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[galois_2p8] Buffer Overflow in galois_2p8]]></title>
        <id>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</id>
        <link href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8"/>
        <updated>2022-02-26T00:35:51.000Z</updated>
        <content type="html"><![CDATA[<p>In galois_2p8 before 0.1.2, PrimitivePolynomialField::new has an off-by-one buffer overflow for a vector.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24988">https://nvd.nist.gov/vuln/detail/CVE-2022-24988</a></li>
<li><a href="https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md">https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8">https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</uri>
        </author>
        <published>2022-02-15T00:02:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crossbeam-utils] Improper Restriction of Operations within the Bounds of a Memory Buffer and Race Condition in crossbeam-utils]]></title>
        <id>https://github.com/advisories/GHSA-qc84-gqf4-9926</id>
        <link href="https://github.com/advisories/GHSA-qc84-gqf4-9926"/>
        <updated>2022-02-25T15:42:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The affected version of this crate incorrectly assumed that the alignment of <code>{i,u}64</code> was always the same as <code>Atomic{I,U}64</code>. </p>
<p>However, the alignment of <code>{i,u}64</code> on a 32-bit target can be smaller than <code>Atomic{I,U}64</code>.</p>
<p>This can cause the following problems:</p>
<ul>
<li>Unaligned memory accesses</li>
<li>Data race</li>
</ul>
<p>Crates using <code>fetch_*</code> methods with <code>AtomicCell&lt;{i,u}64&gt;</code> are affected by this issue.</p>
<p>32-bit targets without <code>Atomic{I,U}64</code> and 64-bit targets are not affected by this issue.
32-bit targets with <code>Atomic{I,U}64</code> and <code>{i,u}64</code> have the same alignment are also not affected by this issue.</p>
<p>The following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)</p>
<ul>
<li>armv7-apple-ios (tier 3)</li>
<li>armv7s-apple-ios (tier 3)</li>
<li>i386-apple-ios (tier 3)</li>
<li>i586-unknown-linux-gnu</li>
<li>i586-unknown-linux-musl</li>
<li>i686-apple-darwin (tier 3)</li>
<li>i686-linux-android</li>
<li>i686-unknown-freebsd</li>
<li>i686-unknown-haiku (tier 3)</li>
<li>i686-unknown-linux-gnu</li>
<li>i686-unknown-linux-musl</li>
<li>i686-unknown-netbsd (tier 3)</li>
<li>i686-unknown-openbsd (tier 3)</li>
<li>i686-wrs-vxworks (tier 3)</li>
</ul>
<p>(<a href="https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10">script to get list</a>)</p>
<h3 id="patches">Patches</h3>
<p>This has been fixed in crossbeam-utils 0.8.7.</p>
<p>Affected 0.8.x releases have been yanked.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/crossbeam-rs/crossbeam/pull/781">https://github.com/crossbeam-rs/crossbeam/pull/781</a> </p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-qc84-gqf4-9926">https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-qc84-gqf4-9926</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23639">https://nvd.nist.gov/vuln/detail/CVE-2022-23639</a></li>
<li><a href="https://github.com/crossbeam-rs/crossbeam/pull/781">https://github.com/crossbeam-rs/crossbeam/pull/781</a></li>
<li><a href="https://github.com/crossbeam-rs/crossbeam/releases/tag/crossbeam-utils-0.8.7">https://github.com/crossbeam-rs/crossbeam/releases/tag/crossbeam-utils-0.8.7</a></li>
<li><a href="https://github.com/advisories/GHSA-qc84-gqf4-9926">https://github.com/advisories/GHSA-qc84-gqf4-9926</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc84-gqf4-9926</uri>
        </author>
        <published>2022-02-16T22:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Invalid drop of partially-initialized instances in the pooling instance allocator for modules with defined `externref` globals ]]></title>
        <id>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</id>
        <link href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7"/>
        <updated>2022-04-19T19:03:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an <code>externref</code> global will result in an invalid drop of a <code>VMExternRef</code> via an uninitialized pointer.</p>
<p>As instance slots may be reused between consecutive instantiations, the value of the uninitialized pointer may be from a previous instantiation and therefore under the control of an attacker via a module's initial values for its globals. If the attacker can somehow determine an address under their control inside the mapped memory representing the instance pool, it is possible to trick the runtime to call <code>drop_in_place</code> on a trait object under the attacker's control and therefore cause remote code execution.</p>
<p>Exploiting the bug to cause remote code execution would be very difficult as attackers cannot determine the addresses of globals from code executing within the WebAssembly VM and the memory space for the instance pool cannot be statically determined. Operating system mitigations, such as <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">address space layout randomization</a>, would additionally increase the difficulty for attackers to determine useful executable code to target with an exploit. It is also very unlikely that attackers will be able to directly influence the conditions that trigger the bug as described below.</p>
<p>When the conditions to trigger the bug are met, however, it is much easier to exploit this bug to cause a denial of service by crashing the host with an invalid memory read.</p>
<p>The following engine configuration (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html">Config</a>) is required to be impacted by this bug:</p>
<ul>
<li>support for the reference types proposal must be enabled (this is the default for <code>Config</code>).</li>
<li>a pooling allocation strategy must be configured via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html#method.allocation_strategy">Config::allocation_strategy</a>, which is <strong>not the default allocation strategy</strong>.</li>
</ul>
<p>A module must be instantiated with <strong>all the following characteristics</strong>:</p>
<ul>
<li>The module defines at least one table or memory.</li>
<li>The module defines at least one <code>externref</code> global.</li>
</ul>
<p>During instantiation, <strong>one of the following</strong> must occur to cause the instantiation to fail:</p>
<ul>
<li>a call to <code>mprotect</code> or <code>VirtualAlloc</code> fails (e.g. out-of-memory conditions).</li>
<li>a resource limiter was configured in the associated <code>Store</code> (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter">Store::limiter</a> or <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter_async">Store::limiter_async</a>) and the limiter returns <code>false</code> from the initial call to <code>memory_growing</code> or <code>table_growing</code>. <strong>Stores do not have a resource limiter set by default</strong>.</li>
</ul>
<p>This results in a partially-initialized instance being dropped and that attempts to drop the uninitialized <code>VMExternRef</code> representing the defined <code>externref</code> global.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because the usage of <code>externref</code> is still uncommon and without a resource limiter configured on the <code>Store</code>, which is not the default configuration, it is only possible to trigger the bug from an error returned by <code>mprotect</code> or <code>VirtualAlloc</code>.</p>
<p>Note that on Linux with the <code>uffd</code> feature enabled, it is only possible to trigger the bug from a resource limiter as the call to <code>mprotect</code> is skipped; if no resource limiter is used, then this configuration is not vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed in 0.34.1 and 0.33.1; users are encouraged to upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If it is not possible to upgrade to 0.34.1 or 0.33.1 of the <code>wasmtime</code> crate, it is recommend that support for the reference types proposal be disabled by passing <code>false</code> to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">Config::wasm_reference_types</a>.</p>
<p>Doing so will prevent modules that use <code>externref</code> from being loaded entirely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23636">https://nvd.nist.gov/vuln/detail/CVE-2022-23636</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a">https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a</a></li>
<li><a href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/advisories/GHSA-88xq-w8cq-xfg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</uri>
        </author>
        <published>2022-02-16T22:35:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Invalid drop of partially-initialized instances in the pooling instance allocator for modules with defined `externref` globals ]]></title>
        <id>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</id>
        <link href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7"/>
        <updated>2022-04-19T19:03:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an <code>externref</code> global will result in an invalid drop of a <code>VMExternRef</code> via an uninitialized pointer.</p>
<p>As instance slots may be reused between consecutive instantiations, the value of the uninitialized pointer may be from a previous instantiation and therefore under the control of an attacker via a module's initial values for its globals. If the attacker can somehow determine an address under their control inside the mapped memory representing the instance pool, it is possible to trick the runtime to call <code>drop_in_place</code> on a trait object under the attacker's control and therefore cause remote code execution.</p>
<p>Exploiting the bug to cause remote code execution would be very difficult as attackers cannot determine the addresses of globals from code executing within the WebAssembly VM and the memory space for the instance pool cannot be statically determined. Operating system mitigations, such as <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">address space layout randomization</a>, would additionally increase the difficulty for attackers to determine useful executable code to target with an exploit. It is also very unlikely that attackers will be able to directly influence the conditions that trigger the bug as described below.</p>
<p>When the conditions to trigger the bug are met, however, it is much easier to exploit this bug to cause a denial of service by crashing the host with an invalid memory read.</p>
<p>The following engine configuration (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html">Config</a>) is required to be impacted by this bug:</p>
<ul>
<li>support for the reference types proposal must be enabled (this is the default for <code>Config</code>).</li>
<li>a pooling allocation strategy must be configured via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html#method.allocation_strategy">Config::allocation_strategy</a>, which is <strong>not the default allocation strategy</strong>.</li>
</ul>
<p>A module must be instantiated with <strong>all the following characteristics</strong>:</p>
<ul>
<li>The module defines at least one table or memory.</li>
<li>The module defines at least one <code>externref</code> global.</li>
</ul>
<p>During instantiation, <strong>one of the following</strong> must occur to cause the instantiation to fail:</p>
<ul>
<li>a call to <code>mprotect</code> or <code>VirtualAlloc</code> fails (e.g. out-of-memory conditions).</li>
<li>a resource limiter was configured in the associated <code>Store</code> (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter">Store::limiter</a> or <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter_async">Store::limiter_async</a>) and the limiter returns <code>false</code> from the initial call to <code>memory_growing</code> or <code>table_growing</code>. <strong>Stores do not have a resource limiter set by default</strong>.</li>
</ul>
<p>This results in a partially-initialized instance being dropped and that attempts to drop the uninitialized <code>VMExternRef</code> representing the defined <code>externref</code> global.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because the usage of <code>externref</code> is still uncommon and without a resource limiter configured on the <code>Store</code>, which is not the default configuration, it is only possible to trigger the bug from an error returned by <code>mprotect</code> or <code>VirtualAlloc</code>.</p>
<p>Note that on Linux with the <code>uffd</code> feature enabled, it is only possible to trigger the bug from a resource limiter as the call to <code>mprotect</code> is skipped; if no resource limiter is used, then this configuration is not vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed in 0.34.1 and 0.33.1; users are encouraged to upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If it is not possible to upgrade to 0.34.1 or 0.33.1 of the <code>wasmtime</code> crate, it is recommend that support for the reference types proposal be disabled by passing <code>false</code> to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">Config::wasm_reference_types</a>.</p>
<p>Doing so will prevent modules that use <code>externref</code> from being loaded entirely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23636">https://nvd.nist.gov/vuln/detail/CVE-2022-23636</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a">https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a</a></li>
<li><a href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/advisories/GHSA-88xq-w8cq-xfg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</uri>
        </author>
        <published>2022-02-16T22:35:03.000Z</published>
    </entry>
</feed>