<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-12-17T04:01:30.490Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut]]></title>
        <id>https://github.com/advisories/GHSA-3mv5-343c-w2qg</id>
        <link href="https://github.com/advisories/GHSA-3mv5-343c-w2qg"/>
        <updated>2023-12-15T03:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href="https://doc.rust-lang.org/core/cell/struct.Ref.html"><code>cell::Ref</code></a> or <a href="https://doc.rust-lang.org/core/cell/struct.RefMut.html"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>
<p>See <a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>
<p>The current plan is to yank the affected versions soon. See <a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>
<li><a href="https://github.com/google/zerocopy/issues/679">https://github.com/google/zerocopy/issues/679</a></li>
<li><a href="https://github.com/google/zerocopy/issues/716">https://github.com/google/zerocopy/issues/716</a></li>
<li><a href="https://github.com/advisories/GHSA-3mv5-343c-w2qg">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mv5-343c-w2qg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-12-15T03:48:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Full Table Permissions by Default]]></title>
        <id>https://github.com/advisories/GHSA-x5fr-7hhj-34j3</id>
        <link href="https://github.com/advisories/GHSA-x5fr-7hhj-34j3"/>
        <updated>2023-12-15T03:46:37.000Z</updated>
        <content type="html"><![CDATA[<p>Default table permissions in SurrealDB were <code>FULL</code> instead of <code>NONE</code>. This would lead to tables having <code>FULL</code> permissions for <code>SELECT</code>, <code>CREATE</code>, <code>UPDATE</code> and <code>DELETE</code> unless some other permissions were specified via the <code>PERMISSIONS</code> clause.</p>
<p>We have decided to treat this behaviour as a vulnerability due to its security implications, especially considering the lack of specific documentation and potential for confusion due to the <code>INFO FOR DB</code> statement previously not displaying default permissions. Treating it as a bug fix provides justification for a change in default behavior outside of a major release.</p>
<h3 id="impact">Impact</h3>
<p>Any client authorized to query data in a SurrealDB instance will have full access to any tables that were defined with no explicit permissions and that are within its authorization scope (i.e. namespace or database), including creating, reading, updating and deleting data. This is specially relevant for SurrealDB instances allowing guest access with publicly exposed interfaces (e.g. HTTP REST API or WebSocket API), since a remote unauthenticated user may gain full access to any tables that were defined without any explicit permissions. Tables that were defined with explicit permissions using the <code>PERMISSIONS</code> clause are not affected.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version <code>1.0.1</code> includes a patch for this specific issue. Later releases will also include the patch.</li>
<li>Version <code>1.1.0-beta.1</code> and latest nightly releases already include the patch for this issue.</li>
</ul>
<p>In patched versions:</p>
<ul>
<li>Tables defined after the patch without explicit permissions have <code>NONE</code> permissions.</li>
<li>Table permissions are always explicitly displayed with the <code>INFO FOR DB</code> statement.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>In unpatched versions, this issue can be resolved by explicitly defining table permissions as shown in the following examples:</p>
<pre><code class="language-sql">-- INSECURE EXAMPLE
-- DEFINE TABLE insecure;
-- SECURE EXAMPLE 1
DEFINE TABLE secure PERMISSIONS NONE;
-- SECURE EXAMPLE 2
DEFINE TABLE secure PERMISSIONS FOR SELECT, CREATE, UPDATE, DELETE NONE;
-- SECURE EXAMPLE 3
DEFINE TABLE secure PERMISSIONS FOR
  SELECT WHERE user = $auth.id,
  CREATE, UPDATE, DELETE NONE;
-- SECURE EXAMPLE 4
DEFINE TABLE secure PERMISSIONS
  FOR select WHERE published = true OR user = $auth.id
  FOR create, update WHERE user = $auth.id
  FOR delete WHERE user = $auth.id OR $auth.admin = true;
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3074">https://github.com/surrealdb/surrealdb/pull/3074</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3083">https://github.com/surrealdb/surrealdb/pull/3083</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3125">https://github.com/surrealdb/surrealdb/pull/3125</a></li>
<li><a href="https://docs.surrealdb.com/docs/surrealql/statements/define/table/">https://docs.surrealdb.com/docs/surrealql/statements/define/table/</a></li>
<li><a href="https://docs.surrealdb.com/docs/security/capabilities#guest-access">https://docs.surrealdb.com/docs/security/capabilities#guest-access</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-x5fr-7hhj-34j3">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-x5fr-7hhj-34j3</a></li>
<li><a href="https://github.com/advisories/GHSA-x5fr-7hhj-34j3">https://github.com/advisories/GHSA-x5fr-7hhj-34j3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5fr-7hhj-34j3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-15T03:46:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[quiche] Unbounded queuing of path validation messages in cloudflare-quiche]]></title>
        <id>https://github.com/advisories/GHSA-w3vp-jw9m-f9pm</id>
        <link href="https://github.com/advisories/GHSA-w3vp-jw9m-f9pm"/>
        <updated>2023-12-13T13:34:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>quiche v. 0.15.0 through 0.19.0 was discovered to be vulnerable to unbounded queuing of path validation messages, which could lead to excessive resource consumption.</p>
<p>QUIC path validation (<a href="https://datatracker.ietf.org/doc/html/rfc9000#section-8.2">RFC 9000 Section 8.2</a>) requires that the recipient of a PATH_CHALLENGE frame responds by sending a PATH_RESPONSE. An unauthenticated remote attacker can exploit the vulnerability by sending PATH_CHALLENGE frames and manipulating the connection (e.g. by restricting the peer's congestion window size) so that PATH_RESPONSE frames can only be sent at the slower rate than they are received, leading to storage of path validation data in an unbounded queue.</p>
<h3 id="patches">Patches</h3>
<p>Quiche versions greater than 0.19.0 address this problem.</p>
<h3 id="references">References</h3>
<p><a href="https://www.cve.org/CVERecord?id=CVE-2023-6193">CVE-2023-6193</a>
<a href="https://datatracker.ietf.org/doc/html/rfc9000#section-8.2">RFC 9000 Section 8.2</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/quiche/security/advisories/GHSA-w3vp-jw9m-f9pm">https://github.com/cloudflare/quiche/security/advisories/GHSA-w3vp-jw9m-f9pm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6193">https://nvd.nist.gov/vuln/detail/CVE-2023-6193</a></li>
<li><a href="https://github.com/cloudflare/quiche/commit/ea7ecf39ae28ab24cf1785c1674dc2e8a076f9ca">https://github.com/cloudflare/quiche/commit/ea7ecf39ae28ab24cf1785c1674dc2e8a076f9ca</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc9000#section-8.2">https://datatracker.ietf.org/doc/html/rfc9000#section-8.2</a></li>
<li><a href="https://github.com/advisories/GHSA-w3vp-jw9m-f9pm">https://github.com/advisories/GHSA-w3vp-jw9m-f9pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w3vp-jw9m-f9pm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-13T13:34:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmer-cli] Filesystem sandbox not enforced]]></title>
        <id>https://github.com/advisories/GHSA-4mq4-7rw3-vm5j</id>
        <link href="https://github.com/advisories/GHSA-4mq4-7rw3-vm5j"/>
        <updated>2023-12-13T13:32:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>As of Wasmer version v4.2.3, Wasm programs can access the filesystem outside of the sandbox.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/wasmerio/wasmer/issues/4267">https://github.com/wasmerio/wasmer/issues/4267</a></p>
<h3 id="poc">PoC</h3>
<p>A minimal Rust program:</p>
<pre><code>fn main() {
    let f = std::fs::OpenOptions::new()
        .write(true)
        .create_new(true)
        .open("abc")
        .unwrap();
}
</code></pre>
<p>This should be compiled with <code>cargo build --target wasm32-wasi</code>. The compiled program, when run with wasmer WITHOUT <code>--dir</code>, can still create a file in the working directory.</p>
<h3 id="impact">Impact</h3>
<p>Service providers running untrusted Wasm code on Wasmer can unexpectedly expose the host filesystem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/wasmerio/wasmer/security/advisories/GHSA-4mq4-7rw3-vm5j">https://github.com/wasmerio/wasmer/security/advisories/GHSA-4mq4-7rw3-vm5j</a></li>
<li><a href="https://github.com/wasmerio/wasmer/issues/4267">https://github.com/wasmerio/wasmer/issues/4267</a></li>
<li><a href="https://github.com/advisories/GHSA-4mq4-7rw3-vm5j">https://github.com/advisories/GHSA-4mq4-7rw3-vm5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mq4-7rw3-vm5j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-13T13:32:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[candid] Candid infinite decoding loop through specially crafted payload]]></title>
        <id>https://github.com/advisories/GHSA-7787-p7x6-fq3j</id>
        <link href="https://github.com/advisories/GHSA-7787-p7x6-fq3j"/>
        <updated>2023-12-13T17:34:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Candid library causes a Denial of Service while parsing a specially crafted payload with <code>empty</code> data type. For example, if the payload is <code>record { * ; empty }</code> and  the canister interface expects <code>record { * }</code> then the rust candid decoder treats <code>empty</code> as an extra field required by the type.  The problem with type <code>empty</code> is that the candid rust library wrongly categorizes <code>empty</code> as a recoverable error when skipping the field and thus causing an infinite decoding loop. </p>
<p>Canisters using affected versions of candid are exposed to denial of service by causing the decoding to run indefinitely until the canister traps due to reaching maximum instruction limit per execution round. Repeated exposure to the payload will result in degraded performance of the canister.</p>
<p>For asset canister users, <code>dfx</code> versions <code>&gt;= 0.14.4</code> to <code>&lt;= 0.15.2-beta.0</code> ships asset canister with an affected version of candid.</p>
<h4 id="unaffected">Unaffected</h4>
<ul>
<li>Rust canisters using candid <code>&lt; 0.9.0</code> or <code>&gt;= 0.9.10</code> </li>
<li>Rust canister interfaces of type other than <code>record { * }</code></li>
<li>Motoko based canisters</li>
<li>dfx (for asset canister) <code>&lt;= 0.14.3</code> or <code>&gt;= 0.15.2</code></li>
</ul>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <code>0.9.10</code>. All rust based canisters on candid versions <code>&gt;= 0.9.0</code> must upgrade their candid versions to <code>&gt;= 0.9.10</code> and deploy their canisters to mainnet as soon as possible. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround for canisters using the affected versions of candid other than upgrading to patched version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/candid/pull/478">dfinity/candid/pull/478</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/candid-ref">Candid Library Reference</a></li>
<li><a href="https://github.com/dfinity/candid/blob/master/spec/Candid.md">Candid Specification</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j">https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j</a></li>
<li><a href="https://github.com/dfinity/candid/pull/478">https://github.com/dfinity/candid/pull/478</a></li>
<li><a href="https://github.com/dfinity/candid/commit/b233dbc2d2bcc79c9fc574dd5968269df680b073">https://github.com/dfinity/candid/commit/b233dbc2d2bcc79c9fc574dd5968269df680b073</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6245">https://nvd.nist.gov/vuln/detail/CVE-2023-6245</a></li>
<li><a href="https://github.com/dfinity/candid/blob/master/spec/Candid.md">https://github.com/dfinity/candid/blob/master/spec/Candid.md</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/candid-ref">https://internetcomputer.org/docs/current/references/candid-ref</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0073.html">https://rustsec.org/advisories/RUSTSEC-2023-0073.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7787-p7x6-fq3j">https://github.com/advisories/GHSA-7787-p7x6-fq3j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7787-p7x6-fq3j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-08T15:23:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rsa] Marvin Attack: potential key recovery through timing sidechannels]]></title>
        <id>https://github.com/advisories/GHSA-4grx-2x9w-596c</id>
        <link href="https://github.com/advisories/GHSA-4grx-2x9w-596c"/>
        <updated>2023-12-14T22:50:58.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://people.redhat.com/~hkario/marvin/">Marvin Attack</a> is a timing sidechannel vulnerability which allows performing RSA decryption and signing operations as an attacker with the ability to observe only the time of the decryption operation performed withthe private key.</p>
<p>A recent survey of RSA implementations found that the Rust <code>rsa</code> crate is one of many implementations vulnerable to this attack.</p>
<p>No fixed version is available at this time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr">https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr</a></li>
<li><a href="https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643">https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0071.html">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4grx-2x9w-596c">https://github.com/advisories/GHSA-4grx-2x9w-596c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4grx-2x9w-596c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T23:28:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rsa] Marvin Attack: potential key recovery through timing sidechannels]]></title>
        <id>https://github.com/advisories/GHSA-c38w-74pg-36hr</id>
        <link href="https://github.com/advisories/GHSA-c38w-74pg-36hr"/>
        <updated>2023-12-15T22:20:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to a non-constant-time implementation, information about the private key is leaked through timing information which is observable over the network. An attacker may be able to use that information to recover the key.</p>
<h3 id="patches">Patches</h3>
<p>No patch is yet available, however work is underway to migrate to a fully constant-time implementation.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only currently available workaround is to avoid using the <code>rsa</code> crate in settings where attackers are able to observe timing information, e.g. local use on a non-compromised computer is fine.</p>
<h3 id="references">References</h3>
<p>This vulnerability was discovered as part of the "Marvin Attack", which revealed several implementations of RSA including OpenSSL had not properly mitigated timing sidechannel attacks.</p>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0071.html">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>
<li><a href="https://people.redhat.com/~hkario/marvin/">https://people.redhat.com/~hkario/marvin/</a></li>
<li><a href="https://github.com/RustCrypto/RSA/issues/19">https://github.com/RustCrypto/RSA/issues/19</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr">https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49092">https://nvd.nist.gov/vuln/detail/CVE-2023-49092</a></li>
<li><a href="https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643">https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0071.html">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c38w-74pg-36hr">https://github.com/advisories/GHSA-c38w-74pg-36hr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c38w-74pg-36hr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T23:28:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pubnub] pubnub Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5844-q3fc-56rh</id>
        <link href="https://github.com/advisories/GHSA-5844-q3fc-56rh"/>
        <updated>2023-12-07T23:04:34.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package pubnub before 7.4.0; all versions of the package com.pubnub:pubnub; versions of the package pubnub before 6.19.0; all versions of the package github.com/pubnub/go; versions of the package github.com/pubnub/go/v7 before 7.2.0; versions of the package pubnub before 7.3.0; versions of the package pubnub/pubnub before 6.1.0; versions of the package pubnub before 5.3.0; versions of the package pubnub before 0.4.0; versions of the package pubnub/c-core before 4.5.0; versions of the package com.pubnub:pubnub-kotlin before 7.7.0; versions of the package pubnub/swift before 6.2.0; versions of the package pubnub before 5.2.0; versions of the package pubnub before 4.3.0 are vulnerable to Insufficient Entropy via the getKey function, due to inefficient implementation of the AES-256-CBC cryptographic algorithm. The provided encrypt function is less secure when hex encoding and trimming are applied, leaving half of the bits in the key always the same for every encoded message or file.</p>
<p><strong>Note:</strong></p>
<p>In order to exploit this vulnerability, the attacker needs to invest resources in preparing the attack and brute-force the encryption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26154">https://nvd.nist.gov/vuln/detail/CVE-2023-26154</a></li>
<li><a href="https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119">https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119</a></li>
<li><a href="https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0">https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384">https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372">https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690">https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376">https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385">https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375">https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377">https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378">https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381">https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379">https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379</a></li>
<li><a href="https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js#L70">https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js#L70</a></li>
<li><a href="https://github.com/advisories/GHSA-5844-q3fc-56rh">https://github.com/advisories/GHSA-5844-q3fc-56rh</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pubnub/CVE-2023-26154.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pubnub/CVE-2023-26154.yml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5844-q3fc-56rh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-06T06:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio-boring] tokio-boring vulnerable to resource exhaustion via memory leak]]></title>
        <id>https://github.com/advisories/GHSA-pjrj-h4fg-6gm4</id>
        <link href="https://github.com/advisories/GHSA-pjrj-h4fg-6gm4"/>
        <updated>2023-12-05T23:42:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The tokio-boring library in version 4.0.0 is affected by a memory leak issue that can lead to excessive resource consumption and potential DoS by resource exhaustion. The <code>set_ex_data</code> function used by the library did not deallocate memory used by pre-existing data in memory each time after completing a TLS connection causing the program to consume more resources with each new connection.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in version 4.1.0 of tokio-boring.</p>
<h3 id="references">References</h3>
<p><a href="https://www.cve.org/CVERecord?id=CVE-2023-6180">CVE-2023-6180 at cve.org</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/boring/security/advisories/GHSA-pjrj-h4fg-6gm4">https://github.com/cloudflare/boring/security/advisories/GHSA-pjrj-h4fg-6gm4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6180">https://nvd.nist.gov/vuln/detail/CVE-2023-6180</a></li>
<li><a href="https://github.com/cloudflare/boring/commit/a32783374f2682e6949fdb713910b1b9f103d3ed">https://github.com/cloudflare/boring/commit/a32783374f2682e6949fdb713910b1b9f103d3ed</a></li>
<li><a href="https://github.com/advisories/GHSA-pjrj-h4fg-6gm4">https://github.com/advisories/GHSA-pjrj-h4fg-6gm4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pjrj-h4fg-6gm4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:42:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[birdcage] Environment variables still accessible through /proc]]></title>
        <id>https://github.com/advisories/GHSA-wj7f-468m-6mv8</id>
        <link href="https://github.com/advisories/GHSA-wj7f-468m-6mv8"/>
        <updated>2023-12-01T22:46:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Environment variables can be read from procfs unless a new process is started.</p>
<h3 id="poc">PoC</h3>
<pre><code>use birdcage::{Birdcage, Sandbox};
use std::{env, fs};

fn main() {
    Birdcage::new().lock().unwrap();

    assert_eq!(env::var_os("SECRET"), None);

    let environ = fs::read_to_string("/proc/self/environ").unwrap();
    assert!(!environ.contains("SECRET"), "ENVIRON CONTAINS SECRET:\n{environ}");
}
</code></pre>
<pre><code>$  SECRET=test cargo run
thread 'main' panicked at src/main.rs:10:5:
ENVIRON CONTAINS SECRET:
 [truncated]
</code></pre>
<h3 id="possible-solutions">Possible Solutions</h3>
<p>The simplest solution would be relying on the ptrace isolation and <strong>always</strong> spawning a new process by changing birdcage's API to create a new command. With an additional PID namespace the guarantees could be even further reinforced.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/phylum-dev/birdcage/security/advisories/GHSA-wj7f-468m-6mv8">https://github.com/phylum-dev/birdcage/security/advisories/GHSA-wj7f-468m-6mv8</a></li>
<li><a href="https://github.com/advisories/GHSA-wj7f-468m-6mv8">https://github.com/advisories/GHSA-wj7f-468m-6mv8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj7f-468m-6mv8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T22:46:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509StoreRef::objects` is unsound]]></title>
        <id>https://github.com/advisories/GHSA-xphf-cx8h-7q9g</id>
        <link href="https://github.com/advisories/GHSA-xphf-cx8h-7q9g"/>
        <updated>2023-11-28T20:51:10.000Z</updated>
        <content type="html"><![CDATA[<p>This function returned a reference into an OpenSSL datastructure, but there was no way to ensure OpenSSL would not mutate the datastructure behind one's back.</p>
<p>Use of this function should be replaced with <code>X509StoreRef::all_certificates</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/issues/2096">https://github.com/sfackler/rust-openssl/issues/2096</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/commit/cf9681a55cabd4cb9f1475bde17b5079f2a0384e">https://github.com/sfackler/rust-openssl/commit/cf9681a55cabd4cb9f1475bde17b5079f2a0384e</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0072.html">https://rustsec.org/advisories/RUSTSEC-2023-0072.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xphf-cx8h-7q9g">https://github.com/advisories/GHSA-xphf-cx8h-7q9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xphf-cx8h-7q9g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T20:51:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[self_cell] Insufficient covariance check makes self_cell unsound]]></title>
        <id>https://github.com/advisories/GHSA-48m6-wm5p-rr6h</id>
        <link href="https://github.com/advisories/GHSA-48m6-wm5p-rr6h"/>
        <updated>2023-11-14T18:32:22.000Z</updated>
        <content type="html"><![CDATA[<p>All public versions prior to <code>1.02</code> used an insufficient check to ensure that users correctly marked the dependent type as either <code>covariant</code> or <code>not_covariant</code>. This allowed users to mark a dependent as covariant even though its type was not covariant but invariant, for certain invariant types involving trait object lifetimes. One example for such a dependent type is <code>type Dependent&lt;'a&gt; = RefCell&lt;Box&lt;dyn fmt::Display + 'a&gt;&gt;</code>. Such a type allowed unsound usage in purely safe user code that leads to undefined behavior. The patched versions now produce a compile time error if such a type is marked as <code>covariant</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Voultapher/self_cell/issues/49">https://github.com/Voultapher/self_cell/issues/49</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0070.html">https://rustsec.org/advisories/RUSTSEC-2023-0070.html</a></li>
<li><a href="https://github.com/advisories/GHSA-48m6-wm5p-rr6h">https://github.com/advisories/GHSA-48m6-wm5p-rr6h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48m6-wm5p-rr6h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-14T18:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[self_cell] Insufficient covariance check makes self_cell unsound]]></title>
        <id>https://github.com/advisories/GHSA-48m6-wm5p-rr6h</id>
        <link href="https://github.com/advisories/GHSA-48m6-wm5p-rr6h"/>
        <updated>2023-11-14T18:32:22.000Z</updated>
        <content type="html"><![CDATA[<p>All public versions prior to <code>1.02</code> used an insufficient check to ensure that users correctly marked the dependent type as either <code>covariant</code> or <code>not_covariant</code>. This allowed users to mark a dependent as covariant even though its type was not covariant but invariant, for certain invariant types involving trait object lifetimes. One example for such a dependent type is <code>type Dependent&lt;'a&gt; = RefCell&lt;Box&lt;dyn fmt::Display + 'a&gt;&gt;</code>. Such a type allowed unsound usage in purely safe user code that leads to undefined behavior. The patched versions now produce a compile time error if such a type is marked as <code>covariant</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Voultapher/self_cell/issues/49">https://github.com/Voultapher/self_cell/issues/49</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0070.html">https://rustsec.org/advisories/RUSTSEC-2023-0070.html</a></li>
<li><a href="https://github.com/advisories/GHSA-48m6-wm5p-rr6h">https://github.com/advisories/GHSA-48m6-wm5p-rr6h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48m6-wm5p-rr6h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-14T18:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nats] NATS TLS certificate common name validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-wvc4-j7g5-4f79</id>
        <link href="https://github.com/advisories/GHSA-wvc4-j7g5-4f79"/>
        <updated>2023-11-08T17:39:22.000Z</updated>
        <content type="html"><![CDATA[<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>
<p>A fix for the <code>nats</code> crate hasn't been released yet. Since the <code>nats</code> crate is going to be deprecated anyway, consider switching to <code>async-nats</code> <code>&gt;= 0.29</code> which already fixed this vulnerability.</p>
<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>
<h2 id="reproduction-steps">Reproduction steps</h2>
<ol>
<li>The NATS Rust client tries to establish a new connection</li>
<li>The connection is intercepted by a MitM proxy</li>
<li>The proxy makes a separate connection to the NATS server</li>
<li>The NATS server replies with an <code>INFO</code> message</li>
<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>
<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>
<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>
<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/nats.rs/pull/881">https://github.com/nats-io/nats.rs/pull/881</a></li>
<li><a href="https://github.com/nats-io/nats.rs/pull/887">https://github.com/nats-io/nats.rs/pull/887</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0029.html">https://rustsec.org/advisories/RUSTSEC-2023-0029.html</a></li>
<li><a href="https://github.com/nats-io/nats.rs/commit/9bacb86a480803ece9d1a45aa443081cf1eb815c">https://github.com/nats-io/nats.rs/commit/9bacb86a480803ece9d1a45aa443081cf1eb815c</a></li>
<li><a href="https://github.com/advisories/GHSA-wvc4-j7g5-4f79">https://github.com/advisories/GHSA-wvc4-j7g5-4f79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvc4-j7g5-4f79</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:12:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-quic] s2n-quic potential denial of service via crafted stream frames]]></title>
        <id>https://github.com/advisories/GHSA-475v-pq2g-fp9g</id>
        <link href="https://github.com/advisories/GHSA-475v-pq2g-fp9g"/>
        <updated>2023-11-08T15:03:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue in s2n-quic could result in unnecessary resource utilization when peers open streams beyond advertised limits.</p>
<p>Impacted versions: &lt;= v1.30.0.</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in v1.31.0 [1].</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround. Applications using s2n-quic should upgrade to the most recent release of s2n-quic.</p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our vulnerability reporting page [2] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] <a href="https://github.com/aws/s2n-quic/releases/tag/v1.31.0">https://github.com/aws/s2n-quic/releases/tag/v1.31.0</a>
[2] <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-quic/security/advisories/GHSA-475v-pq2g-fp9g">https://github.com/aws/s2n-quic/security/advisories/GHSA-475v-pq2g-fp9g</a></li>
<li><a href="https://github.com/aws/s2n-quic/commit/73e66b066de4940d129dbf33d91c39170eb4c38d">https://github.com/aws/s2n-quic/commit/73e66b066de4940d129dbf33d91c39170eb4c38d</a></li>
<li><a href="https://github.com/aws/s2n-quic/releases/tag/v1.31.0">https://github.com/aws/s2n-quic/releases/tag/v1.31.0</a></li>
<li><a href="https://github.com/advisories/GHSA-475v-pq2g-fp9g">https://github.com/advisories/GHSA-475v-pq2g-fp9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-475v-pq2g-fp9g</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-11-08T15:03:09.000Z</published>
    </entry>
</feed>