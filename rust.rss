<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-04-06T00:18:54.983Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Information Leak/Denial of Service in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-p4jg-pccf-h82c</id>
        <link href="https://github.com/advisories/GHSA-p4jg-pccf-h82c"/>
        <updated>2022-04-05T21:21:42.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 unsafely uses the /tmp/swhkd.pid pathname. There can be an information leak or denial of service. A patch is available on the <code>1.1.0</code> branch of the repository.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27815">https://nvd.nist.gov/vuln/detail/CVE-2022-27815</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/e661a4940df78fbb7b52c622ac4ae6a3a7f7d8aa">https://github.com/waycrate/swhkd/commit/e661a4940df78fbb7b52c622ac4ae6a3a7f7d8aa</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="https://github.com/advisories/GHSA-p4jg-pccf-h82c">https://github.com/advisories/GHSA-p4jg-pccf-h82c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4jg-pccf-h82c</uri>
        </author>
        <published>2022-03-31T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Data Loss/Denial of Service in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-8m49-2xj8-67v9</id>
        <link href="https://github.com/advisories/GHSA-8m49-2xj8-67v9"/>
        <updated>2022-04-05T21:21:55.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 unsafely uses the /tmp/swhks.pid pathname. There can be data loss or a denial of service. A patch is available on the <code>1.1.0</code> branch of the repository.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27816">https://nvd.nist.gov/vuln/detail/CVE-2022-27816</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575">https://github.com/waycrate/swhkd/commit/0b620a09605afb815c6d8d8953bbb7a10a8c0575</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="https://github.com/advisories/GHSA-8m49-2xj8-67v9">https://github.com/advisories/GHSA-8m49-2xj8-67v9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m49-2xj8-67v9</uri>
        </author>
        <published>2022-03-31T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2022-04-05T21:38:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>


<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug.</p>
<h3 id="patches">Patches</h3>


<p>We have released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions.</p>
<h3 id="workarounds">Workarounds</h3>


<p>If upgrading is not an option for you at this time, you can avoid the vulnerability by either</p>
<ul>
<li><p><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">disabling the Wasm reference types proposal</a></p>
<pre><code class="language-rust">config.wasm_reference_types(false);
</code></pre>
</li>
<li><p>or by <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">disabling epoch interruption</a> if you were previously enabling it.</p>
<pre><code class="language-rust">config.epoch_interruption(false);
</code></pre>
</li>
</ul>
<h3 id="references">References</h3>


<ul>
<li><a href="https://github.com/WebAssembly/reference-types">The WebAssembly reference types proposal, which introduces <code>externref</code>s</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">Documentation about epoch interruption in Wasmtime</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a><h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2022-04-05T21:38:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>


<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug.</p>
<h3 id="patches">Patches</h3>


<p>We have released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions.</p>
<h3 id="workarounds">Workarounds</h3>


<p>If upgrading is not an option for you at this time, you can avoid the vulnerability by either</p>
<ul>
<li><p><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">disabling the Wasm reference types proposal</a></p>
<pre><code class="language-rust">config.wasm_reference_types(false);
</code></pre>
</li>
<li><p>or by <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">disabling epoch interruption</a> if you were previously enabling it.</p>
<pre><code class="language-rust">config.epoch_interruption(false);
</code></pre>
</li>
</ul>
<h3 id="references">References</h3>


<ul>
<li><a href="https://github.com/WebAssembly/reference-types">The WebAssembly reference types proposal, which introduces <code>externref</code>s</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">Documentation about epoch interruption in Wasmtime</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a><h3 id="references-1">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Sandbox bypass leading to arbitrary code execution in Deno]]></title>
        <id>https://github.com/advisories/GHSA-838h-jqp6-cf2f</id>
        <link href="https://github.com/advisories/GHSA-838h-jqp6-cf2f"/>
        <updated>2022-04-01T20:02:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The versions of Deno between release 1.18.0 and 1.20.2 (inclusive) are vulnerable to an attack where a malicious actor controlling the code executed in a Deno runtime could bypass permission checks and execute arbitrary shell code.</p>
<p>There is <strong>no</strong> evidence that this vulnerability has been exploited in the wild.</p>
<p>This vulnerability does <strong>not</strong> affect users of Deno Deploy.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in Deno 1.20.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround. All users are recommended to upgrade to 1.20.3 immediately.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-838h-jqp6-cf2f">https://github.com/denoland/deno/security/advisories/GHSA-838h-jqp6-cf2f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24783">https://nvd.nist.gov/vuln/detail/CVE-2022-24783</a></li>
<li><a href="https://github.com/denoland/deno/pull/14109">https://github.com/denoland/deno/pull/14109</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.20.3">https://github.com/denoland/deno/releases/tag/v1.20.3</a></li>
<li><a href="https://github.com/advisories/GHSA-838h-jqp6-cf2f">https://github.com/advisories/GHSA-838h-jqp6-cf2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-838h-jqp6-cf2f</uri>
        </author>
        <published>2022-03-29T22:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[regex] Regular expression denial of service in Rust's regex crate]]></title>
        <id>https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</id>
        <link href="https://github.com/advisories/GHSA-m5pq-gvj9-9vr8"/>
        <updated>2022-03-28T15:21:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>This is a cross-post of <a href="https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw">the official security advisory</a>. The official advisory contains a signed version with our PGP key, as well.</p>
</blockquote>
<p>The Rust Security Response WG was notified that the <code>regex</code> crate did not properly limit the complexity of the regular expressions (regex) it parses. An attacker could use this security issue to perform a denial of service, by sending a specially crafted regex to a service accepting untrusted regexes. No known vulnerability is present when parsing untrusted input with trusted regexes.</p>
<p>This issue has been assigned CVE-2022-24713. The severity of this vulnerability is "high" when the <code>regex</code> crate is used to parse untrusted regexes. Other uses of the <code>regex</code> crate are not affected by this vulnerability.</p>
<h2 id="overview">Overview</h2>
<p>The <code>regex</code> crate features built-in mitigations to prevent denial of service attacks caused by untrusted regexes, or untrusted input matched by trusted regexes. Those (tunable) mitigations already provide sane defaults to prevent attacks. This guarantee is documented and it's considered part of the crate's API.</p>
<p>Unfortunately a bug was discovered in the mitigations designed to prevent untrusted regexes to take an arbitrary amount of time during parsing, and it's possible to craft regexes that bypass such mitigations. This makes it possible to perform denial of service attacks by sending specially crafted regexes to services accepting user-controlled, untrusted regexes.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>All versions of the <code>regex</code> crate before or equal to 1.5.4 are affected by this issue. The fix is include starting from  <code>regex</code> 1.5.5.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend everyone accepting user-controlled regexes to upgrade immediately to the latest version of the <code>regex</code> crate.</p>
<p>Unfortunately there is no fixed set of problematic regexes, as there are practically infinite regexes that could be crafted to exploit this vulnerability. Because of this, we do not recommend denying known problematic regexes.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Addison Crump for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>, and for helping review the fix.</p>
<p>We also want to thank Andrew Gallant for developing the fix, and Pietro Albini for coordinating the disclosure and writing this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8">https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8</a></li>
<li><a href="https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e">https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e</a></li>
<li><a href="https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw">https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24713">https://nvd.nist.gov/vuln/detail/CVE-2022-24713</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JANLZ3JXWJR7FSHE57K66UIZUIJZI67T/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PDOWTHNVGBOP2HN27PUFIGRYNSNDTYRJ/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/O3YB7CURSG64CIPCDPNMGPE4UU24AB6H/</a></li>
<li><a href="https://github.com/advisories/GHSA-m5pq-gvj9-9vr8">https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5pq-gvj9-9vr8</uri>
        </author>
        <published>2022-03-08T20:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[galois_2p8] Buffer Overflow in galois_2p8]]></title>
        <id>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</id>
        <link href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8"/>
        <updated>2022-02-26T00:35:51.000Z</updated>
        <content type="html"><![CDATA[<p>In galois_2p8 before 0.1.2, PrimitivePolynomialField::new has an off-by-one buffer overflow for a vector.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24988">https://nvd.nist.gov/vuln/detail/CVE-2022-24988</a></li>
<li><a href="https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md">https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8">https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</uri>
        </author>
        <published>2022-02-15T00:02:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crossbeam-utils] Improper Restriction of Operations within the Bounds of a Memory Buffer and Race Condition in crossbeam-utils]]></title>
        <id>https://github.com/advisories/GHSA-qc84-gqf4-9926</id>
        <link href="https://github.com/advisories/GHSA-qc84-gqf4-9926"/>
        <updated>2022-02-25T15:42:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The affected version of this crate incorrectly assumed that the alignment of <code>{i,u}64</code> was always the same as <code>Atomic{I,U}64</code>. </p>
<p>However, the alignment of <code>{i,u}64</code> on a 32-bit target can be smaller than <code>Atomic{I,U}64</code>.</p>
<p>This can cause the following problems:</p>
<ul>
<li>Unaligned memory accesses</li>
<li>Data race</li>
</ul>
<p>Crates using <code>fetch_*</code> methods with <code>AtomicCell&lt;{i,u}64&gt;</code> are affected by this issue.</p>
<p>32-bit targets without <code>Atomic{I,U}64</code> and 64-bit targets are not affected by this issue.
32-bit targets with <code>Atomic{I,U}64</code> and <code>{i,u}64</code> have the same alignment are also not affected by this issue.</p>
<p>The following is a complete list of the builtin targets that may be affected. (last update: nightly-2022-02-11)</p>
<ul>
<li>armv7-apple-ios (tier 3)</li>
<li>armv7s-apple-ios (tier 3)</li>
<li>i386-apple-ios (tier 3)</li>
<li>i586-unknown-linux-gnu</li>
<li>i586-unknown-linux-musl</li>
<li>i686-apple-darwin (tier 3)</li>
<li>i686-linux-android</li>
<li>i686-unknown-freebsd</li>
<li>i686-unknown-haiku (tier 3)</li>
<li>i686-unknown-linux-gnu</li>
<li>i686-unknown-linux-musl</li>
<li>i686-unknown-netbsd (tier 3)</li>
<li>i686-unknown-openbsd (tier 3)</li>
<li>i686-wrs-vxworks (tier 3)</li>
</ul>
<p>(<a href="https://gist.github.com/taiki-e/3c7891e8c5f5e0cbcb44d7396aabfe10">script to get list</a>)</p>
<h3 id="patches">Patches</h3>
<p>This has been fixed in crossbeam-utils 0.8.7.</p>
<p>Affected 0.8.x releases have been yanked.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/crossbeam-rs/crossbeam/pull/781">https://github.com/crossbeam-rs/crossbeam/pull/781</a> </p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-qc84-gqf4-9926">https://github.com/crossbeam-rs/crossbeam/security/advisories/GHSA-qc84-gqf4-9926</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23639">https://nvd.nist.gov/vuln/detail/CVE-2022-23639</a></li>
<li><a href="https://github.com/crossbeam-rs/crossbeam/pull/781">https://github.com/crossbeam-rs/crossbeam/pull/781</a></li>
<li><a href="https://github.com/crossbeam-rs/crossbeam/releases/tag/crossbeam-utils-0.8.7">https://github.com/crossbeam-rs/crossbeam/releases/tag/crossbeam-utils-0.8.7</a></li>
<li><a href="https://github.com/advisories/GHSA-qc84-gqf4-9926">https://github.com/advisories/GHSA-qc84-gqf4-9926</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc84-gqf4-9926</uri>
        </author>
        <published>2022-02-16T22:36:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Invalid drop of partially-initialized instances in the pooling instance allocator for modules with defined `externref` globals ]]></title>
        <id>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</id>
        <link href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7"/>
        <updated>2022-02-17T21:33:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an <code>externref</code> global will result in an invalid drop of a <code>VMExternRef</code> via an uninitialized pointer.</p>
<p>As instance slots may be reused between consecutive instantiations, the value of the uninitialized pointer may be from a previous instantiation and therefore under the control of an attacker via a module's initial values for its globals. If the attacker can somehow determine an address under their control inside the mapped memory representing the instance pool, it is possible to trick the runtime to call <code>drop_in_place</code> on a trait object under the attacker's control and therefore cause remote code execution.</p>
<p>Exploiting the bug to cause remote code execution would be very difficult as attackers cannot determine the addresses of globals from code executing within the WebAssembly VM and the memory space for the instance pool cannot be statically determined. Operating system mitigations, such as <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">address space layout randomization</a>, would additionally increase the difficulty for attackers to determine useful executable code to target with an exploit. It is also very unlikely that attackers will be able to directly influence the conditions that trigger the bug as described below.</p>
<p>When the conditions to trigger the bug are met, however, it is much easier to exploit this bug to cause a denial of service by crashing the host with an invalid memory read.</p>
<p>The following engine configuration (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html">Config</a>) is required to be impacted by this bug:</p>
<ul>
<li>support for the reference types proposal must be enabled (this is the default for <code>Config</code>).</li>
<li>a pooling allocation strategy must be configured via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html#method.allocation_strategy">Config::allocation_strategy</a>, which is <strong>not the default allocation strategy</strong>.</li>
</ul>
<p>A module must be instantiated with <strong>all the following characteristics</strong>:</p>
<ul>
<li>The module defines at least one table or memory.</li>
<li>The module defines at least one <code>externref</code> global.</li>
</ul>
<p>During instantiation, <strong>one of the following</strong> must occur to cause the instantiation to fail:</p>
<ul>
<li>a call to <code>mprotect</code> or <code>VirtualAlloc</code> fails (e.g. out-of-memory conditions).</li>
<li>a resource limiter was configured in the associated <code>Store</code> (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter">Store::limiter</a> or <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter_async">Store::limiter_async</a>) and the limiter returns <code>false</code> from the initial call to <code>memory_growing</code> or <code>table_growing</code>. <strong>Stores do not have a resource limiter set by default</strong>.</li>
</ul>
<p>This results in a partially-initialized instance being dropped and that attempts to drop the uninitialized <code>VMExternRef</code> representing the defined <code>externref</code> global.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because the usage of <code>externref</code> is still uncommon and without a resource limiter configured on the <code>Store</code>, which is not the default configuration, it is only possible to trigger the bug from an error returned by <code>mprotect</code> or <code>VirtualAlloc</code>.</p>
<p>Note that on Linux with the <code>uffd</code> feature enabled, it is only possible to trigger the bug from a resource limiter as the call to <code>mprotect</code> is skipped; if no resource limiter is used, then this configuration is not vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed in 0.34.1 and 0.33.1; users are encouraged to upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If it is not possible to upgrade to 0.34.1 or 0.33.1 of the <code>wasmtime</code> crate, it is recommend that support for the reference types proposal be disabled by passing <code>false</code> to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">Config::wasm_reference_types</a>.</p>
<p>Doing so will prevent modules that use <code>externref</code> from being loaded entirely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23636">https://nvd.nist.gov/vuln/detail/CVE-2022-23636</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a">https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a</a></li>
<li><a href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/advisories/GHSA-88xq-w8cq-xfg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</uri>
        </author>
        <published>2022-02-16T22:35:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Invalid drop of partially-initialized instances in the pooling instance allocator for modules with defined `externref` globals ]]></title>
        <id>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</id>
        <link href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7"/>
        <updated>2022-02-17T21:33:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There exists a bug in the pooling instance allocator in Wasmtime's runtime where a failure to instantiate an instance for a module that defines an <code>externref</code> global will result in an invalid drop of a <code>VMExternRef</code> via an uninitialized pointer.</p>
<p>As instance slots may be reused between consecutive instantiations, the value of the uninitialized pointer may be from a previous instantiation and therefore under the control of an attacker via a module's initial values for its globals. If the attacker can somehow determine an address under their control inside the mapped memory representing the instance pool, it is possible to trick the runtime to call <code>drop_in_place</code> on a trait object under the attacker's control and therefore cause remote code execution.</p>
<p>Exploiting the bug to cause remote code execution would be very difficult as attackers cannot determine the addresses of globals from code executing within the WebAssembly VM and the memory space for the instance pool cannot be statically determined. Operating system mitigations, such as <a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">address space layout randomization</a>, would additionally increase the difficulty for attackers to determine useful executable code to target with an exploit. It is also very unlikely that attackers will be able to directly influence the conditions that trigger the bug as described below.</p>
<p>When the conditions to trigger the bug are met, however, it is much easier to exploit this bug to cause a denial of service by crashing the host with an invalid memory read.</p>
<p>The following engine configuration (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html">Config</a>) is required to be impacted by this bug:</p>
<ul>
<li>support for the reference types proposal must be enabled (this is the default for <code>Config</code>).</li>
<li>a pooling allocation strategy must be configured via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Config.html#method.allocation_strategy">Config::allocation_strategy</a>, which is <strong>not the default allocation strategy</strong>.</li>
</ul>
<p>A module must be instantiated with <strong>all the following characteristics</strong>:</p>
<ul>
<li>The module defines at least one table or memory.</li>
<li>The module defines at least one <code>externref</code> global.</li>
</ul>
<p>During instantiation, <strong>one of the following</strong> must occur to cause the instantiation to fail:</p>
<ul>
<li>a call to <code>mprotect</code> or <code>VirtualAlloc</code> fails (e.g. out-of-memory conditions).</li>
<li>a resource limiter was configured in the associated <code>Store</code> (via <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter">Store::limiter</a> or <a href="https://docs.rs/wasmtime/0.34.0/wasmtime/struct.Store.html#method.limiter_async">Store::limiter_async</a>) and the limiter returns <code>false</code> from the initial call to <code>memory_growing</code> or <code>table_growing</code>. <strong>Stores do not have a resource limiter set by default</strong>.</li>
</ul>
<p>This results in a partially-initialized instance being dropped and that attempts to drop the uninitialized <code>VMExternRef</code> representing the defined <code>externref</code> global.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because the usage of <code>externref</code> is still uncommon and without a resource limiter configured on the <code>Store</code>, which is not the default configuration, it is only possible to trigger the bug from an error returned by <code>mprotect</code> or <code>VirtualAlloc</code>.</p>
<p>Note that on Linux with the <code>uffd</code> feature enabled, it is only possible to trigger the bug from a resource limiter as the call to <code>mprotect</code> is skipped; if no resource limiter is used, then this configuration is not vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed in 0.34.1 and 0.33.1; users are encouraged to upgrade as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If it is not possible to upgrade to 0.34.1 or 0.33.1 of the <code>wasmtime</code> crate, it is recommend that support for the reference types proposal be disabled by passing <code>false</code> to <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_reference_types">Config::wasm_reference_types</a>.</p>
<p>Doing so will prevent modules that use <code>externref</code> from being loaded entirely.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-88xq-w8cq-xfg7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23636">https://nvd.nist.gov/vuln/detail/CVE-2022-23636</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a">https://github.com/bytecodealliance/wasmtime/commit/886ecc562040bef61faf19438c22285c2d62403a</a></li>
<li><a href="https://github.com/advisories/GHSA-88xq-w8cq-xfg7">https://github.com/advisories/GHSA-88xq-w8cq-xfg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88xq-w8cq-xfg7</uri>
        </author>
        <published>2022-02-16T22:35:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parsec-service] Potential segfault in SPIFFE authenticator]]></title>
        <id>https://github.com/advisories/GHSA-45w3-v3g4-54pm</id>
        <link href="https://github.com/advisories/GHSA-45w3-v3g4-54pm"/>
        <updated>2022-02-11T21:06:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Several vulnerabilities have been reported in the <code>time</code> and <code>chrono</code> crates related to handling of calls to <code>localtime_r</code>. You can follow some of the discussions <a href="https://github.com/chronotope/chrono/issues/602">here</a> and <a href="https://github.com/time-rs/time/issues/293">here</a>, and the associated CVE <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a>. In our case, the issue with the dependency was flagged by our nightly CI build running <a href="https://github.com/parallaxsecond/parsec/issues/544"><code>cargo-audit</code></a>. </p>
<p>The vulnerability leads to a segfault in specific circumstances - namely, when one of a number of functions in the <code>time</code> crate is called while any other thread is setting an environment variable. Given that in the case of the Parsec service this affects the SPIFFE authenticator, Parsec service users can encounter the issue only when the JWT SVID authenticator is enabled and being used. We have not undergone any manual tracing to understand if the vulnerable methods are called anywhere in our stack, however it seems reasonable to expect that if that were to be the case, the issue would lie in JWT validation (i.e. when handling the dates found within a Json Web Token). JWT validation could thus fail, bringing down the thread in which the request happens. The rest of the threads continue to work. Since the threadpool implementation that we use <a href="https://docs.rs/threadpool/latest/threadpool/">continues replenishing the pool</a> when one thread panics, the impact on the service should be minimal.</p>
<h3 id="patches">Patches</h3>
<p>No current patches exist as the problems lie in a number of dependencies that are not under our control (see more details <a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">here</a>).</p>
<p>The issue tracking the required change in the <code>rust-spiffe</code> crate (through which the vulnerable dependencies are imported in Parsec) can be seen <a href="https://github.com/maxlambrecht/rust-spiffe/issues/17">here</a>. Once updates happen in our dependency chain that allow us to update beyond the vulnerable versions of <code>time</code> and <code>chrono</code>, a new version of the Parsec service will be tagged and released with the appropriate notifications.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only complete workaround is to use a different type of authenticator with the Parsec service. </p>
<h3 id="references">References</h3>
<p>As quoted in the initial paragraph, you can find out more information:</p>
<ul>
<li>in the <code>chrono</code> repo issue <a href="https://github.com/chronotope/chrono/issues/602">here</a></li>
<li>in the <code>time</code> repo issue <a href="https://github.com/time-rs/time/issues/293">here</a></li>
<li>in the official CVE report <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a></li>
<li>in our tracking issue <a href="https://github.com/parallaxsecond/parsec/issues/544">here</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/parallaxsecond/parsec">the Parsec service repo</a></li>
<li>Email us at <a href="mailto:cncf-parsec-maintainers@lists.cncf.io">cncf-parsec-maintainers@lists.cncf.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm">https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/chronotope/chrono/issues/602">https://github.com/chronotope/chrono/issues/602</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544">https://github.com/parallaxsecond/parsec/issues/544</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://github.com/advisories/GHSA-45w3-v3g4-54pm">https://github.com/advisories/GHSA-45w3-v3g4-54pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45w3-v3g4-54pm</uri>
        </author>
        <published>2022-02-11T19:11:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bingrep] Denial of service in bingrep]]></title>
        <id>https://github.com/advisories/GHSA-gm68-g349-gxgg</id>
        <link href="https://github.com/advisories/GHSA-gm68-g349-gxgg"/>
        <updated>2022-01-28T22:35:16.000Z</updated>
        <content type="html"><![CDATA[<p>Bingrep v0.8.5 was discovered to contain a memory allocation failure which can cause a Denial of Service (DoS).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39480">https://nvd.nist.gov/vuln/detail/CVE-2021-39480</a></li>
<li><a href="https://github.com/m4b/bingrep/issues/30">https://github.com/m4b/bingrep/issues/30</a></li>
<li><a href="https://github.com/advisories/GHSA-gm68-g349-gxgg">https://github.com/advisories/GHSA-gm68-g349-gxgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gm68-g349-gxgg</uri>
        </author>
        <published>2022-01-28T22:35:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solana_rbpf] Integer overflow in solana_rbpf]]></title>
        <id>https://github.com/advisories/GHSA-xwqr-xmgg-j69q</id>
        <link href="https://github.com/advisories/GHSA-xwqr-xmgg-j69q"/>
        <updated>2022-02-08T19:45:11.000Z</updated>
        <content type="html"><![CDATA[<p>From version 0.2.14 to 0.2.16 for Solana rBPF, function "relocate" in the file src/elf.rs has an integer overflow bug because the sym.st_value is read directly from ELF file without checking. If the sym.st_value is rather large, an integer overflow is triggered while calculating the variable "addr" via "addr = (sym.st_value + refd_pa) as u64";</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-46102">https://nvd.nist.gov/vuln/detail/CVE-2021-46102</a></li>
<li><a href="https://github.com/solana-labs/rbpf/pull/200">https://github.com/solana-labs/rbpf/pull/200</a></li>
<li><a href="https://github.com/solana-labs/rbpf/pull/236">https://github.com/solana-labs/rbpf/pull/236</a></li>
<li><a href="https://blocksecteam.medium.com/new-integer-overflow-bug-discovered-in-solana-rbpf-7729717159ee">https://blocksecteam.medium.com/new-integer-overflow-bug-discovered-in-solana-rbpf-7729717159ee</a></li>
<li><a href="https://github.com/solana-labs/rbpf/blob/c14764850f0b83b58aa013248eaf6d65836c1218/src/elf.rs#L609-L630">https://github.com/solana-labs/rbpf/blob/c14764850f0b83b58aa013248eaf6d65836c1218/src/elf.rs#L609-L630</a></li>
<li><a href="https://github.com/solana-labs/rbpf/releases/tag/v0.2.17">https://github.com/solana-labs/rbpf/releases/tag/v0.2.17</a></li>
<li><a href="https://github.com/advisories/GHSA-xwqr-xmgg-j69q">https://github.com/advisories/GHSA-xwqr-xmgg-j69q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwqr-xmgg-j69q</uri>
        </author>
        <published>2022-01-28T22:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Integer underflow in Frontier]]></title>
        <id>https://github.com/advisories/GHSA-cjg2-2fjg-fph4</id>
        <link href="https://github.com/advisories/GHSA-cjg2-2fjg-fph4"/>
        <updated>2022-01-15T00:03:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. It is recommended that you apply the patch as soon as possible.</p>
<p>If you do not use MODEXP precompile in your runtime, then you are not impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches are applied in PR #549.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>Patch PR: #549</p>
<h3 id="credits">Credits</h3>
<p>Thanks to SR-Labs for discovering the security vulnerability, and thanks to PureStake team for the patches.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/paritytech/frontier">Frontier repo</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4">https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21685">https://nvd.nist.gov/vuln/detail/CVE-2022-21685</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/549">https://github.com/paritytech/frontier/pull/549</a></li>
<li><a href="https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664">https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664</a></li>
<li><a href="https://github.com/advisories/GHSA-cjg2-2fjg-fph4">https://github.com/advisories/GHSA-cjg2-2fjg-fph4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cjg2-2fjg-fph4</uri>
        </author>
        <published>2022-01-14T21:03:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lru] Use After Free in lru]]></title>
        <id>https://github.com/advisories/GHSA-v362-2895-h9r2</id>
        <link href="https://github.com/advisories/GHSA-v362-2895-h9r2"/>
        <updated>2022-01-07T22:37:01.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the lru crate before 0.7.1 for Rust. The iterators have a use-after-free, as demonstrated by an access after a pop operation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45720">https://nvd.nist.gov/vuln/detail/CVE-2021-45720</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/lru/RUSTSEC-2021-0130.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/lru/RUSTSEC-2021-0130.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0130.html">https://rustsec.org/advisories/RUSTSEC-2021-0130.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v362-2895-h9r2">https://github.com/advisories/GHSA-v362-2895-h9r2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v362-2895-h9r2</uri>
        </author>
        <published>2022-01-07T22:37:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[smallvec] Use of Uninitialized Resource in smallvec]]></title>
        <id>https://github.com/advisories/GHSA-55m5-whcv-c49c</id>
        <link href="https://github.com/advisories/GHSA-55m5-whcv-c49c"/>
        <updated>2022-01-06T22:20:28.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the smallvec crate before 0.6.13 for Rust. It can create an uninitialized value of any type, including a reference type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25023">https://nvd.nist.gov/vuln/detail/CVE-2018-25023</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/smallvec/RUSTSEC-2018-0018.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/smallvec/RUSTSEC-2018-0018.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0018.html">https://rustsec.org/advisories/RUSTSEC-2018-0018.html</a></li>
<li><a href="https://github.com/advisories/GHSA-55m5-whcv-c49c">https://github.com/advisories/GHSA-55m5-whcv-c49c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55m5-whcv-c49c</uri>
        </author>
        <published>2022-01-06T22:20:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-9qj6-4rfq-vm84</id>
        <link href="https://github.com/advisories/GHSA-9qj6-4rfq-vm84"/>
        <updated>2022-01-06T22:20:41.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly coerce an immutable reference into a mutable reference, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25024">https://nvd.nist.gov/vuln/detail/CVE-2018-25024</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9qj6-4rfq-vm84">https://github.com/advisories/GHSA-9qj6-4rfq-vm84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qj6-4rfq-vm84</uri>
        </author>
        <published>2022-01-06T22:20:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-fgfm-hqjw-3265</id>
        <link href="https://github.com/advisories/GHSA-fgfm-hqjw-3265"/>
        <updated>2022-01-06T22:18:46.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly extend the lifetime of a string, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25025">https://nvd.nist.gov/vuln/detail/CVE-2018-25025</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fgfm-hqjw-3265">https://github.com/advisories/GHSA-fgfm-hqjw-3265</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fgfm-hqjw-3265</uri>
        </author>
        <published>2022-01-06T22:18:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-7x36-h62w-vw65</id>
        <link href="https://github.com/advisories/GHSA-7x36-h62w-vw65"/>
        <updated>2022-01-06T22:18:58.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can add the Send marker trait to an object that cannot be sent between threads safely, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25026">https://nvd.nist.gov/vuln/detail/CVE-2018-25026</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7x36-h62w-vw65">https://github.com/advisories/GHSA-7x36-h62w-vw65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x36-h62w-vw65</uri>
        </author>
        <published>2022-01-06T22:18:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use After Free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</id>
        <link href="https://github.com/advisories/GHSA-hxjf-h2mh-r6hj"/>
        <updated>2022-01-06T22:20:12.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 1.2.1 for Rust. get_format_info can cause a use-after-free.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25027">https://nvd.nist.gov/vuln/detail/CVE-2018-25027</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0021.html">https://rustsec.org/advisories/RUSTSEC-2018-0021.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hxjf-h2mh-r6hj">https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</uri>
        </author>
        <published>2022-01-06T22:20:12.000Z</published>
    </entry>
</feed>