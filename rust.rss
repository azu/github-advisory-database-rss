<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-05-03T11:01:19.352Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to DoS by double-checked locking]]></title>
        <id>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</id>
        <link href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r"/>
        <updated>2023-05-02T16:35:24.000Z</updated>
        <content type="html"><![CDATA[<p>If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the <code>-policy' argument to the command line utilities or by calling either </code>X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3996">https://nvd.nist.gov/vuln/detail/CVE-2022-3996</a></li>
<li><a href="https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7">https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r">https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T18:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Undefined Behavior in Rust runtime functions]]></title>
        <id>https://github.com/advisories/GHSA-ch89-5g45-qwc7</id>
        <link href="https://github.com/advisories/GHSA-ch89-5g45-qwc7"/>
        <updated>2023-04-27T19:57:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime's implementation of managing per-instance state, such as tables and memories, contains LLVM-level undefined behavior. This undefined behavior was found to cause runtime-level issues when compiled with LLVM 16 which causes some writes, which are critical for correctness, to be optimized away. Vulnerable versions of Wasmtime compiled with Rust 1.70, which is currently in beta, or later are known to have incorrectly compiled functions. Versions of Wasmtime compiled with the current Rust stable release, 1.69, and prior are not known at this time to have any issues, but can theoretically exhibit potential issues.</p>
<p>The underlying problem is that Wasmtime's runtime state for an instance involves a Rust-defined structure called <code>Instance</code> which has a trailing <code>VMContext</code> structure after it. This <code>VMContext</code> structure has a runtime-defined layout that is unique per-module. This representation cannot be expressed with safe code in Rust so <code>unsafe</code> code is required to maintain this state. The code doing this, however, has methods which take <code>&amp;self</code> as an argument but modify data in the <code>VMContext</code> part of the allocation. This means that pointers derived from <code>&amp;self</code> are mutated. This is typically not allowed, except in the presence of <code>UnsafeCell</code>, in Rust. When compiled to LLVM these functions have <code>noalias readonly</code> parameters which means it's UB to write through the pointers.</p>
<p>Wasmtime's internal representation and management of <code>VMContext</code> has been updated to use <code>&amp;mut self</code> methods where appropriate. Additionally verification tools for <code>unsafe</code> code in Rust, such as <code>cargo miri</code>, are planned to be executed on the <code>main</code> branch soon to fix any Rust-level issues that may be exploited in future compiler versions.</p>
<p>Precomplied binaries available for Wasmtime from GitHub releases have been compiled with at most LLVM 15 so are not known to be vulnerable. As mentioned above, however, it's still recommended to update.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime version 6.0.2, 7.0.1, and 8.0.1 have been issued which contain the patch necessary to work correctly on LLVM 16 and have no known UB on LLVM 15 and earlier.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If Wasmtime is compiled with Rust 1.69 and prior, which use LLVM 15, then there are no known issues. There is a theoretical possibility for UB to exploited, however, so it's recommended that users upgrade to a patched version of Wasmtime. Users using beta Rust (1.70 at this time) or nightly Rust (1.71 at this time) must update to a patched version to work correctly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">GitHub Advisory</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">Mailing list announcement</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30624">https://nvd.nist.gov/vuln/detail/CVE-2023-30624</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e">https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e</a></li>
<li><a href="https://github.com/advisories/GHSA-ch89-5g45-qwc7">https://github.com/advisories/GHSA-ch89-5g45-qwc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch89-5g45-qwc7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-04-27T17:08:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Undefined Behavior in Rust runtime functions]]></title>
        <id>https://github.com/advisories/GHSA-ch89-5g45-qwc7</id>
        <link href="https://github.com/advisories/GHSA-ch89-5g45-qwc7"/>
        <updated>2023-04-27T19:57:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime's implementation of managing per-instance state, such as tables and memories, contains LLVM-level undefined behavior. This undefined behavior was found to cause runtime-level issues when compiled with LLVM 16 which causes some writes, which are critical for correctness, to be optimized away. Vulnerable versions of Wasmtime compiled with Rust 1.70, which is currently in beta, or later are known to have incorrectly compiled functions. Versions of Wasmtime compiled with the current Rust stable release, 1.69, and prior are not known at this time to have any issues, but can theoretically exhibit potential issues.</p>
<p>The underlying problem is that Wasmtime's runtime state for an instance involves a Rust-defined structure called <code>Instance</code> which has a trailing <code>VMContext</code> structure after it. This <code>VMContext</code> structure has a runtime-defined layout that is unique per-module. This representation cannot be expressed with safe code in Rust so <code>unsafe</code> code is required to maintain this state. The code doing this, however, has methods which take <code>&amp;self</code> as an argument but modify data in the <code>VMContext</code> part of the allocation. This means that pointers derived from <code>&amp;self</code> are mutated. This is typically not allowed, except in the presence of <code>UnsafeCell</code>, in Rust. When compiled to LLVM these functions have <code>noalias readonly</code> parameters which means it's UB to write through the pointers.</p>
<p>Wasmtime's internal representation and management of <code>VMContext</code> has been updated to use <code>&amp;mut self</code> methods where appropriate. Additionally verification tools for <code>unsafe</code> code in Rust, such as <code>cargo miri</code>, are planned to be executed on the <code>main</code> branch soon to fix any Rust-level issues that may be exploited in future compiler versions.</p>
<p>Precomplied binaries available for Wasmtime from GitHub releases have been compiled with at most LLVM 15 so are not known to be vulnerable. As mentioned above, however, it's still recommended to update.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime version 6.0.2, 7.0.1, and 8.0.1 have been issued which contain the patch necessary to work correctly on LLVM 16 and have no known UB on LLVM 15 and earlier.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If Wasmtime is compiled with Rust 1.69 and prior, which use LLVM 15, then there are no known issues. There is a theoretical possibility for UB to exploited, however, so it's recommended that users upgrade to a patched version of Wasmtime. Users using beta Rust (1.70 at this time) or nightly Rust (1.71 at this time) must update to a patched version to work correctly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">GitHub Advisory</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">Mailing list announcement</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30624">https://nvd.nist.gov/vuln/detail/CVE-2023-30624</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e">https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e</a></li>
<li><a href="https://github.com/advisories/GHSA-ch89-5g45-qwc7">https://github.com/advisories/GHSA-ch89-5g45-qwc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch89-5g45-qwc7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-04-27T17:08:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Undefined Behavior in Rust runtime functions]]></title>
        <id>https://github.com/advisories/GHSA-ch89-5g45-qwc7</id>
        <link href="https://github.com/advisories/GHSA-ch89-5g45-qwc7"/>
        <updated>2023-04-27T19:57:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Wasmtime's implementation of managing per-instance state, such as tables and memories, contains LLVM-level undefined behavior. This undefined behavior was found to cause runtime-level issues when compiled with LLVM 16 which causes some writes, which are critical for correctness, to be optimized away. Vulnerable versions of Wasmtime compiled with Rust 1.70, which is currently in beta, or later are known to have incorrectly compiled functions. Versions of Wasmtime compiled with the current Rust stable release, 1.69, and prior are not known at this time to have any issues, but can theoretically exhibit potential issues.</p>
<p>The underlying problem is that Wasmtime's runtime state for an instance involves a Rust-defined structure called <code>Instance</code> which has a trailing <code>VMContext</code> structure after it. This <code>VMContext</code> structure has a runtime-defined layout that is unique per-module. This representation cannot be expressed with safe code in Rust so <code>unsafe</code> code is required to maintain this state. The code doing this, however, has methods which take <code>&amp;self</code> as an argument but modify data in the <code>VMContext</code> part of the allocation. This means that pointers derived from <code>&amp;self</code> are mutated. This is typically not allowed, except in the presence of <code>UnsafeCell</code>, in Rust. When compiled to LLVM these functions have <code>noalias readonly</code> parameters which means it's UB to write through the pointers.</p>
<p>Wasmtime's internal representation and management of <code>VMContext</code> has been updated to use <code>&amp;mut self</code> methods where appropriate. Additionally verification tools for <code>unsafe</code> code in Rust, such as <code>cargo miri</code>, are planned to be executed on the <code>main</code> branch soon to fix any Rust-level issues that may be exploited in future compiler versions.</p>
<p>Precomplied binaries available for Wasmtime from GitHub releases have been compiled with at most LLVM 15 so are not known to be vulnerable. As mentioned above, however, it's still recommended to update.</p>
<h3 id="patches">Patches</h3>
<p>Wasmtime version 6.0.2, 7.0.1, and 8.0.1 have been issued which contain the patch necessary to work correctly on LLVM 16 and have no known UB on LLVM 15 and earlier.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If Wasmtime is compiled with Rust 1.69 and prior, which use LLVM 15, then there are no known issues. There is a theoretical possibility for UB to exploited, however, so it's recommended that users upgrade to a patched version of Wasmtime. Users using beta Rust (1.70 at this time) or nightly Rust (1.71 at this time) must update to a patched version to work correctly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">GitHub Advisory</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">Mailing list announcement</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-ch89-5g45-qwc7</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/ecK-6G2yi90</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30624">https://nvd.nist.gov/vuln/detail/CVE-2023-30624</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e">https://github.com/bytecodealliance/wasmtime/commit/0977952dcd9d482bff7c288868ccb52769b3a92e</a></li>
<li><a href="https://github.com/advisories/GHSA-ch89-5g45-qwc7">https://github.com/advisories/GHSA-ch89-5g45-qwc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch89-5g45-qwc7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-04-27T17:08:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-sigv4] AWS SDK for Rust will log AWS credentials when TRACE-level logging is enabled for request sending]]></title>
        <id>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</id>
        <link href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9"/>
        <updated>2023-04-26T16:01:11.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>aws_sigv4::SigningParams</code> struct had a derived <code>Debug</code> implementation. When debug-formatted, it would include a user's AWS access key, AWS secret key, and security token in plaintext. When TRACE-level logging is enabled for an SDK, <code>SigningParams</code> is printed, thereby revealing those credentials to anyone with access to logs.</p>
<h3 id="impact">Impact</h3>
<p>All users of the AWS SDK for Rust who enabled TRACE-level logging, either globally (e.g. <code>RUST_LOG=trace</code>), or for the <code>aws-sigv4</code> crate specifically.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Versions &gt;= <code>0.55.1</code></li>
<li><code>0.54.2</code></li>
<li><code>0.53.2</code></li>
<li><code>0.52.1</code></li>
<li><code>0.51.1</code></li>
<li><code>0.50.1</code></li>
<li><code>0.49.1</code></li>
<li><code>0.48.1</code></li>
<li><code>0.47.1</code></li>
<li><code>0.46.1</code></li>
<li><code>0.15.1</code></li>
<li><code>0.14.1</code></li>
<li><code>0.13.1</code></li>
<li><code>0.12.1</code></li>
<li><code>0.11.1</code></li>
<li><code>0.10.2</code></li>
<li><code>0.9.1</code></li>
<li><code>0.8.1</code></li>
<li><code>0.7.1</code></li>
<li><code>0.6.1</code></li>
<li><code>0.5.3</code></li>
<li><code>0.3.1</code></li>
<li><code>0.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Disable TRACE-level logging for AWS Rust SDK crates.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/awslabs/aws-sdk-rust/security/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-30610">https://nvd.nist.gov/vuln/detail/CVE-2023-30610</a></li>
<li><a href="https://github.com/advisories/GHSA-mjv9-vp6w-3rc9">https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjv9-vp6w-3rc9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-26T16:01:10.000Z</published>
    </entry>
</feed>