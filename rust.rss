<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-03-06T04:01:28.276Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping]]></title>
        <id>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</id>
        <link href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw"/>
        <updated>2024-03-05T20:54:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.</p>
<h3 id="details">Details</h3>
<p>In <a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">the patch for CVE-2023-28446</a>, Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.</p>
<p>For example, requesting the read permission with <code>/tmp/hello\u001b[/../../etc/hosts</code> as a path will display the <code>/tmp/hellotc/hosts</code> in the permission prompt, but the actual permission given to the program is <code>/tmp/hello\u001b[/../../etc/hosts</code>, which is <code>/etc/hosts</code> after the normalization.</p>
<p>This difference allows a malicious Deno program to spoof the contents of the permission prompt.</p>
<h3 id="poc">PoC</h3>
<p>Run the following JavaScript and observe that <code>/tmp/hellotc/hosts</code> is displayed in the permission prompt instead of <code>/etc/hosts</code>, although Deno gives access to <code>/etc/hosts</code>.</p>
<pre><code class="language-javascript">const permission = { name: "read", path: "/tmp/hello\u001b[/../../etc/hosts" };
await Deno.permissions.request(permission);
console.log(await Deno.readTextFile("/etc/hosts"));
</code></pre>
<h4 id="expected-prompt">Expected prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/etc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h4 id="actual-prompt">Actual prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/tmp/hellotc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
<li><a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d</a></li>
<li><a href="https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5">https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5</a></li>
<li><a href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:54:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno's Node.js Compatibility Runtime has Cross-Session Data Contamination]]></title>
        <id>https://github.com/advisories/GHSA-wrqv-pf6j-mqjp</id>
        <link href="https://github.com/advisories/GHSA-wrqv-pf6j-mqjp"/>
        <updated>2024-03-05T20:49:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A vulnerability in Deno's Node.js compatibility runtime allows for cross-session data contamination during simultaneous asynchronous reads from Node.js streams sourced from sockets or files. The issue arises from the re-use of a global buffer (BUF) in stream_wrap.ts used as a performance optimization to limit allocations during these asynchronous read operations. This can lead to data intended for one session being received by another session, potentially resulting in data corruption and unexpected behavior.</p>
<h3 id="details">Details</h3>
<p>A bug in Deno's Node.js compatibility runtime results in data cross-reception during simultaneous asynchronous reads from Node.js network streams. When multiple independent network socket connections are involved, this vulnerability can be triggered. For instance, two separate server sockets that receive data from their respective client sockets and then echo the received data back to the client using Node.js streams may experience an issue where data from one socket may appear on another socket. Due to the improper isolation of the global buffer (<code>BUF</code>), data sent by one socket can end up being incorrectly received by another socket. Consequently, data intended for one session may be exposed to another session, potentially leading to data corruption and unexpected behavior.</p>
<p>This buffer was introduced as a performance optimization to avoid excessive allocations during network read operations.</p>
<p>In cases where the <a href="https://nodejs.org/api/net.html">net.Stream</a> is connected to a remote server such as a database or key/value store such as Redis, this may result in a packet received on one connection being presented to another, causing data cross-contamination between multiple users and potentially leaking sensitive information.</p>
<p>It is important to note that this vulnerability does not affect Deno network streams created with the <code>Deno.listen</code> and <code>Deno.connect</code> APIs. </p>
<p>The impact of this issue may extend beyond node.js network streams, however, and may also affect asynchronous reads from non-network node.js Stream such as those created from files.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://github.com/denoland/deno/issues/20188">https://github.com/denoland/deno/issues/20188</a></p>
<h3 id="impact">Impact</h3>
<p>This affects all users of Deno that use the node.js compatibility layer for network communication or other streams, including packages that may require node.js libraries indirectly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-wrqv-pf6j-mqjp">https://github.com/denoland/deno/security/advisories/GHSA-wrqv-pf6j-mqjp</a></li>
<li><a href="https://github.com/denoland/deno/issues/20188">https://github.com/denoland/deno/issues/20188</a></li>
<li><a href="https://github.com/denoland/deno/commit/3e9fb8aafd9834ebacd27734cea4310caaf794c6">https://github.com/denoland/deno/commit/3e9fb8aafd9834ebacd27734cea4310caaf794c6</a></li>
<li><a href="https://github.com/advisories/GHSA-wrqv-pf6j-mqjp">https://github.com/advisories/GHSA-wrqv-pf6j-mqjp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrqv-pf6j-mqjp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:49:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Insufficient permission checking in `Deno.makeTemp*` APIs]]></title>
        <id>https://github.com/advisories/GHSA-hrqr-jv8w-v9jh</id>
        <link href="https://github.com/advisories/GHSA-hrqr-jv8w-v9jh"/>
        <updated>2024-03-05T20:30:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Insufficient validation of parameters in <code>Deno.makeTemp*</code> APIs would allow for creation of files outside of the allowed directories. This may allow the user to overwrite important files on the system that may affect other systems.</p>
<p>A user may provide a prefix or suffix to a <code>Deno.makeTemp*</code> API containing path traversal characters. The permission check would prompt for the base directory of the API, but the final file that was created would be outside of this directory:</p>
<pre><code>$ mkdir /tmp/good
$ mkdir /tmp/bad
$ deno repl --allow-write=/tmp/good
&gt; Deno.makeTempFileSync({ dir: "/tmp/bad" })
┌ ⚠️  Deno requests write access to "/tmp/bad".
├ Requested by `Deno.makeTempFile()` API.
├ Run again with --allow-write to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all write permissions) &gt; n
❌ Denied write access to "/tmp/bad".
Uncaught PermissionDenied: Requires write access to "/tmp/bad", run again with the --allow-write flag
    at Object.makeTempFileSync (ext:deno_fs/30_fs.js:176:10)
    at &lt;anonymous&gt;:1:27
&gt; Deno.makeTempFileSync({ dir: "/tmp/good", prefix: "../bad/" })
"/tmp/good/../bad/a9432ef5"
$ ls -l /tmp/bad/a9432ef5
-rw-------@ 1 user  group  0 Mar  4 09:20 /tmp/bad/a9432ef5
</code></pre>
<h3 id="patches">Patches</h3>
<p>This is fixed in Deno 1.41.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-hrqr-jv8w-v9jh">https://github.com/denoland/deno/security/advisories/GHSA-hrqr-jv8w-v9jh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27931">https://nvd.nist.gov/vuln/detail/CVE-2024-27931</a></li>
<li><a href="https://github.com/advisories/GHSA-hrqr-jv8w-v9jh">https://github.com/advisories/GHSA-hrqr-jv8w-v9jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrqr-jv8w-v9jh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-05T16:19:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mio] Mio's tokens for named pipes may be delivered after deregistration]]></title>
        <id>https://github.com/advisories/GHSA-r8w9-5wcg-vfj7</id>
        <link href="https://github.com/advisories/GHSA-r8w9-5wcg-vfj7"/>
        <updated>2024-03-04T20:44:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using named pipes on Windows, mio will under some circumstances return invalid tokens that correspond to named pipes that have already been deregistered from the mio registry. The impact of this vulnerability depends on how mio is used. For some applications, invalid tokens may be ignored or cause a warning or a crash. On the other hand, for applications that store pointers in the tokens, this vulnerability may result in a use-after-free.</p>
<p>For users of Tokio, this vulnerability is serious and can result in a use-after-free in Tokio.</p>
<p>The vulnerability is Windows-specific, and can only happen if you are using named pipes. Other IO resources are not affected.</p>
<h3 id="affected-versions">Affected versions</h3>
<p>This vulnerability has been fixed in mio v0.8.11.</p>
<p>All versions of mio between v0.7.2 and v0.8.10 are vulnerable.</p>
<p>Tokio is vulnerable when you are using a vulnerable version of mio AND you are using at least Tokio v1.30.0. Versions of Tokio prior to v1.30.0 will ignore invalid tokens, so they are not vulnerable.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Vulnerable libraries that use mio can work around this issue by detecting and ignoring invalid tokens.</p>
<h3 id="technical-details">Technical details</h3>
<p>When an IO resource registered with mio has a readiness event, mio delivers that readiness event to the user using a user-specified token. Mio guarantees that when an IO resource is <a href="https://docs.rs/mio/latest/mio/struct.Registry.html#method.deregister">deregistered</a>, then it will never return the token for that IO resource again. However, for named pipes on windows, mio may sometimes deliver the token for a named pipe even though the named pipe has been previously deregistered.</p>
<p>This vulnerability was originally reported in the Tokio issue tracker: <a href="https://github.com/tokio-rs/tokio/issues/6369">tokio-rs/tokio#6369</a>
This vulnerability was fixed in: <a href="https://github.com/tokio-rs/mio/pull/1760">tokio-rs/mio#1760</a>
This vulnerability is also known as <a href="https://rustsec.org/advisories/RUSTSEC-2024-0019.html">RUSTSEC-2024-0019</a>.</p>
<p>Thank you to @rofoun and @radekvit for discovering and reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/mio/security/advisories/GHSA-r8w9-5wcg-vfj7">https://github.com/tokio-rs/mio/security/advisories/GHSA-r8w9-5wcg-vfj7</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/6369">https://github.com/tokio-rs/tokio/issues/6369</a></li>
<li><a href="https://github.com/tokio-rs/mio/pull/1760">https://github.com/tokio-rs/mio/pull/1760</a></li>
<li><a href="https://github.com/tokio-rs/mio/commit/90d4fe00df870acd3d38f3dc4face9aacab8fbb9">https://github.com/tokio-rs/mio/commit/90d4fe00df870acd3d38f3dc4face9aacab8fbb9</a></li>
<li><a href="https://github.com/advisories/GHSA-r8w9-5wcg-vfj7">https://github.com/advisories/GHSA-r8w9-5wcg-vfj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8w9-5wcg-vfj7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:44:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http] Duplicate Advisory: Integer Overflow in HeaderMap::reserve() can cause Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-xvc9-xwgj-4cq9</id>
        <link href="https://github.com/advisories/GHSA-xvc9-xwgj-4cq9"/>
        <updated>2024-02-21T19:50:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-x7vr-c387-8w57. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>HeaderMap::reserve() used usize::next_power_of_two() to calculate the increased capacity. However, next_power_of_two() silently overflows to 0 if given a sufficiently large number in release mode.</p>
<p>If the map was not empty when the overflow happens, the library will invoke self.grow(0) and start infinite probing. This allows an attacker who controls the argument to reserve() to cause a potential denial of service (DoS).</p>
<p>The flaw was corrected in 0.1.20 release of http crate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25008">https://nvd.nist.gov/vuln/detail/CVE-2019-25008</a></li>
<li><a href="https://github.com/hyperium/http/issues/352">https://github.com/hyperium/http/issues/352</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0033.html">https://rustsec.org/advisories/RUSTSEC-2019-0033.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xvc9-xwgj-4cq9">https://github.com/advisories/GHSA-xvc9-xwgj-4cq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvc9-xwgj-4cq9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-06-16T23:08:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nix] Out-of-bounds Write in nix]]></title>
        <id>https://github.com/advisories/GHSA-76w9-p8mg-j927</id>
        <link href="https://github.com/advisories/GHSA-76w9-p8mg-j927"/>
        <updated>2024-02-21T19:15:13.000Z</updated>
        <content type="html"><![CDATA[<p>On certain platforms, if a user has more than 16 groups, the nix::unistd::getgrouplist function will call the libc getgrouplist function with a length parameter greater than the size of the buffer it provides, resulting in an out-of-bounds write and memory corruption.</p>
<p>The libc getgrouplist function takes an in/out parameter ngroups specifying the size of the group buffer. When the buffer is too small to hold all of the requested user's group memberships, some libc implementations, including glibc and Solaris libc, will modify ngroups to indicate the actual number of groups for the user, in addition to returning an error. The version of nix::unistd::getgrouplist in nix 0.16.0 and up will resize the buffer to twice its size, but will not read or modify the ngroups variable. Thus, if the user has more than twice as many groups as the initial buffer size of 8, the next call to getgrouplist will then write past the end of the buffer.</p>
<p>The issue would require editing /etc/groups to exploit, which is usually only editable by the root user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45707">https://nvd.nist.gov/vuln/detail/CVE-2021-45707</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0119.html">https://rustsec.org/advisories/RUSTSEC-2021-0119.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wgrg-5h56-jg27">https://github.com/advisories/GHSA-wgrg-5h56-jg27</a></li>
<li><a href="https://github.com/nix-rust/nix/issues/1541">https://github.com/nix-rust/nix/issues/1541</a></li>
<li><a href="https://github.com/advisories/GHSA-76w9-p8mg-j927">https://github.com/advisories/GHSA-76w9-p8mg-j927</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76w9-p8mg-j927</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-06T22:07:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nix] Out-of-bounds Write in nix]]></title>
        <id>https://github.com/advisories/GHSA-76w9-p8mg-j927</id>
        <link href="https://github.com/advisories/GHSA-76w9-p8mg-j927"/>
        <updated>2024-02-21T19:15:13.000Z</updated>
        <content type="html"><![CDATA[<p>On certain platforms, if a user has more than 16 groups, the nix::unistd::getgrouplist function will call the libc getgrouplist function with a length parameter greater than the size of the buffer it provides, resulting in an out-of-bounds write and memory corruption.</p>
<p>The libc getgrouplist function takes an in/out parameter ngroups specifying the size of the group buffer. When the buffer is too small to hold all of the requested user's group memberships, some libc implementations, including glibc and Solaris libc, will modify ngroups to indicate the actual number of groups for the user, in addition to returning an error. The version of nix::unistd::getgrouplist in nix 0.16.0 and up will resize the buffer to twice its size, but will not read or modify the ngroups variable. Thus, if the user has more than twice as many groups as the initial buffer size of 8, the next call to getgrouplist will then write past the end of the buffer.</p>
<p>The issue would require editing /etc/groups to exploit, which is usually only editable by the root user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45707">https://nvd.nist.gov/vuln/detail/CVE-2021-45707</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0119.html">https://rustsec.org/advisories/RUSTSEC-2021-0119.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wgrg-5h56-jg27">https://github.com/advisories/GHSA-wgrg-5h56-jg27</a></li>
<li><a href="https://github.com/nix-rust/nix/issues/1541">https://github.com/nix-rust/nix/issues/1541</a></li>
<li><a href="https://github.com/advisories/GHSA-76w9-p8mg-j927">https://github.com/advisories/GHSA-76w9-p8mg-j927</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76w9-p8mg-j927</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-06T22:07:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nix] Out-of-bounds Write in nix]]></title>
        <id>https://github.com/advisories/GHSA-76w9-p8mg-j927</id>
        <link href="https://github.com/advisories/GHSA-76w9-p8mg-j927"/>
        <updated>2024-02-21T19:15:13.000Z</updated>
        <content type="html"><![CDATA[<p>On certain platforms, if a user has more than 16 groups, the nix::unistd::getgrouplist function will call the libc getgrouplist function with a length parameter greater than the size of the buffer it provides, resulting in an out-of-bounds write and memory corruption.</p>
<p>The libc getgrouplist function takes an in/out parameter ngroups specifying the size of the group buffer. When the buffer is too small to hold all of the requested user's group memberships, some libc implementations, including glibc and Solaris libc, will modify ngroups to indicate the actual number of groups for the user, in addition to returning an error. The version of nix::unistd::getgrouplist in nix 0.16.0 and up will resize the buffer to twice its size, but will not read or modify the ngroups variable. Thus, if the user has more than twice as many groups as the initial buffer size of 8, the next call to getgrouplist will then write past the end of the buffer.</p>
<p>The issue would require editing /etc/groups to exploit, which is usually only editable by the root user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45707">https://nvd.nist.gov/vuln/detail/CVE-2021-45707</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/nix/RUSTSEC-2021-0119.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0119.html">https://rustsec.org/advisories/RUSTSEC-2021-0119.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wgrg-5h56-jg27">https://github.com/advisories/GHSA-wgrg-5h56-jg27</a></li>
<li><a href="https://github.com/nix-rust/nix/issues/1541">https://github.com/nix-rust/nix/issues/1541</a></li>
<li><a href="https://github.com/advisories/GHSA-76w9-p8mg-j927">https://github.com/advisories/GHSA-76w9-p8mg-j927</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76w9-p8mg-j927</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-01-06T22:07:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Externally Controlled Format String in Scripting Functions]]></title>
        <id>https://github.com/advisories/GHSA-q3gg-m8hr-h4x4</id>
        <link href="https://github.com/advisories/GHSA-q3gg-m8hr-h4x4"/>
        <updated>2024-02-21T00:04:06.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>rquickjs</code> crate used by SurrealDB implements Rust bindings to the QuickJS C library and is used to execute SurrealDB scripting functions. The <code>rquickjs</code> function <code>Exception::throw_type</code> takes a string and returns an error object. Prior to version <code>0.4.2</code> of the crate, this string would be fed directly into <code>printf</code>, which will receive the error string as a format string with no additional arguments, leading to undefined behavior. This issue triggers when a SurrealDB scripting function returns an error and its input contains a format string such as <code>%s</code> or <code>%d</code>. </p>
<p>This vulnerability can only affect SurrealDB servers explicitly enabling the scripting capability with <code>--allow-scripting</code> or <code>--allow-all</code> and equivalent environment variables <code>SURREAL_CAPS_ALLOW_SCRIPT=true</code> and <code>SURREAL_CAPS_ALLOW_ALL=true</code>.</p>
<h3 id="impact">Impact</h3>
<p>An attacker with privileges to execute scripting functions with arbitrary inputs may be able to exploit this format string vulnerability in order read arbitrary memory from the remote SurrealDB process. A format string vulnerability may also be further exploited to execute arbitrary code with the privileges of the SurrealDB process.</p>
<p>The fact that error messages are limited to 256 bytes coupled with <a href="https://doc.rust-lang.org/rustc/exploit-mitigations.html#exploit-mitigations-1">exploit mitigation features supported in Rust executables</a> may somewhat increase the complexity of exploiting this vulnerability to reliably achieve remote code execution in practice.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.1 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update should restrict access from untrusted users to define and execute scripting functions. This can be achieved by removing the scripting capability by default or with <code>--deny-scripting</code> and equivalent environment variable <code>SURREAL_CAPS_DENY_SCRIPT=true</code>. If not possible, network access should be limited to trusted users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/issues/3327">https://github.com/surrealdb/surrealdb/issues/3327</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3332">https://github.com/surrealdb/surrealdb/pull/3332</a></li>
<li><a href="https://github.com/DelSkayn/rquickjs/pull/247">https://github.com/DelSkayn/rquickjs/pull/247</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-q3gg-m8hr-h4x4">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-q3gg-m8hr-h4x4</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/issues/3327">https://github.com/surrealdb/surrealdb/issues/3327</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3332">https://github.com/surrealdb/surrealdb/pull/3332</a></li>
<li><a href="https://github.com/advisories/GHSA-q3gg-m8hr-h4x4">https://github.com/advisories/GHSA-q3gg-m8hr-h4x4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3gg-m8hr-h4x4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-21T00:04:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception in Macro Expecting Native Function to Exist]]></title>
        <id>https://github.com/advisories/GHSA-6wr5-jmpr-mjcx</id>
        <link href="https://github.com/advisories/GHSA-6wr5-jmpr-mjcx"/>
        <updated>2024-02-21T00:03:07.000Z</updated>
        <content type="html"><![CDATA[<p>The query executor would panic when executing a query containing a call to a built-in SurrealDB function that did not exist. This could occur accidentally in situations where the version of the SurrealDB client was newer than the SurrealDB server or when a pre-parsed query was provided to the server via a newer version of the SurrealDB SDK.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server is able to craft and execute a pre-parsed query invoking a nonexistent built-in function, which will cause a panic. This will crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.2.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#3454</li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65755">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65755</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6wr5-jmpr-mjcx">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6wr5-jmpr-mjcx</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3454">https://github.com/surrealdb/surrealdb/pull/3454</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65755">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65755</a></li>
<li><a href="https://github.com/advisories/GHSA-6wr5-jmpr-mjcx">https://github.com/advisories/GHSA-6wr5-jmpr-mjcx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wr5-jmpr-mjcx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-21T00:03:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception Handling Parsing Errors on Line Terminators]]></title>
        <id>https://github.com/advisories/GHSA-8xff-473h-f863</id>
        <link href="https://github.com/advisories/GHSA-8xff-473h-f863"/>
        <updated>2024-02-21T00:00:55.000Z</updated>
        <content type="html"><![CDATA[<p>The span rendering would panic when handling failed parsing of queries where the error occurred on a line terminator character.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries in a SurrealDB server is able to execute a malformed query which will fail to parse on a line terminator character and cause a panic in the span rendering code. This will crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.2.1 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#3527</li>
<li><a href="https://github.com/StarlaneStudios/Surrealist/issues/177">https://github.com/StarlaneStudios/Surrealist/issues/177</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-8xff-473h-f863">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-8xff-473h-f863</a></li>
<li><a href="https://github.com/StarlaneStudios/Surrealist/issues/177">https://github.com/StarlaneStudios/Surrealist/issues/177</a></li>
<li><a href="https://github.com/advisories/GHSA-8xff-473h-f863">https://github.com/advisories/GHSA-8xff-473h-f863</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xff-473h-f863</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-21T00:00:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[atty] atty potential unaligned read]]></title>
        <id>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</id>
        <link href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr"/>
        <updated>2024-02-14T17:42:45.000Z</updated>
        <content type="html"><![CDATA[<p>On windows, <code>atty</code> dereferences a potentially unaligned pointer.</p>
<p>In practice however, the pointer won't be unaligned unless a custom global allocator is used.</p>
<p>In particular, the <code>System</code> allocator on windows uses <code>HeapAlloc</code>, which guarantees a large enough alignment.</p>
<h1 id="atty-is-unmaintained">atty is Unmaintained</h1>
<p>A Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.</p>
<p>Last release of <code>atty</code> was almost 3 years ago.</p>
<h2 id="possible-alternatives">Possible Alternative(s)</h2>
<p>The below list has not been vetted in any way and may or may not contain alternatives;</p>
<ul>
<li><a href="https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html">std::io::IsTerminal</a> - Stable since Rust 1.70.0</li>
<li><a href="https://crates.io/crates/is-terminal">is-terminal</a> - Standalone crate supporting Rust older than 1.70.0"</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/softprops/atty/issues/50">https://github.com/softprops/atty/issues/50</a></li>
<li><a href="https://github.com/softprops/atty/pull/51">https://github.com/softprops/atty/pull/51</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0145.html">https://rustsec.org/advisories/RUSTSEC-2021-0145.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr">https://github.com/advisories/GHSA-g98v-hv3f-hcfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-30T20:21:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[svix] svix vulnerable to Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-747x-5m58-mq97</id>
        <link href="https://github.com/advisories/GHSA-747x-5m58-mq97"/>
        <updated>2024-02-13T18:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package svix before 1.17.0 are vulnerable to Authentication Bypass due to an issue in the verify function where signatures of different lengths are incorrectly compared. An attacker can bypass signature verification by providing a shorter signature that matches the beginning of the actual signature.</p>
<p><strong>Note:</strong></p>
<p>The attacker would need to know a victim uses the Rust library for verification,no easy way to automatically check that; and uses webhooks by a service that uses Svix, and then figure out a way to craft a malicious payload that will actually include all of the correct identifiers needed to trick the receivers to cause actual issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21491">https://nvd.nist.gov/vuln/detail/CVE-2024-21491</a></li>
<li><a href="https://github.com/svix/svix-webhooks/pull/1190">https://github.com/svix/svix-webhooks/pull/1190</a></li>
<li><a href="https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6">https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0010.html">https://rustsec.org/advisories/RUSTSEC-2024-0010.html</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-SVIX-6230729">https://security.snyk.io/vuln/SNYK-RUST-SVIX-6230729</a></li>
<li><a href="https://github.com/advisories/GHSA-747x-5m58-mq97">https://github.com/advisories/GHSA-747x-5m58-mq97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-747x-5m58-mq97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-13T06:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net2] socket2 invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-458v-4hrf-g3m4</id>
        <link href="https://github.com/advisories/GHSA-458v-4hrf-g3m4"/>
        <updated>2024-02-12T15:55:28.000Z</updated>
        <content type="html"><![CDATA[<p>The socket2 crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35920">https://nvd.nist.gov/vuln/detail/CVE-2020-35920</a></li>
<li><a href="https://github.com/rust-lang/socket2-rs/issues/119">https://github.com/rust-lang/socket2-rs/issues/119</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0079.html">https://rustsec.org/advisories/RUSTSEC-2020-0079.html</a></li>
<li><a href="https://github.com/deprecrated/net2-rs/issues/105">https://github.com/deprecrated/net2-rs/issues/105</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0078.html">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-458v-4hrf-g3m4">https://github.com/advisories/GHSA-458v-4hrf-g3m4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-458v-4hrf-g3m4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:50:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket2] socket2 invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-458v-4hrf-g3m4</id>
        <link href="https://github.com/advisories/GHSA-458v-4hrf-g3m4"/>
        <updated>2024-02-12T15:55:28.000Z</updated>
        <content type="html"><![CDATA[<p>The socket2 crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35920">https://nvd.nist.gov/vuln/detail/CVE-2020-35920</a></li>
<li><a href="https://github.com/rust-lang/socket2-rs/issues/119">https://github.com/rust-lang/socket2-rs/issues/119</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0079.html">https://rustsec.org/advisories/RUSTSEC-2020-0079.html</a></li>
<li><a href="https://github.com/deprecrated/net2-rs/issues/105">https://github.com/deprecrated/net2-rs/issues/105</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0078.html">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-458v-4hrf-g3m4">https://github.com/advisories/GHSA-458v-4hrf-g3m4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-458v-4hrf-g3m4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:50:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use after free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</id>
        <link href="https://github.com/advisories/GHSA-6gvc-4jvj-pwq4"/>
        <updated>2024-02-12T15:52:07.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 2.5.0 for Rust. proplist::Iterator can cause a use-after-free. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25001">https://nvd.nist.gov/vuln/detail/CVE-2018-25001</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0020.html">https://rustsec.org/advisories/RUSTSEC-2018-0020.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6gvc-4jvj-pwq4">https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-30T16:22:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libgit2-sys] libgit2-sys affected by memory corruption, denial of service, and arbitrary code execution in libgit2]]></title>
        <id>https://github.com/advisories/GHSA-22q8-ghmq-63vf</id>
        <link href="https://github.com/advisories/GHSA-22q8-ghmq-63vf"/>
        <updated>2024-02-12T15:42:15.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/libgit2/libgit2/">libgit2</a> project fixed three security issues in the 1.7.2 release. These issues are:</p>
<ul>
<li>The <code>git_revparse_single</code> function can potentially enter an infinite loop on a well-crafted input, potentially causing a Denial of Service. This function is exposed in the <code>git2</code> crate via the <a href="https://docs.rs/git2/latest/git2/struct.Repository.html#method.revparse_single"><code>Repository::revparse_single</code></a> method.</li>
<li>The <code>git_index_add</code> function may cause heap corruption and possibly lead to arbitrary code execution. This function is exposed in the <code>git2</code> crate via the <a href="https://docs.rs/git2/latest/git2/struct.Index.html#method.add"><code>Index::add</code></a> method.</li>
<li>The smart transport negotiation may experience an out-of-bounds read when a remote server did not advertise capabilities.</li>
</ul>
<p>The <code>libgit2-sys</code> crate bundles libgit2, or optionally links to a system libgit2 library. In either case, versions of the libgit2 library less than 1.7.2 are vulnerable. The 0.16.2 release of <code>libgit2-sys</code> bundles the fixed version of 1.7.2, and requires a system libgit2 version of at least 1.7.2.</p>
<p>It is recommended that all users upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/git2-rs/pull/1017">https://github.com/rust-lang/git2-rs/pull/1017</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/commit/9e57876be78924c1e5f3f268bb599e3981fe58bb">https://github.com/rust-lang/git2-rs/commit/9e57876be78924c1e5f3f268bb599e3981fe58bb</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0013.html">https://rustsec.org/advisories/RUSTSEC-2024-0013.html</a></li>
<li><a href="https://github.com/advisories/GHSA-22q8-ghmq-63vf">https://github.com/advisories/GHSA-22q8-ghmq-63vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22q8-ghmq-63vf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-12T15:42:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pqc_kyber] pqc_kyber KyberSlash: division timings depending on secrets]]></title>
        <id>https://github.com/advisories/GHSA-x5j2-g63m-f8g4</id>
        <link href="https://github.com/advisories/GHSA-x5j2-g63m-f8g4"/>
        <updated>2024-02-09T16:19:55.000Z</updated>
        <content type="html"><![CDATA[<p>Various Kyber software libraries in various environments leak secret information into timing, specifically because</p>
<ul>
<li>these libraries include a line of code that divides a secret numerator by a public denominator,</li>
<li>the number of CPU cycles for division in various environments varies depending on the inputs to the division, and</li>
<li>this variation appears within the range of numerators used in these libraries.</li>
</ul>
<p>The KyberSlash pages track which Kyber <a href="https://kyberslash.cr.yp.to/libraries.html">libraries</a> have this issue, and include a <a href="https://kyberslash.cr.yp.to/faq.html">FAQ</a> about the issue.</p>
<h2 id="author">Author</h2>
<p>The KyberSlash pages were written by Daniel J. Bernstein. The FAQ originally said "I", but some people seemed to have trouble finding this authorship statement, so the FAQ now says "Bernstein" instead.</p>
<h2 id="url">URL</h2>
<p>The permanent link for the KyberSlash pages is <a href="https://kyberslash.cr.yp.to">https://kyberslash.cr.yp.to</a>.</p>
<h2 id="mitigation-status-in-qpc_kyber-crate">Mitigation status in qpc_kyber crate</h2>
<p>The issues has not been resolved in the <code>pqc_kyber</code> crate. A third-party fork that mitigates this attack vector has been published as <a href="https://crates.io/crates/safe_pqc_kyber"><code>safe_pqc_kyber</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Argyle-Software/kyber/issues/108">https://github.com/Argyle-Software/kyber/issues/108</a></li>
<li><a href="https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6">https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0079.html">https://rustsec.org/advisories/RUSTSEC-2023-0079.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x5j2-g63m-f8g4">https://github.com/advisories/GHSA-x5j2-g63m-f8g4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5j2-g63m-f8g4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:19:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde-json-wasm] serde-json-wasm stack overflow during recursive JSON parsing]]></title>
        <id>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</id>
        <link href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf"/>
        <updated>2024-02-09T16:03:33.000Z</updated>
        <content type="html"><![CDATA[<p>When parsing untrusted, deeply nested JSON, the stack may overflow, possibly enabling a Denial of Service attack. This was fixed by adding a check for recursion depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620">https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620</a></li>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429">https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0012.html">https://rustsec.org/advisories/RUSTSEC-2024-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf">https://github.com/advisories/GHSA-rr69-rxr6-8qwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde-json-wasm] serde-json-wasm stack overflow during recursive JSON parsing]]></title>
        <id>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</id>
        <link href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf"/>
        <updated>2024-02-09T16:03:33.000Z</updated>
        <content type="html"><![CDATA[<p>When parsing untrusted, deeply nested JSON, the stack may overflow, possibly enabling a Denial of Service attack. This was fixed by adding a check for recursion depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620">https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620</a></li>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429">https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0012.html">https://rustsec.org/advisories/RUSTSEC-2024-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf">https://github.com/advisories/GHSA-rr69-rxr6-8qwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:03:32.000Z</published>
    </entry>
</feed>