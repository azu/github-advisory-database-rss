<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-02-18T20:01:22.336Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[atty] atty potential unaligned read]]></title>
        <id>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</id>
        <link href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr"/>
        <updated>2024-02-14T17:42:45.000Z</updated>
        <content type="html"><![CDATA[<p>On windows, <code>atty</code> dereferences a potentially unaligned pointer.</p>
<p>In practice however, the pointer won't be unaligned unless a custom global allocator is used.</p>
<p>In particular, the <code>System</code> allocator on windows uses <code>HeapAlloc</code>, which guarantees a large enough alignment.</p>
<h1 id="atty-is-unmaintained">atty is Unmaintained</h1>
<p>A Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.</p>
<p>Last release of <code>atty</code> was almost 3 years ago.</p>
<h2 id="possible-alternatives">Possible Alternative(s)</h2>
<p>The below list has not been vetted in any way and may or may not contain alternatives;</p>
<ul>
<li><a href="https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html">std::io::IsTerminal</a> - Stable since Rust 1.70.0</li>
<li><a href="https://crates.io/crates/is-terminal">is-terminal</a> - Standalone crate supporting Rust older than 1.70.0"</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/softprops/atty/issues/50">https://github.com/softprops/atty/issues/50</a></li>
<li><a href="https://github.com/softprops/atty/pull/51">https://github.com/softprops/atty/pull/51</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0145.html">https://rustsec.org/advisories/RUSTSEC-2021-0145.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr">https://github.com/advisories/GHSA-g98v-hv3f-hcfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-30T20:21:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[svix] svix vulnerable to Authentication Bypass]]></title>
        <id>https://github.com/advisories/GHSA-747x-5m58-mq97</id>
        <link href="https://github.com/advisories/GHSA-747x-5m58-mq97"/>
        <updated>2024-02-13T18:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package svix before 1.17.0 are vulnerable to Authentication Bypass due to an issue in the verify function where signatures of different lengths are incorrectly compared. An attacker can bypass signature verification by providing a shorter signature that matches the beginning of the actual signature.</p>
<p><strong>Note:</strong></p>
<p>The attacker would need to know a victim uses the Rust library for verification,no easy way to automatically check that; and uses webhooks by a service that uses Svix, and then figure out a way to craft a malicious payload that will actually include all of the correct identifiers needed to trick the receivers to cause actual issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21491">https://nvd.nist.gov/vuln/detail/CVE-2024-21491</a></li>
<li><a href="https://github.com/svix/svix-webhooks/pull/1190">https://github.com/svix/svix-webhooks/pull/1190</a></li>
<li><a href="https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6">https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0010.html">https://rustsec.org/advisories/RUSTSEC-2024-0010.html</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-SVIX-6230729">https://security.snyk.io/vuln/SNYK-RUST-SVIX-6230729</a></li>
<li><a href="https://github.com/advisories/GHSA-747x-5m58-mq97">https://github.com/advisories/GHSA-747x-5m58-mq97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-747x-5m58-mq97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-13T06:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net2] socket2 invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-458v-4hrf-g3m4</id>
        <link href="https://github.com/advisories/GHSA-458v-4hrf-g3m4"/>
        <updated>2024-02-12T15:55:28.000Z</updated>
        <content type="html"><![CDATA[<p>The socket2 crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35920">https://nvd.nist.gov/vuln/detail/CVE-2020-35920</a></li>
<li><a href="https://github.com/rust-lang/socket2-rs/issues/119">https://github.com/rust-lang/socket2-rs/issues/119</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0079.html">https://rustsec.org/advisories/RUSTSEC-2020-0079.html</a></li>
<li><a href="https://github.com/deprecrated/net2-rs/issues/105">https://github.com/deprecrated/net2-rs/issues/105</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0078.html">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-458v-4hrf-g3m4">https://github.com/advisories/GHSA-458v-4hrf-g3m4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-458v-4hrf-g3m4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:50:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket2] socket2 invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-458v-4hrf-g3m4</id>
        <link href="https://github.com/advisories/GHSA-458v-4hrf-g3m4"/>
        <updated>2024-02-12T15:55:28.000Z</updated>
        <content type="html"><![CDATA[<p>The socket2 crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35920">https://nvd.nist.gov/vuln/detail/CVE-2020-35920</a></li>
<li><a href="https://github.com/rust-lang/socket2-rs/issues/119">https://github.com/rust-lang/socket2-rs/issues/119</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0079.html">https://rustsec.org/advisories/RUSTSEC-2020-0079.html</a></li>
<li><a href="https://github.com/deprecrated/net2-rs/issues/105">https://github.com/deprecrated/net2-rs/issues/105</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0078.html">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-458v-4hrf-g3m4">https://github.com/advisories/GHSA-458v-4hrf-g3m4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-458v-4hrf-g3m4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:50:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use after free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</id>
        <link href="https://github.com/advisories/GHSA-6gvc-4jvj-pwq4"/>
        <updated>2024-02-12T15:52:07.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 2.5.0 for Rust. proplist::Iterator can cause a use-after-free. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25001">https://nvd.nist.gov/vuln/detail/CVE-2018-25001</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0020.html">https://rustsec.org/advisories/RUSTSEC-2018-0020.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6gvc-4jvj-pwq4">https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6gvc-4jvj-pwq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-30T16:22:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libgit2-sys] libgit2-sys affected by memory corruption, denial of service, and arbitrary code execution in libgit2]]></title>
        <id>https://github.com/advisories/GHSA-22q8-ghmq-63vf</id>
        <link href="https://github.com/advisories/GHSA-22q8-ghmq-63vf"/>
        <updated>2024-02-12T15:42:15.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://github.com/libgit2/libgit2/">libgit2</a> project fixed three security issues in the 1.7.2 release. These issues are:</p>
<ul>
<li>The <code>git_revparse_single</code> function can potentially enter an infinite loop on a well-crafted input, potentially causing a Denial of Service. This function is exposed in the <code>git2</code> crate via the <a href="https://docs.rs/git2/latest/git2/struct.Repository.html#method.revparse_single"><code>Repository::revparse_single</code></a> method.</li>
<li>The <code>git_index_add</code> function may cause heap corruption and possibly lead to arbitrary code execution. This function is exposed in the <code>git2</code> crate via the <a href="https://docs.rs/git2/latest/git2/struct.Index.html#method.add"><code>Index::add</code></a> method.</li>
<li>The smart transport negotiation may experience an out-of-bounds read when a remote server did not advertise capabilities.</li>
</ul>
<p>The <code>libgit2-sys</code> crate bundles libgit2, or optionally links to a system libgit2 library. In either case, versions of the libgit2 library less than 1.7.2 are vulnerable. The 0.16.2 release of <code>libgit2-sys</code> bundles the fixed version of 1.7.2, and requires a system libgit2 version of at least 1.7.2.</p>
<p>It is recommended that all users upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/git2-rs/pull/1017">https://github.com/rust-lang/git2-rs/pull/1017</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/commit/9e57876be78924c1e5f3f268bb599e3981fe58bb">https://github.com/rust-lang/git2-rs/commit/9e57876be78924c1e5f3f268bb599e3981fe58bb</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0013.html">https://rustsec.org/advisories/RUSTSEC-2024-0013.html</a></li>
<li><a href="https://github.com/advisories/GHSA-22q8-ghmq-63vf">https://github.com/advisories/GHSA-22q8-ghmq-63vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-22q8-ghmq-63vf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-12T15:42:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pqc_kyber] pqc_kyber KyberSlash: division timings depending on secrets]]></title>
        <id>https://github.com/advisories/GHSA-x5j2-g63m-f8g4</id>
        <link href="https://github.com/advisories/GHSA-x5j2-g63m-f8g4"/>
        <updated>2024-02-09T16:19:55.000Z</updated>
        <content type="html"><![CDATA[<p>Various Kyber software libraries in various environments leak secret information into timing, specifically because</p>
<ul>
<li>these libraries include a line of code that divides a secret numerator by a public denominator,</li>
<li>the number of CPU cycles for division in various environments varies depending on the inputs to the division, and</li>
<li>this variation appears within the range of numerators used in these libraries.</li>
</ul>
<p>The KyberSlash pages track which Kyber <a href="https://kyberslash.cr.yp.to/libraries.html">libraries</a> have this issue, and include a <a href="https://kyberslash.cr.yp.to/faq.html">FAQ</a> about the issue.</p>
<h2 id="author">Author</h2>
<p>The KyberSlash pages were written by Daniel J. Bernstein. The FAQ originally said "I", but some people seemed to have trouble finding this authorship statement, so the FAQ now says "Bernstein" instead.</p>
<h2 id="url">URL</h2>
<p>The permanent link for the KyberSlash pages is <a href="https://kyberslash.cr.yp.to">https://kyberslash.cr.yp.to</a>.</p>
<h2 id="mitigation-status-in-qpc_kyber-crate">Mitigation status in qpc_kyber crate</h2>
<p>The issues has not been resolved in the <code>pqc_kyber</code> crate. A third-party fork that mitigates this attack vector has been published as <a href="https://crates.io/crates/safe_pqc_kyber"><code>safe_pqc_kyber</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Argyle-Software/kyber/issues/108">https://github.com/Argyle-Software/kyber/issues/108</a></li>
<li><a href="https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6">https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0079.html">https://rustsec.org/advisories/RUSTSEC-2023-0079.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x5j2-g63m-f8g4">https://github.com/advisories/GHSA-x5j2-g63m-f8g4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5j2-g63m-f8g4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:19:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde-json-wasm] serde-json-wasm stack overflow during recursive JSON parsing]]></title>
        <id>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</id>
        <link href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf"/>
        <updated>2024-02-09T16:03:33.000Z</updated>
        <content type="html"><![CDATA[<p>When parsing untrusted, deeply nested JSON, the stack may overflow, possibly enabling a Denial of Service attack. This was fixed by adding a check for recursion depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620">https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620</a></li>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429">https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0012.html">https://rustsec.org/advisories/RUSTSEC-2024-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf">https://github.com/advisories/GHSA-rr69-rxr6-8qwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde-json-wasm] serde-json-wasm stack overflow during recursive JSON parsing]]></title>
        <id>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</id>
        <link href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf"/>
        <updated>2024-02-09T16:03:33.000Z</updated>
        <content type="html"><![CDATA[<p>When parsing untrusted, deeply nested JSON, the stack may overflow, possibly enabling a Denial of Service attack. This was fixed by adding a check for recursion depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620">https://github.com/CosmWasm/serde-json-wasm/commit/a9a9b9bf243862bd2afbf6853fca97f30dc4f620</a></li>
<li><a href="https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429">https://github.com/CosmWasm/serde-json-wasm/commit/e78f9e28b3a2151d3175ee88ab2a001bf9515429</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0012.html">https://rustsec.org/advisories/RUSTSEC-2024-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rr69-rxr6-8qwf">https://github.com/advisories/GHSA-rr69-rxr6-8qwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rr69-rxr6-8qwf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-09T16:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[eza] eza Potential Heap Overflow Vulnerability for AArch64]]></title>
        <id>https://github.com/advisories/GHSA-3qx3-6hxr-j2ch</id>
        <link href="https://github.com/advisories/GHSA-3qx3-6hxr-j2ch"/>
        <updated>2024-02-08T18:47:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In <code>eza</code>, there exists a potential heap overflow vulnerability, first seen when using Ubuntu for Raspberry Pi series system, on <code>ubuntu-raspi</code> kernel, relating to the <code>.git</code> directory.</p>
<h3 id="details">Details</h3>
<p>The vulnerability seems to be triggered by the <code>.git</code> directory in some projects. This issue may be related to specific files, and the directory structure also plays a role in triggering the vulnerability. Files/folders that may be involved in triggering the vulnerability include <code>.git/HEAD</code>, <code>.git/refs</code>, and <code>.git/objects</code>.</p>
<p>As @polly pointed out to me, this is likely caused by <a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-j2v7-4f6v-gpg8">GHSA-j2v7-4f6v-gpg8</a>, which we do seem to use currently.</p>
<h3 id="poc">PoC</h3>
<p>For more information check @CuB3y0nd's blogpost <a href="https://www.cubeyond.net/blog/eza-cve-report">blog</a>.</p>
<h3 id="impact">Impact</h3>
<p>Arbitrary code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/eza-community/eza/security/advisories/GHSA-3qx3-6hxr-j2ch">https://github.com/eza-community/eza/security/advisories/GHSA-3qx3-6hxr-j2ch</a></li>
<li><a href="https://github.com/eza-community/eza/commit/47c9b90368c49117ba42760bd58acafa3362cbd4">https://github.com/eza-community/eza/commit/47c9b90368c49117ba42760bd58acafa3362cbd4</a></li>
<li><a href="https://github.com/advisories/GHSA-3qx3-6hxr-j2ch">https://github.com/advisories/GHSA-3qx3-6hxr-j2ch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qx3-6hxr-j2ch</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-08T18:47:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[svix] Svix vulnerable to improper comparison of different-length signatures]]></title>
        <id>https://github.com/advisories/GHSA-w277-wpqf-rcfv</id>
        <link href="https://github.com/advisories/GHSA-w277-wpqf-rcfv"/>
        <updated>2024-02-06T20:30:15.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Webhook::verify</code> function incorrectly compared signatures of different lengths - the two signatures would only be compared up to the length of the shorter signature. This allowed an attacker to pass in <code>v1,</code> as the signature, which would always pass verification.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/svix/svix-webhooks/pull/1190">https://github.com/svix/svix-webhooks/pull/1190</a></li>
<li><a href="https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6">https://github.com/svix/svix-webhooks/commit/958821bd3b956d1436af65f70a0964d4ffb7daf6</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0010.html">https://rustsec.org/advisories/RUSTSEC-2024-0010.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w277-wpqf-rcfv">https://github.com/advisories/GHSA-w277-wpqf-rcfv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w277-wpqf-rcfv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-06T20:30:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Using a Custom Cipher with `NID_undef` may lead to NULL encryption]]></title>
        <id>https://github.com/advisories/GHSA-4f63-89w9-3jjv</id>
        <link href="https://github.com/advisories/GHSA-4f63-89w9-3jjv"/>
        <updated>2024-02-05T17:02:55.000Z</updated>
        <content type="html"><![CDATA[<p>OpenSSL supports creating a custom cipher via the legacy EVP_CIPHER_meth_new() function and associated function calls. This function was deprecated in OpenSSL 3.0 and application authors are instead encouraged to use the new provider mechanism in order to implement custom ciphers. OpenSSL versions 3.0.0 to 3.0.5 incorrectly handle legacy custom ciphers passed to the EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() and EVP_CipherInit_ex2() functions (as well as other similarly named encryption and decryption initialisation functions). Instead of using the custom cipher directly it incorrectly tries to fetch an equivalent cipher from the available providers. An equivalent cipher is found based on the NID passed to EVP_CIPHER_meth_new(). This NID is supposed to represent the unique NID for a given cipher. However it is possible for an application to incorrectly pass NID_undef as this value in the call to EVP_CIPHER_meth_new(). When NID_undef is used in this way the OpenSSL encryption/decryption initialisation function will match the NULL cipher as being equivalent and will fetch this from the available providers. This will succeed if the default provider has been loaded (or if a third party provider has been loaded that offers this cipher). Using the NULL cipher means that the plaintext is emitted as the ciphertext. Applications are only affected by this issue if they call EVP_CIPHER_meth_new() using NID_undef and subsequently use it in a call to an encryption/decryption initialisation function. Applications that only use SSL/TLS are not impacted by this issue. Fixed in OpenSSL 3.0.6 (Affected 3.0.0-3.0.5).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3358">https://nvd.nist.gov/vuln/detail/CVE-2022-3358</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=5485c56679d7c49b96e8fc8ca708b0b7e7c03c4b">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=5485c56679d7c49b96e8fc8ca708b0b7e7c03c4b</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221011.txt">https://www.openssl.org/news/secadv/20221011.txt</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0059.html">https://rustsec.org/advisories/RUSTSEC-2022-0059.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221028-0014/">https://security.netapp.com/advisory/ntap-20221028-0014/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023</a></li>
<li><a href="https://security.gentoo.org/glsa/202402-08">https://security.gentoo.org/glsa/202402-08</a></li>
<li><a href="https://github.com/advisories/GHSA-4f63-89w9-3jjv">https://github.com/advisories/GHSA-4f63-89w9-3jjv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4f63-89w9-3jjv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-11T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Permit load cell data from memory]]></title>
        <id>https://github.com/advisories/GHSA-29c2-65rj-h343</id>
        <link href="https://github.com/advisories/GHSA-29c2-65rj-h343"/>
        <updated>2024-02-03T00:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The faulty nodes will reject transactions which calls <code>load_cell_data</code> syscall but the input cell is still in the mempool. They also ban other nodes and cause the network separation.</p>
<h3 id="patches">Patches</h3>
<p>0.35.2, 0.36.1, 0.37.1, 0.38.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6">https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2">https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771">https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f">https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738">https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738</a></li>
<li><a href="https://github.com/advisories/GHSA-29c2-65rj-h343">https://github.com/advisories/GHSA-29c2-65rj-h343</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29c2-65rj-h343</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Permit load cell data from memory]]></title>
        <id>https://github.com/advisories/GHSA-29c2-65rj-h343</id>
        <link href="https://github.com/advisories/GHSA-29c2-65rj-h343"/>
        <updated>2024-02-03T00:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The faulty nodes will reject transactions which calls <code>load_cell_data</code> syscall but the input cell is still in the mempool. They also ban other nodes and cause the network separation.</p>
<h3 id="patches">Patches</h3>
<p>0.35.2, 0.36.1, 0.37.1, 0.38.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6">https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2">https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771">https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f">https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738">https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738</a></li>
<li><a href="https://github.com/advisories/GHSA-29c2-65rj-h343">https://github.com/advisories/GHSA-29c2-65rj-h343</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29c2-65rj-h343</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Permit load cell data from memory]]></title>
        <id>https://github.com/advisories/GHSA-29c2-65rj-h343</id>
        <link href="https://github.com/advisories/GHSA-29c2-65rj-h343"/>
        <updated>2024-02-03T00:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The faulty nodes will reject transactions which calls <code>load_cell_data</code> syscall but the input cell is still in the mempool. They also ban other nodes and cause the network separation.</p>
<h3 id="patches">Patches</h3>
<p>0.35.2, 0.36.1, 0.37.1, 0.38.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6">https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2">https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771">https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f">https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738">https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738</a></li>
<li><a href="https://github.com/advisories/GHSA-29c2-65rj-h343">https://github.com/advisories/GHSA-29c2-65rj-h343</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29c2-65rj-h343</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Permit load cell data from memory]]></title>
        <id>https://github.com/advisories/GHSA-29c2-65rj-h343</id>
        <link href="https://github.com/advisories/GHSA-29c2-65rj-h343"/>
        <updated>2024-02-03T00:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The faulty nodes will reject transactions which calls <code>load_cell_data</code> syscall but the input cell is still in the mempool. They also ban other nodes and cause the network separation.</p>
<h3 id="patches">Patches</h3>
<p>0.35.2, 0.36.1, 0.37.1, 0.38.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6">https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2">https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771">https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f">https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738">https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738</a></li>
<li><a href="https://github.com/advisories/GHSA-29c2-65rj-h343">https://github.com/advisories/GHSA-29c2-65rj-h343</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29c2-65rj-h343</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Permit load cell data from memory]]></title>
        <id>https://github.com/advisories/GHSA-29c2-65rj-h343</id>
        <link href="https://github.com/advisories/GHSA-29c2-65rj-h343"/>
        <updated>2024-02-03T00:29:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The faulty nodes will reject transactions which calls <code>load_cell_data</code> syscall but the input cell is still in the mempool. They also ban other nodes and cause the network separation.</p>
<h3 id="patches">Patches</h3>
<p>0.35.2, 0.36.1, 0.37.1, 0.38.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-29c2-65rj-h343</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6">https://github.com/nervosnetwork/ckb/commit/277061867eb7d2766fa6737c8bf00684fc2462a6</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2">https://github.com/nervosnetwork/ckb/commit/37d60d581c6713d3aca1a57018eaea45447ae0b2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771">https://github.com/nervosnetwork/ckb/commit/8f115b387f8f60f938bce4591f26cd78430b8771</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f">https://github.com/nervosnetwork/ckb/commit/91efb7b6b4329d70d60eee91d5239a2de9b0d99f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738">https://github.com/nervosnetwork/ckb/commit/97647408ee9dbf525f6c678796e770887c9f8738</a></li>
<li><a href="https://github.com/advisories/GHSA-29c2-65rj-h343">https://github.com/advisories/GHSA-29c2-65rj-h343</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29c2-65rj-h343</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Pool does not remove the conflicting transactions from the statistics ]]></title>
        <id>https://github.com/advisories/GHSA-h4c3-5275-vrmg</id>
        <link href="https://github.com/advisories/GHSA-h4c3-5275-vrmg"/>
        <updated>2024-02-03T00:29:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There's a bug in the pool statistics that when conflicting transactions are removed from the pool, they are not subtracted from the statics. Finally, the transaction pool keeps full and reject all transactions.</p>
<h3 id="patches">Patches</h3>
<p>0.39.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>Restart the CKB node.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-h4c3-5275-vrmg">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-h4c3-5275-vrmg</a></li>
<li><a href="https://github.com/advisories/GHSA-h4c3-5275-vrmg">https://github.com/advisories/GHSA-h4c3-5275-vrmg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4c3-5275-vrmg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:29:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use after free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-f56g-chqp-22m9</id>
        <link href="https://github.com/advisories/GHSA-f56g-chqp-22m9"/>
        <updated>2024-02-03T00:28:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Version 2.5.0 of the <code>libpulse-binding</code> Rust crate, released on the 22nd of December 2018, fixed a potential use-after-free issue with property list iteration due to a lack of a lifetime constraint tying the lifetime of a <code>proplist::Iterator</code> to the <code>Proplist</code> object for which it was created. This made it possible for users, without experiencing a compiler error/warning, to destroy the <code>Proplist</code> object before the iterator, thus destroying the underlying C object the iterator works upon, before the iterator may be finished with it.</p>
<p>This advisory is being written retrospectively, having previously only been noted in the changelog. No CVE assignment was sought.</p>
<p>This impacts all versions of the crate before 2.5.0 back to 1.0.5. Before version 1.0.5 the function that produces the iterator was broken to the point of being useless.</p>
<h3 id="patches">Patches</h3>
<p>Users are required to update to version 2.5.0 or newer.</p>
<p>Versions older than 2.5.0 have been yanked from crates.io as of the 22nd of October 2020.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-f56g-chqp-22m9">https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-f56g-chqp-22m9</a></li>
<li><a href="https://github.com/jnqnfe/pulse-binding-rust/commit/9e31c82d71749619387cb9d0c9698134d05b28c9">https://github.com/jnqnfe/pulse-binding-rust/commit/9e31c82d71749619387cb9d0c9698134d05b28c9</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0020.html">https://rustsec.org/advisories/RUSTSEC-2018-0020.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f56g-chqp-22m9">https://github.com/advisories/GHSA-f56g-chqp-22m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f56g-chqp-22m9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-03T00:28:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB Transaction which calls syscall load_cell_data_hash has nondeterministic result]]></title>
        <id>https://github.com/advisories/GHSA-q73f-w3h7-7wcc</id>
        <link href="https://github.com/advisories/GHSA-q73f-w3h7-7wcc"/>
        <updated>2024-02-03T00:18:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Tx-pool verify transaction which inputs' script contains <code>load_cell_data_hash</code> is nondeterministic</p>
<h3 id="workarounds">Workarounds</h3>
<p>Enforce tx-pool ResolvedTrascation inputs' load data is none.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-q73f-w3h7-7wcc">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-q73f-w3h7-7wcc</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/01eb5b2ecadf7e421b117d6c013e182978746e2f">https://github.com/nervosnetwork/ckb/commit/01eb5b2ecadf7e421b117d6c013e182978746e2f</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/fe83220905599e72c97878295f4769e91348d738">https://github.com/nervosnetwork/ckb/commit/fe83220905599e72c97878295f4769e91348d738</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/commit/ff88b48779358e038209f3ac1bc1061e6f4deb13">https://github.com/nervosnetwork/ckb/commit/ff88b48779358e038209f3ac1bc1061e6f4deb13</a></li>
<li><a href="https://github.com/advisories/GHSA-q73f-w3h7-7wcc">https://github.com/advisories/GHSA-q73f-w3h7-7wcc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q73f-w3h7-7wcc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-03T00:18:13.000Z</published>
    </entry>
</feed>