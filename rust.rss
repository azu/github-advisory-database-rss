<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-06-15T10:01:46.943Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[ink_env] ink! vulnerable to incorrect decoding of storage value when using `DelegateCall`]]></title>
        <id>https://github.com/advisories/GHSA-853p-5678-hv8f</id>
        <link href="https://github.com/advisories/GHSA-853p-5678-hv8f"/>
        <updated>2023-06-14T23:09:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The return value when using delegate call mechanics, either through <a href="https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate"><code>CallBuilder::delegate</code></a> or <a href="https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html"><code>ink_env::invoke_contract_delegate</code></a>, is being decoded incorrectly.</p>
<h3 id="description">Description</h3>
<p>Consider this minimal example:</p>
<pre><code class="language-rust">// First contract, this will be performing a delegate call to the `Callee`.
#[ink(storage)]
pub struct Caller {
    value: u128,
}

#[ink(message)]
pub fn get_value(&amp;self, callee_code_hash: Hash) -&gt; u128 {
    let result = build_call::&lt;DefaultEnvironment&gt;()
        .delegate(callee_code_hash)
        .exec_input(ExecutionInput::new(Selector::new(ink::selector_bytes!(
            "get_value"
        ))))
        .returns::&lt;u128&gt;()
        .invoke();

    result
}

// Different contract, using this code hash for the delegate call.
#[ink(storage)]
pub struct Callee {
    value: u128,
}

#[ink(message)]
pub fn get_value(&amp;self) -&gt; u128 {
    self.value
}
</code></pre>
<p>In this example we are executing the <code>Callee</code> code in the context of the <code>Caller</code> contract. This means we'll be using the storage values of the <code>Caller</code> contract.</p>
<p>Running this code we expect the delegate call to return <code>value</code> as it was stored in the <code>Caller</code> contract. However, due to the reported bug a different value is returned (for the case of <code>uint</code>s it is <code>256</code> times the expected value).</p>
<h3 id="impact">Impact</h3>
<p>After conducting an analysis of the on-chain deployments of ink! contracts on Astar, Shiden and Aleph Zero, we have found that no contracts on those chains have been affected by the issue.</p>
<p>This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of <a href="https://github.com/paritytech/ink/pull/1450">https://github.com/paritytech/ink/pull/1450</a>. Since this feature was only released in ink! 4.0.0 no previous versions are affected.</p>
<h3 id="mitigations">Mitigations</h3>
<p>If you have an ink! 4.x series contract, please update it to the <a href="https://github.com/paritytech/ink/releases/tag/v4.2.1">4.2.1</a> patch release that we just published. </p>
<h3 id="credits">Credits</h3>
<p>Thank you Facundo Lerena from <a href="https://www.coinfabrik.com">CoinFabrik</a> for reporting this problem in a well-structured and responsible way.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f">https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f</a></li>
<li><a href="https://github.com/paritytech/ink/pull/1450">https://github.com/paritytech/ink/pull/1450</a></li>
<li><a href="https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db">https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db</a></li>
<li><a href="https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate">https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate</a></li>
<li><a href="https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html">https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34449">https://nvd.nist.gov/vuln/detail/CVE-2023-34449</a></li>
<li><a href="https://github.com/advisories/GHSA-853p-5678-hv8f">https://github.com/advisories/GHSA-853p-5678-hv8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-853p-5678-hv8f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-14T20:11:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ink] ink! vulnerable to incorrect decoding of storage value when using `DelegateCall`]]></title>
        <id>https://github.com/advisories/GHSA-853p-5678-hv8f</id>
        <link href="https://github.com/advisories/GHSA-853p-5678-hv8f"/>
        <updated>2023-06-14T23:09:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The return value when using delegate call mechanics, either through <a href="https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate"><code>CallBuilder::delegate</code></a> or <a href="https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html"><code>ink_env::invoke_contract_delegate</code></a>, is being decoded incorrectly.</p>
<h3 id="description">Description</h3>
<p>Consider this minimal example:</p>
<pre><code class="language-rust">// First contract, this will be performing a delegate call to the `Callee`.
#[ink(storage)]
pub struct Caller {
    value: u128,
}

#[ink(message)]
pub fn get_value(&amp;self, callee_code_hash: Hash) -&gt; u128 {
    let result = build_call::&lt;DefaultEnvironment&gt;()
        .delegate(callee_code_hash)
        .exec_input(ExecutionInput::new(Selector::new(ink::selector_bytes!(
            "get_value"
        ))))
        .returns::&lt;u128&gt;()
        .invoke();

    result
}

// Different contract, using this code hash for the delegate call.
#[ink(storage)]
pub struct Callee {
    value: u128,
}

#[ink(message)]
pub fn get_value(&amp;self) -&gt; u128 {
    self.value
}
</code></pre>
<p>In this example we are executing the <code>Callee</code> code in the context of the <code>Caller</code> contract. This means we'll be using the storage values of the <code>Caller</code> contract.</p>
<p>Running this code we expect the delegate call to return <code>value</code> as it was stored in the <code>Caller</code> contract. However, due to the reported bug a different value is returned (for the case of <code>uint</code>s it is <code>256</code> times the expected value).</p>
<h3 id="impact">Impact</h3>
<p>After conducting an analysis of the on-chain deployments of ink! contracts on Astar, Shiden and Aleph Zero, we have found that no contracts on those chains have been affected by the issue.</p>
<p>This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of <a href="https://github.com/paritytech/ink/pull/1450">https://github.com/paritytech/ink/pull/1450</a>. Since this feature was only released in ink! 4.0.0 no previous versions are affected.</p>
<h3 id="mitigations">Mitigations</h3>
<p>If you have an ink! 4.x series contract, please update it to the <a href="https://github.com/paritytech/ink/releases/tag/v4.2.1">4.2.1</a> patch release that we just published. </p>
<h3 id="credits">Credits</h3>
<p>Thank you Facundo Lerena from <a href="https://www.coinfabrik.com">CoinFabrik</a> for reporting this problem in a well-structured and responsible way.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f">https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f</a></li>
<li><a href="https://github.com/paritytech/ink/pull/1450">https://github.com/paritytech/ink/pull/1450</a></li>
<li><a href="https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db">https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db</a></li>
<li><a href="https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate">https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate</a></li>
<li><a href="https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html">https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34449">https://nvd.nist.gov/vuln/detail/CVE-2023-34449</a></li>
<li><a href="https://github.com/advisories/GHSA-853p-5678-hv8f">https://github.com/advisories/GHSA-853p-5678-hv8f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-853p-5678-hv8f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-14T20:11:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net2] `net2` invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-c79c-gwph-gqfm</id>
        <link href="https://github.com/advisories/GHSA-c79c-gwph-gqfm"/>
        <updated>2023-06-14T16:02:28.000Z</updated>
        <content type="html"><![CDATA[<p>The net2 crate has assumed std::net::SocketAddrV4 and std::net::SocketAddrV6 have the same memory layout as the system C representation sockaddr. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35919">https://nvd.nist.gov/vuln/detail/CVE-2020-35919</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0078.html">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>
<li><a href="https://github.com/deprecrated/net2-rs/issues/105">https://github.com/deprecrated/net2-rs/issues/105</a></li>
<li><a href="https://github.com/advisories/GHSA-c79c-gwph-gqfm">https://github.com/advisories/GHSA-c79c-gwph-gqfm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c79c-gwph-gqfm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:37:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xml-rs] xml-rs vulnerable to denial of service via invalid token in XML document]]></title>
        <id>https://github.com/advisories/GHSA-7gf7-jv65-wjmh</id>
        <link href="https://github.com/advisories/GHSA-7gf7-jv65-wjmh"/>
        <updated>2023-06-13T22:40:02.000Z</updated>
        <content type="html"><![CDATA[<p>The xml-rs crate &gt;= 0.8.9 and &lt; 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid &lt;! token (such as &lt;!DOCTYPEs/%&lt;!A nesting) in an XML document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34411">https://nvd.nist.gov/vuln/detail/CVE-2023-34411</a></li>
<li><a href="https://github.com/netvl/xml-rs/pull/226">https://github.com/netvl/xml-rs/pull/226</a></li>
<li><a href="https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f">https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f</a></li>
<li><a href="https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c">https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c</a></li>
<li><a href="https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14">https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14</a></li>
<li><a href="https://github.com/netvl/xml-rs/commit/014d808be900c85a0afc5ccdfe668be040d175aa">https://github.com/netvl/xml-rs/commit/014d808be900c85a0afc5ccdfe668be040d175aa</a></li>
<li><a href="https://github.com/advisories/GHSA-7gf7-jv65-wjmh">https://github.com/advisories/GHSA-7gf7-jv65-wjmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7gf7-jv65-wjmh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-05T06:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Out-of-bounds read/write and invalid free with `externref`s and GC safepoints in Wasmtime ]]></title>
        <id>https://github.com/advisories/GHSA-4873-36h9-wv49</id>
        <link href="https://github.com/advisories/GHSA-4873-36h9-wv49"/>
        <updated>2023-06-13T22:33:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was an invalid free and out-of-bounds read and write bug when running Wasm that uses <code>externref</code>s in Wasmtime.</p>
<p>To trigger this bug, Wasmtime needs to be running Wasm that uses <code>externref</code>s, the host creates non-null <code>externrefs</code>, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where</p>
<ul>
<li>there are no live references at this safepoint, and</li>
<li>there is a safepoint with live references earlier in this frame's function.</li>
</ul>
<p>Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as <code>externref</code>s that needed to be rooted for GC. At the <em>next</em> GC, it would be determined that nothing was referencing these bogus <code>externref</code>s (because nothing could ever reference them, because they are not really <code>externref</code>s) and then Wasmtime would deallocate them and run <code>&lt;ExternRef as Drop&gt;::drop</code> on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.</p>
<p>Even though support for <code>externref</code>s (via the reference types proposal) is enabled by default, unless you are creating non-null <code>externref</code>s in your host code or explicitly triggering GCs, you cannot be affected by this bug.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The Wasm reference types proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c">https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39218">https://nvd.nist.gov/vuln/detail/CVE-2021-39218</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4873-36h9-wv49">https://github.com/advisories/GHSA-4873-36h9-wv49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4873-36h9-wv49</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wrong type for `Linker`-define functions when used across two `Engine`s]]></title>
        <id>https://github.com/advisories/GHSA-q879-9g95-56mx</id>
        <link href="https://github.com/advisories/GHSA-q879-9g95-56mx"/>
        <updated>2023-06-13T22:33:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>As a Rust library the <code>wasmtime</code> crate clearly marks which functions are safe and which are <code>unsafe</code>, guaranteeing that if consumers never use <code>unsafe</code> then it should not be possible to have memory unsafety issues in their embeddings of Wasmtime. An issue was discovered in the safe API of <code>Linker::func_*</code> APIs. These APIs were previously not sound when one <code>Engine</code> was used to create the <code>Linker</code> and then a different <code>Engine</code> was used to create a <code>Store</code> and then the <code>Linker</code> was used to instantiate a module into that <code>Store</code>. Cross-<code>Engine</code> usage of functions is not supported in Wasmtime and this can result in type confusion of function pointers, resulting in being able to safely call a function with the wrong type.</p>
<p>Triggering this bug requires using at least two <code>Engine</code> values in an embedding and then additionally using two different values with a <code>Linker</code> (one at the creation time of the <code>Linker</code> and another when instantiating a module with the <code>Linker</code>).</p>
<p>It's expected that usage of more-than-one <code>Engine</code> in an embedding is relatively rare since an <code>Engine</code> is intended to be a globally shared resource, so the expectation is that the impact of this issue is relatively small.</p>
<p>The fix implemented is to change this behavior to <code>panic!()</code> in Rust instead of silently allowing it. Using different <code>Engine</code> instances with a <code>Linker</code> is a programmer bug that <code>wasmtime</code> catches at runtime.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime and are using more than one <code>Engine</code> in your embedding it's recommended to instead use only one <code>Engine</code> for the entire program if possible. An <code>Engine</code> is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple <code>Engine</code>s is required then code should be audited to ensure that <code>Linker</code> is only used with one <code>Engine</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-q879-9g95-56mx</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff">https://github.com/bytecodealliance/wasmtime/commit/b39f087414f27ae40c44449ed5d1154e03449bff</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39219">https://nvd.nist.gov/vuln/detail/CVE-2021-39219</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q879-9g95-56mx">https://github.com/advisories/GHSA-q879-9g95-56mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q879-9g95-56mx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free passing `externref`s to Wasm in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</id>
        <link href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf"/>
        <updated>2023-06-13T22:32:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was a use-after-free bug when passing <code>externref</code>s from the host to guest Wasm content.</p>
<p>To trigger the bug, you have to explicitly pass multiple <code>externref</code>s from the host to a Wasm instance at the same time, either by</p>
<ul>
<li>passing multiple <code>externref</code>s as arguments from host code to a Wasm function,</li>
<li>or returning multiple <code>externref</code>s to Wasm from a multi-value return function defined in the host.</li>
</ul>
<p>If you do not have host code that matches one of these shapes, then you are not impacted.</p>
<p>If Wasmtime's <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/crates/runtime/src/externref.rs#L493"><code>VMExternRefActivationsTable</code></a> became filled to capacity after passing the first <code>externref</code> in, then passing in the second <code>externref</code> could trigger a garbage collection. However the first <code>externref</code> is not rooted until we pass control to Wasm, and therefore could be reclaimed by the collector if nothing else was holding a reference to it or otherwise keeping it alive. Then, when control was passed to Wasm after the garbage collection, Wasm could use the first <code>externref</code>, which at this point has already been freed.</p>
<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed, and users should upgrade to Wasmtime 0.30.0.</p>
<p>Additionally, we have updated <a href="https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade Wasmtime yet, you can avoid the bug by disabling reference types support in Wasmtime by passing <code>false</code> to <a href="https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types"><code>wasmtime::Config::wasm_reference_types</code></a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/WebAssembly/reference-types/">The reference types Wasm proposal, which introduces <code>externref</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the <code>bytecodealliance/wasmtime</code> repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-v4cp-h94r-m7xf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3">https://github.com/bytecodealliance/wasmtime/commit/101998733b74624cbd348a2366d05760b40181f3</a></li>
<li><a href="https://crates.io/crates/wasmtime">https://crates.io/crates/wasmtime</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39216">https://nvd.nist.gov/vuln/detail/CVE-2021-39216</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0110.html">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v4cp-h94r-m7xf">https://github.com/advisories/GHSA-v4cp-h94r-m7xf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4cp-h94r-m7xf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:54:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[toodee] Uninitialized memory access in toodee]]></title>
        <id>https://github.com/advisories/GHSA-xm9m-2vj8-fmfr</id>
        <link href="https://github.com/advisories/GHSA-xm9m-2vj8-fmfr"/>
        <updated>2023-06-13T22:30:52.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the toodee crate before 0.3.0 for Rust. The row-insertion feature allows attackers to read the contents of uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-28029">https://nvd.nist.gov/vuln/detail/CVE-2021-28029</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0028.html">https://rustsec.org/advisories/RUSTSEC-2021-0028.html</a></li>
<li><a href="https://github.com/antonmarsden/toodee/issues/13">https://github.com/antonmarsden/toodee/issues/13</a></li>
<li><a href="https://github.com/advisories/GHSA-xm9m-2vj8-fmfr">https://github.com/advisories/GHSA-xm9m-2vj8-fmfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xm9m-2vj8-fmfr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-01T18:30:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xcb] Unchecked Return Value in xcb]]></title>
        <id>https://github.com/advisories/GHSA-3cj3-jrrp-9rxf</id>
        <link href="https://github.com/advisories/GHSA-3cj3-jrrp-9rxf"/>
        <updated>2023-06-13T22:30:03.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because transmutation to the wrong type can happen after xcb::base::cast_event uses std::mem::transmute to return a reference to an arbitrary type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26958">https://nvd.nist.gov/vuln/detail/CVE-2021-26958</a></li>
<li><a href="https://github.com/RustSec/advisory-db/issues/653">https://github.com/RustSec/advisory-db/issues/653</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0019.html">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3cj3-jrrp-9rxf">https://github.com/advisories/GHSA-3cj3-jrrp-9rxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cj3-jrrp-9rxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:53:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xcb] Arbitrary return types in xcb]]></title>
        <id>https://github.com/advisories/GHSA-mp6r-fgw2-rxfx</id>
        <link href="https://github.com/advisories/GHSA-mp6r-fgw2-rxfx"/>
        <updated>2023-06-13T22:28:56.000Z</updated>
        <content type="html"><![CDATA[<p>The function xcb::xproto::GetPropertyReply::value() returns a slice of type T where T is an unconstrained type parameter. The raw bytes received from the X11 server are interpreted as the requested type. The users of the xcb crate are advised to only call this function with the intended types. These are u8, u16, and u32.</p>
<p>This issue is tracked here: <a href="https://github.com/rust-x-bindings/rust-xcb/issues/95">https://github.com/rust-x-bindings/rust-xcb/issues/95</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26956">https://nvd.nist.gov/vuln/detail/CVE-2021-26956</a></li>
<li><a href="https://github.com/RustSec/advisory-db/issues/653">https://github.com/RustSec/advisory-db/issues/653</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0019.html">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>
<li><a href="https://github.com/rust-x-bindings/rust-xcb/issues/95">https://github.com/rust-x-bindings/rust-xcb/issues/95</a></li>
<li><a href="https://github.com/advisories/GHSA-mp6r-fgw2-rxfx">https://github.com/advisories/GHSA-mp6r-fgw2-rxfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp6r-fgw2-rxfx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:53:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trust-dns-server] Stack consumption in trust-dns-server]]></title>
        <id>https://github.com/advisories/GHSA-4cww-f7w5-x525</id>
        <link href="https://github.com/advisories/GHSA-4cww-f7w5-x525"/>
        <updated>2023-06-13T22:25:57.000Z</updated>
        <content type="html"><![CDATA[<p>There's a stack overflow leading to a crash and potential DOS when processing additional records for return of MX or SRV record types from the server. This is only possible when a zone is configured with a null target for MX or SRV records. Prior to 0.16.0 the additional record processing was not supported by trust-dns-server. There Are no known issues with upgrading from 0.16 or 0.17 to 0.18.1. The remidy should be to upgrade to 0.18.1. If unable to do so, MX, SRV or other record types with a target to the null type, should be avoided.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35857">https://nvd.nist.gov/vuln/detail/CVE-2020-35857</a></li>
<li><a href="https://github.com/bluejekyll/trust-dns/issues/980">https://github.com/bluejekyll/trust-dns/issues/980</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0001.html">https://rustsec.org/advisories/RUSTSEC-2020-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4cww-f7w5-x525">https://github.com/advisories/GHSA-4cww-f7w5-x525</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4cww-f7w5-x525</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:46:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xcb] Out of bounds read in xcb]]></title>
        <id>https://github.com/advisories/GHSA-2xpg-3hx4-fm9r</id>
        <link href="https://github.com/advisories/GHSA-2xpg-3hx4-fm9r"/>
        <updated>2023-06-13T22:24:03.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because there is an out-of-bounds read in xcb::xproto::change_property(), as demonstrated by a format=32 T=u8 situation where out-of-bounds bytes are sent to an X server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26957">https://nvd.nist.gov/vuln/detail/CVE-2021-26957</a></li>
<li><a href="https://github.com/RustSec/advisory-db/issues/653">https://github.com/RustSec/advisory-db/issues/653</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0019.html">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2xpg-3hx4-fm9r">https://github.com/advisories/GHSA-2xpg-3hx4-fm9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xpg-3hx4-fm9r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:53:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</id>
        <link href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg"/>
        <updated>2023-06-13T22:12:22.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>
<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<p>See <a href="https://github.com/tower-rs/tower-http/pull/204">tower-http#204</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0043.html">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T15:36:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</id>
        <link href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg"/>
        <updated>2023-06-13T22:12:22.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>
<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<p>See <a href="https://github.com/tower-rs/tower-http/pull/204">tower-http#204</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0043.html">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T15:36:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-wwh2-r387-g5rm</id>
        <link href="https://github.com/advisories/GHSA-wwh2-r387-g5rm"/>
        <updated>2023-06-13T22:06:25.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0135.html">https://rustsec.org/advisories/RUSTSEC-2021-0135.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wwh2-r387-g5rm">https://github.com/advisories/GHSA-wwh2-r387-g5rm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwh2-r387-g5rm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-17T00:26:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-wwh2-r387-g5rm</id>
        <link href="https://github.com/advisories/GHSA-wwh2-r387-g5rm"/>
        <updated>2023-06-13T22:06:25.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem. This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0135.html">https://rustsec.org/advisories/RUSTSEC-2021-0135.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wwh2-r387-g5rm">https://github.com/advisories/GHSA-wwh2-r387-g5rm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wwh2-r387-g5rm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-17T00:26:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sys-info] Double free in sys-info ]]></title>
        <id>https://github.com/advisories/GHSA-2f5j-3mhq-xv58</id>
        <link href="https://github.com/advisories/GHSA-2f5j-3mhq-xv58"/>
        <updated>2023-06-13T22:04:50.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of sys-info use a static, global, list to store temporary disk information while running. The function that cleans up this list, DFCleanup, assumes a single threaded environment and will try to free the same memory twice in a multithreaded environment. This results in consistent double-frees and segfaults when calling sys_info::disk_info from multiple threads at once. The issue was fixed by moving the global variable into a local scope.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36434">https://nvd.nist.gov/vuln/detail/CVE-2020-36434</a></li>
<li><a href="https://github.com/FillZpp/sys-info-rs/issues/63">https://github.com/FillZpp/sys-info-rs/issues/63</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/sys-info/RUSTSEC-2020-0100.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/sys-info/RUSTSEC-2020-0100.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0100.html">https://rustsec.org/advisories/RUSTSEC-2020-0100.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2f5j-3mhq-xv58">https://github.com/advisories/GHSA-2f5j-3mhq-xv58</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2f5j-3mhq-xv58</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:58:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] Race Condition in tokio]]></title>
        <id>https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</id>
        <link href="https://github.com/advisories/GHSA-fg7r-2g4j-5cgr"/>
        <updated>2023-06-13T22:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>If a tokio::sync::oneshot channel is closed (via the oneshot::Receiver::close method), a data race may occur if the oneshot::Sender::send method is called while the corresponding oneshot::Receiver is awaited or calling try_recv.</p>
<p>When these methods are called concurrently on a closed channel, the two halves of the channel can concurrently access a shared memory location, resulting in a data race. This has been observed to cause memory corruption.</p>
<p>Note that the race only occurs when both halves of the channel are used after the Receiver half has called close. Code where close is not used, or where the Receiver is not awaited and try_recv is not called after calling close, is not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45710">https://nvd.nist.gov/vuln/detail/CVE-2021-45710</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0124.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0124.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0124.html">https://rustsec.org/advisories/RUSTSEC-2021-0124.html</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/4225">https://github.com/tokio-rs/tokio/issues/4225</a></li>
<li><a href="https://github.com/advisories/GHSA-fg7r-2g4j-5cgr">https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-06T22:04:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] Race Condition in tokio]]></title>
        <id>https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</id>
        <link href="https://github.com/advisories/GHSA-fg7r-2g4j-5cgr"/>
        <updated>2023-06-13T22:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>If a tokio::sync::oneshot channel is closed (via the oneshot::Receiver::close method), a data race may occur if the oneshot::Sender::send method is called while the corresponding oneshot::Receiver is awaited or calling try_recv.</p>
<p>When these methods are called concurrently on a closed channel, the two halves of the channel can concurrently access a shared memory location, resulting in a data race. This has been observed to cause memory corruption.</p>
<p>Note that the race only occurs when both halves of the channel are used after the Receiver half has called close. Code where close is not used, or where the Receiver is not awaited and try_recv is not called after calling close, is not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45710">https://nvd.nist.gov/vuln/detail/CVE-2021-45710</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0124.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0124.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0124.html">https://rustsec.org/advisories/RUSTSEC-2021-0124.html</a></li>
<li><a href="https://github.com/tokio-rs/tokio/issues/4225">https://github.com/tokio-rs/tokio/issues/4225</a></li>
<li><a href="https://github.com/advisories/GHSA-fg7r-2g4j-5cgr">https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg7r-2g4j-5cgr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-06T22:04:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[toodee] Double free in toodee]]></title>
        <id>https://github.com/advisories/GHSA-wcvp-r8j8-47pc</id>
        <link href="https://github.com/advisories/GHSA-wcvp-r8j8-47pc"/>
        <updated>2023-06-13T21:58:19.000Z</updated>
        <content type="html"><![CDATA[<p>When inserting rows from an iterator at a particular index, toodee would shift items over, duplicating their ownership. The space reserved for the new elements was based on the len() returned by the ExactSizeIterator.</p>
<p>This could result in elements in the array being freed twice if the iterator panics. Uninitialized or previously freed elements could also be exposed if the len() didn't match the number of elements.</p>
<p>These issues were fixed in commit <code>ced70c17</code> by temporarily setting the length of the array smaller while processing it and adding assertions on the number of elements returned by the iterator.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-28028">https://nvd.nist.gov/vuln/detail/CVE-2021-28028</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0028.html">https://rustsec.org/advisories/RUSTSEC-2021-0028.html</a></li>
<li><a href="https://github.com/antonmarsden/toodee/issues/13">https://github.com/antonmarsden/toodee/issues/13</a></li>
<li><a href="https://github.com/antonmarsden/toodee/commit/ced70c172486fb4827c172cd8238053df3d1dcdb">https://github.com/antonmarsden/toodee/commit/ced70c172486fb4827c172cd8238053df3d1dcdb</a></li>
<li><a href="https://github.com/advisories/GHSA-wcvp-r8j8-47pc">https://github.com/advisories/GHSA-wcvp-r8j8-47pc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcvp-r8j8-47pc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-09-01T18:30:35.000Z</published>
    </entry>
</feed>