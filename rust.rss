<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-11-20T16:01:27.201Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime may have data leakage between instances in the pooling allocator]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-3828-g9qf</id>
        <link href="https://github.com/advisories/GHSA-wh6w-3828-g9qf"/>
        <updated>2022-11-18T06:12:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of it's pooling instance allocator where when a linear memory is reused for another instance the initial heap snapshot of the prior instance can be visible, erroneously to the next instance. The pooling instance allocator in Wasmtime works by preallocating virtual memory for a fixed number of instances to reside in and then new instantiations pick a slot to use. Most conventional modules additionally have an initial copy-on-write "heap image" which is mapped in Wasmtime into the linear memory slot. When a heap slot is deallocated Wasmtime resets all of its contents back to the initial state but it does not unmap the image in case the next instance is an instantiation of the same module.</p>
<p>The bug in Wasmtime occurs when a slot in the pooling allocator previously was used for a module with a heap image, meaning that its current state of memory contains the initial heap contents of that module. If the next instantiation within that slot does not itself contain a heap image then Wasmtime would leave the old heap image in place erroneously and continue with instantiation. This means that instantiations of modules without a heap image can see the initial heap image of the prior instantiation within that slot.</p>
<p>Heap images in Wasmtime are created by precomputing WebAssembly <code>data</code> segments into one large mapping to be placed into linear memory at a particular offset. Most modules produced by toolchains today will have a heap image and an initialization snapshot. Creating a module without a heap image would require a hand-crafted <code>*.wat</code> file or a specially crafted source program. This consequence means that this bug is highly unlikely to be accidentally triggered and would otherwise require an intentional trigger with a hand-crafted module.</p>
<p>One important part of this vulnerability is Wasmtime is highly likely to segfault when the slot is reused again with a module that itself has an initialization image. For example if module A has a heap initialization image and module B does not have a heap initialization image, then the following sequence of events could happen if they all are instantiated into the same instance slot:</p>
<ul>
<li>Module A is instantiated, and then deallocated. This leaves A's heap image in place, reset to its initial contents.</li>
<li>Module B is instantiated and erroneously can see the initial heap contents of A. Module B is then deallocated and the entire heap is unmapped and reset back to zero.</li>
<li>Module A is instantiated again, but the state tracking the slot did not account for module B so it thinks the module image is still mapped and proceeds with instantiation. Any action on A's part to access linear memory will then trap and if the host accesses A's memory it will segfault because the data that's supposed to be mapped is all unmapped.</li>
</ul>
<p>Adding this all together this means that in practice modules must be deliberately crafted to not have an initial heap image to view the contents of a prior image. If this module is instantiated though then when the slot is reused the next, likely image-using, module will believe its memory is mapped when it isn't, causing the host to segfault on unmapped memory it believed was mapped. </p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Trigging this bug requires the pooling allocator to be configured and for copy-on-write heap images to also be enabled. Pooling allocation is not enabled by default but copy-on-write heap images are. Mitigations for this bug include:</p>
<ul>
<li>Disabling the pooling allocator - note that pooling allocation is not enabled by default in Wasmtime</li>
<li>Disabling the <code>memory-init-cow</code> feature or with <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.memory_init_cow"><code>Config::memory_init_cow</code></a> - configuration required to enable or disable copy-on-write (this is enabled by default).</li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">Patch for <code>release-2.0.0</code> branch</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">Patch for <code>main</code></a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-wh6w-3828-g9qf</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0">https://github.com/bytecodealliance/wasmtime/commit/2614f2e9d2d36805ead8a8da0fa0c6e0d9e428a0</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6">https://github.com/bytecodealliance/wasmtime/commit/3535acbf3be032ef1ba0b469b8ab92538a8a18a6</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39393">https://nvd.nist.gov/vuln/detail/CVE-2022-39393</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-3828-g9qf">https://github.com/advisories/GHSA-wh6w-3828-g9qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-3828-g9qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T21:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime out of bounds read/write with zero-memory-pages configuration]]></title>
        <id>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</id>
        <link href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg"/>
        <updated>2022-11-15T01:15:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory. In this configuration the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime's default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator's configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator.</p>
<p>This bug can only be triggered by setting <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> to zero. This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory. All wasm modules produced by all current toolchains are highly likely to use linear memory, so it's expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime, hence the low severity of this bug despite the critical consequences.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>One way to mitigate this issue is to disable usage of the pooling allocator. Note that the pooling allocator is not enabled by default.</p>
<p>This bug can also only be worked around by increasing the <code>memory_pages</code> allotment when configuring the pooling allocator to a value greater than zero. If an embedding wishes to still prevent memory from actually being used then the <code>Store::limiter</code> method can be used to dynamically disallow growth of memory beyond 0 bytes large. Note that the default <code>memory_pages</code> value is greater than zero.</p>
<p>This bug is not applicable with the default settings of the <code>wasmtime</code> crate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> - configuration field that, when zero, exhibits this bug.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Store.html#method.limiter"><code>Store::limiter</code></a> - means of limiting memory without using <code>memory_pages</code></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">Patch for the <code>release-2.0.0</code> branch</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39392">https://nvd.nist.gov/vuln/detail/CVE-2022-39392</a></li>
<li><a href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/advisories/GHSA-44mr-8vmm-wjhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-10T21:09:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lzf] Invalid use of `mem::uninitialized` causes `use-of-uninitialized-value`]]></title>
        <id>https://github.com/advisories/GHSA-5m39-wx2q-mxg3</id>
        <link href="https://github.com/advisories/GHSA-5m39-wx2q-mxg3"/>
        <updated>2022-11-08T21:56:43.000Z</updated>
        <content type="html"><![CDATA[<p>The compression and decompression function used <code>mem:uninitialized</code> to create an array of uninitialized values, to later write values into it. This later leads to reads from uninitialized memory.</p>
<p>The flaw was corrected in commit b633bf265e41c60dfce3be7eac4e4dd5e18d06cf by using a heap-allocated <code>Vec</code> and removing out use of <code>mem::uninitialized</code>. The fix was released in v0.3.2 and v1.0.0</p>
<p>Subsequently, the crate was deprecated and its use is discouraged.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/badboy/lzf-rs/issues/9">https://github.com/badboy/lzf-rs/issues/9</a></li>
<li><a href="https://github.com/badboy/lzf-rs/commit/b633bf265e41c60dfce3be7eac4e4dd5e18d06cf">https://github.com/badboy/lzf-rs/commit/b633bf265e41c60dfce3be7eac4e4dd5e18d06cf</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0067.html">https://rustsec.org/advisories/RUSTSEC-2022-0067.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5m39-wx2q-mxg3">https://github.com/advisories/GHSA-5m39-wx2q-mxg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5m39-wx2q-mxg3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-08T21:42:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Tauri] Tauri Filesystem Scope can be Partially Bypassed]]></title>
        <id>https://github.com/advisories/GHSA-q9wv-22m9-vhqh</id>
        <link href="https://github.com/advisories/GHSA-q9wv-22m9-vhqh"/>
        <updated>2022-11-12T05:22:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to incorrect escaping of special characters in paths selected via the file dialog and drag and drop functionality, it was possible to partially bypass the <code>fs</code> scope definition. It was not possible to traverse into arbitrary paths, as the issue was limited to neighboring files and sub folders of already allowed paths.</p>
<p>The impact differs on Windows, MacOS and Linux due to different specifications of valid path characters.</p>
<p>On Linux or MacOS based systems it was possible to use the <code>*</code>, <code>**</code> and <code>[a-Z]</code> patterns inside a path, which allowed to read the content of sub directories and single character files in a folder, where only specific files or the directory itself were allowed.</p>
<p>On Windows <code>[a-Z]</code> was the possible bypass pattern, as <code>*</code> is not treated as a valid path component. This implies that only single character files inside an already allowed directory were unintentionally accessible.</p>
<p>This bypass depends on the file picker dialog or dragged files, as user selected paths are automatically added to the allow list at runtime.</p>
<p>A successful bypass requires the user to select a pre-existing malicious file or directory during the file picker dialog and an adversary controlled logic to access these files. This means the issue by itself can not be abused and requires further intentional or unintentional privileges.</p>
<h3 id="workaround">Workaround</h3>
<p>Disable the <code>dialog</code> and <code>fileDropEnabled</code> component inside the <code>tauri.conf.json</code>.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in #5237 and the implementation now properly escapes the special characters. The patch has been included in releases: <code>1.0.7</code>, <code>1.1.2</code> and <code>1.2.0</code></p>
<h3 id="for-more-information">For more information</h3>
<p>This issue was initially reported by MessyComposer in #5234.</p>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in tauri
Email us at <a href="mailto:security@tauri.app">security@tauri.app</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-q9wv-22m9-vhqh">https://github.com/tauri-apps/tauri/security/advisories/GHSA-q9wv-22m9-vhqh</a></li>
<li><a href="https://github.com/tauri-apps/tauri/issues/5234">https://github.com/tauri-apps/tauri/issues/5234</a></li>
<li><a href="https://github.com/tauri-apps/tauri/pull/5237">https://github.com/tauri-apps/tauri/pull/5237</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41874">https://nvd.nist.gov/vuln/detail/CVE-2022-41874</a></li>
<li><a href="https://github.com/advisories/GHSA-q9wv-22m9-vhqh">https://github.com/advisories/GHSA-q9wv-22m9-vhqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9wv-22m9-vhqh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-11-08T17:33:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Tauri] Tauri Filesystem Scope can be Partially Bypassed]]></title>
        <id>https://github.com/advisories/GHSA-q9wv-22m9-vhqh</id>
        <link href="https://github.com/advisories/GHSA-q9wv-22m9-vhqh"/>
        <updated>2022-11-12T05:22:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to incorrect escaping of special characters in paths selected via the file dialog and drag and drop functionality, it was possible to partially bypass the <code>fs</code> scope definition. It was not possible to traverse into arbitrary paths, as the issue was limited to neighboring files and sub folders of already allowed paths.</p>
<p>The impact differs on Windows, MacOS and Linux due to different specifications of valid path characters.</p>
<p>On Linux or MacOS based systems it was possible to use the <code>*</code>, <code>**</code> and <code>[a-Z]</code> patterns inside a path, which allowed to read the content of sub directories and single character files in a folder, where only specific files or the directory itself were allowed.</p>
<p>On Windows <code>[a-Z]</code> was the possible bypass pattern, as <code>*</code> is not treated as a valid path component. This implies that only single character files inside an already allowed directory were unintentionally accessible.</p>
<p>This bypass depends on the file picker dialog or dragged files, as user selected paths are automatically added to the allow list at runtime.</p>
<p>A successful bypass requires the user to select a pre-existing malicious file or directory during the file picker dialog and an adversary controlled logic to access these files. This means the issue by itself can not be abused and requires further intentional or unintentional privileges.</p>
<h3 id="workaround">Workaround</h3>
<p>Disable the <code>dialog</code> and <code>fileDropEnabled</code> component inside the <code>tauri.conf.json</code>.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in #5237 and the implementation now properly escapes the special characters. The patch has been included in releases: <code>1.0.7</code>, <code>1.1.2</code> and <code>1.2.0</code></p>
<h3 id="for-more-information">For more information</h3>
<p>This issue was initially reported by MessyComposer in #5234.</p>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in tauri
Email us at <a href="mailto:security@tauri.app">security@tauri.app</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-q9wv-22m9-vhqh">https://github.com/tauri-apps/tauri/security/advisories/GHSA-q9wv-22m9-vhqh</a></li>
<li><a href="https://github.com/tauri-apps/tauri/issues/5234">https://github.com/tauri-apps/tauri/issues/5234</a></li>
<li><a href="https://github.com/tauri-apps/tauri/pull/5237">https://github.com/tauri-apps/tauri/pull/5237</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41874">https://nvd.nist.gov/vuln/detail/CVE-2022-41874</a></li>
<li><a href="https://github.com/advisories/GHSA-q9wv-22m9-vhqh">https://github.com/advisories/GHSA-q9wv-22m9-vhqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9wv-22m9-vhqh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-11-08T17:33:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] ckb type_id script resume may randomly fail]]></title>
        <id>https://github.com/advisories/GHSA-mcmr-49x3-4jqm</id>
        <link href="https://github.com/advisories/GHSA-mcmr-49x3-4jqm"/>
        <updated>2022-11-02T18:15:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/nervosnetwork/ckb/blob/v0.101.2/script/src/verify.rs#L871-L879">https://github.com/nervosnetwork/ckb/blob/v0.101.2/script/src/verify.rs#L871-L879</a>
TypeIdSystemScript resume handle is not correct when max_cycles is not enough, <code>ScriptError::ExceededMaximumCycles</code> will be raised directly ranther than suspend as expect, and also because script_group execution order is random, so this will happen randomly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-mcmr-49x3-4jqm">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-mcmr-49x3-4jqm</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/blob/v0.101.2/script/src/verify.rs#L871-L879">https://github.com/nervosnetwork/ckb/blob/v0.101.2/script/src/verify.rs#L871-L879</a></li>
<li><a href="https://github.com/advisories/GHSA-mcmr-49x3-4jqm">https://github.com/advisories/GHSA-mcmr-49x3-4jqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mcmr-49x3-4jqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-02T18:15:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] ckb: Transaction header_deps validation issue (network forking)]]></title>
        <id>https://github.com/advisories/GHSA-7fw6-6mfj-g3q2</id>
        <link href="https://github.com/advisories/GHSA-7fw6-6mfj-g3q2"/>
        <updated>2022-11-02T18:14:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>fn <code>HeaderChecker#check_valid</code> skipped main chain checking after this PR: <a href="https://github.com/nervosnetwork/ckb/pull/1646/files#diff-c4e017b67c1b3005ca0c446a9b0879571aa36a858b1f7ddd1b9328a884e3214bR171-R176">https://github.com/nervosnetwork/ckb/pull/1646/files#diff-c4e017b67c1b3005ca0c446a9b0879571aa36a858b1f7ddd1b9328a884e3214bR171-R176</a></p>
<p>It will cause network forking if one transaction is using a forked block header which is not exists in local node's storage.</p>
<h3 id="patches">Patches</h3>
<p>0.101.1 and later versions</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-7fw6-6mfj-g3q2">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-7fw6-6mfj-g3q2</a></li>
<li><a href="https://github.com/nervosnetwork/ckb/pull/1646/files#diff-c4e017b67c1b3005ca0c446a9b0879571aa36a858b1f7ddd1b9328a884e3214bR171-R176">https://github.com/nervosnetwork/ckb/pull/1646/files#diff-c4e017b67c1b3005ca0c446a9b0879571aa36a858b1f7ddd1b9328a884e3214bR171-R176</a></li>
<li><a href="https://github.com/advisories/GHSA-7fw6-6mfj-g3q2">https://github.com/advisories/GHSA-7fw6-6mfj-g3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fw6-6mfj-g3q2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-02T18:14:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] ckb: Large dep group requires a lot of resources to process but the cost to commit the transaction is very low.]]></title>
        <id>https://github.com/advisories/GHSA-9mfc-chwf-7whf</id>
        <link href="https://github.com/advisories/GHSA-9mfc-chwf-7whf"/>
        <updated>2022-11-02T18:14:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When a transaction contains a dep group with many cells, the resources required to process it are not linear to the transaction size nor spent script cycles. </p>
<h3 id="patches">Patches</h3>
<p>In 0.43.3, nodes drop the transactions relayed to them when they contain a dep group with more than 64 cells. They do not ban peers who send them such transactions.</p>
<p>In 0.100, the consensus disallow transactions using a dep group with more than 64 cells. Peers relaying such transaction must be banned. Blocks committing such transactions must be rejected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-9mfc-chwf-7whf">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-9mfc-chwf-7whf</a></li>
<li><a href="https://github.com/advisories/GHSA-9mfc-chwf-7whf">https://github.com/advisories/GHSA-9mfc-chwf-7whf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9mfc-chwf-7whf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-02T18:14:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] X.509 Email Address 4-byte Buffer Overflow]]></title>
        <id>https://github.com/advisories/GHSA-8rwr-x37p-mx23</id>
        <link href="https://github.com/advisories/GHSA-8rwr-x37p-mx23"/>
        <updated>2022-11-07T21:28:54.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs
after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to
continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address
to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or
potentially remote code execution.</p>
<p>Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler.</p>
<p>Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible.</p>
<p>In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustsec/advisory-db/pull/1452">https://github.com/rustsec/advisory-db/pull/1452</a></li>
<li><a href="https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3">https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0064.html">https://rustsec.org/advisories/RUSTSEC-2022-0064.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221101.txt">https://www.openssl.org/news/secadv/20221101.txt</a></li>
<li><a href="https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3602">https://nvd.nist.gov/vuln/detail/CVE-2022-3602</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023</a></li>
<li><a href="https://security.gentoo.org/glsa/202211-01">https://security.gentoo.org/glsa/202211-01</a></li>
<li><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a</a></li>
<li><a href="http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html">http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/15">http://www.openwall.com/lists/oss-security/2022/11/01/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/16">http://www.openwall.com/lists/oss-security/2022/11/01/16</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/17">http://www.openwall.com/lists/oss-security/2022/11/01/17</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/18">http://www.openwall.com/lists/oss-security/2022/11/01/18</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/19">http://www.openwall.com/lists/oss-security/2022/11/01/19</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/20">http://www.openwall.com/lists/oss-security/2022/11/01/20</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/21">http://www.openwall.com/lists/oss-security/2022/11/01/21</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/24">http://www.openwall.com/lists/oss-security/2022/11/01/24</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/1">http://www.openwall.com/lists/oss-security/2022/11/02/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/10">http://www.openwall.com/lists/oss-security/2022/11/02/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/11">http://www.openwall.com/lists/oss-security/2022/11/02/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/12">http://www.openwall.com/lists/oss-security/2022/11/02/12</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/2">http://www.openwall.com/lists/oss-security/2022/11/02/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/3">http://www.openwall.com/lists/oss-security/2022/11/02/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/5">http://www.openwall.com/lists/oss-security/2022/11/02/5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/6">http://www.openwall.com/lists/oss-security/2022/11/02/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/7">http://www.openwall.com/lists/oss-security/2022/11/02/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/9">http://www.openwall.com/lists/oss-security/2022/11/02/9</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221102-0001/">https://security.netapp.com/advisory/ntap-20221102-0001/</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/794340">https://www.kb.cert.org/vuls/id/794340</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/13">http://www.openwall.com/lists/oss-security/2022/11/02/13</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/14">http://www.openwall.com/lists/oss-security/2022/11/02/14</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/15">http://www.openwall.com/lists/oss-security/2022/11/02/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/1">http://www.openwall.com/lists/oss-security/2022/11/03/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/2">http://www.openwall.com/lists/oss-security/2022/11/03/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/3">http://www.openwall.com/lists/oss-security/2022/11/03/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/5">http://www.openwall.com/lists/oss-security/2022/11/03/5</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/10">http://www.openwall.com/lists/oss-security/2022/11/03/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/11">http://www.openwall.com/lists/oss-security/2022/11/03/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/6">http://www.openwall.com/lists/oss-security/2022/11/03/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/7">http://www.openwall.com/lists/oss-security/2022/11/03/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/9">http://www.openwall.com/lists/oss-security/2022/11/03/9</a></li>
<li><a href="https://github.com/advisories/GHSA-8rwr-x37p-mx23">https://github.com/advisories/GHSA-8rwr-x37p-mx23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rwr-x37p-mx23</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-01T17:45:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] X.509 Email Address Variable Length Buffer Overflow]]></title>
        <id>https://github.com/advisories/GHSA-h8jm-2x53-xhp5</id>
        <link href="https://github.com/advisories/GHSA-h8jm-2x53-xhp5"/>
        <updated>2022-11-04T16:12:14.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overrun can be triggered in X.509 certificate verification,
specifically in name constraint checking. Note that this occurs after
certificate chain signature verification and requires either a CA to
have signed a malicious certificate or for an application to continue
certificate verification despite failure to construct a path to a trusted
issuer. An attacker can craft a malicious email address in a certificate
to overflow an arbitrary number of bytes containing the <code>.</code> character
(decimal 46) on the stack. This buffer overflow could result in a crash
(causing a denial of service).</p>
<p>In a TLS client, this can be triggered by connecting to a malicious
server. In a TLS server, this can be triggered if the server requests
client authentication and a malicious client connects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustsec/advisory-db/pull/1452">https://github.com/rustsec/advisory-db/pull/1452</a></li>
<li><a href="https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3">https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0065.html">https://rustsec.org/advisories/RUSTSEC-2022-0065.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221101.txt">https://www.openssl.org/news/secadv/20221101.txt</a></li>
<li><a href="https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3786">https://nvd.nist.gov/vuln/detail/CVE-2022-3786</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c42165b5706e42f67ef8ef4c351a9a4c5d21639a">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c42165b5706e42f67ef8ef4c351a9a4c5d21639a</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023</a></li>
<li><a href="https://security.gentoo.org/glsa/202211-01">https://security.gentoo.org/glsa/202211-01</a></li>
<li><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a</a></li>
<li><a href="http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html">http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/15">http://www.openwall.com/lists/oss-security/2022/11/01/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/16">http://www.openwall.com/lists/oss-security/2022/11/01/16</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/17">http://www.openwall.com/lists/oss-security/2022/11/01/17</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/18">http://www.openwall.com/lists/oss-security/2022/11/01/18</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/19">http://www.openwall.com/lists/oss-security/2022/11/01/19</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/20">http://www.openwall.com/lists/oss-security/2022/11/01/20</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/21">http://www.openwall.com/lists/oss-security/2022/11/01/21</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/24">http://www.openwall.com/lists/oss-security/2022/11/01/24</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/1">http://www.openwall.com/lists/oss-security/2022/11/02/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/10">http://www.openwall.com/lists/oss-security/2022/11/02/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/11">http://www.openwall.com/lists/oss-security/2022/11/02/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/12">http://www.openwall.com/lists/oss-security/2022/11/02/12</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/2">http://www.openwall.com/lists/oss-security/2022/11/02/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/3">http://www.openwall.com/lists/oss-security/2022/11/02/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/5">http://www.openwall.com/lists/oss-security/2022/11/02/5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/6">http://www.openwall.com/lists/oss-security/2022/11/02/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/7">http://www.openwall.com/lists/oss-security/2022/11/02/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/9">http://www.openwall.com/lists/oss-security/2022/11/02/9</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221102-0001/">https://security.netapp.com/advisory/ntap-20221102-0001/</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/794340">https://www.kb.cert.org/vuls/id/794340</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/13">http://www.openwall.com/lists/oss-security/2022/11/02/13</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/14">http://www.openwall.com/lists/oss-security/2022/11/02/14</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/15">http://www.openwall.com/lists/oss-security/2022/11/02/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/1">http://www.openwall.com/lists/oss-security/2022/11/03/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/2">http://www.openwall.com/lists/oss-security/2022/11/03/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/3">http://www.openwall.com/lists/oss-security/2022/11/03/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/5">http://www.openwall.com/lists/oss-security/2022/11/03/5</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=c42165b5706e42f67ef8ef4c351a9a4c5d21639a">https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=c42165b5706e42f67ef8ef4c351a9a4c5d21639a</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/10">http://www.openwall.com/lists/oss-security/2022/11/03/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/11">http://www.openwall.com/lists/oss-security/2022/11/03/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/6">http://www.openwall.com/lists/oss-security/2022/11/03/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/7">http://www.openwall.com/lists/oss-security/2022/11/03/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/9">http://www.openwall.com/lists/oss-security/2022/11/03/9</a></li>
<li><a href="https://github.com/advisories/GHSA-h8jm-2x53-xhp5">https://github.com/advisories/GHSA-h8jm-2x53-xhp5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h8jm-2x53-xhp5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T17:45:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[conduit-hyper] conduit-hyper vulnerable to Denial of Service from unchecked request length]]></title>
        <id>https://github.com/advisories/GHSA-9398-5ghf-7pr6</id>
        <link href="https://github.com/advisories/GHSA-9398-5ghf-7pr6"/>
        <updated>2022-11-03T12:38:43.000Z</updated>
        <content type="html"><![CDATA[<p>Prior to version 0.4.2, <code>conduit-hyper</code> did not check any limit on a request's length before calling <a href="https://docs.rs/hyper/latest/hyper/body/fn.to_bytes.html"><code>hyper::body::to_bytes</code></a>. An attacker could send a malicious request with an abnormally large <code>Content-Length</code>, which could lead to a panic if memory allocation failed for that request.</p>
<p>In version 0.4.2, <code>conduit-hyper</code> sets an internal limit of 128 MiB per request, otherwise returning status 400 ("Bad Request").</p>
<p>This crate is part of the implementation of Rust's <a href="https://crates.io/">crates.io</a>, but that service is not affected due to its existing cloud infrastructure, which already drops such malicious requests. Even with the new limit in place, <code>conduit-hyper</code> is not recommended for production use, nor to directly serve the public Internet.</p>
<p>The vulnerability was discovered by Ori Hollander from the JFrog Security Research team.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/conduit-rust/conduit-hyper/security/advisories/GHSA-9398-5ghf-7pr6">https://github.com/conduit-rust/conduit-hyper/security/advisories/GHSA-9398-5ghf-7pr6</a></li>
<li><a href="https://github.com/conduit-rust/conduit-hyper/commit/4d225a53206505d39438ec6694e15f49c038baff">https://github.com/conduit-rust/conduit-hyper/commit/4d225a53206505d39438ec6694e15f49c038baff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39294">https://nvd.nist.gov/vuln/detail/CVE-2022-39294</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0066.html">https://rustsec.org/advisories/RUSTSEC-2022-0066.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9398-5ghf-7pr6">https://github.com/advisories/GHSA-9398-5ghf-7pr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9398-5ghf-7pr6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-31T18:44:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[evm] Incorrect is_static parameter for custom stateful precompiles in SputnikVM (evm)]]></title>
        <id>https://github.com/advisories/GHSA-hhc4-47rh-cr34</id>
        <link href="https://github.com/advisories/GHSA-hhc4-47rh-cr34"/>
        <updated>2022-10-31T16:01:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A custom stateful precompile can use the <code>is_static</code> parameter to determine if the call is executed in a static context (via <code>STATICCALL</code>), and thus decide if stateful operations should be done. Previously, the passed <code>is_static</code> parameter was incorrect -- it was only set to <code>true</code> if the call comes from a <strong>direct</strong> <code>STATICCALL</code> opcode. However, once a static call context is entered, it should stay static. </p>
<p>The issue only impacts custom precompiles that actually uses <code>is_static</code>. The maintainers estimate the usage is low. However, for those affected, it can lead to possible incorrect state transitions.</p>
<h3 id="patches">Patches</h3>
<p>PR: <a href="https://github.com/rust-blockchain/evm/pull/133">https://github.com/rust-blockchain/evm/pull/133</a>
Released in v0.36.0.</p>
<p>Older patch versions can be released on request if anyone needs them. Simply contact @sorpaas by email to request it.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/rust-blockchain/evm">evm repo</a></li>
<li>Email Wei at <a href="mailto:wei@that.world">wei@that.world</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-blockchain/evm/security/advisories/GHSA-hhc4-47rh-cr34">https://github.com/rust-blockchain/evm/security/advisories/GHSA-hhc4-47rh-cr34</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39354">https://nvd.nist.gov/vuln/detail/CVE-2022-39354</a></li>
<li><a href="https://github.com/rust-blockchain/evm/pull/133">https://github.com/rust-blockchain/evm/pull/133</a></li>
<li><a href="https://github.com/advisories/GHSA-hhc4-47rh-cr34">https://github.com/advisories/GHSA-hhc4-47rh-cr34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhc4-47rh-cr34</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-25T22:27:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk] matrix-sdk 0.6.0 logs access tokens]]></title>
        <id>https://github.com/advisories/GHSA-fc4h-xcf3-qj5f</id>
        <link href="https://github.com/advisories/GHSA-fc4h-xcf3-qj5f"/>
        <updated>2022-10-25T20:22:21.000Z</updated>
        <content type="html"><![CDATA[<p>When sending Matrix requests using an affected version of <code>matrix-sdk</code> in an application that writes logs using <code>tracing-subscriber</code> (in a way that includes fields of tracing spans such as <code>tracing_subscriber</code>s default text output from the <code>fmt</code> module), these logs will contain the user's access token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/issues/1110">https://github.com/matrix-org/matrix-rust-sdk/issues/1110</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0062.html">https://rustsec.org/advisories/RUSTSEC-2022-0062.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fc4h-xcf3-qj5f">https://github.com/advisories/GHSA-fc4h-xcf3-qj5f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fc4h-xcf3-qj5f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-25T20:22:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flatbuffers] Generated code can read and write out of bounds in safe code]]></title>
        <id>https://github.com/advisories/GHSA-3jch-9qgp-4844</id>
        <link href="https://github.com/advisories/GHSA-3jch-9qgp-4844"/>
        <updated>2022-10-19T15:44:23.000Z</updated>
        <content type="html"><![CDATA[<p>Code generated by flatbuffers' compiler is <code>unsafe</code> but not marked as such.
See <a href="https://github.com/google/flatbuffers/issues/6627">https://github.com/google/flatbuffers/issues/6627</a> for details.</p>
<p>All users that use generated code by <code>flatbuffers</code> compiler are recommended to:</p>
<ol>
<li>not expose flatbuffer generated code as part of their public APIs</li>
<li>audit their code and look for any usage of <code>follow</code>, <code>push</code>, or any method that uses them
(e.g. <code>self_follow</code>).</li>
<li>Carefuly go through the crates' documentation to understand which "safe" APIs are not
intended to be used.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/google/flatbuffers/issues/6627">https://github.com/google/flatbuffers/issues/6627</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0122.html">https://rustsec.org/advisories/RUSTSEC-2021-0122.html</a></li>
<li><a href="https://github.com/google/flatbuffers/pull/7518">https://github.com/google/flatbuffers/pull/7518</a></li>
<li><a href="https://github.com/google/flatbuffers/releases/tag/v22.9.29">https://github.com/google/flatbuffers/releases/tag/v22.9.29</a></li>
<li><a href="https://github.com/advisories/GHSA-3jch-9qgp-4844">https://github.com/advisories/GHSA-3jch-9qgp-4844</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jch-9qgp-4844</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-06-16T23:54:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Using a Custom Cipher with `NID_undef` may lead to NULL encryption]]></title>
        <id>https://github.com/advisories/GHSA-4f63-89w9-3jjv</id>
        <link href="https://github.com/advisories/GHSA-4f63-89w9-3jjv"/>
        <updated>2022-11-02T13:28:11.000Z</updated>
        <content type="html"><![CDATA[<p>OpenSSL supports creating a custom cipher via the legacy EVP_CIPHER_meth_new() function and associated function calls. This function was deprecated in OpenSSL 3.0 and application authors are instead encouraged to use the new provider mechanism in order to implement custom ciphers. OpenSSL versions 3.0.0 to 3.0.5 incorrectly handle legacy custom ciphers passed to the EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() and EVP_CipherInit_ex2() functions (as well as other similarly named encryption and decryption initialisation functions). Instead of using the custom cipher directly it incorrectly tries to fetch an equivalent cipher from the available providers. An equivalent cipher is found based on the NID passed to EVP_CIPHER_meth_new(). This NID is supposed to represent the unique NID for a given cipher. However it is possible for an application to incorrectly pass NID_undef as this value in the call to EVP_CIPHER_meth_new(). When NID_undef is used in this way the OpenSSL encryption/decryption initialisation function will match the NULL cipher as being equivalent and will fetch this from the available providers. This will succeed if the default provider has been loaded (or if a third party provider has been loaded that offers this cipher). Using the NULL cipher means that the plaintext is emitted as the ciphertext. Applications are only affected by this issue if they call EVP_CIPHER_meth_new() using NID_undef and subsequently use it in a call to an encryption/decryption initialisation function. Applications that only use SSL/TLS are not impacted by this issue. Fixed in OpenSSL 3.0.6 (Affected 3.0.0-3.0.5).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3358">https://nvd.nist.gov/vuln/detail/CVE-2022-3358</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=5485c56679d7c49b96e8fc8ca708b0b7e7c03c4b">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=5485c56679d7c49b96e8fc8ca708b0b7e7c03c4b</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221011.txt">https://www.openssl.org/news/secadv/20221011.txt</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0059.html">https://rustsec.org/advisories/RUSTSEC-2022-0059.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221028-0014/">https://security.netapp.com/advisory/ntap-20221028-0014/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023</a></li>
<li><a href="https://github.com/advisories/GHSA-4f63-89w9-3jjv">https://github.com/advisories/GHSA-4f63-89w9-3jjv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4f63-89w9-3jjv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-11T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slack-morphism] Exposure of sensitive Slack webhook URLs in debug logs and traces]]></title>
        <id>https://github.com/advisories/GHSA-4mjx-2gh5-ph8h</id>
        <link href="https://github.com/advisories/GHSA-4mjx-2gh5-ph8h"/>
        <updated>2022-10-10T21:07:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Debug logs expose sensitive URLs for Slack webhooks that contain private information.</p>
<h3 id="patches">Patches</h3>
<p>The problem is fixed in v1.3.2 which redacts sensitive URLs for webhooks.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disabling/filtering debug logs in case you use Slack webhooks using tracing log level and filters.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/abdolence/slack-morphism-rust/releases/tag/v1.3.2">https://github.com/abdolence/slack-morphism-rust/releases/tag/v1.3.2</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/abdolence/slack-morphism-rust">repo</a></li>
<li>Read our <a href="https://github.com/abdolence/slack-morphism-rust/blob/master/SECURITY.md">security policy</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/abdolence/slack-morphism-rust/security/advisories/GHSA-4mjx-2gh5-ph8h">https://github.com/abdolence/slack-morphism-rust/security/advisories/GHSA-4mjx-2gh5-ph8h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39292">https://nvd.nist.gov/vuln/detail/CVE-2022-39292</a></li>
<li><a href="https://github.com/abdolence/slack-morphism-rust/commit/48a1da2dc2ad3a5ccc60036d43f6f8fbb2c15f1d">https://github.com/abdolence/slack-morphism-rust/commit/48a1da2dc2ad3a5ccc60036d43f6f8fbb2c15f1d</a></li>
<li><a href="https://github.com/abdolence/slack-morphism-rust/releases/tag/v1.3.2">https://github.com/abdolence/slack-morphism-rust/releases/tag/v1.3.2</a></li>
<li><a href="https://github.com/advisories/GHSA-4mjx-2gh5-ph8h">https://github.com/advisories/GHSA-4mjx-2gh5-ph8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mjx-2gh5-ph8h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-10T21:07:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kamadak-exif] kamadak-exif vulnerable to Infinite loop when parsing PNG files]]></title>
        <id>https://github.com/advisories/GHSA-px9g-8hgv-jvg2</id>
        <link href="https://github.com/advisories/GHSA-px9g-8hgv-jvg2"/>
        <updated>2022-10-21T20:07:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Reader::read_from_container can cause an infinite loop when a crafted PNG file is given.</p>
<h3 id="patches">Patches</h3>
<p>Version 0.5.3 includes the fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround is available.
Applications that do not pass files with the PNG signature to Reader::read_from_container are not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kamadak/exif-rs/security/advisories/GHSA-px9g-8hgv-jvg2">https://github.com/kamadak/exif-rs/security/advisories/GHSA-px9g-8hgv-jvg2</a></li>
<li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21235">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-21235</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/kamadak/exif-rs">github.com/kamadak/exif-rs</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kamadak/exif-rs/security/advisories/GHSA-px9g-8hgv-jvg2">https://github.com/kamadak/exif-rs/security/advisories/GHSA-px9g-8hgv-jvg2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21235">https://nvd.nist.gov/vuln/detail/CVE-2021-21235</a></li>
<li><a href="https://github.com/kamadak/exif-rs/commit/1b05eab57e484cd7d576d4357b9cda7fdc57df8c">https://github.com/kamadak/exif-rs/commit/1b05eab57e484cd7d576d4357b9cda7fdc57df8c</a></li>
<li><a href="https://github.com/kamadak/exif-rs/commit/f21df24616ea611c5d5d0e0e2f8042eb74d5ff48">https://github.com/kamadak/exif-rs/commit/f21df24616ea611c5d5d0e0e2f8042eb74d5ff48</a></li>
<li><a href="https://crates.io/crates/kamadak-exif">https://crates.io/crates/kamadak-exif</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0143.html">https://rustsec.org/advisories/RUSTSEC-2021-0143.html</a></li>
<li><a href="https://github.com/advisories/GHSA-px9g-8hgv-jvg2">https://github.com/advisories/GHSA-px9g-8hgv-jvg2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-px9g-8hgv-jvg2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-06T19:53:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Tremor] Memory Safety Issue when using patch or merge on state and assign the result back to state]]></title>
        <id>https://github.com/advisories/GHSA-mc22-5q92-8v85</id>
        <link href="https://github.com/advisories/GHSA-mc22-5q92-8v85"/>
        <updated>2022-10-05T18:24:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability is a memory safety Issue when using <a href="https://www.tremor.rs/docs/tremor-script/index#patch"><code>patch</code></a> or <a href="https://www.tremor.rs/docs/tremor-script/index#merge"><code>merge</code></a> on <code>state</code> and assign the result back to <code>state</code>.
In this case affected versions of Tremor and the <a href="https://crates.io/crates/tremor-script">tremor-script crate</a> maintains references to memory that might have been freed already. And these memory regions can be accessed by retrieving the <code>state</code>, e.g. send it over TCP or HTTP. This requires the Tremor server (or any other program using tremor-script) to execute a tremor-script script that uses the mentioned language construct.</p>
<h4 id="details">Details</h4>
<p>If affects the following two tremor-script language constructs:</p>
<ul>
<li>A <a href="https://www.tremor.rs/docs/tremor-script/index#merge">Merge</a> where we assign the result back to the target expression
and the expression to be merged needs to reference the <code>event</code>:</li>
</ul>
<pre><code>let state = merge state of event end;
</code></pre>
<ul>
<li>A <a href="https://www.tremor.rs/docs/tremor-script/index#patch">Patch</a> where we assign the result back to the target expression
and the patch operations used need to reference the <code>event</code>:</li>
</ul>
<pre><code>let state = patch state of insert event.key =&gt; event.value end;
</code></pre>
<p>For constructs like this (it does not matter what it references in the expression to be merged or the patch operations) an optimization
was applied to manipulate the target value in-place, instead of cloning it.</p>
<p>Our <code>Value</code> struct, which underpins all event data in <code>tremor-script</code>, is representing strings as borrowed <code>beef::Cow&lt;'lifetime, str&gt;</code>, 
that reference the raw data <code>Vec&lt;u8&gt;</code> the event is based upon. We keep this raw byte-array next to the <code>Value</code> structure inside our <code>Event</code> as a self-referential struct,
so we make sure that the structured <code>Value</code> and its references are valid across its whole lifetime.</p>
<p>The optimization was considered safe as long as it was only possible to merge or patch <code>event</code> data or static data.
When <code>state</code> was introduced to <code>tremor-script</code> (in version 0.7.3) a new possibility to keep <code>Value</code> data around for longer than the lifetime of an event emerged.
If <code>event</code> data is merged or patched into <code>state</code> without cloning it first, it can still reference keys or values from
the previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <a href="https://crates.io/crates/tremor-script/0.11.6">https://crates.io/crates/tremor-script/0.11.6</a> and <a href="https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6">https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6</a> via commit <a href="https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e">1a2efcd</a> by removing the optimization
and always clone the target expression of a <a href="https://www.tremor.rs/docs/tremor-script/index#merge">Merge</a> or [Patch](<a href="https://www.tremor.rs/docs/tremor-script/index#patch">https://www.tremor.rs/docs/tremor-script/index#patch</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If an upgrade is not possible, a possible workaround is to avoid the optimization
by introducing a temporary variable and not immediately reassigning to <code>state</code>:</p>
<pre><code>let tmp = merge state of event end;
let state = tmp
</code></pre>
<h3 id="references">References</h3>
<p>The actual fix is applied in this PR: <a href="https://github.com/tremor-rs/tremor-runtime/pull/1217">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue on our repository <a href="https://github.com/tremor-rs/tremor-runtime">tremor-rs/tremor-runtime</a></li>
<li>Please join our discord <a href="https://chat.tremor.rs">https://chat.tremor.rs</a> and reach out to the team.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tremor-rs/tremor-runtime/security/advisories/GHSA-mc22-5q92-8v85">https://github.com/tremor-rs/tremor-runtime/security/advisories/GHSA-mc22-5q92-8v85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39228">https://nvd.nist.gov/vuln/detail/CVE-2021-39228</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/pull/1217">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e">https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6">https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6</a></li>
<li><a href="https://github.com/advisories/GHSA-mc22-5q92-8v85">https://github.com/advisories/GHSA-mc22-5q92-8v85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc22-5q92-8v85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:52:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto contains potential impersonation via room key forward responses]]></title>
        <id>https://github.com/advisories/GHSA-vp68-2wrm-69qm</id>
        <link href="https://github.com/advisories/GHSA-vp68-2wrm-69qm"/>
        <updated>2022-10-04T15:29:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When matrix-rust-sdk before 0.6 requests a room key from our devices, it correctly accepts key forwards only if they are a response to a previous request. However, it doesn't check that the device that responded matches the device the key was requested from.</p>
<p>This allows a malicious homeserver to insert room keys of questionable validity into the key store in some situations, potentially assisting in an impersonation attack. Note that even if key injection succeeds in this way, all forwarded keys have the <code>imported</code> flag set, which is used as an indicator that such keys have lesser authentication properties (and should be marked as such in clients, e.g. with a grey shield besides the message).</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-vp68-2wrm-69qm">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-vp68-2wrm-69qm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39252">https://nvd.nist.gov/vuln/detail/CVE-2022-39252</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/093fb5d0aa21c0b5eaea6ec96b477f1075271cbb">https://github.com/matrix-org/matrix-rust-sdk/commit/093fb5d0aa21c0b5eaea6ec96b477f1075271cbb</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/41449d2cc360e347f5d4e1c154ec1e3185f11acd">https://github.com/matrix-org/matrix-rust-sdk/commit/41449d2cc360e347f5d4e1c154ec1e3185f11acd</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/releases/tag/matrix-sdk-0.6.0">https://github.com/matrix-org/matrix-rust-sdk/releases/tag/matrix-sdk-0.6.0</a></li>
<li><a href="https://github.com/advisories/GHSA-vp68-2wrm-69qm">https://github.com/advisories/GHSA-vp68-2wrm-69qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vp68-2wrm-69qm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-30T22:51:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Weight not properly refunded after EVM execution]]></title>
        <id>https://github.com/advisories/GHSA-v57h-6hmh-g2p4</id>
        <link href="https://github.com/advisories/GHSA-v57h-6hmh-g2p4"/>
        <updated>2022-09-27T08:33:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Previously, the worst case weight was always accounted as the block weight for all cases. In case of large EVM gas refunds, this can lead to block spamming attacks -- the adversary can construct blocks with transactions that have large amount of refunds or unused gases with reverts, and as a result inflate up the chain gas prices. This issue is fixed by properly refund unused weights after each EVM execution.</p>
<p>The impact of this issue is limited in that the spamming attack would still be costly for any adversary, and it has no ability to alter any chain state. </p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in <a href="https://github.com/paritytech/frontier/pull/851">https://github.com/paritytech/frontier/pull/851</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/paritytech/frontier/issues">Frontier repo</a></li>
<li>Email <a href="mailto:wei@that.world">Wei</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-v57h-6hmh-g2p4">https://github.com/paritytech/frontier/security/advisories/GHSA-v57h-6hmh-g2p4</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/851">https://github.com/paritytech/frontier/pull/851</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39242">https://nvd.nist.gov/vuln/detail/CVE-2022-39242</a></li>
<li><a href="https://github.com/advisories/GHSA-v57h-6hmh-g2p4">https://github.com/advisories/GHSA-v57h-6hmh-g2p4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57h-6hmh-g2p4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-23T22:07:10.000Z</published>
    </entry>
</feed>