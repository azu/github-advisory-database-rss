<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-04-03T19:01:26.427Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`]]></title>
        <id>https://github.com/advisories/GHSA-r7jw-wp68-3xch</id>
        <link href="https://github.com/advisories/GHSA-r7jw-wp68-3xch"/>
        <updated>2023-04-03T18:59:21.000Z</updated>
        <content type="html"><![CDATA[<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>
<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>
<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>
<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0215">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0009.html">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jw-wp68-3xch">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jw-wp68-3xch</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-08T22:28:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`]]></title>
        <id>https://github.com/advisories/GHSA-r7jw-wp68-3xch</id>
        <link href="https://github.com/advisories/GHSA-r7jw-wp68-3xch"/>
        <updated>2023-04-03T18:59:21.000Z</updated>
        <content type="html"><![CDATA[<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>
<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>
<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>
<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0215">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0009.html">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jw-wp68-3xch">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jw-wp68-3xch</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-08T22:28:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Regular Expression Denial of Service in Deno.upgradeWebSocket API]]></title>
        <id>https://github.com/advisories/GHSA-jc97-h3h9-7xh6</id>
        <link href="https://github.com/advisories/GHSA-jc97-h3h9-7xh6"/>
        <updated>2023-04-03T17:18:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of the package deno before 1.31.0 are vulnerable to Regular Expression Denial of Service (ReDoS) due to the upgradeWebSocket function, which contains regexes in the form of /s*,s*/, used for splitting the Connection/Upgrade header. A specially crafted Connection/Upgrade header can be used to significantly slow down a web socket server. </p>
<h3 id="patches">Patches</h3>
<p>It is recommended that users upgrade to Deno 1.31.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-jc97-h3h9-7xh6">https://github.com/denoland/deno/security/advisories/GHSA-jc97-h3h9-7xh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26103">https://nvd.nist.gov/vuln/detail/CVE-2023-26103</a></li>
<li><a href="https://github.com/denoland/deno/pull/17722">https://github.com/denoland/deno/pull/17722</a></li>
<li><a href="https://github.com/denoland/deno/commit/cf06a7c7e672880e1b38598fe445e2c50b4a9d06">https://github.com/denoland/deno/commit/cf06a7c7e672880e1b38598fe445e2c50b4a9d06</a></li>
<li><a href="https://github.com/denoland/deno/blob/2b247be517d789a37e532849e2e40b724af0918f/ext/http/01_http.js#L395-L409">https://github.com/denoland/deno/blob/2b247be517d789a37e532849e2e40b724af0918f/ext/http/01_http.js#L395-L409</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.31.0">https://github.com/denoland/deno/releases/tag/v1.31.0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-DENO-3315970">https://security.snyk.io/vuln/SNYK-RUST-DENO-3315970</a></li>
<li><a href="https://github.com/advisories/GHSA-jc97-h3h9-7xh6">https://github.com/advisories/GHSA-jc97-h3h9-7xh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jc97-h3h9-7xh6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-03T17:18:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tremor-script] Memory Safety Issue when using patch or merge on state and assign the result back to state]]></title>
        <id>https://github.com/advisories/GHSA-mc22-5q92-8v85</id>
        <link href="https://github.com/advisories/GHSA-mc22-5q92-8v85"/>
        <updated>2023-03-30T23:45:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability is a memory safety Issue when using <a href="https://www.tremor.rs/docs/tremor-script/index#patch"><code>patch</code></a> or <a href="https://www.tremor.rs/docs/tremor-script/index#merge"><code>merge</code></a> on <code>state</code> and assign the result back to <code>state</code>.
In this case affected versions of Tremor and the <a href="https://crates.io/crates/tremor-script">tremor-script crate</a> maintains references to memory that might have been freed already. And these memory regions can be accessed by retrieving the <code>state</code>, e.g. send it over TCP or HTTP. This requires the Tremor server (or any other program using tremor-script) to execute a tremor-script script that uses the mentioned language construct.</p>
<h4 id="details">Details</h4>
<p>If affects the following two tremor-script language constructs:</p>
<ul>
<li>A <a href="https://www.tremor.rs/docs/tremor-script/index#merge">Merge</a> where we assign the result back to the target expression
and the expression to be merged needs to reference the <code>event</code>:</li>
</ul>
<pre><code>let state = merge state of event end;
</code></pre>
<ul>
<li>A <a href="https://www.tremor.rs/docs/tremor-script/index#patch">Patch</a> where we assign the result back to the target expression
and the patch operations used need to reference the <code>event</code>:</li>
</ul>
<pre><code>let state = patch state of insert event.key =&gt; event.value end;
</code></pre>
<p>For constructs like this (it does not matter what it references in the expression to be merged or the patch operations) an optimization
was applied to manipulate the target value in-place, instead of cloning it.</p>
<p>Our <code>Value</code> struct, which underpins all event data in <code>tremor-script</code>, is representing strings as borrowed <code>beef::Cow&lt;'lifetime, str&gt;</code>, 
that reference the raw data <code>Vec&lt;u8&gt;</code> the event is based upon. We keep this raw byte-array next to the <code>Value</code> structure inside our <code>Event</code> as a self-referential struct,
so we make sure that the structured <code>Value</code> and its references are valid across its whole lifetime.</p>
<p>The optimization was considered safe as long as it was only possible to merge or patch <code>event</code> data or static data.
When <code>state</code> was introduced to <code>tremor-script</code> (in version 0.7.3) a new possibility to keep <code>Value</code> data around for longer than the lifetime of an event emerged.
If <code>event</code> data is merged or patched into <code>state</code> without cloning it first, it can still reference keys or values from
the previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in <a href="https://crates.io/crates/tremor-script/0.11.6">https://crates.io/crates/tremor-script/0.11.6</a> and <a href="https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6">https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6</a> via commit <a href="https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e">1a2efcd</a> by removing the optimization
and always clone the target expression of a <a href="https://www.tremor.rs/docs/tremor-script/index#merge">Merge</a> or [Patch](<a href="https://www.tremor.rs/docs/tremor-script/index#patch">https://www.tremor.rs/docs/tremor-script/index#patch</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If an upgrade is not possible, a possible workaround is to avoid the optimization
by introducing a temporary variable and not immediately reassigning to <code>state</code>:</p>
<pre><code>let tmp = merge state of event end;
let state = tmp
</code></pre>
<h3 id="references">References</h3>
<p>The actual fix is applied in this PR: <a href="https://github.com/tremor-rs/tremor-runtime/pull/1217">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue on our repository <a href="https://github.com/tremor-rs/tremor-runtime">tremor-rs/tremor-runtime</a></li>
<li>Please join our discord <a href="https://chat.tremor.rs">https://chat.tremor.rs</a> and reach out to the team.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tremor-rs/tremor-runtime/security/advisories/GHSA-mc22-5q92-8v85">https://github.com/tremor-rs/tremor-runtime/security/advisories/GHSA-mc22-5q92-8v85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39228">https://nvd.nist.gov/vuln/detail/CVE-2021-39228</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/pull/1217">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e">https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6">https://github.com/tremor-rs/tremor-runtime/releases/tag/v0.11.6</a></li>
<li><a href="https://github.com/advisories/GHSA-mc22-5q92-8v85">https://github.com/advisories/GHSA-mc22-5q92-8v85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc22-5q92-8v85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-09-20T19:52:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slice-deque] Double free in slice-deque]]></title>
        <id>https://github.com/advisories/GHSA-p9gf-gmfv-398m</id>
        <link href="https://github.com/advisories/GHSA-p9gf-gmfv-398m"/>
        <updated>2023-03-30T23:01:09.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the slice-deque crate through 2021-02-19 for Rust. A double drop can occur in SliceDeque::drain_filter upon a panic in a predicate function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29938">https://nvd.nist.gov/vuln/detail/CVE-2021-29938</a></li>
<li><a href="https://github.com/gnzlbg/slice_deque/issues/90">https://github.com/gnzlbg/slice_deque/issues/90</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0047.html">https://rustsec.org/advisories/RUSTSEC-2021-0047.html</a></li>
<li><a href="https://github.com/advisories/GHSA-p9gf-gmfv-398m">https://github.com/advisories/GHSA-p9gf-gmfv-398m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9gf-gmfv-398m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:54:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[comrak] Comrak AST node data is not validated (GHSL-2023-049)]]></title>
        <id>https://github.com/advisories/GHSA-5r3x-p7xx-x6q5</id>
        <link href="https://github.com/advisories/GHSA-5r3x-p7xx-x6q5"/>
        <updated>2023-03-28T23:08:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Comrak AST can be constructed manually by a program instead of parsing a Markdown document with <code>parse_document</code>. This AST can then be converted to HTML via <code>html::format_document_with_plugins</code>. However, the HTML formatting code assumes that the AST is well-formed. For example, many AST notes contain <code>[u8]</code> fields which the formatting code assumes is valid UTF-8 data. Several bugs can be triggered if this is not the case.</p>
<h3 id="patches">Patches</h3>
<p>0.17.0 contains adjustments to the AST, storing strings instead of unvalidated byte arrays.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Validate UTF-8 correctness of all data when assigning to <code>&amp;[u8]</code> and <code>Vec&lt;u8&gt;</code> fields in the AST.</li>
</ul>
<h3 id="references">References</h3>
<p>n/a</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kivikakk/comrak/security/advisories/GHSA-5r3x-p7xx-x6q5">https://github.com/kivikakk/comrak/security/advisories/GHSA-5r3x-p7xx-x6q5</a></li>
<li><a href="https://github.com/kivikakk/comrak/commit/9ff5f8df0ac951f5742d22a72c39b89a15f56639">https://github.com/kivikakk/comrak/commit/9ff5f8df0ac951f5742d22a72c39b89a15f56639</a></li>
<li><a href="https://github.com/kivikakk/comrak/releases/tag/0.17.0">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28631">https://nvd.nist.gov/vuln/detail/CVE-2023-28631</a></li>
<li><a href="https://github.com/advisories/GHSA-5r3x-p7xx-x6q5">https://github.com/advisories/GHSA-5r3x-p7xx-x6q5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r3x-p7xx-x6q5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-28T14:45:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[comrak] Comrak vulnerable to production of excessive output when parsing Markdown (GHSL-2023-048)]]></title>
        <id>https://github.com/advisories/GHSA-xxmq-4vph-956w</id>
        <link href="https://github.com/advisories/GHSA-xxmq-4vph-956w"/>
        <updated>2023-03-28T17:28:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>comrak is vulnerable to the upstream cmark issue, <a href="https://github.com/commonmark/cmark/issues/354">"Issue revealed by fuzzer"</a>. A large number of references in a markdown document can trigger an overly large response.</p>
<h3 id="patches">Patches</h3>
<p>0.17.0 contains <a href="https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a">https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a</a>, which limits reference output to a 100Kb maximum.</p>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/commonmark/cmark/issues/354">https://github.com/commonmark/cmark/issues/354</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kivikakk/comrak/security/advisories/GHSA-xxmq-4vph-956w">https://github.com/kivikakk/comrak/security/advisories/GHSA-xxmq-4vph-956w</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/354">https://github.com/commonmark/cmark/issues/354</a></li>
<li><a href="https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a">https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a</a></li>
<li><a href="https://github.com/kivikakk/comrak/releases/tag/0.17.0">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>
<li><a href="https://github.com/advisories/GHSA-xxmq-4vph-956w">https://github.com/advisories/GHSA-xxmq-4vph-956w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xxmq-4vph-956w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-28T14:44:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[comrak] Comrak vulnerable to quadratic runtime issues when parsing Markdown (GHSL-2023-047)]]></title>
        <id>https://github.com/advisories/GHSA-8hqf-xjwp-p67v</id>
        <link href="https://github.com/advisories/GHSA-8hqf-xjwp-p67v"/>
        <updated>2023-03-28T23:08:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A range of quadratic parsing issues from <code>cmark</code>/<code>cmark-gfm</code> are also present in Comrak. These can be used to craft denial-of-service attacks on services that use Comrak to parse Markdown.</p>
<h3 id="patches">Patches</h3>
<p>0.17.0 contains fixes to known quadratic parsing issues.</p>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/commonmark/cmark/issues/255">https://github.com/commonmark/cmark/issues/255</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/389">https://github.com/commonmark/cmark/issues/389</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/373">https://github.com/commonmark/cmark/issues/373</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/299">https://github.com/commonmark/cmark/issues/299</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/388">https://github.com/commonmark/cmark/issues/388</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/284">https://github.com/commonmark/cmark/issues/284</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/218">https://github.com/commonmark/cmark/issues/218</a></li>
<li><a href="https://github.com/commonmark/cmark/pull/232">https://github.com/commonmark/cmark/pull/232</a></li>
<li><a href="https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65</a></li>
<li><a href="https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kivikakk/comrak/security/advisories/GHSA-8hqf-xjwp-p67v">https://github.com/kivikakk/comrak/security/advisories/GHSA-8hqf-xjwp-p67v</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/218">https://github.com/commonmark/cmark/issues/218</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/255">https://github.com/commonmark/cmark/issues/255</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/284">https://github.com/commonmark/cmark/issues/284</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/299">https://github.com/commonmark/cmark/issues/299</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/373">https://github.com/commonmark/cmark/issues/373</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/388">https://github.com/commonmark/cmark/issues/388</a></li>
<li><a href="https://github.com/commonmark/cmark/issues/389">https://github.com/commonmark/cmark/issues/389</a></li>
<li><a href="https://github.com/commonmark/cmark/pull/232">https://github.com/commonmark/cmark/pull/232</a></li>
<li><a href="https://github.com/kivikakk/comrak/commit/ce795b7f471b01589f842dc09af38b025701178d">https://github.com/kivikakk/comrak/commit/ce795b7f471b01589f842dc09af38b025701178d</a></li>
<li><a href="https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65</a></li>
<li><a href="https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89</a></li>
<li><a href="https://github.com/kivikakk/comrak/releases/tag/0.17.0">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28626">https://nvd.nist.gov/vuln/detail/CVE-2023-28626</a></li>
<li><a href="https://github.com/advisories/GHSA-8hqf-xjwp-p67v">https://github.com/advisories/GHSA-8hqf-xjwp-p67v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hqf-xjwp-p67v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-28T14:40:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</id>
        <link href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"/>
        <updated>2023-03-27T22:33:32.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0286">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0006.html">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2023-0286">https://access.redhat.com/security/cve/cve-2023-0286</a></li>
<li><a href="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt">https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt</a></li>
<li><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig</a></li>
<li><a href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-08T22:17:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</id>
        <link href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"/>
        <updated>2023-03-27T22:33:32.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0286">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0006.html">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2023-0286">https://access.redhat.com/security/cve/cve-2023-0286</a></li>
<li><a href="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt">https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt</a></li>
<li><a href="https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig">https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig</a></li>
<li><a href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-08T22:17:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nats] NATS TLS certificate common name validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-wvc4-j7g5-4f79</id>
        <link href="https://github.com/advisories/GHSA-wvc4-j7g5-4f79"/>
        <updated>2023-03-27T21:12:26.000Z</updated>
        <content type="html"><![CDATA[<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>
<p>A fix for the <code>nats</code> crate hasn't been released yet. Since the <code>nats</code> crate is going to be deprecated anyway, consider switching to <code>async-nats</code> <code>&gt;= 0.29</code> which already fixed this vulnerability.</p>
<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>
<h2 id="reproduction-steps">Reproduction steps</h2>
<ol>
<li>The NATS Rust client tries to establish a new connection</li>
<li>The connection is intercepted by a MitM proxy</li>
<li>The proxy makes a separate connection to the NATS server</li>
<li>The NATS server replies with an <code>INFO</code> message</li>
<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>
<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>
<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>
<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/nats.rs/pull/881">https://github.com/nats-io/nats.rs/pull/881</a></li>
<li><a href="https://github.com/nats-io/nats.rs/pull/887">https://github.com/nats-io/nats.rs/pull/887</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0029.html">https://rustsec.org/advisories/RUSTSEC-2023-0029.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wvc4-j7g5-4f79">https://github.com/advisories/GHSA-wvc4-j7g5-4f79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvc4-j7g5-4f79</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-27T21:12:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Interactive `run` permission prompt spoofing via improper ANSI neutralization]]></title>
        <id>https://github.com/advisories/GHSA-vq67-rp93-65qf</id>
        <link href="https://github.com/advisories/GHSA-vq67-rp93-65qf"/>
        <updated>2023-03-24T22:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>
<h3 id="details">Details</h3>
<p>The main entry point comes down to the ability to override what the API control says (<a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>
<h3 id="poc">PoC</h3>
<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>
<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>
<pre><code class="language-ts">const boldANSI = "\u001b[1m" // bold
const unboldANSI = "\u001b[22m" // unbold

const prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to "echo"${unboldANSI}
├ Requested by \`Deno.Command().output()`

const moveANSIUp = "\u001b[1A" // moves to the start of the line
const clearANSI = "\u001b[2K" // clears the line
const moveANSIStart = "\u001b[1000D" // moves to the start of the line

Deno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({
    cmd: "cat",
    args: ["/etc/passwd"],
    clearEnv: false,
    env: [],
    stdin: "null",
    stdout: "inherit",
    stderr: "piped"
}, moveANSIUp + clearANSI + moveANSIStart + prompt)
</code></pre>
<p>Run the file with <code>deno run index.ts</code>.</p>
<h3 id="impact">Impact</h3>
<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>
<pre><code>// Expected Prompt
┌ ⚠️  Deno requests run access to "cat"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;

// Actual Prompt
┌ ⚠️  Deno requests run access to "echo"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;
</code></pre>
<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>
<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>
<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28446">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>
<li><a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.31.2">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>
<li><a href="https://github.com/advisories/GHSA-vq67-rp93-65qf">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq67-rp93-65qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:06:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Interactive `run` permission prompt spoofing via improper ANSI neutralization]]></title>
        <id>https://github.com/advisories/GHSA-vq67-rp93-65qf</id>
        <link href="https://github.com/advisories/GHSA-vq67-rp93-65qf"/>
        <updated>2023-03-24T22:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>
<h3 id="details">Details</h3>
<p>The main entry point comes down to the ability to override what the API control says (<a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>
<h3 id="poc">PoC</h3>
<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>
<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>
<pre><code class="language-ts">const boldANSI = "\u001b[1m" // bold
const unboldANSI = "\u001b[22m" // unbold

const prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to "echo"${unboldANSI}
├ Requested by \`Deno.Command().output()`

const moveANSIUp = "\u001b[1A" // moves to the start of the line
const clearANSI = "\u001b[2K" // clears the line
const moveANSIStart = "\u001b[1000D" // moves to the start of the line

Deno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({
    cmd: "cat",
    args: ["/etc/passwd"],
    clearEnv: false,
    env: [],
    stdin: "null",
    stdout: "inherit",
    stderr: "piped"
}, moveANSIUp + clearANSI + moveANSIStart + prompt)
</code></pre>
<p>Run the file with <code>deno run index.ts</code>.</p>
<h3 id="impact">Impact</h3>
<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>
<pre><code>// Expected Prompt
┌ ⚠️  Deno requests run access to "cat"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;

// Actual Prompt
┌ ⚠️  Deno requests run access to "echo"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;
</code></pre>
<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>
<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>
<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28446">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>
<li><a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.31.2">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>
<li><a href="https://github.com/advisories/GHSA-vq67-rp93-65qf">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq67-rp93-65qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:06:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509NameBuilder::build` returned object is not thread safe]]></title>
        <id>https://github.com/advisories/GHSA-3gxf-9r58-2ghg</id>
        <link href="https://github.com/advisories/GHSA-3gxf-9r58-2ghg"/>
        <updated>2023-03-24T22:01:36.000Z</updated>
        <content type="html"><![CDATA[<p>OpenSSL has a <code>modified</code> bit that it can set on on <code>X509_NAME</code> objects. If this bit is set then the object is not thread-safe even when it appears the code is not modifying the value.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0022.html">https://rustsec.org/advisories/RUSTSEC-2023-0022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3gxf-9r58-2ghg">https://github.com/advisories/GHSA-3gxf-9r58-2ghg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3gxf-9r58-2ghg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T22:01:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read]]></title>
        <id>https://github.com/advisories/GHSA-9qwg-crg9-m2vc</id>
        <link href="https://github.com/advisories/GHSA-9qwg-crg9-m2vc"/>
        <updated>2023-03-24T22:01:31.000Z</updated>
        <content type="html"><![CDATA[<p><code>SubjectAlternativeName</code> and <code>ExtendedKeyUsage</code> arguments were parsed using the OpenSSL function <code>X509V3_EXT_nconf</code>. This function parses all input using an OpenSSL mini-language which can perform arbitrary file reads.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0023.html">https://rustsec.org/advisories/RUSTSEC-2023-0023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9qwg-crg9-m2vc">https://github.com/advisories/GHSA-9qwg-crg9-m2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qwg-crg9-m2vc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:01:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference]]></title>
        <id>https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</id>
        <link href="https://github.com/advisories/GHSA-6hcf-g6gr-hhcr"/>
        <updated>2023-03-24T22:01:24.000Z</updated>
        <content type="html"><![CDATA[<p>These functions would crash when the context argument was None with certain extension types.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0024.html">https://rustsec.org/advisories/RUSTSEC-2023-0024.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6hcf-g6gr-hhcr">https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:01:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[versionize] Versionize::deserialize implementation for FamStructWrapper<T> is lacking bound checks, potentially leading to out of bounds memory accesses]]></title>
        <id>https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</id>
        <link href="https://github.com/advisories/GHSA-8vxc-r5wp-vgvc"/>
        <updated>2023-03-27T22:03:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue was discovered in the <code>Versionize::deserialize</code> implementation provided by the <code>versionize</code> crate for <code>vmm_sys_util::fam::FamStructWrapper</code>, which can lead to out of bounds memory accesses.</p>
<h3 id="patches">Patches</h3>
<p>The impact started with version 0.1.1. The issue was corrected in version 0.1.10 by inserting a check that verifies, for any deserialized header, the lengths of compared flexible arrays are equal and aborting deserialization otherwise.</p>
<h3 id="workarounds">Workarounds</h3>
<p>-</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/firecracker-microvm/versionize/pull/53">https://github.com/firecracker-microvm/versionize/pull/53</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc">https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28448">https://nvd.nist.gov/vuln/detail/CVE-2023-28448</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/pull/53">https://github.com/firecracker-microvm/versionize/pull/53</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47">https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10">https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0030.html">https://rustsec.org/advisories/RUSTSEC-2023-0030.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8vxc-r5wp-vgvc">https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T22:00:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[async-nats] async-nats vulnerable to TLS certificate common name validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-f5v5-ccqc-6w36</id>
        <link href="https://github.com/advisories/GHSA-f5v5-ccqc-6w36"/>
        <updated>2023-03-24T21:59:54.000Z</updated>
        <content type="html"><![CDATA[<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>
<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>
<h2 id="reproduction-steps">Reproduction steps</h2>
<ol>
<li>The NATS Rust client tries to establish a new connection</li>
<li>The connection is intercepted by a MitM proxy</li>
<li>The proxy makes a separate connection to the NATS server</li>
<li>The NATS server replies with an <code>INFO</code> message</li>
<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>
<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>
<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>
<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304">https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0027.html">https://rustsec.org/advisories/RUSTSEC-2023-0027.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f5v5-ccqc-6w36">https://github.com/advisories/GHSA-f5v5-ccqc-6w36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f5v5-ccqc-6w36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T21:59:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno improperly handles resizable ArrayBuffer]]></title>
        <id>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</id>
        <link href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx"/>
        <updated>2023-03-24T13:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/tc39/proposal-resizablearraybuffer">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>
<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>
<p>Deno Deploy users are not affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>
<li><a href="https://github.com/denoland/deno/pull/18395">https://github.com/denoland/deno/pull/18395</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.32.1">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28445">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>
<li><a href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-23T23:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde_v8] Deno improperly handles resizable ArrayBuffer]]></title>
        <id>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</id>
        <link href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx"/>
        <updated>2023-03-24T13:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/tc39/proposal-resizablearraybuffer">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>
<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>
<p>Deno Deploy users are not affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>
<li><a href="https://github.com/denoland/deno/pull/18395">https://github.com/denoland/deno/pull/18395</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.32.1">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28445">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>
<li><a href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-23T23:13:25.000Z</published>
    </entry>
</feed>