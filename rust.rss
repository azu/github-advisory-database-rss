<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-02-13T01:14:54.502Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[parsec-service] Potential segfault in SPIFFE authenticator]]></title>
        <id>https://github.com/advisories/GHSA-45w3-v3g4-54pm</id>
        <link href="https://github.com/advisories/GHSA-45w3-v3g4-54pm"/>
        <updated>2022-02-11T21:06:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Several vulnerabilities have been reported in the <code>time</code> and <code>chrono</code> crates related to handling of calls to <code>localtime_r</code>. You can follow some of the discussions <a href="https://github.com/chronotope/chrono/issues/602">here</a> and <a href="https://github.com/time-rs/time/issues/293">here</a>, and the associated CVE <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a>. In our case, the issue with the dependency was flagged by our nightly CI build running <a href="https://github.com/parallaxsecond/parsec/issues/544"><code>cargo-audit</code></a>. </p>
<p>The vulnerability leads to a segfault in specific circumstances - namely, when one of a number of functions in the <code>time</code> crate is called while any other thread is setting an environment variable. Given that in the case of the Parsec service this affects the SPIFFE authenticator, Parsec service users can encounter the issue only when the JWT SVID authenticator is enabled and being used. We have not undergone any manual tracing to understand if the vulnerable methods are called anywhere in our stack, however it seems reasonable to expect that if that were to be the case, the issue would lie in JWT validation (i.e. when handling the dates found within a Json Web Token). JWT validation could thus fail, bringing down the thread in which the request happens. The rest of the threads continue to work. Since the threadpool implementation that we use <a href="https://docs.rs/threadpool/latest/threadpool/">continues replenishing the pool</a> when one thread panics, the impact on the service should be minimal.</p>
<h3 id="patches">Patches</h3>
<p>No current patches exist as the problems lie in a number of dependencies that are not under our control (see more details <a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">here</a>).</p>
<p>The issue tracking the required change in the <code>rust-spiffe</code> crate (through which the vulnerable dependencies are imported in Parsec) can be seen <a href="https://github.com/maxlambrecht/rust-spiffe/issues/17">here</a>. Once updates happen in our dependency chain that allow us to update beyond the vulnerable versions of <code>time</code> and <code>chrono</code>, a new version of the Parsec service will be tagged and released with the appropriate notifications.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only complete workaround is to use a different type of authenticator with the Parsec service. </p>
<h3 id="references">References</h3>
<p>As quoted in the initial paragraph, you can find out more information:</p>
<ul>
<li>in the <code>chrono</code> repo issue <a href="https://github.com/chronotope/chrono/issues/602">here</a></li>
<li>in the <code>time</code> repo issue <a href="https://github.com/time-rs/time/issues/293">here</a></li>
<li>in the official CVE report <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a></li>
<li>in our tracking issue <a href="https://github.com/parallaxsecond/parsec/issues/544">here</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/parallaxsecond/parsec">the Parsec service repo</a></li>
<li>Email us at <a href="mailto:cncf-parsec-maintainers@lists.cncf.io">cncf-parsec-maintainers@lists.cncf.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm">https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/chronotope/chrono/issues/602">https://github.com/chronotope/chrono/issues/602</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544">https://github.com/parallaxsecond/parsec/issues/544</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://github.com/advisories/GHSA-45w3-v3g4-54pm">https://github.com/advisories/GHSA-45w3-v3g4-54pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45w3-v3g4-54pm</uri>
        </author>
        <published>2022-02-11T19:11:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bingrep] Denial of service in bingrep]]></title>
        <id>https://github.com/advisories/GHSA-gm68-g349-gxgg</id>
        <link href="https://github.com/advisories/GHSA-gm68-g349-gxgg"/>
        <updated>2022-01-28T22:35:16.000Z</updated>
        <content type="html"><![CDATA[<p>Bingrep v0.8.5 was discovered to contain a memory allocation failure which can cause a Denial of Service (DoS).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-39480">https://nvd.nist.gov/vuln/detail/CVE-2021-39480</a></li>
<li><a href="https://github.com/m4b/bingrep/issues/30">https://github.com/m4b/bingrep/issues/30</a></li>
<li><a href="https://github.com/advisories/GHSA-gm68-g349-gxgg">https://github.com/advisories/GHSA-gm68-g349-gxgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gm68-g349-gxgg</uri>
        </author>
        <published>2022-01-28T22:35:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[solana_rbpf] Integer overflow in solana_rbpf]]></title>
        <id>https://github.com/advisories/GHSA-xwqr-xmgg-j69q</id>
        <link href="https://github.com/advisories/GHSA-xwqr-xmgg-j69q"/>
        <updated>2022-02-08T19:45:11.000Z</updated>
        <content type="html"><![CDATA[<p>From version 0.2.14 to 0.2.16 for Solana rBPF, function "relocate" in the file src/elf.rs has an integer overflow bug because the sym.st_value is read directly from ELF file without checking. If the sym.st_value is rather large, an integer overflow is triggered while calculating the variable "addr" via "addr = (sym.st_value + refd_pa) as u64";</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-46102">https://nvd.nist.gov/vuln/detail/CVE-2021-46102</a></li>
<li><a href="https://github.com/solana-labs/rbpf/pull/200">https://github.com/solana-labs/rbpf/pull/200</a></li>
<li><a href="https://github.com/solana-labs/rbpf/pull/236">https://github.com/solana-labs/rbpf/pull/236</a></li>
<li><a href="https://blocksecteam.medium.com/new-integer-overflow-bug-discovered-in-solana-rbpf-7729717159ee">https://blocksecteam.medium.com/new-integer-overflow-bug-discovered-in-solana-rbpf-7729717159ee</a></li>
<li><a href="https://github.com/solana-labs/rbpf/blob/c14764850f0b83b58aa013248eaf6d65836c1218/src/elf.rs#L609-L630">https://github.com/solana-labs/rbpf/blob/c14764850f0b83b58aa013248eaf6d65836c1218/src/elf.rs#L609-L630</a></li>
<li><a href="https://github.com/solana-labs/rbpf/releases/tag/v0.2.17">https://github.com/solana-labs/rbpf/releases/tag/v0.2.17</a></li>
<li><a href="https://github.com/advisories/GHSA-xwqr-xmgg-j69q">https://github.com/advisories/GHSA-xwqr-xmgg-j69q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xwqr-xmgg-j69q</uri>
        </author>
        <published>2022-01-28T22:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Integer underflow in Frontier]]></title>
        <id>https://github.com/advisories/GHSA-cjg2-2fjg-fph4</id>
        <link href="https://github.com/advisories/GHSA-cjg2-2fjg-fph4"/>
        <updated>2022-01-15T00:03:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. It is recommended that you apply the patch as soon as possible.</p>
<p>If you do not use MODEXP precompile in your runtime, then you are not impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patches are applied in PR #549.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>Patch PR: #549</p>
<h3 id="credits">Credits</h3>
<p>Thanks to SR-Labs for discovering the security vulnerability, and thanks to PureStake team for the patches.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/paritytech/frontier">Frontier repo</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4">https://github.com/paritytech/frontier/security/advisories/GHSA-cjg2-2fjg-fph4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21685">https://nvd.nist.gov/vuln/detail/CVE-2022-21685</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/549">https://github.com/paritytech/frontier/pull/549</a></li>
<li><a href="https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664">https://github.com/paritytech/frontier/commit/8a93fdc6c9f4eb1d2f2a11b7ff1d12d70bf5a664</a></li>
<li><a href="https://github.com/advisories/GHSA-cjg2-2fjg-fph4">https://github.com/advisories/GHSA-cjg2-2fjg-fph4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cjg2-2fjg-fph4</uri>
        </author>
        <published>2022-01-14T21:03:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lru] Use After Free in lru]]></title>
        <id>https://github.com/advisories/GHSA-v362-2895-h9r2</id>
        <link href="https://github.com/advisories/GHSA-v362-2895-h9r2"/>
        <updated>2022-01-07T22:37:01.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the lru crate before 0.7.1 for Rust. The iterators have a use-after-free, as demonstrated by an access after a pop operation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45720">https://nvd.nist.gov/vuln/detail/CVE-2021-45720</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/lru/RUSTSEC-2021-0130.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/lru/RUSTSEC-2021-0130.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0130.html">https://rustsec.org/advisories/RUSTSEC-2021-0130.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v362-2895-h9r2">https://github.com/advisories/GHSA-v362-2895-h9r2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v362-2895-h9r2</uri>
        </author>
        <published>2022-01-07T22:37:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[smallvec] Use of Uninitialized Resource in smallvec]]></title>
        <id>https://github.com/advisories/GHSA-55m5-whcv-c49c</id>
        <link href="https://github.com/advisories/GHSA-55m5-whcv-c49c"/>
        <updated>2022-01-06T22:20:28.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the smallvec crate before 0.6.13 for Rust. It can create an uninitialized value of any type, including a reference type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25023">https://nvd.nist.gov/vuln/detail/CVE-2018-25023</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/smallvec/RUSTSEC-2018-0018.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/smallvec/RUSTSEC-2018-0018.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0018.html">https://rustsec.org/advisories/RUSTSEC-2018-0018.html</a></li>
<li><a href="https://github.com/advisories/GHSA-55m5-whcv-c49c">https://github.com/advisories/GHSA-55m5-whcv-c49c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55m5-whcv-c49c</uri>
        </author>
        <published>2022-01-06T22:20:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-9qj6-4rfq-vm84</id>
        <link href="https://github.com/advisories/GHSA-9qj6-4rfq-vm84"/>
        <updated>2022-01-06T22:20:41.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly coerce an immutable reference into a mutable reference, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25024">https://nvd.nist.gov/vuln/detail/CVE-2018-25024</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9qj6-4rfq-vm84">https://github.com/advisories/GHSA-9qj6-4rfq-vm84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qj6-4rfq-vm84</uri>
        </author>
        <published>2022-01-06T22:20:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-fgfm-hqjw-3265</id>
        <link href="https://github.com/advisories/GHSA-fgfm-hqjw-3265"/>
        <updated>2022-01-06T22:18:46.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly extend the lifetime of a string, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25025">https://nvd.nist.gov/vuln/detail/CVE-2018-25025</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-fgfm-hqjw-3265">https://github.com/advisories/GHSA-fgfm-hqjw-3265</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fgfm-hqjw-3265</uri>
        </author>
        <published>2022-01-06T22:18:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[actix-web] Out-of-bounds Write in actix-web]]></title>
        <id>https://github.com/advisories/GHSA-7x36-h62w-vw65</id>
        <link href="https://github.com/advisories/GHSA-7x36-h62w-vw65"/>
        <updated>2022-01-06T22:18:58.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can add the Send marker trait to an object that cannot be sent between threads safely, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25026">https://nvd.nist.gov/vuln/detail/CVE-2018-25026</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/actix-web/RUSTSEC-2018-0019.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0019.html">https://rustsec.org/advisories/RUSTSEC-2018-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7x36-h62w-vw65">https://github.com/advisories/GHSA-7x36-h62w-vw65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x36-h62w-vw65</uri>
        </author>
        <published>2022-01-06T22:18:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use After Free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</id>
        <link href="https://github.com/advisories/GHSA-hxjf-h2mh-r6hj"/>
        <updated>2022-01-06T22:20:12.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 1.2.1 for Rust. get_format_info can cause a use-after-free.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25027">https://nvd.nist.gov/vuln/detail/CVE-2018-25027</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0021.html">https://rustsec.org/advisories/RUSTSEC-2018-0021.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hxjf-h2mh-r6hj">https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxjf-h2mh-r6hj</uri>
        </author>
        <published>2022-01-06T22:20:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pnet] Missing Initialization of Resource in pnet]]></title>
        <id>https://github.com/advisories/GHSA-24g6-5rx7-58wj</id>
        <link href="https://github.com/advisories/GHSA-24g6-5rx7-58wj"/>
        <updated>2022-01-07T16:13:37.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the pnet crate before 0.27.2 for Rust. There is a segmentation fault (upon attempted dereference of an uninitialized descriptor) because of an erroneous IcmpTransportChannelIterator compiler optimization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25054">https://nvd.nist.gov/vuln/detail/CVE-2019-25054</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/pnet/RUSTSEC-2019-0037.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/pnet/RUSTSEC-2019-0037.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0037.html">https://rustsec.org/advisories/RUSTSEC-2019-0037.html</a></li>
<li><a href="https://github.com/advisories/GHSA-24g6-5rx7-58wj">https://github.com/advisories/GHSA-24g6-5rx7-58wj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24g6-5rx7-58wj</uri>
        </author>
        <published>2022-01-06T22:18:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Use After Free in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-jqpv-jm4m-86j9</id>
        <link href="https://github.com/advisories/GHSA-jqpv-jm4m-86j9"/>
        <updated>2022-01-06T22:17:50.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 1.2.1 for Rust. get_context can cause a use-after-free.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25028">https://nvd.nist.gov/vuln/detail/CVE-2018-25028</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2018-0021.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0021.html">https://rustsec.org/advisories/RUSTSEC-2018-0021.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jqpv-jm4m-86j9">https://github.com/advisories/GHSA-jqpv-jm4m-86j9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqpv-jm4m-86j9</uri>
        </author>
        <published>2022-01-06T22:17:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[buffoon] Use of Uninitialized Resource in buffoon.]]></title>
        <id>https://github.com/advisories/GHSA-v938-qcc9-rwv8</id>
        <link href="https://github.com/advisories/GHSA-v938-qcc9-rwv8"/>
        <updated>2022-01-07T16:24:02.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the buffoon crate through 2020-12-31 for Rust. InputStream::read_exact may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36512">https://nvd.nist.gov/vuln/detail/CVE-2020-36512</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/buffoon/RUSTSEC-2020-0154.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/buffoon/RUSTSEC-2020-0154.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0154.html">https://rustsec.org/advisories/RUSTSEC-2020-0154.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v938-qcc9-rwv8">https://github.com/advisories/GHSA-v938-qcc9-rwv8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v938-qcc9-rwv8</uri>
        </author>
        <published>2022-01-06T22:17:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bite] Use of Uninitialized Resource in bite.]]></title>
        <id>https://github.com/advisories/GHSA-v2ch-fc8f-qm33</id>
        <link href="https://github.com/advisories/GHSA-v2ch-fc8f-qm33"/>
        <updated>2022-01-07T16:24:38.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the bite crate through 2020-12-31 for Rust. read::BiteReadExpandedExt::read_framed_max may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36511">https://nvd.nist.gov/vuln/detail/CVE-2020-36511</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/bite/RUSTSEC-2020-0153.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/bite/RUSTSEC-2020-0153.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0153.html">https://rustsec.org/advisories/RUSTSEC-2020-0153.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v2ch-fc8f-qm33">https://github.com/advisories/GHSA-v2ch-fc8f-qm33</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2ch-fc8f-qm33</uri>
        </author>
        <published>2022-01-06T22:16:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpulse-binding] Panic mishandled in libpulse-binding]]></title>
        <id>https://github.com/advisories/GHSA-xvcg-2q82-r87j</id>
        <link href="https://github.com/advisories/GHSA-xvcg-2q82-r87j"/>
        <updated>2022-01-07T16:25:12.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the libpulse-binding crate before 2.6.0 for Rust. It mishandles a panic that crosses a Foreign Function Interface (FFI) boundary.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25055">https://nvd.nist.gov/vuln/detail/CVE-2019-25055</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2019-0038.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/libpulse-binding/RUSTSEC-2019-0038.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0038.html">https://rustsec.org/advisories/RUSTSEC-2019-0038.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xvcg-2q82-r87j">https://github.com/advisories/GHSA-xvcg-2q82-r87j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvcg-2q82-r87j</uri>
        </author>
        <published>2022-01-06T22:18:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vec-const] Out-of-bounds Write in vec-const]]></title>
        <id>https://github.com/advisories/GHSA-x76r-966h-5qv9</id>
        <link href="https://github.com/advisories/GHSA-x76r-966h-5qv9"/>
        <updated>2022-01-07T16:19:26.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the vec-const crate before 2.0.0 for Rust. It tries to construct a Vec from a pointer to a const slice, leading to memory corruption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45680">https://nvd.nist.gov/vuln/detail/CVE-2021-45680</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/vec-const/RUSTSEC-2021-0082.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/vec-const/RUSTSEC-2021-0082.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0082.html">https://rustsec.org/advisories/RUSTSEC-2021-0082.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x76r-966h-5qv9">https://github.com/advisories/GHSA-x76r-966h-5qv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x76r-966h-5qv9</uri>
        </author>
        <published>2022-01-06T22:15:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[acc_reader] Use of Uninitialized Resource in acc_reader.]]></title>
        <id>https://github.com/advisories/GHSA-p4cr-64x4-f92f</id>
        <link href="https://github.com/advisories/GHSA-p4cr-64x4-f92f"/>
        <updated>2022-01-07T16:21:26.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the acc_reader crate through 2020-12-27 for Rust. fill_buf may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36514">https://nvd.nist.gov/vuln/detail/CVE-2020-36514</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/acc_reader/RUSTSEC-2020-0155.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/acc_reader/RUSTSEC-2020-0155.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0155.html">https://rustsec.org/advisories/RUSTSEC-2020-0155.html</a></li>
<li><a href="https://github.com/advisories/GHSA-p4cr-64x4-f92f">https://github.com/advisories/GHSA-p4cr-64x4-f92f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4cr-64x4-f92f</uri>
        </author>
        <published>2022-01-06T22:17:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[acc_reader] Use of Uninitialized Resource in acc_reader.]]></title>
        <id>https://github.com/advisories/GHSA-799f-r78p-gq9c</id>
        <link href="https://github.com/advisories/GHSA-799f-r78p-gq9c"/>
        <updated>2022-01-07T16:22:25.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the acc_reader crate through 2020-12-27 for Rust. read_up_to may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36513">https://nvd.nist.gov/vuln/detail/CVE-2020-36513</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/acc_reader/RUSTSEC-2020-0155.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/acc_reader/RUSTSEC-2020-0155.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0155.html">https://rustsec.org/advisories/RUSTSEC-2020-0155.html</a></li>
<li><a href="https://github.com/advisories/GHSA-799f-r78p-gq9c">https://github.com/advisories/GHSA-799f-r78p-gq9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-799f-r78p-gq9c</uri>
        </author>
        <published>2022-01-06T22:17:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flumedb] Use of Uninitialized Resource in flumedb.]]></title>
        <id>https://github.com/advisories/GHSA-p46c-w9m3-7qr2</id>
        <link href="https://github.com/advisories/GHSA-p46c-w9m3-7qr2"/>
        <updated>2022-01-07T16:14:38.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the flumedb crate through 2021-01-07 for Rust. read_entry may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45684">https://nvd.nist.gov/vuln/detail/CVE-2021-45684</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0086.html">https://rustsec.org/advisories/RUSTSEC-2021-0086.html</a></li>
<li><a href="https://github.com/advisories/GHSA-p46c-w9m3-7qr2">https://github.com/advisories/GHSA-p46c-w9m3-7qr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p46c-w9m3-7qr2</uri>
        </author>
        <published>2022-01-06T22:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[binjs_io] Use of Uninitialized Resource in binjs_io.]]></title>
        <id>https://github.com/advisories/GHSA-cw4j-cf6c-mmfv</id>
        <link href="https://github.com/advisories/GHSA-cw4j-cf6c-mmfv"/>
        <updated>2022-01-07T17:36:38.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the binjs_io crate through 2021-01-03 for Rust. The Read method may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45683">https://nvd.nist.gov/vuln/detail/CVE-2021-45683</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/binjs_io/RUSTSEC-2021-0085.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/binjs_io/RUSTSEC-2021-0085.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0085.html">https://rustsec.org/advisories/RUSTSEC-2021-0085.html</a></li>
<li><a href="https://github.com/advisories/GHSA-cw4j-cf6c-mmfv">https://github.com/advisories/GHSA-cw4j-cf6c-mmfv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cw4j-cf6c-mmfv</uri>
        </author>
        <published>2022-01-06T22:14:24.000Z</published>
    </entry>
</feed>