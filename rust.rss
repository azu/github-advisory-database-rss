<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-09-12T18:01:38.178Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[os_socketaddr] `os_socketaddr` invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-c439-chv8-8g2j</id>
        <link href="https://github.com/advisories/GHSA-c439-chv8-8g2j"/>
        <updated>2022-09-02T22:29:41.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://crates.io/crates/os_socketaddr"><code>os_socketaddr</code></a> crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation.</p>
<p>These layout were <a href="https://github.com/rust-lang/rust/pull/78802">changed into idiomatic rust types</a> in nightly <code>std</code>. Starting from rustc 1.64 the affected versions of this crate will have undefined behaviour.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/a-ba/os_socketaddr/issues/3">https://github.com/a-ba/os_socketaddr/issues/3</a></li>
<li><a href="https://github.com/rust-lang/rust/pull/78802">https://github.com/rust-lang/rust/pull/78802</a></li>
<li><a href="https://github.com/a-ba/os_socketaddr/commit/1bc7f71d40de069727993a18fdada33eb0b4c94f">https://github.com/a-ba/os_socketaddr/commit/1bc7f71d40de069727993a18fdada33eb0b4c94f</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0052.html">https://rustsec.org/advisories/RUSTSEC-2022-0052.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c439-chv8-8g2j">https://github.com/advisories/GHSA-c439-chv8-8g2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c439-chv8-8g2j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-02T22:29:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lz4-sys] lz4-sys vulnerable to memory corruption via issue in liblz4]]></title>
        <id>https://github.com/advisories/GHSA-9q5j-jm53-v7vr</id>
        <link href="https://github.com/advisories/GHSA-9q5j-jm53-v7vr"/>
        <updated>2022-09-01T22:24:55.000Z</updated>
        <content type="html"><![CDATA[<p>lz4-sys up to v1.9.3 bundles a version of liblz4 that is vulnerable to
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3520">CVE-2021-3520</a>.</p>
<p>Attackers could craft a payload that triggers an integer overflow upon
decompression, causing an out-of-bounds write.</p>
<p>The flaw has been corrected in version v1.9.4 of liblz4, which is included
in lz4-sys 1.9.4.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lz4/lz4/pull/972">https://github.com/lz4/lz4/pull/972</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0051.html">https://rustsec.org/advisories/RUSTSEC-2022-0051.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9q5j-jm53-v7vr">https://github.com/advisories/GHSA-9q5j-jm53-v7vr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9q5j-jm53-v7vr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-01T22:24:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opcua] opcua Vulnerable to Out-of-bounds Write]]></title>
        <id>https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</id>
        <link href="https://github.com/advisories/GHSA-hgxq-hcrm-c5pm"/>
        <updated>2022-09-01T22:23:06.000Z</updated>
        <content type="html"><![CDATA[<p>The package opcua from 0.0.0 until 0.11.0 is vulnerable to Denial of Service (DoS) via the ExtensionObjects and Variants objects, when it allows unlimited nesting levels, which could result in a stack overflow even if the message size is less than the maximum allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25903">https://nvd.nist.gov/vuln/detail/CVE-2022-25903</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216">https://github.com/locka99/opcua/pull/216</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216/commits/e75dada28a40c3fefc4aeee4cdc272e1b748f8dd">https://github.com/locka99/opcua/pull/216/commits/e75dada28a40c3fefc4aeee4cdc272e1b748f8dd</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988750">https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988750</a></li>
<li><a href="https://github.com/advisories/GHSA-hgxq-hcrm-c5pm">https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opcua] Uncontrolled Resource Consumption in opcua]]></title>
        <id>https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</id>
        <link href="https://github.com/advisories/GHSA-8mx2-gqx9-rm7f"/>
        <updated>2022-08-30T20:50:36.000Z</updated>
        <content type="html"><![CDATA[<p>The package opcua from 0.0.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25888">https://nvd.nist.gov/vuln/detail/CVE-2022-25888</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216">https://github.com/locka99/opcua/pull/216</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216/commits/6fb683c5fec46c6dd347824491c4d93a229da695">https://github.com/locka99/opcua/pull/216/commits/6fb683c5fec46c6dd347824491c4d93a229da695</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988751">https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988751</a></li>
<li><a href="https://github.com/advisories/GHSA-8mx2-gqx9-rm7f">https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK's Reader could consume memory beyond allowed constraints]]></title>
        <id>https://github.com/advisories/GHSA-wcm8-86x6-8mv3</id>
        <link href="https://github.com/advisories/GHSA-wcm8-86x6-8mv3"/>
        <updated>2022-08-30T20:05:09.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a Reader to consume memory beyond the allowed constraints and thus lead to out of memory on the system. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36124">https://nvd.nist.gov/vuln/detail/CVE-2022-36124</a></li>
<li><a href="https://lists.apache.org/thread/kj429rzo1xxjgz058qqqg0y7c0p512zo">https://lists.apache.org/thread/kj429rzo1xxjgz058qqqg0y7c0p512zo</a></li>
<li><a href="https://github.com/advisories/GHSA-wcm8-86x6-8mv3">https://github.com/advisories/GHSA-wcm8-86x6-8mv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcm8-86x6-8mv3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[iana-time-zone] iana-time-zone vulnerable to use after free in MacOS / iOS implementation]]></title>
        <id>https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</id>
        <link href="https://github.com/advisories/GHSA-3fg9-hcq5-vxrc"/>
        <updated>2022-08-30T19:55:43.000Z</updated>
        <content type="html"><![CDATA[<p>In iana-time-zone v0.1.43 a use-after-free bug in the MacOS / iOS implementation was introduced.</p>
<p>The copied system time zone was released before its name was copied.
If the system time zone was changed between the call of <code>CFRelease</code> and <code>str::to_owned()</code>,
random memory would be copied.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strawlab/iana-time-zone/pull/54">https://github.com/strawlab/iana-time-zone/pull/54</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0049.html">https://rustsec.org/advisories/RUSTSEC-2022-0049.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3fg9-hcq5-vxrc">https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T19:55:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mz-avro] mz-avro's incorrect use of `set_len` allows for un-initialized memory]]></title>
        <id>https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</id>
        <link href="https://github.com/advisories/GHSA-jwh2-vrr9-vcp2"/>
        <updated>2022-08-30T19:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate passes an uninitialized buffer to a user-provided <code>Read</code> 
implementation.</p>
<p>Arbitrary <code>Read</code> implementations can read from the uninitialized buffer (memory exposure)
and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke
undefined behavior.</p>
<p>Note: there is only UB in the case where a user provides a struct whose <code>Read</code>
implementation inspects the buffer passed to <code>read_exact</code> before writing to it.
This is an unidiomatic (albeit possible) <code>Read</code> implementation.</p>
<p>See <a href="https://github.com/MaterializeInc/materialize/issues/8669">https://github.com/MaterializeInc/materialize/issues/8669</a> for details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MaterializeInc/materialize/issues/8669">https://github.com/MaterializeInc/materialize/issues/8669</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0138.html">https://rustsec.org/advisories/RUSTSEC-2021-0138.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jwh2-vrr9-vcp2">https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T19:53:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Incorrect parsing of EVM reversion exit reason in RPC]]></title>
        <id>https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</id>
        <link href="https://github.com/advisories/GHSA-mjvm-mhgc-q4gp"/>
        <updated>2022-08-26T19:23:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A low severity security issue was discovered affecting parsing of the RPC result of the exit reason in case of EVM reversion. In release build, this would cause the exit reason being incorrectly parsed and returned by RPC. In debug build, this would cause an overflow panic.</p>
<p>No action is needed unless you have a bridge node that needs to distinguish different reversion exit reasons and you used RPC for this.</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in <a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>PR <a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email <a href="mailto:wei@that.world">Wei Tang</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp">https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></li>
<li><a href="https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451">https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36008">https://nvd.nist.gov/vuln/detail/CVE-2022-36008</a></li>
<li><a href="https://github.com/advisories/GHSA-mjvm-mhgc-q4gp">https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-18T19:18:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK vulnerable to reader looping in cycle endlessly, consuming CPU]]></title>
        <id>https://github.com/advisories/GHSA-v456-chpw-6mmw</id>
        <link href="https://github.com/advisories/GHSA-v456-chpw-6mmw"/>
        <updated>2022-08-18T19:16:00.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible to provide data to be read that leads the reader to loop in cycles endlessly, consuming CPU. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35724">https://nvd.nist.gov/vuln/detail/CVE-2022-35724</a></li>
<li><a href="https://lists.apache.org/thread/771z1nwrpkn1ovmyfb2fm65mchdxgy7p">https://lists.apache.org/thread/771z1nwrpkn1ovmyfb2fm65mchdxgy7p</a></li>
<li><a href="https://github.com/advisories/GHSA-v456-chpw-6mmw">https://github.com/advisories/GHSA-v456-chpw-6mmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v456-chpw-6mmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK corrupted data read can cause crash]]></title>
        <id>https://github.com/advisories/GHSA-3w5g-989p-35r8</id>
        <link href="https://github.com/advisories/GHSA-3w5g-989p-35r8"/>
        <updated>2022-08-18T19:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible to crash (panic) an application by providing a corrupted data to be read. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36125">https://nvd.nist.gov/vuln/detail/CVE-2022-36125</a></li>
<li><a href="https://lists.apache.org/thread/t1r5xz0pvhm4tosqopjpj6dz8zlsht07">https://lists.apache.org/thread/t1r5xz0pvhm4tosqopjpj6dz8zlsht07</a></li>
<li><a href="https://github.com/advisories/GHSA-3w5g-989p-35r8">https://github.com/advisories/GHSA-3w5g-989p-35r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w5g-989p-35r8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oqs] oqs's Post-Quantum Signature scheme Rainbow level I parametersets broken]]></title>
        <id>https://github.com/advisories/GHSA-h864-m8vm-3xvj</id>
        <link href="https://github.com/advisories/GHSA-h864-m8vm-3xvj"/>
        <updated>2022-08-18T19:06:40.000Z</updated>
        <content type="html"><![CDATA[<p>Ward Beullens found a practical key-recovery attack against Rainbow.
The level I parametersets are removed from liboqs starting from version <code>0.7.2</code>.
Find the scientific details in <a href="https://eprint.iacr.org/2022/214">Breaking Rainbow Takes a Weekend on a Laptop</a>.</p>
<p>This means all the <code>oqs::sig::Algorithm::RainbowI*</code> variants are insecure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-quantum-safe/liboqs-rust">https://github.com/open-quantum-safe/liboqs-rust</a></li>
<li><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0047.html">https://rustsec.org/advisories/RUSTSEC-2022-0047.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h864-m8vm-3xvj">https://github.com/advisories/GHSA-h864-m8vm-3xvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h864-m8vm-3xvj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:06:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oqs] oqs's Post-Quantum Key Encapsulation Mechanism SIKE broken]]></title>
        <id>https://github.com/advisories/GHSA-hrjv-pf36-jpmr</id>
        <link href="https://github.com/advisories/GHSA-hrjv-pf36-jpmr"/>
        <updated>2022-08-18T19:01:17.000Z</updated>
        <content type="html"><![CDATA[<p>Wouter Castryck and Thomas Decru presented an efficient key recovery attack on the SIDH protocol.
As a result, the secret key of SIKEp751 can be recovered in a matter of hours.
The SIKE and SIDH schemes will be removed from oqs 0.7.2.</p>
<p><a href="https://eprint.iacr.org/2022/975">An efficient key recovery attack on SIDH (preliminary version)</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-quantum-safe/liboqs-rust/pull/151">https://github.com/open-quantum-safe/liboqs-rust/pull/151</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0045.html">https://rustsec.org/advisories/RUSTSEC-2022-0045.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hrjv-pf36-jpmr">https://github.com/advisories/GHSA-hrjv-pf36-jpmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrjv-pf36-jpmr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-18T19:01:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[array-macro] `array!` macro is unsound when its length is impure constant]]></title>
        <id>https://github.com/advisories/GHSA-7v4j-8wvr-v55r</id>
        <link href="https://github.com/advisories/GHSA-7v4j-8wvr-v55r"/>
        <updated>2022-08-15T03:06:41.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate did substitute the array length provided by an user at compile-time multiple times.</p>
<p>When an impure constant expression is passed as an array length (such as a result of an impure procedural macro), this can result in the initialization of an array with uninitialized types, which in turn can allow an attacker to execute arbitrary code.</p>
<p>The flaw was corrected in commit <a href="https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d">d5b63f72</a> by making sure that array length is substituted just once.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustsec/advisory-db/blob/main/crates/array-macro/RUSTSEC-2022-0017.md">https://github.com/rustsec/advisory-db/blob/main/crates/array-macro/RUSTSEC-2022-0017.md</a></li>
<li><a href="https://gitlab.com/KonradBorowski/array-macro/-/issues/5">https://gitlab.com/KonradBorowski/array-macro/-/issues/5</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0017.html">https://rustsec.org/advisories/RUSTSEC-2022-0017.html</a></li>
<li><a href="https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d">https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d</a></li>
<li><a href="https://github.com/advisories/GHSA-7v4j-8wvr-v55r">https://github.com/advisories/GHSA-7v4j-8wvr-v55r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v4j-8wvr-v55r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-16T23:40:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[heapless] Use after free in heapless]]></title>
        <id>https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</id>
        <link href="https://github.com/advisories/GHSA-qgwf-r2jj-2ccv"/>
        <updated>2022-08-13T03:06:55.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the heapless crate before 0.6.1 for Rust. The IntoIter Clone implementation clones an entire underlying Vec without considering whether it has already been partially consumed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36464">https://nvd.nist.gov/vuln/detail/CVE-2020-36464</a></li>
<li><a href="https://github.com/japaric/heapless/issues/181">https://github.com/japaric/heapless/issues/181</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0145.html">https://rustsec.org/advisories/RUSTSEC-2020-0145.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qgwf-r2jj-2ccv">https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:56:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rulinalg] Data races in rulinalg]]></title>
        <id>https://github.com/advisories/GHSA-q2gj-9r85-p832</id>
        <link href="https://github.com/advisories/GHSA-q2gj-9r85-p832"/>
        <updated>2022-08-13T03:06:31.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the rulinalg crate through 2020-02-11 for Rust. There are incorrect lifetime-boundary definitions for RowMut::raw_slice and RowMut::raw_slice_mut.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35879">https://nvd.nist.gov/vuln/detail/CVE-2020-35879</a></li>
<li><a href="https://github.com/AtheMathmo/rulinalg/issues/201">https://github.com/AtheMathmo/rulinalg/issues/201</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0023.html">https://rustsec.org/advisories/RUSTSEC-2020-0023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q2gj-9r85-p832">https://github.com/advisories/GHSA-q2gj-9r85-p832</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2gj-9r85-p832</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:48:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rocksdb] rocksdb vulnerable to out-of-bounds read]]></title>
        <id>https://github.com/advisories/GHSA-xpp3-xrff-w6rh</id>
        <link href="https://github.com/advisories/GHSA-xpp3-xrff-w6rh"/>
        <updated>2022-08-12T15:31:11.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate called the RocksDB C API
<code>rocksdb_open_column_families_with_ttl()</code> with a pointer to a single integer
TTL value, but one TTL value for each column family is expected.</p>
<p>This is only relevant when using
<code>rocksdb::DBWithThreadMode::open_cf_descriptors_with_ttl()</code> with multiple
column families.</p>
<p>This bug has been fixed in v0.19.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-rocksdb/rust-rocksdb/pull/616">https://github.com/rust-rocksdb/rust-rocksdb/pull/616</a></li>
<li><a href="https://github.com/rust-rocksdb/rust-rocksdb/releases/tag/v0.19.0">https://github.com/rust-rocksdb/rust-rocksdb/releases/tag/v0.19.0</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0046.html">https://rustsec.org/advisories/RUSTSEC-2022-0046.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xpp3-xrff-w6rh">https://github.com/advisories/GHSA-xpp3-xrff-w6rh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xpp3-xrff-w6rh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-12T15:31:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[temporary] `temporary` makes use of uninitialized memory]]></title>
        <id>https://github.com/advisories/GHSA-2jq9-6xx7-3h29</id>
        <link href="https://github.com/advisories/GHSA-2jq9-6xx7-3h29"/>
        <updated>2022-08-11T18:10:53.000Z</updated>
        <content type="html"><![CDATA[<p>Uninit memory is used as a RNG seed in temporary. This has been resolved in the 0.6.4 release. The crate is not intended to be used outside of a testing environment. For a general purpose crate to create temporary directories, <a href="https://crates.io/crates/tempfile"><code>tempfile</code></a> is an alternative for this crate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stainless-steel/temporary/issues/2">https://github.com/stainless-steel/temporary/issues/2</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0022.html">https://rustsec.org/advisories/RUSTSEC-2018-0022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2jq9-6xx7-3h29">https://github.com/advisories/GHSA-2jq9-6xx7-3h29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jq9-6xx7-3h29</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-11T18:10:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</id>
        <link href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg"/>
        <updated>2022-08-11T15:36:42.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>
<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<p>See <a href="https://github.com/tower-rs/tower-http/pull/204">tower-http#204</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0043.html">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T15:36:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack]]></title>
        <id>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</id>
        <link href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg"/>
        <updated>2022-08-11T15:36:42.000Z</updated>
        <content type="html"><![CDATA[<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>
<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<p>See <a href="https://github.com/tower-rs/tower-http/pull/204">tower-http#204</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tower-rs/tower-http/pull/204">https://github.com/tower-rs/tower-http/pull/204</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0043.html">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qrqq-9c63-xfrg">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrqq-9c63-xfrg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-11T15:36:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[owning_ref] owning_ref vulnerable to multiple soundness issues]]></title>
        <id>https://github.com/advisories/GHSA-9qxh-258v-666c</id>
        <link href="https://github.com/advisories/GHSA-9qxh-258v-666c"/>
        <updated>2022-08-10T17:27:42.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><code>OwningRef::map_with_owner</code> is <a href="https://github.com/Kimundi/owning-ref-rs/issues/77">unsound</a> and may result in a use-after-free.</li>
<li><code>OwningRef::map</code> is <a href="https://github.com/Kimundi/owning-ref-rs/issues/71">unsound</a> and may result in a use-after-free.</li>
<li><code>OwningRefMut::as_owner</code> and <code>OwningRefMut::as_owner_mut</code> are <a href="https://github.com/Kimundi/owning-ref-rs/issues/61">unsound</a> and may result in a use-after-free.</li>
<li>The crate <a href="https://github.com/Kimundi/owning-ref-rs/issues/49">violates Rust's aliasing rules</a>, which may cause miscompilations on recent compilers that emit the LLVM <code>noalias</code> attribute.</li>
</ul>
<p>No patched versions are available at this time. While a pull request with some fixes is outstanding, the maintainer appears to be unresponsive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/noamtashma/owning-ref-unsoundness">https://github.com/noamtashma/owning-ref-unsoundness</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0040.html">https://rustsec.org/advisories/RUSTSEC-2022-0040.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9qxh-258v-666c">https://github.com/advisories/GHSA-9qxh-258v-666c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qxh-258v-666c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-10T17:26:00.000Z</published>
    </entry>
</feed>