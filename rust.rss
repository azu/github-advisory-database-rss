<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-09-20T07:01:31.922Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[lexical-core] lexical-core has multiple soundness issues]]></title>
        <id>https://github.com/advisories/GHSA-2326-pfpj-vx3h</id>
        <link href="https://github.com/advisories/GHSA-2326-pfpj-vx3h"/>
        <updated>2024-09-16T17:19:02.000Z</updated>
        <content type="html"><![CDATA[<p><code>RUSTSEC-2024-0377</code> contains multiple soundness issues:</p>
<ol>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">Bytes::read() allows creating instances of types with invalid bit patterns</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">BytesIter::read() advances iterators out of bounds</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">The <code>BytesIter</code> trait has safety invariants but is public and not marked <code>unsafe</code></a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95"><code>write_float()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126"><code>radix()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
</ol>
<p>Version 1.0 fixes these issues, removes the vast majority of <code>unsafe</code> code, and also fixes some correctness issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">https://github.com/Alexhuszagh/rust-lexical/issues/101</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">https://github.com/Alexhuszagh/rust-lexical/issues/102</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">https://github.com/Alexhuszagh/rust-lexical/issues/104</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126">https://github.com/Alexhuszagh/rust-lexical/issues/126</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95">https://github.com/Alexhuszagh/rust-lexical/issues/95</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4">https://github.com/advisories/GHSA-c2hm-mjxv-89r4</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0055">https://rustsec.org/advisories/RUSTSEC-2023-0055</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0086.html">https://rustsec.org/advisories/RUSTSEC-2023-0086.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2326-pfpj-vx3h">https://github.com/advisories/GHSA-2326-pfpj-vx3h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2326-pfpj-vx3h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T17:19:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lexical] Multiple soundness issues in lexical]]></title>
        <id>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</id>
        <link href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4"/>
        <updated>2024-09-16T16:50:15.000Z</updated>
        <content type="html"><![CDATA[<p><code>lexical</code> contains multiple soundness issues:</p>
<ol>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/102">Bytes::read() allows creating instances of types with invalid bit patterns</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/101">BytesIter::read() advances iterators out of bounds</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/104">The <code>BytesIter</code> trait has safety invariants but is public and not marked <code>unsafe</code></a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/95"><code>write_float()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
<li><a href="https://github.com/Alexhuszagh/rust-lexical/issues/126"><code>radix()</code> calls <code>MaybeUninit::assume_init()</code> on uninitialized data, which is is not allowed by the Rust abstract machine</a></li>
</ol>
<p>The crate also has some correctness issues.</p>
<h2 id="alternatives">Alternatives</h2>
<p>For quickly parsing floating-point numbers third-party crates are no longer needed. A fast float parsing algorithm by the author of <code>lexical</code> has been <a href="https://github.com/rust-lang/rust/pull/86761">merged</a> into libcore.</p>
<p>For quickly parsing integers, consider <code>atoi</code> and <code>btoi</code> crates (100% safe code). <code>atoi_radix10</code> provides even faster parsing, but only with <code>-C target-cpu=native</code>, and at the cost of some <code>unsafe</code>.</p>
<p>For formatting integers in a <code>#[no_std]</code> context consider the <a href="https://crates.io/crates/numtoa"><code>numtoa</code></a> crate.</p>
<p>For working with big numbers consider <code>num-bigint</code> and <code>num-traits</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Alexhuszagh/rust-lexical">https://github.com/Alexhuszagh/rust-lexical</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0055.html">https://rustsec.org/advisories/RUSTSEC-2023-0055.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hm-mjxv-89r4">https://github.com/advisories/GHSA-c2hm-mjxv-89r4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2hm-mjxv-89r4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-09-04T17:02:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[compu-brotli-sys] Integer overflow in the bundled Brotli C library]]></title>
        <id>https://github.com/advisories/GHSA-5v8v-66v8-mwm7</id>
        <link href="https://github.com/advisories/GHSA-5v8v-66v8-mwm7"/>
        <updated>2024-09-16T14:29:05.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overflow exists in the Brotli library versions prior to 1.0.8 where an attacker controlling the input length of a "one-shot" decompression request to a script can trigger a crash, which happens when copying over chunks of data larger than 2 GiB. It is recommended to update your Brotli library to 1.0.8 or later. If one cannot update, we recommend to use the "streaming" API as opposed to the "one-shot" API, and impose chunk size limits.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-8927">https://nvd.nist.gov/vuln/detail/CVE-2020-8927</a></li>
<li><a href="https://github.com/google/brotli/releases/tag/v1.0.9">https://github.com/google/brotli/releases/tag/v1.0.9</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2020/12/msg00003.html">https://lists.debian.org/debian-lts-announce/2020/12/msg00003.html</a></li>
<li><a href="https://www.debian.org/security/2020/dsa-4801">https://www.debian.org/security/2020/dsa-4801</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-09/msg00108.html">http://lists.opensuse.org/opensuse-security-announce/2020-09/msg00108.html</a></li>
<li><a href="https://github.com/bitemyapp/brotli2-rs/issues/45">https://github.com/bitemyapp/brotli2-rs/issues/45</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0131.html">https://rustsec.org/advisories/RUSTSEC-2021-0131.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0132.html">https://rustsec.org/advisories/RUSTSEC-2021-0132.html</a></li>
<li><a href="https://github.com/github/advisory-database/issues/785">https://github.com/github/advisory-database/issues/785</a></li>
<li><a href="https://github.com/google/brotli/commit/223d80cfbec8fd346e32906c732c8ede21f0cea6">https://github.com/google/brotli/commit/223d80cfbec8fd346e32906c732c8ede21f0cea6</a></li>
<li><a href="https://usn.ubuntu.com/4568-1">https://usn.ubuntu.com/4568-1</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZXEQ3GQVELA2T4HNZG7VPMS2HDVXMJRG">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ZXEQ3GQVELA2T4HNZG7VPMS2HDVXMJRG</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WW62OZEY2GHJL4JCOLJRBSRETXDHMWRK">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WW62OZEY2GHJL4JCOLJRBSRETXDHMWRK</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W23CUADGMVMQQNFKHPHXVP7RPZJZNN6I">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/W23CUADGMVMQQNFKHPHXVP7RPZJZNN6I</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQLM7ABVCYJLF6JRPF3M3EBXW63GNC27">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MQLM7ABVCYJLF6JRPF3M3EBXW63GNC27</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MMBKACMLSRX7JJSKBTR35UOEP2WFR6QP">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/MMBKACMLSRX7JJSKBTR35UOEP2WFR6QP</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4VCDOJGL6BK3HB4XRD2WETBPYX2ITF6">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4VCDOJGL6BK3HB4XRD2WETBPYX2ITF6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J4E265WKWKYMK2RYYSIXBEGZTDY5IQE6">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/J4E265WKWKYMK2RYYSIXBEGZTDY5IQE6</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4TOGTZ2ZWDH662ZNFFSZVL3M5AJXV6JF">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4TOGTZ2ZWDH662ZNFFSZVL3M5AJXV6JF</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/356JOYTWW4BWSZ42SEFLV7NYHL3S3AEH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/356JOYTWW4BWSZ42SEFLV7NYHL3S3AEH</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/brotli/PYSEC-2020-29.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/brotli/PYSEC-2020-29.yaml</a></li>
<li><a href="https://github.com/google/brotli/releases/tag/v1.0.8">https://github.com/google/brotli/releases/tag/v1.0.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5v8v-66v8-mwm7">https://github.com/advisories/GHSA-5v8v-66v8-mwm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5v8v-66v8-mwm7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:28:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[arrayfire] Potential memory corruption in arrayfire]]></title>
        <id>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</id>
        <link href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg"/>
        <updated>2024-09-12T20:47:22.000Z</updated>
        <content type="html"><![CDATA[<p>The attribute repr() added to enums to be compatible with C-FFI caused memory corruption on MSVC toolchain.</p>
<p>arrayfire crates &lt;= version 3.5.0 do not have this issue when used with Rust versions 1.27 or earlier. The issue only started to appear since Rust version 1.28.</p>
<p>The issue seems to be interlinked with which version of Rust is being used.</p>
<p>The issue was fixed in crate 3.6.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20998">https://nvd.nist.gov/vuln/detail/CVE-2018-20998</a></li>
<li><a href="https://github.com/arrayfire/arrayfire-rust/pull/177">https://github.com/arrayfire/arrayfire-rust/pull/177</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2018-0011.html">https://rustsec.org/advisories/RUSTSEC-2018-0011.html</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/arrayfire/PYSEC-2019-144.yaml</a></li>
<li><a href="https://github.com/arrayfire/arrayfire-rust/commit/a5256f3e5e23b83eaad69699e0b04653aba04fb8">https://github.com/arrayfire/arrayfire-rust/commit/a5256f3e5e23b83eaad69699e0b04653aba04fb8</a></li>
<li><a href="https://github.com/advisories/GHSA-69fv-gw6g-8ccg">https://github.com/advisories/GHSA-69fv-gw6g-8ccg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69fv-gw6g-8ccg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:43:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Untrusted Query Object Evaluation in RPC API]]></title>
        <id>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</id>
        <link href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr"/>
        <updated>2024-09-11T19:20:10.000Z</updated>
        <content type="html"><![CDATA[<p>During the sign in and sign up operations through the SurrealDB RPC API, an arbitrary object would be accepted in order to support a wide array of types and structures that could contain user credentials. This arbitrary object could potentially contain any SurrealDB value, including an object representing a subquery. For this to materialize, this object would need to be encoded using the bincode serialization format instead of the default JSON serialization format or the additionally supported CBOR serialization format.</p>
<p>If a binary object containing a subquery were to be provided in this way, that subquery would be computed while executing the <code>SIGNIN</code> and <code>SIGNUP</code> queries defined by the database owner while defining a record access method. Since those queries are executed under a system user session with the editor role, an unauthenticated attacker may be able to leverage this behavior to select, create, update and delete non-IAM resources with permissions of a system user with the editor role.</p>
<h3 id="impact">Impact</h3>
<p>If a record access method was defined with a <code>SIGNIN</code> or a <code>SIGNUP</code> query and the SurrealDB RPC API was exposed to untrusted users, an attacker could be able to craft a binary object containing a subquery to provide in place of valid credentials when calling the <code>signin</code> and <code>signup</code> operations via the RPC API with the bincode serialization format. The attacker could use that subquery to select, create, update and delete resources in SurrealDB, but they would not be able to <em>directly</em> view the results of the query. This method cannot be used to create, update or delete IAM resources, as access to those kind of resources requires the owner role.</p>
<h3 id="patches">Patches</h3>
<p>Objects provided as variables to the sign in and sign up methods are now recursively validated to ensure that they do not contain any non-computed values, which include subqueries and other data types that could potentially result in query execution.</p>
<ul>
<li>Version 1.5.5 and later are not affected by this issue.</li>
<li>Version 2.0.0-beta.3 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to disallow access to the SurrealDB RPC API using the affected binary serialization formats by conservatively allowing only requests to the <code>/rpc</code> endpoint of the SurrealDB HTTP server with the <code>application/json</code> content type. If the RPC API is not used at all or only used by trusted clients, disallowing or restricting access to the <code>/rpc</code> endpoint of the SurrealDB HTTP server will also prevent exploitation. Alternatively, if filtering HTTP requests is not possible, record access methods that define <code>SIGNIN</code> and <code>SIGNUP</code> clauses may be temporarily removed to completely prevent potential attacks leveraging this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">SurrealDB Documentation - Authentication (Record Users)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">SurrealDB Documentation - RPC Protocol (Signup)</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">SurrealDB Documentation - RPC Protocol (Signin)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-64f8-pjgr-9wmr</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330">https://github.com/surrealdb/surrealdb/commit/b7583a653a2c495a60630dffd663f506426db330</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6">https://github.com/surrealdb/surrealdb/commit/eab7ef5354168d4039f7f7b77042c99a52f770a6</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signin">https://surrealdb.com/docs/surrealdb/integration/rpc#signin</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/integration/rpc#signup">https://surrealdb.com/docs/surrealdb/integration/rpc#signup</a></li>
<li><a href="https://surrealdb.com/docs/surrealdb/security/authentication#record-users">https://surrealdb.com/docs/surrealdb/security/authentication#record-users</a></li>
<li><a href="https://github.com/advisories/GHSA-64f8-pjgr-9wmr">https://github.com/advisories/GHSA-64f8-pjgr-9wmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64f8-pjgr-9wmr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T19:20:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-09-09T18:20:54.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712/files">https://github.com/rust-bitcoin/rust-miniscript/pull/712/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/713/files">https://github.com/rust-bitcoin/rust-miniscript/pull/713/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/714/files">https://github.com/rust-bitcoin/rust-miniscript/pull/714/files</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/715/files">https://github.com/rust-bitcoin/rust-miniscript/pull/715/files</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-path] gix-path improperly resolves configuration path reported by Git]]></title>
        <id>https://github.com/advisories/GHSA-m8rp-vv92-46c7</id>
        <link href="https://github.com/advisories/GHSA-m8rp-vv92-46c7"/>
        <updated>2024-09-18T22:48:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>gix-path</code> runs <code>git</code> to find the path of a configuration file associated with the <code>git</code> installation, but improperly resolves paths containing unusual or non-ASCII characters, in rare cases enabling a local attacker to inject configuration leading to code execution.</p>
<h3 id="details">Details</h3>
<p>In <code>gix_path::env</code>, the underlying implementation of the <code>installation_config</code> and <code>installation_config_prefix</code> functions calls <code>git config -l --show-origin</code> to find the path of a file to treat as belonging to the <code>git</code> installation.</p>
<p>Affected versions of <code>gix-path</code> do not pass <code>-z</code>/<code>--null</code> to cause <code>git</code> to report literal paths (<a href="https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031"><code>650a1b5</code></a>). Instead, to cover the occasional case that <code>git</code> outputs a quoted path, they attempt to parse the path by stripping the quotation marks:</p>
<p><a href="https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142">https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142</a></p>
<p>The problem is that, when a path is quoted, it may change in substantial ways beyond the concatenation of quotation marks. If not reversed, these changes can result in another valid path that is not equivalent to the original.</p>
<p>This is not limited to paths with unusual characters such as quotation marks or newlines. Unless <code>git</code> is explicitly configured with <code>core.quotePath</code> set to <code>false</code>, it also happens when the path contains most non-ASCII characters, including accented or non-English letters. For example, <code>é</code> is transformed to <code>\303\251</code>, with literal backslashes. (This is an octal representation of the bytes in its UTF-8 encoding. This behavior is not limited to systems that encode paths with UTF-8 on disk.)</p>
<p>Rarely, the configuration file <code>gix-path</code> wrongly attempts to open can be created by an attacker who has a limited user account on the system. The attacker would often need to request an account username tailored to carrying out the attack.</p>
<h3 id="poc">PoC</h3>
<h4 id="quick-demonstration-on-unix">Quick demonstration on Unix</h4>
<p>On a Unix-like system in which Git supports no higher scope than <code>system</code> for configuration variables (i.e., not on macOS with Apple Git), in a locale that supports UTF-8, with <code>gitoxide</code> installed, run:</p>
<pre><code class="language-sh">mkdir myrepo
cd myrepo
git init
printf '[real]\n\trealvar = realval\n' &gt; 'é'
printf '[fake]\n\tfakevar = fakeval\n' &gt; '\303\251'
GIT_CONFIG_SYSTEM='é' gix config
</code></pre>
<p>If the above conditions are satisfied and the <code>gix</code> command was built against an affected version of <code>gix-path</code>, then the last command's output looks something like this:</p>
<pre><code class="language-text"># From '\303\251' (GitInstallation)
[fake]
        fakevar = fakeval

# From 'é' (System)
[real]
        realvar = realval

# From '/home/ubuntu/.gitconfig' (User)
[init]
        defaultBranch = main

# From './.git/config' (Local)
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
</code></pre>
<h4 id="demonstration-across-user-accounts-on-windows">Demonstration across user accounts on Windows</h4>
<p>On a test system running Windows on which Git for Windows is <em>not</em> installed system-wide—resembling a scenario in which users who wish to use Git are expected to install it themselves for their accounts—create two accounts, with these usernames:</p>
<ul>
<li><em>Renée</em>, the target of the attack. This user may be a limited user or an administrator. Its user profile directory is assumed to be <code>C:\Users\Renée</code>.</li>
<li><em>Ren</em>, the user who carries out the attack. This user should be a limited user, since an administrator would not need to exploit this vulnerability to inject configuration. Its user profile directory is assumed to be <code>C:\Users\Ren</code>.</li>
</ul>
<p>As <em>Ren</em>, run these commands in PowerShell:</p>
<pre><code class="language-powershell">$d = "$HOME\303\251e\AppData\Local\Programs\Git\etc"
mkdir $d
git config --file $d\gitconfig core.sshCommand calc.exe
icacls $HOME\303 /grant 'Renée:(RX)' /T
</code></pre>
<p>(The <code>gitconfig</code> file can instead be written manually, in which case <em>Ren</em> need not have <code>git</code>.)</p>
<p>As <em>Renée</em>:</p>
<ol>
<li><p>Install Git for Windows in the default location for non-systemwide installations, which for that user account is inside <code>C:\Users\Renée\AppData\Local\Programs</code>. For a non-administrative installation, Git for Windows will pick this location automatically. Allow the installer to place the directory containing <code>git</code> in the user's <code>PATH</code>, as it does by default.</p>
<p>(The scenario can be modified for any location the attacker can predict. So, for example, <em>Renée</em> can install Git for Windows with <a href="https://scoop.sh/"><code>scoop</code></a>, and <em>Ren</em> could carry out the attack with correspondingly modified path components in place of <code>AppData\Local\Programs\Git</code>.)</p>
</li>
<li><p>Install <code>gitoxide</code> using any common technique, such as by <a href="https://www.rust-lang.org/tools/install">installing Rust</a> and then running <code>cargo install gitoxide</code>.</p>
</li>
<li><p>Open a PowerShell window and run a <code>gix</code> command that attempts to run the SSH client for transport. For example:</p>
<pre><code class="language-pwsh">gix clone ssh://localhost/myrepo.git
</code></pre>
<p> At least one, and usually two, instances of the Windows calculator will pop up. This happens because <code>calc.exe</code> was configured in the fake configuration file the user <em>Ren</em> was able to cause to be used, by placing it at the location <code>gix-path</code> wrongly resolved the path of <em>Renée</em>'s own configuration file to.</p>
</li>
</ol>
<p> The <code>gitconfig</code> file written by the attacker can be adjusted with an arbitrary choice of payload, or to set other configuration variables.</p>
<h3 id="impact">Impact</h3>
<p>On a single-user system, it is not possible to exploit this, unless <code>GIT_CONFIG_SYSTEM</code> and <code>GIT_CONFIG_GLOBAL</code> have been set to unusual values or Git has been installed in an unusual way. Such a scenario is not expected.</p>
<p>Exploitation is unlikely even on a multi-user system, though it is plausible in some uncommon configurations or use cases. It is especially unlikely with Apple Git on macOS, due to its very high scoped configuration in <code>/Library</code> or <code>/Applications</code> that would be detected instead, as in CVE-2024-45305.</p>
<p>The likelihood of exploitation may be higher on Windows, where attacks such as those shown in the Windows proof-of-concept above can be performed due to the status of <code>\</code> as a directory separator, and where there is no restriction on usernames containing accented or non-English letters (though the latter is also permitted on some other systems). Even then, complex user interaction is required. In most cases, a system administrator would have to approve an innocuous-seeming username, and then the targeted user (who could be the same or a different user) would have to use an application that uses <code>gix-path</code>.</p>
<p>In general, exploitation is more likely to succeed if at least one of the following applies:</p>
<ul>
<li>Users are expected to install <code>git</code> themselves, and are likely to do so in predictable locations.</li>
<li>Locations where <code>git</code> is installed, whether due to usernames in their paths or otherwise, contain characters that <code>git</code> quotes by default in paths, such as non-English letters and accented letters.</li>
<li>A custom <code>system</code>-scope configuration file is specified with the <code>GIT_CONFIG_SYSTEM</code> environment variable, and its path is in an unusual location or has strangely named components.</li>
<li>A <code>system</code>-scope configuration file is absent, empty, or suppressed by means other than <code>GIT_CONFIG_NOSYSTEM</code>. Currently, <code>gix-path</code> can treat a <code>global</code>-scope configuration file as belonging to the installation if no higher scope configuration file is available. This increases the likelihood of exploitation even on a system where <code>git</code> is installed system-wide in an ordinary way.</li>
</ul>
<p>However, exploitation is expected to be very difficult even under any combination of those factors.</p>
<p>Although the effect here is similar to <a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">CVE-2022-24765</a> once exploited, a greater degree of user interaction would usually be required, and the attack complexity here is much higher because the necessary conditions are uncommon and challenging to predict.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-m8rp-vv92-46c7">https://github.com/Byron/gitoxide/security/advisories/GHSA-m8rp-vv92-46c7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45405">https://nvd.nist.gov/vuln/detail/CVE-2024-45405</a></li>
<li><a href="https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031">https://github.com/Byron/gitoxide/commit/650a1b5cf25e086197cc55a68525a411e1c28031</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142">https://github.com/Byron/gitoxide/blob/1cfe577d461293879e91538dbc4bbfe01722e1e8/gix-path/src/env/git/mod.rs#L138-L142</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0371.html">https://rustsec.org/advisories/RUSTSEC-2024-0371.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m8rp-vv92-46c7">https://github.com/advisories/GHSA-m8rp-vv92-46c7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8rp-vv92-46c7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-06T19:55:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ic_cdk] ic-cdk has a memory leak when calling a canister method via `ic_cdk::call`]]></title>
        <id>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</id>
        <link href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw"/>
        <updated>2024-09-09T14:05:40.000Z</updated>
        <content type="html"><![CDATA[<p>When a canister method is called via <code>ic_cdk::call*</code>, a new Future <code>CallFuture</code> is created  and can be awaited by the caller to get the execution result. Internally, the state of the Future is tracked and stored in a struct called <code>CallFutureState</code>.  A bug in the polling implementation of the <code>CallFuture</code> allows multiple references to be held for this internal state and not all references were dropped before the <code>Future</code> is resolved. Since we have unaccounted references held, a copy of the internal state ended up being persisted in the canister's heap and thus causing a memory leak. </p>
<h3 id="impact">Impact</h3>
<p>Canisters built in Rust with <code>ic_cdk</code> and <code>ic_cdk_timers</code> are affected. If these canisters call a canister method, use timers or heartbeat, they will likely leak a small amount of memory on every such operation. <strong>In the worst case, this could lead to heap memory exhaustion triggered by an attacker.</strong></p>
<p>Motoko based canisters are not affected by the bug.</p>
<h3 id="patches">Patches</h3>
<p>The patch has been backported to all minor versions between <code>&gt;= 0.8.0, &lt;= 0.15.0</code>. The patched versions available are <code>0.8.2, 0.9.3, 0.10.1, 0.11.6, 0.12.2, 0.13.5, 0.14.1, 0.15.1</code> and their previous versions have been yanked. </p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds at the moment. Developers are recommended to upgrade their canister as soon as possible to the latest available patched version of <code>ic_cdk</code> to avoid running out of Wasm heap memory. </p>
<blockquote>
<p>[!NOTE]<br>Upgrading the canisters (without updating <code>ic_cdk</code>) also frees the leaked memory but it's only a temporary solution.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk/">ic_cdk docs</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">Internet Computer Specification</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/dfinity/cdk-rs/security/advisories/GHSA-rwq6-crjg-9cpw</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-7884">https://nvd.nist.gov/vuln/detail/CVE-2024-7884</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/pull/509">https://github.com/dfinity/cdk-rs/pull/509</a></li>
<li><a href="https://docs.rs/ic-cdk/latest/ic_cdk">https://docs.rs/ic-cdk/latest/ic_cdk</a></li>
<li><a href="https://internetcomputer.org/docs/current/references/ic-interface-spec">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>
<li><a href="https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b">https://github.com/dfinity/cdk-rs/commit/bd17d57a7b8ca59665fea5fad6143ca02724d03b</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0372.html">https://rustsec.org/advisories/RUSTSEC-2024-0372.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rwq6-crjg-9cpw">https://github.com/advisories/GHSA-rwq6-crjg-9cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwq6-crjg-9cpw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-05T16:44:27.000Z</published>
    </entry>
</feed>