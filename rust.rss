<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-07-20T06:01:22.004Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto's `UserIdentity::is_verified` not checking verification status of own user identity while performing the check]]></title>
        <id>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</id>
        <link href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg"/>
        <updated>2024-07-19T15:27:46.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>UserIdentity::is_verified()</code> method in the matrix-sdk-crypto crate before version 0.7.2 doesn't take into account the verification status of the user's own identity while performing the check and may as a result return a value contrary to what is implied by its name and documentation.</p>
<h3 id="impact">Impact</h3>
<p>If the method is used to decide whether to perform sensitive operations towards a user identity, a malicious homeserver could manipulate the outcome in order to make the identity appear trusted. This is not a typical usage of the method, which lowers the impact. The method itself is not used inside the <code>matrix-sdk-crypto</code> crate.</p>
<h3 id="patches">Patches</h3>
<p>The 0.7.2 release of the <code>matrix-sdk-crypto</code> crate includes a fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a">https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto">https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40648">https://nvd.nist.gov/vuln/detail/CVE-2024-40648</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0356.html">https://rustsec.org/advisories/RUSTSEC-2024-0356.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/advisories/GHSA-4qg4-cvh2-crgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T15:28:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-path] gix-path can use a fake program files location]]></title>
        <id>https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</id>
        <link href="https://github.com/advisories/GHSA-mgvv-9p9g-3jv4"/>
        <updated>2024-07-18T15:26:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When looking for Git for Windows so it can run it to report its paths, <code>gix-path</code> can be tricked into running another <code>git.exe</code> placed in an untrusted location by a limited user account.</p>
<h3 id="details">Details</h3>
<p>Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While <code>gix-path</code> first looks for <code>git</code> using a <code>PATH</code> search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories:</p>
<p><a href="https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14">https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14</a></p>
<p>Existing functions, as well as the newly introduced <code>exe_invocation</code> function, were updated to make use of these alternative locations. This causes facilities in <code>gix_path::env</code> to directly execute <code>git.exe</code> in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it.</p>
<p>Although unusual setups where the system drive is not <code>C:</code>, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no <code>C:\Program Files (x86)</code> directory.</p>
<p>A limited user on a 32-bit Windows system can therefore create the <code>C:\Program Files (x86)</code> directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses <code>gix-path</code> and do not have <code>git</code> in a <code>PATH</code> directory.</p>
<p>(While having <code>git</code> found in a <code>PATH</code> search prevents exploitation, merely having it installed in the default location under the real <code>C:\Program Files</code> directory does not. This is because the first hard-coded path's <code>mingw64</code> component assumes a 64-bit installation.)</p>
<h3 id="poc">PoC</h3>
<p>On a 32-bit (x86) Windows 10 system, with or without Git for Windows installed:</p>
<ol>
<li>Create a limited user account in <code>lusrmgr.msc</code> or the Settings application.</li>
<li>Log in with that account and, using Windows Explorer or the <code>mkdir</code> command in PowerShell, create the directories <code>C:\Program Files (x86)\Git\mingw32\bin</code>. Although a limited user account cannot create regular files directly in <code>C:\</code>, it can create directories including one called <code>Program Files (x86)</code>.</li>
<li>Place a copy of <code>C:\Windows\system32\calc.exe</code> in <code>C:\Program Files (x86)\Git\mingw32\bin</code> and rename it from <code>calc.exe</code> to <code>git.exe</code>. A different test payload may be used if preferred, and the executable need not already be signed or trusted.</li>
<li>Log out, and log in as a different user. This user may be an administrator.</li>
<li>If <code>gitoxide</code> is not installed, install it. If <code>cargo install gitoxide</code> is used for the installation, then the version of <code>gix-path</code> used in the installation can be observed.</li>
<li>The vulnerability is only exploitable if <code>git</code> cannot be found in a <code>PATH</code> search. So, in PowerShell, run <code>gcm git</code> to check if <code>git</code> is present in the <code>PATH</code>. If so, temporarily remove it. One way to do this is for the current shell only, by running <code>$env:PATH</code> to inspect it and by assigning <code>$env:PATH = '...'</code> where <code>...</code> omits directories that contain <code>git</code>.</li>
<li>Some commands that can be run outside a repository, and most commands that can be run inside a repository, will run the Calculator or other payload at least once per invocation. Try <code>gix clone foo</code> or, inside of a repository, <code>gix status</code>, <code>gix config</code>, <code>gix is-changed</code>, <code>gix fetch</code>, <code>ein t hours</code>, or <code>ein t query</code>. This is not exhaustive; most other <code>gix</code> and <code>ein</code> commands that access existing repository state or a network resource likewise run the payload.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses <code>gix-path</code> and must not have <code>git</code> in its <code>PATH</code>.</p>
<p>The main exploitable configuration is one where Git for Windows has been installed but not added to <code>PATH</code>. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its <code>PATH</code> to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a <code>PATH</code> in which the real <code>git.exe</code> can be found, then this cannot be exploited.</p>
<p>This vulnerability is comparable to <a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">CVE-2022-24765</a>, in which an uncontrolled path like <code>C:\.git\config</code>, which a limited user can create, could supply configuration used by other users. However, in this case, exploitation is slightly simpler because, rather than using configuration, an executable is directly run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-mgvv-9p9g-3jv4">https://github.com/Byron/gitoxide/security/advisories/GHSA-mgvv-9p9g-3jv4</a></li>
<li><a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14">https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14</a></li>
<li><a href="https://github.com/advisories/GHSA-mgvv-9p9g-3jv4">https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T15:26:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vodozemac] vodozemac's usage of non-constant time base64 decoder could lead to leakage of secret key material]]></title>
        <id>https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</id>
        <link href="https://github.com/advisories/GHSA-j8cm-g7r6-hfpq"/>
        <updated>2024-07-18T14:51:28.000Z</updated>
        <content type="html"><![CDATA[<p>Versions before 0.7.0 of vodozemac use a non-constant time base64 implementation for importing key material for Megolm group sessions and <code>PkDecryption</code> Ed25519 secret keys. This flaw might allow an attacker to infer some information about the secret key material through a side-channel attack.</p>
<h3 id="impact">Impact</h3>
<p>The use of a non-constant time base64 implementation might allow an attacker to observe timing variations in the encoding and decoding operations of the secret key material. This could potentially provide insights into the underlying secret key material.</p>
<p>The impact of this vulnerability is considered low because exploiting the attacker is required to have access to high precision timing measurements, as well as repeated access to the base64 encoding or decoding processes.  Additionally, the estimated leakage amount is bounded and low according to the referenced paper.</p>
<h3 id="patches">Patches</h3>
<p>The patch is in commit 734b6c6948d4b2bdee3dd8b4efa591d93a61d272.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>A detailed description of the precise attack can be found at <a href="https://arxiv.org/abs/2108.04600">https://arxiv.org/abs/2108.04600</a>. We kindly thank Soatok for pointing out this research to us.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq">https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq</a></li>
<li><a href="https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272">https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272</a></li>
<li><a href="https://github.com/matrix-org/vodozemac/commit/77765dace11266ef9523301624a01265c6e0f790">https://github.com/matrix-org/vodozemac/commit/77765dace11266ef9523301624a01265c6e0f790</a></li>
<li><a href="https://arxiv.org/abs/2108.04600">https://arxiv.org/abs/2108.04600</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40640">https://nvd.nist.gov/vuln/detail/CVE-2024-40640</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0354.html">https://rustsec.org/advisories/RUSTSEC-2024-0354.html</a></li>
<li><a href="https://github.com/advisories/GHSA-j8cm-g7r6-hfpq">https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-17T18:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[risc0-zkvm] RISC Zero zkVM notes on zero-knowledge]]></title>
        <id>https://github.com/advisories/GHSA-5xgj-pmjj-gw49</id>
        <link href="https://github.com/advisories/GHSA-5xgj-pmjj-gw49"/>
        <updated>2024-07-15T18:32:23.000Z</updated>
        <content type="html"><![CDATA[<p>RISC Zero zkVM was designed from its inception to provide three main guarantees:</p>
<ol>
<li><em>Computational integrity</em>: that a given software program executed correctly.</li>
<li><em>Succinctness</em>: that the proof of execution does not grow in relation to the program being executed.</li>
<li><em>Zero Knowledge</em>: that details of the program execution are not visible within the proof of program execution.</li>
</ol>
<p>Ulrich Habock and Al Kindi have released <a href="https://eprint.iacr.org/2024/1037">new research</a> that indicates that several STARK implementations -including our RISC Zero zkVM- do not meet the requirements to assert the specific property of zero knowledge provably. </p>
<p>While a vast majority of real-world applications that leverage RISC Zero zkVM or similar systems depend primarily on computational integrity and succinctness, a subset of applications critically depend on the privacy guarantees provided by zero-knowledge; and for those use cases, users are cautioned to understand the research and make informed decisions based on the risks outlined in using an impacted system.</p>
<p>Although the maintainers are not aware of any attacks that can take advantage of this potential weakness, they are working to proactively address this discovery as quickly as possible. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/risc0/risc0/security/advisories/GHSA-5xgj-pmjj-gw49">https://github.com/risc0/risc0/security/advisories/GHSA-5xgj-pmjj-gw49</a></li>
<li><a href="https://eprint.iacr.org/2024/1037">https://eprint.iacr.org/2024/1037</a></li>
<li><a href="https://github.com/advisories/GHSA-5xgj-pmjj-gw49">https://github.com/advisories/GHSA-5xgj-pmjj-gw49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5xgj-pmjj-gw49</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-15T18:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB vulnerable to Improper Authentication when Changing Databases as Scope User]]></title>
        <id>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</id>
        <link href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2"/>
        <updated>2024-07-11T13:19:21.000Z</updated>
        <content type="html"><![CDATA[<p>Authentication would not be properly validated when an already authenticated scope user would use the <code>use</code> method or <code>USE</code> clause to switch working databases in a session. If there was a user record in the new database with identical record identifier as the original record that the user authenticated with in the original database, this could result in the user being able to perform actions under the identity of the unrelated user in the new database. This issue does not affect system users at any level.</p>
<p>By default, record identifiers are randomly generated with sufficient complexity to prevent the identifier collision required to trigger this issue. However, the issue may trigger in situations where multiple databases in the same SurrealDB instance are using explicitly defined or incremental record identifiers to identify users on an identically named table.</p>
<h3 id="impact">Impact</h3>
<p>Under the circumstances described above, a user who has an authenticated session as a scope user in a database could become authorized to query data under the identity of a specific scope user associated with an identical record identifier in a different database within the same SurrealDB instace if the <code>PERMISSIONS</code> clause would allow it due to relying exclusively on the <code>$auth</code> parameter, which would point to the impersonated user. The impact is limited to the single user with matching record identifier.</p>
<p>The impact of this issue is mitigated if the table <code>PERMISSIONS</code> clause explicitly checks for an scope that only exists in the specific database (e.g. <code>$scope = "production"</code>) or certain claims of the authentication token (e.g. <code>$token.email = "example@example.com"</code>), both of which would remain unchanged in the session of the authenticated user after changing databases. Permissions will default to <code>NONE</code> if there is no <code>PERMISSIONS</code> clause, which also mitigates this impact of this issue.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.5.4 and later are not affected by this issue.</li>
<li>Version 2.0.0-alpha.6 and later will not be affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to ensure that table <code>PERMISSIONS</code> clauses explicitly check that the <code>$scope</code> parameter matches a scope that is uniquely named across databases in the same SurrealDB instance. Ensuring that record identifiers for users are automatically generated or explicitly generated to be unique across databases may also be sufficient to mitigate this issue, as the <code>$auth</code> parameter will not link to any user record and any <code>PERMISSIONS</code> clauses restricting authorization based on the authenticated user should fail to successfully evaluate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80">https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T13:19:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to Improper Authentication when Changing Databases as Scope User]]></title>
        <id>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</id>
        <link href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2"/>
        <updated>2024-07-11T13:19:21.000Z</updated>
        <content type="html"><![CDATA[<p>Authentication would not be properly validated when an already authenticated scope user would use the <code>use</code> method or <code>USE</code> clause to switch working databases in a session. If there was a user record in the new database with identical record identifier as the original record that the user authenticated with in the original database, this could result in the user being able to perform actions under the identity of the unrelated user in the new database. This issue does not affect system users at any level.</p>
<p>By default, record identifiers are randomly generated with sufficient complexity to prevent the identifier collision required to trigger this issue. However, the issue may trigger in situations where multiple databases in the same SurrealDB instance are using explicitly defined or incremental record identifiers to identify users on an identically named table.</p>
<h3 id="impact">Impact</h3>
<p>Under the circumstances described above, a user who has an authenticated session as a scope user in a database could become authorized to query data under the identity of a specific scope user associated with an identical record identifier in a different database within the same SurrealDB instace if the <code>PERMISSIONS</code> clause would allow it due to relying exclusively on the <code>$auth</code> parameter, which would point to the impersonated user. The impact is limited to the single user with matching record identifier.</p>
<p>The impact of this issue is mitigated if the table <code>PERMISSIONS</code> clause explicitly checks for an scope that only exists in the specific database (e.g. <code>$scope = "production"</code>) or certain claims of the authentication token (e.g. <code>$token.email = "example@example.com"</code>), both of which would remain unchanged in the session of the authenticated user after changing databases. Permissions will default to <code>NONE</code> if there is no <code>PERMISSIONS</code> clause, which also mitigates this impact of this issue.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.5.4 and later are not affected by this issue.</li>
<li>Version 2.0.0-alpha.6 and later will not be affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to ensure that table <code>PERMISSIONS</code> clauses explicitly check that the <code>$scope</code> parameter matches a scope that is uniquely named across databases in the same SurrealDB instance. Ensuring that record identifiers for users are automatically generated or explicitly generated to be unique across databases may also be sufficient to mitigate this issue, as the <code>$auth</code> parameter will not link to any user record and any <code>PERMISSIONS</code> clauses restricting authorization based on the authenticated user should fail to successfully evaluate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80">https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T13:19:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to Improper Authentication when Changing Databases as Scope User]]></title>
        <id>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</id>
        <link href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2"/>
        <updated>2024-07-11T13:19:21.000Z</updated>
        <content type="html"><![CDATA[<p>Authentication would not be properly validated when an already authenticated scope user would use the <code>use</code> method or <code>USE</code> clause to switch working databases in a session. If there was a user record in the new database with identical record identifier as the original record that the user authenticated with in the original database, this could result in the user being able to perform actions under the identity of the unrelated user in the new database. This issue does not affect system users at any level.</p>
<p>By default, record identifiers are randomly generated with sufficient complexity to prevent the identifier collision required to trigger this issue. However, the issue may trigger in situations where multiple databases in the same SurrealDB instance are using explicitly defined or incremental record identifiers to identify users on an identically named table.</p>
<h3 id="impact">Impact</h3>
<p>Under the circumstances described above, a user who has an authenticated session as a scope user in a database could become authorized to query data under the identity of a specific scope user associated with an identical record identifier in a different database within the same SurrealDB instace if the <code>PERMISSIONS</code> clause would allow it due to relying exclusively on the <code>$auth</code> parameter, which would point to the impersonated user. The impact is limited to the single user with matching record identifier.</p>
<p>The impact of this issue is mitigated if the table <code>PERMISSIONS</code> clause explicitly checks for an scope that only exists in the specific database (e.g. <code>$scope = "production"</code>) or certain claims of the authentication token (e.g. <code>$token.email = "example@example.com"</code>), both of which would remain unchanged in the session of the authenticated user after changing databases. Permissions will default to <code>NONE</code> if there is no <code>PERMISSIONS</code> clause, which also mitigates this impact of this issue.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.5.4 and later are not affected by this issue.</li>
<li>Version 2.0.0-alpha.6 and later will not be affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to ensure that table <code>PERMISSIONS</code> clauses explicitly check that the <code>$scope</code> parameter matches a scope that is uniquely named across databases in the same SurrealDB instance. Ensuring that record identifiers for users are automatically generated or explicitly generated to be unique across databases may also be sufficient to mitigate this issue, as the <code>$auth</code> parameter will not link to any user record and any <code>PERMISSIONS</code> clauses restricting authorization based on the authenticated user should fail to successfully evaluate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80">https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T13:19:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec-derive] zerovec-derive incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</id>
        <link href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2"/>
        <updated>2024-07-09T19:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.3</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0346.html">https://rustsec.org/advisories/RUSTSEC-2024-0346.html</a></li>
<li><a href="https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069">https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069</a></li>
<li><a href="https://github.com/rustsec/advisory-db/pull/2007">https://github.com/rustsec/advisory-db/pull/2007</a></li>
<li><a href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2">https://github.com/advisories/GHSA-74r5-g7vc-j2v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phonenumber] panic on parsing crafted phonenumber inputs]]></title>
        <id>https://github.com/advisories/GHSA-mjw4-jj88-v687</id>
        <link href="https://github.com/advisories/GHSA-mjw4-jj88-v687"/>
        <updated>2024-07-09T15:40:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The phonenumber parsing code may panic due to a reachable <code>assert!</code> guard on the phonenumber string.</p>
<p>In a typical deployment of rust-phonenumber, this may get triggered by feeding a maliciously crafted phonenumber, e.g. over the network, specifically strings of the form <code>+dwPAA;phone-context=AA</code>, where the "number" part potentially parses as a number larger than 2^56.</p>
<p>Since f69abee1/0.3.4/#52.</p>
<p>0.2.x series is not affected.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.3.6 or higher.</p>
<h3 id="workarounds">Workarounds</h3>
<p>n/a</p>
<h3 id="references">References</h3>
<p>Whereas <a href="https://github.com/whisperfish/rust-phonenumber/issues/69">https://github.com/whisperfish/rust-phonenumber/issues/69</a> did not provide an example code path, property testing found a few: <code>+dwPAA;phone-context=AA</code>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/whisperfish/rust-phonenumber/security/advisories/GHSA-mjw4-jj88-v687">https://github.com/whisperfish/rust-phonenumber/security/advisories/GHSA-mjw4-jj88-v687</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/issues/69">https://github.com/whisperfish/rust-phonenumber/issues/69</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/pull/52">https://github.com/whisperfish/rust-phonenumber/pull/52</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/commit/b792151b17fc90231c232a23935830c2266f3203">https://github.com/whisperfish/rust-phonenumber/commit/b792151b17fc90231c232a23935830c2266f3203</a></li>
<li><a href="https://github.com/whisperfish/rust-phonenumber/commit/f69abee1481fac0d6d531407bae90020e39c6407">https://github.com/whisperfish/rust-phonenumber/commit/f69abee1481fac0d6d531407bae90020e39c6407</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39697">https://nvd.nist.gov/vuln/detail/CVE-2024-39697</a></li>
<li><a href="https://github.com/advisories/GHSA-mjw4-jj88-v687">https://github.com/advisories/GHSA-mjw4-jj88-v687</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjw4-jj88-v687</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-09T14:13:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec-derive] zerovec-derive incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</id>
        <link href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2"/>
        <updated>2024-07-09T19:45:10.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.3</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0346.html">https://rustsec.org/advisories/RUSTSEC-2024-0346.html</a></li>
<li><a href="https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069">https://github.com/unicode-org/icu4x/issues/5196#issuecomment-2214711069</a></li>
<li><a href="https://github.com/rustsec/advisory-db/pull/2007">https://github.com/rustsec/advisory-db/pull/2007</a></li>
<li><a href="https://github.com/advisories/GHSA-74r5-g7vc-j2v2">https://github.com/advisories/GHSA-74r5-g7vc-j2v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74r5-g7vc-j2v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec] zerovec incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-xrv3-jmcp-374j</id>
        <link href="https://github.com/advisories/GHSA-xrv3-jmcp-374j"/>
        <updated>2024-07-08T18:36:41.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.4</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0347.html">https://rustsec.org/advisories/RUSTSEC-2024-0347.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xrv3-jmcp-374j">https://github.com/advisories/GHSA-xrv3-jmcp-374j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrv3-jmcp-374j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zerovec] zerovec incorrectly uses `#[repr(packed)]`]]></title>
        <id>https://github.com/advisories/GHSA-xrv3-jmcp-374j</id>
        <link href="https://github.com/advisories/GHSA-xrv3-jmcp-374j"/>
        <updated>2024-07-08T18:36:41.000Z</updated>
        <content type="html"><![CDATA[<p>The affected versions make unsafe memory accesses under the assumption that <code>#[repr(packed)]</code> has a guaranteed field order. </p>
<p>The Rust specification does not guarantee this, and <a href="https://github.com/rust-lang/rust/pull/125360">https://github.com/rust-lang/rust/pull/125360</a> (1.80.0-beta) starts 
reordering fields of <code>#[repr(packed)]</code> structs, leading to illegal memory accesses.</p>
<p>The patched versions <code>0.9.7</code> and <code>0.10.4</code> use <code>#[repr(C, packed)]</code>, which guarantees field order.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0347.html">https://rustsec.org/advisories/RUSTSEC-2024-0347.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xrv3-jmcp-374j">https://github.com/advisories/GHSA-xrv3-jmcp-374j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrv3-jmcp-374j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-08T18:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ntpd] Unlimited number of NTS-KE connections can crash ntpd-rs server]]></title>
        <id>https://github.com/advisories/GHSA-2xpx-vcmq-5f72</id>
        <link href="https://github.com/advisories/GHSA-2xpx-vcmq-5f72"/>
        <updated>2024-07-02T02:26:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Missing limit for accepted NTS-KE connections allows an unauthenticated remote attacker to crash ntpd-rs when an NTS-KE server is configured. Non NTS-KE server configurations, such as the default ntpd-rs configuration, are unaffected.</p>
<h3 id="details">Details</h3>
<p>Operating systems have a limit for the number of open file descriptors (which includes sockets) in a single process, e.g. 1024 on Linux by default. When ntpd-rs is configured as an NTS server, it accepts TCP connections for the NTS-KE service. If the process has reached the descriptor limit and tries to accept a new TCP connection, the accept() system call will return with the EMFILE error and cause ntpd-rs to abort.</p>
<p>A remote attacker can open a large number of parallel TCP connections to the server to trigger this crash. The connections need to be opened quickly enough to avoid the <code>key-exchange-timeout-ms</code> timeout (by default 1000 milliseconds).</p>
<h3 id="impact">Impact</h3>
<p>Only NTS-KE server configuration are affected. Those without an NTS-KE server configuration such as NTS client only or NTP only configuration are unaffected. For affected configurations the ntpd-rs daemon can made completely unavailable by crashing the service. If ntpd-rs is automatically restarted, an attacker can repeat the attack to prevent ntpd-rs from doing anything useful.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable NTS-KE server functionality</li>
<li>Increase system resource limits (<code>RLIMIT_NOFILE</code>) to make the attack more difficult</li>
<li>Lower the <code>key-exchange-timeout-ms</code> configuration setting to make the attack more difficult</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-2xpx-vcmq-5f72">https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-2xpx-vcmq-5f72</a></li>
<li><a href="https://github.com/pendulum-project/ntpd-rs/commit/6049687006ea5b26eeac927964b5fcc80d7bde50">https://github.com/pendulum-project/ntpd-rs/commit/6049687006ea5b26eeac927964b5fcc80d7bde50</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38528">https://nvd.nist.gov/vuln/detail/CVE-2024-38528</a></li>
<li><a href="https://github.com/advisories/GHSA-2xpx-vcmq-5f72">https://github.com/advisories/GHSA-2xpx-vcmq-5f72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xpx-vcmq-5f72</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-28T21:05:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sequoia-openpgp] Low severity (DoS) vulnerability in sequoia-openpgp]]></title>
        <id>https://github.com/advisories/GHSA-9344-p847-qm5c</id>
        <link href="https://github.com/advisories/GHSA-9344-p847-qm5c"/>
        <updated>2024-06-26T19:10:17.000Z</updated>
        <content type="html"><![CDATA[<p>There is a denial-of-service vulnerability in sequoia-openpgp, our
crate providing a low-level interface to our OpenPGP implementation.
When triggered, the process will enter an infinite loop.</p>
<p>Many thanks to Andrew Gallagher for disclosing the issue to us.</p>
<h2 id="impact">Impact</h2>
<p>Any software directly or indirectly using the interface
<code>sequoia_openpgp::cert::raw::RawCertParser</code>.  Notably, this includes all
software using the <code>sequoia_cert_store</code> crate.</p>
<h2 id="details">Details</h2>
<p>The <code>RawCertParser</code> does not advance the input stream when
encountering unsupported cert (primary key) versions, resulting in an
infinite loop.</p>
<p>The fix introduces a new raw-cert-specific
<code>cert::raw::Error::UnuspportedCert</code>.</p>
<h2 id="affected-software">Affected software</h2>
<ul>
<li>sequoia-openpgp 1.13.0</li>
<li>sequoia-openpgp 1.14.0</li>
<li>sequoia-openpgp 1.15.0</li>
<li>sequoia-openpgp 1.16.0</li>
<li>sequoia-openpgp 1.17.0</li>
<li>sequoia-openpgp 1.18.0</li>
<li>sequoia-openpgp 1.19.0</li>
<li>sequoia-openpgp 1.20.0</li>
<li>Any software built against a vulnerable version of sequoia-openpgp
which is directly or indirectly using the interface
sequoia_<code>openpgp::cert::raw::RawCertParser</code>.  Notably, this includes
all software using the <code>sequoia_cert_store</code> crate.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://gitlab.com/sequoia-pgp/sequoia/-/issues/1106">https://gitlab.com/sequoia-pgp/sequoia/-/issues/1106</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0345.html">https://rustsec.org/advisories/RUSTSEC-2024-0345.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9344-p847-qm5c">https://github.com/advisories/GHSA-9344-p847-qm5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9344-p847-qm5c</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-26T19:10:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[curve25519-dalek] curve25519-dalek has timing variability in `curve25519-dalek`'s `Scalar29::sub`/`Scalar52::sub`]]></title>
        <id>https://github.com/advisories/GHSA-x4gp-pqpj-f43q</id>
        <link href="https://github.com/advisories/GHSA-x4gp-pqpj-f43q"/>
        <updated>2024-06-18T21:56:25.000Z</updated>
        <content type="html"><![CDATA[<p>Timing variability of any kind is problematic when working with  potentially secret values such as
elliptic curve scalars, and such issues can potentially leak private keys and other secrets. Such a
problem was recently discovered in <code>curve25519-dalek</code>.</p>
<p>The <code>Scalar29::sub</code> (32-bit) and <code>Scalar52::sub</code> (64-bit) functions contained usage of a mask value
inside a loop where LLVM saw an opportunity to insert a branch instruction (<code>jns</code> on x86) to
conditionally bypass this code section when the mask value is set to zero as can be seen in godbolt:</p>
<ul>
<li>32-bit (see L106): <a href="https://godbolt.org/z/zvaWxzvqv">https://godbolt.org/z/zvaWxzvqv</a></li>
<li>64-bit (see L48): <a href="https://godbolt.org/z/PczYj7Pda">https://godbolt.org/z/PczYj7Pda</a></li>
</ul>
<p>A similar problem was recently discovered in the Kyber reference implementation:</p>
<p><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/hqbtIGFKIpU/m/cnE3pbueBgAJ</a></p>
<p>As discussed on that thread, one portable solution, which is also used in this PR, is to introduce a
volatile read as an optimization barrier, which prevents the compiler from optimizing it away.</p>
<p>The fix can be validated in godbolt here:</p>
<ul>
<li>32-bit: <a href="https://godbolt.org/z/jc9j7eb8E">https://godbolt.org/z/jc9j7eb8E</a></li>
<li>64-bit: <a href="https://godbolt.org/z/x8d46Yfah">https://godbolt.org/z/x8d46Yfah</a></li>
</ul>
<p>The problem was discovered and the solution independently verified by 
Alexander Wagner <a href="mailto:alexander.wagner@aisec.fraunhofer.de">alexander.wagner@aisec.fraunhofer.de</a> and Lea Themint <a href="mailto:lea.thiemt@tum.de">lea.thiemt@tum.de</a> using
their DATA tool:</p>
<p><a href="https://github.com/Fraunhofer-AISEC/DATA">https://github.com/Fraunhofer-AISEC/DATA</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dalek-cryptography/curve25519-dalek/pull/659">https://github.com/dalek-cryptography/curve25519-dalek/pull/659</a></li>
<li><a href="https://github.com/dalek-cryptography/curve25519-dalek/commit/415892acf1cdf9161bd6a4c99bc2f4cb8fae5e6a">https://github.com/dalek-cryptography/curve25519-dalek/commit/415892acf1cdf9161bd6a4c99bc2f4cb8fae5e6a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0344.html">https://rustsec.org/advisories/RUSTSEC-2024-0344.html</a></li>
<li><a href="https://github.com/advisories/GHSA-x4gp-pqpj-f43q">https://github.com/advisories/GHSA-x4gp-pqpj-f43q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4gp-pqpj-f43q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-18T21:56:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rhai] Rhai stack overflow vulenrability]]></title>
        <id>https://github.com/advisories/GHSA-67fv-9r7g-432h</id>
        <link href="https://github.com/advisories/GHSA-67fv-9r7g-432h"/>
        <updated>2024-07-05T21:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>A stack overflow vulnerability was found in version 1.18.0 of rhai. The flaw position is: (/ SRC/rhai/SRC/eval/STMT. Rs in rhai: : eval: : STMT: : _ $LT $impl $u20 $rhai.. engine.. Engine$GT$::eval_stmt::h3f1d68ce37fc6e96). Due to the stack overflow is a recursive call/SRC/rhai/SRC/eval/STMT. Rs file eval_stmt_block function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36760">https://nvd.nist.gov/vuln/detail/CVE-2024-36760</a></li>
<li><a href="https://github.com/MageWeiG/VulnerabilityCollection/blob/main/CVE-2024-36760/info.md">https://github.com/MageWeiG/VulnerabilityCollection/blob/main/CVE-2024-36760/info.md</a></li>
<li><a href="https://github.com/rhaiscript/rhai/commit/308d07a11d3bff0d230f685a6320292181e5a445">https://github.com/rhaiscript/rhai/commit/308d07a11d3bff0d230f685a6320292181e5a445</a></li>
<li><a href="https://github.com/advisories/GHSA-67fv-9r7g-432h">https://github.com/advisories/GHSA-67fv-9r7g-432h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-67fv-9r7g-432h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-13T18:31:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[time] Segmentation fault in time]]></title>
        <id>https://github.com/advisories/GHSA-wcg3-cvx6-7396</id>
        <link href="https://github.com/advisories/GHSA-wcg3-cvx6-7396"/>
        <updated>2024-06-10T18:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>
<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>
<ul>
<li><code>time::UtcOffset::local_offset_at</code></li>
<li><code>time::UtcOffset::try_local_offset_at</code></li>
<li><code>time::UtcOffset::current_local_offset</code></li>
<li><code>time::UtcOffset::try_current_local_offset</code></li>
<li><code>time::OffsetDateTime::now_local</code></li>
<li><code>time::OffsetDateTime::try_now_local</code></li>
</ul>
<p>The affected functions in time 0.1 (all versions) are:</p>
<ul>
<li><code>at</code></li>
<li><code>at_utc</code></li>
<li><code>now</code></li>
</ul>
<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>
<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>
<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/time-rs/time/issues/293">time-rs/time#293</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0071.html">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>
<li><a href="https://crates.io/crates/time/0.2.23">https://crates.io/crates/time/0.2.23</a></li>
<li><a href="https://github.com/advisories/GHSA-wcg3-cvx6-7396">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcg3-cvx6-7396</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[time] Segmentation fault in time]]></title>
        <id>https://github.com/advisories/GHSA-wcg3-cvx6-7396</id>
        <link href="https://github.com/advisories/GHSA-wcg3-cvx6-7396"/>
        <updated>2024-06-10T18:40:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>
<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>
<ul>
<li><code>time::UtcOffset::local_offset_at</code></li>
<li><code>time::UtcOffset::try_local_offset_at</code></li>
<li><code>time::UtcOffset::current_local_offset</code></li>
<li><code>time::UtcOffset::try_current_local_offset</code></li>
<li><code>time::OffsetDateTime::now_local</code></li>
<li><code>time::OffsetDateTime::try_now_local</code></li>
</ul>
<p>The affected functions in time 0.1 (all versions) are:</p>
<ul>
<li><code>at</code></li>
<li><code>at_utc</code></li>
<li><code>now</code></li>
</ul>
<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>
<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>
<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/time-rs/time/issues/293">time-rs/time#293</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0071.html">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>
<li><a href="https://crates.io/crates/time/0.2.23">https://crates.io/crates/time/0.2.23</a></li>
<li><a href="https://github.com/advisories/GHSA-wcg3-cvx6-7396">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcg3-cvx6-7396</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping]]></title>
        <id>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</id>
        <link href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw"/>
        <updated>2024-06-10T12:32:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.</p>
<h3 id="details">Details</h3>
<p>In <a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">the patch for CVE-2023-28446</a>, Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.</p>
<p>For example, requesting the read permission with <code>/tmp/hello\u001b[/../../etc/hosts</code> as a path will display the <code>/tmp/hellotc/hosts</code> in the permission prompt, but the actual permission given to the program is <code>/tmp/hello\u001b[/../../etc/hosts</code>, which is <code>/etc/hosts</code> after the normalization.</p>
<p>This difference allows a malicious Deno program to spoof the contents of the permission prompt.</p>
<h3 id="poc">PoC</h3>
<p>Run the following JavaScript and observe that <code>/tmp/hellotc/hosts</code> is displayed in the permission prompt instead of <code>/etc/hosts</code>, although Deno gives access to <code>/etc/hosts</code>.</p>
<pre><code class="language-javascript">const permission = { name: "read", path: "/tmp/hello\u001b[/../../etc/hosts" };
await Deno.permissions.request(permission);
console.log(await Deno.readTextFile("/etc/hosts"));
</code></pre>
<h4 id="expected-prompt">Expected prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/etc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h4 id="actual-prompt">Actual prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/tmp/hellotc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
<li><a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d</a></li>
<li><a href="https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5">https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27936">https://nvd.nist.gov/vuln/detail/CVE-2024-27936</a></li>
<li><a href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:54:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno's deno_runtime vulnerable to interactive permission prompt spoofing via improper ANSI stripping]]></title>
        <id>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</id>
        <link href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw"/>
        <updated>2024-06-10T12:32:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A maliciously crafted permission request can show the spoofed permission prompt by inserting a broken ANSI escape sequence into the request contents.</p>
<h3 id="details">Details</h3>
<p>In <a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">the patch for CVE-2023-28446</a>, Deno is stripping any ANSI escape sequences from the permission prompt, but permissions given to the program are based on the contents that contain the ANSI escape sequences.</p>
<p>For example, requesting the read permission with <code>/tmp/hello\u001b[/../../etc/hosts</code> as a path will display the <code>/tmp/hellotc/hosts</code> in the permission prompt, but the actual permission given to the program is <code>/tmp/hello\u001b[/../../etc/hosts</code>, which is <code>/etc/hosts</code> after the normalization.</p>
<p>This difference allows a malicious Deno program to spoof the contents of the permission prompt.</p>
<h3 id="poc">PoC</h3>
<p>Run the following JavaScript and observe that <code>/tmp/hellotc/hosts</code> is displayed in the permission prompt instead of <code>/etc/hosts</code>, although Deno gives access to <code>/etc/hosts</code>.</p>
<pre><code class="language-javascript">const permission = { name: "read", path: "/tmp/hello\u001b[/../../etc/hosts" };
await Deno.permissions.request(permission);
console.log(await Deno.readTextFile("/etc/hosts"));
</code></pre>
<h4 id="expected-prompt">Expected prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/etc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h4 id="actual-prompt">Actual prompt</h4>
<pre><code>┌ ⚠️  Deno requests read access to "/tmp/hellotc/hosts".
├ Requested by `Deno.permissions.query()` API
├ Run again with --allow-read to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all read permissions) &gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any Deno program can spoof the content of the interactive permission prompt by inserting a broken ANSI code, which allows a malicious Deno program to display the wrong file path or program name to the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/denoland/deno/security/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
<li><a href="https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d">https://github.com/denoland/deno/commit/78d430103a8f6931154ddbbe19d36f3b8630286d</a></li>
<li><a href="https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5">https://github.com/denoland/deno/commit/7e6b94231290020b55f1d08fb03ea8132781abc5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27936">https://nvd.nist.gov/vuln/detail/CVE-2024-27936</a></li>
<li><a href="https://github.com/advisories/GHSA-m4pq-fv2w-6hrw">https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4pq-fv2w-6hrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-05T20:54:14.000Z</published>
    </entry>
</feed>