<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-02-18T06:01:29.216Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[libsqlite3-sys] `libsqlite3-sys` via C SQLite improperly validates array index]]></title>
        <id>https://github.com/advisories/GHSA-jw36-hf63-69r9</id>
        <link href="https://github.com/advisories/GHSA-jw36-hf63-69r9"/>
        <updated>2023-02-15T15:38:08.000Z</updated>
        <content type="html"><![CDATA[<p>SQLite 1.0.12 through 3.39.x before 3.39.2 sometimes allows an array-bounds overflow if billions of bytes are used in a string argument to a C API.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35737">https://nvd.nist.gov/vuln/detail/CVE-2022-35737</a></li>
<li><a href="https://kb.cert.org/vuls/id/720344">https://kb.cert.org/vuls/id/720344</a></li>
<li><a href="https://www.sqlite.org/cves.html">https://www.sqlite.org/cves.html</a></li>
<li><a href="https://sqlite.org/releaselog/3_39_2.html">https://sqlite.org/releaselog/3_39_2.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220915-0009/">https://security.netapp.com/advisory/ntap-20220915-0009/</a></li>
<li><a href="https://blog.trailofbits.com/2022/10/25/sqlite-vulnerability-july-2022-library-api/">https://blog.trailofbits.com/2022/10/25/sqlite-vulnerability-july-2022-library-api/</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-40">https://security.gentoo.org/glsa/202210-40</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0090.html">https://rustsec.org/advisories/RUSTSEC-2022-0090.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jw36-hf63-69r9">https://github.com/advisories/GHSA-jw36-hf63-69r9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jw36-hf63-69r9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-04T00:00:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cortex-m-rt] Miscompilation in cortex-m-rt 0.7.1 and 0.7.2]]></title>
        <id>https://github.com/advisories/GHSA-xw5j-gv2g-mjm2</id>
        <link href="https://github.com/advisories/GHSA-xw5j-gv2g-mjm2"/>
        <updated>2023-02-14T21:53:38.000Z</updated>
        <content type="html"><![CDATA[<p>Version 0.7.1 of the <code>cortex-m-rt</code> crate introduced a regression causing the stack to NOT be eight-byte aligned prior to calling <code>main</code> (or any other specified entrypoint), violating the <a href="https://github.com/ARM-software/abi-aa/blob/edd7460d87493fff124b8b5713acf71ffc06ee91/aapcs32/aapcs32.rst#6212stack-constraints-at-a-public-interface">stack ABI of AAPCS32</a>, the default ABI used by all Cortex-M targets. This regression is also present in version 0.7.2 of the <code>cortex-m-rt</code> crate.</p>
<p>This regression can cause certain compiler optimizations (which assume the eight-byte alignment) to produce incorrect behavior at runtime. This incorrect behavior has been <a href="https://github.com/peter9477/test2">observed in real-world applications</a>.</p>
<p><strong>It is advised that ALL users of <code>v0.7.1</code> and <code>v0.7.2</code> of the <code>cortex-m-rt</code> crate update to the latest version (<code>v0.7.3</code>), AS SOON AS POSSIBLE.</strong> Users of <code>v0.7.0</code> and prior versions of <code>cortex-m-rt</code> are not affected by this regression.</p>
<p>It will be necessary to rebuild all affected firmware binaries, and flash or deploy the new firmware binaries to affected devices.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-embedded/cortex-m/discussions/469">https://github.com/rust-embedded/cortex-m/discussions/469</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0014.html">https://rustsec.org/advisories/RUSTSEC-2023-0014.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xw5j-gv2g-mjm2">https://github.com/advisories/GHSA-xw5j-gv2g-mjm2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw5j-gv2g-mjm2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T21:53:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xcb] Memory handling issues in xcb]]></title>
        <id>https://github.com/advisories/GHSA-c8hq-x4mm-p6q6</id>
        <link href="https://github.com/advisories/GHSA-c8hq-x4mm-p6q6"/>
        <updated>2023-02-13T16:58:15.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the xcb crate through 2020-12-10 for Rust. base::Error does not have soundness. Because of the public ptr field, a use-after-free or double-free can occur.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36205">https://nvd.nist.gov/vuln/detail/CVE-2020-36205</a></li>
<li><a href="https://github.com/rtbo/rust-xcb/issues/93">https://github.com/rtbo/rust-xcb/issues/93</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0097.html">https://rustsec.org/advisories/RUSTSEC-2020-0097.html</a></li>
<li><a href="https://github.com/rust-x-bindings/rust-xcb/issues/93">https://github.com/rust-x-bindings/rust-xcb/issues/93</a></li>
<li><a href="https://github.com/advisories/GHSA-c8hq-x4mm-p6q6">https://github.com/advisories/GHSA-c8hq-x4mm-p6q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8hq-x4mm-p6q6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:50:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pnet_packet] `pnet_packet` buffer overrun in `set_payload` setters]]></title>
        <id>https://github.com/advisories/GHSA-cf4g-fcf8-3cr9</id>
        <link href="https://github.com/advisories/GHSA-cf4g-fcf8-3cr9"/>
        <updated>2023-02-09T19:27:58.000Z</updated>
        <content type="html"><![CDATA[<p>As indicated by this <a href="https://github.com/libpnet/libpnet/issues/449#issuecomment-663355987">issue</a>, a buffer overrun is possible in the <code>set_payload</code> setter of the various mutable "Packet" struct setters. The offending <code>set_payload</code> functions were defined within the struct <code>impl</code> blocks in earlier versions of the package, and later by the <code>packet</code> macro.</p>
<p>Fixed in the <code>packet</code> macro by <a href="https://github.com/libpnet/libpnet/pull/455">this</a> PR.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/libpnet/libpnet/issues/449">https://github.com/libpnet/libpnet/issues/449</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0167.html">https://rustsec.org/advisories/RUSTSEC-2020-0167.html</a></li>
<li><a href="https://github.com/advisories/GHSA-cf4g-fcf8-3cr9">https://github.com/advisories/GHSA-cf4g-fcf8-3cr9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf4g-fcf8-3cr9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-09T19:27:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to Timing Oracle in RSA Decryption]]></title>
        <id>https://github.com/advisories/GHSA-p52g-cm5j-mjv4</id>
        <link href="https://github.com/advisories/GHSA-p52g-cm5j-mjv4"/>
        <updated>2023-02-08T22:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE.</p>
<p>For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4304">https://nvd.nist.gov/vuln/detail/CVE-2022-4304</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0007.html">https://rustsec.org/advisories/RUSTSEC-2023-0007.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-p52g-cm5j-mjv4">https://github.com/advisories/GHSA-p52g-cm5j-mjv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p52g-cm5j-mjv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:31:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to Timing Oracle in RSA Decryption]]></title>
        <id>https://github.com/advisories/GHSA-p52g-cm5j-mjv4</id>
        <link href="https://github.com/advisories/GHSA-p52g-cm5j-mjv4"/>
        <updated>2023-02-08T22:31:44.000Z</updated>
        <content type="html"><![CDATA[<p>A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE.</p>
<p>For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4304">https://nvd.nist.gov/vuln/detail/CVE-2022-4304</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0007.html">https://rustsec.org/advisories/RUSTSEC-2023-0007.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-p52g-cm5j-mjv4">https://github.com/advisories/GHSA-p52g-cm5j-mjv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p52g-cm5j-mjv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:31:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`]]></title>
        <id>https://github.com/advisories/GHSA-r7jw-wp68-3xch</id>
        <link href="https://github.com/advisories/GHSA-r7jw-wp68-3xch"/>
        <updated>2023-02-08T22:28:35.000Z</updated>
        <content type="html"><![CDATA[<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>
<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>
<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>
<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0215">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0009.html">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jw-wp68-3xch">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jw-wp68-3xch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:28:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`]]></title>
        <id>https://github.com/advisories/GHSA-r7jw-wp68-3xch</id>
        <link href="https://github.com/advisories/GHSA-r7jw-wp68-3xch"/>
        <updated>2023-02-08T22:28:35.000Z</updated>
        <content type="html"><![CDATA[<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>
<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>
<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>
<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0215">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0009.html">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jw-wp68-3xch">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jw-wp68-3xch</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:28:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src contains Read Buffer Overflow in X.509 Name Constraint]]></title>
        <id>https://github.com/advisories/GHSA-w67w-mw4j-8qrv</id>
        <link href="https://github.com/advisories/GHSA-w67w-mw4j-8qrv"/>
        <updated>2023-02-08T22:27:43.000Z</updated>
        <content type="html"><![CDATA[<p>A read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs
after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to
continue certificate verification despite failure to construct a path to a trusted issuer.</p>
<p>The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory.</p>
<p>In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4203">https://nvd.nist.gov/vuln/detail/CVE-2022-4203</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0008.html">https://rustsec.org/advisories/RUSTSEC-2023-0008.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-w67w-mw4j-8qrv">https://github.com/advisories/GHSA-w67w-mw4j-8qrv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w67w-mw4j-8qrv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:27:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to Invalid pointer dereference in `d2i_PKCS7` functions]]></title>
        <id>https://github.com/advisories/GHSA-29xx-hcv2-c4cp</id>
        <link href="https://github.com/advisories/GHSA-29xx-hcv2-c4cp"/>
        <updated>2023-02-08T22:23:40.000Z</updated>
        <content type="html"><![CDATA[<p>An invalid pointer dereference on read can be triggered when an application tries to load malformed PKCS7 data with the <code>d2i_PKCS7()</code>, <code>d2i_PKCS7_bio()</code> or <code>d2i_PKCS7_fp()</code> functions.</p>
<p>The result of the dereference is an application crash which could lead to a denial of service attack. The TLS implementation in OpenSSL does not call this function however third party applications might call these functions on untrusted data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0216">https://nvd.nist.gov/vuln/detail/CVE-2023-0216</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0011.html">https://rustsec.org/advisories/RUSTSEC-2023-0011.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-29xx-hcv2-c4cp">https://github.com/advisories/GHSA-29xx-hcv2-c4cp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-29xx-hcv2-c4cp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:23:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src contains Double free after calling `PEM_read_bio_ex`]]></title>
        <id>https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</id>
        <link href="https://github.com/advisories/GHSA-v5w6-wcm8-jm4q"/>
        <updated>2023-02-08T22:22:59.000Z</updated>
        <content type="html"><![CDATA[<p>The function <code>PEM_read_bio_ex()</code> reads a PEM file from a BIO and parses and decodes the "name" (e.g. "CERTIFICATE"), any header data and the payload data. If the function succeeds then the "name_out", "header" and "data" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case <code>PEM_read_bio_ex()</code> will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack.</p>
<p>The functions <code>PEM_read_bio()</code> and <code>PEM_read()</code> are simple wrappers around <code>PEM_read_bio_ex()</code> and therefore these functions are also directly affected.</p>
<p>These functions are also called indirectly by a number of other OpenSSL functions including <code>PEM_X509_INFO_read_bio_ex()</code> and
<code>SSL_CTX_use_serverinfo_file()</code> which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if <code>PEM_read_bio_ex()</code> returns a failure code. These locations include the <code>PEM_read_bio_TYPE()</code> functions as well as the decoders introduced in OpenSSL 3.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4450">https://nvd.nist.gov/vuln/detail/CVE-2022-4450</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0010.html">https://rustsec.org/advisories/RUSTSEC-2023-0010.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-v5w6-wcm8-jm4q">https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:22:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src contains Double free after calling `PEM_read_bio_ex`]]></title>
        <id>https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</id>
        <link href="https://github.com/advisories/GHSA-v5w6-wcm8-jm4q"/>
        <updated>2023-02-08T22:22:59.000Z</updated>
        <content type="html"><![CDATA[<p>The function <code>PEM_read_bio_ex()</code> reads a PEM file from a BIO and parses and decodes the "name" (e.g. "CERTIFICATE"), any header data and the payload data. If the function succeeds then the "name_out", "header" and "data" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case <code>PEM_read_bio_ex()</code> will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack.</p>
<p>The functions <code>PEM_read_bio()</code> and <code>PEM_read()</code> are simple wrappers around <code>PEM_read_bio_ex()</code> and therefore these functions are also directly affected.</p>
<p>These functions are also called indirectly by a number of other OpenSSL functions including <code>PEM_X509_INFO_read_bio_ex()</code> and
<code>SSL_CTX_use_serverinfo_file()</code> which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if <code>PEM_read_bio_ex()</code> returns a failure code. These locations include the <code>PEM_read_bio_TYPE()</code> functions as well as the decoders introduced in OpenSSL 3.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4450">https://nvd.nist.gov/vuln/detail/CVE-2022-4450</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0010.html">https://rustsec.org/advisories/RUSTSEC-2023-0010.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-v5w6-wcm8-jm4q">https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:22:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to NULL dereference validating DSA public key]]></title>
        <id>https://github.com/advisories/GHSA-vxrh-cpg7-8vjr</id>
        <link href="https://github.com/advisories/GHSA-vxrh-cpg7-8vjr"/>
        <updated>2023-02-08T22:22:12.000Z</updated>
        <content type="html"><![CDATA[<p>An invalid pointer dereference on read can be triggered when an application tries to check a malformed DSA public key by the <code>EVP_PKEY_public_check()</code> function. This will most likely lead to an application crash. This function can be called on public keys supplied from untrusted sources which could allow an attacker to cause a denial of service attack.</p>
<p>The TLS implementation in OpenSSL does not call this function but applications might call the function if there are additional security requirements imposed by standards such as FIPS 140-3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0217">https://nvd.nist.gov/vuln/detail/CVE-2023-0217</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0012.html">https://rustsec.org/advisories/RUSTSEC-2023-0012.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vxrh-cpg7-8vjr">https://github.com/advisories/GHSA-vxrh-cpg7-8vjr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxrh-cpg7-8vjr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:22:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src contains `NULL` dereference during PKCS7 data verification]]></title>
        <id>https://github.com/advisories/GHSA-vrh7-x64v-7vxq</id>
        <link href="https://github.com/advisories/GHSA-vrh7-x64v-7vxq"/>
        <updated>2023-02-08T22:21:22.000Z</updated>
        <content type="html"><![CDATA[<p>A <code>NULL</code> pointer can be dereferenced when signatures are being verified on PKCS7 <code>signed</code> or <code>signedAndEnveloped</code> data. In case the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available the digest initialization will fail. There is a missing check for the return value from the initialization function which later leads to invalid usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider.</p>
<p>PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0401">https://nvd.nist.gov/vuln/detail/CVE-2023-0401</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0013.html">https://rustsec.org/advisories/RUSTSEC-2023-0013.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vrh7-x64v-7vxq">https://github.com/advisories/GHSA-vrh7-x64v-7vxq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vrh7-x64v-7vxq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:21:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</id>
        <link href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"/>
        <updated>2023-02-08T22:17:07.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0286">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0006.html">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:17:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Vulnerable OpenSSL included in cryptography wheels]]></title>
        <id>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</id>
        <link href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"/>
        <updated>2023-02-08T22:17:07.000Z</updated>
        <content type="html"><![CDATA[<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>
<p>If you are building cryptography source ("sdist") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0286">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0006.html">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20230207.txt">https://www.openssl.org/news/secadv/20230207.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-x4qr-2fvf-3mr5">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:17:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB vulnerable to low-resource flood DDoS attacks through network message]]></title>
        <id>https://github.com/advisories/GHSA-p2gm-ffr3-w2xw</id>
        <link href="https://github.com/advisories/GHSA-p2gm-ffr3-w2xw"/>
        <updated>2023-02-08T18:17:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="workarounds">Workarounds</h3>
<ul>
<li>forbid request genesis through network request</li>
<li>forbid requesting duplicate data  through network request</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-p2gm-ffr3-w2xw">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-p2gm-ffr3-w2xw</a></li>
<li><a href="https://github.com/advisories/GHSA-p2gm-ffr3-w2xw">https://github.com/advisories/GHSA-p2gm-ffr3-w2xw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2gm-ffr3-w2xw</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-08T18:17:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckb] Nervos CKB calculation of program load cycles may be missed when executing in resume mode]]></title>
        <id>https://github.com/advisories/GHSA-fjj4-2q73-jvgc</id>
        <link href="https://github.com/advisories/GHSA-fjj4-2q73-jvgc"/>
        <updated>2023-02-08T18:15:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The calculation of program load cycles may be missed when executing in resume mode. Since the script execution order is now determined, this issue does not cause network splitting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nervosnetwork/ckb/security/advisories/GHSA-fjj4-2q73-jvgc">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-fjj4-2q73-jvgc</a></li>
<li><a href="https://github.com/advisories/GHSA-fjj4-2q73-jvgc">https://github.com/advisories/GHSA-fjj4-2q73-jvgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fjj4-2q73-jvgc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-08T18:15:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] `tokio::io::ReadHalf<T>::unsplit` is Unsound]]></title>
        <id>https://github.com/advisories/GHSA-4q83-7cq4-p6wg</id>
        <link href="https://github.com/advisories/GHSA-4q83-7cq4-p6wg"/>
        <updated>2023-02-04T00:30:37.000Z</updated>
        <content type="html"><![CDATA[<p><code>tokio::io::ReadHalf&lt;T&gt;::unsplit</code> can violate the <code>Pin</code> contract</p>
<p>The soundness issue is described in the <a href="https://github.com/tokio-rs/tokio/issues/5372">tokio/issues#5372</a></p>
<p>Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)
is unusual, combined with the difficulty of making any arbitrary use-after-free
exploitable in Rust without doing a lot of careful alignment of data types in
the surrounding code.</p>
<p>The <code>tokio</code> feature <code>io-util</code> is also required to be enabled to trigger this
soundness issue.</p>
<p>Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e
and carllerche appropriately responding and fixing the soundness bug.</p>
<p>Tokio before 0.2.0 used <code>futures</code> 0.1 that did not have <code>Pin</code>, so it is not
affected by this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tokio/issues/5372">https://github.com/tokio-rs/tokio/issues/5372</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0005.html">https://rustsec.org/advisories/RUSTSEC-2023-0005.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4q83-7cq4-p6wg">https://github.com/advisories/GHSA-4q83-7cq4-p6wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q83-7cq4-p6wg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-04T00:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] `tokio::io::ReadHalf<T>::unsplit` is Unsound]]></title>
        <id>https://github.com/advisories/GHSA-4q83-7cq4-p6wg</id>
        <link href="https://github.com/advisories/GHSA-4q83-7cq4-p6wg"/>
        <updated>2023-02-04T00:30:37.000Z</updated>
        <content type="html"><![CDATA[<p><code>tokio::io::ReadHalf&lt;T&gt;::unsplit</code> can violate the <code>Pin</code> contract</p>
<p>The soundness issue is described in the <a href="https://github.com/tokio-rs/tokio/issues/5372">tokio/issues#5372</a></p>
<p>Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)
is unusual, combined with the difficulty of making any arbitrary use-after-free
exploitable in Rust without doing a lot of careful alignment of data types in
the surrounding code.</p>
<p>The <code>tokio</code> feature <code>io-util</code> is also required to be enabled to trigger this
soundness issue.</p>
<p>Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e
and carllerche appropriately responding and fixing the soundness bug.</p>
<p>Tokio before 0.2.0 used <code>futures</code> 0.1 that did not have <code>Pin</code>, so it is not
affected by this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tokio/issues/5372">https://github.com/tokio-rs/tokio/issues/5372</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0005.html">https://rustsec.org/advisories/RUSTSEC-2023-0005.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4q83-7cq4-p6wg">https://github.com/advisories/GHSA-4q83-7cq4-p6wg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4q83-7cq4-p6wg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-04T00:30:37.000Z</published>
    </entry>
</feed>