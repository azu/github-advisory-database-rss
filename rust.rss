<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-02-02T16:01:37.609Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[warp] Warp vulnerable to Path Traversal via Improper validation of Windows paths]]></title>
        <id>https://github.com/advisories/GHSA-8v4j-7jgf-5rg9</id>
        <link href="https://github.com/advisories/GHSA-8v4j-7jgf-5rg9"/>
        <updated>2023-01-31T23:33:47.000Z</updated>
        <content type="html"><![CDATA[<p>Path resolution in <code>warp::filters::fs::dir</code> didn't correctly validate Windows paths
meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed
and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users
could potentially read files anywhere on the filesystem.</p>
<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/seanmonstar/warp/issues/937">https://github.com/seanmonstar/warp/issues/937</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0082.html">https://rustsec.org/advisories/RUSTSEC-2022-0082.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8v4j-7jgf-5rg9">https://github.com/advisories/GHSA-8v4j-7jgf-5rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8v4j-7jgf-5rg9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-31T23:33:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[disrustor] Data race in disrustor]]></title>
        <id>https://github.com/advisories/GHSA-w9r2-qrpm-4rmj</id>
        <link href="https://github.com/advisories/GHSA-w9r2-qrpm-4rmj"/>
        <updated>2023-01-24T19:02:15.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the disrustor crate through 2020-12-17 for Rust. RingBuffer doe not properly limit the number of mutable references.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36470">https://nvd.nist.gov/vuln/detail/CVE-2020-36470</a></li>
<li><a href="https://github.com/sklose/disrustor/issues/1">https://github.com/sklose/disrustor/issues/1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0150.html">https://rustsec.org/advisories/RUSTSEC-2020-0150.html</a></li>
<li><a href="https://github.com/sklose/disrustor/commit/0be7aed40adbac51a50a3b95c815349a40d79ca6">https://github.com/sklose/disrustor/commit/0be7aed40adbac51a50a3b95c815349a40d79ca6</a></li>
<li><a href="https://github.com/advisories/GHSA-w9r2-qrpm-4rmj">https://github.com/advisories/GHSA-w9r2-qrpm-4rmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9r2-qrpm-4rmj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[v9] Data races in v9]]></title>
        <id>https://github.com/advisories/GHSA-pfjq-935c-4895</id>
        <link href="https://github.com/advisories/GHSA-pfjq-935c-4895"/>
        <updated>2023-01-23T18:40:24.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate unconditionally implement <code>Sync</code> for <code>SyncRef&lt;T&gt;</code>.
This definition allows data races if <code>&amp;T</code> is accessible through <code>&amp;SyncRef</code>.</p>
<p><code>SyncRef&lt;T&gt;</code> derives <code>Clone</code> and <code>Debug</code>, and the default implementations of those traits access <code>&amp;T</code> by invoking <code>T::clone()</code> &amp; <code>T::fmt()</code>. It is possible to create data races &amp; undefined behavior by concurrently invoking <code>SyncRef&lt;T&gt;::clone()</code> or <code>SyncRef&lt;T&gt;::fmt()</code> from multiple threads with <code>T: !Sync</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/purpleposeidon/v9/issues/1">https://github.com/purpleposeidon/v9/issues/1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0127.html">https://rustsec.org/advisories/RUSTSEC-2020-0127.html</a></li>
<li><a href="https://github.com/advisories/GHSA-pfjq-935c-4895">https://github.com/advisories/GHSA-pfjq-935c-4895</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pfjq-935c-4895</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T21:00:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[git2] git2-rs fails to verify SSH keys by default]]></title>
        <id>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</id>
        <link href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"/>
        <updated>2023-01-23T18:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href="https://libgit2.org/">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>
<p>The libgit2 team assigned <a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>
<ul>
<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>
<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>
</ul>
<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>
<p><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">You can learn more about this vulnerability in libgit2's advisory</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22742">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0003.html">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-20T23:36:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libgit2-sys] git2-rs fails to verify SSH keys by default]]></title>
        <id>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</id>
        <link href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"/>
        <updated>2023-01-23T18:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href="https://libgit2.org/">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>
<p>The libgit2 team assigned <a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>
<ul>
<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>
<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>
</ul>
<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>
<p><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">You can learn more about this vulnerability in libgit2's advisory</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22742">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0003.html">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-20T23:36:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libgit2-sys] git2-rs fails to verify SSH keys by default]]></title>
        <id>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</id>
        <link href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"/>
        <updated>2023-01-23T18:57:27.000Z</updated>
        <content type="html"><![CDATA[<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href="https://libgit2.org/">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>
<p>The libgit2 team assigned <a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>
<ul>
<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>
<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>
</ul>
<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>
<p><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">You can learn more about this vulnerability in libgit2's advisory</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22742">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>
<li><a href="https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0003.html">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m4ch-rfv5-x5g3">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-20T23:36:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[elf_rs] ELF header parsing library doesn't check for valid offset]]></title>
        <id>https://github.com/advisories/GHSA-g6pw-999w-j75m</id>
        <link href="https://github.com/advisories/GHSA-g6pw-999w-j75m"/>
        <updated>2023-01-20T22:41:03.000Z</updated>
        <content type="html"><![CDATA[<p>The crate has several unsafe sections that don't perform proper pointer validation.</p>
<p>An example can be found in the following function:</p>
<pre><code>fn section_header_raw(&amp;self) -&gt; &amp;[ET::SectionHeader] {
    let sh_off = self.elf_header().section_header_offset() as usize;
    let sh_num = self.elf_header().section_header_entry_num() as usize;
    unsafe {
        let sh_ptr = self.content().as_ptr().add(sh_off);
        from_raw_parts(sh_ptr as *const ET::SectionHeader, sh_num)
    }
}
</code></pre>
<p>While this will work perfectly fine <em>if</em> the ELF header is valid, malicious or malformed input can contain a section header offset of an arbitrary size, meaning that the resultant pointer in the unsafe block can point to an artibrary address in the address space of the process.</p>
<p>This can result in unpredictable behaviour, and in our fuzz testing, we discovered that it's trivial to cause SIGABRT (signal 6), or SEGV (signal 11).</p>
<p>The function should either be marked as unsafe, with a note that the caller is responsible for providing only valid inputs, or it should ideally do the due diligence to ensure that the offset doesn't exceed the bounds of the header (and add additional checks as necessary).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vincenthouyi/elf_rs/issues/11">https://github.com/vincenthouyi/elf_rs/issues/11</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0079.html">https://rustsec.org/advisories/RUSTSEC-2022-0079.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g6pw-999w-j75m">https://github.com/advisories/GHSA-g6pw-999w-j75m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6pw-999w-j75m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-20T22:41:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bumpalo] bumpalo has use-after-free due to a lifetime error in `Vec::into_iter()`]]></title>
        <id>https://github.com/advisories/GHSA-f85w-wvc7-crwc</id>
        <link href="https://github.com/advisories/GHSA-f85w-wvc7-crwc"/>
        <updated>2023-01-20T21:54:22.000Z</updated>
        <content type="html"><![CDATA[<p>In affected versions of this crate, the lifetime of the iterator produced by <code>Vec::into_iter()</code> is not constrained to the lifetime of the <code>Bump</code> that allocated the vector's memory. Using the iterator after the <code>Bump</code> is dropped causes use-after-free accesses.</p>
<p>The following example demonstrates memory corruption arising from a misuse of this unsoundness.</p>
<pre><code class="language-rust">use bumpalo::{collections::Vec, Bump};

fn main() {
    let bump = Bump::new();
    let mut vec = Vec::new_in(&amp;bump);
    vec.extend([0x01u8; 32]);
    let into_iter = vec.into_iter();
    drop(bump);

    for _ in 0..100 {
        let reuse_bump = Bump::new();
        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);
    }

    for x in into_iter {
        print!("0x{:02x} ", x);
    }
    println!();
}
</code></pre>
<p>The issue was corrected in version 3.11.1 by adding a lifetime to the <code>IntoIter</code> type, and updating the signature of <code>Vec::into_iter()</code> to constrain this lifetime.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111">https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0078.html">https://rustsec.org/advisories/RUSTSEC-2022-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f85w-wvc7-crwc">https://github.com/advisories/GHSA-f85w-wvc7-crwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f85w-wvc7-crwc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-20T21:54:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno] Deno is vulnerable to race condition via interactive permission prompt spoofing]]></title>
        <id>https://github.com/advisories/GHSA-mc52-jpm2-cqh6</id>
        <link href="https://github.com/advisories/GHSA-mc52-jpm2-cqh6"/>
        <updated>2023-01-25T18:41:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Multi-threaded programs were able to spoof interactive permission prompt by rewriting the prompt to suggest that program is waiting on user confirmation to unrelated action. </p>
<p>A malicious program could clear the terminal screen after permission prompt was shown and write a generic message like so:</p>
<pre><code>// Expected prompt
⚠️  ┌ Deno requests read access to "./log.txt".
   ├ Requested by `Deno.open()` API
   ├ Run again with --allow-read to bypass this prompt.
   └ Allow? [y/n] (y = yes, allow; n = no, deny) &gt;

// Prompt that users would see
Do you want to continue?
</code></pre>
<p>This situation impacts users who use Web Worker API and relied on interactive permission prompt. The reproduction is very timing sensitive and can’t be reliably reproduced on every try.</p>
<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers). </p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in Deno v1.29.3; it is recommended all users update to this version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Run with <code>--no-prompt</code> flag to disable interactive permission prompts.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-mc52-jpm2-cqh6">https://github.com/denoland/deno/security/advisories/GHSA-mc52-jpm2-cqh6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22499">https://nvd.nist.gov/vuln/detail/CVE-2023-22499</a></li>
<li><a href="https://github.com/denoland/deno/pull/17392">https://github.com/denoland/deno/pull/17392</a></li>
<li><a href="https://github.com/advisories/GHSA-mc52-jpm2-cqh6">https://github.com/advisories/GHSA-mc52-jpm2-cqh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc52-jpm2-cqh6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-20T16:56:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[v9] Data race in v9]]></title>
        <id>https://github.com/advisories/GHSA-3837-87vh-xq3w</id>
        <link href="https://github.com/advisories/GHSA-3837-87vh-xq3w"/>
        <updated>2023-01-18T13:49:07.000Z</updated>
        <content type="html"><![CDATA[<p>v9 is a slim data engine for Data Oriented Design. An issue was discovered in the v9 crate through 2020-12-18 for Rust. There is an unconditional implementation of Sync for SyncRef.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36447">https://nvd.nist.gov/vuln/detail/CVE-2020-36447</a></li>
<li><a href="https://github.com/purpleposeidon/v9/issues/1">https://github.com/purpleposeidon/v9/issues/1</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/v9/RUSTSEC-2020-0127.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/v9/RUSTSEC-2020-0127.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0127.html">https://rustsec.org/advisories/RUSTSEC-2020-0127.html</a></li>
<li><a href="https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7">https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7</a></li>
<li><a href="https://github.com/advisories/GHSA-3837-87vh-xq3w">https://github.com/advisories/GHSA-3837-87vh-xq3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3837-87vh-xq3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:57:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webbrowser] webbrowser-rs allows attackers to access arbitrary files via supplying a crafted URL]]></title>
        <id>https://github.com/advisories/GHSA-m589-mv4q-p7rj</id>
        <link href="https://github.com/advisories/GHSA-m589-mv4q-p7rj"/>
        <updated>2023-01-23T18:49:44.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in the IpFile argument of rust-lang webbrowser-rs v0.8.2 allows attackers to access arbitrary files via supplying a crafted URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45299">https://nvd.nist.gov/vuln/detail/CVE-2022-45299</a></li>
<li><a href="https://github.com/offalltn/CVE-2022-45299">https://github.com/offalltn/CVE-2022-45299</a></li>
<li><a href="https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3">https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3</a></li>
<li><a href="https://github.com/advisories/GHSA-m589-mv4q-p7rj">https://github.com/advisories/GHSA-m589-mv4q-p7rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m589-mv4q-p7rj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-13T21:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slock] Data races in slock]]></title>
        <id>https://github.com/advisories/GHSA-mc36-5m36-hjh5</id>
        <link href="https://github.com/advisories/GHSA-mc36-5m36-hjh5"/>
        <updated>2023-02-02T05:03:24.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the slock crate through 2020-11-17 for Rust. Slock unconditionally implements Send and Sync.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36455">https://nvd.nist.gov/vuln/detail/CVE-2020-36455</a></li>
<li><a href="https://github.com/BrokenLamp/slock-rs/issues/2">https://github.com/BrokenLamp/slock-rs/issues/2</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0135.html">https://rustsec.org/advisories/RUSTSEC-2020-0135.html</a></li>
<li><a href="https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6">https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6</a></li>
<li><a href="https://github.com/advisories/GHSA-mc36-5m36-hjh5">https://github.com/advisories/GHSA-mc36-5m36-hjh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc36-5m36-hjh5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:58:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[csv-sniffer] Use of Uninitialized Resource in csv-sniffer.]]></title>
        <id>https://github.com/advisories/GHSA-9783-42pm-x5jq</id>
        <link href="https://github.com/advisories/GHSA-9783-42pm-x5jq"/>
        <updated>2023-01-10T23:41:54.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the csv-sniffer crate through 2021-01-05 for Rust. preamble_skipcount may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45686">https://nvd.nist.gov/vuln/detail/CVE-2021-45686</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0088.html">https://rustsec.org/advisories/RUSTSEC-2021-0088.html</a></li>
<li><a href="https://github.com/jblondin/csv-sniffer/pull/2">https://github.com/jblondin/csv-sniffer/pull/2</a></li>
<li><a href="https://github.com/advisories/GHSA-9783-42pm-x5jq">https://github.com/advisories/GHSA-9783-42pm-x5jq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9783-42pm-x5jq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:13:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flumedb] Use of Uninitialized Resource in flumedb.]]></title>
        <id>https://github.com/advisories/GHSA-p46c-w9m3-7qr2</id>
        <link href="https://github.com/advisories/GHSA-p46c-w9m3-7qr2"/>
        <updated>2023-01-10T23:36:20.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the flumedb crate through 2021-01-07 for Rust. read_entry may read from uninitialized memory locations.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45684">https://nvd.nist.gov/vuln/detail/CVE-2021-45684</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0086.html">https://rustsec.org/advisories/RUSTSEC-2021-0086.html</a></li>
<li><a href="https://github.com/sunrise-choir/flumedb-rs/pull/12">https://github.com/sunrise-choir/flumedb-rs/pull/12</a></li>
<li><a href="https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6">https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6</a></li>
<li><a href="https://github.com/advisories/GHSA-p46c-w9m3-7qr2">https://github.com/advisories/GHSA-p46c-w9m3-7qr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p46c-w9m3-7qr2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:18:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bzip2] bzip2 allows attackers to cause a denial of service via a large file that triggers an integer overflow]]></title>
        <id>https://github.com/advisories/GHSA-96jv-r488-c2rj</id>
        <link href="https://github.com/advisories/GHSA-96jv-r488-c2rj"/>
        <updated>2023-01-29T05:03:15.000Z</updated>
        <content type="html"><![CDATA[<p>The bzip2 crate before 0.4.4 for Rust allow attackers to cause a denial of service via a large file that triggers an integer overflow in <code>mem.rs</code>. NOTE: this is unrelated to the <a href="https://crates.io/crates/bzip2-rs">https://crates.io/crates/bzip2-rs</a> product.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22895">https://nvd.nist.gov/vuln/detail/CVE-2023-22895</a></li>
<li><a href="https://github.com/alexcrichton/bzip2-rs/pull/86">https://github.com/alexcrichton/bzip2-rs/pull/86</a></li>
<li><a href="https://crates.io/crates/bzip2/versions">https://crates.io/crates/bzip2/versions</a></li>
<li><a href="https://github.com/advisories/GHSA-96jv-r488-c2rj">https://github.com/advisories/GHSA-96jv-r488-c2rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-96jv-r488-c2rj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-10T03:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo did not verify SSH host keys]]></title>
        <id>https://github.com/advisories/GHSA-r5w3-xm58-jv6j</id>
        <link href="https://github.com/advisories/GHSA-r5w3-xm58-jv6j"/>
        <updated>2023-01-27T05:04:10.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not perform SSH host key verification when cloning indexes and dependencies via SSH. An attacker could exploit this to perform man-in-the-middle (MITM) attacks.</p>
<p>This vulnerability has been assigned CVE-2022-46176.</p>
<h2 id="overview">Overview</h2>
<p>When an SSH client establishes communication with a server, to prevent MITM attacks the client should check whether it already communicated with that server in the past and what the server's public key was back then. If the key changed since the last connection, the connection must be aborted as a MITM attack is likely taking place.</p>
<p>It was discovered that Cargo never implemented such checks, and performed no validation on the server's public key, leaving Cargo users vulnerable to MITM attacks.</p>
<h2 id="affected-versions">Affected Versions</h2>
<p>All Rust versions containing Cargo before 1.66.1 are vulnerable (prior to 0.67.1 for the crates.io package).</p>
<p>Note that even if you don't explicitly use SSH for alternate registry indexes or crate dependencies, you might be affected by this vulnerability if you have configured git to replace HTTPS connections to GitHub with SSH (through git's <a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf"><code>url.&lt;base&gt;.insteadOf</code></a> setting), as that'd cause you to clone the crates.io index through SSH.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We will be releasing Rust 1.66.1 today, 2023-01-10, changing Cargo to check the SSH host key and abort the connection if the server's public key is not already trusted. We recommend everyone to upgrade as soon as possible.</p>
<p>Patch files for Rust 1.66.0 are also available <a href="https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176">here</a> for custom-built toolchains.</p>
<p>For the time being Cargo will not ask the user whether to trust a server's public key during the first connection. Instead, Cargo will show an error message detailing how to add that public key to the list of trusted keys. Note that this might break your automated builds if the hosts you clone dependencies or indexes from are not already trusted.</p>
<p>If you can't upgrade to Rust 1.66.1 yet, we recommend configuring Cargo to use the <code>git</code> CLI instead of its built-in git support. That way, all git network operations will be performed by the <code>git</code> CLI, which is not affected by this vulnerability. You can do so by adding this snippet to your <a href="https://doc.rust-lang.org/cargo/reference/config.html">Cargo configuration file</a>:</p>
<pre><code class="language-toml">[net]
git-fetch-with-cli = true
</code></pre>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>Thanks to the Julia Security Team for disclosing this to us according to our <a href="https://www.rust-lang.org/policies/security">security policy</a>!</p>
<p>We also want to thank the members of the Rust project who contributed to fixing this issue. Thanks to Eric Huss and Weihang Lo for writing and reviewing the patch, Pietro Albini for coordinating the disclosure and writing this advisory, and Josh Stone, Josh Triplett and Jacob Finkelman for advising during the disclosure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-r5w3-xm58-jv6j">https://github.com/rust-lang/cargo/security/advisories/GHSA-r5w3-xm58-jv6j</a></li>
<li><a href="https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf">https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf</a></li>
<li><a href="https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176">https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176</a></li>
<li><a href="https://www.rust-lang.org/policies/security">https://www.rust-lang.org/policies/security</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46176">https://nvd.nist.gov/vuln/detail/CVE-2022-46176</a></li>
<li><a href="https://github.com/advisories/GHSA-r5w3-xm58-jv6j">https://github.com/advisories/GHSA-r5w3-xm58-jv6j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5w3-xm58-jv6j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-10T21:09:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Unsafe parsing in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-h6xw-mghq-7523</id>
        <link href="https://github.com/advisories/GHSA-h6xw-mghq-7523"/>
        <updated>2023-01-30T05:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 allows unsafe parsing via the -c option. An information leak might occur but there is a simple denial of service (memory exhaustion) upon an attempt to parse a large or infinite file (such as a block or character device).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27819">https://nvd.nist.gov/vuln/detail/CVE-2022-27819</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021">https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases/tag/1.2.0">https://github.com/waycrate/swhkd/releases/tag/1.2.0</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xw-mghq-7523">https://github.com/advisories/GHSA-h6xw-mghq-7523</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xw-mghq-7523</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-04-08T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe]]></title>
        <id>https://github.com/advisories/GHSA-7rrj-xr53-82p7</id>
        <link href="https://github.com/advisories/GHSA-7rrj-xr53-82p7"/>
        <updated>2023-01-10T16:12:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>
<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched:</p>
<ul>
<li>1.23.1</li>
<li>1.20.3</li>
<li>1.18.4</li>
</ul>
<p>The fix will also be present in all releases starting from version 1.24.0.</p>
<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>
<pre><code class="language-rust">let mut opts = ServerOptions::new();
opts.pipe_mode(PipeMode::Message);
opts.reject_remote_clients(true);
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22466">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>
<li><a href="https://github.com/tokio-rs/tokio/pull/5336">https://github.com/tokio-rs/tokio/pull/5336</a></li>
<li><a href="https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0001.html">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7rrj-xr53-82p7">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rrj-xr53-82p7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-06T21:40:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe]]></title>
        <id>https://github.com/advisories/GHSA-7rrj-xr53-82p7</id>
        <link href="https://github.com/advisories/GHSA-7rrj-xr53-82p7"/>
        <updated>2023-01-10T16:12:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>
<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched:</p>
<ul>
<li>1.23.1</li>
<li>1.20.3</li>
<li>1.18.4</li>
</ul>
<p>The fix will also be present in all releases starting from version 1.24.0.</p>
<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>
<pre><code class="language-rust">let mut opts = ServerOptions::new();
opts.pipe_mode(PipeMode::Message);
opts.reject_remote_clients(true);
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22466">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>
<li><a href="https://github.com/tokio-rs/tokio/pull/5336">https://github.com/tokio-rs/tokio/pull/5336</a></li>
<li><a href="https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0001.html">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7rrj-xr53-82p7">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rrj-xr53-82p7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-06T21:40:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe]]></title>
        <id>https://github.com/advisories/GHSA-7rrj-xr53-82p7</id>
        <link href="https://github.com/advisories/GHSA-7rrj-xr53-82p7"/>
        <updated>2023-01-10T16:12:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>
<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched:</p>
<ul>
<li>1.23.1</li>
<li>1.20.3</li>
<li>1.18.4</li>
</ul>
<p>The fix will also be present in all releases starting from version 1.24.0.</p>
<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>
<pre><code class="language-rust">let mut opts = ServerOptions::new();
opts.pipe_mode(PipeMode::Message);
opts.reject_remote_clients(true);
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22466">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>
<li><a href="https://github.com/tokio-rs/tokio/pull/5336">https://github.com/tokio-rs/tokio/pull/5336</a></li>
<li><a href="https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>
<li><a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0001.html">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7rrj-xr53-82p7">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rrj-xr53-82p7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-06T21:40:58.000Z</published>
    </entry>
</feed>