<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-01-27T02:05:37.068Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[lemmy_server] Any authenticated user may obtain private message details from other users on the same instance]]></title>
        <id>https://github.com/advisories/GHSA-r64r-5h43-26qv</id>
        <link href="https://github.com/advisories/GHSA-r64r-5h43-26qv"/>
        <updated>2024-01-24T21:13:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Users can report private messages, even when they're neither sender nor recipient of the message.
The API response to creating a private message report contains the private message itself, which means any user can just iterate over message ids to (loudly) obtain all private messages of an instance.
A user with instance admin privileges can also abuse this if the private message is removed from the response, as they're able to see the resulting reports.</p>
<h3 id="details">Details</h3>
<p>Creating a private message report by POSTing to <code>/api/v3/private_message/report</code> does not validate whether the reporter is the recipient of the message.
At least lemmy-ui does not allow the sender to report the message; the API method should likely be restricted to accessible to recipients only.
The API response when creating a report contains the <code>private_message_report_view</code> with all the details of the report, including the private message that has been reported:</p>
<details>

<summary>Example response</summary>

<p>In the report below, the creator with id 3 is different from the private message creator (id 2) and private message recipient (id 6).</p>
<pre><code class="language-json">{
  "private_message_report_view": {
    "private_message_report": {
      "id": 14,
      "creator_id": 3,
      "private_message_id": 7,
      "original_pm_text": "testfoo",
      "reason": "reporting id 7",
      "resolved": false,
      "published": "2023-12-15T19:23:03.441967Z"
    },
    "private_message": {
      "id": 7,
      "creator_id": 2,
      "recipient_id": 6,
      "content": "testfoo",
      "deleted": false,
      "read": false,
      "published": "2023-12-15T19:21:41.920872Z",
      "ap_id": "https://1b1w56.lem.rocks/private_message/7",
      "local": true
    },
    "private_message_creator": {
      "id": 2,
      "name": "admin",
      "banned": false,
      "published": "2023-12-14T23:45:05.055427Z",
      "actor_id": "https://1b1w56.lem.rocks/u/admin",
      "local": true,
      "deleted": false,
      "bot_account": false,
      "instance_id": 1
    },
    "creator": {
      "id": 3,
      "name": "testuser1",
      "banned": false,
      "published": "2023-12-14T23:47:57.571772Z",
      "actor_id": "https://1b1w56.lem.rocks/u/testuser1",
      "local": true,
      "deleted": false,
      "bot_account": false,
      "instance_id": 1
    }
  }
}
</code></pre>
</details>

<p>If these details were not available in the response, but reports could still be created by any user, or at least by any admin, this would allow an instance admin to create reports and obtain the message contents from the report system.</p>
<p>This was originally discovered from incorrect reports on a 0.18.5 instance and has been replicated in a 0.19.0 test environment.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-bash">curl -v 'https://myinstance.tld/api/v3/private_message/report' -X POST -H 'Content-Type: application/json' -H 'authorization: Bearer ...' --data-raw '{"private_message_id":1,"reason":"i like reports"}'
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any authenticated user can obtain arbitrary (untargeted) private message contents.
Privileges required depend on the instance configuration; when registratons are enabled without application system, the privileges required are practically none.
When registration applications are required, privileges required could be considered low, but this assessment heavily varies by instance.</p>
<h3 id="detection">Detection</h3>
<p>Any private message reports where the report creator is not equal to the private message recipient may be an attempt to exploit this.
As this was originally discovered from an incorrect report, likely related to a bug in a client app, it should be noted that not all mismatching reports should be considered malicious; though a frequent occurrence of them likely indicates an exploitation attempt.</p>
<h3 id="workaround-when-updating-is-not-immediately-possible">Workaround when updating is not immediately possible</h3>
<p>If an update to a fixed Lemmy version is not immediately possible, the API route can be blocked in the reverse proxy.
This will prevent anyone from reporting private messages, but it will also prevent exploitation before the update has been applied.</p>
<p>nginx example:</p>
<pre><code class="language-nginx">location = /api/v3/private_message/report {
  default_type application/json;
  return 403 '{"error":"couldnt_create_report"}';
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/LemmyNet/lemmy/security/advisories/GHSA-r64r-5h43-26qv">https://github.com/LemmyNet/lemmy/security/advisories/GHSA-r64r-5h43-26qv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23649">https://nvd.nist.gov/vuln/detail/CVE-2024-23649</a></li>
<li><a href="https://github.com/LemmyNet/lemmy/commit/bc32b408b523b9b64aa57b8e47748f96cce0dae5">https://github.com/LemmyNet/lemmy/commit/bc32b408b523b9b64aa57b8e47748f96cce0dae5</a></li>
<li><a href="https://github.com/advisories/GHSA-r64r-5h43-26qv">https://github.com/advisories/GHSA-r64r-5h43-26qv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r64r-5h43-26qv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-24T21:13:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snow] Unauthenticated Nonce Increment in snow]]></title>
        <id>https://github.com/advisories/GHSA-7g9j-g5jg-3vv3</id>
        <link href="https://github.com/advisories/GHSA-7g9j-g5jg-3vv3"/>
        <updated>2024-01-24T20:55:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There was a logic bug where unauthenticated payloads could still cause a nonce increment in snow's internal state. For an attacker with the ability to inject packets into the channel Noise is talking over, this allows a denial-of-service type attack which could prevent communication as it causes the sending and receiving side to be expecting different nonce values than would arrive.</p>
<p>Note that this only affects those who are using the stateful <code>TransportState</code>, not those using <code>StatelessTransportState</code>.</p>
<h3 id="patches">Patches</h3>
<p>This has been patched in version 0.9.5, and all users are recommended to update.</p>
<h3 id="references">References</h3>
<p>There will be a more formal report of this in the near future.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mcginty/snow/security/advisories/GHSA-7g9j-g5jg-3vv3">https://github.com/mcginty/snow/security/advisories/GHSA-7g9j-g5jg-3vv3</a></li>
<li><a href="https://github.com/mcginty/snow/commit/12e8ae55547ae297d5f70599e5c884ea891303eb">https://github.com/mcginty/snow/commit/12e8ae55547ae297d5f70599e5c884ea891303eb</a></li>
<li><a href="https://github.com/advisories/GHSA-7g9j-g5jg-3vv3">https://github.com/advisories/GHSA-7g9j-g5jg-3vv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7g9j-g5jg-3vv3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-24T20:53:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trillium-client] Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') in trillium-http and trillium-client]]></title>
        <id>https://github.com/advisories/GHSA-9f9p-cp3c-72jf</id>
        <link href="https://github.com/advisories/GHSA-9f9p-cp3c-72jf"/>
        <updated>2024-01-24T21:32:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Insufficient validation of outbound header values may lead to request splitting or response splitting attacks in scenarios where attackers have sufficient control over outbound headers.</p>
<h3 id="details">Details</h3>
<p>Outbound <code>trillium_http::HeaderValue</code> and <code>trillium_http::HeaderName</code> can be constructed infallibly and were not checked for illegal bytes when sending requests from the client or responses from the server. Thus, if an attacker has sufficient control over header values (or names) in a request or response that they could inject <code>\r\n</code> sequences, they could get the client and server out of sync, and then pivot to gain control over other parts of requests or responses. (i.e. exfiltrating data from other requests, SSRF, etc.)</p>
<h3 id="patches">Patches</h3>
<h4 id="trillium-http--0312">trillium-http &gt;= 0.3.12:</h4>
<ul>
<li>If a header name is invalid in server response headers, the specific header and any associated values are omitted from network transmission.</li>
<li>If a header value is invalid in server response headers, the individual header value is omitted from network transmission. Other headers values with the same header name will still be sent.</li>
</ul>
<h4 id="trillium-client--054">trillium-client &gt;= 0.5.4:</h4>
<ul>
<li>If any header name or header value is invalid in the client request headers, awaiting the client Conn returns an <code>Error::MalformedHeader</code> prior to any network access.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>trillium services and client applications should sanitize or validate untrusted input that is included in header values and header names. Carriage return, newline, and null characters are not allowed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects use cases where attackers have control of outbound headers, and can insert "\r\n" sequences. Specifically, if untrusted and unvalidated input is inserted into header names or values.</p>
<h3 id="a-note-on-timing-from-jbr-on-behalf-of-trillium-rs">A note on timing from @jbr on behalf of <code>trillium-rs</code></h3>
<p>@divergentdave filed this vulnerability many months ago but I did not see it until the evening of Jan 23, 2024. Patches were issued less than 24h after reading the vulnerability. The <a href="https://github.com/trillium-rs/trillium/blob/main/SECURITY.md">security policy</a> has been <a href="https://github.com/trillium-rs/trillium/commit/b27950ceae52aa7a0f482494fe67b6069234d417">updated</a> to avoid delays like this in the future.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf">https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0008.html">https://rustsec.org/advisories/RUSTSEC-2024-0008.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0009.html">https://rustsec.org/advisories/RUSTSEC-2024-0009.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23644">https://nvd.nist.gov/vuln/detail/CVE-2024-23644</a></li>
<li><a href="https://github.com/trillium-rs/trillium/commit/16a42b3f8378a3fa4e61ece3e3e37e6a530df51d">https://github.com/trillium-rs/trillium/commit/16a42b3f8378a3fa4e61ece3e3e37e6a530df51d</a></li>
<li><a href="https://github.com/trillium-rs/trillium/commit/8d468f85e27b8d0943d6f43ce9f8c7397141a999">https://github.com/trillium-rs/trillium/commit/8d468f85e27b8d0943d6f43ce9f8c7397141a999</a></li>
<li><a href="https://github.com/advisories/GHSA-9f9p-cp3c-72jf">https://github.com/advisories/GHSA-9f9p-cp3c-72jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9f9p-cp3c-72jf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-24T20:20:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trillium-http] Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting') in trillium-http and trillium-client]]></title>
        <id>https://github.com/advisories/GHSA-9f9p-cp3c-72jf</id>
        <link href="https://github.com/advisories/GHSA-9f9p-cp3c-72jf"/>
        <updated>2024-01-24T21:32:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Insufficient validation of outbound header values may lead to request splitting or response splitting attacks in scenarios where attackers have sufficient control over outbound headers.</p>
<h3 id="details">Details</h3>
<p>Outbound <code>trillium_http::HeaderValue</code> and <code>trillium_http::HeaderName</code> can be constructed infallibly and were not checked for illegal bytes when sending requests from the client or responses from the server. Thus, if an attacker has sufficient control over header values (or names) in a request or response that they could inject <code>\r\n</code> sequences, they could get the client and server out of sync, and then pivot to gain control over other parts of requests or responses. (i.e. exfiltrating data from other requests, SSRF, etc.)</p>
<h3 id="patches">Patches</h3>
<h4 id="trillium-http--0312">trillium-http &gt;= 0.3.12:</h4>
<ul>
<li>If a header name is invalid in server response headers, the specific header and any associated values are omitted from network transmission.</li>
<li>If a header value is invalid in server response headers, the individual header value is omitted from network transmission. Other headers values with the same header name will still be sent.</li>
</ul>
<h4 id="trillium-client--054">trillium-client &gt;= 0.5.4:</h4>
<ul>
<li>If any header name or header value is invalid in the client request headers, awaiting the client Conn returns an <code>Error::MalformedHeader</code> prior to any network access.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>trillium services and client applications should sanitize or validate untrusted input that is included in header values and header names. Carriage return, newline, and null characters are not allowed.</p>
<h3 id="impact">Impact</h3>
<p>This only affects use cases where attackers have control of outbound headers, and can insert "\r\n" sequences. Specifically, if untrusted and unvalidated input is inserted into header names or values.</p>
<h3 id="a-note-on-timing-from-jbr-on-behalf-of-trillium-rs">A note on timing from @jbr on behalf of <code>trillium-rs</code></h3>
<p>@divergentdave filed this vulnerability many months ago but I did not see it until the evening of Jan 23, 2024. Patches were issued less than 24h after reading the vulnerability. The <a href="https://github.com/trillium-rs/trillium/blob/main/SECURITY.md">security policy</a> has been <a href="https://github.com/trillium-rs/trillium/commit/b27950ceae52aa7a0f482494fe67b6069234d417">updated</a> to avoid delays like this in the future.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf">https://github.com/trillium-rs/trillium/security/advisories/GHSA-9f9p-cp3c-72jf</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0008.html">https://rustsec.org/advisories/RUSTSEC-2024-0008.html</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0009.html">https://rustsec.org/advisories/RUSTSEC-2024-0009.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23644">https://nvd.nist.gov/vuln/detail/CVE-2024-23644</a></li>
<li><a href="https://github.com/trillium-rs/trillium/commit/16a42b3f8378a3fa4e61ece3e3e37e6a530df51d">https://github.com/trillium-rs/trillium/commit/16a42b3f8378a3fa4e61ece3e3e37e6a530df51d</a></li>
<li><a href="https://github.com/trillium-rs/trillium/commit/8d468f85e27b8d0943d6f43ce9f8c7397141a999">https://github.com/trillium-rs/trillium/commit/8d468f85e27b8d0943d6f43ce9f8c7397141a999</a></li>
<li><a href="https://github.com/advisories/GHSA-9f9p-cp3c-72jf">https://github.com/advisories/GHSA-9f9p-cp3c-72jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9f9p-cp3c-72jf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-24T20:20:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rust-i18n-support] Use-after-free when setting the locale]]></title>
        <id>https://github.com/advisories/GHSA-c8v3-jhv9-4ppc</id>
        <link href="https://github.com/advisories/GHSA-c8v3-jhv9-4ppc"/>
        <updated>2024-01-23T20:10:50.000Z</updated>
        <content type="html"><![CDATA[<p>Version 3.0.0 introduced an <code>AtomicStr</code> type, that is used to store the current locale. It stores the locale as a raw pointer to an <code>Arc&lt;String&gt;</code>. The locale can be read with <code>AtomicStr::as_str()</code>. <code>AtomicStr::as_str()</code> does not increment the usage counter of the <code>Arc</code>.</p>
<p>If the locale is changed in one thread, another thread can have a stale -- possibly already freed -- reference to the stored string.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/longbridgeapp/rust-i18n/issues/71">https://github.com/longbridgeapp/rust-i18n/issues/71</a></li>
<li><a href="https://github.com/longbridgeapp/rust-i18n/commit/22e0609591a2c08930f52a0e6bc860f02a0e88c0">https://github.com/longbridgeapp/rust-i18n/commit/22e0609591a2c08930f52a0e6bc860f02a0e88c0</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0007.html">https://rustsec.org/advisories/RUSTSEC-2024-0007.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c8v3-jhv9-4ppc">https://github.com/advisories/GHSA-c8v3-jhv9-4ppc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c8v3-jhv9-4ppc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-23T20:10:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[threadalone] Unsound sending of non-Send types across threads in threadalone]]></title>
        <id>https://github.com/advisories/GHSA-w59h-378f-2frm</id>
        <link href="https://github.com/advisories/GHSA-w59h-378f-2frm"/>
        <updated>2024-01-23T14:43:35.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions can run the <code>Drop</code> impl of a non-Send type on a different
thread than it was created on.</p>
<p>The flaw occurs when a stderr write performed by the <code>threadalone</code> crate fails,
for example because stderr is redirected to a location on a filesystem that is
full, or because stderr is a pipe that has been closed by the reader.</p>
<p>Dropping a non-Send type on the wrong thread is unsound. If used with a type
such as a pthread-based <code>MutexGuard</code>, <a href="https://github.com/rust-lang/rust/issues/23465#issuecomment-82730326">the consequence is undefined
behavior</a>. If used with <code>Rc</code>, there would be a data race on the
reference count, which is likewise undefined behavior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cr0sh/threadalone/issues/1">https://github.com/cr0sh/threadalone/issues/1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0005.html">https://rustsec.org/advisories/RUSTSEC-2024-0005.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w59h-378f-2frm">https://github.com/advisories/GHSA-w59h-378f-2frm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w59h-378f-2frm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-23T14:43:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shlex] Multiple issues involving quote API in shlex]]></title>
        <id>https://github.com/advisories/GHSA-r7qv-8r2h-pg27</id>
        <link href="https://github.com/advisories/GHSA-r7qv-8r2h-pg27"/>
        <updated>2024-01-22T21:21:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="issue-1-failure-to-quote-characters">Issue 1: Failure to quote characters</h2>
<p>Affected versions of this crate allowed the bytes <code>{</code> and <code>\xa0</code> to appear
unquoted and unescaped in command arguments.</p>
<p>If the output of <code>quote</code> or <code>join</code> is passed to a shell, then what should be a
single command argument could be interpreted as multiple arguments.</p>
<p>This does not <em>directly</em> allow arbitrary command execution (you can't inject a
command substitution or similar).  But depending on the command you're running,
being able to inject multiple arguments where only one is expected could lead
to undesired consequences, potentially including arbitrary command execution.</p>
<p>The flaw was corrected in version 1.2.1 by escaping additional characters.
Updating to 1.3.0 is recommended, but 1.2.1 offers a more minimal fix if
desired.</p>
<p>Workaround: Check for the bytes <code>{</code> and <code>\xa0</code> in <code>quote</code>/<code>join</code> input or
output.</p>
<p>(Note: <code>{</code> is problematic because it is used for glob expansion.  <code>\xa0</code> is
problematic because it's treated as a word separator in <a href="https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#solved-xa0">specific
environments</a>.)</p>
<h2 id="issue-2-dangerous-api-wrt-nul-bytes">Issue 2: Dangerous API w.r.t. nul bytes</h2>
<p>Version 1.3.0 deprecates the <code>quote</code> and <code>join</code> APIs in favor of <code>try_quote</code>
and <code>try_join</code>, which behave the same except that they have <code>Result</code> return
type, returning <code>Err</code> if the input contains nul bytes.</p>
<p>Strings containing nul bytes generally cannot be used in Unix command arguments
or environment variables, and most shells cannot handle nul bytes even
internally.  If you try to pass one anyway, then the results might be
security-sensitive in uncommon scenarios.  <a href="https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#nul-bytes">More details here.</a></p>
<p>Due to the low severity, the behavior of the original <code>quote</code> and <code>join</code> APIs
has not changed; they continue to allow nuls.</p>
<p>Workaround: Manually check for nul bytes in <code>quote</code>/<code>join</code> input or output.</p>
<h2 id="issue-3-lack-of-documentation-for-interactive-shell-risks">Issue 3: Lack of documentation for interactive shell risks</h2>
<p>The <code>quote</code> family of functions does not and cannot escape control characters.
With non-interactive shells this is perfectly safe, as control characters have
no special effect.  But if you writing directly to the standard input of an
interactive shell (or through a pty), then control characters <a href="https://docs.rs/shlex/latest/shlex/quoting_warning/index.html#control-characters-interactive-contexts-only">can cause
misbehavior including arbitrary command injection.</a></p>
<p>This is essentially unfixable, and has not been patched.  But as of version
1.3.0, documentation has been added.</p>
<p>Future versions of <code>shlex</code> may add API variants that avoid the issue at the
cost of reduced portability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27">https://github.com/comex/rust-shlex/security/advisories/GHSA-r7qv-8r2h-pg27</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0006.html">https://rustsec.org/advisories/RUSTSEC-2024-0006.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r7qv-8r2h-pg27">https://github.com/advisories/GHSA-r7qv-8r2h-pg27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7qv-8r2h-pg27</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-22T21:21:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to Uncontrolled CPU Consumption via WebSocket Interface]]></title>
        <id>https://github.com/advisories/GHSA-58j9-j2fj-v8f4</id>
        <link href="https://github.com/advisories/GHSA-58j9-j2fj-v8f4"/>
        <updated>2024-01-19T20:31:23.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB depends on the <code>tungstenite</code> and <code>tokio-tungstenite</code> crates used by the <code>axum</code> crate, which handles connections to the SurrealDB WebSocket interface. On versions before <code>0.20.1</code>, the <code>tungstenite</code> crate presented an issue which allowed the parsing of HTTP headers during the client handshake to continuously consume high CPU when the headers were very long. All affected crates have been updated in SurrealDB version <code>1.1.0</code>.</p>
<p>From the original advisory for <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">CVE-2023-43669</a>:
"The Tungstenite crate through 0.20.0 for Rust allows remote attackers to cause a denial of service (minutes of CPU consumption) via an excessive length of an HTTP header in a client handshake. The length affects both how many times a parse is attempted (e.g., thousands of times) and the average amount of data for each parse attempt (e.g., millions of bytes)."</p>
<h3 id="impact">Impact</h3>
<p>A remote unauthenticated attacker may cause a SurrealDB server that exposes its WebSocket interface to consume high CPU by sending an HTTP request with a very long header to the WebSocket interface, potentially leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may be able to limit access to the WebSocket interface (i.e. the <code>/rpc</code> endpoint) via reverse proxy if not in use or only used by a limited number of trusted clients. Alternatively, a reverse proxy may be used to strip or truncate request headers exceeding a reasonable length before reaching the SurrealDB server.</p>
<h3 id="references">References</h3>
<ul>
<li>#2807</li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">https://nvd.nist.gov/vuln/detail/CVE-2023-43669</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0065.html">https://rustsec.org/advisories/RUSTSEC-2023-0065.html</a></li>
<li><a href="https://github.com/snapview/tungstenite-rs/issues/376">https://github.com/snapview/tungstenite-rs/issues/376</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-58j9-j2fj-v8f4">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-58j9-j2fj-v8f4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">https://nvd.nist.gov/vuln/detail/CVE-2023-43669</a></li>
<li><a href="https://github.com/snapview/tungstenite-rs/issues/376">https://github.com/snapview/tungstenite-rs/issues/376</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/2807">https://github.com/surrealdb/surrealdb/pull/2807</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/87859158d3750b03564613de70b5ec4ae090549d">https://github.com/surrealdb/surrealdb/commit/87859158d3750b03564613de70b5ec4ae090549d</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0065.html">https://rustsec.org/advisories/RUSTSEC-2023-0065.html</a></li>
<li><a href="https://github.com/advisories/GHSA-58j9-j2fj-v8f4">https://github.com/advisories/GHSA-58j9-j2fj-v8f4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-58j9-j2fj-v8f4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-19T20:31:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2] Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</id>
        <link href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25"/>
        <updated>2024-01-19T15:24:58.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the
generation of reset frames on the victim endpoint.
By closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,
resulting in Out Of Memory (OOM) and high CPU usage.</p>
<p>This fix is corrected in <a href="https://github.com/hyperium/h2/pull/737">hyperium/h2#737</a>, which limits the total number of
internal error resets emitted by default before the connection is closed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperium/h2/pull/737">https://github.com/hyperium/h2/pull/737</a></li>
<li><a href="https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854">https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854</a></li>
<li><a href="https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c">https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0003.html">https://rustsec.org/advisories/RUSTSEC-2024-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25">https://github.com/advisories/GHSA-8r5v-vm4m-4g25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-19T15:24:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2] Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</id>
        <link href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25"/>
        <updated>2024-01-19T15:24:58.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the
generation of reset frames on the victim endpoint.
By closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,
resulting in Out Of Memory (OOM) and high CPU usage.</p>
<p>This fix is corrected in <a href="https://github.com/hyperium/h2/pull/737">hyperium/h2#737</a>, which limits the total number of
internal error resets emitted by default before the connection is closed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperium/h2/pull/737">https://github.com/hyperium/h2/pull/737</a></li>
<li><a href="https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854">https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854</a></li>
<li><a href="https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c">https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0003.html">https://rustsec.org/advisories/RUSTSEC-2024-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25">https://github.com/advisories/GHSA-8r5v-vm4m-4g25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-19T15:24:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncontrolled Recursion in SurrealQL Parsing]]></title>
        <id>https://github.com/advisories/GHSA-6r8p-hpg7-825g</id>
        <link href="https://github.com/advisories/GHSA-6r8p-hpg7-825g"/>
        <updated>2024-01-18T15:55:19.000Z</updated>
        <content type="html"><![CDATA[<p>In some specific instances, the SurrealQL parser will attempt to recursively parse nested statements or idioms (i.e. nested <code>IF</code> and <code>RELATE</code> statements, nested basic idioms and nested access to attributes) without checking if the depth limit established by default or in the <code>SURREAL_MAX_COMPUTATION_DEPTH</code> environment variable is exceeded. This can lead to the stack overflowing when the nesting surpasses certain levels of depth.</p>
<h3 id="impact">Impact</h3>
<p>An attacker that is authorized to run queries on a SurrealDB server may be able to run a query using the affected statements and idioms with very deep nesting in order to crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6r8p-hpg7-825g">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6r8p-hpg7-825g</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3232">https://github.com/surrealdb/surrealdb/pull/3232</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/f838da248e3854e4250e5187a3a67507cb7efaaa">https://github.com/surrealdb/surrealdb/commit/f838da248e3854e4250e5187a3a67507cb7efaaa</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277</a></li>
<li><a href="https://github.com/advisories/GHSA-6r8p-hpg7-825g">https://github.com/advisories/GHSA-6r8p-hpg7-825g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6r8p-hpg7-825g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-18T15:55:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception processing HTTP Headers in SurrealDB]]></title>
        <id>https://github.com/advisories/GHSA-m24x-r6q3-2vp9</id>
        <link href="https://github.com/advisories/GHSA-m24x-r6q3-2vp9"/>
        <updated>2024-01-18T15:48:48.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>ID</code>, <code>DB</code> and <code>NS</code> headers accepted by the SurrealDB HTTP REST API would fail to parse when containing some special characters. This would cause a panic which would crash the SurrealDB server, leading to denial of service.</p>
<p>This issue only affects the SurrealDB binary; it does not affect the SurrealDB library.</p>
<h3 id="impact">Impact</h3>
<p>An unauthenticated client may issue an HTTP request to the SurrealDB HTTP REST API containing one of the affected headers with values containing special characters in order to crash the SurrealDB server. This does not require the SurrealDB server to be running with any specific capabilities other than exposing the affected interface.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit untrusted access to the SurrealDB HTTP REST API unless such access is required by the application. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#2985 (<a href="https://github.com/surrealdb/surrealdb/pull/2985/files#diff-7ad06ddbb88d77138e5daf40a0dac5443d78947acd69a284a7c2bceb61f9c5f0L83-R119">diff</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m24x-r6q3-2vp9">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m24x-r6q3-2vp9</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/2985">https://github.com/surrealdb/surrealdb/pull/2985</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/a70ddb2e2aed2453730b81781e426486247609cb">https://github.com/surrealdb/surrealdb/commit/a70ddb2e2aed2453730b81781e426486247609cb</a></li>
<li><a href="https://github.com/advisories/GHSA-m24x-r6q3-2vp9">https://github.com/advisories/GHSA-m24x-r6q3-2vp9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m24x-r6q3-2vp9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-18T15:48:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception in surrealdb]]></title>
        <id>https://github.com/advisories/GHSA-jm4v-58r5-66hj</id>
        <link href="https://github.com/advisories/GHSA-jm4v-58r5-66hj"/>
        <updated>2024-01-18T15:44:52.000Z</updated>
        <content type="html"><![CDATA[<p>Although custom parameters and functions are only supported at the database level, it was allowed to invoke those entities at the root or namespace level. This would cause a panic which would crash the SurrealDB server, leading to denial of service.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries at the root or namespace level in a SurrealDB server is able to run a query invoking a parameter or a function at that level, which will cause a panic. This will crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.1 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB to the database level. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#3297</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jm4v-58r5-66hj">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jm4v-58r5-66hj</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/618a4d1b422df0d12772532bb2c195f830b40399">https://github.com/surrealdb/surrealdb/commit/618a4d1b422df0d12772532bb2c195f830b40399</a></li>
<li><a href="https://github.com/advisories/GHSA-jm4v-58r5-66hj">https://github.com/advisories/GHSA-jm4v-58r5-66hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jm4v-58r5-66hj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-18T15:44:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tracing] use-after-free in tracing ]]></title>
        <id>https://github.com/advisories/GHSA-8f24-6m29-wm2r</id>
        <link href="https://github.com/advisories/GHSA-8f24-6m29-wm2r"/>
        <updated>2024-01-17T20:32:37.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation of the <a href="https://docs.rs/tracing/latest/tracing/instrument/struct.Instrumented.html#method.into_inner"><code>Instrumented::into_inner</code></a> method in affected versions of this crate contains undefined behavior due to incorrect use of <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a> The function creates <code>*const</code> pointers to <code>self</code>, calls <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>mem::forget(self)</code></a>, and then moves values out of those pointers using <a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read-1"><code>std::ptr::read</code></a>.</p>
<pre><code class="language-rust">// To manually destructure `Instrumented` without `Drop`, we
// move it into a ManuallyDrop and use pointers to its fields
let span: *const Span = &amp;this.span;
let inner: *const ManuallyDrop&lt;T&gt; = &amp;this.inner;
mem::forget(self);
// SAFETY: Those pointers are valid for reads, because `Drop` didn't
//         run, and properly aligned, because `Instrumented` isn't
//         `#[repr(packed)]`.
let _span = unsafe { span.read() };
let inner = unsafe { inner.read() };
</code></pre>
<p>However, the <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>mem::forget</code> documentation</a> states:</p>
<blockquote>
<p>Any resources the value manages, such as heap memory or a file handle, will
linger forever in an unreachable state. <strong>However, it does not guarantee that
pointers to this memory will remain valid.</strong></p>
</blockquote>
<p>This means that these pointers are no longer valid. This could result in a stack use-after-free if LLVM chooses to reuse <code>self</code>'s stack slot for a rebinding after the call to <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a>.</p>
<p>This undefined behavior has not been observed to cause miscompilation as of Rust 1.73.0. However, any use of this method with the affected versions of <code>tracing</code> are unsound.</p>
<p>The flaw was corrected in commit <a href="https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721">20a1762</a> (<a href="https://github.com/tokio-rs/tracing/pull/2765">PR #2765</a>) by replacing the use of <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a> with <code>std::mem::ManuallyDrop</code>, ensuring that the stack slot is not reused and the pointers remain valid when they are read. The fix is
published in <code>tracing</code> <a href="https://crates.io/crates/tracing/0.1.40">v0.1.40</a>. Affected versions have been yanked from crates.io.</p>
<p>Thanks to <a href="https://github.com/cramertj">Taylor Cramer</a> and <a href="https://github.com/manishearth">Manish Goregaokar</a> for finding and correcting
this issue!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tracing/pull/2765">https://github.com/tokio-rs/tracing/pull/2765</a></li>
<li><a href="https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721">https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721</a></li>
<li><a href="https://github.com/tokio-rs/tracing/releases/tag/tracing-0.1.40">https://github.com/tokio-rs/tracing/releases/tag/tracing-0.1.40</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0078.html">https://rustsec.org/advisories/RUSTSEC-2023-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8f24-6m29-wm2r">https://github.com/advisories/GHSA-8f24-6m29-wm2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f24-6m29-wm2r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-17T20:32:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ferris-says] ferris-says has undefined behavior when not using UTF-8]]></title>
        <id>https://github.com/advisories/GHSA-v363-rrf2-5fmj</id>
        <link href="https://github.com/advisories/GHSA-v363-rrf2-5fmj"/>
        <updated>2024-01-17T20:31:12.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions receive a <code>&amp;[u8]</code> from the caller through a safe API, and pass it directly to the unsafe <code>str::from_utf8_unchecked</code> function.</p>
<p>The behavior of <code>ferris_says::say</code> is undefined if the bytes from the caller don't happen to be valid UTF-8.</p>
<p>The flaw was corrected in <a href="https://github.com/rust-lang/ferris-says/pull/21">ferris-says#21</a> by using the safe <code>str::from_utf8</code> instead, and returning an error on invalid input. However this fix has not yet been published to crates.io as a patch version for 0.2.</p>
<p>Separately, <a href="https://github.com/rust-lang/ferris-says/pull/32">ferris-says#32</a> has introduced a different API for version 0.3 which accepts input as <code>&amp;str</code> rather than <code>&amp;[u8]</code>, so is unaffected by this bug.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/ferris-says/pull/21">https://github.com/rust-lang/ferris-says/pull/21</a></li>
<li><a href="https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a">https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0001.html">https://rustsec.org/advisories/RUSTSEC-2024-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v363-rrf2-5fmj">https://github.com/advisories/GHSA-v363-rrf2-5fmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v363-rrf2-5fmj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-17T20:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ferris-says] ferris-says has undefined behavior when not using UTF-8]]></title>
        <id>https://github.com/advisories/GHSA-v363-rrf2-5fmj</id>
        <link href="https://github.com/advisories/GHSA-v363-rrf2-5fmj"/>
        <updated>2024-01-17T20:31:12.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions receive a <code>&amp;[u8]</code> from the caller through a safe API, and pass it directly to the unsafe <code>str::from_utf8_unchecked</code> function.</p>
<p>The behavior of <code>ferris_says::say</code> is undefined if the bytes from the caller don't happen to be valid UTF-8.</p>
<p>The flaw was corrected in <a href="https://github.com/rust-lang/ferris-says/pull/21">ferris-says#21</a> by using the safe <code>str::from_utf8</code> instead, and returning an error on invalid input. However this fix has not yet been published to crates.io as a patch version for 0.2.</p>
<p>Separately, <a href="https://github.com/rust-lang/ferris-says/pull/32">ferris-says#32</a> has introduced a different API for version 0.3 which accepts input as <code>&amp;str</code> rather than <code>&amp;[u8]</code>, so is unaffected by this bug.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/ferris-says/pull/21">https://github.com/rust-lang/ferris-says/pull/21</a></li>
<li><a href="https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a">https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0001.html">https://rustsec.org/advisories/RUSTSEC-2024-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v363-rrf2-5fmj">https://github.com/advisories/GHSA-v363-rrf2-5fmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v363-rrf2-5fmj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-17T20:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anoncreds-clsignatures] CL-Signatures Revocation Scheme in Ursa has flaws that allow a holder to demonstrate non-revocation of a revoked credential]]></title>
        <id>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</id>
        <link href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4"/>
        <updated>2024-01-19T19:28:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<h3 id="details">Details</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementation has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<p>The flaw exists in all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and are fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>To exploit the flaw, a holder must update their wallet (agent) software, replacing the Hyperledger Ursa or AnonCreds CL-Signatures library that generates the proof of non-revocation. This may involve, for example, altering an iOS or Android application published in the respective app stores. A mitigation for this flaw is to use the application attestation capabilities (such as the Android "<a href="https://developer.android.com/privacy-and-security/safetynet/attestation">SafetyNet Attestation API</a>") offered by the app store vendors to (for example) "help determine whether your servers are interacting with your genuine app running on a genuine Android device."</p>
<p>The problem is created in the generation of a revocation registry, prior to issuing any credentials. As such, to eliminate the impact of the flaw, the issued credentials must be re-issued based on a correct revocation registry, generated from a correct implementation, such as <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a>.</p>
<h3 id="impact">Impact</h3>
<p>The potential impact is as follows:</p>
<ul>
<li>A verifier may verify a credential from a holder as being "not revoked" when in fact, the holder's credential has been revoked.</li>
</ul>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/applications using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>. If your application has issued revocable credentials, once the Issuer library has been upgraded, new revocation registries must be created, and credentials issued from revocation registries created with the the flawed software must be revoked and reissued.</p>
<p>A verifier can detect if a holder presents a flawed revocable credential.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21670">https://nvd.nist.gov/vuln/detail/CVE-2024-21670</a></li>
<li><a href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/advisories/GHSA-r78f-4q2q-hvv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ursa] CL-Signatures Revocation Scheme in Ursa has flaws that allow a holder to demonstrate non-revocation of a revoked credential]]></title>
        <id>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</id>
        <link href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4"/>
        <updated>2024-01-19T19:28:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<h3 id="details">Details</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementation has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<p>The flaw exists in all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and are fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>To exploit the flaw, a holder must update their wallet (agent) software, replacing the Hyperledger Ursa or AnonCreds CL-Signatures library that generates the proof of non-revocation. This may involve, for example, altering an iOS or Android application published in the respective app stores. A mitigation for this flaw is to use the application attestation capabilities (such as the Android "<a href="https://developer.android.com/privacy-and-security/safetynet/attestation">SafetyNet Attestation API</a>") offered by the app store vendors to (for example) "help determine whether your servers are interacting with your genuine app running on a genuine Android device."</p>
<p>The problem is created in the generation of a revocation registry, prior to issuing any credentials. As such, to eliminate the impact of the flaw, the issued credentials must be re-issued based on a correct revocation registry, generated from a correct implementation, such as <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a>.</p>
<h3 id="impact">Impact</h3>
<p>The potential impact is as follows:</p>
<ul>
<li>A verifier may verify a credential from a holder as being "not revoked" when in fact, the holder's credential has been revoked.</li>
</ul>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/applications using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>. If your application has issued revocable credentials, once the Issuer library has been upgraded, new revocation registries must be created, and credentials issued from revocation registries created with the the flawed software must be revoked and reissued.</p>
<p>A verifier can detect if a holder presents a flawed revocable credential.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21670">https://nvd.nist.gov/vuln/detail/CVE-2024-21670</a></li>
<li><a href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/advisories/GHSA-r78f-4q2q-hvv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anoncreds-clsignatures] Ursa CL-Signatures Revocation allows verifiers to generate unique identifiers for holders]]></title>
        <id>https://github.com/advisories/GHSA-6698-mhxx-r84g</id>
        <link href="https://github.com/advisories/GHSA-6698-mhxx-r84g"/>
        <updated>2024-01-19T19:28:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model. Notably, a malicious verifier may be able to generate a unique identifier for a holder providing a verifiable presentation that includes a Non-Revocation proof.</p>
<h3 id="details">Details</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, potentially allowing a malicious verifier to generate a unique identifier for a holder that provides a verifiable presentation that includes a Non-Revocation proof.</p>
<p>The flaws affects all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and is fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>The addressing the flaw requires updating AnonCreds holder software (such as mobile wallets) to a corrected CL-Signature implementation, such as the [AnonCreds CL Signatures Rust Crate]. Verifying presentations from corrected holders requires a updating the verifier software to a corrected CL-Signatures implementation. An updated verifier based on AnonCreds CL-Signatures can verify presentations from holders built on either the flawed Ursa CL-Signature implementation or a corrected CL-Signature implementation</p>
<p>The flaw occurs as a result of generating a verifiable presentation that includes a Non-Revocation proof from a flawed implementation.</p>
<h3 id="impact">Impact</h3>
<p>The impact of the flaw is that a malicious verifier may be able to determine a unique identifier for a holder presenting a Non-Revocation proof.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/holder applications that generate AnonCreds verifiable presentations using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g</a></li>
<li><a href="https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f">https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22192">https://nvd.nist.gov/vuln/detail/CVE-2024-22192</a></li>
<li><a href="https://github.com/advisories/GHSA-6698-mhxx-r84g">https://github.com/advisories/GHSA-6698-mhxx-r84g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6698-mhxx-r84g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ursa] Ursa CL-Signatures Revocation allows verifiers to generate unique identifiers for holders]]></title>
        <id>https://github.com/advisories/GHSA-6698-mhxx-r84g</id>
        <link href="https://github.com/advisories/GHSA-6698-mhxx-r84g"/>
        <updated>2024-01-19T19:28:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model. Notably, a malicious verifier may be able to generate a unique identifier for a holder providing a verifiable presentation that includes a Non-Revocation proof.</p>
<h3 id="details">Details</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, potentially allowing a malicious verifier to generate a unique identifier for a holder that provides a verifiable presentation that includes a Non-Revocation proof.</p>
<p>The flaws affects all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and is fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>The addressing the flaw requires updating AnonCreds holder software (such as mobile wallets) to a corrected CL-Signature implementation, such as the [AnonCreds CL Signatures Rust Crate]. Verifying presentations from corrected holders requires a updating the verifier software to a corrected CL-Signatures implementation. An updated verifier based on AnonCreds CL-Signatures can verify presentations from holders built on either the flawed Ursa CL-Signature implementation or a corrected CL-Signature implementation</p>
<p>The flaw occurs as a result of generating a verifiable presentation that includes a Non-Revocation proof from a flawed implementation.</p>
<h3 id="impact">Impact</h3>
<p>The impact of the flaw is that a malicious verifier may be able to determine a unique identifier for a holder presenting a Non-Revocation proof.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/holder applications that generate AnonCreds verifiable presentations using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g</a></li>
<li><a href="https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f">https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22192">https://nvd.nist.gov/vuln/detail/CVE-2024-22192</a></li>
<li><a href="https://github.com/advisories/GHSA-6698-mhxx-r84g">https://github.com/advisories/GHSA-6698-mhxx-r84g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6698-mhxx-r84g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:40.000Z</published>
    </entry>
</feed>