<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2022-09-16T17:12:37.851Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can corrupt arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</id>
        <link href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j"/>
        <updated>2022-09-16T17:12:31.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could corrupt arbitary files when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="arbitrary-file-corruption">Arbitrary file corruption</h2>
<p>After a package is downloaded, Cargo extracts its source code in the <code>~/.cargo</code> folder on disk, making it available to the Rust projects it builds. To record when an extraction is successfull, Cargo writes "ok" to the <code>.cargo-ok</code> file at the root of the extracted source code once it extracted all the files.</p>
<p>It was discovered that Cargo allowed packages to contain a <code>.cargo-ok</code> <em>symbolic link</em>, which Cargo would extract. Then, when Cargo attempted to write "ok" into <code>.cargo-ok</code>, it would actually replace the first two bytes of the file the symlink pointed to with <code>ok</code>. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as remote code execution is allowed by design there as well.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36113">https://nvd.nist.gov/vuln/detail/CVE-2022-36113</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a">https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b">https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b</a></li>
<li><a href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:12:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can fill the file system]]></title>
        <id>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</id>
        <link href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp"/>
        <updated>2022-09-16T17:12:05.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could fill the file system when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="disk-space-exaustion">Disk space exaustion</h2>
<p>It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a "zip bomb"), exhausting the disk space on the machine using Cargo to download the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36114">https://nvd.nist.gov/vuln/detail/CVE-2022-36114</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7">https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46">https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46</a></li>
<li><a href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:12:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axum-core] axum-core has no default limit put on request bodies]]></title>
        <id>https://github.com/advisories/GHSA-m77f-652q-wwp4</id>
        <link href="https://github.com/advisories/GHSA-m77f-652q-wwp4"/>
        <updated>2022-09-15T17:25:08.000Z</updated>
        <content type="html"><![CDATA[<p><code>&lt;bytes::Bytes as axum_core::extract::FromRequest&gt;::from_request</code> would not, by default, set a limit for the size of the request body. That meant if a malicious peer would send a very large (or infinite) body your server might run out of memory and crash.</p>
<p>This also applies to these extractors which used <code>Bytes::from_request</code> internally:</p>
<ul>
<li><code>axum::extract::Form</code></li>
<li><code>axum::extract::Json</code></li>
<li><code>String</code></li>
</ul>
<p>The fix is also in <code>axum-core</code> <code>0.3.0.rc.2</code> but <code>0.3.0.rc.1</code> <em>is</em> vulnerable.</p>
<p>Because <code>axum</code> depends on <code>axum-core</code> it is vulnerable as well. The vulnerable versions of <code>axum</code> are <code>&lt;= 0.5.15</code> and <code>0.6.0.rc.1</code>. <code>axum</code> <code>&gt;= 0.5.16</code> and <code>&gt;= 0.6.0.rc.2</code> does have the fix and are not vulnerable.</p>
<p>The patched versions will set a 2 MB limit by default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/axum/pull/1346">https://github.com/tokio-rs/axum/pull/1346</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0055.html">https://rustsec.org/advisories/RUSTSEC-2022-0055.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3212">https://nvd.nist.gov/vuln/detail/CVE-2022-3212</a></li>
<li><a href="https://github.com/advisories/GHSA-m77f-652q-wwp4">https://github.com/advisories/GHSA-m77f-652q-wwp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m77f-652q-wwp4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-15T03:25:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axum-core] axum-core has no default limit put on request bodies]]></title>
        <id>https://github.com/advisories/GHSA-m77f-652q-wwp4</id>
        <link href="https://github.com/advisories/GHSA-m77f-652q-wwp4"/>
        <updated>2022-09-15T17:25:08.000Z</updated>
        <content type="html"><![CDATA[<p><code>&lt;bytes::Bytes as axum_core::extract::FromRequest&gt;::from_request</code> would not, by default, set a limit for the size of the request body. That meant if a malicious peer would send a very large (or infinite) body your server might run out of memory and crash.</p>
<p>This also applies to these extractors which used <code>Bytes::from_request</code> internally:</p>
<ul>
<li><code>axum::extract::Form</code></li>
<li><code>axum::extract::Json</code></li>
<li><code>String</code></li>
</ul>
<p>The fix is also in <code>axum-core</code> <code>0.3.0.rc.2</code> but <code>0.3.0.rc.1</code> <em>is</em> vulnerable.</p>
<p>Because <code>axum</code> depends on <code>axum-core</code> it is vulnerable as well. The vulnerable versions of <code>axum</code> are <code>&lt;= 0.5.15</code> and <code>0.6.0.rc.1</code>. <code>axum</code> <code>&gt;= 0.5.16</code> and <code>&gt;= 0.6.0.rc.2</code> does have the fix and are not vulnerable.</p>
<p>The patched versions will set a 2 MB limit by default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/axum/pull/1346">https://github.com/tokio-rs/axum/pull/1346</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0055.html">https://rustsec.org/advisories/RUSTSEC-2022-0055.html</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3212">https://nvd.nist.gov/vuln/detail/CVE-2022-3212</a></li>
<li><a href="https://github.com/advisories/GHSA-m77f-652q-wwp4">https://github.com/advisories/GHSA-m77f-652q-wwp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m77f-652q-wwp4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-15T03:25:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parsec-service] Chrono has potential segfault issue in SPIFFE authenticator]]></title>
        <id>https://github.com/advisories/GHSA-45w3-v3g4-54pm</id>
        <link href="https://github.com/advisories/GHSA-45w3-v3g4-54pm"/>
        <updated>2022-09-12T20:44:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Several vulnerabilities have been reported in the <code>time</code> and <code>chrono</code> crates related to handling of calls to <code>localtime_r</code>. You can follow some of the discussions <a href="https://github.com/chronotope/chrono/issues/602">here</a> and <a href="https://github.com/time-rs/time/issues/293">here</a>, and the associated CVE <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a>. In our case, the issue with the dependency was flagged by our nightly CI build running <a href="https://github.com/parallaxsecond/parsec/issues/544"><code>cargo-audit</code></a>. </p>
<p>The vulnerability leads to a segfault in specific circumstances - namely, when one of a number of functions in the <code>time</code> crate is called while any other thread is setting an environment variable. Given that in the case of the Parsec service this affects the SPIFFE authenticator, Parsec service users can encounter the issue only when the JWT SVID authenticator is enabled and being used. We have not undergone any manual tracing to understand if the vulnerable methods are called anywhere in our stack, however it seems reasonable to expect that if that were to be the case, the issue would lie in JWT validation (i.e. when handling the dates found within a Json Web Token). JWT validation could thus fail, bringing down the thread in which the request happens. The rest of the threads continue to work. Since the threadpool implementation that we use <a href="https://docs.rs/threadpool/latest/threadpool/">continues replenishing the pool</a> when one thread panics, the impact on the service should be minimal.</p>
<h3 id="patches">Patches</h3>
<p>No current patches exist as the problems lie in a number of dependencies that are not under our control (see more details <a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">here</a>).</p>
<p>The issue tracking the required change in the <code>rust-spiffe</code> crate (through which the vulnerable dependencies are imported in Parsec) can be seen <a href="https://github.com/maxlambrecht/rust-spiffe/issues/17">here</a>. Once updates happen in our dependency chain that allow us to update beyond the vulnerable versions of <code>time</code> and <code>chrono</code>, a new version of the Parsec service will be tagged and released with the appropriate notifications.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The only complete workaround is to use a different type of authenticator with the Parsec service. </p>
<h3 id="references">References</h3>
<p>As quoted in the initial paragraph, you can find out more information:</p>
<ul>
<li>in the <code>chrono</code> repo issue <a href="https://github.com/chronotope/chrono/issues/602">here</a></li>
<li>in the <code>time</code> repo issue <a href="https://github.com/time-rs/time/issues/293">here</a></li>
<li>in the official CVE report <a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">here</a></li>
<li>in our tracking issue <a href="https://github.com/parallaxsecond/parsec/issues/544">here</a></li>
</ul>
<h3 id="for-more-information">For more information:</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/parallaxsecond/parsec">the Parsec service repo</a></li>
<li>Email us at <a href="mailto:cncf-parsec-maintainers@lists.cncf.io">cncf-parsec-maintainers@lists.cncf.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm">https://github.com/parallaxsecond/parsec/security/advisories/GHSA-45w3-v3g4-54pm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/chronotope/chrono/issues/602">https://github.com/chronotope/chrono/issues/602</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544">https://github.com/parallaxsecond/parsec/issues/544</a></li>
<li><a href="https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688">https://github.com/parallaxsecond/parsec/issues/544#issuecomment-1024185688</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://github.com/advisories/GHSA-45w3-v3g4-54pm">https://github.com/advisories/GHSA-45w3-v3g4-54pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45w3-v3g4-54pm</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-02-11T19:11:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[os_socketaddr] `os_socketaddr` invalidly assumes the memory layout of std::net::SocketAddr]]></title>
        <id>https://github.com/advisories/GHSA-c439-chv8-8g2j</id>
        <link href="https://github.com/advisories/GHSA-c439-chv8-8g2j"/>
        <updated>2022-09-02T22:29:41.000Z</updated>
        <content type="html"><![CDATA[<p>The <a href="https://crates.io/crates/os_socketaddr"><code>os_socketaddr</code></a> crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation.</p>
<p>These layout were <a href="https://github.com/rust-lang/rust/pull/78802">changed into idiomatic rust types</a> in nightly <code>std</code>. Starting from rustc 1.64 the affected versions of this crate will have undefined behaviour.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/a-ba/os_socketaddr/issues/3">https://github.com/a-ba/os_socketaddr/issues/3</a></li>
<li><a href="https://github.com/rust-lang/rust/pull/78802">https://github.com/rust-lang/rust/pull/78802</a></li>
<li><a href="https://github.com/a-ba/os_socketaddr/commit/1bc7f71d40de069727993a18fdada33eb0b4c94f">https://github.com/a-ba/os_socketaddr/commit/1bc7f71d40de069727993a18fdada33eb0b4c94f</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0052.html">https://rustsec.org/advisories/RUSTSEC-2022-0052.html</a></li>
<li><a href="https://github.com/advisories/GHSA-c439-chv8-8g2j">https://github.com/advisories/GHSA-c439-chv8-8g2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c439-chv8-8g2j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-02T22:29:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lz4-sys] lz4-sys vulnerable to memory corruption via issue in liblz4]]></title>
        <id>https://github.com/advisories/GHSA-9q5j-jm53-v7vr</id>
        <link href="https://github.com/advisories/GHSA-9q5j-jm53-v7vr"/>
        <updated>2022-09-01T22:24:55.000Z</updated>
        <content type="html"><![CDATA[<p>lz4-sys up to v1.9.3 bundles a version of liblz4 that is vulnerable to
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3520">CVE-2021-3520</a>.</p>
<p>Attackers could craft a payload that triggers an integer overflow upon
decompression, causing an out-of-bounds write.</p>
<p>The flaw has been corrected in version v1.9.4 of liblz4, which is included
in lz4-sys 1.9.4.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lz4/lz4/pull/972">https://github.com/lz4/lz4/pull/972</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0051.html">https://rustsec.org/advisories/RUSTSEC-2022-0051.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9q5j-jm53-v7vr">https://github.com/advisories/GHSA-9q5j-jm53-v7vr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9q5j-jm53-v7vr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-01T22:24:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opcua] opcua Vulnerable to Out-of-bounds Write]]></title>
        <id>https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</id>
        <link href="https://github.com/advisories/GHSA-hgxq-hcrm-c5pm"/>
        <updated>2022-09-01T22:23:06.000Z</updated>
        <content type="html"><![CDATA[<p>The package opcua from 0.0.0 until 0.11.0 is vulnerable to Denial of Service (DoS) via the ExtensionObjects and Variants objects, when it allows unlimited nesting levels, which could result in a stack overflow even if the message size is less than the maximum allowed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25903">https://nvd.nist.gov/vuln/detail/CVE-2022-25903</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216">https://github.com/locka99/opcua/pull/216</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216/commits/e75dada28a40c3fefc4aeee4cdc272e1b748f8dd">https://github.com/locka99/opcua/pull/216/commits/e75dada28a40c3fefc4aeee4cdc272e1b748f8dd</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988750">https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988750</a></li>
<li><a href="https://github.com/advisories/GHSA-hgxq-hcrm-c5pm">https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgxq-hcrm-c5pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opcua] Uncontrolled Resource Consumption in opcua]]></title>
        <id>https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</id>
        <link href="https://github.com/advisories/GHSA-8mx2-gqx9-rm7f"/>
        <updated>2022-08-30T20:50:36.000Z</updated>
        <content type="html"><![CDATA[<p>The package opcua from 0.0.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25888">https://nvd.nist.gov/vuln/detail/CVE-2022-25888</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216">https://github.com/locka99/opcua/pull/216</a></li>
<li><a href="https://github.com/locka99/opcua/pull/216/commits/6fb683c5fec46c6dd347824491c4d93a229da695">https://github.com/locka99/opcua/pull/216/commits/6fb683c5fec46c6dd347824491c4d93a229da695</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988751">https://security.snyk.io/vuln/SNYK-RUST-OPCUA-2988751</a></li>
<li><a href="https://github.com/advisories/GHSA-8mx2-gqx9-rm7f">https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8mx2-gqx9-rm7f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK's Reader could consume memory beyond allowed constraints]]></title>
        <id>https://github.com/advisories/GHSA-wcm8-86x6-8mv3</id>
        <link href="https://github.com/advisories/GHSA-wcm8-86x6-8mv3"/>
        <updated>2022-08-30T20:05:09.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible for a Reader to consume memory beyond the allowed constraints and thus lead to out of memory on the system. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36124">https://nvd.nist.gov/vuln/detail/CVE-2022-36124</a></li>
<li><a href="https://lists.apache.org/thread/kj429rzo1xxjgz058qqqg0y7c0p512zo">https://lists.apache.org/thread/kj429rzo1xxjgz058qqqg0y7c0p512zo</a></li>
<li><a href="https://github.com/advisories/GHSA-wcm8-86x6-8mv3">https://github.com/advisories/GHSA-wcm8-86x6-8mv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcm8-86x6-8mv3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[iana-time-zone] iana-time-zone vulnerable to use after free in MacOS / iOS implementation]]></title>
        <id>https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</id>
        <link href="https://github.com/advisories/GHSA-3fg9-hcq5-vxrc"/>
        <updated>2022-08-30T19:55:43.000Z</updated>
        <content type="html"><![CDATA[<p>In iana-time-zone v0.1.43 a use-after-free bug in the MacOS / iOS implementation was introduced.</p>
<p>The copied system time zone was released before its name was copied.
If the system time zone was changed between the call of <code>CFRelease</code> and <code>str::to_owned()</code>,
random memory would be copied.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strawlab/iana-time-zone/pull/54">https://github.com/strawlab/iana-time-zone/pull/54</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0049.html">https://rustsec.org/advisories/RUSTSEC-2022-0049.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3fg9-hcq5-vxrc">https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fg9-hcq5-vxrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T19:55:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mz-avro] mz-avro's incorrect use of `set_len` allows for un-initialized memory]]></title>
        <id>https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</id>
        <link href="https://github.com/advisories/GHSA-jwh2-vrr9-vcp2"/>
        <updated>2022-08-30T19:53:55.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate passes an uninitialized buffer to a user-provided <code>Read</code> 
implementation.</p>
<p>Arbitrary <code>Read</code> implementations can read from the uninitialized buffer (memory exposure)
and also can return incorrect number of bytes written to the buffer.
Reading from uninitialized memory produces undefined values that can quickly invoke
undefined behavior.</p>
<p>Note: there is only UB in the case where a user provides a struct whose <code>Read</code>
implementation inspects the buffer passed to <code>read_exact</code> before writing to it.
This is an unidiomatic (albeit possible) <code>Read</code> implementation.</p>
<p>See <a href="https://github.com/MaterializeInc/materialize/issues/8669">https://github.com/MaterializeInc/materialize/issues/8669</a> for details.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MaterializeInc/materialize/issues/8669">https://github.com/MaterializeInc/materialize/issues/8669</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0138.html">https://rustsec.org/advisories/RUSTSEC-2021-0138.html</a></li>
<li><a href="https://github.com/advisories/GHSA-jwh2-vrr9-vcp2">https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwh2-vrr9-vcp2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T19:53:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Incorrect parsing of EVM reversion exit reason in RPC]]></title>
        <id>https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</id>
        <link href="https://github.com/advisories/GHSA-mjvm-mhgc-q4gp"/>
        <updated>2022-08-26T19:23:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A low severity security issue was discovered affecting parsing of the RPC result of the exit reason in case of EVM reversion. In release build, this would cause the exit reason being incorrectly parsed and returned by RPC. In debug build, this would cause an overflow panic.</p>
<p>No action is needed unless you have a bridge node that needs to distinguish different reversion exit reasons and you used RPC for this.</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in <a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>PR <a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email <a href="mailto:wei@that.world">Wei Tang</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp">https://github.com/paritytech/frontier/security/advisories/GHSA-mjvm-mhgc-q4gp</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/820">https://github.com/paritytech/frontier/pull/820</a></li>
<li><a href="https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451">https://github.com/paritytech/frontier/commit/fff8cc43b7756ce3979a38fc473f38e6e24ac451</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36008">https://nvd.nist.gov/vuln/detail/CVE-2022-36008</a></li>
<li><a href="https://github.com/advisories/GHSA-mjvm-mhgc-q4gp">https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjvm-mhgc-q4gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-18T19:18:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK vulnerable to reader looping in cycle endlessly, consuming CPU]]></title>
        <id>https://github.com/advisories/GHSA-v456-chpw-6mmw</id>
        <link href="https://github.com/advisories/GHSA-v456-chpw-6mmw"/>
        <updated>2022-08-18T19:16:00.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible to provide data to be read that leads the reader to loop in cycles endlessly, consuming CPU. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35724">https://nvd.nist.gov/vuln/detail/CVE-2022-35724</a></li>
<li><a href="https://lists.apache.org/thread/771z1nwrpkn1ovmyfb2fm65mchdxgy7p">https://lists.apache.org/thread/771z1nwrpkn1ovmyfb2fm65mchdxgy7p</a></li>
<li><a href="https://github.com/advisories/GHSA-v456-chpw-6mmw">https://github.com/advisories/GHSA-v456-chpw-6mmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v456-chpw-6mmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-avro] Apache Avro Rust SDK corrupted data read can cause crash]]></title>
        <id>https://github.com/advisories/GHSA-3w5g-989p-35r8</id>
        <link href="https://github.com/advisories/GHSA-3w5g-989p-35r8"/>
        <updated>2022-08-18T19:15:30.000Z</updated>
        <content type="html"><![CDATA[<p>It is possible to crash (panic) an application by providing a corrupted data to be read. This issue affects Rust applications using Apache Avro Rust SDK prior to 0.14.0 (previously known as avro-rs). Users should update to apache-avro version 0.14.0 which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36125">https://nvd.nist.gov/vuln/detail/CVE-2022-36125</a></li>
<li><a href="https://lists.apache.org/thread/t1r5xz0pvhm4tosqopjpj6dz8zlsht07">https://lists.apache.org/thread/t1r5xz0pvhm4tosqopjpj6dz8zlsht07</a></li>
<li><a href="https://github.com/advisories/GHSA-3w5g-989p-35r8">https://github.com/advisories/GHSA-3w5g-989p-35r8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w5g-989p-35r8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-10T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oqs] oqs's Post-Quantum Signature scheme Rainbow level I parametersets broken]]></title>
        <id>https://github.com/advisories/GHSA-h864-m8vm-3xvj</id>
        <link href="https://github.com/advisories/GHSA-h864-m8vm-3xvj"/>
        <updated>2022-08-18T19:06:40.000Z</updated>
        <content type="html"><![CDATA[<p>Ward Beullens found a practical key-recovery attack against Rainbow.
The level I parametersets are removed from liboqs starting from version <code>0.7.2</code>.
Find the scientific details in <a href="https://eprint.iacr.org/2022/214">Breaking Rainbow Takes a Weekend on a Laptop</a>.</p>
<p>This means all the <code>oqs::sig::Algorithm::RainbowI*</code> variants are insecure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-quantum-safe/liboqs-rust">https://github.com/open-quantum-safe/liboqs-rust</a></li>
<li><a href="https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1">https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/KFgw5_qCXiI?pli=1</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0047.html">https://rustsec.org/advisories/RUSTSEC-2022-0047.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h864-m8vm-3xvj">https://github.com/advisories/GHSA-h864-m8vm-3xvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h864-m8vm-3xvj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-18T19:06:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oqs] oqs's Post-Quantum Key Encapsulation Mechanism SIKE broken]]></title>
        <id>https://github.com/advisories/GHSA-hrjv-pf36-jpmr</id>
        <link href="https://github.com/advisories/GHSA-hrjv-pf36-jpmr"/>
        <updated>2022-08-18T19:01:17.000Z</updated>
        <content type="html"><![CDATA[<p>Wouter Castryck and Thomas Decru presented an efficient key recovery attack on the SIDH protocol.
As a result, the secret key of SIKEp751 can be recovered in a matter of hours.
The SIKE and SIDH schemes will be removed from oqs 0.7.2.</p>
<p><a href="https://eprint.iacr.org/2022/975">An efficient key recovery attack on SIDH (preliminary version)</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/open-quantum-safe/liboqs-rust/pull/151">https://github.com/open-quantum-safe/liboqs-rust/pull/151</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0045.html">https://rustsec.org/advisories/RUSTSEC-2022-0045.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hrjv-pf36-jpmr">https://github.com/advisories/GHSA-hrjv-pf36-jpmr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrjv-pf36-jpmr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-18T19:01:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[array-macro] `array!` macro is unsound when its length is impure constant]]></title>
        <id>https://github.com/advisories/GHSA-7v4j-8wvr-v55r</id>
        <link href="https://github.com/advisories/GHSA-7v4j-8wvr-v55r"/>
        <updated>2022-08-15T03:06:41.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate did substitute the array length provided by an user at compile-time multiple times.</p>
<p>When an impure constant expression is passed as an array length (such as a result of an impure procedural macro), this can result in the initialization of an array with uninitialized types, which in turn can allow an attacker to execute arbitrary code.</p>
<p>The flaw was corrected in commit <a href="https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d">d5b63f72</a> by making sure that array length is substituted just once.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustsec/advisory-db/blob/main/crates/array-macro/RUSTSEC-2022-0017.md">https://github.com/rustsec/advisory-db/blob/main/crates/array-macro/RUSTSEC-2022-0017.md</a></li>
<li><a href="https://gitlab.com/KonradBorowski/array-macro/-/issues/5">https://gitlab.com/KonradBorowski/array-macro/-/issues/5</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0017.html">https://rustsec.org/advisories/RUSTSEC-2022-0017.html</a></li>
<li><a href="https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d">https://github.com/xfix/array-macro/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d</a></li>
<li><a href="https://github.com/advisories/GHSA-7v4j-8wvr-v55r">https://github.com/advisories/GHSA-7v4j-8wvr-v55r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v4j-8wvr-v55r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-06-16T23:40:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[heapless] Use after free in heapless]]></title>
        <id>https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</id>
        <link href="https://github.com/advisories/GHSA-qgwf-r2jj-2ccv"/>
        <updated>2022-08-13T03:06:55.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the heapless crate before 0.6.1 for Rust. The IntoIter Clone implementation clones an entire underlying Vec without considering whether it has already been partially consumed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36464">https://nvd.nist.gov/vuln/detail/CVE-2020-36464</a></li>
<li><a href="https://github.com/japaric/heapless/issues/181">https://github.com/japaric/heapless/issues/181</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0145.html">https://rustsec.org/advisories/RUSTSEC-2020-0145.html</a></li>
<li><a href="https://github.com/advisories/GHSA-qgwf-r2jj-2ccv">https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:56:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rulinalg] Data races in rulinalg]]></title>
        <id>https://github.com/advisories/GHSA-q2gj-9r85-p832</id>
        <link href="https://github.com/advisories/GHSA-q2gj-9r85-p832"/>
        <updated>2022-08-13T03:06:31.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the rulinalg crate through 2020-02-11 for Rust. There are incorrect lifetime-boundary definitions for RowMut::raw_slice and RowMut::raw_slice_mut.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35879">https://nvd.nist.gov/vuln/detail/CVE-2020-35879</a></li>
<li><a href="https://github.com/AtheMathmo/rulinalg/issues/201">https://github.com/AtheMathmo/rulinalg/issues/201</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0023.html">https://rustsec.org/advisories/RUSTSEC-2020-0023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q2gj-9r85-p832">https://github.com/advisories/GHSA-q2gj-9r85-p832</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2gj-9r85-p832</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:48:09.000Z</published>
    </entry>
</feed>