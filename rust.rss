<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-08-03T23:01:34.558Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[odoh-rs] odoh-rs's Invalid Slice Split Results in Server Panic]]></title>
        <id>https://github.com/advisories/GHSA-gpcv-p28p-fv2p</id>
        <link href="https://github.com/advisories/GHSA-gpcv-p28p-fv2p"/>
        <updated>2023-08-03T19:40:00.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was discovered in the odoh-rs rust crate that stems from faulty logic during the parsing of encrypted queries. This issue specifically occurs when processing encrypted query data received from remote clients.</p>
<h3 id="impact">Impact</h3>
<p>An attacker with knowledge of this vulnerability could craft and send specially designed encrypted queries to targeted ODOH servers running with odoh-rs. Upon successful exploitation, the server will crash abruptly, disrupting its normal operation and rendering the service temporarily unavailable.</p>
<h3 id="patches">Patches</h3>
<p>Users are encouraged to update their odoh-rs's rust crate to v1.0.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/odoh-rs/security/advisories/GHSA-gpcv-p28p-fv2p">https://github.com/cloudflare/odoh-rs/security/advisories/GHSA-gpcv-p28p-fv2p</a></li>
<li><a href="https://github.com/cloudflare/odoh-rs/commit/c1bc4ed71dcc9842b7dc1ea26f278f105074bbaa">https://github.com/cloudflare/odoh-rs/commit/c1bc4ed71dcc9842b7dc1ea26f278f105074bbaa</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3766">https://nvd.nist.gov/vuln/detail/CVE-2023-3766</a></li>
<li><a href="https://github.com/cloudflare/odoh-rs/pull/28">https://github.com/cloudflare/odoh-rs/pull/28</a></li>
<li><a href="https://github.com/advisories/GHSA-gpcv-p28p-fv2p">https://github.com/advisories/GHSA-gpcv-p28p-fv2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpcv-p28p-fv2p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-03T16:35:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo not respecting umask when extracting crate archives]]></title>
        <id>https://github.com/advisories/GHSA-j3xp-wfr4-hx87</id>
        <link href="https://github.com/advisories/GHSA-j3xp-wfr4-hx87"/>
        <updated>2023-08-03T20:53:56.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not respect the umask when extracting crate archives on UNIX-like systems. If the user downloaded a crate containing files writeable by any local user, another local user could exploit this to change the source code compiled and executed by the current user.</p>
<p>This vulnerability has been assigned CVE-2023-38497.</p>
<h2 id="overview">Overview</h2>
<p>In UNIX-like systems, each file has three sets of permissions: for the user owning the file, for the group owning the file, and for all other local users. The "<a href="https://en.wikipedia.org/wiki/Umask">umask</a>" is configured on most systems to limit those permissions during file creation, removing dangerous ones. For example, the default umask on macOS and most Linux distributions only allow the user owning a file to write to it, preventing the group owning it or other local users from doing the same.</p>
<p>When a dependency is downloaded by Cargo, its source code has to be extracted on disk to allow the Rust compiler to read as part of the build. To improve performance, this extraction only happens the first time a dependency is used, caching the pre-extracted files for future invocations.</p>
<p>Unfortunately, it was discovered that Cargo did not respect the umask during extraction, and propagated the permissions stored in the crate archive as-is. If an archive contained files writeable by any user on the system (and the system configuration didn't prevent writes through other security measures), another local user on the system could replace or tweak the source code of a dependency, potentially achieving code execution the next time the project is compiled.</p>
<h2 id="affected-versions">Affected Versions</h2>
<p>All Rust versions before 1.71.1 on UNIX-like systems (like macOS and Linux) are affected. Note that additional system-dependent security measures configured on the local system might prevent the vulnerability from being exploited.</p>
<p>Users on Windows and other non-UNIX-like systems are not affected.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend all users to update to Rust 1.71.1, which will be released later today, as it fixes the vulnerability by respecting the umask when extracting crate archives. If you build your own toolchain, patches for 1.71.0 source tarballs are <a href="https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2023-38497">available here</a>.</p>
<p>To prevent existing cached extractions from being exploitable, the Cargo binary included in Rust 1.71.1 or later will purge the caches it tries to access if they were generated by older Cargo versions.</p>
<p>If you cannot update to Rust 1.71.1, we recommend configuring your system to prevent other local users from accessing the Cargo directory, usually located in <code>~/.cargo</code>:</p>
<pre><code>chmod go= ~/.cargo
</code></pre>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>We want to thank Addison Crump for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank the members of the Rust project who helped us disclose the vulnerability: Weihang Lo for developing the fix; Eric Huss for reviewing the fix; Pietro Albini for writing this advisory; Pietro Albini, Manish Goregaokar and Josh Stone for coordinating this disclosure; Josh Triplett, Arlo Siemen, Scott Schafer, and Jacob Finkelman for advising during the disclosure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-j3xp-wfr4-hx87">https://github.com/rust-lang/cargo/security/advisories/GHSA-j3xp-wfr4-hx87</a></li>
<li><a href="https://github.com/rust-lang/cargo/pull/12443">https://github.com/rust-lang/cargo/pull/12443</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d78bbf4bde3c6b95caca7512f537c6f9721426ff">https://github.com/rust-lang/cargo/commit/d78bbf4bde3c6b95caca7512f537c6f9721426ff</a></li>
<li><a href="https://github.com/advisories/GHSA-j3xp-wfr4-hx87">https://github.com/advisories/GHSA-j3xp-wfr4-hx87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3xp-wfr4-hx87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-03T16:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twitch-tui] twitch-tui's connection is not encrypted]]></title>
        <id>https://github.com/advisories/GHSA-779w-xvpm-78jx</id>
        <link href="https://github.com/advisories/GHSA-779w-xvpm-78jx"/>
        <updated>2023-08-01T13:02:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The connection is not using TLS for communication</p>
<h3 id="details">Details</h3>
<p>In the configuration of the irc connection, <a href="https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23">you are disabling tls</a> which makes all communication to twitch irc servers unencrypted.</p>
<h3 id="poc">PoC</h3>
<p>You can verify by using tcpdump/wireshark that traffic is unencrypted.</p>
<h3 id="impact">Impact</h3>
<p>Communication can be sniffed, even auth tokens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Xithrius/twitch-tui/security/advisories/GHSA-779w-xvpm-78jx">https://github.com/Xithrius/twitch-tui/security/advisories/GHSA-779w-xvpm-78jx</a></li>
<li><a href="https://github.com/Xithrius/twitch-tui/commit/74d13ddca35f8f0816f4933c229da1fd95c0350a">https://github.com/Xithrius/twitch-tui/commit/74d13ddca35f8f0816f4933c229da1fd95c0350a</a></li>
<li><a href="https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23">https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23</a></li>
<li><a href="https://github.com/advisories/GHSA-779w-xvpm-78jx">https://github.com/advisories/GHSA-779w-xvpm-78jx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-779w-xvpm-78jx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-31T22:02:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[intaglio] Unsoundness in `intern` methods on `intaglio` symbol interners]]></title>
        <id>https://github.com/advisories/GHSA-gch5-hwqf-mxhp</id>
        <link href="https://github.com/advisories/GHSA-gch5-hwqf-mxhp"/>
        <updated>2023-07-27T19:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate have a stacked borrows violation when creating
references to interned contents. All interner types are affected.</p>
<p>The flaw was corrected in version 1.9.0 by reordering move and borrowing
operations and storing interned contents by raw pointer instead of as a <code>Box</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/artichoke/intaglio/pull/236">https://github.com/artichoke/intaglio/pull/236</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0048.html">https://rustsec.org/advisories/RUSTSEC-2023-0048.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gch5-hwqf-mxhp">https://github.com/advisories/GHSA-gch5-hwqf-mxhp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gch5-hwqf-mxhp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-27T19:29:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-quic] Potential denial of service after connection migration]]></title>
        <id>https://github.com/advisories/GHSA-rfhg-rjfp-9q8q</id>
        <link href="https://github.com/advisories/GHSA-rfhg-rjfp-9q8q"/>
        <updated>2023-07-24T22:43:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue in s2n-quic results in the endpoint shutting down due to a combination of peer-initiated connection migration and duplicate new connection ID frames being received.&nbsp;No AWS services are affected by this issue, and customers of AWS services do not need to take action.</p>
<p>Impacted versions: &lt;=v1.24.0</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in v1.25.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround. Applications using s2n-quic should upgrade their application to the most recent release of s2n-quic.</p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-quic/security/advisories/GHSA-rfhg-rjfp-9q8q">https://github.com/aws/s2n-quic/security/advisories/GHSA-rfhg-rjfp-9q8q</a></li>
<li><a href="https://github.com/aws/s2n-quic/commit/73a814240c5db6fae261a6e4ab567b0b094a35db">https://github.com/aws/s2n-quic/commit/73a814240c5db6fae261a6e4ab567b0b094a35db</a></li>
<li><a href="https://github.com/advisories/GHSA-rfhg-rjfp-9q8q">https://github.com/advisories/GHSA-rfhg-rjfp-9q8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfhg-rjfp-9q8q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-24T22:43:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[topgrade] topgrade Time-of-check Time-of-use (TOCTOU) Race Condition in remove_dir_all]]></title>
        <id>https://github.com/advisories/GHSA-f2wx-xjfw-xjv6</id>
        <link href="https://github.com/advisories/GHSA-f2wx-xjfw-xjv6"/>
        <updated>2023-07-24T20:02:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><a href="https://github.com/advisories/GHSA-mc8h-8q98-g5hr">https://github.com/advisories/GHSA-mc8h-8q98-g5hr</a>
<a href="https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead">https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead</a></p>
<p><code>tempfile</code> v0.4.26 ships with affected <code>remove_dir_all</code> v0.5.3 and so blocks my deployment of v12 to openSUSE distribution because it imposes a clean <code>cargo audit</code></p>
<p>Updating <code>tempfile</code> is warranted</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/topgrade-rs/topgrade/security/advisories/GHSA-f2wx-xjfw-xjv6">https://github.com/topgrade-rs/topgrade/security/advisories/GHSA-f2wx-xjfw-xjv6</a></li>
<li><a href="https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead">https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead</a></li>
<li><a href="https://github.com/advisories/GHSA-mc8h-8q98-g5hr">https://github.com/advisories/GHSA-mc8h-8q98-g5hr</a></li>
<li><a href="https://github.com/topgrade-rs/topgrade/releases/tag/v12.0.0">https://github.com/topgrade-rs/topgrade/releases/tag/v12.0.0</a></li>
<li><a href="https://github.com/advisories/GHSA-f2wx-xjfw-xjv6">https://github.com/advisories/GHSA-f2wx-xjfw-xjv6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2wx-xjfw-xjv6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-17T18:21:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lmdb-rs] impl `FromMdbValue` for bool is unsound]]></title>
        <id>https://github.com/advisories/GHSA-f9g6-fp84-fv92</id>
        <link href="https://github.com/advisories/GHSA-f9g6-fp84-fv92"/>
        <updated>2023-07-19T22:09:39.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation of <code>FromMdbValue</code> has several unsoundness issues. First of all, it allows to reinterpret arbitrary bytes as a bool and could make undefined behavior happen with safe function. Secondly, it allows transmuting pointer without taking memory layout into consideration. The details of reproducing the bug are available <a href="https://github.com/vhbit/lmdb-rs/issues/67">here</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vhbit/lmdb-rs/issues/67">https://github.com/vhbit/lmdb-rs/issues/67</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0047.html">https://rustsec.org/advisories/RUSTSEC-2023-0047.html</a></li>
<li><a href="https://github.com/advisories/GHSA-f9g6-fp84-fv92">https://github.com/advisories/GHSA-f9g6-fp84-fv92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f9g6-fp84-fv92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-19T22:09:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[routinator] Routinator infinite loop vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m3x9-623g-35c4</id>
        <link href="https://github.com/advisories/GHSA-m3x9-623g-35c4"/>
        <updated>2023-07-13T17:03:14.000Z</updated>
        <content type="html"><![CDATA[<p>NLnet Labs Routinator prior to 0.10.2 happily processes a chain of RRDP repositories of infinite length causing it to never finish a validation run. In RPKI, a CA can choose the RRDP repository it wishes to publish its data in. By continuously generating a new child CA that only consists of another CA using a different RRDP repository, a malicious CA can create a chain of CAs of de-facto infinite length. Routinator prior to version 0.10.2 did not contain a limit on the length of such a chain and will therefore continue to process this chain forever. As a result, the validation run will never finish, leading to Routinator continuing to serve the old data set or, if in the initial validation run directly after starting, never serve any data at all.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43172">https://nvd.nist.gov/vuln/detail/CVE-2021-43172</a></li>
<li><a href="https://www.nlnetlabs.nl/downloads/routinator/CVE-2021-43172_CVE-2021-43173_CVE-2021-43174.txt">https://www.nlnetlabs.nl/downloads/routinator/CVE-2021-43172_CVE-2021-43173_CVE-2021-43174.txt</a></li>
<li><a href="https://github.com/NLnetLabs/routinator/pull/665/commits/2f1c47378e3439cb89e084cdad6b759bbc8a72b8">https://github.com/NLnetLabs/routinator/pull/665/commits/2f1c47378e3439cb89e084cdad6b759bbc8a72b8</a></li>
<li><a href="https://github.com/advisories/GHSA-m3x9-623g-35c4">https://github.com/advisories/GHSA-m3x9-623g-35c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m3x9-623g-35c4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T19:20:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xcb] Unchecked Return Value in xcb]]></title>
        <id>https://github.com/advisories/GHSA-3288-cwgw-ch86</id>
        <link href="https://github.com/advisories/GHSA-3288-cwgw-ch86"/>
        <updated>2023-07-10T19:36:08.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because xcb::xproto::GetAtomNameReply::name() calls std::str::from_utf8_unchecked() on unvalidated bytes from an X server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26955">https://nvd.nist.gov/vuln/detail/CVE-2021-26955</a></li>
<li><a href="https://github.com/RustSec/advisory-db/issues/653">https://github.com/RustSec/advisory-db/issues/653</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0019.html">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3288-cwgw-ch86">https://github.com/advisories/GHSA-3288-cwgw-ch86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3288-cwgw-ch86</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:53:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s2n-quic] s2n-quic potential denial of service vulnerability when receiving empty UDP packets]]></title>
        <id>https://github.com/advisories/GHSA-hxq4-mx37-fqvg</id>
        <link href="https://github.com/advisories/GHSA-hxq4-mx37-fqvg"/>
        <updated>2023-06-30T22:11:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue in s2n-quic results in the endpoint shutting down after receiving an empty UDP packet on a connection. </p>
<p>No AWS services are affected by this issue and customers of AWS services do not need to take action. Applications using s2n-quic should upgrade their application to the most recent release of s2n-quic.</p>
<p>Impacted version: s2n-quic v1.22.0.</p>
<h3 id="patches">Patches</h3>
<p>The patch is included in s2n-quic <a href="https://github.com/aws/s2n-quic/releases/tag/v1.23.0">v1.23.0</a>.</p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aws/s2n-quic/security/advisories/GHSA-hxq4-mx37-fqvg">https://github.com/aws/s2n-quic/security/advisories/GHSA-hxq4-mx37-fqvg</a></li>
<li><a href="https://github.com/aws/s2n-quic/commit/4b1d417e9de7eafaf5350553c5fcb9264dfa32f5">https://github.com/aws/s2n-quic/commit/4b1d417e9de7eafaf5350553c5fcb9264dfa32f5</a></li>
<li><a href="https://github.com/aws/s2n-quic/releases/tag/v1.23.0">https://github.com/aws/s2n-quic/releases/tag/v1.23.0</a></li>
<li><a href="https://github.com/advisories/GHSA-hxq4-mx37-fqvg">https://github.com/advisories/GHSA-hxq4-mx37-fqvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxq4-mx37-fqvg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-30T22:11:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[atty] atty potential unaligned read]]></title>
        <id>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</id>
        <link href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr"/>
        <updated>2023-07-10T19:11:44.000Z</updated>
        <content type="html"><![CDATA[<p>On windows, <code>atty</code> dereferences a potentially unaligned pointer.</p>
<p>In practice however, the pointer won't be unaligned unless a custom global allocator is used.</p>
<p>In particular, the <code>System</code> allocator on windows uses <code>HeapAlloc</code>, which guarantees a large enough alignment.</p>
<h1 id="atty-is-unmaintained">atty is Unmaintained</h1>
<p>A Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.</p>
<p>Last release of <code>atty</code> was almost 3 years ago.</p>
<h2 id="possible-alternatives">Possible Alternative(s)</h2>
<p>The below list has not been vetted in any way and may or may not contain alternatives;</p>
<ul>
<li><a href="https://doc.rust-lang.org/stable/std/io/trait.IsTerminal.html">std::io::IsTerminal</a> - Stable since Rust 1.70.0\n </li>
<li><a href="https://crates.io/crates/is-terminal">is-terminal</a> - Standalone crate supporting Rust older than 1.70.0"</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/softprops/atty/issues/50">https://github.com/softprops/atty/issues/50</a></li>
<li><a href="https://github.com/softprops/atty/pull/51">https://github.com/softprops/atty/pull/51</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0145.html">https://rustsec.org/advisories/RUSTSEC-2021-0145.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g98v-hv3f-hcfr">https://github.com/advisories/GHSA-g98v-hv3f-hcfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g98v-hv3f-hcfr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-30T20:21:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cyfs-base] cyfs-base vulnerable to misaligned pointer dereference in `ChunkId::new`]]></title>
        <id>https://github.com/advisories/GHSA-g753-ghr7-q33w</id>
        <link href="https://github.com/advisories/GHSA-g753-ghr7-q33w"/>
        <updated>2023-06-22T20:01:57.000Z</updated>
        <content type="html"><![CDATA[<p>The function <code>ChunkId::new</code> creates a misaligned pointer by casting mutable pointer of <code>u8</code> slice which has alignment 1 to the mutable pointer of <code>u32</code> which has alignment 4, and dereference the misaligned pointer leading UB, which should not be allowed in safe function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/buckyos/CYFS/issues/275">https://github.com/buckyos/CYFS/issues/275</a></li>
<li><a href="https://github.com/buckyos/CYFS/commit/e030188895096fd8d91d48753877729f4d37dd24">https://github.com/buckyos/CYFS/commit/e030188895096fd8d91d48753877729f4d37dd24</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0046.html">https://rustsec.org/advisories/RUSTSEC-2023-0046.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g753-ghr7-q33w">https://github.com/advisories/GHSA-g753-ghr7-q33w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g753-ghr7-q33w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-22T20:01:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2023-06-22T05:03:26.000Z</updated>
        <content type="html"><![CDATA[<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>
<li><a href="https://github.com/WebAssembly/reference-types">https://github.com/WebAssembly/reference-types</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0016.html">https://rustsec.org/advisories/RUSTSEC-2022-0016.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasmtime] Use after free in Wasmtime]]></title>
        <id>https://github.com/advisories/GHSA-gwc9-348x-qwv2</id>
        <link href="https://github.com/advisories/GHSA-gwc9-348x-qwv2"/>
        <updated>2023-06-22T05:03:26.000Z</updated>
        <content type="html"><![CDATA[<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>
<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>
<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24791">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>
<li><a href="https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>
<li><a href="https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>
<li><a href="https://github.com/WebAssembly/reference-types">https://github.com/WebAssembly/reference-types</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0016.html">https://rustsec.org/advisories/RUSTSEC-2022-0016.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gwc9-348x-qwv2">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gwc9-348x-qwv2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-04-01T13:36:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tremor-script] Use After Free in tremor-script]]></title>
        <id>https://github.com/advisories/GHSA-q2x5-6q7q-r872</id>
        <link href="https://github.com/advisories/GHSA-q2x5-6q7q-r872"/>
        <updated>2023-06-22T05:03:25.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the tremor-script crate before 0.11.6 for Rust. A patch operation may result in a use-after-free.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45701">https://nvd.nist.gov/vuln/detail/CVE-2021-45701</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tremor-script/RUSTSEC-2021-0111.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tremor-script/RUSTSEC-2021-0111.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0111.html">https://rustsec.org/advisories/RUSTSEC-2021-0111.html</a></li>
<li><a href="https://github.com/tremor-rs/tremor-runtime/pull/1217">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></li>
<li><a href="https://github.com/advisories/GHSA-q2x5-6q7q-r872">https://github.com/advisories/GHSA-q2x5-6q7q-r872</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2x5-6q7q-r872</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:10:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slock] Data races in slock]]></title>
        <id>https://github.com/advisories/GHSA-mc36-5m36-hjh5</id>
        <link href="https://github.com/advisories/GHSA-mc36-5m36-hjh5"/>
        <updated>2023-06-22T05:03:19.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the slock crate through 2020-11-17 for Rust. Slock unconditionally implements Send and Sync.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36455">https://nvd.nist.gov/vuln/detail/CVE-2020-36455</a></li>
<li><a href="https://github.com/BrokenLamp/slock-rs/issues/2">https://github.com/BrokenLamp/slock-rs/issues/2</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0135.html">https://rustsec.org/advisories/RUSTSEC-2020-0135.html</a></li>
<li><a href="https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6">https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6</a></li>
<li><a href="https://github.com/advisories/GHSA-mc36-5m36-hjh5">https://github.com/advisories/GHSA-mc36-5m36-hjh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mc36-5m36-hjh5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-25T20:58:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rusqlite] Use after free in rusqlite]]></title>
        <id>https://github.com/advisories/GHSA-8h4j-vm3r-vcq3</id>
        <link href="https://github.com/advisories/GHSA-8h4j-vm3r-vcq3"/>
        <updated>2023-06-22T05:03:18.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via an Auxdata API use-after-free.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35870">https://nvd.nist.gov/vuln/detail/CVE-2020-35870</a></li>
<li><a href="https://github.com/rusqlite/rusqlite/commit/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3">https://github.com/rusqlite/rusqlite/commit/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3</a></li>
<li><a href="https://github.com/rusqlite/rusqlite/releases/tag/0.23.0">https://github.com/rusqlite/rusqlite/releases/tag/0.23.0</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0014.html">https://rustsec.org/advisories/RUSTSEC-2020-0014.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8h4j-vm3r-vcq3">https://github.com/advisories/GHSA-8h4j-vm3r-vcq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h4j-vm3r-vcq3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:47:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[futures-util] Improper `Sync` implementation on `FuturesUnordered` in futures-utils can cause data corruption]]></title>
        <id>https://github.com/advisories/GHSA-5r9g-j7jj-hw6c</id>
        <link href="https://github.com/advisories/GHSA-5r9g-j7jj-hw6c"/>
        <updated>2023-06-22T05:03:12.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the futures-util crate before 0.3.2 for Rust. FuturesUnordered can lead to data corruption because Sync is mishandled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-35908">https://nvd.nist.gov/vuln/detail/CVE-2020-35908</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2020-0062.html">https://rustsec.org/advisories/RUSTSEC-2020-0062.html</a></li>
<li><a href="https://github.com/rust-lang/futures-rs/issues/2050">https://github.com/rust-lang/futures-rs/issues/2050</a></li>
<li><a href="https://github.com/advisories/GHSA-5r9g-j7jj-hw6c">https://github.com/advisories/GHSA-5r9g-j7jj-hw6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r9g-j7jj-hw6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:37:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[chttp] Use-after-free in chttp]]></title>
        <id>https://github.com/advisories/GHSA-5rrv-m36h-qwf8</id>
        <link href="https://github.com/advisories/GHSA-5rrv-m36h-qwf8"/>
        <updated>2023-06-22T05:03:03.000Z</updated>
        <content type="html"><![CDATA[<p>The From implementation for Vec was not properly implemented, returning a vector backed by freed memory. This could lead to memory corruption or be exploited to cause undefined behavior.</p>
<p>A fix was published in version 0.1.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16140">https://nvd.nist.gov/vuln/detail/CVE-2019-16140</a></li>
<li><a href="https://github.com/sagebind/isahc/issues/2">https://github.com/sagebind/isahc/issues/2</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2019-0016.html">https://rustsec.org/advisories/RUSTSEC-2019-0016.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5rrv-m36h-qwf8">https://github.com/advisories/GHSA-5rrv-m36h-qwf8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5rrv-m36h-qwf8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-08-25T20:44:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl] `openssl` `X509VerifyParamRef::set_host` buffer over-read]]></title>
        <id>https://github.com/advisories/GHSA-xcf7-rvmh-g6q4</id>
        <link href="https://github.com/advisories/GHSA-xcf7-rvmh-g6q4"/>
        <updated>2023-06-21T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<p>When this function was passed an empty string, <code>openssl</code> would attempt to call <code>strlen</code> on it, reading arbitrary memory until it reached a NUL byte.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sfackler/rust-openssl/issues/1965">https://github.com/sfackler/rust-openssl/issues/1965</a></li>
<li><a href="https://github.com/sfackler/rust-openssl/pull/1968">https://github.com/sfackler/rust-openssl/pull/1968</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0044.html">https://rustsec.org/advisories/RUSTSEC-2023-0044.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xcf7-rvmh-g6q4">https://github.com/advisories/GHSA-xcf7-rvmh-g6q4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcf7-rvmh-g6q4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-21T22:07:52.000Z</published>
    </entry>
</feed>