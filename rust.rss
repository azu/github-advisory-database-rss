<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2023-08-21T19:01:22.438Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[wasm3] WASM3 segmentation fault]]></title>
        <id>https://github.com/advisories/GHSA-gq4p-4hxv-5rg9</id>
        <link href="https://github.com/advisories/GHSA-gq4p-4hxv-5rg9"/>
        <updated>2023-08-18T22:45:48.000Z</updated>
        <content type="html"><![CDATA[<p>WASM3 v0.5.0 was discovered to contain a segmentation fault via the component <code>Compile_Memory_CopyFill</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34529">https://nvd.nist.gov/vuln/detail/CVE-2022-34529</a></li>
<li><a href="https://github.com/wasm3/wasm3/issues/337">https://github.com/wasm3/wasm3/issues/337</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pywasm3/PYSEC-2022-43057.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pywasm3/PYSEC-2022-43057.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-gq4p-4hxv-5rg9">https://github.com/advisories/GHSA-gq4p-4hxv-5rg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gq4p-4hxv-5rg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-07-28T00:00:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] X.509 Email Address 4-byte Buffer Overflow]]></title>
        <id>https://github.com/advisories/GHSA-8rwr-x37p-mx23</id>
        <link href="https://github.com/advisories/GHSA-8rwr-x37p-mx23"/>
        <updated>2023-08-17T05:02:52.000Z</updated>
        <content type="html"><![CDATA[<p>A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs
after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to
continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address
to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or
potentially remote code execution.</p>
<p>Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler.</p>
<p>Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible.</p>
<p>In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rustsec/advisory-db/pull/1452">https://github.com/rustsec/advisory-db/pull/1452</a></li>
<li><a href="https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3">https://github.com/alexcrichton/openssl-src-rs/commit/4a31c14f31e1a08c18893a37e304dd1dd4b7daa3</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0064.html">https://rustsec.org/advisories/RUSTSEC-2022-0064.html</a></li>
<li><a href="https://www.openssl.org/news/secadv/20221101.txt">https://www.openssl.org/news/secadv/20221101.txt</a></li>
<li><a href="https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://github.com/openssl/openssl/commit/fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3602">https://nvd.nist.gov/vuln/detail/CVE-2022-3602</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023">https://psirt.global.sonicwall.com/vuln-detail/SNWLID-2022-0023</a></li>
<li><a href="https://security.gentoo.org/glsa/202211-01">https://security.gentoo.org/glsa/202211-01</a></li>
<li><a href="https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a">https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-openssl-W9sdCc2a</a></li>
<li><a href="http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html">http://packetstormsecurity.com/files/169687/OpenSSL-Security-Advisory-20221101.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/15">http://www.openwall.com/lists/oss-security/2022/11/01/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/16">http://www.openwall.com/lists/oss-security/2022/11/01/16</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/17">http://www.openwall.com/lists/oss-security/2022/11/01/17</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/18">http://www.openwall.com/lists/oss-security/2022/11/01/18</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/19">http://www.openwall.com/lists/oss-security/2022/11/01/19</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/20">http://www.openwall.com/lists/oss-security/2022/11/01/20</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/21">http://www.openwall.com/lists/oss-security/2022/11/01/21</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/01/24">http://www.openwall.com/lists/oss-security/2022/11/01/24</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/1">http://www.openwall.com/lists/oss-security/2022/11/02/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/10">http://www.openwall.com/lists/oss-security/2022/11/02/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/11">http://www.openwall.com/lists/oss-security/2022/11/02/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/12">http://www.openwall.com/lists/oss-security/2022/11/02/12</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/2">http://www.openwall.com/lists/oss-security/2022/11/02/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/3">http://www.openwall.com/lists/oss-security/2022/11/02/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/5">http://www.openwall.com/lists/oss-security/2022/11/02/5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/6">http://www.openwall.com/lists/oss-security/2022/11/02/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/7">http://www.openwall.com/lists/oss-security/2022/11/02/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/9">http://www.openwall.com/lists/oss-security/2022/11/02/9</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221102-0001/">https://security.netapp.com/advisory/ntap-20221102-0001/</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/794340">https://www.kb.cert.org/vuls/id/794340</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/13">http://www.openwall.com/lists/oss-security/2022/11/02/13</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/14">http://www.openwall.com/lists/oss-security/2022/11/02/14</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/02/15">http://www.openwall.com/lists/oss-security/2022/11/02/15</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/1">http://www.openwall.com/lists/oss-security/2022/11/03/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/2">http://www.openwall.com/lists/oss-security/2022/11/03/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/3">http://www.openwall.com/lists/oss-security/2022/11/03/3</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/5">http://www.openwall.com/lists/oss-security/2022/11/03/5</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=fe3b639dc19b325846f4f6801f2f4604f56e3de3">https://git.openssl.org/gitweb/?p=openssl.git%3Ba=commitdiff%3Bh=fe3b639dc19b325846f4f6801f2f4604f56e3de3</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/63YRPWPUSX3MBHNPIEJZDKQT6YA7UF6S/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/">https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/DWP23EZYOBDJQP7HP4YU7W2ABU2YDITS/</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/10">http://www.openwall.com/lists/oss-security/2022/11/03/10</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/11">http://www.openwall.com/lists/oss-security/2022/11/03/11</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/6">http://www.openwall.com/lists/oss-security/2022/11/03/6</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/7">http://www.openwall.com/lists/oss-security/2022/11/03/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/11/03/9">http://www.openwall.com/lists/oss-security/2022/11/03/9</a></li>
<li><a href="https://github.com/advisories/GHSA-8rwr-x37p-mx23">https://github.com/advisories/GHSA-8rwr-x37p-mx23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rwr-x37p-mx23</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-01T17:45:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sha2] Incorrect hash in sha2]]></title>
        <id>https://github.com/advisories/GHSA-fc7x-2cmc-8j2g</id>
        <link href="https://github.com/advisories/GHSA-fc7x-2cmc-8j2g"/>
        <updated>2023-08-17T05:02:41.000Z</updated>
        <content type="html"><![CDATA[<p>The v0.9.7 release of the sha2 crate introduced a new AVX2-accelerated backend which was automatically enabled for all x86/x86_64 CPUs where AVX2 support was autodetected at runtime.</p>
<p>This backend was buggy and would miscompute results for long messages (i.e. messages spanning multiple SHA blocks).</p>
<p>The crate has since been yanked, but any users who upgraded to v0.9.7 should immediately upgrade to v0.9.8 and recompute any hashes which were previously computed by v0.9.7.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45696">https://nvd.nist.gov/vuln/detail/CVE-2021-45696</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/sha2/RUSTSEC-2021-0100.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/sha2/RUSTSEC-2021-0100.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0100.html">https://rustsec.org/advisories/RUSTSEC-2021-0100.html</a></li>
<li><a href="https://github.com/RustCrypto/hashes/pull/314">https://github.com/RustCrypto/hashes/pull/314</a></li>
<li><a href="https://github.com/advisories/GHSA-fc7x-2cmc-8j2g">https://github.com/advisories/GHSA-fc7x-2cmc-8j2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fc7x-2cmc-8j2g</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:10:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Simple-Wayland-HotKey-Daemon] Unsafe parsing in SWHKD]]></title>
        <id>https://github.com/advisories/GHSA-h6xw-mghq-7523</id>
        <link href="https://github.com/advisories/GHSA-h6xw-mghq-7523"/>
        <updated>2023-08-17T05:02:30.000Z</updated>
        <content type="html"><![CDATA[<p>SWHKD 1.1.5 allows unsafe parsing via the -c option. An information leak might occur but there is a simple denial of service (memory exhaustion) upon an attempt to parse a large or infinite file (such as a block or character device).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-27819">https://nvd.nist.gov/vuln/detail/CVE-2022-27819</a></li>
<li><a href="https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021">https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases">https://github.com/waycrate/swhkd/releases</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/04/14/1">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>
<li><a href="https://github.com/waycrate/swhkd/releases/tag/1.2.0">https://github.com/waycrate/swhkd/releases/tag/1.2.0</a></li>
<li><a href="https://github.com/advisories/GHSA-h6xw-mghq-7523">https://github.com/advisories/GHSA-h6xw-mghq-7523</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6xw-mghq-7523</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-04-08T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wasm3] WASM3 Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-crf8-h2wq-2h9x</id>
        <link href="https://github.com/advisories/GHSA-crf8-h2wq-2h9x"/>
        <updated>2023-08-17T15:34:22.000Z</updated>
        <content type="html"><![CDATA[<p>WASM3 v0.5.0 was discovered to contain a segmentation fault via the component <code>op_Select_i32_srs</code> in <code>wasm3/source/m3_exec.h</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39974">https://nvd.nist.gov/vuln/detail/CVE-2022-39974</a></li>
<li><a href="https://github.com/wasm3/wasm3/issues/379">https://github.com/wasm3/wasm3/issues/379</a></li>
<li><a href="https://github.com/wasm3/wasm3/issues/344">https://github.com/wasm3/wasm3/issues/344</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/pywasm3/PYSEC-2022-43058.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/pywasm3/PYSEC-2022-43058.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-crf8-h2wq-2h9x">https://github.com/advisories/GHSA-crf8-h2wq-2h9x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-crf8-h2wq-2h9x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-21T00:00:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[galois_2p8] Buffer Overflow in galois_2p8]]></title>
        <id>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</id>
        <link href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8"/>
        <updated>2023-08-17T05:02:30.000Z</updated>
        <content type="html"><![CDATA[<p>In galois_2p8 before 0.1.2, PrimitivePolynomialField::new has an off-by-one buffer overflow for a vector.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24988">https://nvd.nist.gov/vuln/detail/CVE-2022-24988</a></li>
<li><a href="https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md">https://github.com/djsweet/galois_2p8/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-9p8q-j6q5-mjw8">https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p8q-j6q5-mjw8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-15T00:02:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openssl-src] Resource leakage when decoding certificates and keys]]></title>
        <id>https://github.com/advisories/GHSA-g323-fr93-4j3c</id>
        <link href="https://github.com/advisories/GHSA-g323-fr93-4j3c"/>
        <updated>2023-08-17T05:02:27.000Z</updated>
        <content type="html"><![CDATA[<p>The OPENSSL_LH_flush() function, which empties a hash table, contains a bug that breaks reuse of the memory occuppied by the removed hash table entries. This function is used when decoding certificates or keys. If a long lived process periodically decodes certificates or keys its memory usage will expand without bounds and the process might be terminated by the operating system causing a denial of service. Also traversing the empty hash table entries will take increasingly more time. Typically such long lived processes might be TLS clients or TLS servers configured to accept client certificate authentication. The function was added in the OpenSSL 3.0 version thus older releases are not affected by the issue. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1473">https://nvd.nist.gov/vuln/detail/CVE-2022-1473</a></li>
<li><a href="https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1</a></li>
<li><a href="https://www.openssl.org/news/secadv/20220503.txt">https://www.openssl.org/news/secadv/20220503.txt</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220602-0009/">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0025.html">https://rustsec.org/advisories/RUSTSEC-2022-0025.html</a></li>
<li><a href="https://github.com/github/advisory-database/issues/405">https://github.com/github/advisory-database/issues/405</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-02">https://security.gentoo.org/glsa/202210-02</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-953464.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-953464.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-g323-fr93-4j3c">https://github.com/advisories/GHSA-g323-fr93-4j3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g323-fr93-4j3c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-04T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crypto2] Use of a Broken or Risky Cryptographic Algorithm in crypto2]]></title>
        <id>https://github.com/advisories/GHSA-9hfg-pxr6-q4vp</id>
        <link href="https://github.com/advisories/GHSA-9hfg-pxr6-q4vp"/>
        <updated>2023-08-17T05:02:22.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation does not enforce alignment requirements on input slices while incorrectly assuming 4-byte alignment through an unsafe call to std::slice::from_raw_parts_mut, which breaks the contract and introduces undefined behavior.</p>
<p>This affects Chacha20 encryption and decryption in crypto2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45709">https://nvd.nist.gov/vuln/detail/CVE-2021-45709</a></li>
<li><a href="https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/crypto2/RUSTSEC-2021-0121.md">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/crypto2/RUSTSEC-2021-0121.md</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2021-0121.html">https://rustsec.org/advisories/RUSTSEC-2021-0121.html</a></li>
<li><a href="https://github.com/shadowsocks/crypto2/issues/27">https://github.com/shadowsocks/crypto2/issues/27</a></li>
<li><a href="https://github.com/advisories/GHSA-9hfg-pxr6-q4vp">https://github.com/advisories/GHSA-9hfg-pxr6-q4vp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hfg-pxr6-q4vp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-01-06T22:04:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zola] zola Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xvv9-5j67-3rpq</id>
        <link href="https://github.com/advisories/GHSA-xvv9-5j67-3rpq"/>
        <updated>2023-08-14T21:33:09.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in zola 0.13.0 through 0.17.2. The custom implementation of a web server, available via the "zola serve" command, allows directory traversal. The <code>handle_request</code> function, used by the server to process HTTP requests, does not account for sequences of special path control characters (<code>../</code>) in the URL when serving a file, which allows one to escape the webroot of the server and read arbitrary files from the filesystem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40274">https://nvd.nist.gov/vuln/detail/CVE-2023-40274</a></li>
<li><a href="https://github.com/getzola/zola/issues/2257">https://github.com/getzola/zola/issues/2257</a></li>
<li><a href="https://github.com/getzola/zola/pull/2258">https://github.com/getzola/zola/pull/2258</a></li>
<li><a href="https://github.com/advisories/GHSA-xvv9-5j67-3rpq">https://github.com/advisories/GHSA-xvv9-5j67-3rpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvv9-5j67-3rpq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-14T03:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ed25519-dalek] `ed25519-dalek` Double Public Key Signing Function Oracle Attack]]></title>
        <id>https://github.com/advisories/GHSA-w5vr-6qhr-36cc</id>
        <link href="https://github.com/advisories/GHSA-w5vr-6qhr-36cc"/>
        <updated>2023-08-14T21:10:29.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>ed25519-dalek</code> prior to v2.0 model private and public keys as separate types which can be assembled into a <code>Keypair</code>, and also provide APIs for serializing and deserializing 64-byte private/public keypairs.</p>
<p>Such APIs and serializations are inherently unsafe as the public key is one of the inputs used in the deterministic computation of the <code>S</code> part of the signature, but not in the <code>R</code> value. An adversary could somehow use the signing function as an oracle that allows arbitrary public keys as input can obtain two signatures for the same message sharing the same <code>R</code> and only differ on the <code>S</code> part.</p>
<p>Unfortunately, when this happens, one can easily extract the private key.</p>
<p>Revised public APIs in v2.0 of <code>ed25519-dalek</code> do NOT allow a decoupled private/public keypair as signing input, except as part of specially labeled "hazmat" APIs which are clearly labeled as being dangerous if misused.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/MystenLabs/ed25519-unsafe-libs">https://github.com/MystenLabs/ed25519-unsafe-libs</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2022-0093.html">https://rustsec.org/advisories/RUSTSEC-2022-0093.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w5vr-6qhr-36cc">https://github.com/advisories/GHSA-w5vr-6qhr-36cc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5vr-6qhr-36cc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-14T21:10:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can fill the file system]]></title>
        <id>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</id>
        <link href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp"/>
        <updated>2023-08-14T16:17:47.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could fill the file system when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="disk-space-exaustion">Disk space exaustion</h2>
<p>It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a "zip bomb"), exhausting the disk space on the machine using Cargo to download the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36114">https://nvd.nist.gov/vuln/detail/CVE-2022-36114</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7">https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46">https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-09">https://security.gentoo.org/glsa/202210-09</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/2b68d3c07a4a056264dc006ecb9f1354a0679cd3">https://github.com/rust-lang/cargo/commit/2b68d3c07a4a056264dc006ecb9f1354a0679cd3</a></li>
<li><a href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:12:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can fill the file system]]></title>
        <id>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</id>
        <link href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp"/>
        <updated>2023-08-14T16:17:47.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could fill the file system when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="disk-space-exaustion">Disk space exaustion</h2>
<p>It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a "zip bomb"), exhausting the disk space on the machine using Cargo to download the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/rust-lang/cargo/security/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36114">https://nvd.nist.gov/vuln/detail/CVE-2022-36114</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7">https://github.com/rust-lang/cargo/commit/d1f9553c825f6d7481453be8d58d0e7f117988a7</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46">https://github.com/rust-lang/cargo/commit/d87d57dbbda61754f4fab0f329a7ac520e062c46</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-09">https://security.gentoo.org/glsa/202210-09</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/2b68d3c07a4a056264dc006ecb9f1354a0679cd3">https://github.com/rust-lang/cargo/commit/2b68d3c07a4a056264dc006ecb9f1354a0679cd3</a></li>
<li><a href="https://github.com/advisories/GHSA-2hvr-h6gw-qrxp">https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2hvr-h6gw-qrxp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:12:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can corrupt arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</id>
        <link href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j"/>
        <updated>2023-08-14T16:16:15.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could corrupt arbitary files when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="arbitrary-file-corruption">Arbitrary file corruption</h2>
<p>After a package is downloaded, Cargo extracts its source code in the <code>~/.cargo</code> folder on disk, making it available to the Rust projects it builds. To record when an extraction is successfull, Cargo writes "ok" to the <code>.cargo-ok</code> file at the root of the extracted source code once it extracted all the files.</p>
<p>It was discovered that Cargo allowed packages to contain a <code>.cargo-ok</code> <em>symbolic link</em>, which Cargo would extract. Then, when Cargo attempted to write "ok" into <code>.cargo-ok</code>, it would actually replace the first two bytes of the file the symlink pointed to with <code>ok</code>. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as remote code execution is allowed by design there as well.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36113">https://nvd.nist.gov/vuln/detail/CVE-2022-36113</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a">https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b">https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-09">https://security.gentoo.org/glsa/202210-09</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/15f1e4b0bf4b4fc20369e0a85d9b77957c4dd52a">https://github.com/rust-lang/cargo/commit/15f1e4b0bf4b4fc20369e0a85d9b77957c4dd52a</a></li>
<li><a href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-09-16T17:12:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo extracting malicious crates can corrupt arbitrary files]]></title>
        <id>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</id>
        <link href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j"/>
        <updated>2023-08-14T16:16:15.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not prevent extracting some malformed packages downloaded from alternate registries. An attacker able to upload packages to an alternate registry could corrupt arbitary files when Cargo downloaded the package.</p>
<p>The severity of this vulnerability is "low" for users of alternate registries. Users relying on crates.io are not affected.</p>
<p>Note that <strong>by design</strong> Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros.</p>
<h2 id="arbitrary-file-corruption">Arbitrary file corruption</h2>
<p>After a package is downloaded, Cargo extracts its source code in the <code>~/.cargo</code> folder on disk, making it available to the Rust projects it builds. To record when an extraction is successfull, Cargo writes "ok" to the <code>.cargo-ok</code> file at the root of the extracted source code once it extracted all the files.</p>
<p>It was discovered that Cargo allowed packages to contain a <code>.cargo-ok</code> <em>symbolic link</em>, which Cargo would extract. Then, when Cargo attempted to write "ok" into <code>.cargo-ok</code>, it would actually replace the first two bytes of the file the symlink pointed to with <code>ok</code>. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package.</p>
<h2 id="affected-versions">Affected versions</h2>
<p>The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it.</p>
<p>Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available <a href="https://github.com/rust-lang/wg-security-response/tree/master/patches">in the wg-security-response repository</a> for people building their own toolchain.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities.</p>
<p>crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as remote code execution is allowed by design there as well.</p>
<h2 id="acknowledgements">Acknowledgements</h2>
<p>We want to thank Ori Hollander from JFrog Security Research for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank Josh Triplett for developing the fixes, Weihang Lo for developing the tests, and Pietro Albini for writing this advisory. The disclosure was coordinated by Pietro Albini and Josh Stone.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/rust-lang/cargo/security/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36113">https://nvd.nist.gov/vuln/detail/CVE-2022-36113</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a">https://github.com/rust-lang/cargo/commit/97b80919e404b0768ea31ae329c3b4da54bed05a</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b">https://github.com/rust-lang/cargo/commit/dafe4a7ea016739680ec7998aebe1bc6de131a5b</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-09">https://security.gentoo.org/glsa/202210-09</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/15f1e4b0bf4b4fc20369e0a85d9b77957c4dd52a">https://github.com/rust-lang/cargo/commit/15f1e4b0bf4b4fc20369e0a85d9b77957c4dd52a</a></li>
<li><a href="https://github.com/advisories/GHSA-rfj2-q3h3-hm5j">https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rfj2-q3h3-hm5j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-09-16T17:12:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librsvg] librsvg DoS via Cyclic References]]></title>
        <id>https://github.com/advisories/GHSA-j984-q4qc-6qxf</id>
        <link href="https://github.com/advisories/GHSA-j984-q4qc-6qxf"/>
        <updated>2023-08-13T05:02:27.000Z</updated>
        <content type="html"><![CDATA[<p>librsvg before 2.40.12 allows context-dependent attackers to cause a denial of service (infinite loop, stack consumption, and application crash) via cyclic references in an SVG document.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-7558">https://nvd.nist.gov/vuln/detail/CVE-2015-7558</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1268243">https://bugzilla.redhat.com/show_bug.cgi?id=1268243</a></li>
<li><a href="https://git.gnome.org/browse/librsvg/commit/?id=a51919f7e1ca9c535390a746fbf6e28c8402dc61">https://git.gnome.org/browse/librsvg/commit/?id=a51919f7e1ca9c535390a746fbf6e28c8402dc61</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3584">http://www.debian.org/security/2016/dsa-3584</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/12/21/5">http://www.openwall.com/lists/oss-security/2015/12/21/5</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/04/30/3">http://www.openwall.com/lists/oss-security/2016/04/30/3</a></li>
<li><a href="https://github.com/advisories/GHSA-j984-q4qc-6qxf">https://github.com/advisories/GHSA-j984-q4qc-6qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j984-q4qc-6qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T03:50:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lol-html] lol-html panics on certain HTML inputs]]></title>
        <id>https://github.com/advisories/GHSA-c3x7-354f-4p2x</id>
        <link href="https://github.com/advisories/GHSA-c3x7-354f-4p2x"/>
        <updated>2023-08-16T13:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>lol-html can cause panics on certain HTML inputs. Anyone processing arbitrary 3rd party HTML with the library is affected.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched and released as v1.1.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/lol-html/security/advisories/GHSA-c3x7-354f-4p2x">https://github.com/cloudflare/lol-html/security/advisories/GHSA-c3x7-354f-4p2x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-4241">https://nvd.nist.gov/vuln/detail/CVE-2023-4241</a></li>
<li><a href="https://github.com/advisories/GHSA-c3x7-354f-4p2x">https://github.com/advisories/GHSA-c3x7-354f-4p2x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c3x7-354f-4p2x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-09T13:17:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[odoh-rs] odoh-rs's Invalid Slice Split Results in Server Panic]]></title>
        <id>https://github.com/advisories/GHSA-gpcv-p28p-fv2p</id>
        <link href="https://github.com/advisories/GHSA-gpcv-p28p-fv2p"/>
        <updated>2023-08-03T19:40:00.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was discovered in the odoh-rs rust crate that stems from faulty logic during the parsing of encrypted queries. This issue specifically occurs when processing encrypted query data received from remote clients.</p>
<h3 id="impact">Impact</h3>
<p>An attacker with knowledge of this vulnerability could craft and send specially designed encrypted queries to targeted ODOH servers running with odoh-rs. Upon successful exploitation, the server will crash abruptly, disrupting its normal operation and rendering the service temporarily unavailable.</p>
<h3 id="patches">Patches</h3>
<p>Users are encouraged to update their odoh-rs's rust crate to v1.0.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/odoh-rs/security/advisories/GHSA-gpcv-p28p-fv2p">https://github.com/cloudflare/odoh-rs/security/advisories/GHSA-gpcv-p28p-fv2p</a></li>
<li><a href="https://github.com/cloudflare/odoh-rs/commit/c1bc4ed71dcc9842b7dc1ea26f278f105074bbaa">https://github.com/cloudflare/odoh-rs/commit/c1bc4ed71dcc9842b7dc1ea26f278f105074bbaa</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3766">https://nvd.nist.gov/vuln/detail/CVE-2023-3766</a></li>
<li><a href="https://github.com/cloudflare/odoh-rs/pull/28">https://github.com/cloudflare/odoh-rs/pull/28</a></li>
<li><a href="https://github.com/advisories/GHSA-gpcv-p28p-fv2p">https://github.com/advisories/GHSA-gpcv-p28p-fv2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpcv-p28p-fv2p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-03T16:35:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cargo] Cargo not respecting umask when extracting crate archives]]></title>
        <id>https://github.com/advisories/GHSA-j3xp-wfr4-hx87</id>
        <link href="https://github.com/advisories/GHSA-j3xp-wfr4-hx87"/>
        <updated>2023-08-18T14:25:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Rust Security Response WG was notified that Cargo did not respect the umask when extracting crate archives on UNIX-like systems. If the user downloaded a crate containing files writeable by any local user, another local user could exploit this to change the source code compiled and executed by the current user.</p>
<p>This vulnerability has been assigned CVE-2023-38497.</p>
<h2 id="overview">Overview</h2>
<p>In UNIX-like systems, each file has three sets of permissions: for the user owning the file, for the group owning the file, and for all other local users. The "<a href="https://en.wikipedia.org/wiki/Umask">umask</a>" is configured on most systems to limit those permissions during file creation, removing dangerous ones. For example, the default umask on macOS and most Linux distributions only allow the user owning a file to write to it, preventing the group owning it or other local users from doing the same.</p>
<p>When a dependency is downloaded by Cargo, its source code has to be extracted on disk to allow the Rust compiler to read as part of the build. To improve performance, this extraction only happens the first time a dependency is used, caching the pre-extracted files for future invocations.</p>
<p>Unfortunately, it was discovered that Cargo did not respect the umask during extraction, and propagated the permissions stored in the crate archive as-is. If an archive contained files writeable by any user on the system (and the system configuration didn't prevent writes through other security measures), another local user on the system could replace or tweak the source code of a dependency, potentially achieving code execution the next time the project is compiled.</p>
<h2 id="affected-versions">Affected Versions</h2>
<p>All Rust versions before 1.71.1 on UNIX-like systems (like macOS and Linux) are affected. Note that additional system-dependent security measures configured on the local system might prevent the vulnerability from being exploited.</p>
<p>Users on Windows and other non-UNIX-like systems are not affected.</p>
<h2 id="mitigations">Mitigations</h2>
<p>We recommend all users to update to Rust 1.71.1, which will be released later today, as it fixes the vulnerability by respecting the umask when extracting crate archives. If you build your own toolchain, patches for 1.71.0 source tarballs are <a href="https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2023-38497">available here</a>.</p>
<p>To prevent existing cached extractions from being exploitable, the Cargo binary included in Rust 1.71.1 or later will purge the caches it tries to access if they were generated by older Cargo versions.</p>
<p>If you cannot update to Rust 1.71.1, we recommend configuring your system to prevent other local users from accessing the Cargo directory, usually located in <code>~/.cargo</code>:</p>
<pre><code>chmod go= ~/.cargo
</code></pre>
<h2 id="acknowledgments">Acknowledgments</h2>
<p>We want to thank Addison Crump for responsibly disclosing this to us according to the <a href="https://www.rust-lang.org/policies/security">Rust security policy</a>.</p>
<p>We also want to thank the members of the Rust project who helped us disclose the vulnerability: Weihang Lo for developing the fix; Eric Huss for reviewing the fix; Pietro Albini for writing this advisory; Pietro Albini, Manish Goregaokar and Josh Stone for coordinating this disclosure; Josh Triplett, Arlo Siemen, Scott Schafer, and Jacob Finkelman for advising during the disclosure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/cargo/security/advisories/GHSA-j3xp-wfr4-hx87">https://github.com/rust-lang/cargo/security/advisories/GHSA-j3xp-wfr4-hx87</a></li>
<li><a href="https://github.com/rust-lang/cargo/pull/12443">https://github.com/rust-lang/cargo/pull/12443</a></li>
<li><a href="https://github.com/rust-lang/cargo/commit/d78bbf4bde3c6b95caca7512f537c6f9721426ff">https://github.com/rust-lang/cargo/commit/d78bbf4bde3c6b95caca7512f537c6f9721426ff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38497">https://nvd.nist.gov/vuln/detail/CVE-2023-38497</a></li>
<li><a href="https://en.wikipedia.org/wiki/Umask">https://en.wikipedia.org/wiki/Umask</a></li>
<li><a href="https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2023-38497">https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2023-38497</a></li>
<li><a href="https://www.rust-lang.org/policies/security">https://www.rust-lang.org/policies/security</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QGKE6PGM4HIQUHPJRBQAHMELINSGN4H4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QGKE6PGM4HIQUHPJRBQAHMELINSGN4H4/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QMEXGUGPW5OBSQA6URTBNDSU3RAEFOZ4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QMEXGUGPW5OBSQA6URTBNDSU3RAEFOZ4/</a></li>
<li><a href="https://github.com/advisories/GHSA-j3xp-wfr4-hx87">https://github.com/advisories/GHSA-j3xp-wfr4-hx87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3xp-wfr4-hx87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-03T16:30:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twitch-tui] twitch-tui's connection is not encrypted]]></title>
        <id>https://github.com/advisories/GHSA-779w-xvpm-78jx</id>
        <link href="https://github.com/advisories/GHSA-779w-xvpm-78jx"/>
        <updated>2023-08-04T18:41:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The connection is not using TLS for communication</p>
<h3 id="details">Details</h3>
<p>In the configuration of the irc connection, <a href="https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23">you are disabling tls</a> which makes all communication to twitch irc servers unencrypted.</p>
<h3 id="poc">PoC</h3>
<p>You can verify by using tcpdump/wireshark that traffic is unencrypted.</p>
<h3 id="impact">Impact</h3>
<p>Communication can be sniffed, even auth tokens.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Xithrius/twitch-tui/security/advisories/GHSA-779w-xvpm-78jx">https://github.com/Xithrius/twitch-tui/security/advisories/GHSA-779w-xvpm-78jx</a></li>
<li><a href="https://github.com/Xithrius/twitch-tui/commit/74d13ddca35f8f0816f4933c229da1fd95c0350a">https://github.com/Xithrius/twitch-tui/commit/74d13ddca35f8f0816f4933c229da1fd95c0350a</a></li>
<li><a href="https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23">https://github.com/Xithrius/twitch-tui/blob/340afc3c8c07a83289fe6ef614aa7563c8b70756/src/twitch/connection.rs#L23</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38688">https://nvd.nist.gov/vuln/detail/CVE-2023-38688</a></li>
<li><a href="https://github.com/advisories/GHSA-779w-xvpm-78jx">https://github.com/advisories/GHSA-779w-xvpm-78jx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-779w-xvpm-78jx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-31T22:02:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[intaglio] Unsoundness in `intern` methods on `intaglio` symbol interners]]></title>
        <id>https://github.com/advisories/GHSA-gch5-hwqf-mxhp</id>
        <link href="https://github.com/advisories/GHSA-gch5-hwqf-mxhp"/>
        <updated>2023-07-27T19:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of this crate have a stacked borrows violation when creating
references to interned contents. All interner types are affected.</p>
<p>The flaw was corrected in version 1.9.0 by reordering move and borrowing
operations and storing interned contents by raw pointer instead of as a <code>Box</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/artichoke/intaglio/pull/236">https://github.com/artichoke/intaglio/pull/236</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0048.html">https://rustsec.org/advisories/RUSTSEC-2023-0048.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gch5-hwqf-mxhp">https://github.com/advisories/GHSA-gch5-hwqf-mxhp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gch5-hwqf-mxhp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-27T19:29:41.000Z</published>
    </entry>
</feed>