<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/rust.rss</id>
    <title>Security Advisory for Rust crates</title>
    <updated>2024-01-21T16:01:21.365Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust"/>
    <subtitle>Security Advisory for Rust crates on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[surrealdb] SurrealDB vulnerable to Uncontrolled CPU Consumption via WebSocket Interface]]></title>
        <id>https://github.com/advisories/GHSA-58j9-j2fj-v8f4</id>
        <link href="https://github.com/advisories/GHSA-58j9-j2fj-v8f4"/>
        <updated>2024-01-19T20:31:23.000Z</updated>
        <content type="html"><![CDATA[<p>SurrealDB depends on the <code>tungstenite</code> and <code>tokio-tungstenite</code> crates used by the <code>axum</code> crate, which handles connections to the SurrealDB WebSocket interface. On versions before <code>0.20.1</code>, the <code>tungstenite</code> crate presented an issue which allowed the parsing of HTTP headers during the client handshake to continuously consume high CPU when the headers were very long. All affected crates have been updated in SurrealDB version <code>1.1.0</code>.</p>
<p>From the original advisory for <a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">CVE-2023-43669</a>:
"The Tungstenite crate through 0.20.0 for Rust allows remote attackers to cause a denial of service (minutes of CPU consumption) via an excessive length of an HTTP header in a client handshake. The length affects both how many times a parse is attempted (e.g., thousands of times) and the average amount of data for each parse attempt (e.g., millions of bytes)."</p>
<h3 id="impact">Impact</h3>
<p>A remote unauthenticated attacker may cause a SurrealDB server that exposes its WebSocket interface to consume high CPU by sending an HTTP request with a very long header to the WebSocket interface, potentially leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users unable to update may be able to limit access to the WebSocket interface (i.e. the <code>/rpc</code> endpoint) via reverse proxy if not in use or only used by a limited number of trusted clients. Alternatively, a reverse proxy may be used to strip or truncate request headers exceeding a reasonable length before reaching the SurrealDB server.</p>
<h3 id="references">References</h3>
<ul>
<li>#2807</li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">https://nvd.nist.gov/vuln/detail/CVE-2023-43669</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0065.html">https://rustsec.org/advisories/RUSTSEC-2023-0065.html</a></li>
<li><a href="https://github.com/snapview/tungstenite-rs/issues/376">https://github.com/snapview/tungstenite-rs/issues/376</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-58j9-j2fj-v8f4">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-58j9-j2fj-v8f4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-43669">https://nvd.nist.gov/vuln/detail/CVE-2023-43669</a></li>
<li><a href="https://github.com/snapview/tungstenite-rs/issues/376">https://github.com/snapview/tungstenite-rs/issues/376</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/2807">https://github.com/surrealdb/surrealdb/pull/2807</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/87859158d3750b03564613de70b5ec4ae090549d">https://github.com/surrealdb/surrealdb/commit/87859158d3750b03564613de70b5ec4ae090549d</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0065.html">https://rustsec.org/advisories/RUSTSEC-2023-0065.html</a></li>
<li><a href="https://github.com/advisories/GHSA-58j9-j2fj-v8f4">https://github.com/advisories/GHSA-58j9-j2fj-v8f4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-58j9-j2fj-v8f4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-19T20:31:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2] Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</id>
        <link href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25"/>
        <updated>2024-01-19T15:24:58.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the
generation of reset frames on the victim endpoint.
By closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,
resulting in Out Of Memory (OOM) and high CPU usage.</p>
<p>This fix is corrected in <a href="https://github.com/hyperium/h2/pull/737">hyperium/h2#737</a>, which limits the total number of
internal error resets emitted by default before the connection is closed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperium/h2/pull/737">https://github.com/hyperium/h2/pull/737</a></li>
<li><a href="https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854">https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854</a></li>
<li><a href="https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c">https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0003.html">https://rustsec.org/advisories/RUSTSEC-2024-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25">https://github.com/advisories/GHSA-8r5v-vm4m-4g25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-19T15:24:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[h2] Resource exhaustion vulnerability in h2 may lead to Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</id>
        <link href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25"/>
        <updated>2024-01-19T15:24:58.000Z</updated>
        <content type="html"><![CDATA[<p>An attacker with an HTTP/2 connection to an affected endpoint can send a steady stream of invalid frames to force the
generation of reset frames on the victim endpoint.
By closing their recv window, the attacker could then force these resets to be queued in an unbounded fashion,
resulting in Out Of Memory (OOM) and high CPU usage.</p>
<p>This fix is corrected in <a href="https://github.com/hyperium/h2/pull/737">hyperium/h2#737</a>, which limits the total number of
internal error resets emitted by default before the connection is closed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperium/h2/pull/737">https://github.com/hyperium/h2/pull/737</a></li>
<li><a href="https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854">https://github.com/hyperium/h2/commit/59570e11ccddbec85f67a0c7aa353f7730c68854</a></li>
<li><a href="https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c">https://github.com/hyperium/h2/commit/d919cd6fd8e0f4f5d1f6282fab0b38a1b4bf999c</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0003.html">https://rustsec.org/advisories/RUSTSEC-2024-0003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8r5v-vm4m-4g25">https://github.com/advisories/GHSA-8r5v-vm4m-4g25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r5v-vm4m-4g25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-19T15:24:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncontrolled Recursion in SurrealQL Parsing]]></title>
        <id>https://github.com/advisories/GHSA-6r8p-hpg7-825g</id>
        <link href="https://github.com/advisories/GHSA-6r8p-hpg7-825g"/>
        <updated>2024-01-18T15:55:19.000Z</updated>
        <content type="html"><![CDATA[<p>In some specific instances, the SurrealQL parser will attempt to recursively parse nested statements or idioms (i.e. nested <code>IF</code> and <code>RELATE</code> statements, nested basic idioms and nested access to attributes) without checking if the depth limit established by default or in the <code>SURREAL_MAX_COMPUTATION_DEPTH</code> environment variable is exceeded. This can lead to the stack overflowing when the nesting surpasses certain levels of depth.</p>
<h3 id="impact">Impact</h3>
<p>An attacker that is authorized to run queries on a SurrealDB server may be able to run a query using the affected statements and idioms with very deep nesting in order to crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6r8p-hpg7-825g">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-6r8p-hpg7-825g</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/3232">https://github.com/surrealdb/surrealdb/pull/3232</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/f838da248e3854e4250e5187a3a67507cb7efaaa">https://github.com/surrealdb/surrealdb/commit/f838da248e3854e4250e5187a3a67507cb7efaaa</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62410</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=62652</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=63797</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64445</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=64731</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=65277</a></li>
<li><a href="https://github.com/advisories/GHSA-6r8p-hpg7-825g">https://github.com/advisories/GHSA-6r8p-hpg7-825g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6r8p-hpg7-825g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-18T15:55:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception processing HTTP Headers in SurrealDB]]></title>
        <id>https://github.com/advisories/GHSA-m24x-r6q3-2vp9</id>
        <link href="https://github.com/advisories/GHSA-m24x-r6q3-2vp9"/>
        <updated>2024-01-18T15:48:48.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>ID</code>, <code>DB</code> and <code>NS</code> headers accepted by the SurrealDB HTTP REST API would fail to parse when containing some special characters. This would cause a panic which would crash the SurrealDB server, leading to denial of service.</p>
<p>This issue only affects the SurrealDB binary; it does not affect the SurrealDB library.</p>
<h3 id="impact">Impact</h3>
<p>An unauthenticated client may issue an HTTP request to the SurrealDB HTTP REST API containing one of the affected headers with values containing special characters in order to crash the SurrealDB server. This does not require the SurrealDB server to be running with any specific capabilities other than exposing the affected interface.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.0 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit untrusted access to the SurrealDB HTTP REST API unless such access is required by the application. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#2985 (<a href="https://github.com/surrealdb/surrealdb/pull/2985/files#diff-7ad06ddbb88d77138e5daf40a0dac5443d78947acd69a284a7c2bceb61f9c5f0L83-R119">diff</a>)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m24x-r6q3-2vp9">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-m24x-r6q3-2vp9</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/pull/2985">https://github.com/surrealdb/surrealdb/pull/2985</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/a70ddb2e2aed2453730b81781e426486247609cb">https://github.com/surrealdb/surrealdb/commit/a70ddb2e2aed2453730b81781e426486247609cb</a></li>
<li><a href="https://github.com/advisories/GHSA-m24x-r6q3-2vp9">https://github.com/advisories/GHSA-m24x-r6q3-2vp9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m24x-r6q3-2vp9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-18T15:48:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[surrealdb] Uncaught Exception in surrealdb]]></title>
        <id>https://github.com/advisories/GHSA-jm4v-58r5-66hj</id>
        <link href="https://github.com/advisories/GHSA-jm4v-58r5-66hj"/>
        <updated>2024-01-18T15:44:52.000Z</updated>
        <content type="html"><![CDATA[<p>Although custom parameters and functions are only supported at the database level, it was allowed to invoke those entities at the root or namespace level. This would cause a panic which would crash the SurrealDB server, leading to denial of service.</p>
<h3 id="impact">Impact</h3>
<p>A client that is authorized to run queries at the root or namespace level in a SurrealDB server is able to run a query invoking a parameter or a function at that level, which will cause a panic. This will crash the server, leading to denial of service.</p>
<h3 id="patches">Patches</h3>
<ul>
<li>Version 1.1.1 and later are not affected by this issue.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Concerned users unable to update may want to limit the ability of untrusted users to run arbitrary SurrealQL queries in the affected versions of SurrealDB to the database level. To limit the impact of the denial of service, SurrealDB administrators may also want to ensure that the SurrealDB process is running so that it can be automatically re-started after a crash.</p>
<h3 id="references">References</h3>
<ul>
<li>#3297</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jm4v-58r5-66hj">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-jm4v-58r5-66hj</a></li>
<li><a href="https://github.com/surrealdb/surrealdb/commit/618a4d1b422df0d12772532bb2c195f830b40399">https://github.com/surrealdb/surrealdb/commit/618a4d1b422df0d12772532bb2c195f830b40399</a></li>
<li><a href="https://github.com/advisories/GHSA-jm4v-58r5-66hj">https://github.com/advisories/GHSA-jm4v-58r5-66hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jm4v-58r5-66hj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-18T15:44:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tracing] use-after-free in tracing ]]></title>
        <id>https://github.com/advisories/GHSA-8f24-6m29-wm2r</id>
        <link href="https://github.com/advisories/GHSA-8f24-6m29-wm2r"/>
        <updated>2024-01-17T20:32:37.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation of the <a href="https://docs.rs/tracing/latest/tracing/instrument/struct.Instrumented.html#method.into_inner"><code>Instrumented::into_inner</code></a> method in affected versions of this crate contains undefined behavior due to incorrect use of <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a> The function creates <code>*const</code> pointers to <code>self</code>, calls <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>mem::forget(self)</code></a>, and then moves values out of those pointers using <a href="https://doc.rust-lang.org/std/primitive.pointer.html#method.read-1"><code>std::ptr::read</code></a>.</p>
<pre><code class="language-rust">// To manually destructure `Instrumented` without `Drop`, we
// move it into a ManuallyDrop and use pointers to its fields
let span: *const Span = &amp;this.span;
let inner: *const ManuallyDrop&lt;T&gt; = &amp;this.inner;
mem::forget(self);
// SAFETY: Those pointers are valid for reads, because `Drop` didn't
//         run, and properly aligned, because `Instrumented` isn't
//         `#[repr(packed)]`.
let _span = unsafe { span.read() };
let inner = unsafe { inner.read() };
</code></pre>
<p>However, the <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>mem::forget</code> documentation</a> states:</p>
<blockquote>
<p>Any resources the value manages, such as heap memory or a file handle, will
linger forever in an unreachable state. <strong>However, it does not guarantee that
pointers to this memory will remain valid.</strong></p>
</blockquote>
<p>This means that these pointers are no longer valid. This could result in a stack use-after-free if LLVM chooses to reuse <code>self</code>'s stack slot for a rebinding after the call to <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a>.</p>
<p>This undefined behavior has not been observed to cause miscompilation as of Rust 1.73.0. However, any use of this method with the affected versions of <code>tracing</code> are unsound.</p>
<p>The flaw was corrected in commit <a href="https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721">20a1762</a> (<a href="https://github.com/tokio-rs/tracing/pull/2765">PR #2765</a>) by replacing the use of <a href="https://doc.rust-lang.org/std/mem/fn.forget.html"><code>std::mem::forget</code></a> with <code>std::mem::ManuallyDrop</code>, ensuring that the stack slot is not reused and the pointers remain valid when they are read. The fix is
published in <code>tracing</code> <a href="https://crates.io/crates/tracing/0.1.40">v0.1.40</a>. Affected versions have been yanked from crates.io.</p>
<p>Thanks to <a href="https://github.com/cramertj">Taylor Cramer</a> and <a href="https://github.com/manishearth">Manish Goregaokar</a> for finding and correcting
this issue!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tokio-rs/tracing/pull/2765">https://github.com/tokio-rs/tracing/pull/2765</a></li>
<li><a href="https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721">https://github.com/tokio-rs/tracing/commit/20a1762b3fd5f1fafead198fd18e469c68683721</a></li>
<li><a href="https://github.com/tokio-rs/tracing/releases/tag/tracing-0.1.40">https://github.com/tokio-rs/tracing/releases/tag/tracing-0.1.40</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2023-0078.html">https://rustsec.org/advisories/RUSTSEC-2023-0078.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8f24-6m29-wm2r">https://github.com/advisories/GHSA-8f24-6m29-wm2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8f24-6m29-wm2r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-17T20:32:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ferris-says] ferris-says has undefined behavior when not using UTF-8]]></title>
        <id>https://github.com/advisories/GHSA-v363-rrf2-5fmj</id>
        <link href="https://github.com/advisories/GHSA-v363-rrf2-5fmj"/>
        <updated>2024-01-17T20:31:12.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions receive a <code>&amp;[u8]</code> from the caller through a safe API, and pass it directly to the unsafe <code>str::from_utf8_unchecked</code> function.</p>
<p>The behavior of <code>ferris_says::say</code> is undefined if the bytes from the caller don't happen to be valid UTF-8.</p>
<p>The flaw was corrected in <a href="https://github.com/rust-lang/ferris-says/pull/21">ferris-says#21</a> by using the safe <code>str::from_utf8</code> instead, and returning an error on invalid input. However this fix has not yet been published to crates.io as a patch version for 0.2.</p>
<p>Separately, <a href="https://github.com/rust-lang/ferris-says/pull/32">ferris-says#32</a> has introduced a different API for version 0.3 which accepts input as <code>&amp;str</code> rather than <code>&amp;[u8]</code>, so is unaffected by this bug.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/ferris-says/pull/21">https://github.com/rust-lang/ferris-says/pull/21</a></li>
<li><a href="https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a">https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0001.html">https://rustsec.org/advisories/RUSTSEC-2024-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v363-rrf2-5fmj">https://github.com/advisories/GHSA-v363-rrf2-5fmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v363-rrf2-5fmj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-17T20:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ferris-says] ferris-says has undefined behavior when not using UTF-8]]></title>
        <id>https://github.com/advisories/GHSA-v363-rrf2-5fmj</id>
        <link href="https://github.com/advisories/GHSA-v363-rrf2-5fmj"/>
        <updated>2024-01-17T20:31:12.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions receive a <code>&amp;[u8]</code> from the caller through a safe API, and pass it directly to the unsafe <code>str::from_utf8_unchecked</code> function.</p>
<p>The behavior of <code>ferris_says::say</code> is undefined if the bytes from the caller don't happen to be valid UTF-8.</p>
<p>The flaw was corrected in <a href="https://github.com/rust-lang/ferris-says/pull/21">ferris-says#21</a> by using the safe <code>str::from_utf8</code> instead, and returning an error on invalid input. However this fix has not yet been published to crates.io as a patch version for 0.2.</p>
<p>Separately, <a href="https://github.com/rust-lang/ferris-says/pull/32">ferris-says#32</a> has introduced a different API for version 0.3 which accepts input as <code>&amp;str</code> rather than <code>&amp;[u8]</code>, so is unaffected by this bug.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-lang/ferris-says/pull/21">https://github.com/rust-lang/ferris-says/pull/21</a></li>
<li><a href="https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a">https://github.com/rust-lang/ferris-says/commit/bb661f29e0d88968c495a4ea4dc63ff0e2c2c11a</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0001.html">https://rustsec.org/advisories/RUSTSEC-2024-0001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-v363-rrf2-5fmj">https://github.com/advisories/GHSA-v363-rrf2-5fmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v363-rrf2-5fmj</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-17T20:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anoncreds-clsignatures] CL-Signatures Revocation Scheme in Ursa has flaws that allow a holder to demonstrate non-revocation of a revoked credential]]></title>
        <id>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</id>
        <link href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4"/>
        <updated>2024-01-19T19:28:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<h3 id="details">Details</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementation has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<p>The flaw exists in all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and are fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>To exploit the flaw, a holder must update their wallet (agent) software, replacing the Hyperledger Ursa or AnonCreds CL-Signatures library that generates the proof of non-revocation. This may involve, for example, altering an iOS or Android application published in the respective app stores. A mitigation for this flaw is to use the application attestation capabilities (such as the Android "<a href="https://developer.android.com/privacy-and-security/safetynet/attestation">SafetyNet Attestation API</a>") offered by the app store vendors to (for example) "help determine whether your servers are interacting with your genuine app running on a genuine Android device."</p>
<p>The problem is created in the generation of a revocation registry, prior to issuing any credentials. As such, to eliminate the impact of the flaw, the issued credentials must be re-issued based on a correct revocation registry, generated from a correct implementation, such as <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a>.</p>
<h3 id="impact">Impact</h3>
<p>The potential impact is as follows:</p>
<ul>
<li>A verifier may verify a credential from a holder as being "not revoked" when in fact, the holder's credential has been revoked.</li>
</ul>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/applications using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>. If your application has issued revocable credentials, once the Issuer library has been upgraded, new revocation registries must be created, and credentials issued from revocation registries created with the the flawed software must be revoked and reissued.</p>
<p>A verifier can detect if a holder presents a flawed revocable credential.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21670">https://nvd.nist.gov/vuln/detail/CVE-2024-21670</a></li>
<li><a href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/advisories/GHSA-r78f-4q2q-hvv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ursa] CL-Signatures Revocation Scheme in Ursa has flaws that allow a holder to demonstrate non-revocation of a revoked credential]]></title>
        <id>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</id>
        <link href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4"/>
        <updated>2024-01-19T19:28:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<h3 id="details">Details</h3>
<p>The revocation schema that is part of the Ursa CL-Signatures implementation has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, allowing a malicious holder of a revoked credential to generate a valid Non-Revocation Proof for that credential as part of an AnonCreds presentation.</p>
<p>The flaw exists in all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and are fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>To exploit the flaw, a holder must update their wallet (agent) software, replacing the Hyperledger Ursa or AnonCreds CL-Signatures library that generates the proof of non-revocation. This may involve, for example, altering an iOS or Android application published in the respective app stores. A mitigation for this flaw is to use the application attestation capabilities (such as the Android "<a href="https://developer.android.com/privacy-and-security/safetynet/attestation">SafetyNet Attestation API</a>") offered by the app store vendors to (for example) "help determine whether your servers are interacting with your genuine app running on a genuine Android device."</p>
<p>The problem is created in the generation of a revocation registry, prior to issuing any credentials. As such, to eliminate the impact of the flaw, the issued credentials must be re-issued based on a correct revocation registry, generated from a correct implementation, such as <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a>.</p>
<h3 id="impact">Impact</h3>
<p>The potential impact is as follows:</p>
<ul>
<li>A verifier may verify a credential from a holder as being "not revoked" when in fact, the holder's credential has been revoked.</li>
</ul>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/applications using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>. If your application has issued revocable credentials, once the Issuer library has been upgraded, new revocation registries must be created, and credentials issued from revocation registries created with the the flawed software must be revoked and reissued.</p>
<p>A verifier can detect if a holder presents a flawed revocable credential.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-r78f-4q2q-hvv4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21670">https://nvd.nist.gov/vuln/detail/CVE-2024-21670</a></li>
<li><a href="https://github.com/advisories/GHSA-r78f-4q2q-hvv4">https://github.com/advisories/GHSA-r78f-4q2q-hvv4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r78f-4q2q-hvv4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anoncreds-clsignatures] Ursa CL-Signatures Revocation allows verifiers to generate unique identifiers for holders]]></title>
        <id>https://github.com/advisories/GHSA-6698-mhxx-r84g</id>
        <link href="https://github.com/advisories/GHSA-6698-mhxx-r84g"/>
        <updated>2024-01-19T19:28:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model. Notably, a malicious verifier may be able to generate a unique identifier for a holder providing a verifiable presentation that includes a Non-Revocation proof.</p>
<h3 id="details">Details</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, potentially allowing a malicious verifier to generate a unique identifier for a holder that provides a verifiable presentation that includes a Non-Revocation proof.</p>
<p>The flaws affects all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and is fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>The addressing the flaw requires updating AnonCreds holder software (such as mobile wallets) to a corrected CL-Signature implementation, such as the [AnonCreds CL Signatures Rust Crate]. Verifying presentations from corrected holders requires a updating the verifier software to a corrected CL-Signatures implementation. An updated verifier based on AnonCreds CL-Signatures can verify presentations from holders built on either the flawed Ursa CL-Signature implementation or a corrected CL-Signature implementation</p>
<p>The flaw occurs as a result of generating a verifiable presentation that includes a Non-Revocation proof from a flawed implementation.</p>
<h3 id="impact">Impact</h3>
<p>The impact of the flaw is that a malicious verifier may be able to determine a unique identifier for a holder presenting a Non-Revocation proof.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/holder applications that generate AnonCreds verifiable presentations using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g</a></li>
<li><a href="https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f">https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22192">https://nvd.nist.gov/vuln/detail/CVE-2024-22192</a></li>
<li><a href="https://github.com/advisories/GHSA-6698-mhxx-r84g">https://github.com/advisories/GHSA-6698-mhxx-r84g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6698-mhxx-r84g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ursa] Ursa CL-Signatures Revocation allows verifiers to generate unique identifiers for holders]]></title>
        <id>https://github.com/advisories/GHSA-6698-mhxx-r84g</id>
        <link href="https://github.com/advisories/GHSA-6698-mhxx-r84g"/>
        <updated>2024-01-19T19:28:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model. Notably, a malicious verifier may be able to generate a unique identifier for a holder providing a verifiable presentation that includes a Non-Revocation proof.</p>
<h3 id="details">Details</h3>
<p>The revocation scheme that is part of the Ursa CL-Signatures implementations has a flaw that could impact the privacy guarantees defined by the AnonCreds verifiable credential model, potentially allowing a malicious verifier to generate a unique identifier for a holder that provides a verifiable presentation that includes a Non-Revocation proof.</p>
<p>The flaws affects all CL-Signature versions published from the <a href="https://github.com/hyperledger-archives/ursa">Hyperledger Ursa</a> repository to the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a>, and is fixed in all versions published from the <a href="https://github.com/hyperledger/anoncreds-clsignatures-rs">Hyperledger AnonCreds CL-Signatures</a> repository to the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<p>The addressing the flaw requires updating AnonCreds holder software (such as mobile wallets) to a corrected CL-Signature implementation, such as the [AnonCreds CL Signatures Rust Crate]. Verifying presentations from corrected holders requires a updating the verifier software to a corrected CL-Signatures implementation. An updated verifier based on AnonCreds CL-Signatures can verify presentations from holders built on either the flawed Ursa CL-Signature implementation or a corrected CL-Signature implementation</p>
<p>The flaw occurs as a result of generating a verifiable presentation that includes a Non-Revocation proof from a flawed implementation.</p>
<h3 id="impact">Impact</h3>
<p>The impact of the flaw is that a malicious verifier may be able to determine a unique identifier for a holder presenting a Non-Revocation proof.</p>
<h3 id="mitigation">Mitigation</h3>
<p>Upgrade libraries/holder applications that generate AnonCreds verifiable presentations using the <a href="https://crates.io/crates/ursa">Ursa Rust Crate</a> to any version of the <a href="https://crates.io/crates/anoncreds-clsignatures">AnonCreds CL-Signatures Rust Crate</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-6698-mhxx-r84g</a></li>
<li><a href="https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f">https://github.com/hyperledger/anoncreds-clsignatures-rs/commit/1e55780c890b027fa51e361e188a7743a0bf473f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22192">https://nvd.nist.gov/vuln/detail/CVE-2024-22192</a></li>
<li><a href="https://github.com/advisories/GHSA-6698-mhxx-r84g">https://github.com/advisories/GHSA-6698-mhxx-r84g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6698-mhxx-r84g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T21:13:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ursa] Breaking unlinkability in Identity Mixer using malicious keys]]></title>
        <id>https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</id>
        <link href="https://github.com/advisories/GHSA-2q6j-gqc4-4gw3"/>
        <updated>2024-01-19T19:28:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cl-signatures-issuer-key-correctness-proof-lacks-of-prime-strength-checking">CL Signatures Issuer Key Correctness Proof lacks of prime strength checking</h1>
<p>A weakness in the Hyperledger AnonCreds specification that is not mitigated in the Ursa and AnonCreds implementations is that the Issuer does not publish a key correctness proof demonstrating that a generated private key is sufficient to meet the unlinkability guarantees of AnonCreds. A sufficient private key is one in which it's components <code>p</code> and <code>q</code> are safe primes, such that:</p>
<ul>
<li><code>p</code> and <code>q</code> are both prime numbers</li>
<li><code>p</code> and <code>q</code> are not equal</li>
<li><code>p</code> and <code>q</code> have the same, sufficiently large, size<ul>
<li>For example, using two values both 1024 bits long is sufficient, whereas using one value 2040 bits long and the other 8 bits long is not.</li>
</ul>
</li>
</ul>
<p>The Ursa and AnonCreds CL-Signatures implementations always generate a sufficient private key. A malicious issuer could in theory create a custom CL Signature implementation (derived from the Ursa or AnonCreds CL-Signatures implementations) that uses weakened private keys such that presentations from holders could be shared by verifiers  to the issuer who could determine the holder to which the credential was issued.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability could impact holders of AnonCreds credentials implemented using the CL-signature scheme in the Ursa and AnonCreds implementations of CL Signatures.</p>
<h3 id="mitigations">Mitigations</h3>
<p><a href="https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf">Jan Camenisch and Markus Michels. Proving in zero-knowledge that a number is the product of two safe primes</a> (pages 12-13) demonstrates a key correctness proof that could be used to show the issuer has generated a sufficiently strong private key, proving the characteristics listed above.</p>
<p>In a future version of AnonCreds, the additional key correctness proof could be published separately or added to the Credential Definition. In the meantime, Issuers in existing ecosystems can share such a proof with their ecosystem co-participants in an ad hoc manner.</p>
<p>The lack of such a published key correctness proof allows a malicious Issuer to deliberately generate a private key that lacks the requirements listed above, enabling the Issuer to perform a brute force attack on presentations provided to colluding verifiers that breaks the unlinkability guarantee of AnonCreds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
<li><a href="https://github.com/hyperledger/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/hyperledger/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31021">https://nvd.nist.gov/vuln/detail/CVE-2022-31021</a></li>
<li><a href="https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf">https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-16T21:13:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[anoncreds-clsignatures] Breaking unlinkability in Identity Mixer using malicious keys]]></title>
        <id>https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</id>
        <link href="https://github.com/advisories/GHSA-2q6j-gqc4-4gw3"/>
        <updated>2024-01-19T19:28:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cl-signatures-issuer-key-correctness-proof-lacks-of-prime-strength-checking">CL Signatures Issuer Key Correctness Proof lacks of prime strength checking</h1>
<p>A weakness in the Hyperledger AnonCreds specification that is not mitigated in the Ursa and AnonCreds implementations is that the Issuer does not publish a key correctness proof demonstrating that a generated private key is sufficient to meet the unlinkability guarantees of AnonCreds. A sufficient private key is one in which it's components <code>p</code> and <code>q</code> are safe primes, such that:</p>
<ul>
<li><code>p</code> and <code>q</code> are both prime numbers</li>
<li><code>p</code> and <code>q</code> are not equal</li>
<li><code>p</code> and <code>q</code> have the same, sufficiently large, size<ul>
<li>For example, using two values both 1024 bits long is sufficient, whereas using one value 2040 bits long and the other 8 bits long is not.</li>
</ul>
</li>
</ul>
<p>The Ursa and AnonCreds CL-Signatures implementations always generate a sufficient private key. A malicious issuer could in theory create a custom CL Signature implementation (derived from the Ursa or AnonCreds CL-Signatures implementations) that uses weakened private keys such that presentations from holders could be shared by verifiers  to the issuer who could determine the holder to which the credential was issued.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability could impact holders of AnonCreds credentials implemented using the CL-signature scheme in the Ursa and AnonCreds implementations of CL Signatures.</p>
<h3 id="mitigations">Mitigations</h3>
<p><a href="https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf">Jan Camenisch and Markus Michels. Proving in zero-knowledge that a number is the product of two safe primes</a> (pages 12-13) demonstrates a key correctness proof that could be used to show the issuer has generated a sufficiently strong private key, proving the characteristics listed above.</p>
<p>In a future version of AnonCreds, the additional key correctness proof could be published separately or added to the Credential Definition. In the meantime, Issuers in existing ecosystems can share such a proof with their ecosystem co-participants in an ad hoc manner.</p>
<p>The lack of such a published key correctness proof allows a malicious Issuer to deliberately generate a private key that lacks the requirements listed above, enabling the Issuer to perform a brute force attack on presentations provided to colluding verifiers that breaks the unlinkability guarantee of AnonCreds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/hyperledger-archives/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
<li><a href="https://github.com/hyperledger/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/hyperledger/ursa/security/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31021">https://nvd.nist.gov/vuln/detail/CVE-2022-31021</a></li>
<li><a href="https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf">https://www.brics.dk/RS/98/29/BRICS-RS-98-29.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-2q6j-gqc4-4gw3">https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q6j-gqc4-4gw3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-16T21:13:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[evm] Rust EVM erroneousle handles `record_external_operation` error return]]></title>
        <id>https://github.com/advisories/GHSA-27wg-99g8-2v4v</id>
        <link href="https://github.com/advisories/GHSA-27wg-99g8-2v4v"/>
        <updated>2024-01-03T21:48:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In <code>rust-evm</code>, a feature called <code>record_external_operation</code> was introduced, allowing library users to record custom gas changes. This feature can have some bogus interactions with the call stack.</p>
<p>In particular, during finalization of a <code>CREATE</code> or <code>CREATE2</code>, in the case that <a href="https://github.com/rust-ethereum/evm/blob/release-v041/src/executor/stack/executor.rs#L1012C25-L1012C69">the substack execution happens successfully</a>, <code>rust-evm</code> will first commit the substate, and then call <code>record_external_operation(Write(out_code.len()))</code>. If <code>record_external_operation</code> later fails, this error is returned to the parent call stack, instead of <code>Succeeded</code>. Yet, the substate commitment already happened. This causes smart contracts able to commit state changes, when the parent caller contract receives zero address (which usually indicates that the execution has failed).</p>
<p>This issue only impacts library users with custom <code>record_external_operation</code> that returns errors.</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in release 0.41.1. The commit can be seem <a href="https://github.com/rust-ethereum/evm/commit/d8991ec727ad0fb64fe9957a3cd307387a6701e4">here</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>Patch PR <a href="https://github.com/rust-ethereum/evm/pull/264">#264</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/rust-ethereum/evm/security/advisories/GHSA-27wg-99g8-2v4v">https://github.com/rust-ethereum/evm/security/advisories/GHSA-27wg-99g8-2v4v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21629">https://nvd.nist.gov/vuln/detail/CVE-2024-21629</a></li>
<li><a href="https://github.com/rust-ethereum/evm/pull/264">https://github.com/rust-ethereum/evm/pull/264</a></li>
<li><a href="https://github.com/rust-ethereum/evm/commit/d8991ec727ad0fb64fe9957a3cd307387a6701e4">https://github.com/rust-ethereum/evm/commit/d8991ec727ad0fb64fe9957a3cd307387a6701e4</a></li>
<li><a href="https://github.com/rust-ethereum/evm/blob/release-v041/src/executor/stack/executor.rs#L1012C25-L1012C69">https://github.com/rust-ethereum/evm/blob/release-v041/src/executor/stack/executor.rs#L1012C25-L1012C69</a></li>
<li><a href="https://github.com/advisories/GHSA-27wg-99g8-2v4v">https://github.com/advisories/GHSA-27wg-99g8-2v4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-27wg-99g8-2v4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-03T21:48:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[safe_pqc_kyber] safe_pqc_kyber leaks parts of secret keys]]></title>
        <id>https://github.com/advisories/GHSA-p4v8-jgcv-9g75</id>
        <link href="https://github.com/advisories/GHSA-p4v8-jgcv-9g75"/>
        <updated>2024-01-03T21:40:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>On some platforms, when an attacker can time decapsulation, and in particular when the attacker can forge cipher texts, they can learn (parts of) the secret key.</p>
<p>Does not apply to ephemeral usage, such as when used in the regular way in TLS.</p>
<h3 id="patches">Patches</h3>
<p>Patched in 0.6.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://kyberslash.cr.yp.to">kyberslash.cr.yp.to</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/bwesterb/argyle-kyber/security/advisories/GHSA-p4v8-jgcv-9g75">https://github.com/bwesterb/argyle-kyber/security/advisories/GHSA-p4v8-jgcv-9g75</a></li>
<li><a href="https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6">https://github.com/bwesterb/argyle-kyber/commit/b5c6ad13f4eece80e59c6ebeafd787ba1519f5f6</a></li>
<li><a href="https://kyberslash.cr.yp.to/">https://kyberslash.cr.yp.to/</a></li>
<li><a href="https://github.com/advisories/GHSA-p4v8-jgcv-9g75">https://github.com/advisories/GHSA-p4v8-jgcv-9g75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4v8-jgcv-9g75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-03T21:40:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vmm-sys-util] `serde` deserialization for `FamStructWrapper` lacks bound checks that could potentially lead to out-of-bounds memory access]]></title>
        <id>https://github.com/advisories/GHSA-875g-mfp6-g7f9</id>
        <link href="https://github.com/advisories/GHSA-875g-mfp6-g7f9"/>
        <updated>2024-01-19T19:23:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue was discovered in the FamStructWrapper::deserialize implementation provided by the crate for vmm_sys_util::fam::FamStructWrapper, which can lead to out of bounds memory accesses. The deserialization does not check that the length stored in the header matches the flexible array length. Mismatch in the lengths might allow out of bounds memory access through Rust-safe methods.</p>
<p>Impacted versions: &gt;= 0.5.0</p>
<h3 id="patches">Patches</h3>
<p>The issue was corrected in version 0.12.0 by inserting a check that verifies the lengths of compared flexible arrays are equal for any deserialized header and aborting deserialization otherwise. Moreover, the API was changed so that header length can only be modified through Rust-unsafe code. This ensures that users cannot trigger out-of-bounds memory access from Rust-safe code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rust-vmm/vmm-sys-util/security/advisories/GHSA-875g-mfp6-g7f9">https://github.com/rust-vmm/vmm-sys-util/security/advisories/GHSA-875g-mfp6-g7f9</a></li>
<li><a href="https://github.com/rust-vmm/vmm-sys-util/commit/30172fca2a8e0a38667d934ee56682247e13f167">https://github.com/rust-vmm/vmm-sys-util/commit/30172fca2a8e0a38667d934ee56682247e13f167</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50711">https://nvd.nist.gov/vuln/detail/CVE-2023-50711</a></li>
<li><a href="https://rustsec.org/advisories/RUSTSEC-2024-0002.html">https://rustsec.org/advisories/RUSTSEC-2024-0002.html</a></li>
<li><a href="https://github.com/advisories/GHSA-875g-mfp6-g7f9">https://github.com/advisories/GHSA-875g-mfp6-g7f9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-875g-mfp6-g7f9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-02T16:28:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tauri-cli] Tauri's Updater Private Keys Possibly Leaked via Vite Environment Variables]]></title>
        <id>https://github.com/advisories/GHSA-2rcp-jvr4-r259</id>
        <link href="https://github.com/advisories/GHSA-2rcp-jvr4-r259"/>
        <updated>2023-12-28T05:05:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This advisory is not describing a vulnerability in the Tauri code base itself but a commonly used misconfiguration which could lead to leaking of the private key and updater key password into bundled Tauri applications using the Vite frontend in a specific configuration.</p>
<p>The Tauri documentation used an insecure example configuration in the <a href="https://tauri.app/v1/guides/getting-started/setup/vite/">Vite guide</a> to showcase how to use Tauri together with Vite. </p>
<p>Copying the following snippet <code>envPrefix: ['VITE_', 'TAURI_'],</code> from this guide into the <code>vite.config.ts</code> of a Tauri project possibly leads to bundling the <code>TAURI_PRIVATE_KEY</code> and <code>TAURI_KEY_PASSWORD</code> into the Vite frontend code and therefore leaking this value to the debug built of a Tauri application.</p>
<p>The value is automatically bundled into debug builds but for production builds it is not embedded, as long as it is not directly referenced in the frontend code. Vite statically replaces these values in production builds. This reduces the amount of affected applications to a very small amount of affected applications.</p>
<p>To verify if you are affected you can search for the private key value or the <code>TAURI_PRIVATE_KEY</code> variable inside the release build frontend assets (<code>dist/</code>).</p>
<blockquote>
<p>Example: <code>grep -r "TAURI_PRIVATE_KEY" dist/</code></p>
</blockquote>
<p>Using only the <code>envPrefix: ['VITE_'],</code> or any other framework than Vite means you are not impacted by this advisory.</p>
<h3 id="patches">Patches</h3>
<p>The documentation has been patched but as the root cause is not in Tauri itself the issue is not fixed by updating Tauri.
The <code>vite.config.ts</code> configuration of the project needs to be adapted.</p>
<p>We recommend rotating your updater private key if you are affected by this (requires Tauri CLI &gt;=1.5.5). After updating the envPrefix configuration, generate a new private key with <code>tauri signer generate</code>, saving the new private key and updating the updater's <code>pubkey</code> value on <code>tauri.conf.json</code> with the new public key. To update your existing application, the next application build must be signed with the older private key in order to be accepted by the existing application.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The <code>envPrefix: ['VITE_'],</code>should be used and the desired <code>TAURI</code> variables manually added.
Respective these variables could be added <code>TAURI_PLATFORM</code>, <code>TAURI_ARCH</code>, <code>TAURI_FAMILY</code>, <code>TAURI_PLATFORM_VERSION</code>, <code>TAURI_PLATFORM_TYPE</code> and <code>TAURI_DEBUG</code> without leaking sensitive information.</p>
<p>We urge affected users to implement the workaround as the <code>1.x</code> branch will not receive a general prevention fix as it would break systems.</p>
<h3 id="references">References</h3>
<p>The issue was originally disclosed in our discord <a href="https://discord.com/channels/616186924390023171/1164260301655523409">here</a>.
The affected guide is <a href="https://tauri.app/v1/guides/getting-started/setup/vite/">https://tauri.app/v1/guides/getting-started/setup/vite/</a>.</p>
<blockquote>
<p>Update: We lowered the severity from high to low, as the likelihood of impact was found to only affect a <strong>very limited</strong> amount of applications.</p>
</blockquote>
<blockquote>
<p>Update2: We changed the affected versions to make clear that after <code>2.0.0-alpha.16</code> or <code>1.5.6</code> the potentially vulnerable recommendation was no longer visible on our website and should not affect projects by default. A lot of users were confused and we believe this advisory reached the necessary user base.</p>
</blockquote>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-2rcp-jvr4-r259">https://github.com/tauri-apps/tauri/security/advisories/GHSA-2rcp-jvr4-r259</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46115">https://nvd.nist.gov/vuln/detail/CVE-2023-46115</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/8b166e9bf82e69ddb3200a3a825614980bd8d433">https://github.com/tauri-apps/tauri/commit/8b166e9bf82e69ddb3200a3a825614980bd8d433</a></li>
<li><a href="https://discord.com/channels/616186924390023171/1164260301655523409">https://discord.com/channels/616186924390023171/1164260301655523409</a></li>
<li><a href="https://tauri.app/v1/guides/getting-started/setup/vite/">https://tauri.app/v1/guides/getting-started/setup/vite/</a></li>
<li><a href="https://github.com/advisories/GHSA-2rcp-jvr4-r259">https://github.com/advisories/GHSA-2rcp-jvr4-r259</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2rcp-jvr4-r259</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-20T15:18:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tauri-cli] Tauri's Updater Private Keys Possibly Leaked via Vite Environment Variables]]></title>
        <id>https://github.com/advisories/GHSA-2rcp-jvr4-r259</id>
        <link href="https://github.com/advisories/GHSA-2rcp-jvr4-r259"/>
        <updated>2023-12-28T05:05:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This advisory is not describing a vulnerability in the Tauri code base itself but a commonly used misconfiguration which could lead to leaking of the private key and updater key password into bundled Tauri applications using the Vite frontend in a specific configuration.</p>
<p>The Tauri documentation used an insecure example configuration in the <a href="https://tauri.app/v1/guides/getting-started/setup/vite/">Vite guide</a> to showcase how to use Tauri together with Vite. </p>
<p>Copying the following snippet <code>envPrefix: ['VITE_', 'TAURI_'],</code> from this guide into the <code>vite.config.ts</code> of a Tauri project possibly leads to bundling the <code>TAURI_PRIVATE_KEY</code> and <code>TAURI_KEY_PASSWORD</code> into the Vite frontend code and therefore leaking this value to the debug built of a Tauri application.</p>
<p>The value is automatically bundled into debug builds but for production builds it is not embedded, as long as it is not directly referenced in the frontend code. Vite statically replaces these values in production builds. This reduces the amount of affected applications to a very small amount of affected applications.</p>
<p>To verify if you are affected you can search for the private key value or the <code>TAURI_PRIVATE_KEY</code> variable inside the release build frontend assets (<code>dist/</code>).</p>
<blockquote>
<p>Example: <code>grep -r "TAURI_PRIVATE_KEY" dist/</code></p>
</blockquote>
<p>Using only the <code>envPrefix: ['VITE_'],</code> or any other framework than Vite means you are not impacted by this advisory.</p>
<h3 id="patches">Patches</h3>
<p>The documentation has been patched but as the root cause is not in Tauri itself the issue is not fixed by updating Tauri.
The <code>vite.config.ts</code> configuration of the project needs to be adapted.</p>
<p>We recommend rotating your updater private key if you are affected by this (requires Tauri CLI &gt;=1.5.5). After updating the envPrefix configuration, generate a new private key with <code>tauri signer generate</code>, saving the new private key and updating the updater's <code>pubkey</code> value on <code>tauri.conf.json</code> with the new public key. To update your existing application, the next application build must be signed with the older private key in order to be accepted by the existing application.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The <code>envPrefix: ['VITE_'],</code>should be used and the desired <code>TAURI</code> variables manually added.
Respective these variables could be added <code>TAURI_PLATFORM</code>, <code>TAURI_ARCH</code>, <code>TAURI_FAMILY</code>, <code>TAURI_PLATFORM_VERSION</code>, <code>TAURI_PLATFORM_TYPE</code> and <code>TAURI_DEBUG</code> without leaking sensitive information.</p>
<p>We urge affected users to implement the workaround as the <code>1.x</code> branch will not receive a general prevention fix as it would break systems.</p>
<h3 id="references">References</h3>
<p>The issue was originally disclosed in our discord <a href="https://discord.com/channels/616186924390023171/1164260301655523409">here</a>.
The affected guide is <a href="https://tauri.app/v1/guides/getting-started/setup/vite/">https://tauri.app/v1/guides/getting-started/setup/vite/</a>.</p>
<blockquote>
<p>Update: We lowered the severity from high to low, as the likelihood of impact was found to only affect a <strong>very limited</strong> amount of applications.</p>
</blockquote>
<blockquote>
<p>Update2: We changed the affected versions to make clear that after <code>2.0.0-alpha.16</code> or <code>1.5.6</code> the potentially vulnerable recommendation was no longer visible on our website and should not affect projects by default. A lot of users were confused and we believe this advisory reached the necessary user base.</p>
</blockquote>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tauri-apps/tauri/security/advisories/GHSA-2rcp-jvr4-r259">https://github.com/tauri-apps/tauri/security/advisories/GHSA-2rcp-jvr4-r259</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46115">https://nvd.nist.gov/vuln/detail/CVE-2023-46115</a></li>
<li><a href="https://github.com/tauri-apps/tauri/commit/8b166e9bf82e69ddb3200a3a825614980bd8d433">https://github.com/tauri-apps/tauri/commit/8b166e9bf82e69ddb3200a3a825614980bd8d433</a></li>
<li><a href="https://discord.com/channels/616186924390023171/1164260301655523409">https://discord.com/channels/616186924390023171/1164260301655523409</a></li>
<li><a href="https://tauri.app/v1/guides/getting-started/setup/vite/">https://tauri.app/v1/guides/getting-started/setup/vite/</a></li>
<li><a href="https://github.com/advisories/GHSA-2rcp-jvr4-r259">https://github.com/advisories/GHSA-2rcp-jvr4-r259</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2rcp-jvr4-r259</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-20T15:18:52.000Z</published>
    </entry>
</feed>