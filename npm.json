{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>There was already a reported SSRF vulnerability via file import. <a href=\"https://github.com/directus/directus/security/advisories/GHSA-j3rg-3rgm-537h\">https://github.com/directus/directus/security/advisories/GHSA-j3rg-3rgm-537h</a>\nIt was fixed by resolving all DNS names and checking if the requested IP is an internal IP address. </p>\n<p>However it is possible to bypass this security measure and execute a SSRF using redirects. Directus allows redirects when importing file from the URL and does not check the result URL. Thus, it is possible to execute a request to an internal IP, for example to 127.0.0.1.</p>\n<p>However, it is blind SSRF, because Directus also uses response interception technique to get the information about the connect from the socket directly and it does not show a response if the IP address is internal (nice fix, by the way :) ).</p>\n<p>But the blindness does not fully mitigate the impact of the vulnerability. The blind SSRF is still exploitable in the real life scenarios, because there could be a vulnerable software inside of the network which can be exploited with GET request. I will show the example in the PoC. Also, you can check <a href=\"https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/ssrf-vulnerable-platforms\">HackTricks</a> page with some known cases. </p>\n<h3 id=\"details\">Details</h3>\n<p><em>Give all details on the vulnerability. Pointing to the incriminated source code is very helpful for the maintainer.</em></p>\n<h3 id=\"poc\">PoC</h3>\n<p>For testing I used the docker compose with the latest directus version. Here is my docker compose file</p>\n<pre><code>version: \"3\"\nservices:\n  directus:\n    image: directus/directus:10.8.3\n    ports:\n      - 8055:8055\n    volumes:\n      - ./database:/directus/database\n      - ./uploads:/directus/uploads\n      - ./extensions:/directus/extensions\n    environment:\n      KEY: \"redacted\"\n      SECRET: \"redacted\"\n      ADMIN_EMAIL: \"admin@example.com\"\n      ADMIN_PASSWORD: \"redacted\"\n      DB_CLIENT: \"sqlite3\"\n      DB_FILENAME: \"/directus/database/data.db\"\n</code></pre>\n<p>As a first step it is needed to setup a redirect server which will redirect the incoming request to some internal URL. I did it on my VPS with the public IP.</p>\n<img src=\"https://user-images.githubusercontent.com/156416961/296198555-870898b2-7b8a-4857-a8fe-5e28e85241b0.png\" alt=\"image\" width=\"1035\">\n\n<p>After it I setup a simple HTTP Server emulating the vulnerable application inside the internal network. It just execute any shell command provided in the cmd GET-parameter.</p>\n<img src=\"https://user-images.githubusercontent.com/156416961/296198963-4465fa15-c6d6-4e8c-92a0-a2ae334ba79f.png\" alt=\"image\" width=\"454\">\n\n<p>After it the directus import functionality was used </p>\n<img src=\"https://user-images.githubusercontent.com/156416961/296199457-d5d8eb2d-1ca8-442e-b1bf-15ddb0f1947d.png\" alt=\"image\" width=\"930\">\n\n<p>It initiates the following HTTP request</p>\n<pre><code>POST /files/import HTTP/1.1\nHost: 127.0.0.1:8055\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0\nAccept: application/json, text/plain, */*\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nAuthorization: Bearer redacteed\nContent-Type: application/json\nContent-Length: 44\nOrigin: http://127.0.0.1:8055\nConnection: close\nReferer: http://127.0.0.1:8055/admin/files/+\nCookie: directus_refresh_token=redacted\nSec-Fetch-Dest: empty\nSec-Fetch-Mode: cors\nSec-Fetch-Site: same-origin\n\n{\"url\":\"http://94.103.84.233:801\",\"data\":{}}\n</code></pre>\n<p>It can be seen on the redirect server that the request came to it.</p>\n<p><img alt=\"\" src=\"https://user-images.githubusercontent.com/156416961/296200143-5afc04e8-3651-4f6f-98d2-1f9f7cd3919a.jpg\"></p>\n<p>And we can also see the request in the localhost server (the same host as directus), which confirms the bypass and the SSRF.</p>\n<img src=\"https://user-images.githubusercontent.com/156416961/296201651-a9b61f5d-0ccd-4e3e-b137-e82fda8f5347.png\" alt=\"image\" width=\"437\">\n\n<p>And the rce_poc file was created. </p>\n<img src=\"https://user-images.githubusercontent.com/156416961/296201869-fed5fa94-ece5-497d-a091-c422b1f540a0.png\" alt=\"image\" width=\"538\">\n\n\n\n\n<h3 id=\"impact\">Impact</h3>\n<p>The impact is Blind SSRF. Using it an attacker can initiate HTTP GET requests to the internal network. For example, it can be used to exploit some GET-based vulnerabilities of other software in the internal network.</p>\n<h3 id=\"fix-proposition\">Fix proposition</h3>\n<p>I think there are two ways to fix this vulnerability:</p>\n<ul>\n<li>Disallow redirects for the import requests</li>\n<li>Check the Location header in the import request response if it is present. Drop the request if the Location url points to the internal IP.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-8p72-rcq4-h6pw\">https://github.com/directus/directus/security/advisories/GHSA-8p72-rcq4-h6pw</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/d577b44231c0923aca99cac5770fd853801caee1\">https://github.com/directus/directus/commit/d577b44231c0923aca99cac5770fd853801caee1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8p72-rcq4-h6pw\">https://github.com/advisories/GHSA-8p72-rcq4-h6pw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8p72-rcq4-h6pw",
            "title": "[@directus/api] Directus Blind SSRF On File Import",
            "date_modified": "2024-07-08T15:25:50.000Z",
            "date_published": "2024-07-08T15:25:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8p72-rcq4-h6pw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>At present, when Fedify needs to retrieve an object or activity from a remote activitypub server, it makes a HTTP request to the <code>@id</code> or other resources present within the activity it has received from the web. This activity could reference an <code>@id</code> that points to an internal IP address, allowing an attacker to send request to resources internal to the fedify server's network.</p>\n<p>This applies to not just resolution of documents containing activities or objects, but also to media URLs as well.</p>\n<p>Specifically this is a <a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">Server Side Request Forgery attack</a>. You can learn more about SSRF attacks via <a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918</a></p>\n<h3 id=\"details\">Details</h3>\n<p>When Fedify makes a request at runtime via the DocLoader [1] [2], the <code>fetch</code> API does not first check the URI's to assert that it resolve to a public IP address. Additionally, any downstream software of Fedify that may fetch data from URIs contained within Activities or Objects maybe be at risk of requesting non-public resources, and storing those, exposing non-public information to the public.</p>\n<p>Additionally, in many cases the URIs are not asserted to be either strictly HTTPS or HTTP protocols, which could lead to further attacks, and there is no check that the URI contains a <code>hostname</code> part. Whilst the <a href=\"https://fetch.spec.whatwg.org/\"><code>fetch()</code> specification</a> may provide some safety here, along with underlying fetch implementations, there is still potential for attacks through using <code>data:</code> URIs, or just attacking some other protocol entirely, e.g., FTP or CalDav.</p>\n<p>[1] <a href=\"https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L141\">https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L141</a>\n[2] <a href=\"https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L175\">https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L175</a></p>\n<h4 id=\"deno-specific-attack-vectors\">Deno-specific Attack Vectors</h4>\n<p>In Deno specifically, the <code>fetch()</code> API allows <a href=\"https://docs.deno.com/deploy/api/runtime-fetch/\">accessing local filesystem</a>, I'm not sure how Deno's <a href=\"https://docs.deno.com/runtime/manual/runtime/permission_apis/\">Permissions model</a> may prevent attacks utilising <code>file:</code> URIs.</p>\n<blockquote>\n<p>Fetch also supports fetching from file URLs to retrieve static files. For more info on static files, see the <a href=\"https://docs.deno.com/deploy/api/runtime-fs\">filesystem API documentation</a>.</p>\n</blockquote>\n<h4 id=\"activitypub-security-considerations\">ActivityPub Security Considerations</h4>\n<p>This is also noted in the ActivityPub spec in <a href=\"https://www.w3.org/TR/activitypub/#security-localhost\">Section B.3 Security Considerations</a>, however, there it is more limited in scope.</p>\n<h4 id=\"other-implementations\">Other Implementations</h4>\n<p>It may be acceptable to allow a server operator to allow access to given non-public IP addresses, for instance <a href=\"https://github.com/mastodon/mastodon/blob/092bb8a27af9ee87ff9ebabaf354477470ea3a94/app/lib/request.rb#L330\">in Mastodon</a> they allow requests to non-public IP addresses, i.e., localhost in development and those in the <code>ALLOWED_PRIVATE_ADDRESSES</code> environment variable.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>I'm not sure a PoC is necessary given this is a reasonably well known vulnerability vector.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This impacts server operates, as resources that are internal to their network may find themselves being improperly accessed or potentially even attacked or exposed to the public.</p>\n<h3 id=\"notes-for-resolution\">Notes for resolution:</h3>\n<p>When implementing public IP address validation, be careful of <a href=\"https://cwe.mitre.org/data/definitions/1389.html\">CWE-1389</a> and <a href=\"https://cwe.mitre.org/data/definitions/1286.html\">CWE-1286</a> both of which <a href=\"https://github.com/advisories/GHSA-78xj-cgh5-2h22\">recently</a> caused a CVE to be filed against the popular node.js <code>ip</code> package, although this package was not originally intended for security purposes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dahlia/fedify/security/advisories/GHSA-p9cg-vqcc-grcx\">https://github.com/dahlia/fedify/security/advisories/GHSA-p9cg-vqcc-grcx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39687\">https://nvd.nist.gov/vuln/detail/CVE-2024-39687</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/commit/30f9cf4a175704a04c874f3ea88414c5f1e00b28\">https://github.com/dahlia/fedify/commit/30f9cf4a175704a04c874f3ea88414c5f1e00b28</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/commit/c641e976089dd913f649889c1bfb016df04e86ba\">https://github.com/dahlia/fedify/commit/c641e976089dd913f649889c1bfb016df04e86ba</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/releases/tag/0.11.1\">https://github.com/dahlia/fedify/releases/tag/0.11.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9cg-vqcc-grcx\">https://github.com/advisories/GHSA-p9cg-vqcc-grcx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9cg-vqcc-grcx",
            "title": "[@fedify/fedify] Server Side Request Forgery (SSRF) attack in Fedify",
            "date_modified": "2024-07-05T20:07:55.000Z",
            "date_published": "2024-07-05T20:07:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9cg-vqcc-grcx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>At present, when Fedify needs to retrieve an object or activity from a remote activitypub server, it makes a HTTP request to the <code>@id</code> or other resources present within the activity it has received from the web. This activity could reference an <code>@id</code> that points to an internal IP address, allowing an attacker to send request to resources internal to the fedify server's network.</p>\n<p>This applies to not just resolution of documents containing activities or objects, but also to media URLs as well.</p>\n<p>Specifically this is a <a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">Server Side Request Forgery attack</a>. You can learn more about SSRF attacks via <a href=\"https://cwe.mitre.org/data/definitions/918.html\">CWE-918</a></p>\n<h3 id=\"details\">Details</h3>\n<p>When Fedify makes a request at runtime via the DocLoader [1] [2], the <code>fetch</code> API does not first check the URI's to assert that it resolve to a public IP address. Additionally, any downstream software of Fedify that may fetch data from URIs contained within Activities or Objects maybe be at risk of requesting non-public resources, and storing those, exposing non-public information to the public.</p>\n<p>Additionally, in many cases the URIs are not asserted to be either strictly HTTPS or HTTP protocols, which could lead to further attacks, and there is no check that the URI contains a <code>hostname</code> part. Whilst the <a href=\"https://fetch.spec.whatwg.org/\"><code>fetch()</code> specification</a> may provide some safety here, along with underlying fetch implementations, there is still potential for attacks through using <code>data:</code> URIs, or just attacking some other protocol entirely, e.g., FTP or CalDav.</p>\n<p>[1] <a href=\"https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L141\">https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L141</a>\n[2] <a href=\"https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L175\">https://github.com/dahlia/fedify/blob/main/runtime/docloader.ts#L175</a></p>\n<h4 id=\"deno-specific-attack-vectors\">Deno-specific Attack Vectors</h4>\n<p>In Deno specifically, the <code>fetch()</code> API allows <a href=\"https://docs.deno.com/deploy/api/runtime-fetch/\">accessing local filesystem</a>, I'm not sure how Deno's <a href=\"https://docs.deno.com/runtime/manual/runtime/permission_apis/\">Permissions model</a> may prevent attacks utilising <code>file:</code> URIs.</p>\n<blockquote>\n<p>Fetch also supports fetching from file URLs to retrieve static files. For more info on static files, see the <a href=\"https://docs.deno.com/deploy/api/runtime-fs\">filesystem API documentation</a>.</p>\n</blockquote>\n<h4 id=\"activitypub-security-considerations\">ActivityPub Security Considerations</h4>\n<p>This is also noted in the ActivityPub spec in <a href=\"https://www.w3.org/TR/activitypub/#security-localhost\">Section B.3 Security Considerations</a>, however, there it is more limited in scope.</p>\n<h4 id=\"other-implementations\">Other Implementations</h4>\n<p>It may be acceptable to allow a server operator to allow access to given non-public IP addresses, for instance <a href=\"https://github.com/mastodon/mastodon/blob/092bb8a27af9ee87ff9ebabaf354477470ea3a94/app/lib/request.rb#L330\">in Mastodon</a> they allow requests to non-public IP addresses, i.e., localhost in development and those in the <code>ALLOWED_PRIVATE_ADDRESSES</code> environment variable.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>I'm not sure a PoC is necessary given this is a reasonably well known vulnerability vector.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This impacts server operates, as resources that are internal to their network may find themselves being improperly accessed or potentially even attacked or exposed to the public.</p>\n<h3 id=\"notes-for-resolution\">Notes for resolution:</h3>\n<p>When implementing public IP address validation, be careful of <a href=\"https://cwe.mitre.org/data/definitions/1389.html\">CWE-1389</a> and <a href=\"https://cwe.mitre.org/data/definitions/1286.html\">CWE-1286</a> both of which <a href=\"https://github.com/advisories/GHSA-78xj-cgh5-2h22\">recently</a> caused a CVE to be filed against the popular node.js <code>ip</code> package, although this package was not originally intended for security purposes.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dahlia/fedify/security/advisories/GHSA-p9cg-vqcc-grcx\">https://github.com/dahlia/fedify/security/advisories/GHSA-p9cg-vqcc-grcx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39687\">https://nvd.nist.gov/vuln/detail/CVE-2024-39687</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/commit/30f9cf4a175704a04c874f3ea88414c5f1e00b28\">https://github.com/dahlia/fedify/commit/30f9cf4a175704a04c874f3ea88414c5f1e00b28</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/commit/c641e976089dd913f649889c1bfb016df04e86ba\">https://github.com/dahlia/fedify/commit/c641e976089dd913f649889c1bfb016df04e86ba</a></li>\n<li><a href=\"https://github.com/dahlia/fedify/releases/tag/0.11.1\">https://github.com/dahlia/fedify/releases/tag/0.11.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9cg-vqcc-grcx\">https://github.com/advisories/GHSA-p9cg-vqcc-grcx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9cg-vqcc-grcx",
            "title": "[@fedify/fedify] Server Side Request Forgery (SSRF) attack in Fedify",
            "date_modified": "2024-07-05T20:07:55.000Z",
            "date_published": "2024-07-05T20:07:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9cg-vqcc-grcx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The fix for GHSA-wm4w-7h2q-3pf7 / <a href=\"https://www.cve.org/CVERecord?id=CVE-2024-32000\">CVE-2024-32000</a> included in matrix-appservice-irc 2.0.0 relied on the Matrix homeserver-provided timestamp to determine whether a user has access to the event they're replying to when determining whether or not to include a truncated version of the original event in the IRC message. Since this value is controlled by external entities, a malicious Matrix homeserver joined to a room in which a matrix-appservice-irc bridge instance (before version 2.0.1) is present can fabricate the timestamp with the intent of tricking the bridge into leaking room messages the homeserver should not have access to.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>matrix-appservice-irc 2.0.1 <a href=\"https://github.com/matrix-org/matrix-appservice-irc/pull/1804\">drops the reliance</a> on <code>origin_server_ts</code> when determining whether or not an event should be visible to a user, instead tracking the event timestamps internally.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>It's possible to limit the amount of information leaked by setting a reply template that doesn't contain the original message. See <a href=\"https://github.com/matrix-org/matrix-appservice-irc/blob/d5d67d1d3ea3f0f6962a0af2cc57b56af3ad2129/config.sample.yaml#L601-L604\">these lines</a> in the configuration file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Patch: <a href=\"https://github.com/matrix-org/matrix-appservice-irc/pull/1804\">https://github.com/matrix-org/matrix-appservice-irc/pull/1804</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, please email us at <a href=\"mailto:security@matrix.org\">security at matrix.org</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-w9mh-5x8j-9754\">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-w9mh-5x8j-9754</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/pull/1804\">https://github.com/matrix-org/matrix-appservice-irc/pull/1804</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/commit/1835e047f269001054be4c68867797aa12372a0f\">https://github.com/matrix-org/matrix-appservice-irc/commit/1835e047f269001054be4c68867797aa12372a0f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39691\">https://nvd.nist.gov/vuln/detail/CVE-2024-39691</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/blob/d5d67d1d3ea3f0f6962a0af2cc57b56af3ad2129/config.sample.yaml#L601-L604\">https://github.com/matrix-org/matrix-appservice-irc/blob/d5d67d1d3ea3f0f6962a0af2cc57b56af3ad2129/config.sample.yaml#L601-L604</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9mh-5x8j-9754\">https://github.com/advisories/GHSA-w9mh-5x8j-9754</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9mh-5x8j-9754",
            "title": "[matrix-appservice-irc] Malicious Matrix homeserver can leak truncated message content of messages it shouldn't have access to",
            "date_modified": "2024-07-05T21:37:32.000Z",
            "date_published": "2024-07-05T20:06:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9mh-5x8j-9754"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>adolph_dudu ratio-swiper v0.0.2 was discovered to contain a prototype pollution via the function extendDefaults. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38997\">https://nvd.nist.gov/vuln/detail/CVE-2024-38997</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/840f5d160aab4151bd0451cfb822e6b5\">https://gist.github.com/mestrtee/840f5d160aab4151bd0451cfb822e6b5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-88vr-hjqx-57qh\">https://github.com/advisories/GHSA-88vr-hjqx-57qh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-88vr-hjqx-57qh",
            "title": "[@adolph_dudu/ratio-swiper] adolph_dudu ratio-swiper was discovered to contain a prototype pollution via the function extendDefaults",
            "date_modified": "2024-07-03T20:04:01.000Z",
            "date_published": "2024-07-01T15:32:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-88vr-hjqx-57qh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38996\">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa\">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b\">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b\">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-876p-c77m-x2hc\">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-876p-c77m-x2hc",
            "title": "[ag-grid-community] ag-grid-community were discovered to contain a prototype pollution via the _.mergeDeep function",
            "date_modified": "2024-07-03T20:03:14.000Z",
            "date_published": "2024-07-01T15:32:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-876p-c77m-x2hc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38996\">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa\">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b\">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b\">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-876p-c77m-x2hc\">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-876p-c77m-x2hc",
            "title": "[ag-grid-enterprise] ag-grid-community were discovered to contain a prototype pollution via the _.mergeDeep function",
            "date_modified": "2024-07-03T20:03:14.000Z",
            "date_published": "2024-07-01T15:32:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-876p-c77m-x2hc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>airvertco frappejs v0.0.11 was discovered to contain a prototype pollution via the function registerView. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38992\">https://nvd.nist.gov/vuln/detail/CVE-2024-38992</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/10c88b9069229979ac7e52e0efc98055\">https://gist.github.com/mestrtee/10c88b9069229979ac7e52e0efc98055</a></li>\n<li><a href=\"https://www.npmjs.com/package/@airvertco/frappejs\">https://www.npmjs.com/package/@airvertco/frappejs</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gc7m-596h-x57r\">https://github.com/advisories/GHSA-gc7m-596h-x57r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gc7m-596h-x57r",
            "title": "[@airvertco/frappejs] frappejs was discovered to contain a prototype pollution via the function registerView",
            "date_modified": "2024-07-05T17:45:28.000Z",
            "date_published": "2024-07-01T15:32:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gc7m-596h-x57r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>rjrodger jsonic-next v2.12.1 was discovered to contain a prototype pollution via the function empty. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38993\">https://nvd.nist.gov/vuln/detail/CVE-2024-38993</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/9a2b522d59c53f31f45c1edb96459693\">https://gist.github.com/mestrtee/9a2b522d59c53f31f45c1edb96459693</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4wm9-3qmv-gvxj\">https://github.com/advisories/GHSA-4wm9-3qmv-gvxj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4wm9-3qmv-gvxj",
            "title": "[jsonic] jsonic was discovered to contain a prototype pollution via the function empty.",
            "date_modified": "2024-07-05T17:46:57.000Z",
            "date_published": "2024-07-01T15:32:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4wm9-3qmv-gvxj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>amoyjs amoy common v1.0.10 was discovered to contain a prototype pollution via the function extend. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38994\">https://nvd.nist.gov/vuln/detail/CVE-2024-38994</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/02091aa86c6c14c29b9703642439dd03\">https://gist.github.com/mestrtee/02091aa86c6c14c29b9703642439dd03</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w58v-r3cp-qr93\">https://github.com/advisories/GHSA-w58v-r3cp-qr93</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w58v-r3cp-qr93",
            "title": "[@amoy/common] @amoy/common v was discovered to contain a prototype pollution via the function extend",
            "date_modified": "2024-07-05T17:48:13.000Z",
            "date_published": "2024-07-01T15:32:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w58v-r3cp-qr93"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>akbr patch-into version 1.0.1 was discovered to contain a prototype pollution via the function patchInto. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38991\">https://nvd.nist.gov/vuln/detail/CVE-2024-38991</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/8851413e3b33a96f191f0e9c81706532\">https://gist.github.com/mestrtee/8851413e3b33a96f191f0e9c81706532</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gh4x-qv3p-m9pm\">https://github.com/advisories/GHSA-gh4x-qv3p-m9pm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gh4x-qv3p-m9pm",
            "title": "[@akbr/patch-into] akbr patch-into was discovered to contain a prototype pollution via the function patchInto",
            "date_modified": "2024-07-05T17:41:37.000Z",
            "date_published": "2024-07-01T15:32:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gh4x-qv3p-m9pm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The algorithm to detect SQL injection has been improved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9167\">https://github.com/parse-community/parse-server/pull/9167</a> (fix for Parse Server 7)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9168\">https://github.com/parse-community/parse-server/pull/9168</a> (fix for Parse Server 6)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Smile Thanapattheerakul of Trend Micro (finder)</li>\n<li>Manuel Trezza (coordinator)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9167\">https://github.com/parse-community/parse-server/pull/9167</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9168\">https://github.com/parse-community/parse-server/pull/9168</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39309\">https://nvd.nist.gov/vuln/detail/CVE-2024-39309</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3\">https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b\">https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2hr-cqg6-8j6r",
            "title": "[parse-server] ZDI-CAN-23894: Parse Server literalizeRegexPart SQL Injection Authentication Bypass Vulnerability",
            "date_modified": "2024-07-02T02:40:44.000Z",
            "date_published": "2024-07-01T18:35:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2hr-cqg6-8j6r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The algorithm to detect SQL injection has been improved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9167\">https://github.com/parse-community/parse-server/pull/9167</a> (fix for Parse Server 7)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9168\">https://github.com/parse-community/parse-server/pull/9168</a> (fix for Parse Server 6)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Smile Thanapattheerakul of Trend Micro (finder)</li>\n<li>Manuel Trezza (coordinator)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/parse-community/parse-server/security/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9167\">https://github.com/parse-community/parse-server/pull/9167</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9168\">https://github.com/parse-community/parse-server/pull/9168</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-39309\">https://nvd.nist.gov/vuln/detail/CVE-2024-39309</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3\">https://github.com/parse-community/parse-server/commit/2edf1e4c0363af01e97a7fbc97694f851b7d1ff3</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b\">https://github.com/parse-community/parse-server/commit/f332d54577608c5ad927255e06d8c694e2e0ff5b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2hr-cqg6-8j6r\">https://github.com/advisories/GHSA-c2hr-cqg6-8j6r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2hr-cqg6-8j6r",
            "title": "[parse-server] ZDI-CAN-23894: Parse Server literalizeRegexPart SQL Injection Authentication Bypass Vulnerability",
            "date_modified": "2024-07-02T02:40:44.000Z",
            "date_published": "2024-07-01T18:35:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2hr-cqg6-8j6r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28469\">https://nvd.nist.gov/vuln/detail/CVE-2020-28469</a></li>\n<li><a href=\"https://github.com/gulpjs/glob-parent/pull/36\">https://github.com/gulpjs/glob-parent/pull/36</a></li>\n<li><a href=\"https://github.com/gulpjs/glob-parent/blob/6ce8d11f2f1ed8e80a9526b1dc8cf3aa71f43474/index.js%23L9\">https://github.com/gulpjs/glob-parent/blob/6ce8d11f2f1ed8e80a9526b1dc8cf3aa71f43474/index.js%23L9</a></li>\n<li><a href=\"https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2\">https://github.com/gulpjs/glob-parent/releases/tag/v5.1.2</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBES128-1059093\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBES128-1059093</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1059092\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1059092</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905\">https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2022.html\">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>\n<li><a href=\"https://github.com/gulpjs/glob-parent/pull/36/commits/c6db86422a9731d4f3d332ce4a81c27ea6b0ee46\">https://github.com/gulpjs/glob-parent/pull/36/commits/c6db86422a9731d4f3d332ce4a81c27ea6b0ee46</a></li>\n<li><a href=\"https://github.com/gulpjs/glob-parent/commit/4a80667c69355c76a572a5892b0f133c8e1f457e\">https://github.com/gulpjs/glob-parent/commit/4a80667c69355c76a572a5892b0f133c8e1f457e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ww39-953v-wcq6\">https://github.com/advisories/GHSA-ww39-953v-wcq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ww39-953v-wcq6",
            "title": "[glob-parent] glob-parent vulnerable to Regular Expression Denial of Service in enclosure regex",
            "date_modified": "2024-06-27T14:00:25.000Z",
            "date_published": "2021-06-07T21:56:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ww39-953v-wcq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The implementation of the following functions were determined to include a use-after-free bug:</p>\n<ul>\n<li><code>FetchEvent.client.tlsCipherOpensslName</code></li>\n<li><code>FetchEvent.client.tlsProtocol</code></li>\n<li><code>FetchEvent.client.tlsClientCertificate</code></li>\n<li><code>FetchEvent.client.tlsJA3MD5</code></li>\n<li><code>FetchEvent.client.tlsClientHello</code></li>\n<li><code>CacheEntry.prototype.userMetadata</code> of the <code>fastly:cache</code> subsystem</li>\n<li><code>Device.lookup</code> of the <code>fastly:device</code> subsystem</li>\n</ul>\n<p>This bug could allow for an unintended data leak if the result of the preceding functions were sent anywhere else, and often results in a Compute service crash causing an HTTP 500 error to be returned. As all requests to Compute are isolated from one another, the only data at risk is data present for a single request.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been fixed in version 3.16.0 of the <code>@fastly/js-compute</code> package.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for this bug, any use of the affected functions introduces the possibility of a data leak or crash in guest code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastly/js-compute-runtime/security/advisories/GHSA-mp3g-vpm9-9vqv\">https://github.com/fastly/js-compute-runtime/security/advisories/GHSA-mp3g-vpm9-9vqv</a></li>\n<li><a href=\"https://github.com/fastly/js-compute-runtime/commit/4e16641ef4e159c4a11b500ac861b8fa8d9ff5d3\">https://github.com/fastly/js-compute-runtime/commit/4e16641ef4e159c4a11b500ac861b8fa8d9ff5d3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38375\">https://nvd.nist.gov/vuln/detail/CVE-2024-38375</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mp3g-vpm9-9vqv\">https://github.com/advisories/GHSA-mp3g-vpm9-9vqv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mp3g-vpm9-9vqv",
            "title": "[@fastly/js-compute] @fastly/js-compute has a use-after-free in some host call implementations",
            "date_modified": "2024-06-26T21:56:17.000Z",
            "date_published": "2024-06-26T19:12:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mp3g-vpm9-9vqv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Markdown-based comments in the ZenUML diagram syntax are susceptible to Cross-site Scripting (XSS).</p>\n<h3 id=\"details\">Details</h3>\n<p>The comment feature allows the user to attach small notes for reference. This feature allows the user to enter in their comment in markdown comment, allowing them to use common markdown features, such as <code>**</code> for bolded text. However, the markdown text is currently not sanitized before rendering, allowing an attacker to enter a malicious payload for the comment which leads to XSS.</p>\n<p><a href=\"https://github.com/mermaid-js/zenuml-core/blob/dcfee8cde42673c09e19401f43ad8506658c8442/src/components/DiagramFrame/SeqDiagram/MessageLayer/Block/Statement/Comment/Comment.vue#L65\">https://github.com/mermaid-js/zenuml-core/blob/dcfee8cde42673c09e19401f43ad8506658c8442/src/components/DiagramFrame/SeqDiagram/MessageLayer/Block/Statement/Comment/Comment.vue#L65</a></p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>// p&lt;img onerror=alert(1) src=\"\"/&gt;\nA-&gt;B:hi\n</code></pre>\n<p>Above is a POC diagram payload that results in an XSS.</p>\n<p>Here is a similar POC in mermaid.live: <a href=\"https://mermaid.live/edit#pako:eNpNjrFuwyAQhl8F3dRK1DaQGhs1kVq1Y6duFQsylwTVgEWw1MTyuxc5S7df39399y0wRIug4IZh9qMOdU2mF-dPJAZMKaa9GTHlB_ZILmnYa9BQH3R4fTq8qbMDCh6TN86WhkUHQjTkM3rUoEq0Jv2Ui7CWPTPn-HUNA6icZqQwT9ZkfHfmlIwHdTTjpVC0Lsf0eVfazChMJoBa4BdUL6uGC8n7TrCGd5zCFRRnXbVjvBVNK3gJXbtSuMVYSlnFC-Kyf961UshWbmXf2-y_xcf29c7WP2yrVC0\">https://mermaid.live/edit#pako:eNpNjrFuwyAQhl8F3dRK1DaQGhs1kVq1Y6duFQsylwTVgEWw1MTyuxc5S7df39399y0wRIug4IZh9qMOdU2mF-dPJAZMKaa9GTHlB_ZILmnYa9BQH3R4fTq8qbMDCh6TN86WhkUHQjTkM3rUoEq0Jv2Ui7CWPTPn-HUNA6icZqQwT9ZkfHfmlIwHdTTjpVC0Lsf0eVfazChMJoBa4BdUL6uGC8n7TrCGd5zCFRRnXbVjvBVNK3gJXbtSuMVYSlnFC-Kyf961UshWbmXf2-y_xcf29c7WP2yrVC0</a></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This puts existing applications that use ZenUML <strong>unsandboxed</strong> at risk of arbitrary JavaScript execution when rendering user-controlled diagrams.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mermaid-js/zenuml-core/security/advisories/GHSA-q6xv-jm4v-349h\">https://github.com/mermaid-js/zenuml-core/security/advisories/GHSA-q6xv-jm4v-349h</a></li>\n<li><a href=\"https://github.com/mermaid-js/zenuml-core/commit/ad7545b33f5f27466cbf357beb65969ca1953e3c\">https://github.com/mermaid-js/zenuml-core/commit/ad7545b33f5f27466cbf357beb65969ca1953e3c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38527\">https://nvd.nist.gov/vuln/detail/CVE-2024-38527</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6xv-jm4v-349h\">https://github.com/advisories/GHSA-q6xv-jm4v-349h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6xv-jm4v-349h",
            "title": "[@zenuml/core] Cross-site Scripting in ZenUML",
            "date_modified": "2024-06-26T21:56:15.000Z",
            "date_published": "2024-06-26T19:03:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6xv-jm4v-349h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>Versions <code>&lt;=8.5.1</code> of <code>jsonwebtoken</code> library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. </p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You are affected if you are using an algorithm and a key type other than the combinations mentioned below</p>\n<table>\n<thead>\n<tr>\n<th>Key type</th>\n<th>algorithm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ec</td>\n<td>ES256, ES384, ES512</td>\n</tr>\n<tr>\n<td>rsa</td>\n<td>RS256, RS384, RS512, PS256, PS384, PS512</td>\n</tr>\n<tr>\n<td>rsa-pss</td>\n<td>PS256, PS384, PS512</td>\n</tr>\n</tbody></table>\n<p>And for Elliptic Curve algorithms:</p>\n<table>\n<thead>\n<tr>\n<th><code>alg</code></th>\n<th>Curve</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ES256</td>\n<td>prime256v1</td>\n</tr>\n<tr>\n<td>ES384</td>\n<td>secp384r1</td>\n</tr>\n<tr>\n<td>ES512</td>\n<td>secp521r1</td>\n</tr>\n</tbody></table>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the <code>allowInvalidAsymmetricKeyTypes</code> option to <code>true</code> in the <code>sign()</code> and/or <code>verify()</code> functions.</p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>There will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,  use the  <code>allowInvalidAsymmetricKeyTypes</code> option  to <code>true</code> in the <code>sign()</code> and <code>verify()</code> functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23539\">https://nvd.nist.gov/vuln/detail/CVE-2022-23539</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20240621-0007\">https://security.netapp.com/advisory/ntap-20240621-0007</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cf7-32gw-wr33\">https://github.com/advisories/GHSA-8cf7-32gw-wr33</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33",
            "title": "[jsonwebtoken] jsonwebtoken unrestricted key type could lead to legacy keys usage ",
            "date_modified": "2024-06-24T21:23:39.000Z",
            "date_published": "2022-12-22T03:32:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It is possible to craft a command with newlines which would not be properly parsed. This would mean you could pass a string of commands as a channel name, which would then be run by the IRC bridge bot. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 1.0.1 and above are patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no robust workarounds to the bug. You can disable dynamic channels in the config to disable the most common execution method but others may exist. It is highly recommended to upgrade the bridge.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Discovered and reported by <a href=\"https://valentin-lorentz.fr/\">Val Lorentz</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@matrix.org\">security@matrix.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3\">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3\">https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1\">https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38690\">https://nvd.nist.gov/vuln/detail/CVE-2023-38690</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pmj-jqqp-2mj3\">https://github.com/advisories/GHSA-3pmj-jqqp-2mj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pmj-jqqp-2mj3",
            "title": "[matrix-appservice-irc] matrix-appservice-irc IRC command injection via admin commands containing newlines ",
            "date_modified": "2024-06-20T14:53:31.000Z",
            "date_published": "2023-08-04T17:26:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pmj-jqqp-2mj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s content extraction code. When using the <code>noneditable_regexp</code> option, specially crafted HTML attributes containing malicious code were able to be executed when content was extracted from the editor.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 7.2.0, TinyMCE 6.8.4 and TinyMCE 5.11.0 LTS by ensuring that, when using the <code>noneditable_regexp</code> option, any content within an attribute is properly verified to match the configured regular expression before being added.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 7.2.0 or higher.</li>\n<li>Upgrade to TinyMCE 6.8.4 or higher for TinyMCE 6.x.</li>\n<li>Upgrade to TinyMCE 5.11.0 LTS or higher for TinyMCE 5.x (only available as part of commercial <a href=\"https://www.tiny.cloud/long-term-support/\">long-term support</a> contract).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview\">TinyMCE 6.8.4</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview\">TinyMCE 7.2.0</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a></li>\n<li>Open an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-9hcv-j9pv-qmph\">https://github.com/tinymce/tinymce/security/advisories/GHSA-9hcv-j9pv-qmph</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/latest/7.2-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/latest/7.2-release-notes/#overview</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38356\">https://nvd.nist.gov/vuln/detail/CVE-2024-38356</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d\">https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/a9fb858509f86dacfa8b01cfd34653b408983ac0\">https://github.com/tinymce/tinymce/commit/a9fb858509f86dacfa8b01cfd34653b408983ac0</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/xss\">https://owasp.org/www-community/attacks/xss</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9hcv-j9pv-qmph\">https://github.com/advisories/GHSA-9hcv-j9pv-qmph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9hcv-j9pv-qmph",
            "title": "[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability using noneditable_regexp option",
            "date_modified": "2024-07-02T02:39:50.000Z",
            "date_published": "2024-06-19T15:07:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9hcv-j9pv-qmph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s content extraction code. When using the <code>noneditable_regexp</code> option, specially crafted HTML attributes containing malicious code were able to be executed when content was extracted from the editor.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 7.2.0, TinyMCE 6.8.4 and TinyMCE 5.11.0 LTS by ensuring that, when using the <code>noneditable_regexp</code> option, any content within an attribute is properly verified to match the configured regular expression before being added.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 7.2.0 or higher.</li>\n<li>Upgrade to TinyMCE 6.8.4 or higher for TinyMCE 6.x.</li>\n<li>Upgrade to TinyMCE 5.11.0 LTS or higher for TinyMCE 5.x (only available as part of commercial <a href=\"https://www.tiny.cloud/long-term-support/\">long-term support</a> contract).</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview\">TinyMCE 6.8.4</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview\">TinyMCE 7.2.0</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a></li>\n<li>Open an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-9hcv-j9pv-qmph\">https://github.com/tinymce/tinymce/security/advisories/GHSA-9hcv-j9pv-qmph</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/6/6.8.4-release-notes/#overview</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/latest/7.2-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/latest/7.2-release-notes/#overview</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-38356\">https://nvd.nist.gov/vuln/detail/CVE-2024-38356</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d\">https://github.com/tinymce/tinymce/commit/5acb741665a98e83d62b91713c800abbff43b00d</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/a9fb858509f86dacfa8b01cfd34653b408983ac0\">https://github.com/tinymce/tinymce/commit/a9fb858509f86dacfa8b01cfd34653b408983ac0</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/xss\">https://owasp.org/www-community/attacks/xss</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview\">https://www.tiny.cloud/docs/tinymce/7/7.2-release-notes/#overview</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9hcv-j9pv-qmph\">https://github.com/advisories/GHSA-9hcv-j9pv-qmph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9hcv-j9pv-qmph",
            "title": "[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability using noneditable_regexp option",
            "date_modified": "2024-07-02T02:39:50.000Z",
            "date_published": "2024-06-19T15:07:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9hcv-j9pv-qmph"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}