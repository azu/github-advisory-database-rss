{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35255\">https://nvd.nist.gov/vuln/detail/CVE-2024-35255</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499\">https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492\">https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178\">https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5vv-6r4h-3vj9\">https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5vv-6r4h-3vj9",
            "title": "[@azure/msal-node] Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability",
            "date_modified": "2024-06-11T19:57:02.000Z",
            "date_published": "2024-06-11T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5vv-6r4h-3vj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35255\">https://nvd.nist.gov/vuln/detail/CVE-2024-35255</a></li>\n<li><a href=\"https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255\">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499\">https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492\">https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492</a></li>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178\">https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5vv-6r4h-3vj9\">https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5vv-6r4h-3vj9",
            "title": "[@azure/identity] Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability",
            "date_modified": "2024-06-11T19:57:02.000Z",
            "date_published": "2024-06-11T18:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5vv-6r4h-3vj9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An arbitrary file upload vulnerability in the /v1/app/appendFileSync interface of Jan v0.4.12 allows attackers to execute arbitrary code via uploading a crafted file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37273\">https://nvd.nist.gov/vuln/detail/CVE-2024-37273</a></li>\n<li><a href=\"https://github.com/HackAllSec/CVEs/tree/main/Jan%20Arbitrary%20File%20Upload%20vulnerability\">https://github.com/HackAllSec/CVEs/tree/main/Jan%20Arbitrary%20File%20Upload%20vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-878h-rqcq-mv3x\">https://github.com/advisories/GHSA-878h-rqcq-mv3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-878h-rqcq-mv3x",
            "title": "[@janhq/core] Jan path traversal vulnerability",
            "date_modified": "2024-06-11T19:56:11.000Z",
            "date_published": "2024-06-04T21:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-878h-rqcq-mv3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An arbitrary file upload vulnerability in the /v1/app/writeFileSync interface of Jan v0.4.12 allows attackers to execute arbitrary code via uploading a crafted file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36858\">https://nvd.nist.gov/vuln/detail/CVE-2024-36858</a></li>\n<li><a href=\"https://github.com/HackAllSec/CVEs/tree/main/Jan%20Arbitrary%20File%20Upload%20vulnerability\">https://github.com/HackAllSec/CVEs/tree/main/Jan%20Arbitrary%20File%20Upload%20vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qfjh-mvq6-c5p8\">https://github.com/advisories/GHSA-qfjh-mvq6-c5p8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qfjh-mvq6-c5p8",
            "title": "[@janhq/core] Jan path traversal vulnerability",
            "date_modified": "2024-06-11T19:56:06.000Z",
            "date_published": "2024-06-04T21:32:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qfjh-mvq6-c5p8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jan v0.4.12 was discovered to contain an arbitrary file read vulnerability via the /v1/app/readFileSync interface.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36857\">https://nvd.nist.gov/vuln/detail/CVE-2024-36857</a></li>\n<li><a href=\"https://github.com/HackAllSec/CVEs/tree/main/Jan%20AFR%20vulnerability\">https://github.com/HackAllSec/CVEs/tree/main/Jan%20AFR%20vulnerability</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jqc-qj57-4hrc\">https://github.com/advisories/GHSA-5jqc-qj57-4hrc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jqc-qj57-4hrc",
            "title": "[@janhq/core] Jan path traversal vulnerability",
            "date_modified": "2024-06-11T19:29:49.000Z",
            "date_published": "2024-06-04T21:32:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jqc-qj57-4hrc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>\n<ol>\n<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>\n<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650\">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3\">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb\">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37168\">https://nvd.nist.gov/vuln/detail/CVE-2024-37168</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86",
            "title": "[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits",
            "date_modified": "2024-06-11T18:28:03.000Z",
            "date_published": "2024-06-10T21:38:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>\n<ol>\n<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>\n<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650\">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3\">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb\">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37168\">https://nvd.nist.gov/vuln/detail/CVE-2024-37168</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86",
            "title": "[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits",
            "date_modified": "2024-06-11T18:28:03.000Z",
            "date_published": "2024-06-10T21:38:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>\n<ol>\n<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>\n<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650\">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3\">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>\n<li><a href=\"https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb\">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37168\">https://nvd.nist.gov/vuln/detail/CVE-2024-37168</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v5v-9h63-cj86\">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86",
            "title": "[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits",
            "date_modified": "2024-06-11T18:28:03.000Z",
            "date_published": "2024-06-10T21:38:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v5v-9h63-cj86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>It is possible to introduce user-controlled JavaScript code and trigger a Cross-Site Scripting (XSS) vulnerability in some cases.</p>\n<h2 id=\"actions-taken\">Actions Taken</h2>\n<ul>\n<li>Updated the documentation to clarify that while <code>ghtml</code> escapes characters with special meaning in HTML, it does not provide comprehensive protection against all types of XSS attacks in every scenario. <strong><em>This aligns with the approach taken by other template engines. Developers should be cautious and take additional measures to sanitize user input and prevent potential vulnerabilities.</em></strong> More reading: <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\">https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</a></li>\n<li>The backtick character (`) is now also escaped to prevent the creation of strings in most cases where a malicious actor somehow gains the ability to write JavaScript. This does not provide comprehensive protection either.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gurgunday/ghtml/security/advisories/GHSA-vvhj-v88f-5gxr\">https://github.com/gurgunday/ghtml/security/advisories/GHSA-vvhj-v88f-5gxr</a></li>\n<li><a href=\"https://github.com/gurgunday/ghtml/commit/df1ea50fe8968a766fd2b9379a8f9806375227f8\">https://github.com/gurgunday/ghtml/commit/df1ea50fe8968a766fd2b9379a8f9806375227f8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37166\">https://nvd.nist.gov/vuln/detail/CVE-2024-37166</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vvhj-v88f-5gxr\">https://github.com/advisories/GHSA-vvhj-v88f-5gxr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vvhj-v88f-5gxr",
            "title": "[ghtml] ghtml Cross-Site Scripting (XSS) vulnerability",
            "date_modified": "2024-06-11T18:27:52.000Z",
            "date_published": "2024-06-10T21:36:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vvhj-v88f-5gxr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The NPM package <code>braces</code> fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In <code>lib/parse.js,</code> if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-4068\">https://nvd.nist.gov/vuln/detail/CVE-2024-4068</a></li>\n<li><a href=\"https://github.com/micromatch/braces/issues/35\">https://github.com/micromatch/braces/issues/35</a></li>\n<li><a href=\"https://devhub.checkmarx.com/cve-details/CVE-2024-4068\">https://devhub.checkmarx.com/cve-details/CVE-2024-4068</a></li>\n<li><a href=\"https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308\">https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308</a></li>\n<li><a href=\"https://github.com/micromatch/braces/pull/37\">https://github.com/micromatch/braces/pull/37</a></li>\n<li><a href=\"https://github.com/micromatch/braces/pull/40\">https://github.com/micromatch/braces/pull/40</a></li>\n<li><a href=\"https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff\">https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-grv7-fg5c-xmjg\">https://github.com/advisories/GHSA-grv7-fg5c-xmjg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-grv7-fg5c-xmjg",
            "title": "[braces] Uncontrolled resource consumption in braces",
            "date_modified": "2024-06-10T20:17:26.000Z",
            "date_published": "2024-05-14T18:30:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-grv7-fg5c-xmjg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/dom] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\"); \n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef\">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/dom] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-06-10T20:13:00.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In lunary-ai/lunary version v1.2.13, an improper authorization vulnerability exists that allows unauthorized users to access and manipulate projects within an organization they should not have access to. Specifically, the vulnerability is located in the <code>checkProjectAccess</code> method within the authorization middleware, which fails to adequately verify if a user has the correct permissions to access a specific project. Instead, it only checks if the user is part of the organization owning the project, overlooking the necessary check against the <code>account_project</code> table for explicit project access rights. This flaw enables attackers to gain complete control over all resources within a project, including the ability to create, update, read, and delete any resource, compromising the privacy and security of sensitive information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-4146\">https://nvd.nist.gov/vuln/detail/CVE-2024-4146</a></li>\n<li><a href=\"https://github.com/lunary-ai/lunary/commit/c43b6c62035f32ca455f66d5fd22ba661648cde7\">https://github.com/lunary-ai/lunary/commit/c43b6c62035f32ca455f66d5fd22ba661648cde7</a></li>\n<li><a href=\"https://huntr.com/bounties/a749e696-b398-4260-b2d0-b0054b9fffa7\">https://huntr.com/bounties/a749e696-b398-4260-b2d0-b0054b9fffa7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w5xm-mx47-v7c8\">https://github.com/advisories/GHSA-w5xm-mx47-v7c8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w5xm-mx47-v7c8",
            "title": "[lunary] lunary-ai/lunary allows users unauthorized access to projects",
            "date_modified": "2024-06-10T15:33:08.000Z",
            "date_published": "2024-06-08T21:30:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w5xm-mx47-v7c8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users are impacted. The zsa application transfers the parse error stack from the server to the client in production build mode. This can potentially reveal sensitive information about the server environment, such as the machine username and directory paths. An attacker could exploit this vulnerability to gain unauthorized access to sensitive server information. This information could be used to plan further attacks or gain a deeper understanding of the server infrastructure.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Yes, this has been pathed on <code>0.3.3</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No way to fix other than the patch.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IdoPesok/zsa/security/advisories/GHSA-wjmj-h3xc-hxp8\">https://github.com/IdoPesok/zsa/security/advisories/GHSA-wjmj-h3xc-hxp8</a></li>\n<li><a href=\"https://github.com/IdoPesok/zsa/commit/86b86b282bde6780963f62406cc8bc65f2c86f3a\">https://github.com/IdoPesok/zsa/commit/86b86b282bde6780963f62406cc8bc65f2c86f3a</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37162\">https://nvd.nist.gov/vuln/detail/CVE-2024-37162</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjmj-h3xc-hxp8\">https://github.com/advisories/GHSA-wjmj-h3xc-hxp8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjmj-h3xc-hxp8",
            "title": "[zsa] Generation of Error Message Containing Sensitive Information in zsa",
            "date_modified": "2024-06-07T15:49:20.000Z",
            "date_published": "2024-06-06T22:58:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjmj-h3xc-hxp8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All users of url-to-png. Please see <a href=\"https://github.com/jasonraimondi/url-to-png/issues/47\">https://github.com/jasonraimondi/url-to-png/issues/47</a></p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/jasonraimondi/url-to-png/releases/tag/v2.0.3\">v2.0.3</a> requires input url to be of protocol <code>http</code> or <code>https</code> </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Requires upgrade.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jasonraimondi/url-to-png/issues/47\">https://github.com/jasonraimondi/url-to-png/issues/47</a></li>\n<li><a href=\"https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf\">https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jasonraimondi/url-to-png/security/advisories/GHSA-665w-mwrr-77q3\">https://github.com/jasonraimondi/url-to-png/security/advisories/GHSA-665w-mwrr-77q3</a></li>\n<li><a href=\"https://github.com/jasonraimondi/url-to-png/issues/47\">https://github.com/jasonraimondi/url-to-png/issues/47</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37169\">https://nvd.nist.gov/vuln/detail/CVE-2024-37169</a></li>\n<li><a href=\"https://github.com/jasonraimondi/url-to-png/commit/9336020c5e603323f5cf4a2ac3bb9a7735cf61f7\">https://github.com/jasonraimondi/url-to-png/commit/9336020c5e603323f5cf4a2ac3bb9a7735cf61f7</a></li>\n<li><a href=\"https://github.com/jasonraimondi/url-to-png/releases/tag/v2.0.3\">https://github.com/jasonraimondi/url-to-png/releases/tag/v2.0.3</a></li>\n<li><a href=\"https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf\">https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-665w-mwrr-77q3\">https://github.com/advisories/GHSA-665w-mwrr-77q3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-665w-mwrr-77q3",
            "title": "[@jmondi/url-to-png] Arbitrary file read via Playwright's screenshot feature exploiting file wrapper",
            "date_modified": "2024-06-11T18:27:02.000Z",
            "date_published": "2024-06-05T13:29:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-665w-mwrr-77q3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"withdrawn-advisory\">Withdrawn Advisory</h2>\n<p>This advisory has been withdrawn because the <a href=\"https://www.npmjs.com/package/effect\">npm package effect</a>, for which alerts were issued, does not correspond with <a href=\"https://github.com/Javascipt/effect\">https://github.com/Javascipt/effect</a>, the repository with the vulnerable code. <a href=\"https://github.com/Javascipt/effect\">https://github.com/Javascipt/effect</a> is not in any <a href=\"https://docs.github.com/en/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-the-github-advisory-database#github-reviewed-advisories\">supported ecosystem</a>.</p>\n<p>Additionally, the CVE Numbering Authority that issued the CVE for CVE-2020-7624 has updated <a href=\"https://snyk.io/vuln/SNYK-JS-EFFECT-564256\">their advisory</a> stating that \"This was deemed not a vulnerability.\"</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>effect through 1.0.4 is vulnerable to Command Injection. It allows execution of arbitrary command via the options argument.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7624\">https://nvd.nist.gov/vuln/detail/CVE-2020-7624</a></li>\n<li><a href=\"https://github.com/Javascipt/effect/blob/master/helper.js#L24,\">https://github.com/Javascipt/effect/blob/master/helper.js#L24,</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-EFFECT-564256\">https://snyk.io/vuln/SNYK-JS-EFFECT-564256</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hr9-4692-fch9\">https://github.com/advisories/GHSA-6hr9-4692-fch9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hr9-4692-fch9",
            "title": "[effect] Withdrawn Advisory: OS Command Injection in effect",
            "date_modified": "2024-06-04T18:25:01.000Z",
            "date_published": "2022-02-10T23:45:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hr9-4692-fch9"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}