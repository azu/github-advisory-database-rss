{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAnyone who might have used Soketi with the <code>cluster</code> driver (or through PM2).</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\nGet the latest version of Soketi.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nNone. It's advised to upgrade to the latest version.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/issues/533\">https://github.com/patriksimek/vm2/issues/533</a></li>\n<li><a href=\"https://github.com/Unitech/pm2/issues/5643\">https://github.com/Unitech/pm2/issues/5643</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5\">https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5</a></li>\n<li><a href=\"https://github.com/Unitech/pm2/issues/5643\">https://github.com/Unitech/pm2/issues/5643</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/issues/533\">https://github.com/patriksimek/vm2/issues/533</a></li>\n<li><a href=\"https://github.com/soketi/soketi/pull/927\">https://github.com/soketi/soketi/pull/927</a></li>\n<li><a href=\"https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a\">https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>\n<li><a href=\"https://github.com/soketi/soketi/releases/tag/1.6.0\">https://github.com/soketi/soketi/releases/tag/1.6.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6w6-h933-4rc5\">https://github.com/advisories/GHSA-g6w6-h933-4rc5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6w6-h933-4rc5",
            "title": "[@soketi/soketi] Soketi was exposed to Sandbox Escape vulnerability via vm2",
            "date_modified": "2023-08-03T19:44:53.000Z",
            "date_published": "2023-08-03T19:44:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6w6-h933-4rc5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3225\">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>\n<li><a href=\"https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df\">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>\n<li><a href=\"https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245\">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>\n<li><a href=\"https://github.com/Budibase/budibase/releases/tag/v1.3.20\">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x92g-49gh-63qm\">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm",
            "title": "[@budibase/bbui] Budibase Improper Access Control vulnerability",
            "date_modified": "2023-08-03T16:41:40.000Z",
            "date_published": "2022-09-17T00:00:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3225\">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>\n<li><a href=\"https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df\">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>\n<li><a href=\"https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245\">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>\n<li><a href=\"https://github.com/Budibase/budibase/releases/tag/v1.3.20\">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x92g-49gh-63qm\">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm",
            "title": "[@budibase/builder] Budibase Improper Access Control vulnerability",
            "date_modified": "2023-08-03T16:41:40.000Z",
            "date_published": "2022-09-17T00:00:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3225\">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>\n<li><a href=\"https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df\">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>\n<li><a href=\"https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245\">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>\n<li><a href=\"https://github.com/Budibase/budibase/releases/tag/v1.3.20\">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x92g-49gh-63qm\">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm",
            "title": "[@budibase/worker] Budibase Improper Access Control vulnerability",
            "date_modified": "2023-08-03T16:41:40.000Z",
            "date_published": "2022-09-17T00:00:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x92g-49gh-63qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Wrangler command line tool (&lt;=<a href=\"mailto:wrangler@3.1.0\">wrangler@3.1.0</a>) was affected by a directory traversal vulnerability when running a local development server for Pages (wrangler pages dev command). This vulnerability enabled an attacker in the same network as the victim to connect to the local development server and access the victim's files present outside of the directory for the development server.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to <a href=\"mailto:wrangler@3.1.1\">wrangler@3.1.1</a> or higher.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/cloudflare/workers-sdk\">Workers SDK on Github</a>\n<a href=\"https://developers.cloudflare.com/workers/wrangler/\">Wrangler docs</a>\n<a href=\"https://www.cve.org/CVERecord?id=CVE-2023-3348\">CVE-2023-3348</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/workers-sdk/security/advisories/GHSA-8c93-4hch-xgxp\">https://github.com/cloudflare/workers-sdk/security/advisories/GHSA-8c93-4hch-xgxp</a></li>\n<li><a href=\"https://github.com/cloudflare/workers-sdk/pull/3498\">https://github.com/cloudflare/workers-sdk/pull/3498</a></li>\n<li><a href=\"https://github.com/cloudflare/workers-sdk/commit/fddffdf0c23d2ca56f2139a2c6bc278052594cba\">https://github.com/cloudflare/workers-sdk/commit/fddffdf0c23d2ca56f2139a2c6bc278052594cba</a></li>\n<li><a href=\"https://github.com/cloudflare/workers-sdk/releases/tag/wrangler%403.1.1\">https://github.com/cloudflare/workers-sdk/releases/tag/wrangler%403.1.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-3348\">https://nvd.nist.gov/vuln/detail/CVE-2023-3348</a></li>\n<li><a href=\"https://developers.cloudflare.com/workers/wrangler/\">https://developers.cloudflare.com/workers/wrangler/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c93-4hch-xgxp\">https://github.com/advisories/GHSA-8c93-4hch-xgxp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c93-4hch-xgxp",
            "title": "[wrangler] Cloudflare Wrangler directory traversal vulnerability",
            "date_modified": "2023-08-03T19:39:50.000Z",
            "date_published": "2023-08-03T16:34:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c93-4hch-xgxp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>request</code> package through 2.88.2 for Node.js and the <code>@cypress/request</code> package through 2.88.12 allow a bypass of SSRF mitigations via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).</p>\n<p>NOTE: The <code>request</code> package is no longer supported by the maintainer.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28155\">https://nvd.nist.gov/vuln/detail/CVE-2023-28155</a></li>\n<li><a href=\"https://github.com/request/request/issues/3442\">https://github.com/request/request/issues/3442</a></li>\n<li><a href=\"https://github.com/request/request/pull/3444\">https://github.com/request/request/pull/3444</a></li>\n<li><a href=\"https://doyensec.com/resources/Doyensec_Advisory_RequestSSRF_Q12023.pdf\">https://doyensec.com/resources/Doyensec_Advisory_RequestSSRF_Q12023.pdf</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20230413-0007/\">https://security.netapp.com/advisory/ntap-20230413-0007/</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/2500\">https://github.com/github/advisory-database/pull/2500</a></li>\n<li><a href=\"https://github.com/cypress-io/request/blob/master/lib/redirect.js#L116\">https://github.com/cypress-io/request/blob/master/lib/redirect.js#L116</a></li>\n<li><a href=\"https://github.com/request/request/blob/master/lib/redirect.js#L111\">https://github.com/request/request/blob/master/lib/redirect.js#L111</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8p7-x288-28g6\">https://github.com/advisories/GHSA-p8p7-x288-28g6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8p7-x288-28g6",
            "title": "[@cypress/request] Server-Side Request Forgery in Request",
            "date_modified": "2023-08-02T23:08:48.000Z",
            "date_published": "2023-03-16T15:30:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8p7-x288-28g6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>According to the documentation, controllers are allowed to register new domains and extend the expiry of existing domains, but they cannot change the ownership or reduce the expiration time of existing domains. However, a preliminary analysis suggests that an attacker-controlled controller may be able to reduce the expiration time of existing domains due to an integer overflow in the renew function.</p>\n<p>The vulnerability resides in the following GitHub repository: <a href=\"https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171\">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a> </p>\n<p>The vulnerable line of code is:</p>\n<pre><code>require(\n            expiries[id] + duration + GRACE_PERIOD &gt; duration + GRACE_PERIOD\n        ); // Prevent future overflow\n</code></pre>\n<p>In this code snippet, the <code>duration</code> variable is user-supplied, making it possible to provide a value that would cause an overflow on both sides of the '&gt;' expression, ultimately rendering the condition true. Specifically, when the duration is set to <code>2^256 - GRACE_PERIOD</code>, the subsequent line <code>expiries[id] += duration;</code> also experiences an overflow, as <code>expiries[id]</code> is greater than <code>GRACE_PERIOD</code>. This results in the reduction of <code>expiries[id]</code> by <code>GRACE_PERIOD</code>. By repeatedly calling the renew function, an attacker could potentially force the expiration of an ENS record.</p>\n<p>You can find the PoC included in the attached document. To execute the test, please use the following command:</p>\n<pre><code>forge test -vvv --match-contract RegistrarExploit --fork-url &lt;alchemy_url&gt;\n</code></pre>\n<p>Replace <code>&lt;alchemy_url&gt;</code> with your Alchemy API URL. This command will run the Foundry test file and demonstrate the potential vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If successfully exploited, this vulnerability would enable attackers to force the expiration of any ENS record, ultimately allowing them to claim the affected domains for themselves.</p>\n<p>Currently, it would require a malicious DAO to exploit it. Nevertheless, any vulnerability present in the controllers could potentially render this issue exploitable in the future.</p>\n<p>An additional concern is the possibility of renewal discounts. Should ENS decide to implement a system that offers unlimited .eth domains for a fixed fee in the future, the vulnerability could become exploitable by any user due to the reduced attack cost.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A mitigation is being developed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As long as registration cost remains linear or superlinear based on registration duration, or limited to a reasonable maximum (eg, 1 million years), this vulnerability could only be exploited by a malicious DAO. The interim workaround is thus to take no action.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3\">https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3</a></li>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca\">https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca</a></li>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171\">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrxv-q8m4-wch3\">https://github.com/advisories/GHSA-rrxv-q8m4-wch3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrxv-q8m4-wch3",
            "title": "[@ensdomains/ens-contracts] .eth registrar controller can shorten the duration of registered names",
            "date_modified": "2023-08-01T19:48:32.000Z",
            "date_published": "2023-08-01T19:48:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrxv-q8m4-wch3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package underscore-keypath from 0.0.11 are vulnerable to Prototype Pollution via the name argument of the <code>setProperty()</code> function. Exploiting this vulnerability is possible due to improper input sanitization which allows the usage of arguments like <code>__proto__</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26139\">https://nvd.nist.gov/vuln/detail/CVE-2023-26139</a></li>\n<li><a href=\"https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252\">https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714\">https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gpvc-mx6g-cchv\">https://github.com/advisories/GHSA-gpvc-mx6g-cchv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gpvc-mx6g-cchv",
            "title": "[underscore-keypath] underscore-keypath vulnerable to Prototype Pollution",
            "date_modified": "2023-08-01T19:47:11.000Z",
            "date_published": "2023-08-01T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gpvc-mx6g-cchv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The is-svg package 2.1.0 through 4.2.1 for Node.js uses a regular expression that is vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, is-svg will get stuck processing the input for a very long time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-28092\">https://nvd.nist.gov/vuln/detail/CVE-2021-28092</a></li>\n<li><a href=\"https://github.com/sindresorhus/is-svg/commit/01f8a087fab8a69c3ac9085fbb16035907ab6a5b\">https://github.com/sindresorhus/is-svg/commit/01f8a087fab8a69c3ac9085fbb16035907ab6a5b</a></li>\n<li><a href=\"https://github.com/sindresorhus/is-svg/releases\">https://github.com/sindresorhus/is-svg/releases</a></li>\n<li><a href=\"https://github.com/sindresorhus/is-svg/releases/tag/v4.2.2\">https://github.com/sindresorhus/is-svg/releases/tag/v4.2.2</a></li>\n<li><a href=\"https://www.npmjs.com/package/is-svg\">https://www.npmjs.com/package/is-svg</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210513-0008/\">https://security.netapp.com/advisory/ntap-20210513-0008/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7r28-3m3f-r2pr\">https://github.com/advisories/GHSA-7r28-3m3f-r2pr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7r28-3m3f-r2pr",
            "title": "[is-svg] Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2023-08-01T19:25:13.000Z",
            "date_published": "2021-03-19T21:25:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7r28-3m3f-r2pr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/win-x64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/macos-x64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/macos-arm64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/linuxstatic-arm64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/linux-x64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/linux-arm64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/exe] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[pnpm] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/cafs] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/win-x64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>\n<h3 id=\"details\">Details</h3>\n<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>\n<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>\n<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Create a root folder with the following layout:</p>\n<ul>\n<li><code>a/package.json</code></li>\n<li><code>package/package.json</code></li>\n<li><code>z/package.json</code></li>\n</ul>\n<p>File contents:</p>\n<h4 id=\"apackagejson\">a/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^15\"\n    }\n}\n</code></pre>\n<h4 id=\"packagepackagejson\">package/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is a bad version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^16\"\n    }\n}\n</code></pre>\n<h4 id=\"zpackagejson\">z/package.json</h4>\n<pre><code class=\"language-json\">{\n    \"name\": \"test-package\",\n    \"version\": \"0.1.0\",\n    \"description\": \"This is the good version of a test package\",\n    \"dependencies\": {\n        \"react\": \"^17\"\n    }\n}\n</code></pre>\n<p>Then use the tar binary to produce a tarball (working directory is the root folder):\n<code>tar -c -z --format ustar -f package.tgz a package z</code>\nThe order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>\n<p>Install the tarball via the <code>file:</code> protocol.</p>\n<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-37478\">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v7.33.4\">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>\n<li><a href=\"https://github.com/pnpm/pnpm/releases/tag/v8.6.8\">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r98-f33j-g8h7\">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7",
            "title": "[@pnpm/macos-x64] pnpm incorrectly parses tar archives relative to specification",
            "date_modified": "2023-08-01T17:00:56.000Z",
            "date_published": "2023-08-01T17:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r98-f33j-g8h7"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}