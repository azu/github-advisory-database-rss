{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>All versions of the package node-bluetooth are vulnerable to Buffer Overflow via the findSerialPortChannel method due to improper user input length validation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26110\">https://nvd.nist.gov/vuln/detail/CVE-2023-26110</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NODEBLUETOOTH-3311821\">https://security.snyk.io/vuln/SNYK-JS-NODEBLUETOOTH-3311821</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cxx3-36qc-m6qm\">https://github.com/advisories/GHSA-cxx3-36qc-m6qm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cxx3-36qc-m6qm",
            "title": "[node-bluetooth] node-bluetooth is vulnerable to Buffer Overflow via the findSerialPortChannel method due to improper user input length validation",
            "date_modified": "2023-03-09T20:16:25.000Z",
            "date_published": "2023-03-09T06:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cxx3-36qc-m6qm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary <code>stat</code> calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the <code>node-tar</code> directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where <code>node-tar</code> checks for symlinks occur.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass <code>node-tar</code> symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.2.3 || 4.4.15 || 5.0.7 || 6.1.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom <code>filter</code> method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw</a></li>\n<li><a href=\"https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1771\">https://www.npmjs.com/advisories/1771</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32803\">https://nvd.nist.gov/vuln/detail/CVE-2021-32803</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356\">https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571\">https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349\">https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/advisories/GHSA-r628-mhmh-qjhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning",
            "date_modified": "2023-03-09T16:44:58.000Z",
            "date_published": "2021-08-03T19:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary <code>stat</code> calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the <code>node-tar</code> directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where <code>node-tar</code> checks for symlinks occur.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass <code>node-tar</code> symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.2.3 || 4.4.15 || 5.0.7 || 6.1.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom <code>filter</code> method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw</a></li>\n<li><a href=\"https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1771\">https://www.npmjs.com/advisories/1771</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32803\">https://nvd.nist.gov/vuln/detail/CVE-2021-32803</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356\">https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571\">https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349\">https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/advisories/GHSA-r628-mhmh-qjhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning",
            "date_modified": "2023-03-09T16:44:58.000Z",
            "date_published": "2021-08-03T19:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary <code>stat</code> calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the <code>node-tar</code> directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where <code>node-tar</code> checks for symlinks occur.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass <code>node-tar</code> symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.2.3 || 4.4.15 || 5.0.7 || 6.1.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom <code>filter</code> method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw</a></li>\n<li><a href=\"https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1771\">https://www.npmjs.com/advisories/1771</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32803\">https://nvd.nist.gov/vuln/detail/CVE-2021-32803</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356\">https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571\">https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349\">https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/advisories/GHSA-r628-mhmh-qjhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning",
            "date_modified": "2023-03-09T16:44:58.000Z",
            "date_published": "2021-08-03T19:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks.  Additionally, in order to prevent unnecessary <code>stat</code> calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the <code>node-tar</code> directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where <code>node-tar</code> checks for symlinks occur.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass <code>node-tar</code> symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>3.2.3 || 4.4.15 || 5.0.7 || 6.1.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom <code>filter</code> method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patch versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/npm/node-tar/security/advisories/GHSA-r628-mhmh-qjhw</a></li>\n<li><a href=\"https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/npm/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1771\">https://www.npmjs.com/advisories/1771</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32803\">https://nvd.nist.gov/vuln/detail/CVE-2021-32803</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356\">https://github.com/isaacs/node-tar/commit/46fe35083e2676e31c4e0a81639dce6da7aaa356</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571\">https://github.com/isaacs/node-tar/commit/5987d9a41f6bfbf1ddab1098e1fdcf1a5618f571</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349\">https://github.com/isaacs/node-tar/commit/85d3a942b4064e4ff171f91696fced7975167349</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20\">https://github.com/isaacs/node-tar/commit/9dbdeb6df8e9dbd96fa9e84341b9d74734be6c20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r628-mhmh-qjhw\">https://github.com/advisories/GHSA-r628-mhmh-qjhw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning",
            "date_modified": "2023-03-09T16:44:58.000Z",
            "date_published": "2021-08-03T19:00:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r628-mhmh-qjhw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Development IL ecdh before 0.2.0, an attacker can send an invalid point (not on the curve) as the public key, and obtain the derived shared secret.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-44310\">https://nvd.nist.gov/vuln/detail/CVE-2022-44310</a></li>\n<li><a href=\"https://github.com/developmentil/ecdh/issues/3\">https://github.com/developmentil/ecdh/issues/3</a></li>\n<li><a href=\"https://github.com/developmentil/ecdh/pull/4\">https://github.com/developmentil/ecdh/pull/4</a></li>\n<li><a href=\"https://github.com/developmentil/ecdh/commit/ef4560e7233f4e8107a17a77bc540121599c78fa\">https://github.com/developmentil/ecdh/commit/ef4560e7233f4e8107a17a77bc540121599c78fa</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2hp-3wv3-4w74\">https://github.com/advisories/GHSA-p2hp-3wv3-4w74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2hp-3wv3-4w74",
            "title": "[ecdh] ecdh vulnerable to Exposure of Resource to Wrong Sphere",
            "date_modified": "2023-03-08T17:22:31.000Z",
            "date_published": "2023-02-24T21:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2hp-3wv3-4w74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users with read access to the <code>password</code> field in <code>directus_users</code> can extract the argon2 password hashes by brute forcing the export functionality combined with a <code>_starts_with</code> filter. This allows the user to enumerate the password hashes.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched by preventing any hashed/concealed field to be filtered against with the <code>_starts_with</code> or other string operator.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensuring that no user has <code>read</code> access to the <code>password</code> field in <code>directus_users</code> is sufficient to prevent this vulnerability. </p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open a Discussion in <a href=\"https://github.com/directus/directus/discussions/new\">directus/directus</a></li>\n<li>Email us at <a href=\"mailto:security@directus.io\">security@directus.io</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-m5q3-8wgf-x8xf\">https://github.com/directus/directus/security/advisories/GHSA-m5q3-8wgf-x8xf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27481\">https://nvd.nist.gov/vuln/detail/CVE-2023-27481</a></li>\n<li><a href=\"https://github.com/directus/directus/pull/14829\">https://github.com/directus/directus/pull/14829</a></li>\n<li><a href=\"https://github.com/directus/directus/pull/15010\">https://github.com/directus/directus/pull/15010</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5q3-8wgf-x8xf\">https://github.com/advisories/GHSA-m5q3-8wgf-x8xf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5q3-8wgf-x8xf",
            "title": "[directus] Directus vulnerable to extraction of password hashes through export querying",
            "date_modified": "2023-03-08T17:13:06.000Z",
            "date_published": "2023-03-08T17:13:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5q3-8wgf-x8xf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.</p>\n<p>This vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lodash/lodash/issues/4744\">https://github.com/lodash/lodash/issues/4744</a></li>\n<li><a href=\"https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12\">https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1523\">https://www.npmjs.com/advisories/1523</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8203\">https://nvd.nist.gov/vuln/detail/CVE-2020-8203</a></li>\n<li><a href=\"https://hackerone.com/reports/712065\">https://hackerone.com/reports/712065</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200724-0006/\">https://security.netapp.com/advisory/ntap-20200724-0006/</a></li>\n<li><a href=\"https://github.com/lodash/lodash/issues/4874\">https://github.com/lodash/lodash/issues/4874</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://www.oracle.com//security-alerts/cpujul2021.html\">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2022.html\">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p6mc-m468-83gw\">https://github.com/advisories/GHSA-p6mc-m468-83gw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p6mc-m468-83gw",
            "title": "[lodash-es] Prototype Pollution in lodash",
            "date_modified": "2023-03-08T05:05:35.000Z",
            "date_published": "2020-07-15T19:15:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p6mc-m468-83gw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of lodash prior to 4.17.19 are vulnerable to Prototype Pollution. The function zipObjectDeep allows a malicious user to modify the prototype of Object if the property identifiers are user-supplied. Being affected by this issue requires zipping objects based on user-provided property arrays.</p>\n<p>This vulnerability causes the addition or modification of an existing property that will exist on all objects and may lead to Denial of Service or Code Execution under specific circumstances.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lodash/lodash/issues/4744\">https://github.com/lodash/lodash/issues/4744</a></li>\n<li><a href=\"https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12\">https://github.com/lodash/lodash/commit/c84fe82760fb2d3e03a63379b297a1cc1a2fce12</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1523\">https://www.npmjs.com/advisories/1523</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8203\">https://nvd.nist.gov/vuln/detail/CVE-2020-8203</a></li>\n<li><a href=\"https://hackerone.com/reports/712065\">https://hackerone.com/reports/712065</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200724-0006/\">https://security.netapp.com/advisory/ntap-20200724-0006/</a></li>\n<li><a href=\"https://github.com/lodash/lodash/issues/4874\">https://github.com/lodash/lodash/issues/4874</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://www.oracle.com//security-alerts/cpujul2021.html\">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2022.html\">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2022.html\">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p6mc-m468-83gw\">https://github.com/advisories/GHSA-p6mc-m468-83gw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p6mc-m468-83gw",
            "title": "[lodash] Prototype Pollution in lodash",
            "date_modified": "2023-03-08T05:05:35.000Z",
            "date_published": "2020-07-15T19:15:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p6mc-m468-83gw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package @nestjs/core before 9.0.5 are vulnerable to Information Exposure via the StreamableFile pipe. Exploiting this vulnerability is possible when the client cancels a request while it is streaming a StreamableFile, the stream wrapped by the StreamableFile will be kept open.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26108\">https://nvd.nist.gov/vuln/detail/CVE-2023-26108</a></li>\n<li><a href=\"https://github.com/nestjs/nest/issues/9759\">https://github.com/nestjs/nest/issues/9759</a></li>\n<li><a href=\"https://github.com/nestjs/nest/pull/9819\">https://github.com/nestjs/nest/pull/9819</a></li>\n<li><a href=\"https://github.com/nestjs/nest/pull/9819/commits/f59cf5e81ca73bcdf1b5b36713550fd93918db41\">https://github.com/nestjs/nest/pull/9819/commits/f59cf5e81ca73bcdf1b5b36713550fd93918db41</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NESTJSCORE-2869127\">https://security.snyk.io/vuln/SNYK-JS-NESTJSCORE-2869127</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4jpv-8r57-pv7j\">https://github.com/advisories/GHSA-4jpv-8r57-pv7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4jpv-8r57-pv7j",
            "title": "[@nestjs/core] @nestjs/core vulnerable to Information Exposure via StreamableFile pipe",
            "date_modified": "2023-03-08T00:10:03.000Z",
            "date_published": "2023-03-06T06:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4jpv-8r57-pv7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Instances relying on an allow-listed reset URL are vulnerable to an HTML injection attack through the use of query parameters in the reset URL. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved and released under version 9.23.0. People relying on a custom password reset URL should upgrade to 9.23.0 or later, or remove the custom reset url from the configured allow list.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the custom reset URL allow list.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-4hmq-ggrm-qfc6\">https://github.com/directus/directus/security/advisories/GHSA-4hmq-ggrm-qfc6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27474\">https://nvd.nist.gov/vuln/detail/CVE-2023-27474</a></li>\n<li><a href=\"https://github.com/directus/directus/issues/17119\">https://github.com/directus/directus/issues/17119</a></li>\n<li><a href=\"https://github.com/directus/directus/pull/17120\">https://github.com/directus/directus/pull/17120</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4hmq-ggrm-qfc6\">https://github.com/advisories/GHSA-4hmq-ggrm-qfc6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4hmq-ggrm-qfc6",
            "title": "[directus] directus vulnerable to HTML Injection in Password Reset email to custom Reset URL",
            "date_modified": "2023-03-07T20:35:54.000Z",
            "date_published": "2023-03-07T20:35:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4hmq-ggrm-qfc6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package dot-lens are vulnerable to Prototype Pollution via the <code>set()</code> function in <code>index.js</code> file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26106\">https://nvd.nist.gov/vuln/detail/CVE-2023-26106</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-DOTLENS-3227646\">https://security.snyk.io/vuln/SNYK-JS-DOTLENS-3227646</a></li>\n<li><a href=\"https://github.com/jb55/dot-lens/blob/465ef2088e4065b7be1c4372eedd2215c3820bc4/index.js#23L70\">https://github.com/jb55/dot-lens/blob/465ef2088e4065b7be1c4372eedd2215c3820bc4/index.js#23L70</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmhg-2cvv-q7vx\">https://github.com/advisories/GHSA-rmhg-2cvv-q7vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmhg-2cvv-q7vx",
            "title": "[dot-lens] dot-lens vulnerable to Prototype Pollution",
            "date_modified": "2023-03-07T20:32:04.000Z",
            "date_published": "2023-03-06T06:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmhg-2cvv-q7vx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package sketchsvg are vulnerable to Arbitrary Code Injection when invoking <code>shell.exec</code> without sanitization nor parametrization while concatenating the current directory as part of the command string.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26107\">https://nvd.nist.gov/vuln/detail/CVE-2023-26107</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SKETCHSVG-3167969\">https://security.snyk.io/vuln/SNYK-JS-SKETCHSVG-3167969</a></li>\n<li><a href=\"https://github.com/eBay/SketchSVG/blob/dd1036648f0f320a3187ef79d506b676b9eb87a6/lib/index.js#23L115\">https://github.com/eBay/SketchSVG/blob/dd1036648f0f320a3187ef79d506b676b9eb87a6/lib/index.js#23L115</a></li>\n<li><a href=\"https://github.com/eBay/SketchSVG/blob/dd1036648f0f320a3187ef79d506b676b9eb87a6/lib/index.js#23L64\">https://github.com/eBay/SketchSVG/blob/dd1036648f0f320a3187ef79d506b676b9eb87a6/lib/index.js#23L64</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6722-xvq8-3254\">https://github.com/advisories/GHSA-6722-xvq8-3254</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6722-xvq8-3254",
            "title": "[sketchsvg] SketchSVG Arbitrary Code Injection vulnerability",
            "date_modified": "2023-03-07T20:30:34.000Z",
            "date_published": "2023-03-06T06:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6722-xvq8-3254"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>node-static and the fork @nubosoftware/node-static are vulnerable to Directory Traversal due to improper file path sanitization in the startsWith() method in the servePath function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26111\">https://nvd.nist.gov/vuln/detail/CVE-2023-26111</a></li>\n<li><a href=\"https://gist.github.com/lirantal/c80b28e7bee148dc287339cb483e42bc\">https://gist.github.com/lirantal/c80b28e7bee148dc287339cb483e42bc</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NODESTATIC-3149928\">https://security.snyk.io/vuln/SNYK-JS-NODESTATIC-3149928</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NUBOSOFTWARENODESTATIC-3149927\">https://security.snyk.io/vuln/SNYK-JS-NUBOSOFTWARENODESTATIC-3149927</a></li>\n<li><a href=\"https://github.com/cloudhead/node-static/blob/master/lib/node-static.js#23L160-L163\">https://github.com/cloudhead/node-static/blob/master/lib/node-static.js#23L160-L163</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5g97-whc9-8g7j\">https://github.com/advisories/GHSA-5g97-whc9-8g7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5g97-whc9-8g7j",
            "title": "[@nubosoftware/node-static] node-static and @nubosoftware/node-static vulnerable to Directory Traversal",
            "date_modified": "2023-03-07T20:28:46.000Z",
            "date_published": "2023-03-06T06:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5g97-whc9-8g7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>node-static and the fork @nubosoftware/node-static are vulnerable to Directory Traversal due to improper file path sanitization in the startsWith() method in the servePath function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26111\">https://nvd.nist.gov/vuln/detail/CVE-2023-26111</a></li>\n<li><a href=\"https://gist.github.com/lirantal/c80b28e7bee148dc287339cb483e42bc\">https://gist.github.com/lirantal/c80b28e7bee148dc287339cb483e42bc</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NODESTATIC-3149928\">https://security.snyk.io/vuln/SNYK-JS-NODESTATIC-3149928</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-NUBOSOFTWARENODESTATIC-3149927\">https://security.snyk.io/vuln/SNYK-JS-NUBOSOFTWARENODESTATIC-3149927</a></li>\n<li><a href=\"https://github.com/cloudhead/node-static/blob/master/lib/node-static.js#23L160-L163\">https://github.com/cloudhead/node-static/blob/master/lib/node-static.js#23L160-L163</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5g97-whc9-8g7j\">https://github.com/advisories/GHSA-5g97-whc9-8g7j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5g97-whc9-8g7j",
            "title": "[node-static] node-static and @nubosoftware/node-static vulnerable to Directory Traversal",
            "date_modified": "2023-03-07T20:28:46.000Z",
            "date_published": "2023-03-06T06:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5g97-whc9-8g7j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as critical, has been found in json-logic-js 2.0.0. Affected by this issue is some unknown functionality of the file logic.js. The manipulation leads to command injection. Upgrading to version 2.0.1 is able to address this issue. The name of the patch is c1dd82f5b15d8a553bb7a0cfa841ab8a11a9c227. It is recommended to upgrade the affected component. VDB-222266 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4329\">https://nvd.nist.gov/vuln/detail/CVE-2021-4329</a></li>\n<li><a href=\"https://github.com/jwadhams/json-logic-js/pull/98\">https://github.com/jwadhams/json-logic-js/pull/98</a></li>\n<li><a href=\"https://github.com/jwadhams/json-logic-js/commit/c1dd82f5b15d8a553bb7a0cfa841ab8a11a9c227\">https://github.com/jwadhams/json-logic-js/commit/c1dd82f5b15d8a553bb7a0cfa841ab8a11a9c227</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.222266\">https://vuldb.com/?ctiid.222266</a></li>\n<li><a href=\"https://vuldb.com/?id.222266\">https://vuldb.com/?id.222266</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-67j4-2mh6-8627\">https://github.com/advisories/GHSA-67j4-2mh6-8627</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-67j4-2mh6-8627",
            "title": "[json-logic-js] json-logic-js Command Injection vulnerability",
            "date_modified": "2023-03-07T20:14:07.000Z",
            "date_published": "2023-03-05T21:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-67j4-2mh6-8627"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A remote code execution vulnerability exists in Xterm.js when the component mishandles special characters.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-0542\">https://nvd.nist.gov/vuln/detail/CVE-2019-0542</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc23-976p-j42x\">https://github.com/advisories/GHSA-mc23-976p-j42x</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHBA-2019:0959\">https://access.redhat.com/errata/RHBA-2019:0959</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:1422\">https://access.redhat.com/errata/RHSA-2019:1422</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:2551\">https://access.redhat.com/errata/RHSA-2019:2551</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2019:2552\">https://access.redhat.com/errata/RHSA-2019:2552</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/106434\">http://www.securityfocus.com/bid/106434</a></li>\n<li><a href=\"https://github.com/xtermjs/xterm.js/commit/3592c641cd0348e0b698e8a180aea2072c6bcd9a\">https://github.com/xtermjs/xterm.js/commit/3592c641cd0348e0b698e8a180aea2072c6bcd9a</a></li>\n<li><a href=\"https://github.com/xtermjs/xterm.js/releases/tag/3.8.1\">https://github.com/xtermjs/xterm.js/releases/tag/3.8.1</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc23-976p-j42x",
            "title": "[xterm] xterm vulnerable to remote code execution ",
            "date_modified": "2023-03-07T00:43:49.000Z",
            "date_published": "2019-01-14T16:19:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc23-976p-j42x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package utilities are vulnerable to Prototype Pollution via the _mix function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26105\">https://nvd.nist.gov/vuln/detail/CVE-2023-26105</a></li>\n<li><a href=\"https://github.com/mde/utilities/issues/29\">https://github.com/mde/utilities/issues/29</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-UTILITIES-3184491\">https://security.snyk.io/vuln/SNYK-JS-UTILITIES-3184491</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxfj-84xf-7gxv\">https://github.com/advisories/GHSA-wxfj-84xf-7gxv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxfj-84xf-7gxv",
            "title": "[utilities] mde utilities contains Prototype Pollution",
            "date_modified": "2023-03-08T23:14:00.000Z",
            "date_published": "2023-02-28T06:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxfj-84xf-7gxv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Directus versions &lt;=9.22.4 is vulnerable to Server-Side Request Forgery (SSRF) when importing a file from a remote web server (POST to <code>/files/import</code>). An attacker can bypass the security controls that were implemented to patch vulnerability <a href=\"https://security.snyk.io/vuln/SNYK-JS-DIRECTUS-2934713\">CVE-2022-23080</a> by performing a <a href=\"https://en.wikipedia.org/wiki/DNS_rebinding\">DNS rebinding attack</a> and view sensitive data from internal servers or perform a local port scan (eg. can access internal metadata API for AWS at <code>http://169.254.169.254</code> event if <code>169.254.169.254</code> is in the deny IP list).</p>\n<h3 id=\"details\">Details</h3>\n<p>DNS rebinding attacks work by running a DNS name server that resolves two different IP addresses when a domain is resolved simultaneously. This type of attack can be exploited to bypass the IP address deny list validation that was added to <a href=\"https://github.com/directus/directus/blob/main/api/src/services/files.ts\"><code>/api/src/services/file.ts</code></a> for the function <code>importOne</code> to mitigate the previous SSRF vulnerability <a href=\"https://security.snyk.io/vuln/SNYK-JS-DIRECTUS-2934713\">CVE-2022-23080</a>. The validation in <a href=\"https://github.com/directus/directus/blob/main/api/src/services/files.ts\"><code>/api/src/services/file.ts</code></a> first checks if the resolved IP address for a domain name does not a resolve to an IP address in the deny list:</p>\n<pre><code class=\"language-js\">let ip = resolvedUrl.hostname;\n\nif (net.isIP(ip) === 0) {\n    try {\n        ip = (await lookupDNS(ip)).address;\n    } catch (err: any) {\n        logger.warn(err, `Couldn't lookup the DNS for url ${importURL}`);\n        throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n            service: 'external-file',\n        });\n    }\n}\n\nif (env.IMPORT_IP_DENY_LIST.includes('0.0.0.0')) {\n    const networkInterfaces = os.networkInterfaces();\n\n    for (const networkInfo of Object.values(networkInterfaces)) {\n        if (!networkInfo) continue;\n\n        for (const info of networkInfo) {\n            if (info.address === ip) {\n                logger.warn(`Requested URL ${importURL} resolves to localhost.`);\n                throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n                    service: 'external-file',\n                });\n            }\n        }\n    }\n}\n\nif (env.IMPORT_IP_DENY_LIST.includes(ip)) {\n    logger.warn(`Requested URL ${importURL} resolves to a denied IP address.`);\n    throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n        service: 'external-file',\n    });\n}\n</code></pre>\n<p>Once it validates that the resolved IP address is not in the deny list, then it uses <code>axios</code> to <code>GET</code> the url and saves the response content.</p>\n<pre><code class=\"language-js\">try {\n    fileResponse = await axios.get&lt;Readable&gt;(encodeURL(importURL), {\n        responseType: 'stream',\n    });\n} catch (err: any) {\n    logger.warn(err, `Couldn't fetch file from url \"${importURL}\"`);\n    throw new ServiceUnavailableException(`Couldn't fetch file from url \"${importURL}\"`, {\n        service: 'external-file',\n    });\n}\n</code></pre>\n<p>However, this validation check and fetching the web resource causes to DNS queries that enable a DNS rebinding attack. On the first DNS query, an attacker controlled name server can be configured to resolve to an external IP address that is not in the deny list to bypass the validation. Then when <code>axios</code> is called, the name server resolves the domain name to a local IP address.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To demonstrate we will be using an online tool named <a href=\"https://lock.cmpxchg8b.com/rebinder.html\">rebinder</a>. Rebinder randomly changes the IP address it resolves to depending on the subdomain. For an example, <code>7f000001.8efa468e.rbndr.us</code> can resolve to either <code>142.250.70.142</code> (google.com) or <strong><code>127.0.0.1</code></strong>. Sending multiple <code>POST</code> requests to <code>/files/import</code> using this domain will eventually cause a resolution to <code>142.250.70.142</code> first to bypass the validation then fetch the sensitive from an internal server when <code>axios</code> is called.</p>\n<p>The following screenshots show what it looks like when a successful attack occurs.</p>\n<p><em>Downloading a file named <code>secret.txt</code> from a webserver running from <code>http://127.0.0.1/secret.txt</code></em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/6276577/218124035-26f7f0c3-47b3-424d-b4d4-bd3b47161983.png\"></p>\n<p><em>Receiving the request from the internal server. Note that the incoming connection is from <strong>127.0.0.1</strong>.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/6276577/218124119-87b8d5d6-934d-4e07-be4d-066616a9a435.png\"></p>\n<p><em>After downloading the file it leaks the content of the secret file.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/6276577/218122210-87b2e478-1081-4830-a9ea-e5d9f39bb129.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can exploit this vulnerability to access highly sensitive internal server and steal sensitive information. An example is on Cloud Environments that utilise internal APIs for managing machine and privileges. For an example, if <code>directus</code> is hosted on AWS EC2 instance and has an IAM role assigned to the EC2 instance then an attacker can exploit this vulnerability to steal the AWS access keys to impersonate the EC2 instance using the AWS API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-j3rg-3rgm-537h\">https://github.com/directus/directus/security/advisories/GHSA-j3rg-3rgm-537h</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/ff53d3e69a602d05342e15d9bb616884833ddbff\">https://github.com/directus/directus/commit/ff53d3e69a602d05342e15d9bb616884833ddbff</a></li>\n<li><a href=\"https://github.com/directus/directus/releases/tag/v9.23.0\">https://github.com/directus/directus/releases/tag/v9.23.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26492\">https://nvd.nist.gov/vuln/detail/CVE-2023-26492</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j3rg-3rgm-537h\">https://github.com/advisories/GHSA-j3rg-3rgm-537h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j3rg-3rgm-537h",
            "title": "[directus] Directus vulnerable to Server-Side Request Forgery On File Import",
            "date_modified": "2023-03-06T01:44:06.000Z",
            "date_published": "2023-03-03T23:07:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j3rg-3rgm-537h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The ERC721Consecutive contract designed for minting NFTs in batches does not update balances when a batch has size 1 and consists of a single token. Subsequent transfers from the receiver of that token may overflow the balance as reported by <code>balanceOf</code>.</p>\n<p>The issue exclusively presents with batches of size 1.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in 4.8.2.</p>\n\n\n\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-878m-3g6q-594q\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-878m-3g6q-594q</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/167bf67ed3907f4a674043496019fa346cee7705\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/167bf67ed3907f4a674043496019fa346cee7705</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.2\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26488\">https://nvd.nist.gov/vuln/detail/CVE-2023-26488</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-878m-3g6q-594q\">https://github.com/advisories/GHSA-878m-3g6q-594q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-878m-3g6q-594q",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts contains Incorrect Calculation",
            "date_modified": "2023-03-06T01:44:21.000Z",
            "date_published": "2023-03-03T20:02:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-878m-3g6q-594q"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}