{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The application hangs when receiving a Host header with a value that <code>@hono/node-server</code> can't handle well. Invalid values are those that cannot be parsed by the <code>URL</code> as a hostname such as an empty string, slashes <code>/</code>, and other strings.</p>\n<p>For example, if you have a simple application:</p>\n<pre><code class=\"language-ts\">import { serve } from '@hono/node-server'\nimport { Hono } from 'hono'\n\nconst app = new Hono()\n\napp.get('/', (c) =&gt; c.text('Hello'))\n\nserve(app)\n</code></pre>\n<p>Sending a request with a Host header with an empty value to it:</p>\n<pre><code>curl localhost:3000/ -H \"Host: \"\n</code></pre>\n<p>The results:</p>\n<pre><code>node:internal/url:775\n    this.#updateContext(bindingUrl.parse(input, base));\n                                   ^\n\nTypeError: Invalid URL\n    at new URL (node:internal/url:775:36)\n    at newRequest (/Users/yusuke/work/h/159/node_modules/@hono/node-server/dist/index.js:137:17)\n    at Server.&lt;anonymous&gt; (/Users/yusuke/work/h/159/node_modules/@hono/node-server/dist/index.js:399:17)\n    at Server.emit (node:events:514:28)\n    at Server.emit (node:domain:488:12)\n    at parserOnIncoming (node:_http_server:1143:12)\n    at HTTPParser.parserOnHeadersComplete (node:_http_common:119:17) {\n  code: 'ERR_INVALID_URL',\n  input: 'http:///'\n}\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The version <code>1.10.1</code> includes the fix for this issue. But, you should use <code>1.11.0</code>, which has other fixes related to this issue. <a href=\"https://github.com/honojs/node-server/issues/160\">https://github.com/honojs/node-server/issues/160</a> <a href=\"https://github.com/honojs/node-server/issues/161\">https://github.com/honojs/node-server/issues/161</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Nothing. Upgrade your <code>@hono/node-server</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/honojs/node-server/issues/159\">https://github.com/honojs/node-server/issues/159</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx\">https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx</a></li>\n<li><a href=\"https://github.com/honojs/node-server/issues/159\">https://github.com/honojs/node-server/issues/159</a></li>\n<li><a href=\"https://github.com/honojs/node-server/issues/161\">https://github.com/honojs/node-server/issues/161</a></li>\n<li><a href=\"https://github.com/honojs/node-server/commit/306d98f02a8671a0a1fb91ac8fe7e281690c05af\">https://github.com/honojs/node-server/commit/306d98f02a8671a0a1fb91ac8fe7e281690c05af</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hgxw-5xg3-69jx\">https://github.com/advisories/GHSA-hgxw-5xg3-69jx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hgxw-5xg3-69jx",
            "title": "[@hono/node-server] @hono/node-server has Denial of Service risk when receiving Host header that cannot be parsed",
            "date_modified": "2024-04-19T19:48:41.000Z",
            "date_published": "2024-04-19T19:48:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hgxw-5xg3-69jx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>This is basically <a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3\">GHSA-88j4-pcx8-q4q</a> but instead of changing passwords, when enabling authentication.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Open Uptime Kuma with authentication disabled</li>\n<li>Enable authentication using another window</li>\n<li>Access the platform using the previously logged-in window</li>\n<li>Note that access (read-write) remains despite the enabled authentication</li>\n<li>Expected behaviour:<ul>\n<li>After enabling authentication, all previously connected sessions should be invalidated, requiring users to log in.</li>\n</ul>\n</li>\n<li>Actual behaviour:<ul>\n<li>The system retains sessions and never logs out users unless explicitly done by clicking logout or refreshing the page.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>See <a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g\">GHSA-g9v2-wqcj-j99g</a> and <a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3\">GHSA-88j4-pcx8-q4q</a></p>\n<p>TBH this is quite a niche edge case, so I don't know if this even warrants a security report.  </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-23q2-5gf8-gjpp\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-23q2-5gf8-gjpp</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g</a></li>\n<li><a href=\"https://github.com/louislam/uptime-kuma/commit/7a9e2f5de69aa0bb884ead25d1dcc833bb8c6579\">https://github.com/louislam/uptime-kuma/commit/7a9e2f5de69aa0bb884ead25d1dcc833bb8c6579</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-23q2-5gf8-gjpp\">https://github.com/advisories/GHSA-23q2-5gf8-gjpp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-23q2-5gf8-gjpp",
            "title": "[uptime-kuma] Enabling Authentication does not close all logged in socket connections immediately ",
            "date_modified": "2024-04-19T17:26:37.000Z",
            "date_published": "2024-04-19T17:26:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-23q2-5gf8-gjpp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue inandrei-tatar nora-firebase-common between v.1.0.41 and v.1.12.2 allows a remote attacker to execute arbitrary code via a crafted script to the updateState parameter of the updateStateInternal method.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30564\">https://nvd.nist.gov/vuln/detail/CVE-2024-30564</a></li>\n<li><a href=\"https://github.com/andrei-tatar/nora-firebase-common/issues/9\">https://github.com/andrei-tatar/nora-firebase-common/issues/9</a></li>\n<li><a href=\"https://github.com/andrei-tatar/nora-firebase-common/commit/bf30b75d51be04f6c1f884561a223226c890f01b\">https://github.com/andrei-tatar/nora-firebase-common/commit/bf30b75d51be04f6c1f884561a223226c890f01b</a></li>\n<li><a href=\"https://gist.github.com/mestrtee/5dc2c948c2057f98d3de0a9790903c6c\">https://gist.github.com/mestrtee/5dc2c948c2057f98d3de0a9790903c6c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jjff-q3q4-5hh8\">https://github.com/advisories/GHSA-jjff-q3q4-5hh8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jjff-q3q4-5hh8",
            "title": "[@andrei-tatar/nora-firebase-common] @andrei-tatar/nora-firebase-common Prototype Pollution vulnerability",
            "date_modified": "2024-04-18T16:58:18.000Z",
            "date_published": "2024-04-18T15:30:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jjff-q3q4-5hh8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>\n<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>\n<h3 id=\"details\">Details</h3>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>\n<pre><code>it('ignores DOM mutations in components\\' create()', function() {\n      function Box() {}\n      Box.view = {\n        is: 'box',\n-        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"boxElement\"&gt;&lt;/div&gt;'\n+        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"__proto__\"&gt;&lt;/div&gt;'\n      };\n      Box.prototype.create = function() {\n        this.boxElement.className = 'box-changed-in-create';\n      };\n      var harness = runner.createHarness('&lt;view is=\"box\" /&gt;', Box);\n      expect(harness).to.render('&lt;div class=\"box\"&gt;&lt;/div&gt;');\n});\n</code></pre>\n<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>\n<h3 id=\"patch\">Patch</h3>\n<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {\n+    throw new Error('Unsafe code detected');\n+  }\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0\">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440\">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6",
            "title": "[derby] Prototype pollution in emit function",
            "date_modified": "2024-04-17T22:26:38.000Z",
            "date_published": "2024-04-17T22:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>\n<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>\n<h3 id=\"details\">Details</h3>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>\n<pre><code>it('ignores DOM mutations in components\\' create()', function() {\n      function Box() {}\n      Box.view = {\n        is: 'box',\n-        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"boxElement\"&gt;&lt;/div&gt;'\n+        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"__proto__\"&gt;&lt;/div&gt;'\n      };\n      Box.prototype.create = function() {\n        this.boxElement.className = 'box-changed-in-create';\n      };\n      var harness = runner.createHarness('&lt;view is=\"box\" /&gt;', Box);\n      expect(harness).to.render('&lt;div class=\"box\"&gt;&lt;/div&gt;');\n});\n</code></pre>\n<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>\n<h3 id=\"patch\">Patch</h3>\n<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {\n+    throw new Error('Unsafe code detected');\n+  }\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0\">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440\">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6",
            "title": "[derby] Prototype pollution in emit function",
            "date_modified": "2024-04-17T22:26:38.000Z",
            "date_published": "2024-04-17T22:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>\n<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>\n<h3 id=\"details\">Details</h3>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>\n<h3 id=\"poc\">PoC</h3>\n<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>\n<pre><code>it('ignores DOM mutations in components\\' create()', function() {\n      function Box() {}\n      Box.view = {\n        is: 'box',\n-        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"boxElement\"&gt;&lt;/div&gt;'\n+        source: '&lt;index:&gt;&lt;div class=\"box\" as=\"__proto__\"&gt;&lt;/div&gt;'\n      };\n      Box.prototype.create = function() {\n        this.boxElement.className = 'box-changed-in-create';\n      };\n      var harness = runner.createHarness('&lt;view is=\"box\" /&gt;', Box);\n      expect(harness).to.render('&lt;div class=\"box\"&gt;&lt;/div&gt;');\n});\n</code></pre>\n<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>\n<h3 id=\"patch\">Patch</h3>\n<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>\n<pre><code>emit(context: Context, target: T) {\n  const node = traverseAndCreate(context.controller, this.segments);\n+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {\n+    throw new Error('Unsafe code detected');\n+  }\n    node[this.lastSegment] = target;\n    this.addListeners(target, node, this.lastSegment);\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0\">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>\n<li><a href=\"https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440\">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-82jv-9wjw-pqh6\">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6",
            "title": "[derby] Prototype pollution in emit function",
            "date_modified": "2024-04-17T22:26:38.000Z",
            "date_published": "2024-04-17T22:26:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-82jv-9wjw-pqh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A stored XSS vulnerability in Excalidraw's web embeddable component. This allows arbitrary JavaScript to be run in the context of the domain where the editor is hosted. </p>\n<h3 id=\"poc\">Poc</h3>\n<p>Inserting an embed with the below url (can be copy/pasted onto canvas to insert as embed) will log <code>42</code> to the console:</p>\n<pre><code>https://gist.github.com/vv=v&lt;script&gt;console.log(42)&lt;/script&gt;\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>There were two vectors. One rendering untrusted string as iframe's <code>srcdoc</code> without properly sanitizing against HTML injection. Second by improperly sanitizing against attribute HTML injection. This in conjunction with allowing <code>allow-same-origin</code> sandbox flag (necessary for several embeds) resulted in the XSS.</p>\n<p>Former was fixed by no longer rendering unsafe <code>srcdoc</code> content verbatim, and instead strictly parsing the supplied content and constructing the <code>srcdoc</code> manually. The latter by sanitizing properly.</p>\n<p>The <code>allow-same-origin</code> flag is now also set only in cases that require it, following the principle of least privilege.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a cross site scripting vulnerability, for more information, please see: <a href=\"https://portswigger.net/web-security/cross-site-scripting\">https://portswigger.net/web-security/cross-site-scripting</a></p>\n<p>Two npm <code>@excalidraw/excalidraw</code> stable version releases were affected (<code>0.16.x</code>, <code>0.17.x</code>), and both are now patched.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f\">https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f</a></li>\n<li><a href=\"https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d\">https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d</a></li>\n<li><a href=\"https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0\">https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32472\">https://nvd.nist.gov/vuln/detail/CVE-2024-32472</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m64q-4jqh-f72f\">https://github.com/advisories/GHSA-m64q-4jqh-f72f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m64q-4jqh-f72f",
            "title": "[@excalidraw/excalidraw] Stored Cross-site Scripting (XSS) in excalidraw's web embed component",
            "date_modified": "2024-04-18T00:31:05.000Z",
            "date_published": "2024-04-17T21:32:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m64q-4jqh-f72f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A stored XSS vulnerability in Excalidraw's web embeddable component. This allows arbitrary JavaScript to be run in the context of the domain where the editor is hosted. </p>\n<h3 id=\"poc\">Poc</h3>\n<p>Inserting an embed with the below url (can be copy/pasted onto canvas to insert as embed) will log <code>42</code> to the console:</p>\n<pre><code>https://gist.github.com/vv=v&lt;script&gt;console.log(42)&lt;/script&gt;\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>There were two vectors. One rendering untrusted string as iframe's <code>srcdoc</code> without properly sanitizing against HTML injection. Second by improperly sanitizing against attribute HTML injection. This in conjunction with allowing <code>allow-same-origin</code> sandbox flag (necessary for several embeds) resulted in the XSS.</p>\n<p>Former was fixed by no longer rendering unsafe <code>srcdoc</code> content verbatim, and instead strictly parsing the supplied content and constructing the <code>srcdoc</code> manually. The latter by sanitizing properly.</p>\n<p>The <code>allow-same-origin</code> flag is now also set only in cases that require it, following the principle of least privilege.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>This is a cross site scripting vulnerability, for more information, please see: <a href=\"https://portswigger.net/web-security/cross-site-scripting\">https://portswigger.net/web-security/cross-site-scripting</a></p>\n<p>Two npm <code>@excalidraw/excalidraw</code> stable version releases were affected (<code>0.16.x</code>, <code>0.17.x</code>), and both are now patched.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f\">https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f</a></li>\n<li><a href=\"https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d\">https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d</a></li>\n<li><a href=\"https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0\">https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32472\">https://nvd.nist.gov/vuln/detail/CVE-2024-32472</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m64q-4jqh-f72f\">https://github.com/advisories/GHSA-m64q-4jqh-f72f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m64q-4jqh-f72f",
            "title": "[@excalidraw/excalidraw] Stored Cross-site Scripting (XSS) in excalidraw's web embed component",
            "date_modified": "2024-04-18T00:31:05.000Z",
            "date_published": "2024-04-17T21:32:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m64q-4jqh-f72f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>\n<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347\">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30253\">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>\n<li><a href=\"https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0\">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m45-2rjm-j347\">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347",
            "title": "[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service",
            "date_modified": "2024-04-17T21:29:14.000Z",
            "date_published": "2024-04-17T18:21:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m45-2rjm-j347"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}