{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>\n<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.coinspect.com/openzeppelin-governor-dos/\">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34234\">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h3x-9wvq-w4m2\">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h3x-9wvq-w4m2",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning",
            "date_modified": "2023-06-08T18:03:18.000Z",
            "date_published": "2023-06-08T18:03:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>\n<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.coinspect.com/openzeppelin-governor-dos/\">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34234\">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h3x-9wvq-w4m2\">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h3x-9wvq-w4m2",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning",
            "date_modified": "2023-06-08T18:03:18.000Z",
            "date_published": "2023-06-08T18:03:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>\"fast-xml-parser\" allows special characters in entity names, which are not escaped or sanitized. Since the entity name is used for creating a regex for searching and replacing entities in the XML body, an attacker can abuse it for DoS attacks. By crafting an entity name that results in an intentionally bad performing regex and utilizing it in the entity replacement step of the parser, this can cause the parser to stall for an indefinite amount of time.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved in v4.2.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Avoid using DOCTYPE parsing by <code>processEntities: false</code> option.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw\">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw</a></li>\n<li><a href=\"https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c\">https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34104\">https://nvd.nist.gov/vuln/detail/CVE-2023-34104</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6w63-h3fj-q4vw\">https://github.com/advisories/GHSA-6w63-h3fj-q4vw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6w63-h3fj-q4vw",
            "title": "[fast-xml-parser] fast-xml-parser vulnerable to Regex Injection via Doctype Entities",
            "date_modified": "2023-06-06T18:50:17.000Z",
            "date_published": "2023-06-06T17:33:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6w63-h3fj-q4vw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href=\"https://vitejs.dev/config/server-options.html#server-fs-deny\"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href=\"https://vitejs.dev/config/server-options.html#server-host\"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@4.3.9\">vite@4.3.9</a>, <a href=\"mailto:vite@4.2.3\">vite@4.2.3</a>, <a href=\"mailto:vite@4.1.5\">vite@4.1.5</a>, <a href=\"mailto:vite@4.0.5\">vite@4.0.5</a>\nAnd in the latest minors of the previous two majors: <a href=\"mailto:vite@3.2.7\">vite@3.2.7</a>, <a href=\"mailto:vite@2.9.16\">vite@2.9.16</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>\n<li>Serve the application on dev mode using pnpm run dev.</li>\n<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>\n<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>\n</ol>\n<p>Proof Images:\n<img alt=\"proof-1\" src=\"https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png\">\n<img alt=\"proof-2\" src=\"https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png\"></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67\">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34092\">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>\n<li><a href=\"https://github.com/vitejs/vite/pull/13348\">https://github.com/vitejs/vite/pull/13348</a></li>\n<li><a href=\"https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32\">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-353f-5xf4-qw67\">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67",
            "title": "[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)",
            "date_modified": "2023-06-06T02:01:47.000Z",
            "date_published": "2023-06-06T02:01:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-353f-5xf4-qw67"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A remote attacker can trigger a denial of service in the <code>socket.remoteAddress</code> variable, by sending a crafted HTTP request. Usage of the undefined variable raises a TypeError exception.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-2968\">https://nvd.nist.gov/vuln/detail/CVE-2023-2968</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/undefined-variable-usage-in-proxy-leads-to-remote-denial-of-service-xray-520917\">https://research.jfrog.com/vulnerabilities/undefined-variable-usage-in-proxy-leads-to-remote-denial-of-service-xray-520917</a></li>\n<li><a href=\"https://github.com/TooTallNate/proxy-agents/pull/178\">https://github.com/TooTallNate/proxy-agents/pull/178</a></li>\n<li><a href=\"https://github.com/TooTallNate/proxy-agents/commit/25e0c931390eb8f41c5ceaca72820de9198ece39\">https://github.com/TooTallNate/proxy-agents/commit/25e0c931390eb8f41c5ceaca72820de9198ece39</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj6p-3pc9-wf5m\">https://github.com/advisories/GHSA-mj6p-3pc9-wf5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj6p-3pc9-wf5m",
            "title": "[proxy] proxy denial of service vulnerability",
            "date_modified": "2023-06-06T01:52:50.000Z",
            "date_published": "2023-05-30T18:30:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj6p-3pc9-wf5m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype Pollution in GitHub repository antfu/utils prior to 0.7.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-2972\">https://nvd.nist.gov/vuln/detail/CVE-2023-2972</a></li>\n<li><a href=\"https://github.com/antfu/utils/commit/7f8b16c6181c988bdb96613fbb2533b345f68682\">https://github.com/antfu/utils/commit/7f8b16c6181c988bdb96613fbb2533b345f68682</a></li>\n<li><a href=\"https://huntr.dev/bounties/009f1cd9-401c-49a7-bd08-be35cff6faef\">https://huntr.dev/bounties/009f1cd9-401c-49a7-bd08-be35cff6faef</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2fh-2h23-6grg\">https://github.com/advisories/GHSA-p2fh-2h23-6grg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2fh-2h23-6grg",
            "title": "[@antfu/utils] antfu/utils vulnerable to prototype pollution",
            "date_modified": "2023-06-02T17:11:19.000Z",
            "date_published": "2023-05-30T12:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2fh-2h23-6grg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Phishing attack vulnerability by uploading malicious files. A malicious user could upload a HTML file to Parse Server via its public API. That HTML file would then be accessible at the internet domain at which Parse Server is hosted. The URL of the the uploaded HTML could be shared for phishing attacks. The HTML page may seem legitimate because it is served under the internet domain where Parse Server is hosted, which may be the same as a company's official website domain.</p>\n<p>An additional security issue arises when the Parse JavaScript SDK is used. The SDK stores sessions in the internet browser's local storage, which usually restricts data access depending on the internet domain. A malicious HTML file could contain a script that retrieves the user's session token from local storage and then share it with the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix adds a new Parse Server option <code>fileUpload.fileExtensions</code> to restrict file upload on Parse Server by file extension. It is recommended to restrict file upload for HTML file extensions, which this fix disables by default. If an app requires upload of files with HTML file extensions, the option can be set to <code>['.*']</code> or another custom value to override the default.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8538\">https://github.com/parse-community/parse-server/pull/8538</a> (Parse Server 6)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8537\">https://github.com/parse-community/parse-server/pull/8537</a> (Parse Server 5)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32689\">https://nvd.nist.gov/vuln/detail/CVE-2023-32689</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8537\">https://github.com/parse-community/parse-server/pull/8537</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8538\">https://github.com/parse-community/parse-server/pull/8538</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/advisories/GHSA-9prm-jqwx-45x9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9prm-jqwx-45x9",
            "title": "[parse-server] Phishing attack vulnerability by uploading malicious HTML file",
            "date_modified": "2023-05-31T23:39:16.000Z",
            "date_published": "2023-05-31T23:39:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9prm-jqwx-45x9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Phishing attack vulnerability by uploading malicious files. A malicious user could upload a HTML file to Parse Server via its public API. That HTML file would then be accessible at the internet domain at which Parse Server is hosted. The URL of the the uploaded HTML could be shared for phishing attacks. The HTML page may seem legitimate because it is served under the internet domain where Parse Server is hosted, which may be the same as a company's official website domain.</p>\n<p>An additional security issue arises when the Parse JavaScript SDK is used. The SDK stores sessions in the internet browser's local storage, which usually restricts data access depending on the internet domain. A malicious HTML file could contain a script that retrieves the user's session token from local storage and then share it with the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix adds a new Parse Server option <code>fileUpload.fileExtensions</code> to restrict file upload on Parse Server by file extension. It is recommended to restrict file upload for HTML file extensions, which this fix disables by default. If an app requires upload of files with HTML file extensions, the option can be set to <code>['.*']</code> or another custom value to override the default.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8538\">https://github.com/parse-community/parse-server/pull/8538</a> (Parse Server 6)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8537\">https://github.com/parse-community/parse-server/pull/8537</a> (Parse Server 5)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-32689\">https://nvd.nist.gov/vuln/detail/CVE-2023-32689</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8537\">https://github.com/parse-community/parse-server/pull/8537</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/pull/8538\">https://github.com/parse-community/parse-server/pull/8538</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9prm-jqwx-45x9\">https://github.com/advisories/GHSA-9prm-jqwx-45x9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9prm-jqwx-45x9",
            "title": "[parse-server] Phishing attack vulnerability by uploading malicious HTML file",
            "date_modified": "2023-05-31T23:39:16.000Z",
            "date_published": "2023-05-31T23:39:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9prm-jqwx-45x9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of <code>jquery</code> interpret <code>text/javascript</code> responses from cross-origin ajax requests, and automatically execute the contents in <code>jQuery.globalEval</code>, even when the ajax request doesn't contain the <code>dataType</code> option.</p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Update to version 3.0.0 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-9251\">https://nvd.nist.gov/vuln/detail/CVE-2015-9251</a></li>\n<li><a href=\"https://github.com/jquery/jquery/issues/2432\">https://github.com/jquery/jquery/issues/2432</a></li>\n<li><a href=\"https://github.com/jquery/jquery/pull/2588\">https://github.com/jquery/jquery/pull/2588</a></li>\n<li><a href=\"https://github.com/jquery/jquery/commit/b078a62013782c7424a4a61a240c23c4c0b42614\">https://github.com/jquery/jquery/commit/b078a62013782c7424a4a61a240c23c4c0b42614</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmxg-73gg-4p98\">https://github.com/advisories/GHSA-rmxg-73gg-4p98</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/328\">https://www.npmjs.com/advisories/328</a></li>\n<li><a href=\"https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\">https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2</a></li>\n<li><a href=\"https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\">https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0481\">https://access.redhat.com/errata/RHSA-2020:0481</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0729\">https://access.redhat.com/errata/RHSA-2020:0729</a></li>\n<li><a href=\"https://ics-cert.us-cert.gov/advisories/ICSA-18-212-04\">https://ics-cert.us-cert.gov/advisories/ICSA-18-212-04</a></li>\n<li><a href=\"https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601\">https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E\">https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E\">https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E\">https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E\">https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E\">https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E</a></li>\n<li><a href=\"https://seclists.org/bugtraq/2019/May/18\">https://seclists.org/bugtraq/2019/May/18</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210108-0004/\">https://security.netapp.com/advisory/ntap-20210108-0004/</a></li>\n<li><a href=\"https://snyk.io/vuln/npm:jquery:20150627\">https://snyk.io/vuln/npm:jquery:20150627</a></li>\n<li><a href=\"https://sw.aveva.com/hubfs/assets-2018/pdf/security-bulletin/SecurityBulletin_LFSec126.pdf\">https://sw.aveva.com/hubfs/assets-2018/pdf/security-bulletin/SecurityBulletin_LFSec126.pdf</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2020.html\">https://www.oracle.com/security-alerts/cpuapr2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2020.html\">https://www.oracle.com/security-alerts/cpujan2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2020.html\">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2020.html\">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html\">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html\">https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html\">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html\">https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2019-08\">https://www.tenable.com/security/tns-2019-08</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00041.html\">http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00041.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html\">http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html\">http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html\">http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/10\">http://seclists.org/fulldisclosure/2019/May/10</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/11\">http://seclists.org/fulldisclosure/2019/May/11</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/13\">http://seclists.org/fulldisclosure/2019/May/13</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html\">http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/105658\">http://www.securityfocus.com/bid/105658</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-DOTNET-JQUERY-450227\">https://security.snyk.io/vuln/SNYK-DOTNET-JQUERY-450227</a></li>\n<li><a href=\"https://github.com/jquery/jquery/issues/2432#issuecomment-403761229\">https://github.com/jquery/jquery/issues/2432#issuecomment-403761229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmxg-73gg-4p98",
            "title": "[jquery] Cross-Site Scripting (XSS) in jquery",
            "date_modified": "2023-05-31T17:48:09.000Z",
            "date_published": "2018-01-22T13:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmxg-73gg-4p98"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of <code>jquery</code> interpret <code>text/javascript</code> responses from cross-origin ajax requests, and automatically execute the contents in <code>jQuery.globalEval</code>, even when the ajax request doesn't contain the <code>dataType</code> option.</p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Update to version 3.0.0 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-9251\">https://nvd.nist.gov/vuln/detail/CVE-2015-9251</a></li>\n<li><a href=\"https://github.com/jquery/jquery/issues/2432\">https://github.com/jquery/jquery/issues/2432</a></li>\n<li><a href=\"https://github.com/jquery/jquery/pull/2588\">https://github.com/jquery/jquery/pull/2588</a></li>\n<li><a href=\"https://github.com/jquery/jquery/commit/b078a62013782c7424a4a61a240c23c4c0b42614\">https://github.com/jquery/jquery/commit/b078a62013782c7424a4a61a240c23c4c0b42614</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rmxg-73gg-4p98\">https://github.com/advisories/GHSA-rmxg-73gg-4p98</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/328\">https://www.npmjs.com/advisories/328</a></li>\n<li><a href=\"https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\">https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2</a></li>\n<li><a href=\"https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\">https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0481\">https://access.redhat.com/errata/RHSA-2020:0481</a></li>\n<li><a href=\"https://access.redhat.com/errata/RHSA-2020:0729\">https://access.redhat.com/errata/RHSA-2020:0729</a></li>\n<li><a href=\"https://ics-cert.us-cert.gov/advisories/ICSA-18-212-04\">https://ics-cert.us-cert.gov/advisories/ICSA-18-212-04</a></li>\n<li><a href=\"https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601\">https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E\">https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E\">https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E\">https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E\">https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E\">https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E\">https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E</a></li>\n<li><a href=\"https://seclists.org/bugtraq/2019/May/18\">https://seclists.org/bugtraq/2019/May/18</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210108-0004/\">https://security.netapp.com/advisory/ntap-20210108-0004/</a></li>\n<li><a href=\"https://snyk.io/vuln/npm:jquery:20150627\">https://snyk.io/vuln/npm:jquery:20150627</a></li>\n<li><a href=\"https://sw.aveva.com/hubfs/assets-2018/pdf/security-bulletin/SecurityBulletin_LFSec126.pdf\">https://sw.aveva.com/hubfs/assets-2018/pdf/security-bulletin/SecurityBulletin_LFSec126.pdf</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuapr2020.html\">https://www.oracle.com/security-alerts/cpuapr2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2020.html\">https://www.oracle.com/security-alerts/cpujan2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2020.html\">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2020.html\">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html\">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html\">https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html\">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html\">https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2019-08\">https://www.tenable.com/security/tns-2019-08</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00041.html\">http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00041.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html\">http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html\">http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html\">http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/10\">http://seclists.org/fulldisclosure/2019/May/10</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/11\">http://seclists.org/fulldisclosure/2019/May/11</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2019/May/13\">http://seclists.org/fulldisclosure/2019/May/13</a></li>\n<li><a href=\"http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html\">http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/105658\">http://www.securityfocus.com/bid/105658</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-DOTNET-JQUERY-450227\">https://security.snyk.io/vuln/SNYK-DOTNET-JQUERY-450227</a></li>\n<li><a href=\"https://github.com/jquery/jquery/issues/2432#issuecomment-403761229\">https://github.com/jquery/jquery/issues/2432#issuecomment-403761229</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rmxg-73gg-4p98",
            "title": "[jquery] Cross-Site Scripting (XSS) in jquery",
            "date_modified": "2023-05-31T17:48:09.000Z",
            "date_published": "2018-01-22T13:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rmxg-73gg-4p98"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package n158 are vulnerable to Command Injection due to improper input sanitization in the 'module.exports' function.</p>\n<p><strong>Note:</strong></p>\n<p>To execute the code snippet and potentially exploit the vulnerability, the attacker needs to have the ability to run Node.js code within the target environment. This typically requires some level of access to the system or application hosting the Node.js environment.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26127\">https://nvd.nist.gov/vuln/detail/CVE-2023-26127</a></li>\n<li><a href=\"https://github.com/dsilva2401/n158/blob/master/src/cli/initProject.js#L8\">https://github.com/dsilva2401/n158/blob/master/src/cli/initProject.js#L8</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-N158-3183746\">https://security.snyk.io/vuln/SNYK-JS-N158-3183746</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-549h-r7g9-2qpf\">https://github.com/advisories/GHSA-549h-r7g9-2qpf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-549h-r7g9-2qpf",
            "title": "[n158] n158 vulnerable to Command Injection due to improper input sanitization in the 'module.exports' function",
            "date_modified": "2023-06-02T22:20:51.000Z",
            "date_published": "2023-05-27T06:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-549h-r7g9-2qpf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package keep-module-latest are vulnerable to Command Injection due to missing input sanitization or other checks and sandboxes being employed to the installModule function.</p>\n<p><strong>Note:</strong></p>\n<p>To execute the code snippet and potentially exploit the vulnerability, the attacker needs to have the ability to run Node.js code within the target environment. This typically requires some level of access to the system or application hosting the Node.js environment.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26128\">https://nvd.nist.gov/vuln/detail/CVE-2023-26128</a></li>\n<li><a href=\"https://github.com/liujunyang/keep-module-latest/blob/master/index.js%23L50\">https://github.com/liujunyang/keep-module-latest/blob/master/index.js%23L50</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-KEEPMODULELATEST-3157165\">https://security.snyk.io/vuln/SNYK-JS-KEEPMODULELATEST-3157165</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxrx-pc44-rcgc\">https://github.com/advisories/GHSA-wxrx-pc44-rcgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxrx-pc44-rcgc",
            "title": "[keep-module-latest] keep-module-latest vulnerable to Command Injection due to missing input sanitization ",
            "date_modified": "2023-06-02T22:19:15.000Z",
            "date_published": "2023-05-27T06:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxrx-pc44-rcgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package bwm-ng are vulnerable to Command Injection due to improper input sanitization in the 'check' function in the bwm-ng.js file. </p>\n<p><strong>Note:</strong></p>\n<p>To execute the code snippet and potentially exploit the vulnerability, the attacker needs to have the ability to run Node.js code within the target environment. This typically requires some level of access to the system or application hosting the Node.js environment.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26129\">https://nvd.nist.gov/vuln/detail/CVE-2023-26129</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-BWMNG-3175876\">https://security.snyk.io/vuln/SNYK-JS-BWMNG-3175876</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vw3-vxmj-h43w\">https://github.com/advisories/GHSA-8vw3-vxmj-h43w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vw3-vxmj-h43w",
            "title": "[bwm-ng] bwm-ng vulnerable to command injection",
            "date_modified": "2023-06-06T17:21:42.000Z",
            "date_published": "2023-05-27T06:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vw3-vxmj-h43w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>connect node module before 2.14.0 suffers from a Cross-Site Scripting (XSS) vulnerability due to a lack of validation of file in directory.js middleware.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-3717\">https://nvd.nist.gov/vuln/detail/CVE-2018-3717</a></li>\n<li><a href=\"https://github.com/JacksonTian/anywhere/issues/33#issuecomment-366527448\">https://github.com/JacksonTian/anywhere/issues/33#issuecomment-366527448</a></li>\n<li><a href=\"https://hackerone.com/reports/309394\">https://hackerone.com/reports/309394</a></li>\n<li><a href=\"https://hackerone.com/reports/309641\">https://hackerone.com/reports/309641</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rch9-xh7r-mqgw\">https://github.com/advisories/GHSA-rch9-xh7r-mqgw</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/584\">https://www.npmjs.com/advisories/584</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/595\">https://www.npmjs.com/advisories/595</a></li>\n<li><a href=\"https://github.com/senchalabs/connect/commit/6d5dd30075d2bc4ee97afdbbe3d9d98d8d52d74b\">https://github.com/senchalabs/connect/commit/6d5dd30075d2bc4ee97afdbbe3d9d98d8d52d74b</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rch9-xh7r-mqgw",
            "title": "[connect] Cross-Site Scripting in connect",
            "date_modified": "2023-05-30T19:26:14.000Z",
            "date_published": "2018-07-26T15:08:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rch9-xh7r-mqgw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Highlight may record passwords on customer deployments when a password html input is switched to <code>type=\"text\"</code> via a javascript \"Show Password\" button. This differs from the expected behavior which always obfuscates <code>type=\"password\"</code> inputs. A customer may assume that switching to <code>type=\"text\"</code> would also not record this input; hence, they would not add additional <code>highlight-mask</code> css-class obfuscation to this part of the DOM, resulting in unintentional recording of a password value when a <code>Show Password</code> button is used.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><code>highlight.run@6.0.0</code> resolves the issue via <a href=\"https://github.com/rrweb-io/rrweb/pull/1184\">https://github.com/rrweb-io/rrweb/pull/1184</a>\nThis patch tracks changes to the <code>type</code> attribute of an input to ensure an input that used to be a <code>type=\"password\"</code> continues to be obfuscated. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>We have deployed a change to our data ingest to obfuscate passwords server side from older clients.\nThis means that upgrading to the latest version of highlight.run is not necessary but recommended to prevent potential network transfer of recorded password data to our backend.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/rrweb-io/rrweb/pull/1184\">https://github.com/rrweb-io/rrweb/pull/1184</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/highlight/highlight/security/advisories/GHSA-9qpj-qq2r-5mcc\">https://github.com/highlight/highlight/security/advisories/GHSA-9qpj-qq2r-5mcc</a></li>\n<li><a href=\"https://github.com/rrweb-io/rrweb/pull/1184\">https://github.com/rrweb-io/rrweb/pull/1184</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33187\">https://nvd.nist.gov/vuln/detail/CVE-2023-33187</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9qpj-qq2r-5mcc\">https://github.com/advisories/GHSA-9qpj-qq2r-5mcc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9qpj-qq2r-5mcc",
            "title": "[highlight.run] html inputs of type password recorded in plaintext when converted to text inputs",
            "date_modified": "2023-05-26T21:50:46.000Z",
            "date_published": "2023-05-26T13:52:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9qpj-qq2r-5mcc"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}