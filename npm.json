{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.</p>\n<p>Please note that this kind of attack would require <strong>significant</strong> privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.0</code></li>\n<li><code>15.5.0</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for this issue, please update to a patched version of Electron.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29257\">https://nvd.nist.gov/vuln/detail/CVE-2022-29257</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/advisories/GHSA-77xc-hjv8-ww97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97",
            "title": "[electron] AutoUpdater module fails to validate certain nested components of the bundle",
            "date_modified": "2022-06-16T23:18:48.000Z",
            "date_published": "2022-06-16T23:18:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.</p>\n<p>Please note that this kind of attack would require <strong>significant</strong> privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.0</code></li>\n<li><code>15.5.0</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for this issue, please update to a patched version of Electron.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29257\">https://nvd.nist.gov/vuln/detail/CVE-2022-29257</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/advisories/GHSA-77xc-hjv8-ww97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97",
            "title": "[electron] AutoUpdater module fails to validate certain nested components of the bundle",
            "date_modified": "2022-06-16T23:18:48.000Z",
            "date_published": "2022-06-16T23:18:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.</p>\n<p>Please note that this kind of attack would require <strong>significant</strong> privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.0</code></li>\n<li><code>15.5.0</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for this issue, please update to a patched version of Electron.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29257\">https://nvd.nist.gov/vuln/detail/CVE-2022-29257</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/advisories/GHSA-77xc-hjv8-ww97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97",
            "title": "[electron] AutoUpdater module fails to validate certain nested components of the bundle",
            "date_modified": "2022-06-16T23:18:48.000Z",
            "date_published": "2022-06-16T23:18:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows attackers who have control over a given apps update server / update storage to serve maliciously crafted update packages that pass the code signing validation check but contain malicious code in some components.</p>\n<p>Please note that this kind of attack would require <strong>significant</strong> privileges in your own auto updating infrastructure and the ease of that attack entirely depends on your infrastructure security.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.0</code></li>\n<li><code>15.5.0</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds for this issue, please update to a patched version of Electron.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/electron/electron/security/advisories/GHSA-77xc-hjv8-ww97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29257\">https://nvd.nist.gov/vuln/detail/CVE-2022-29257</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77xc-hjv8-ww97\">https://github.com/advisories/GHSA-77xc-hjv8-ww97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97",
            "title": "[electron] AutoUpdater module fails to validate certain nested components of the bundle",
            "date_modified": "2022-06-16T23:18:48.000Z",
            "date_published": "2022-06-16T23:18:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77xc-hjv8-ww97"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a renderer with JS execution to obtain access to a new renderer process with <code>nodeIntegrationInSubFrames</code> enabled which in turn allows effective access to <code>ipcRenderer</code>.</p>\n<p>Please note the misleadingly named <code>nodeIntegrationInSubFrames</code> option does not implicitly grant Node.js access rather it depends on the existing <code>sandbox</code> setting.  If your application is sandboxed then <code>nodeIntegrationInSubFrames</code> just gives access to the sandboxed renderer APIs (which includes <code>ipcRenderer</code>).</p>\n<p>If your application then additionally exposes IPC messages without IPC <code>senderFrame</code> validation that perform privileged actions or return confidential data this access to <code>ipcRenderer</code> can in turn compromise your application / user even with the sandbox enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.6</code></li>\n<li><code>15.5.5</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that all IPC message handlers appropriately validate <code>senderFrame</code> as per our <a href=\"https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17-validate-the-sender-of-all-ipc-messages\">security tutorial here</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29247\">https://nvd.nist.gov/vuln/detail/CVE-2022-29247</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7",
            "title": "[electron] Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled",
            "date_modified": "2022-06-16T23:14:35.000Z",
            "date_published": "2022-06-16T23:14:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a renderer with JS execution to obtain access to a new renderer process with <code>nodeIntegrationInSubFrames</code> enabled which in turn allows effective access to <code>ipcRenderer</code>.</p>\n<p>Please note the misleadingly named <code>nodeIntegrationInSubFrames</code> option does not implicitly grant Node.js access rather it depends on the existing <code>sandbox</code> setting.  If your application is sandboxed then <code>nodeIntegrationInSubFrames</code> just gives access to the sandboxed renderer APIs (which includes <code>ipcRenderer</code>).</p>\n<p>If your application then additionally exposes IPC messages without IPC <code>senderFrame</code> validation that perform privileged actions or return confidential data this access to <code>ipcRenderer</code> can in turn compromise your application / user even with the sandbox enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.6</code></li>\n<li><code>15.5.5</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that all IPC message handlers appropriately validate <code>senderFrame</code> as per our <a href=\"https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17-validate-the-sender-of-all-ipc-messages\">security tutorial here</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29247\">https://nvd.nist.gov/vuln/detail/CVE-2022-29247</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7",
            "title": "[electron] Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled",
            "date_modified": "2022-06-16T23:14:35.000Z",
            "date_published": "2022-06-16T23:14:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a renderer with JS execution to obtain access to a new renderer process with <code>nodeIntegrationInSubFrames</code> enabled which in turn allows effective access to <code>ipcRenderer</code>.</p>\n<p>Please note the misleadingly named <code>nodeIntegrationInSubFrames</code> option does not implicitly grant Node.js access rather it depends on the existing <code>sandbox</code> setting.  If your application is sandboxed then <code>nodeIntegrationInSubFrames</code> just gives access to the sandboxed renderer APIs (which includes <code>ipcRenderer</code>).</p>\n<p>If your application then additionally exposes IPC messages without IPC <code>senderFrame</code> validation that perform privileged actions or return confidential data this access to <code>ipcRenderer</code> can in turn compromise your application / user even with the sandbox enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.6</code></li>\n<li><code>15.5.5</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that all IPC message handlers appropriately validate <code>senderFrame</code> as per our <a href=\"https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17-validate-the-sender-of-all-ipc-messages\">security tutorial here</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29247\">https://nvd.nist.gov/vuln/detail/CVE-2022-29247</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7",
            "title": "[electron] Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled",
            "date_modified": "2022-06-16T23:14:35.000Z",
            "date_published": "2022-06-16T23:14:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a renderer with JS execution to obtain access to a new renderer process with <code>nodeIntegrationInSubFrames</code> enabled which in turn allows effective access to <code>ipcRenderer</code>.</p>\n<p>Please note the misleadingly named <code>nodeIntegrationInSubFrames</code> option does not implicitly grant Node.js access rather it depends on the existing <code>sandbox</code> setting.  If your application is sandboxed then <code>nodeIntegrationInSubFrames</code> just gives access to the sandboxed renderer APIs (which includes <code>ipcRenderer</code>).</p>\n<p>If your application then additionally exposes IPC messages without IPC <code>senderFrame</code> validation that perform privileged actions or return confidential data this access to <code>ipcRenderer</code> can in turn compromise your application / user even with the sandbox enabled.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been patched and the following Electron versions contain the fix:</p>\n<ul>\n<li><code>18.0.0-beta.6</code></li>\n<li><code>17.2.0</code></li>\n<li><code>16.2.6</code></li>\n<li><code>15.5.5</code></li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that all IPC message handlers appropriately validate <code>senderFrame</code> as per our <a href=\"https://github.com/electron/electron/blob/main/docs/tutorial/security.md#17-validate-the-sender-of-all-ipc-messages\">security tutorial here</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/electron/electron/security/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29247\">https://nvd.nist.gov/vuln/detail/CVE-2022-29247</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mq8j-3h7h-p8g7\">https://github.com/advisories/GHSA-mq8j-3h7h-p8g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7",
            "title": "[electron] Compromised child renderer processes could obtain IPC access without nodeIntegrationInSubFrames being enabled",
            "date_modified": "2022-06-16T23:14:35.000Z",
            "date_published": "2022-06-16T23:14:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mq8j-3h7h-p8g7"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Secrets that would normally be masked by semantic-release can be accidentally disclosed if they contain characters that are excluded from uri encoding by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">encodeURI</a>. Occurrence is further limited to execution contexts where push access to the related repository is not available without modifying the repository url to inject credentials.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>\n<p>Fixed in 19.0.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Secrets that do not contain characters that are excluded from encoding with <code>encodeURI</code> when included in a URL are already masked properly.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://github.com/semantic-release/semantic-release/releases/tag/v19.0.3\">https://github.com/semantic-release/semantic-release/releases/tag/v19.0.3</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open a discussion in <a href=\"https://github.com/semantic-release/semantic-release/discussions\">semantic-release discussions</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/semantic-release/semantic-release/security/advisories/GHSA-x2pg-mjhr-2m5x\">https://github.com/semantic-release/semantic-release/security/advisories/GHSA-x2pg-mjhr-2m5x</a></li>\n<li><a href=\"https://github.com/semantic-release/semantic-release/pull/2449\">https://github.com/semantic-release/semantic-release/pull/2449</a></li>\n<li><a href=\"https://github.com/semantic-release/semantic-release/pull/2459\">https://github.com/semantic-release/semantic-release/pull/2459</a></li>\n<li><a href=\"https://github.com/semantic-release/semantic-release/commit/58a226f29c04ee56bbb02cc661f020d568849cad\">https://github.com/semantic-release/semantic-release/commit/58a226f29c04ee56bbb02cc661f020d568849cad</a></li>\n<li><a href=\"https://github.com/semantic-release/semantic-release/releases/tag/v19.0.3\">https://github.com/semantic-release/semantic-release/releases/tag/v19.0.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31051\">https://nvd.nist.gov/vuln/detail/CVE-2022-31051</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x2pg-mjhr-2m5x\">https://github.com/advisories/GHSA-x2pg-mjhr-2m5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x2pg-mjhr-2m5x",
            "title": "[semantic-release] Exposure of Sensitive Information to an Unauthorized Actor in semantic-release",
            "date_modified": "2022-06-15T19:46:30.000Z",
            "date_published": "2022-06-09T23:51:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x2pg-mjhr-2m5x"
            }
        },
        {
            "content_html": "<p>The package metacalc before 0.0.2 are vulnerable to Arbitrary Code Execution when it exposes JavaScript's Math class to the v8 context. As the Math class is exposed to user-land, it can be used to get access to JavaScript's Function constructor.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21122\">https://nvd.nist.gov/vuln/detail/CVE-2022-21122</a></li>\n<li><a href=\"https://github.com/metarhia/metacalc/pull/16\">https://github.com/metarhia/metacalc/pull/16</a></li>\n<li><a href=\"https://github.com/metarhia/metacalc/commit/625c23d63eabfa16fc815f5832b147b08d2144bd\">https://github.com/metarhia/metacalc/commit/625c23d63eabfa16fc815f5832b147b08d2144bd</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-METACALC-2826197\">https://snyk.io/vuln/SNYK-JS-METACALC-2826197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5gc4-cx9x-9c43\">https://github.com/advisories/GHSA-5gc4-cx9x-9c43</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5gc4-cx9x-9c43",
            "title": "[metacalc] Code Injection in metacalc",
            "date_modified": "2022-06-09T23:50:53.000Z",
            "date_published": "2022-06-09T00:00:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5gc4-cx9x-9c43"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for API users if content types accessible to the authenticated user contain relationships to API users (from:users-permissions). There are many scenarios in which such details from API users can leak in the JSON response within the admin panel, either through a direct or indirect relationship. Access to this information enables a user to compromise these users’ accounts if the password reset API endpoints have been enabled. In a worst-case scenario, a low-privileged user could get access to a high-privileged API account, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30618\">https://nvd.nist.gov/vuln/detail/CVE-2022-30618</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgj7-895j-gpr6\">https://github.com/advisories/GHSA-vgj7-895j-gpr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6",
            "title": "[@strapi/strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:06.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for API users if content types accessible to the authenticated user contain relationships to API users (from:users-permissions). There are many scenarios in which such details from API users can leak in the JSON response within the admin panel, either through a direct or indirect relationship. Access to this information enables a user to compromise these users’ accounts if the password reset API endpoints have been enabled. In a worst-case scenario, a low-privileged user could get access to a high-privileged API account, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30618\">https://nvd.nist.gov/vuln/detail/CVE-2022-30618</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgj7-895j-gpr6\">https://github.com/advisories/GHSA-vgj7-895j-gpr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6",
            "title": "[strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:06.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for other admin panel users that have a relationship (e.g., created by, updated by) with content accessible to the authenticated user. For example, a low-privileged “author” role account can view these details in the JSON response for an “editor” or “super admin” that has updated one of the author’s blog posts. There are also many other scenarios where such details from other users can leak in the JSON response, either through a direct or indirect relationship. Access to this information enables a user to compromise other users’ accounts by successfully invoking the password reset workflow. In a worst-case scenario, a low-privileged user could get access to a “super admin” account with full control over the Strapi instance, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30617\">https://nvd.nist.gov/vuln/detail/CVE-2022-30617</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6fm-r26q-p747\">https://github.com/advisories/GHSA-f6fm-r26q-p747</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747",
            "title": "[@strapi/strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:01.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for other admin panel users that have a relationship (e.g., created by, updated by) with content accessible to the authenticated user. For example, a low-privileged “author” role account can view these details in the JSON response for an “editor” or “super admin” that has updated one of the author’s blog posts. There are also many other scenarios where such details from other users can leak in the JSON response, either through a direct or indirect relationship. Access to this information enables a user to compromise other users’ accounts by successfully invoking the password reset workflow. In a worst-case scenario, a low-privileged user could get access to a “super admin” account with full control over the Strapi instance, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30617\">https://nvd.nist.gov/vuln/detail/CVE-2022-30617</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6fm-r26q-p747\">https://github.com/advisories/GHSA-f6fm-r26q-p747</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747",
            "title": "[strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:01.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747"
            }
        },
        {
            "content_html": "<p>OS Command injection vulnerability in Mintzo Docker-Tester through 1.2.1 allows attackers to execute arbitrary commands via shell metacharacters in the 'ports' entry of a crafted docker-compose.yml file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34079\">https://nvd.nist.gov/vuln/detail/CVE-2021-34079</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4786\">https://advisory.checkmarx.net/advisory/CX-2021-4786</a></li>\n<li><a href=\"https://www.npmjs.com/package/docker-tester\">https://www.npmjs.com/package/docker-tester</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rj88-4777-828h\">https://github.com/advisories/GHSA-rj88-4777-828h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rj88-4777-828h",
            "title": "[docker-tester] Command injection in docker-tester",
            "date_modified": "2022-06-03T22:33:18.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rj88-4777-828h"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The gatsby-plugin-mdx plugin prior to versions 3.15.2 and 2.14.1 passes input through to the <code>gray-matter</code> npm package, which is vulnerable to JavaScript injection in its default configuration, unless input is sanitized.  The vulnerability is present when passing input in both webpack (MDX files in <code>src/pages</code> or MDX file imported as component in frontend / React code) and data mode (querying MDX nodes via GraphQL).  Injected JavaScript executes in the context of the build server.</p>\n<p>To exploit this vulnerability untrusted/unsanitized input would need to be sourced or added into an MDX file.  The following MDX payload demonstrates a vulnerable configuration:</p>\n<pre><code>---js\n((require(\"child_process\")).execSync(\"id &gt;&gt; /tmp/rce\"))\n--- \n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced in <code>gatsby-plugin-mdx@3.15.2</code> and <code>gatsby-plugin-mdx@2.14.1</code> which mitigates the issue by disabling the <code>gray-matter</code> JavaScript Frontmatter engine.  The patch introduces a new option, <code>JSFrontmatterEngine</code> which is set to <code>false</code> by default.  When setting <code>JSFrontmatterEngine</code> to <code>true</code>, input passed to <code>gatsby-plugin-mdx</code> must be sanitized before processing to avoid a security risk.  Warnings are displayed when enabling <code>JSFrontmatterEngine</code> to <code>true</code> or if it appears that the MDX input is attempting to use the Frontmatter engine.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If an older version of <code>gatsby-plugin-mdx</code> must be used, input passed into the plugin should be sanitized ahead of processing.</p>\n<p><strong>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</strong></p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Snyk [snyk.io] for initially bringing the issue to our attention, as well as Feng Xiao and Zhongfu Su, who reported the issue to Snyk.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@gatsbyjs.com\">security@gatsbyjs.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25863\">https://nvd.nist.gov/vuln/detail/CVE-2022-25863</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/pull/35830\">https://github.com/gatsbyjs/gatsby/pull/35830</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/pull/35830/commits/f214eb0694c61e348b2751cecd1aace2046bc46e\">https://github.com/gatsbyjs/gatsby/pull/35830/commits/f214eb0694c61e348b2751cecd1aace2046bc46e</a></li>\n<li><a href=\"https://drive.google.com/file/d/1EoCzbwTWOM8-fjvwMbH3bqcZ2iKksxTW/view?usp=sharing\">https://drive.google.com/file/d/1EoCzbwTWOM8-fjvwMbH3bqcZ2iKksxTW/view?usp=sharing</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-GATSBYPLUGINMDX-2405699\">https://snyk.io/vuln/SNYK-JS-GATSBYPLUGINMDX-2405699</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/advisories/GHSA-mj46-r4gr-5x83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83",
            "title": "[gatsby-plugin-mdx] Unsanitized JavaScript code injection possible in gatsby-plugin-mdx",
            "date_modified": "2022-06-14T20:08:51.000Z",
            "date_published": "2022-06-03T22:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The gatsby-plugin-mdx plugin prior to versions 3.15.2 and 2.14.1 passes input through to the <code>gray-matter</code> npm package, which is vulnerable to JavaScript injection in its default configuration, unless input is sanitized.  The vulnerability is present when passing input in both webpack (MDX files in <code>src/pages</code> or MDX file imported as component in frontend / React code) and data mode (querying MDX nodes via GraphQL).  Injected JavaScript executes in the context of the build server.</p>\n<p>To exploit this vulnerability untrusted/unsanitized input would need to be sourced or added into an MDX file.  The following MDX payload demonstrates a vulnerable configuration:</p>\n<pre><code>---js\n((require(\"child_process\")).execSync(\"id &gt;&gt; /tmp/rce\"))\n--- \n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced in <code>gatsby-plugin-mdx@3.15.2</code> and <code>gatsby-plugin-mdx@2.14.1</code> which mitigates the issue by disabling the <code>gray-matter</code> JavaScript Frontmatter engine.  The patch introduces a new option, <code>JSFrontmatterEngine</code> which is set to <code>false</code> by default.  When setting <code>JSFrontmatterEngine</code> to <code>true</code>, input passed to <code>gatsby-plugin-mdx</code> must be sanitized before processing to avoid a security risk.  Warnings are displayed when enabling <code>JSFrontmatterEngine</code> to <code>true</code> or if it appears that the MDX input is attempting to use the Frontmatter engine.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If an older version of <code>gatsby-plugin-mdx</code> must be used, input passed into the plugin should be sanitized ahead of processing.</p>\n<p><strong>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</strong></p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Snyk [snyk.io] for initially bringing the issue to our attention, as well as Feng Xiao and Zhongfu Su, who reported the issue to Snyk.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@gatsbyjs.com\">security@gatsbyjs.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25863\">https://nvd.nist.gov/vuln/detail/CVE-2022-25863</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/pull/35830\">https://github.com/gatsbyjs/gatsby/pull/35830</a></li>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/pull/35830/commits/f214eb0694c61e348b2751cecd1aace2046bc46e\">https://github.com/gatsbyjs/gatsby/pull/35830/commits/f214eb0694c61e348b2751cecd1aace2046bc46e</a></li>\n<li><a href=\"https://drive.google.com/file/d/1EoCzbwTWOM8-fjvwMbH3bqcZ2iKksxTW/view?usp=sharing\">https://drive.google.com/file/d/1EoCzbwTWOM8-fjvwMbH3bqcZ2iKksxTW/view?usp=sharing</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-GATSBYPLUGINMDX-2405699\">https://snyk.io/vuln/SNYK-JS-GATSBYPLUGINMDX-2405699</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/advisories/GHSA-mj46-r4gr-5x83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83",
            "title": "[gatsby-plugin-mdx] Unsanitized JavaScript code injection possible in gatsby-plugin-mdx",
            "date_modified": "2022-06-14T20:08:51.000Z",
            "date_published": "2022-06-03T22:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the devcert npm package, when an attacker is able to supply arbitrary input to the certificateFor method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1929\">https://nvd.nist.gov/vuln/detail/CVE-2022-1929</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/devcert-redos-xray-211352/\">https://research.jfrog.com/vulnerabilities/devcert-redos-xray-211352/</a></li>\n<li><a href=\"https://github.com/davewasmer/devcert/commit/b0763215f6683271d296fda98f7ef7bcd4a55977\">https://github.com/davewasmer/devcert/commit/b0763215f6683271d296fda98f7ef7bcd4a55977</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fp36-299x-pwmw\">https://github.com/advisories/GHSA-fp36-299x-pwmw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fp36-299x-pwmw",
            "title": "[devcert] Regular expression denial of service in devcert",
            "date_modified": "2022-06-14T20:02:53.000Z",
            "date_published": "2022-06-03T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fp36-299x-pwmw"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43306\">https://nvd.nist.gov/vuln/detail/CVE-2021-43306</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/jquery-validation-redos-xray-211348/\">https://research.jfrog.com/vulnerabilities/jquery-validation-redos-xray-211348/</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/commit/69cb17ed774b427f7e2ffcdf197968231725c30e\">https://github.com/jquery-validation/jquery-validation/commit/69cb17ed774b427f7e2ffcdf197968231725c30e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j9m2-h2pv-wvph\">https://github.com/advisories/GHSA-j9m2-h2pv-wvph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j9m2-h2pv-wvph",
            "title": "[jquery-validation] Regular expression denial of service in jquery-validation",
            "date_modified": "2022-06-03T22:27:01.000Z",
            "date_published": "2022-06-03T00:00:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j9m2-h2pv-wvph"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the semver-regex npm package, when an attacker is able to supply arbitrary input to the test() method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43307\">https://nvd.nist.gov/vuln/detail/CVE-2021-43307</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/\">https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/</a></li>\n<li><a href=\"https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c\">https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4x5v-gmq8-25ch\">https://github.com/advisories/GHSA-4x5v-gmq8-25ch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch",
            "title": "[semver-regex] Regular expression denial of service in semver-regex",
            "date_modified": "2022-06-03T22:26:34.000Z",
            "date_published": "2022-06-03T00:01:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch"
            }
        }
    ]
}