{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal 2.2.4 via the packageName variable in npm-convert.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37258\">https://nvd.nist.gov/vuln/detail/CVE-2022-37258</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1527\">https://github.com/stealjs/steal/issues/1527</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L362\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L362</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L369\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L369</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gvjw-8mmr-8f6g\">https://github.com/advisories/GHSA-gvjw-8mmr-8f6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gvjw-8mmr-8f6g",
            "title": "[steal] steal vulnerable to Prototype Pollution",
            "date_modified": "2022-09-23T13:44:50.000Z",
            "date_published": "2022-09-17T00:00:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gvjw-8mmr-8f6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An XSS issue was discovered in tooltip/tooltip.js in PrimeTek PrimeFaces 7.0.11. In a web application using PrimeFaces, an attacker can provide JavaScript code in an input field whose data is later used as a tooltip title without any input validation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10544\">https://nvd.nist.gov/vuln/detail/CVE-2020-10544</a></li>\n<li><a href=\"https://github.com/primefaces/primefaces/issues/5642\">https://github.com/primefaces/primefaces/issues/5642</a></li>\n<li><a href=\"https://github.com/primefaces/primefaces/commit/9982c4f7a83f75e3ab06168fa283e3d6128dfd1f\">https://github.com/primefaces/primefaces/commit/9982c4f7a83f75e3ab06168fa283e3d6128dfd1f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fw5f-7c6c-3vmv\">https://github.com/advisories/GHSA-fw5f-7c6c-3vmv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fw5f-7c6c-3vmv",
            "title": "[primefaces] Cross-site Scripting in PrimeFaces",
            "date_modified": "2022-09-21T22:35:52.000Z",
            "date_published": "2021-05-07T16:16:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fw5f-7c6c-3vmv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A URL parsing issue in goog.uri of the Google Closure Library versions up to and including v20200224 allows an attacker to send malicious URLs to be parsed by the library and return the wrong authority. Mitigation -- update your library to version v20200315.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-8910\">https://nvd.nist.gov/vuln/detail/CVE-2020-8910</a></li>\n<li><a href=\"https://github.com/google/closure-library/commit/294fc00b01d248419d8f8de37580adf2a0024fc9\">https://github.com/google/closure-library/commit/294fc00b01d248419d8f8de37580adf2a0024fc9</a></li>\n<li><a href=\"https://github.com/google/closure-library/releases/tag/v20200315\">https://github.com/google/closure-library/releases/tag/v20200315</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vh5w-fg69-rc8m\">https://github.com/advisories/GHSA-vh5w-fg69-rc8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vh5w-fg69-rc8m",
            "title": "[google-closure-library] Improper Input Validation in Google Closure Library",
            "date_modified": "2022-09-21T22:34:07.000Z",
            "date_published": "2021-05-07T16:06:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vh5w-fg69-rc8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>By sending specially crafted headers an attacker can bypass the source image domain allowlist, causing the handler to load and return arbitrary images. Because the response is cached globally, this image will then be served to visitors without requiring those headers to be set. XSS can be achieved by requesting a malicious SVG with embedded scripts, which would then be served from the site domain. Note that this does not apply to images loaded in <code>&lt;img&gt;</code> tags, as scripts do not execute in this context. The image URL can be set in the header independently of the request URL, meaning any site images that have not previously been cached can have their cache poisoned.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been fixed in version 1.2.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The problem is no longer exploitable on Netlify as the CDN now sanitizes the relevant header. Cached content can be cleared by re-deploying the site.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/netlify/netlify-ipx/security/advisories/GHSA-9jjv-524m-jm98\">https://github.com/netlify/netlify-ipx/security/advisories/GHSA-9jjv-524m-jm98</a></li>\n<li><a href=\"https://github.com/netlify/netlify-ipx/pull/61\">https://github.com/netlify/netlify-ipx/pull/61</a></li>\n<li><a href=\"https://github.com/netlify/netlify-ipx/commit/dfa7505a8d47a76fd527570dc40737a61500759b\">https://github.com/netlify/netlify-ipx/commit/dfa7505a8d47a76fd527570dc40737a61500759b</a></li>\n<li><a href=\"https://github.com/netlify/netlify-ipx/releases/tag/v1.2.3\">https://github.com/netlify/netlify-ipx/releases/tag/v1.2.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9jjv-524m-jm98\">https://github.com/advisories/GHSA-9jjv-524m-jm98</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9jjv-524m-jm98",
            "title": "[@netlify/ipx] @netlify/ipx vulnerable to Full Response SSRF and Stored XSS via Cache Poisoning and Improper Host Validation",
            "date_modified": "2022-09-22T22:17:45.000Z",
            "date_published": "2022-09-21T21:42:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9jjv-524m-jm98"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in stealjs steal via the alias variable in babel.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37265\">https://nvd.nist.gov/vuln/detail/CVE-2022-37265</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1534\">https://github.com/stealjs/steal/issues/1534</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L4216\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L4216</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L4569\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L4569</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wc4x-qmr2-rj8h\">https://github.com/advisories/GHSA-wc4x-qmr2-rj8h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wc4x-qmr2-rj8h",
            "title": "[steal] steal vulnerable to Prototype Pollution via alias variable",
            "date_modified": "2022-09-21T21:08:31.000Z",
            "date_published": "2022-09-21T00:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wc4x-qmr2-rj8h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal 2.2.4 via the string variable in babel.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37259\">https://nvd.nist.gov/vuln/detail/CVE-2022-37259</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1528\">https://github.com/stealjs/steal/issues/1528</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L54124\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L54124</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L54129\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L54129</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rgqx-226f-2xp4\">https://github.com/advisories/GHSA-rgqx-226f-2xp4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rgqx-226f-2xp4",
            "title": "[steal] steal Inefficient Regular Expression Complexity vulnerability via string variable",
            "date_modified": "2022-09-21T21:08:23.000Z",
            "date_published": "2022-09-21T00:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rgqx-226f-2xp4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in function convertLater in npm-convert.js in stealjs steal via the requestedVersion variable in the npm-convert.js file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37257\">https://nvd.nist.gov/vuln/detail/CVE-2022-37257</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1526\">https://github.com/stealjs/steal/issues/1526</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L362\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L362</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L371\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/npm-convert.js#L371</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93q5-3xpc-8vg3\">https://github.com/advisories/GHSA-93q5-3xpc-8vg3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-93q5-3xpc-8vg3",
            "title": "[steal] steal vulnerable to Prototype Pollution via requestedVersion variable",
            "date_modified": "2022-09-22T16:31:10.000Z",
            "date_published": "2022-09-16T00:00:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-93q5-3xpc-8vg3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in function extend in babel.js in stealjs steal via the key variable in babel.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37266\">https://nvd.nist.gov/vuln/detail/CVE-2022-37266</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1535\">https://github.com/stealjs/steal/issues/1535</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L29165\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L29165</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L29169\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/ext/babel.js#L29169</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vwhq-pm3r-fjm9\">https://github.com/advisories/GHSA-vwhq-pm3r-fjm9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vwhq-pm3r-fjm9",
            "title": "[steal] steal vulnerable to Prototype Pollution via key variable in babel.js",
            "date_modified": "2022-09-21T21:08:03.000Z",
            "date_published": "2022-09-16T00:00:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vwhq-pm3r-fjm9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the source and sourceWithComments variable in main.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37262\">https://nvd.nist.gov/vuln/detail/CVE-2022-37262</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1531\">https://github.com/stealjs/steal/issues/1531</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3497\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3497</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3507\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3507</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-28v4-jf82-jvj8\">https://github.com/advisories/GHSA-28v4-jf82-jvj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-28v4-jf82-jvj8",
            "title": "[steal] steal vulnerable to Regular Expression Denial of Service via source and sourceWithComments",
            "date_modified": "2022-09-21T21:07:53.000Z",
            "date_published": "2022-09-16T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-28v4-jf82-jvj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in stealjs steal 2.2.4 via the optionName variable in main.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37264\">https://nvd.nist.gov/vuln/detail/CVE-2022-37264</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1533\">https://github.com/stealjs/steal/issues/1533</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L2194\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L2194</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L647\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L647</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8f8g-9j73-7p82\">https://github.com/advisories/GHSA-8f8g-9j73-7p82</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8f8g-9j73-7p82",
            "title": "[steal] steal vulnerable to Prototype Pollution via optionName variable",
            "date_modified": "2022-09-21T21:07:43.000Z",
            "date_published": "2022-09-16T00:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8f8g-9j73-7p82"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular Expression Denial of Service (ReDoS) flaw was found in stealjs steal via the input variable in main.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37260\">https://nvd.nist.gov/vuln/detail/CVE-2022-37260</a></li>\n<li><a href=\"https://github.com/stealjs/steal/issues/1529\">https://github.com/stealjs/steal/issues/1529</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L2490\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L2490</a></li>\n<li><a href=\"https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3344\">https://github.com/stealjs/steal/blob/c9dd1eb19ed3f97aeb93cf9dcea5d68ad5d0ced9/main.js#L3344</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f3x-2wcx-hww8\">https://github.com/advisories/GHSA-7f3x-2wcx-hww8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f3x-2wcx-hww8",
            "title": "[steal] steal vulnerable to Regular Expression Denial of Service via input variable in main.js",
            "date_modified": "2022-09-21T21:07:37.000Z",
            "date_published": "2022-09-16T00:00:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f3x-2wcx-hww8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package vuetify from 2.0.0-beta.4 and before 2.6.10 are vulnerable to Cross-site Scripting (XSS) due to improper input sanitization in the 'eventName' function within the VCalendar component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25873\">https://nvd.nist.gov/vuln/detail/CVE-2022-25873</a></li>\n<li><a href=\"https://github.com/vuetifyjs/vuetify/issues/15757\">https://github.com/vuetifyjs/vuetify/issues/15757</a></li>\n<li><a href=\"https://github.com/vuetifyjs/vuetify/commit/ade1434927f55a0eccf3d54f900f24c5fa85a176\">https://github.com/vuetifyjs/vuetify/commit/ade1434927f55a0eccf3d54f900f24c5fa85a176</a></li>\n<li><a href=\"https://codepen.io/5v3n-08/pen/MWGKEjY\">https://codepen.io/5v3n-08/pen/MWGKEjY</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBVUETIFYJS-3024407\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWERGITHUBVUETIFYJS-3024407</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3024406\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3024406</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-VUETIFY-3019858\">https://security.snyk.io/vuln/SNYK-JS-VUETIFY-3019858</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q4q5-c5cv-2p68\">https://github.com/advisories/GHSA-q4q5-c5cv-2p68</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q4q5-c5cv-2p68",
            "title": "[vuetify] Vuetify Cross-site Scripting vulnerability",
            "date_modified": "2022-09-21T20:58:45.000Z",
            "date_published": "2022-09-19T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q4q5-c5cv-2p68"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Validation of the authentication adapter app ID for <em>Facebook</em> and <em>Spotify</em> may be circumvented.</p>\n<p>This fixes a vulnerability that affects configurations which allow users to authenticate using the Parse Server authentication adapter for <em>Facebook</em> or <em>Spotify</em> and where the server-side authentication adapter configuration <code>appIds</code> is set as a string (e.g. <code>abc</code>) instead of an array of strings (e.g. <code>[\"abc\"]</code>). The vulnerability makes it possible to authenticate requests which are coming from a <em>Facebook</em> or <em>Spotify</em> app with a different app ID than the one specified in the <code>appIds</code> configuration.</p>\n<p>Both adapters still validate the access token with the respective authentication provider. An app ID is automatically assigned by the authentication provider. For this vulnerability to be exploited, an attacker would have to be assigned an app ID by the authentication provider which is a sub-set of the server-side configured app ID.</p>\n<p>The documentation did not explicitly specify that the parameter <code>appIds</code> must be set as an array of strings and setting a string also worked. Therefore, there is a possibility that there are deployments where <code>appIds</code> is set as a string, making them vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix makes Parse Server check the type of the value set for <code>appIds</code> and throws an error if the value is not an array.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub advisory <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22\">GHSA-r657-33vp-gp22</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22\">https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/8c8ec715739e0f851338cfed794409ebac66c51b\">https://github.com/parse-community/parse-server/commit/8c8ec715739e0f851338cfed794409ebac66c51b</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/4.10.16\">https://github.com/parse-community/parse-server/releases/tag/4.10.16</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.7\">https://github.com/parse-community/parse-server/releases/tag/5.2.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r657-33vp-gp22\">https://github.com/advisories/GHSA-r657-33vp-gp22</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r657-33vp-gp22",
            "title": "[parse-server] parse-server auth adapter app ID validation can be circumvented",
            "date_modified": "2022-09-21T20:43:57.000Z",
            "date_published": "2022-09-21T20:43:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r657-33vp-gp22"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Validation of the authentication adapter app ID for <em>Facebook</em> and <em>Spotify</em> may be circumvented.</p>\n<p>This fixes a vulnerability that affects configurations which allow users to authenticate using the Parse Server authentication adapter for <em>Facebook</em> or <em>Spotify</em> and where the server-side authentication adapter configuration <code>appIds</code> is set as a string (e.g. <code>abc</code>) instead of an array of strings (e.g. <code>[\"abc\"]</code>). The vulnerability makes it possible to authenticate requests which are coming from a <em>Facebook</em> or <em>Spotify</em> app with a different app ID than the one specified in the <code>appIds</code> configuration.</p>\n<p>Both adapters still validate the access token with the respective authentication provider. An app ID is automatically assigned by the authentication provider. For this vulnerability to be exploited, an attacker would have to be assigned an app ID by the authentication provider which is a sub-set of the server-side configured app ID.</p>\n<p>The documentation did not explicitly specify that the parameter <code>appIds</code> must be set as an array of strings and setting a string also worked. Therefore, there is a possibility that there are deployments where <code>appIds</code> is set as a string, making them vulnerable.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix makes Parse Server check the type of the value set for <code>appIds</code> and throws an error if the value is not an array.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub advisory <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22\">GHSA-r657-33vp-gp22</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22\">https://github.com/parse-community/parse-server/security/advisories/GHSA-r657-33vp-gp22</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/8c8ec715739e0f851338cfed794409ebac66c51b\">https://github.com/parse-community/parse-server/commit/8c8ec715739e0f851338cfed794409ebac66c51b</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/4.10.16\">https://github.com/parse-community/parse-server/releases/tag/4.10.16</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.7\">https://github.com/parse-community/parse-server/releases/tag/5.2.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r657-33vp-gp22\">https://github.com/advisories/GHSA-r657-33vp-gp22</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r657-33vp-gp22",
            "title": "[parse-server] parse-server auth adapter app ID validation can be circumvented",
            "date_modified": "2022-09-21T20:43:57.000Z",
            "date_published": "2022-09-21T20:43:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r657-33vp-gp22"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This issue allows a client of the API to retrieve more information than the client’s OAuth scope permits when making “search-type” requests. This issue would not allow a client to retrieve information about individuals other than those the client was already authorized to access.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We recommend that users of fhir-works-on-aws-authz-smart 3.1.1 or 3.1.2 upgrade to version 3.1.3 or higher immediately. Versions 3.1.0 and below are unaffected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for this issue. Please upgrade fhir-works-on-aws-authz-smart to version 3.1.3 or higher.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/awslabs/fhir-works-on-aws-deployment\">https://github.com/awslabs/fhir-works-on-aws-deployment</a>\n<a href=\"https://github.com/awslabs/fhir-works-on-aws-authz-smart\">https://github.com/awslabs/fhir-works-on-aws-authz-smart</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Email us at <a href=\"mailto:fhir-works-on-aws-dev@amazon.com\">fhir-works-on-aws-dev@amazon.com</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/awslabs/fhir-works-on-aws-authz-smart/security/advisories/GHSA-vv7x-7w4m-q72f\">https://github.com/awslabs/fhir-works-on-aws-authz-smart/security/advisories/GHSA-vv7x-7w4m-q72f</a></li>\n<li><a href=\"https://github.com/awslabs/fhir-works-on-aws-authz-smart/commit/203bbc0dd17de748c36b33c68b866ed2dfd613d3\">https://github.com/awslabs/fhir-works-on-aws-authz-smart/commit/203bbc0dd17de748c36b33c68b866ed2dfd613d3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vv7x-7w4m-q72f\">https://github.com/advisories/GHSA-vv7x-7w4m-q72f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vv7x-7w4m-q72f",
            "title": "[fhir-works-on-aws-authz-smart] fhir-works-on-aws-authz-smart handles permissions improperly",
            "date_modified": "2022-09-21T20:36:51.000Z",
            "date_published": "2022-09-21T20:36:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vv7x-7w4m-q72f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A foreign user can write to the session object of another user if the session object ID is known. For example, a foreign user can assign the session object to their own user by writing to the <code>user</code> field and then read any custom fields of that session object.</p>\n<p>Note that assigning a session to a foreign user does not usually change the privileges of neither of the two users, according to how Parse Server uses session objects internally. However, if custom logic is used to relate specific session objects to privileges this vulnerability may have a higher level of severity.</p>\n<p>The vulnerability does not allow a foreign user to assign a session object to themselves, read the session token, and then reassign the session object to the original user to then authenticate as that user with the known session token. The vulnerability only exists for foreign session objects, a user cannot assign their own session to another user.</p>\n<p>While it is unlikely that the session object ID of another user is known, it is possible to brute-force guess an object ID, even though the attacker would not know to which user a successfully guessed session object ID belongs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix prevents writing to foreign session objects, even if the session object ID is known.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Add a <code>beforeSave</code> trigger to the <code>_Session</code> class and prevent writing if the requesting user is different from the user in the session object.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub advisory <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp\">GHSA-6w4q-23cf-j9jp</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/37fed3062ccc3ef1dfd49a9fc53318e72b3e4aff\">https://github.com/parse-community/parse-server/commit/37fed3062ccc3ef1dfd49a9fc53318e72b3e4aff</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/4.10.15\">https://github.com/parse-community/parse-server/releases/tag/4.10.15</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.6\">https://github.com/parse-community/parse-server/releases/tag/5.2.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6w4q-23cf-j9jp\">https://github.com/advisories/GHSA-6w4q-23cf-j9jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6w4q-23cf-j9jp",
            "title": "[parse-server] parse-server's session object properties can be updated by foreign user if object ID is known",
            "date_modified": "2022-09-21T18:32:03.000Z",
            "date_published": "2022-09-21T18:32:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6w4q-23cf-j9jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A foreign user can write to the session object of another user if the session object ID is known. For example, a foreign user can assign the session object to their own user by writing to the <code>user</code> field and then read any custom fields of that session object.</p>\n<p>Note that assigning a session to a foreign user does not usually change the privileges of neither of the two users, according to how Parse Server uses session objects internally. However, if custom logic is used to relate specific session objects to privileges this vulnerability may have a higher level of severity.</p>\n<p>The vulnerability does not allow a foreign user to assign a session object to themselves, read the session token, and then reassign the session object to the original user to then authenticate as that user with the known session token. The vulnerability only exists for foreign session objects, a user cannot assign their own session to another user.</p>\n<p>While it is unlikely that the session object ID of another user is known, it is possible to brute-force guess an object ID, even though the attacker would not know to which user a successfully guessed session object ID belongs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The fix prevents writing to foreign session objects, even if the session object ID is known.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Add a <code>beforeSave</code> trigger to the <code>_Session</code> class and prevent writing if the requesting user is different from the user in the session object.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub advisory <a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp\">GHSA-6w4q-23cf-j9jp</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6w4q-23cf-j9jp</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/37fed3062ccc3ef1dfd49a9fc53318e72b3e4aff\">https://github.com/parse-community/parse-server/commit/37fed3062ccc3ef1dfd49a9fc53318e72b3e4aff</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/4.10.15\">https://github.com/parse-community/parse-server/releases/tag/4.10.15</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/5.2.6\">https://github.com/parse-community/parse-server/releases/tag/5.2.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6w4q-23cf-j9jp\">https://github.com/advisories/GHSA-6w4q-23cf-j9jp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6w4q-23cf-j9jp",
            "title": "[parse-server] parse-server's session object properties can be updated by foreign user if object ID is known",
            "date_modified": "2022-09-21T18:32:03.000Z",
            "date_published": "2022-09-21T18:32:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6w4q-23cf-j9jp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Valine was discovered to contain a remote code execution (RCE) vulnerability which allows attackers to execute arbitrary code via a crafted POST request.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-38545\">https://nvd.nist.gov/vuln/detail/CVE-2022-38545</a></li>\n<li><a href=\"https://github.com/xCss/Valine/issues/400\">https://github.com/xCss/Valine/issues/400</a></li>\n<li><a href=\"https://github.com/xCss/Valine/commit/c40826c5816c98d797a6b1ed8b62bddf73ed4f65\">https://github.com/xCss/Valine/commit/c40826c5816c98d797a6b1ed8b62bddf73ed4f65</a></li>\n<li><a href=\"https://github.com/xCss/Valine/releases/tag/v1.5.0\">https://github.com/xCss/Valine/releases/tag/v1.5.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mcvg-g9wx-v5vx\">https://github.com/advisories/GHSA-mcvg-g9wx-v5vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mcvg-g9wx-v5vx",
            "title": "[valine] Valine code injection vulnerability",
            "date_modified": "2022-09-21T17:43:25.000Z",
            "date_published": "2022-09-20T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mcvg-g9wx-v5vx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects all versions of package mout. The deepFillIn function can be used to 'fill missing properties recursively', while the deepMixIn mixes objects into the target object, recursively mixing existing child objects as well. In both cases, the key used to access the target object recursively is not checked, leading to exploiting this vulnerability. <strong>Note:</strong> This vulnerability derives from an incomplete fix of <a href=\"https://security.snyk.io/vuln/SNYK-JS-MOUT-1014544\">CVE-2020-7792</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21213\">https://nvd.nist.gov/vuln/detail/CVE-2022-21213</a></li>\n<li><a href=\"https://github.com/mout/mout/blob/master/src/object/deepFillIn.js\">https://github.com/mout/mout/blob/master/src/object/deepFillIn.js</a></li>\n<li><a href=\"https://github.com/mout/mout/blob/master/src/object/deepMixIn.js\">https://github.com/mout/mout/blob/master/src/object/deepMixIn.js</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MOUT-2342654\">https://snyk.io/vuln/SNYK-JS-MOUT-2342654</a></li>\n<li><a href=\"https://github.com/mout/mout/pull/279\">https://github.com/mout/mout/pull/279</a></li>\n<li><a href=\"https://github.com/mout/mout/commit/17ffdc2a96417a63a0147156dc045e90d0d14c64\">https://github.com/mout/mout/commit/17ffdc2a96417a63a0147156dc045e90d0d14c64</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vvv8-xw5f-3f88\">https://github.com/advisories/GHSA-vvv8-xw5f-3f88</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vvv8-xw5f-3f88",
            "title": "[mout] Prototype Pollution in mout",
            "date_modified": "2022-09-21T13:04:06.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vvv8-xw5f-3f88"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>Math.random</code> and <code>crypto.getRandomValues</code> methods failed to use sufficiently random values. The initial value to seed the CSPRNG (cryptographically secure pseudorandom number generator) was baked-in to the final WebAssembly module meaning the sequence of numbers generated was predictable for that specific WebAssembly module. An attacker with access to that same WebAssembly module that calls the affected methods could use the fixed seed to predict random numbers generated by these functions. This information could be used to bypass cryptographic security controls, for example to disclose sensitive data encrypted by functions that use these generators.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed in version 0.5.3.</p>\n<p>Corrected <code>Math.random</code> and <code>crypto.getRandomValues</code> methods to always use sufficiently random values. The previous versions would use a CSPRNG (cryptographically secure pseudorandom number generator) which we would seed with a random value. However, due to our use of Wizer, the initial value to seed the CSPRNG was baked-in to the final WebAssembly module meaning the sequence of numbers generated was predictable for that specific WebAssembly module. The new implementations of both Math.random and <code>crypto.getRandomValues</code> do not use a CSPRNG and instead pull random values from WASI (WebAssembly System Interface) libc’s random_get function, which is always a sufficiently random value.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no workarounds, you must upgrade to version 0.5.3 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastly/js-compute-runtime/security/advisories/GHSA-cmr8-5w4c-44v8\">https://github.com/fastly/js-compute-runtime/security/advisories/GHSA-cmr8-5w4c-44v8</a></li>\n<li><a href=\"https://github.com/fastly/js-compute-runtime/commit/65524ffc962644e9fc39f4b368a326b6253912a9\">https://github.com/fastly/js-compute-runtime/commit/65524ffc962644e9fc39f4b368a326b6253912a9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-39218\">https://nvd.nist.gov/vuln/detail/CVE-2022-39218</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cmr8-5w4c-44v8\">https://github.com/advisories/GHSA-cmr8-5w4c-44v8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cmr8-5w4c-44v8",
            "title": "[@fastly/js-compute] Fastly Compute@Edge JS Runtime has fixed random number seed during compilation",
            "date_modified": "2022-09-21T19:22:41.000Z",
            "date_published": "2022-09-20T20:45:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cmr8-5w4c-44v8"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}