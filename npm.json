{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>url-parse prior to version 1.5.8 is vulnerable to Authorization Bypass Through User-Controlled Key.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-0686\">https://nvd.nist.gov/vuln/detail/CVE-2022-0686</a></li>\n<li><a href=\"https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5\">https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5</a></li>\n<li><a href=\"https://huntr.dev/bounties/55fd06cd-9054-4d80-83be-eb5a454be78c\">https://huntr.dev/bounties/55fd06cd-9054-4d80-83be-eb5a454be78c</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220325-0006/\">https://security.netapp.com/advisory/ntap-20220325-0006/</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html\">https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hgjh-723h-mx2j\">https://github.com/advisories/GHSA-hgjh-723h-mx2j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hgjh-723h-mx2j",
            "title": "[url-parse] Authorization Bypass Through User-Controlled Key in url-parse",
            "date_modified": "2023-03-13T22:00:19.000Z",
            "date_published": "2022-02-21T00:00:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hgjh-723h-mx2j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33502\">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1\">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103\">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210706-0001/\">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-px4h-xg32-q955\">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-px4h-xg32-q955",
            "title": "[normalize-url] ReDoS in normalize-url",
            "date_modified": "2023-03-13T21:54:45.000Z",
            "date_published": "2021-06-08T23:11:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-px4h-xg32-q955"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33502\">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1\">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103\">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210706-0001/\">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-px4h-xg32-q955\">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-px4h-xg32-q955",
            "title": "[normalize-url] ReDoS in normalize-url",
            "date_modified": "2023-03-13T21:54:45.000Z",
            "date_published": "2021-06-08T23:11:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-px4h-xg32-q955"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33502\">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1\">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103\">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210706-0001/\">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-px4h-xg32-q955\">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-px4h-xg32-q955",
            "title": "[normalize-url] ReDoS in normalize-url",
            "date_modified": "2023-03-13T21:54:45.000Z",
            "date_published": "2021-06-08T23:11:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-px4h-xg32-q955"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\\</code> and <code>/</code> characters as path separators, however <code>\\</code> is a valid filename character on posix systems.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>\n<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.16 || 5.0.8 || 6.1.7</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The problem is addressed in the following ways:</p>\n<ol>\n<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\\</code> with <code>/</code> on Windows systems, and leaving <code>\\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>\n<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>\n</ol>\n<h4 id=\"caveat\">Caveat</h4>\n<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>\n<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37701\">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9r2w-394v-53qc\">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:51:00.000Z",
            "date_published": "2021-08-31T16:05:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\\</code> and <code>/</code> characters as path separators, however <code>\\</code> is a valid filename character on posix systems.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>\n<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.16 || 5.0.8 || 6.1.7</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The problem is addressed in the following ways:</p>\n<ol>\n<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\\</code> with <code>/</code> on Windows systems, and leaving <code>\\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>\n<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>\n</ol>\n<h4 id=\"caveat\">Caveat</h4>\n<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>\n<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37701\">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9r2w-394v-53qc\">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:51:00.000Z",
            "date_published": "2021-08-31T16:05:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\\</code> and <code>/</code> characters as path separators, however <code>\\</code> is a valid filename character on posix systems.</p>\n<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>\n<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.16 || 5.0.8 || 6.1.7</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The problem is addressed in the following ways:</p>\n<ol>\n<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\\</code> with <code>/</code> on Windows systems, and leaving <code>\\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>\n<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>\n</ol>\n<h4 id=\"caveat\">Caveat</h4>\n<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>\n<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc\">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37701\">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9r2w-394v-53qc\">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:51:00.000Z",
            "date_published": "2021-08-31T16:05:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9r2w-394v-53qc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain <code>..</code> path portions, and resolving the sanitized paths against the extraction target directory.</p>\n<p>This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as <code>C:some\\path</code>.  If the drive letter does not match the extraction target, for example <code>D:\\extraction\\dir</code>, then the result of <code>path.resolve(extractionDirectory, entryPath)</code> would resolve against the current working directory on the <code>C:</code> drive, rather than the extraction target directory.</p>\n<p>Additionally, a <code>..</code> portion of the path could occur immediately after the drive letter, such as <code>C:../foo</code>, and was not properly sanitized by the logic that checked for <code>..</code> within the normalized and split portions of the path.</p>\n<p>This only affects users of <code>node-tar</code> on Windows systems.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.18 || 5.0.10 || 6.1.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.</p>\n<p>Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".</p>\n<p>Additionally, a path starting with a drive letter and then two dots, like <code>c:../</code>, would bypass the check for <code>..</code> path portions.  This is checked properly in the patched versions.</p>\n<p>Finally, a defense in depth check is added, such that if the <code>entry.absolute</code> is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\">https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37713\">https://nvd.nist.gov/vuln/detail/CVE-2021-37713</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946\">https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc\">https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598\">https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5955-9wpr-37jh\">https://github.com/advisories/GHSA-5955-9wpr-37jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh",
            "title": "[tar] Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization",
            "date_modified": "2023-03-13T21:47:38.000Z",
            "date_published": "2021-08-31T16:05:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain <code>..</code> path portions, and resolving the sanitized paths against the extraction target directory.</p>\n<p>This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as <code>C:some\\path</code>.  If the drive letter does not match the extraction target, for example <code>D:\\extraction\\dir</code>, then the result of <code>path.resolve(extractionDirectory, entryPath)</code> would resolve against the current working directory on the <code>C:</code> drive, rather than the extraction target directory.</p>\n<p>Additionally, a <code>..</code> portion of the path could occur immediately after the drive letter, such as <code>C:../foo</code>, and was not properly sanitized by the logic that checked for <code>..</code> within the normalized and split portions of the path.</p>\n<p>This only affects users of <code>node-tar</code> on Windows systems.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.18 || 5.0.10 || 6.1.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.</p>\n<p>Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".</p>\n<p>Additionally, a path starting with a drive letter and then two dots, like <code>c:../</code>, would bypass the check for <code>..</code> path portions.  This is checked properly in the patched versions.</p>\n<p>Finally, a defense in depth check is added, such that if the <code>entry.absolute</code> is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\">https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37713\">https://nvd.nist.gov/vuln/detail/CVE-2021-37713</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946\">https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc\">https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598\">https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5955-9wpr-37jh\">https://github.com/advisories/GHSA-5955-9wpr-37jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh",
            "title": "[tar] Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization",
            "date_modified": "2023-03-13T21:47:38.000Z",
            "date_published": "2021-08-31T16:05:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain <code>..</code> path portions, and resolving the sanitized paths against the extraction target directory.</p>\n<p>This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as <code>C:some\\path</code>.  If the drive letter does not match the extraction target, for example <code>D:\\extraction\\dir</code>, then the result of <code>path.resolve(extractionDirectory, entryPath)</code> would resolve against the current working directory on the <code>C:</code> drive, rather than the extraction target directory.</p>\n<p>Additionally, a <code>..</code> portion of the path could occur immediately after the drive letter, such as <code>C:../foo</code>, and was not properly sanitized by the logic that checked for <code>..</code> within the normalized and split portions of the path.</p>\n<p>This only affects users of <code>node-tar</code> on Windows systems.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>4.4.18 || 5.0.10 || 6.1.9</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.</p>\n<p>Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not \"absolute\".</p>\n<p>Additionally, a path starting with a drive letter and then two dots, like <code>c:../</code>, would bypass the check for <code>..</code> path portions.  This is checked properly in the patched versions.</p>\n<p>Finally, a defense in depth check is added, such that if the <code>entry.absolute</code> is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh\">https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37713\">https://nvd.nist.gov/vuln/detail/CVE-2021-37713</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946\">https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc\">https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598\">https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5955-9wpr-37jh\">https://github.com/advisories/GHSA-5955-9wpr-37jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh",
            "title": "[tar] Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization",
            "date_modified": "2023-03-13T21:47:38.000Z",
            "date_published": "2021-08-31T16:05:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5955-9wpr-37jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>6.1.9 || 5.0.10 || 4.4.18</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h4 id=\"fix\">Fix</h4>\n<p>The problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:</p>\n<ol>\n<li>The <code>String.normalize('NFKD')</code> method is used to first normalize all unicode to its maximally compatible and multi-code-point form.</li>\n<li>All slashes are normalized to <code>/</code> on Windows systems (on posix systems, <code>\\</code> is a valid filename character, and thus left intact).</li>\n<li>When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\">https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37712\">https://nvd.nist.gov/vuln/detail/CVE-2021-37712</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b\">https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455\">https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e\">https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qq89-hq3f-393p\">https://github.com/advisories/GHSA-qq89-hq3f-393p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:45:48.000Z",
            "date_published": "2021-08-31T16:05:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>6.1.9 || 5.0.10 || 4.4.18</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h4 id=\"fix\">Fix</h4>\n<p>The problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:</p>\n<ol>\n<li>The <code>String.normalize('NFKD')</code> method is used to first normalize all unicode to its maximally compatible and multi-code-point form.</li>\n<li>All slashes are normalized to <code>/</code> on Windows systems (on posix systems, <code>\\</code> is a valid filename character, and thus left intact).</li>\n<li>When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\">https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37712\">https://nvd.nist.gov/vuln/detail/CVE-2021-37712</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b\">https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455\">https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e\">https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qq89-hq3f-393p\">https://github.com/advisories/GHSA-qq89-hq3f-393p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:45:48.000Z",
            "date_published": "2021-08-31T16:05:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>\n<p>node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>\n<p>This logic was insufficient when extracting tar files that contained two directories and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include directories with two forms of the path that resolve to the same file system entity, followed by a symbolic link with a name in the first form, lastly followed by a file using the second form. It led to bypassing node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>\n<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>6.1.9 || 5.0.10 || 4.4.18</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>\n<pre><code class=\"language-js\">const tar = require('tar')\n\ntar.x({\n  file: 'archive.tgz',\n  filter: (file, entry) =&gt; {\n    if (entry.type === 'SymbolicLink') {\n      return false\n    } else {\n      return true\n    }\n  }\n})\n</code></pre>\n<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>\n<h4 id=\"fix\">Fix</h4>\n<p>The problem is addressed in the following ways, when comparing paths in the directory cache and path reservation systems:</p>\n<ol>\n<li>The <code>String.normalize('NFKD')</code> method is used to first normalize all unicode to its maximally compatible and multi-code-point form.</li>\n<li>All slashes are normalized to <code>/</code> on Windows systems (on posix systems, <code>\\</code> is a valid filename character, and thus left intact).</li>\n<li>When a symbolic link is encountered on Windows systems, the entire directory cache is cleared.  Collisions related to use of 8.3 short names to replace directories with other (non-symlink) types of entries may make archives fail to extract properly, but will not result in arbitrary file writes.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p\">https://github.com/npm/node-tar/security/advisories/GHSA-qq89-hq3f-393p</a></li>\n<li><a href=\"https://www.npmjs.com/package/tar\">https://www.npmjs.com/package/tar</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37712\">https://nvd.nist.gov/vuln/detail/CVE-2021-37712</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://www.debian.org/security/2021/dsa-5008\">https://www.debian.org/security/2021/dsa-5008</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html\">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b\">https://github.com/isaacs/node-tar/commit/1739408d3122af897caefd09662bce2ea477533b</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455\">https://github.com/isaacs/node-tar/commit/b6162c7fafe797f856564ef37f4b82747f051455</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e\">https://github.com/isaacs/node-tar/commit/bb93ba243746f705092905da1955ac3b0509ba1e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qq89-hq3f-393p\">https://github.com/advisories/GHSA-qq89-hq3f-393p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p",
            "title": "[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links",
            "date_modified": "2023-03-13T21:45:48.000Z",
            "date_published": "2021-08-31T16:05:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qq89-hq3f-393p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been addressed in <code>node-forge</code> <code>1.3.0</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>For more information, please see\n<a href=\"https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\">\"Bleichenbacher's RSA signature forgery based on implementation error\"</a>\nby Hal Finney.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/digitalbazaar/forge\">forge</a></li>\n<li>Email us at <a href=\"mailto:security@digitalbazaar.com\">example email address</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765\">https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24771\">https://nvd.nist.gov/vuln/detail/CVE-2022-24771</a></li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\">https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1</a></li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\">https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cfm4-qjh2-4765\">https://github.com/advisories/GHSA-cfm4-qjh2-4765</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cfm4-qjh2-4765",
            "title": "[node-forge] Improper Verification of Cryptographic Signature in node-forge",
            "date_modified": "2023-03-13T21:33:08.000Z",
            "date_published": "2022-03-18T23:09:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cfm4-qjh2-4765"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a <code>DigestInfo</code> ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been addressed in <code>node-forge</code> <code>1.3.0</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>For more information, please see\n<a href=\"https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\">\"Bleichenbacher's RSA signature forgery based on implementation error\"</a>\nby Hal Finney.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/digitalbazaar/forge\">forge</a></li>\n<li>Email us at <a href=\"mailto:security@digitalbazaar.com\">example email address</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g\">https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24772\">https://nvd.nist.gov/vuln/detail/CVE-2022-24772</a></li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\">https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1</a></li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\">https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4jg-mjrx-434g\">https://github.com/advisories/GHSA-x4jg-mjrx-434g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4jg-mjrx-434g",
            "title": "[node-forge] Improper Verification of Cryptographic Signature in node-forge",
            "date_modified": "2023-03-13T21:31:44.000Z",
            "date_published": "2022-03-18T23:10:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4jg-mjrx-434g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Elliptic package before version 6.5.3 for Node.js allows ECDSA signature malleability via variations in encoding, leading '\\0' bytes, or integer overflows. This could conceivably have a security-relevant impact if an application relied on a single canonical signature.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-13822\">https://nvd.nist.gov/vuln/detail/CVE-2020-13822</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/issues/226\">https://github.com/indutny/elliptic/issues/226</a></li>\n<li><a href=\"https://medium.com/@herman_10687/malleability-attack-why-it-matters-7b5f59fb99a4\">https://medium.com/@herman_10687/malleability-attack-why-it-matters-7b5f59fb99a4</a></li>\n<li><a href=\"https://www.npmjs.com/package/elliptic\">https://www.npmjs.com/package/elliptic</a></li>\n<li><a href=\"https://yondon.blog/2019/01/01/how-not-to-use-ecdsa/\">https://yondon.blog/2019/01/01/how-not-to-use-ecdsa/</a></li>\n<li><a href=\"https://github.com/indutny/elliptic/commit/856fe4d99fe7b6200556e6400b3bf585b1721bec\">https://github.com/indutny/elliptic/commit/856fe4d99fe7b6200556e6400b3bf585b1721bec</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vh7m-p724-62c2\">https://github.com/advisories/GHSA-vh7m-p724-62c2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vh7m-p724-62c2",
            "title": "[elliptic] Signature Malleabillity in elliptic",
            "date_modified": "2023-03-13T21:25:19.000Z",
            "date_published": "2020-07-29T20:40:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vh7m-p724-62c2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>next-auth</code> applications using OAuth provider versions before <code>v4.20.1</code> are affected.</p>\n<p>A bad actor who can spy on the victim's network or able to social engineer the victim to click a manipulated login link could intercept and tamper with the authorization URL to <strong>log in as the victim</strong>, bypassing the CSRF protection.</p>\n<p>As an example, an attack can happen in the following scenario. </p>\n<blockquote>\n<p>TL;DR: The attacker steals the victim's authenticated callback by intercepting and tampering with the authorization URL created by <code>next-auth</code>.</p>\n</blockquote>\n<ol>\n<li><p>The victim attempts to log in to the <code>next-auth</code> site. For example <a href=\"https://next-auth-example.vercel.app/\">https://next-auth-example.vercel.app/</a></p>\n</li>\n<li><p><code>next-auth</code> sets the <code>checks</code> cookies according to how the OAuth provider is configured. In this case, <code>state</code> and <code>pkce</code> are set by default for the Google Provider.</p>\n<img src=\"https://user-images.githubusercontent.com/31528554/222619750-a2062bb8-99eb-4985-a75c-d75acd3da67e.png\" alt=\"Screen Shot 2023-03-03 at 09 54 26\" width=\"1971\">\n</li>\n<li><p>The attacker intercepts the returned authorization URL, strips away the OAuth check (nonce, state, pkce), and returns the URL <em>without</em> the check to the victim's browser. For example:\nFrom</p>\n</li>\n</ol>\n<p><code>https://accounts.google.com/o/oauth2/v2/auth/oauthchooseaccount?client_id=client_id&amp;scope=openid%20email%20profile&amp;response_type=code&amp;redirect_uri=https%3A%2F%2Fnext-auth-example.vercel.app%2Fapi%2Fauth%2Fcallback%2Fgoogle&amp;state=state&amp;code_challenge=code_challenge&amp;code_challenge_method=S256&amp;service=lso&amp;o2v=2&amp;flowName=GeneralOAuthFlow</code>\nto\n<code>https://accounts.google.com/o/oauth2/v2/auth/oauthchooseaccount?client_id=client_id&amp;scope=openid%20email%20profile&amp;response_type=code&amp;redirect_uri=https%3A%2F%2Fnext-auth-example.vercel.app%2Fapi%2Fauth%2Fcallback%2Fgoogle&amp;service=lso&amp;o2v=2&amp;flowName=GeneralOAuthFlow</code>.\nNotice the parameters <code>state</code>, <code>code_challenge</code> and <code>code_verifier</code> are removed from the victim's address bar.</p>\n<ol start=\"4\">\n<li><p>The victim attempts to log in using their OAuth account.</p>\n</li>\n<li><p>The Authorization Server logs the victim in and calls back to the <code>next-auth</code> <code>api/auth/callback/:providerId</code>endpoint. \n5.1. The attacker intercepts and logs this callback URL for later use.\n5.2. <code>next-auth</code> checks the callback call from OAuth Authorization Server (doesn't have checks) and compares the checks with the cookies set (has checks) at step 2. This check will fail, resulting in the victim isn't logged in. However, at this step, the Authorization Server has already accepted the victim's request to log in and generated/sent a <code>code</code> in the URL.</p>\n</li>\n<li><p>The attacker now has an authorization URL with the <code>code</code> that the AS will exchange for valid <code>access_token</code>/<code>id_token</code> and can log in as the victim automatically. They can open a new browser window and paste in the URL logged at step 5.1 and log in as the victim.</p>\n</li>\n</ol>\n<h3 id=\"patches\">Patches</h3>\n<p>We patched the vulnerability in <code>next-auth</code> <code>v4.20.1</code> \nTo upgrade, run one of the following:</p>\n<pre><code>npm i next-auth@latest\n</code></pre>\n<pre><code>yarn add next-auth@latest\n</code></pre>\n<pre><code>pnpm add next-auth@latest\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrading to <code>latest</code> is the recommended way to fix this issue. However, using <a href=\"https://next-auth.js.org/configuration/initialization#advanced-initialization\">Advanced Initialization</a>, developers can manually check the <a href=\"https://next-auth.js.org/getting-started/rest-api#getpost-apiauthcallbackprovider\">callback request</a> for <code>state</code>, <code>pkce</code>, and <code>nonce</code> against the provider configuration, and abort the sign-in process if there is a mismatch. Check out the <a href=\"https://github.com/nextauthjs/next-auth/blob/v4/packages/next-auth/src/core/lib/oauth/checks.ts\">source code</a> for help.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6749#section-10.12\">CSRF</a></li>\n<li><a href=\"https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/\">PKCE vs nonce</a></li>\n<li><a href=\"https://next-auth.js.org/configuration/providers/oauth\">OAuth provider options</a></li>\n<li><a href=\"https://authjs.dev/reference/core/providers#checks\"><code>checks</code> provider config</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nextauthjs/next-auth/security/advisories/GHSA-7r7x-4c4q-c4qf\">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-7r7x-4c4q-c4qf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27490\">https://nvd.nist.gov/vuln/detail/CVE-2023-27490</a></li>\n<li><a href=\"https://authjs.dev/reference/core/providers#checks\">https://authjs.dev/reference/core/providers#checks</a></li>\n<li><a href=\"https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/\">https://danielfett.de/2020/05/16/pkce-vs-nonce-equivalent-or-not/</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/compare/next-auth@4.20.0...next-auth@4.20.1#diff-cf9257195d0cb6a835ae4ff1fc73fe2cac0bab847efb0832c1f551209a972b47R55\">https://github.com/nextauthjs/next-auth/compare/next-auth@4.20.0...next-auth@4.20.1#diff-cf9257195d0cb6a835ae4ff1fc73fe2cac0bab847efb0832c1f551209a972b47R55</a></li>\n<li><a href=\"https://next-auth.js.org/configuration/initialization#advanced-initialization\">https://next-auth.js.org/configuration/initialization#advanced-initialization</a></li>\n<li><a href=\"https://next-auth.js.org/configuration/providers/oauth\">https://next-auth.js.org/configuration/providers/oauth</a></li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc6749#section-10.12\">https://www.rfc-editor.org/rfc/rfc6749#section-10.12</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7r7x-4c4q-c4qf\">https://github.com/advisories/GHSA-7r7x-4c4q-c4qf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7r7x-4c4q-c4qf",
            "title": "[next-auth] Missing proper state, nonce and PKCE checks for OAuth authentication",
            "date_modified": "2023-03-13T20:52:54.000Z",
            "date_published": "2023-03-13T20:52:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7r7x-4c4q-c4qf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Due to the underlying implementation of <code>.ToString()</code>, it's possible to execute arbitrary JavaScript, or to achieve a denial-of-service, if a binding parameter is a crafted Object.</p>\n<p>Users of <code>sqlite3</code> v5.0.0 - v5.1.4 are affected by this.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in v5.1.5. All users are recommended to upgrade to v5.1.5 or later.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Ensure there is sufficient sanitization in the parent application to protect against invalid values being supplied to binding parameters.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Commit: <a href=\"https://github.com/TryGhost/node-sqlite3/commit/edb1934dd222ae55632e120d8f64552d5191c781\">https://github.com/TryGhost/node-sqlite3/commit/edb1934dd222ae55632e120d8f64552d5191c781</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:security@ghost.org\">security@ghost.org</a></li>\n</ul>\n<p>Credits: Dave McDaniel of Cisco Talos</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/TryGhost/node-sqlite3/security/advisories/GHSA-jqv5-7xpx-qj74\">https://github.com/TryGhost/node-sqlite3/security/advisories/GHSA-jqv5-7xpx-qj74</a></li>\n<li><a href=\"https://github.com/TryGhost/node-sqlite3/commit/edb1934dd222ae55632e120d8f64552d5191c781\">https://github.com/TryGhost/node-sqlite3/commit/edb1934dd222ae55632e120d8f64552d5191c781</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jqv5-7xpx-qj74\">https://github.com/advisories/GHSA-jqv5-7xpx-qj74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqv5-7xpx-qj74",
            "title": "[sqlite3] sqlite vulnerable to code execution due to Object coercion",
            "date_modified": "2023-03-13T20:00:56.000Z",
            "date_published": "2023-03-13T20:00:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqv5-7xpx-qj74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Code Injection in GitHub repository builderio/qwik prior to 0.21.0. The Function deserializer can be accessed using the pureServerFunction feature. This allows any Javascript code to be run by node.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-1283\">https://nvd.nist.gov/vuln/detail/CVE-2023-1283</a></li>\n<li><a href=\"https://github.com/builderio/qwik/commit/4d9ba6e098ae6e537aa55abb6b8369bb670ffe66\">https://github.com/builderio/qwik/commit/4d9ba6e098ae6e537aa55abb6b8369bb670ffe66</a></li>\n<li><a href=\"https://huntr.dev/bounties/63f1ff91-48f3-4886-a179-103f1ddd8ff8\">https://huntr.dev/bounties/63f1ff91-48f3-4886-a179-103f1ddd8ff8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9wf9-qvvp-2929\">https://github.com/advisories/GHSA-9wf9-qvvp-2929</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9wf9-qvvp-2929",
            "title": "[@builder.io/qwik] builderio/qwik is vulnerable to code injection",
            "date_modified": "2023-03-10T22:28:41.000Z",
            "date_published": "2023-03-09T00:30:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9wf9-qvvp-2929"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue found in Stoqey gnuplot v.0.0.3 and earlier allows attackers to execute arbitrary code via the src/index.ts, plotCallack, child_process, and/or filePath parameter(s).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33360\">https://nvd.nist.gov/vuln/detail/CVE-2021-33360</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4811/\">https://advisory.checkmarx.net/advisory/CX-2021-4811/</a></li>\n<li><a href=\"https://github.com/stoqey/gnuplot/blob/cd76060a15f58348baeef1c5fd867ce856515949/src/index.ts#L211-L217\">https://github.com/stoqey/gnuplot/blob/cd76060a15f58348baeef1c5fd867ce856515949/src/index.ts#L211-L217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-795w-7426-m94j\">https://github.com/advisories/GHSA-795w-7426-m94j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-795w-7426-m94j",
            "title": "[@stoqey/gnuplot] stoqey/gnuplot is vulnerable to command injection",
            "date_modified": "2023-03-10T21:52:20.000Z",
            "date_published": "2023-03-10T18:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-795w-7426-m94j"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}