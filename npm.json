{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Versions of the package pubnub before 7.4.0; all versions of the package com.pubnub:pubnub; versions of the package pubnub before 6.19.0; all versions of the package github.com/pubnub/go; versions of the package github.com/pubnub/go/v7 before 7.2.0; versions of the package pubnub before 7.3.0; versions of the package pubnub/pubnub before 6.1.0; versions of the package pubnub before 5.3.0; versions of the package pubnub before 0.4.0; versions of the package pubnub/c-core before 4.5.0; versions of the package com.pubnub:pubnub-kotlin before 7.7.0; versions of the package pubnub/swift before 6.2.0; versions of the package pubnub before 5.2.0; versions of the package pubnub before 4.3.0 are vulnerable to Insufficient Entropy via the getKey function, due to inefficient implementation of the AES-256-CBC cryptographic algorithm. The provided encrypt function is less secure when hex encoding and trimming are applied, leaving half of the bits in the key always the same for every encoded message or file.</p>\n<p><strong>Note:</strong></p>\n<p>In order to exploit this vulnerability, the attacker needs to invest resources in preparing the attack and brute-force the encryption.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26154\">https://nvd.nist.gov/vuln/detail/CVE-2023-26154</a></li>\n<li><a href=\"https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119\">https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119</a></li>\n<li><a href=\"https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0\">https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0</a></li>\n<li><a href=\"https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js%23L70\">https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js%23L70</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384\">https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372\">https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374\">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371\">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380\">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690\">https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376\">https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385\">https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375\">https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377\">https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378\">https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381\">https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379\">https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5844-q3fc-56rh\">https://github.com/advisories/GHSA-5844-q3fc-56rh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5844-q3fc-56rh",
            "title": "[pubnub] pubnub Insufficient Entropy vulnerability",
            "date_modified": "2023-12-06T16:55:27.000Z",
            "date_published": "2023-12-06T06:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5844-q3fc-56rh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type=\"module\"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@5.0.5\">vite@5.0.5</a>, <a href=\"mailto:vite@4.5.1\">vite@4.5.1</a>, <a href=\"mailto:vite@4.4.12\">vite@4.4.12</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Suppose <code>index.html</code> contains an inline module script:</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\"&gt;\n  // Inline script\n&lt;/script&gt;\n</code></pre>\n<p>This script is transformed into a proxy script like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>due to Vite's HTML plugin:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>\n<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47\">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>\n<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>\n<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>\n<pre><code>\"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;\n</code></pre>\n<p>so a request to <a href=\"http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E\">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/?\"&gt;&lt;/script&gt;&lt;script&gt;alert(\"boom\")&lt;/script&gt;?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>which demonstrates XSS.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>\n<li>\"Open in New Tab\"</li>\n<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>\n<li>Witness XSS:</li>\n<li><img alt=\"image\" src=\"https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png\"></li>\n</ul>\n</li>\n<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>\n<li>(Same steps as above)</li>\n</ul>\n</li>\n<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>\n<li>(Same steps as above)</li>\n<li>You should <em>not</em> see the alert box in this case</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"detailed-impact\">Detailed Impact</h3>\n<p>This will probably predominantly affect <a href=\"https://vitejs.dev/guide/ssr#setting-up-the-dev-server\">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>\n<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>\n<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>\n<pre><code class=\"language-js\">import fs from 'node:fs/promises';\nimport * as vite from 'vite';\n\nconst html = `\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script type=\"module\"&gt;\n      // Inline script\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n`;\nconst server = await vite.createServer({ appType: 'custom' });\nconst transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);\nconsole.log(transformed);\nawait server.close();\n</code></pre>\n<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49293\">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97",
            "title": "[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload",
            "date_modified": "2023-12-05T23:31:34.000Z",
            "date_published": "2023-12-05T23:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type=\"module\"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@5.0.5\">vite@5.0.5</a>, <a href=\"mailto:vite@4.5.1\">vite@4.5.1</a>, <a href=\"mailto:vite@4.4.12\">vite@4.4.12</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Suppose <code>index.html</code> contains an inline module script:</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\"&gt;\n  // Inline script\n&lt;/script&gt;\n</code></pre>\n<p>This script is transformed into a proxy script like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>due to Vite's HTML plugin:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>\n<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47\">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>\n<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>\n<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>\n<pre><code>\"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;\n</code></pre>\n<p>so a request to <a href=\"http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E\">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/?\"&gt;&lt;/script&gt;&lt;script&gt;alert(\"boom\")&lt;/script&gt;?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>which demonstrates XSS.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>\n<li>\"Open in New Tab\"</li>\n<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>\n<li>Witness XSS:</li>\n<li><img alt=\"image\" src=\"https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png\"></li>\n</ul>\n</li>\n<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>\n<li>(Same steps as above)</li>\n</ul>\n</li>\n<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>\n<li>(Same steps as above)</li>\n<li>You should <em>not</em> see the alert box in this case</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"detailed-impact\">Detailed Impact</h3>\n<p>This will probably predominantly affect <a href=\"https://vitejs.dev/guide/ssr#setting-up-the-dev-server\">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>\n<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>\n<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>\n<pre><code class=\"language-js\">import fs from 'node:fs/promises';\nimport * as vite from 'vite';\n\nconst html = `\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script type=\"module\"&gt;\n      // Inline script\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n`;\nconst server = await vite.createServer({ appType: 'custom' });\nconst transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);\nconsole.log(transformed);\nawait server.close();\n</code></pre>\n<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49293\">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97",
            "title": "[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload",
            "date_modified": "2023-12-05T23:31:34.000Z",
            "date_published": "2023-12-05T23:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type=\"module\"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"mailto:vite@5.0.5\">vite@5.0.5</a>, <a href=\"mailto:vite@4.5.1\">vite@4.5.1</a>, <a href=\"mailto:vite@4.4.12\">vite@4.4.12</a></p>\n<h3 id=\"details\">Details</h3>\n<p>Suppose <code>index.html</code> contains an inline module script:</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\"&gt;\n  // Inline script\n&lt;/script&gt;\n</code></pre>\n<p>This script is transformed into a proxy script like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>due to Vite's HTML plugin:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>\n<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47\">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>\n<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>\n<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/index.html?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>\n<pre><code>\"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;\n</code></pre>\n<p>so a request to <a href=\"http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E\">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>\n<pre><code class=\"language-html\">&lt;script type=\"module\" src=\"/@id/__x00__/?\"&gt;&lt;/script&gt;&lt;script&gt;alert(\"boom\")&lt;/script&gt;?html-proxy&amp;index=0.js\"&gt;&lt;/script&gt;\n</code></pre>\n<p>which demonstrates XSS.</p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>\n<li>\"Open in New Tab\"</li>\n<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>\n<li>Witness XSS:</li>\n<li><img alt=\"image\" src=\"https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png\"></li>\n</ul>\n</li>\n<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>\n<li>(Same steps as above)</li>\n</ul>\n</li>\n<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>\n<li>Go to <a href=\"https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev\">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>\n<li>(Same steps as above)</li>\n<li>You should <em>not</em> see the alert box in this case</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"detailed-impact\">Detailed Impact</h3>\n<p>This will probably predominantly affect <a href=\"https://vitejs.dev/guide/ssr#setting-up-the-dev-server\">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>\n<p><a href=\"https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126\">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>\n<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>\n<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>\n<pre><code class=\"language-js\">import fs from 'node:fs/promises';\nimport * as vite from 'vite';\n\nconst html = `\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script type=\"module\"&gt;\n      // Inline script\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n`;\nconst server = await vite.createServer({ appType: 'custom' });\nconst transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);\nconsole.log(transformed);\nawait server.close();\n</code></pre>\n<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49293\">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-92r3-m2mg-pj97\">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97",
            "title": "[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload",
            "date_modified": "2023-12-05T23:31:34.000Z",
            "date_published": "2023-12-05T23:31:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-92r3-m2mg-pj97"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A potential logging of the firestore key via logging within nodejs-firestore exists - Developers who were logging objects through this._settings would be logging the firestore key as well potentially exposing it to anyone with logs read access. We recommend upgrading to version 6.1.0 to avoid this issue</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6460\">https://nvd.nist.gov/vuln/detail/CVE-2023-6460</a></li>\n<li><a href=\"https://github.com/googleapis/nodejs-firestore/pull/1742\">https://github.com/googleapis/nodejs-firestore/pull/1742</a></li>\n<li><a href=\"https://github.com/googleapis/nodejs-firestore/releases/tag/v6.1.0\">https://github.com/googleapis/nodejs-firestore/releases/tag/v6.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4g6q-77j7-vvjc\">https://github.com/advisories/GHSA-4g6q-77j7-vvjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4g6q-77j7-vvjc",
            "title": "[@google-cloud/firestore] Logging of the firestore key within nodejs-firestore",
            "date_modified": "2023-12-04T23:13:52.000Z",
            "date_published": "2023-12-04T15:31:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4g6q-77j7-vvjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype Pollution in GitHub repository robinbuschmann/sequelize-typescript prior to 2.1.6.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6293\">https://nvd.nist.gov/vuln/detail/CVE-2023-6293</a></li>\n<li><a href=\"https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78\">https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78</a></li>\n<li><a href=\"https://huntr.com/bounties/36a7ecbf-4d3d-462e-86a3-cda7b1ec64e2\">https://huntr.com/bounties/36a7ecbf-4d3d-462e-86a3-cda7b1ec64e2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pvx-4585-hqww\">https://github.com/advisories/GHSA-7pvx-4585-hqww</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pvx-4585-hqww",
            "title": "[sequelize-typescript] sequelize-typescript Prototype Pollution vulnerability",
            "date_modified": "2023-12-01T22:37:52.000Z",
            "date_published": "2023-11-24T21:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pvx-4585-hqww"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>\n<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no app side workarounds, you must update to a patched version of Electron.</p>\n<h3 id=\"fixed-versions\">Fixed Versions</h3>\n<ul>\n<li><code>27.0.0-alpha.7</code></li>\n<li><code>26.2.1</code></li>\n<li><code>25.8.1</code></li>\n<li><code>24.8.3</code></li>\n<li><code>23.3.14</code></li>\n<li><code>22.3.24</code></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@electronjs.org\">security@electronjs.org</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85\">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-44402\">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>\n<li><a href=\"https://github.com/electron/electron/pull/39788\">https://github.com/electron/electron/pull/39788</a></li>\n<li><a href=\"https://www.electronjs.org/docs/latest/tutorial/fuses\">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7m48-wc93-9g85\">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85",
            "title": "[electron] ASAR Integrity bypass via filetype confusion in electron",
            "date_modified": "2023-12-04T15:19:18.000Z",
            "date_published": "2023-12-01T21:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7m48-wc93-9g85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>@adobe/css-tools version 4.3.1 and earlier are affected by an Improper Input Validation vulnerability that could result in a denial of service while attempting to parse CSS.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been resolved in 4.3.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<p>N/A</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/adobe/css-tools/security/advisories/GHSA-prr3-c3m5-p7q2\">https://github.com/adobe/css-tools/security/advisories/GHSA-prr3-c3m5-p7q2</a></li>\n<li><a href=\"https://github.com/adobe/css-tools/issues/211\">https://github.com/adobe/css-tools/issues/211</a></li>\n<li><a href=\"https://github.com/adobe/css-tools/pull/249\">https://github.com/adobe/css-tools/pull/249</a></li>\n<li><a href=\"https://github.com/adobe/css-tools/commit/472bef91bde9caab305f3f36231ad0c253581b43\">https://github.com/adobe/css-tools/commit/472bef91bde9caab305f3f36231ad0c253581b43</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-prr3-c3m5-p7q2\">https://github.com/advisories/GHSA-prr3-c3m5-p7q2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-prr3-c3m5-p7q2",
            "title": "[@adobe/css-tools] @adobe/css-tools Improper Input Validation and Inefficient Regular Expression Complexity",
            "date_modified": "2023-11-30T19:51:30.000Z",
            "date_published": "2023-11-30T19:51:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-prr3-c3m5-p7q2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23484\">https://nvd.nist.gov/vuln/detail/CVE-2021-23484</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085\">https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365\">https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477\">https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b\">https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxj7-97fp-j53j\">https://github.com/advisories/GHSA-wxj7-97fp-j53j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxj7-97fp-j53j",
            "title": "[zip-local] Exposure of Resource to Wrong Sphere in Zip-Local",
            "date_modified": "2023-11-29T22:46:07.000Z",
            "date_published": "2022-02-01T00:46:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxj7-97fp-j53j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>\n<h3 id=\"poc\">POC</h3>\n<pre><code class=\"language-js\">const y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n</code></pre>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7774\">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>\n<li><a href=\"https://github.com/yargs/y18n/issues/96\">https://github.com/yargs/y18n/issues/96</a></li>\n<li><a href=\"https://github.com/yargs/y18n/pull/108\">https://github.com/yargs/y18n/pull/108</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-Y18N-1021887\">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25\">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3\">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4w7-xm78-47vh\">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh",
            "title": "[y18n] Prototype Pollution in y18n",
            "date_modified": "2023-11-29T22:45:30.000Z",
            "date_published": "2021-03-29T16:05:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>\n<h3 id=\"poc\">POC</h3>\n<pre><code class=\"language-js\">const y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n</code></pre>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7774\">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>\n<li><a href=\"https://github.com/yargs/y18n/issues/96\">https://github.com/yargs/y18n/issues/96</a></li>\n<li><a href=\"https://github.com/yargs/y18n/pull/108\">https://github.com/yargs/y18n/pull/108</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-Y18N-1021887\">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25\">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3\">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4w7-xm78-47vh\">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh",
            "title": "[y18n] Prototype Pollution in y18n",
            "date_modified": "2023-11-29T22:45:30.000Z",
            "date_published": "2021-03-29T16:05:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>\n<h3 id=\"poc\">POC</h3>\n<pre><code class=\"language-js\">const y18n = require('y18n')();\n\ny18n.setLocale('__proto__');\ny18n.updateLocale({polluted: true});\n\nconsole.log(polluted); // true\n</code></pre>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7774\">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>\n<li><a href=\"https://github.com/yargs/y18n/issues/96\">https://github.com/yargs/y18n/issues/96</a></li>\n<li><a href=\"https://github.com/yargs/y18n/pull/108\">https://github.com/yargs/y18n/pull/108</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-Y18N-1021887\">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25\">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf\">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>\n<li><a href=\"https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3\">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c4w7-xm78-47vh\">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh",
            "title": "[y18n] Prototype Pollution in y18n",
            "date_modified": "2023-11-29T22:45:30.000Z",
            "date_published": "2021-03-29T16:05:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c4w7-xm78-47vh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (<code>async=False</code> on <code>xhr.open</code>), malicious user input flowing into <code>xhr.send</code> could result in arbitrary code being injected and run.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28502\">https://nvd.nist.gov/vuln/detail/CVE-2020-28502</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6\">https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480\">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480\">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531\">https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935\">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936\">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291\">https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4j5-c7cj-74xg\">https://github.com/advisories/GHSA-h4j5-c7cj-74xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4j5-c7cj-74xg",
            "title": "[xmlhttprequest-ssl] xmlhttprequest and xmlhttprequest-ssl vulnerable to Arbitrary Code Injection",
            "date_modified": "2023-11-29T22:44:55.000Z",
            "date_published": "2021-05-04T18:02:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4j5-c7cj-74xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (<code>async=False</code> on <code>xhr.open</code>), malicious user input flowing into <code>xhr.send</code> could result in arbitrary code being injected and run.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28502\">https://nvd.nist.gov/vuln/detail/CVE-2020-28502</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6\">https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480\">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480</a></li>\n<li><a href=\"https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480\">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531\">https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938\">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935\">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936\">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291\">https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h4j5-c7cj-74xg\">https://github.com/advisories/GHSA-h4j5-c7cj-74xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h4j5-c7cj-74xg",
            "title": "[xmlhttprequest] xmlhttprequest and xmlhttprequest-ssl vulnerable to Arbitrary Code Injection",
            "date_modified": "2023-11-29T22:44:55.000Z",
            "date_published": "2021-05-04T18:02:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h4j5-c7cj-74xg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The xmlhttprequest-ssl package before 1.6.1 for Node.js disables SSL certificate validation by default, because rejectUnauthorized (when the property exists but is undefined) is considered to be false within the https.request function of Node.js. In other words, no certificate is ever rejected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-31597\">https://nvd.nist.gov/vuln/detail/CVE-2021-31597</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2\">https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2</a></li>\n<li><a href=\"https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1\">https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1</a></li>\n<li><a href=\"https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt\">https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20210618-0004/\">https://security.netapp.com/advisory/ntap-20210618-0004/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-72mh-269x-7mh5\">https://github.com/advisories/GHSA-72mh-269x-7mh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-72mh-269x-7mh5",
            "title": "[xmlhttprequest-ssl] Improper Certificate Validation in xmlhttprequest-ssl",
            "date_modified": "2023-11-29T22:43:23.000Z",
            "date_published": "2021-05-24T19:52:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-72mh-269x-7mh5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}