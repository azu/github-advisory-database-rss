{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Versions of <code>samlify</code> prior to 2.4.0-rc5 are vulnerable to Authentication Bypass. The package fails to prevent XML Signature Wrapping, allowing tokens to be reused with different usernames. A remote attacker can modify SAML content for a SAML service provider without invalidating the cryptographic signature, which may allow attackers to bypass primary authentication for the affected SAML service provider.</p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Upgrade to version 2.4.0-rc5 or later</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-1000452\">https://nvd.nist.gov/vuln/detail/CVE-2017-1000452</a></li>\n<li><a href=\"https://hackerone.com/reports/356284\">https://hackerone.com/reports/356284</a></li>\n<li><a href=\"https://www.whitehats.nl/blog/xml-signature-wrapping-samlify\">https://www.whitehats.nl/blog/xml-signature-wrapping-samlify</a></li>\n<li><a href=\"https://github.com/tngan/samlify/commit/d382bbc7c6b8ea889839ae1f178730c25b09eb42\">https://github.com/tngan/samlify/commit/d382bbc7c6b8ea889839ae1f178730c25b09eb42</a></li>\n<li><a href=\"https://github.com/tngan/samlify/compare/v2.4.0-rc4...v2.4.0-rc5\">https://github.com/tngan/samlify/compare/v2.4.0-rc4...v2.4.0-rc5</a></li>\n<li><a href=\"https://github.com/tngan/samlify/releases/tag/v2.4.0-rc5\">https://github.com/tngan/samlify/releases/tag/v2.4.0-rc5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8jjf-w7j6-323c\">https://github.com/advisories/GHSA-8jjf-w7j6-323c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8jjf-w7j6-323c",
            "title": "[samlify] Samlify vulnerable to Authentication Bypass by allowing tokens to be reused with different usernames",
            "date_modified": "2023-08-18T21:00:55.000Z",
            "date_published": "2018-01-04T21:03:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8jjf-w7j6-323c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package underscore-keypath from 0.0.11 are vulnerable to Prototype Pollution via the name argument of the <code>setProperty()</code> function. Exploiting this vulnerability is possible due to improper input sanitization which allows the usage of arguments like <code>__proto__</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26139\">https://nvd.nist.gov/vuln/detail/CVE-2023-26139</a></li>\n<li><a href=\"https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252\">https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714\">https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gpvc-mx6g-cchv\">https://github.com/advisories/GHSA-gpvc-mx6g-cchv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gpvc-mx6g-cchv",
            "title": "[underscore-keypath] underscore-keypath vulnerable to Prototype Pollution",
            "date_modified": "2023-08-18T05:06:01.000Z",
            "date_published": "2023-08-01T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gpvc-mx6g-cchv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Angular Universal applications on 16.1.0 and 16.1.1 using critical CSS inlining are vulnerable to a <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> attack where an attacker can trick another user into visiting a page which injects malicious JavaScript.</p>\n<p>Angular CLI applications without Universal do perform critical CSS inlining as well, however exploiting this requires a malicious actor to already have access to modify source code directly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><code>@nguniversal/common</code> should be upgraded to 16.1.2 or higher. 16.2.0-rc.0 is safe.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The easiest solution is likely to upgrade Universal to 16.1.2 or downgrade to 16.0.x or lower. Alternatively you can <a href=\"https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides\">override</a> specifically the <code>critters</code> dependency with version <code>0.0.20</code> in your <code>package.json</code>.</p>\n<pre><code class=\"language-json\">{\n  \"overrides\": {\n    \"critters\": \"0.0.20\"\n  }\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://blog.angular.io/notice-of-xss-issue-affecting-angular-universal-16-1-0-16-1-1-95dbae068f\">Angular Blog Post</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p\">https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3hf-q8q7-fv2p\">https://github.com/advisories/GHSA-r3hf-q8q7-fv2p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3hf-q8q7-fv2p",
            "title": "[@nguniversal/common] Angular critical CSS inlining Cross-site Scripting Vulnerability Advisory",
            "date_modified": "2023-08-18T05:03:14.000Z",
            "date_published": "2023-08-09T12:51:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3hf-q8q7-fv2p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>The <code>import-in-the-middle</code> loader used by <code>@opentelemetry/instrumentation</code> works by generating a wrapper module on the fly. The wrapper uses the module specifier to load the original module and add some wrapping code. It allows for remote code execution in cases where an application passes user-supplied input directly to an <code>import()</code> function.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>This vulnerability has been patched in <code>@opentelemetry/instrumentation</code> version <code>0.41.2</code></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<ul>\n<li>Do not pass any user-supplied input to <code>import()</code>. Instead, verify it against a set of allowed values.</li>\n<li>If using <code>@opentelemetry/instrumentation</code> with support for EcmaScript Modules is not needed, ensure that none of the following options are set (either via command-line or the <code>NODE_OPTIONS</code> environment variable):</li>\n</ul>\n<pre><code>--experimental-loader=@opentelemetry/instrumentation/hook.mjs\n--experimental-loader @opentelemetry/instrumentation/hook.mjs\n--loader=import-in-the-middle/hook.mjs\n--loader import-in-the-middle/hook.mjs\n</code></pre>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967\">https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5\">https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5</a></li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28\">https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8pq-3926-8gx5\">https://github.com/advisories/GHSA-f8pq-3926-8gx5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8pq-3926-8gx5",
            "title": "[@opentelemetry/instrumentation] Unsanitized user controlled input in module generation",
            "date_modified": "2023-08-18T05:03:02.000Z",
            "date_published": "2023-08-09T20:59:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8pq-3926-8gx5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>node-connect before 2.8.2 has cross site scripting in Sencha Labs Connect middleware (vulnerability due to incomplete fix for CVE-2013-7370)</p>\n<h3 id=\"overview\">Overview</h3>\n<p>Connect is a stack of middleware that is executed in order in each request.</p>\n<p>The \"methodOverride\" middleware allows the http post to override the method of the request with the value of the \"_method\" post key or with the header \"x-http-method-override\".</p>\n<p>Because the user post input was not checked, req.method could contain any kind of value. Because the req.method did not match any common method VERB, connect answered with a 404 page containing the \"Cannot <code>[method]</code> <code>[url]</code>\" content. The method was not properly encoded for output in the browser.</p>\n<h3 id=\"example\">Example:</h3>\n<pre><code>~ curl \"localhost:3000\" -d \"_method=&lt;script src=http://nodesecurity.io/xss.js&gt;&lt;/script&gt;\"\nCannot &lt;SCRIPT SRC=HTTP://NODESECURITY.IO/XSS.JS&gt;&lt;/SCRIPT&gt; /\n</code></pre>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>Update to the newest version of Connect or disable methodOverride. It is not possible to avoid the vulnerability if you have enabled this middleware in the top of your stack.</p>\n<h3 id=\"credit\">Credit:</h3>\n<p>Sergio Arcos</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2013-7371\">https://nvd.nist.gov/vuln/detail/CVE-2013-7371</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2013-7371\">https://access.redhat.com/security/cve/cve-2013-7371</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/92710\">https://exchange.xforce.ibmcloud.com/vulnerabilities/92710</a></li>\n<li><a href=\"https://nodesecurity.io/advisories/methodOverride_Middleware_Reflected_Cross-Site_Scripting\">https://nodesecurity.io/advisories/methodOverride_Middleware_Reflected_Cross-Site_Scripting</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/CVE-2013-7371\">https://security-tracker.debian.org/tracker/CVE-2013-7371</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2014/04/21/2\">http://www.openwall.com/lists/oss-security/2014/04/21/2</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2014/05/13/1\">http://www.openwall.com/lists/oss-security/2014/05/13/1</a></li>\n<li><a href=\"https://github.com/senchalabs/connect/issues/831\">https://github.com/senchalabs/connect/issues/831</a></li>\n<li><a href=\"https://github.com/senchalabs/connect/commit/126187c4e12162e231b87350740045e5bb06e93a\">https://github.com/senchalabs/connect/commit/126187c4e12162e231b87350740045e5bb06e93a</a></li>\n<li><a href=\"https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135\">https://github.com/senchalabs/connect/commit/277e5aad6a95d00f55571a9a0e11f2fa190d8135</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6w62-83g6-rfhj\">https://github.com/advisories/GHSA-6w62-83g6-rfhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6w62-83g6-rfhj",
            "title": "[connect] Node Connect Reflected Cross-Site Scripting in Sencha Labs Connect middleware",
            "date_modified": "2023-08-17T22:50:29.000Z",
            "date_published": "2022-05-05T00:29:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6w62-83g6-rfhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Prototype Pollution issue in Cronvel Tree-kit v.0.7.4 and before allows a remote attacker to execute arbitrary code via the extend function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38894\">https://nvd.nist.gov/vuln/detail/CVE-2023-38894</a></li>\n<li><a href=\"https://www.code-intelligence.com/blog/treekit-prototype-pollution-cve-2023-38894\">https://www.code-intelligence.com/blog/treekit-prototype-pollution-cve-2023-38894</a></li>\n<li><a href=\"https://github.com/cronvel/tree-kit/commit/61bf10cf0dbddaeea3f198cfe7cb469f360d82bc\">https://github.com/cronvel/tree-kit/commit/61bf10cf0dbddaeea3f198cfe7cb469f360d82bc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5p42-m6f3-hpmj\">https://github.com/advisories/GHSA-5p42-m6f3-hpmj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5p42-m6f3-hpmj",
            "title": "[tree-kit] tree-kit Prototype Pollution vulnerability",
            "date_modified": "2023-08-17T19:06:31.000Z",
            "date_published": "2023-08-17T00:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5p42-m6f3-hpmj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package cycle-import-check before version 1.3.2 is vulnerable to Command Injection via the <code>writeFileToTmpDirAndOpenIt</code> function due to improper user-input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24377\">https://nvd.nist.gov/vuln/detail/CVE-2022-24377</a></li>\n<li><a href=\"https://github.com/Soontao/cycle-import-check/commit/1ca97b59df7e9c704471fcb4cf042ce76d7c9890\">https://github.com/Soontao/cycle-import-check/commit/1ca97b59df7e9c704471fcb4cf042ce76d7c9890</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-CYCLEIMPORTCHECK-3157955\">https://security.snyk.io/vuln/SNYK-JS-CYCLEIMPORTCHECK-3157955</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-995x-33wq-8gc9\">https://github.com/advisories/GHSA-995x-33wq-8gc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-995x-33wq-8gc9",
            "title": "[cycle-import-check] cycle-import-check vulnerable to Command Injection",
            "date_modified": "2023-08-17T05:02:52.000Z",
            "date_published": "2022-12-14T06:30:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-995x-33wq-8gc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37603\">https://nvd.nist.gov/vuln/detail/CVE-2022-37603</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/213\">https://github.com/webpack/loader-utils/issues/213</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3rfm-jhwj-7488\">https://github.com/advisories/GHSA-3rfm-jhwj-7488</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable",
            "date_modified": "2023-08-17T05:02:52.000Z",
            "date_published": "2022-10-14T19:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37603\">https://nvd.nist.gov/vuln/detail/CVE-2022-37603</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/213\">https://github.com/webpack/loader-utils/issues/213</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3rfm-jhwj-7488\">https://github.com/advisories/GHSA-3rfm-jhwj-7488</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable",
            "date_modified": "2023-08-17T05:02:52.000Z",
            "date_published": "2022-10-14T19:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils 2.0.0 via the url variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37603\">https://nvd.nist.gov/vuln/detail/CVE-2022-37603</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/213\">https://github.com/webpack/loader-utils/issues/213</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L107</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ERN6YE3DS7NBW7UH44SCJBMNC2NWQ7SM/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KAC5KQ2SEWAMQ6UZAUBZ5KXKEOESH375/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VNV2GNZXOTEDAJRFH3ZYWRUBGIVL7BSU/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3rfm-jhwj-7488\">https://github.com/advisories/GHSA-3rfm-jhwj-7488</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS) via url variable",
            "date_modified": "2023-08-17T05:02:52.000Z",
            "date_published": "2022-10-14T19:00:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3rfm-jhwj-7488"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37599\">https://nvd.nist.gov/vuln/detail/CVE-2022-37599</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/211\">https://github.com/webpack/loader-utils/issues/211</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhq3-ff78-jv3g\">https://github.com/advisories/GHSA-hhq3-ff78-jv3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2023-08-17T05:02:51.000Z",
            "date_published": "2022-10-12T12:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37599\">https://nvd.nist.gov/vuln/detail/CVE-2022-37599</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/211\">https://github.com/webpack/loader-utils/issues/211</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhq3-ff78-jv3g\">https://github.com/advisories/GHSA-hhq3-ff78-jv3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2023-08-17T05:02:51.000Z",
            "date_published": "2022-10-12T12:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A regular expression denial of service (ReDoS) flaw was found in Function interpolateName in interpolateName.js in webpack loader-utils via the resourcePath variable in interpolateName.js. A badly or maliciously formed string could be used to send crafted requests that cause a system to crash or take a disproportional amount of time to process. This issue has been patched in versions 1.4.2, 2.0.4 and 3.2.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37599\">https://nvd.nist.gov/vuln/detail/CVE-2022-37599</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/211\">https://github.com/webpack/loader-utils/issues/211</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L38</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83\">https://github.com/webpack/loader-utils/blob/d9f4e23cf411d8556f8bac2d3bf05a6e0103b568/lib/interpolateName.js#L83</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/issues/216\">https://github.com/webpack/loader-utils/issues/216</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa\">https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb\">https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb</a></li>\n<li><a href=\"https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1\">https://github.com/webpack/loader-utils/commit/d2d752d59629daee38f34b24307221349c490eb1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hhq3-ff78-jv3g\">https://github.com/advisories/GHSA-hhq3-ff78-jv3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g",
            "title": "[loader-utils] loader-utils is vulnerable to Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2023-08-17T05:02:51.000Z",
            "date_published": "2022-10-12T12:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hhq3-ff78-jv3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package css-what before 2.1.3 is vulnerable to Regular Expression Denial of Service (ReDoS) due to the use of insecure regular expression in the <code>re_attr</code> variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21222\">https://nvd.nist.gov/vuln/detail/CVE-2022-21222</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-CSSWHAT-3035488\">https://security.snyk.io/vuln/SNYK-JS-CSSWHAT-3035488</a></li>\n<li><a href=\"https://github.com/fb55/css-what/commit/dc510929790da6617e7aa93a616498b22f6a6b72\">https://github.com/fb55/css-what/commit/dc510929790da6617e7aa93a616498b22f6a6b72</a></li>\n<li><a href=\"https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js#23L12\">https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js#23L12</a></li>\n<li><a href=\"https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js%23L12\">https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js%23L12</a></li>\n<li><a href=\"https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html\">https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p28h-cc7q-c4fg\">https://github.com/advisories/GHSA-p28h-cc7q-c4fg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p28h-cc7q-c4fg",
            "title": "[css-what] css-what vulnerable to ReDoS due to use of insecure regular expression",
            "date_modified": "2023-08-17T05:02:51.000Z",
            "date_published": "2022-10-01T00:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p28h-cc7q-c4fg"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}