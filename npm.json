{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h2 id=\"password-reset-vulnerable-to-accent-confusion\">Password reset vulnerable to accent confusion</h2>\n<p>The password reset mechanism of the Directus backend is implemented in a way where combined with (specific, need to double check if i can work around) configuration in MySQL or MariaDB. As such, it allows attackers to receive a password reset email of a victim user, specifically having it arrive at a similar email address as the victim with a one or more characters changed to use accents. </p>\n<p>This is due to the fact that by default MySQL/MariaDB are configured for accent-insenstive and case-insensitve comparisons.</p>\n<p>MySQL weak comparison:</p>\n<pre><code class=\"language-sql\">select 1 from directus_users where 'julian@cure53.de' = 'julian@cüre53.de';\n</code></pre>\n<p>This is exploitable due to an error in the API using the supplied email address for sending the reset password mail instead of using the email from the database.</p>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce:</h3>\n<ol>\n<li>If the attacker knows the email address of the victim user, i.e., <code>julian@cure53.de</code>. (possibly just the domain could be enough for an educated guess)</li>\n<li>A off-by-one accented domain <code>cüre53.de</code> can be registered to be able to receive emails.</li>\n<li>With this email the attacker can request a password reset for <code>julian@cüre53.de</code>.</li>\n</ol>\n<pre><code class=\"language-http\">POST /auth/password/request HTTP/1.1\nHost: example.com\n[...]\n{\"email\":\"julian@cüre53.de\"}\n</code></pre>\n<ol start=\"4\">\n<li>The supplied email (julian@cüre53.de) gets checked against the database and will match the non-accented email <code>julian@cure53.de</code> and will continue to email the password reset link to the provided email address instead of the saved email address.</li>\n<li>With this email the attacker can log into the target account and use it for nefarious things</li>\n</ol>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Should be possible with collations but haven't been able to confirm this. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/\">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html\">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5\">https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919\">https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html\">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>\n<li><a href=\"https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation\">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27295\">https://nvd.nist.gov/vuln/detail/CVE-2024-27295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw9g-7549-7wg5\">https://github.com/advisories/GHSA-qw9g-7549-7wg5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw9g-7549-7wg5",
            "title": "[directus] Directus has MySQL accent insensitive email matching",
            "date_modified": "2024-03-01T18:58:44.000Z",
            "date_published": "2024-03-01T16:58:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw9g-7549-7wg5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In mongo-express 1.0.2, /admin allows CSRF, as demonstrated by deletion of a Collection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52555\">https://nvd.nist.gov/vuln/detail/CVE-2023-52555</a></li>\n<li><a href=\"https://github.com/mongo-express/mongo-express/issues/1338\">https://github.com/mongo-express/mongo-express/issues/1338</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fffg-cwc9-xvj7\">https://github.com/advisories/GHSA-fffg-cwc9-xvj7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fffg-cwc9-xvj7",
            "title": "[mongo-express] mongo-express Cross-site Request Forgery vulnerability",
            "date_modified": "2024-03-01T16:58:16.000Z",
            "date_published": "2024-03-01T09:31:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fffg-cwc9-xvj7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SDK versions between and including 5.16.0 and 5.19.0 allowed Sentry auth tokens to be set in the optional authToken configuration parameter, for debugging purposes. Doing so would result in the auth token being built into the application bundle, and therefore the auth token could be potentially exposed in case the application bundle is subsequently published.</p>\n<p>You may ignore this notification if you are not using <code>authToken</code> configuration parameter in your React Native SDK configuration or did not publish apps using this way of configuring the <code>authToken</code>.</p>\n<p>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href=\"https://docs.sentry.io/product/accounts/auth-tokens/\">rotate your token</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The behavior that allowed setting an <code>authToken</code> parameter was fixed in SDK version 5.19.1 where, if this parameter was set, you will see a warning and the <code>authToken</code> would be removed before bundling the application.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ol>\n<li>Remove <code>authToken</code> from the plugin configuration.</li>\n<li>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href=\"https://docs.sentry.io/product/accounts/auth-tokens/\">rotate your token</a>.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1\">sentry-react-native 5.19.1 release notes</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-docs/pull/9244\">https://github.com/getsentry/sentry-docs/pull/9244</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95\">https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b\">https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1\">https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68c2-4mpx-qh95\">https://github.com/advisories/GHSA-68c2-4mpx-qh95</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68c2-4mpx-qh95",
            "title": "[@sentry/react-native] Potential leakage of Sentry auth tokens by React Native SDK with Expo plugin",
            "date_modified": "2024-03-01T16:57:57.000Z",
            "date_published": "2024-03-01T16:57:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68c2-4mpx-qh95"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Nteract v.0.28.0 was discovered to contain a remote code execution (RCE) vulnerability via the Markdown link.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22891\">https://nvd.nist.gov/vuln/detail/CVE-2024-22891</a></li>\n<li><a href=\"https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891\">https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jvg-hp25-42f6\">https://github.com/advisories/GHSA-6jvg-hp25-42f6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jvg-hp25-42f6",
            "title": "[nteract] Nteract Remote Code Execution vulnerability",
            "date_modified": "2024-03-01T16:57:13.000Z",
            "date_published": "2024-03-01T06:33:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jvg-hp25-42f6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package sanitize-html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21501\">https://nvd.nist.gov/vuln/detail/CVE-2024-21501</a></li>\n<li><a href=\"https://github.com/apostrophecms/sanitize-html/pull/650\">https://github.com/apostrophecms/sanitize-html/pull/650</a></li>\n<li><a href=\"https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4\">https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4</a></li>\n<li><a href=\"https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf\">https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf</a></li>\n<li><a href=\"https://github.com/apostrophecms/apostrophe/discussions/4436\">https://github.com/apostrophecms/apostrophe/discussions/4436</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334\">https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rm97-x556-q36h\">https://github.com/advisories/GHSA-rm97-x556-q36h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rm97-x556-q36h",
            "title": "[sanitize-html] sanitize-html Information Exposure vulnerability",
            "date_modified": "2024-03-01T16:55:54.000Z",
            "date_published": "2024-02-24T06:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rm97-x556-q36h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>webui-aria2 commit 4fe2e was discovered to contain a path traversal vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39141\">https://nvd.nist.gov/vuln/detail/CVE-2023-39141</a></li>\n<li><a href=\"https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e\">https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e</a></li>\n<li><a href=\"https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10\">https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-crv8-r5wq-gv2w\">https://github.com/advisories/GHSA-crv8-r5wq-gv2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-crv8-r5wq-gv2w",
            "title": "[webui-aria2] webui-aria2 Path Traversal vulnerability",
            "date_modified": "2024-03-01T14:58:13.000Z",
            "date_published": "2023-08-22T21:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-crv8-r5wq-gv2w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"problem\">Problem</h3>\n<p>User sessions in the @nfid/embed SDK with Ed25519 keys are vulnerable due to a compromised private key <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. This exposes users to potential loss of funds on ledgers and unauthorized access to canisters they control.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Using version &gt;1.0.1 of @dfinity/auth-client and @dfinity/identity packages, or @nfid/embed &gt;0.10.1-alpha.6 includes patched versions of the issue.</p>\n<p>User sessions will be automatically fixed when they re-authenticate.</p>\n<h3 id=\"why-this-happened\">Why this happened</h3>\n<p>The DFINITY auth client library provides a function, <code>Ed25519KeyIdentity.generate</code>, for generating an Ed25519 key pair. This function includes an optional parameter to supply a 32-byte seed value, which will be utilized as the secret key. In cases where no seed value is provided, the library is expected to generate the secret key using secure randomness. However, a recent update of DFINITY libraries has compromised this assurance by employing an insecure seed for key pair generation.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3\">AgentJS CVE </a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3\">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>\n<li><a href=\"https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8\">https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-84c3-j8r2-mcm8\">https://github.com/advisories/GHSA-84c3-j8r2-mcm8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-84c3-j8r2-mcm8",
            "title": "[@nfid/embed] @nfid/embed has compromised private key due to @dfinity/auth-client producing insecure session keys",
            "date_modified": "2024-02-26T20:10:11.000Z",
            "date_published": "2024-02-26T20:10:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-84c3-j8r2-mcm8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Passing functions with very long names or complex default argument names into <code>function#copy</code> or<code>function#toStringTokens</code> may put script to stall</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed with <a href=\"https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2\">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a> and <a href=\"https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602\">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a>\nPublished with v0.10.63</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No real workaround aside of refraining from using above utilities.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/medikoo/es5-ext/issues/201\">https://github.com/medikoo/es5-ext/issues/201</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h\">https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27088\">https://nvd.nist.gov/vuln/detail/CVE-2024-27088</a></li>\n<li><a href=\"https://github.com/medikoo/es5-ext/issues/201\">https://github.com/medikoo/es5-ext/issues/201</a></li>\n<li><a href=\"https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2\">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a></li>\n<li><a href=\"https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602\">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4gmj-3p3h-gm8h\">https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4gmj-3p3h-gm8h",
            "title": "[es5-ext] es5-ext vulnerable to Regular Expression Denial of Service in `function#copy` and `function#toStringTokens`",
            "date_modified": "2024-02-26T20:01:29.000Z",
            "date_published": "2024-02-26T20:01:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4gmj-3p3h-gm8h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our Discord, linked to in <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f\">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717\">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871\">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-26150\">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h",
            "title": "[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks",
            "date_modified": "2024-02-23T19:43:21.000Z",
            "date_published": "2024-02-23T18:02:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our Discord, linked to in <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f\">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717\">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871\">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-26150\">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h",
            "title": "[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks",
            "date_modified": "2024-02-23T19:43:21.000Z",
            "date_published": "2024-02-23T18:02:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.\nPatched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our Discord, linked to in <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f\">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717\">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871\">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-26150\">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2fc9-xpp8-2g9h\">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h",
            "title": "[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks",
            "date_modified": "2024-02-23T19:43:21.000Z",
            "date_published": "2024-02-23T18:02:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44906\">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>\n<li><a href=\"https://github.com/substack/minimist/issues/164\">https://github.com/substack/minimist/issues/164</a></li>\n<li><a href=\"https://github.com/substack/minimist/blob/master/index.js#L69\">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MINIMIST-559764\">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068\">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>\n<li><a href=\"https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip\">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/issues/11\">https://github.com/minimistjs/minimist/issues/11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/pull/24\">https://github.com/minimistjs/minimist/pull/24</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703\">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb\">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11\">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commits/v0.2.4\">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xvch-5gv4-984h\">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h",
            "title": "[minimist] Prototype Pollution in minimist",
            "date_modified": "2024-02-23T05:08:06.000Z",
            "date_published": "2022-03-18T00:01:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44906\">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>\n<li><a href=\"https://github.com/substack/minimist/issues/164\">https://github.com/substack/minimist/issues/164</a></li>\n<li><a href=\"https://github.com/substack/minimist/blob/master/index.js#L69\">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MINIMIST-559764\">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068\">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>\n<li><a href=\"https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip\">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/issues/11\">https://github.com/minimistjs/minimist/issues/11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/pull/24\">https://github.com/minimistjs/minimist/pull/24</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703\">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb\">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11\">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commits/v0.2.4\">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xvch-5gv4-984h\">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h",
            "title": "[minimist] Prototype Pollution in minimist",
            "date_modified": "2024-02-23T05:08:06.000Z",
            "date_published": "2022-03-18T00:01:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>\n<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>\n<h3 id=\"references\">References</h3>\n<p>Similar to this one reported on the Go standard library:</p>\n<ul>\n<li><a href=\"https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/\">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>\n<li><a href=\"https://mattermost.com/blog/securing-xml-implementations-across-the-web/\">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/xmldom/xmldom\"><code>xmldom/xmldom</code></a></li>\n<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q\">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32796\">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>\n<li><a href=\"https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b\">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>\n<li><a href=\"https://www.npmjs.com/package/@xmldom/xmldom\">https://www.npmjs.com/package/@xmldom/xmldom</a></li>\n<li><a href=\"https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities\">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>\n<li><a href=\"https://mattermost.com/blog/securing-xml-implementations-across-the-web\">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fg8-2547-mr8q\">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fg8-2547-mr8q",
            "title": "[@xmldom/xmldom] Misinterpretation of malicious XML input",
            "date_modified": "2024-02-22T19:03:29.000Z",
            "date_published": "2021-08-03T16:57:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fg8-2547-mr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>\n<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>\n<h3 id=\"references\">References</h3>\n<p>Similar to this one reported on the Go standard library:</p>\n<ul>\n<li><a href=\"https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/\">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>\n<li><a href=\"https://mattermost.com/blog/securing-xml-implementations-across-the-web/\">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/xmldom/xmldom\"><code>xmldom/xmldom</code></a></li>\n<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q\">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-32796\">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>\n<li><a href=\"https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b\">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>\n<li><a href=\"https://www.npmjs.com/package/@xmldom/xmldom\">https://www.npmjs.com/package/@xmldom/xmldom</a></li>\n<li><a href=\"https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities\">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>\n<li><a href=\"https://mattermost.com/blog/securing-xml-implementations-across-the-web\">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fg8-2547-mr8q\">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fg8-2547-mr8q",
            "title": "[xmldom] Misinterpretation of malicious XML input",
            "date_modified": "2024-02-22T19:03:29.000Z",
            "date_published": "2021-08-03T16:57:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fg8-2547-mr8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Path Traversal in GitHub repository mbloch/mapshaper prior to 0.6.44.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1163\">https://nvd.nist.gov/vuln/detail/CVE-2024-1163</a></li>\n<li><a href=\"https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72\">https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72</a></li>\n<li><a href=\"https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5\">https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8m36-62rw-9mxw\">https://github.com/advisories/GHSA-8m36-62rw-9mxw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8m36-62rw-9mxw",
            "title": "[mapshaper] mapshaper Path Traversal vulnerability",
            "date_modified": "2024-03-01T14:57:32.000Z",
            "date_published": "2024-02-13T15:31:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8m36-62rw-9mxw"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}