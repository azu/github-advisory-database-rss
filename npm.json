{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When the following conditions are met:</p>\n<ul>\n<li>Automated CSP headers generation for SSR content is enabled</li>\n<li>The web application serves content that can be partially controlled by external users</li>\n</ul>\n<p>Then it is possible that the CSP headers generation feature might be \"allow-listing\" malicious injected resources like inlined JS, or references to external malicious scripts.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Available in version 1.3.0 .</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Do not enable CSP headers generation.</li>\n<li>Use it only for dynamically generated content that cannot be controlled by external users in any way.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KindSpells/astro-shield/security/advisories/GHSA-w387-5qqw-7g8m\">https://github.com/KindSpells/astro-shield/security/advisories/GHSA-w387-5qqw-7g8m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29896\">https://nvd.nist.gov/vuln/detail/CVE-2024-29896</a></li>\n<li><a href=\"https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d\">https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d</a></li>\n<li><a href=\"https://github.com/KindSpells/astro-shield/commit/ad3abf5577bae9be420b7ddf376337a5b8817869\">https://github.com/KindSpells/astro-shield/commit/ad3abf5577bae9be420b7ddf376337a5b8817869</a></li>\n<li><a href=\"https://github.com/KindSpells/astro-shield/compare/1.2.0...1.3.0\">https://github.com/KindSpells/astro-shield/compare/1.2.0...1.3.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w387-5qqw-7g8m\">https://github.com/advisories/GHSA-w387-5qqw-7g8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w387-5qqw-7g8m",
            "title": "[@kindspells/astro-shield] Content-Security-Policy header generation in middleware could be compromised by malicious injections",
            "date_modified": "2024-03-29T19:04:00.000Z",
            "date_published": "2024-03-29T19:03:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w387-5qqw-7g8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact:</h3>\n<p>The mergeDeep() function in the web3-utils package has been identified for Prototype Pollution vulnerability. An attacker has the ability to modify an object's prototype, which could result in changing the behavior of all objects that inherit from the impacted prototype by providing carefully crafted input to function.</p>\n<h3 id=\"patches\">Patches:</h3>\n<p>It has been fixed in web3-utils version 4.2.1 so all packages and apps depending on web3-utils &gt;=4.0.1 and &lt;=4.2.0 should upgrade to web3-utils 4.2.1.</p>\n<h3 id=\"workarounds\">Workarounds:</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/web3/web3.js/security/advisories/GHSA-2g4c-8fpm-c46v\">https://github.com/web3/web3.js/security/advisories/GHSA-2g4c-8fpm-c46v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21505\">https://nvd.nist.gov/vuln/detail/CVE-2024-21505</a></li>\n<li><a href=\"https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80\">https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337\">https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2g4c-8fpm-c46v\">https://github.com/advisories/GHSA-2g4c-8fpm-c46v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2g4c-8fpm-c46v",
            "title": "[web3-utils] web3-utils Prototype Pollution vulnerability",
            "date_modified": "2024-03-27T21:57:43.000Z",
            "date_published": "2024-03-27T21:57:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2g4c-8fpm-c46v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A&nbsp;<a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a>&nbsp;vulnerability was discovered in TinyMCE’s content insertion code.  This allowed <code>iframe</code> elements containing malicious code to execute when inserted into the editor.  These <code>iframe</code> elements are restricted in their permissions by same-origin browser protections, but could still trigger operations such as downloading of malicious assets.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>TinyMCE 6.8.1 introduced a new <code>sandbox_iframes</code> boolean option which adds the <code>sandbox=\"\"</code> attribute to every <code>iframe</code> element by default when enabled. This will prevent cross-origin, and in special cases same-origin, XSS by embedded resources in <code>iframe</code> elements. From TinyMCE 7.0.0 onwards the default value of this option is <code>true</code>.</p>\n<p>In TinyMCE 7.0.0 a new <code>sandbox_iframes_exclusions</code> option was also added, allowing a list of domains to be specified that should be excluded from having the&nbsp;<code>sandbox=\"\"</code>&nbsp;attribute applied when the&nbsp;<code>sandbox_iframes</code>&nbsp;option is enabled. By default, this option is set to an array of domains that are provided in embed code by popular websites. To sandbox <code>iframe</code> elements from every domain, set this option to <code>[]</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The HTTP Content-Security-Policy (CSP) <code>frame-src</code> or <code>object-src</code> can be configured to restrict or block the loading of unauthorized URLS.  Refer to the <a href=\"https://www.tiny.cloud/docs/tinymce/latest/tinymce-and-csp/\">TinyMCE Content Security Policy Guide</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types\">TinyMCE 6.8.1</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true\">TinyMCE 7.0.0</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f\">https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29203\">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1\">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types\">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true\">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-438c-3975-5x3f\">https://github.com/advisories/GHSA-438c-3975-5x3f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-438c-3975-5x3f",
            "title": "[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling iframes",
            "date_modified": "2024-03-26T21:23:48.000Z",
            "date_published": "2024-03-26T21:23:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-438c-3975-5x3f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s content loading and content inserting code. A SVG image could be loaded though an <code>object</code> or <code>embed</code> element and that image could potentially contain a XSS payload.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>TinyMCE 6.8.1 introduced a new <code>convert_unsafe_embeds</code> option to automatically convert <code>object</code> and <code>embed</code> elements respective of their <code>type</code> attribute.  From TinyMCE 7.0.0 onwards, the <code>convert_unsafe_embeds</code> option is enabled by default.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are using TinyMCE 6.8.1 or higher, set <code>convert_unsafe_embeds</code> to true. For any earlier versions, a custom NodeFilter is recommended to remove or modify any <code>object</code> or <code>embed</code> elements. This can be added using the <code>editor.parser.addNodeFilter</code> and <code>editor.serializer.addNodeFilter</code> APIs.</p>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Tiny Technologies would like to thank Toni Huttunen of <a href=\"https://www.fraktal.fi/\">Fraktal Oy</a> for discovering this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types\">TinyMCE 6.8.1</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true\">TinyMCE 7.0.0</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78\">https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29881\">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1\">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types\">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>\n<li><a href=\"https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true\">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5359-pvf2-pw78\">https://github.com/advisories/GHSA-5359-pvf2-pw78</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5359-pvf2-pw78",
            "title": "[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling external SVG files through Object or Embed elements",
            "date_modified": "2024-03-26T21:23:46.000Z",
            "date_published": "2024-03-26T21:23:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5359-pvf2-pw78"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>\n<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href=\"https://github.com/pillarjs/encodeurl\">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>\n<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>\n<a href=\"https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>\n<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/expressjs/express/pull/5539\">https://github.com/expressjs/express/pull/5539</a>\n<a href=\"https://github.com/koajs/koa/issues/1800\">https://github.com/koajs/koa/issues/1800</a>\n<a href=\"https://expressjs.com/en/4x/api.html#res.location\">https://expressjs.com/en/4x/api.html#res.location</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc\">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>\n<li><a href=\"https://github.com/koajs/koa/issues/1800\">https://github.com/koajs/koa/issues/1800</a></li>\n<li><a href=\"https://github.com/expressjs/express/pull/5539\">https://github.com/expressjs/express/pull/5539</a></li>\n<li><a href=\"https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>\n<li><a href=\"https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>\n<li><a href=\"https://expressjs.com/en/4x/api.html#res.location\">https://expressjs.com/en/4x/api.html#res.location</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29041\">https://nvd.nist.gov/vuln/detail/CVE-2024-29041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rv95-896h-c2vc\">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rv95-896h-c2vc",
            "title": "[express] Express.js Open Redirect in malformed URLs",
            "date_modified": "2024-03-27T21:47:29.000Z",
            "date_published": "2024-03-25T19:40:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rv95-896h-c2vc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>\n<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href=\"https://github.com/pillarjs/encodeurl\">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>\n<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><a href=\"https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>\n<a href=\"https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>\n<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/expressjs/express/pull/5539\">https://github.com/expressjs/express/pull/5539</a>\n<a href=\"https://github.com/koajs/koa/issues/1800\">https://github.com/koajs/koa/issues/1800</a>\n<a href=\"https://expressjs.com/en/4x/api.html#res.location\">https://expressjs.com/en/4x/api.html#res.location</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc\">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>\n<li><a href=\"https://github.com/koajs/koa/issues/1800\">https://github.com/koajs/koa/issues/1800</a></li>\n<li><a href=\"https://github.com/expressjs/express/pull/5539\">https://github.com/expressjs/express/pull/5539</a></li>\n<li><a href=\"https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd\">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>\n<li><a href=\"https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94\">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>\n<li><a href=\"https://expressjs.com/en/4x/api.html#res.location\">https://expressjs.com/en/4x/api.html#res.location</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29041\">https://nvd.nist.gov/vuln/detail/CVE-2024-29041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rv95-896h-c2vc\">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rv95-896h-c2vc",
            "title": "[express] Express.js Open Redirect in malformed URLs",
            "date_modified": "2024-03-27T21:47:29.000Z",
            "date_published": "2024-03-25T19:40:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rv95-896h-c2vc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Code that uses KaTeX's <code>trust</code> option, specifically that provides a function to block-list certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate <code>javascript:</code> links in the output, even if the <code>trust</code> function tries to forbid this protocol via <code>trust: (context) =&gt; context.protocol !== 'javascript'</code>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Allow-list instead of block protocols in your <code>trust</code> function.</li>\n<li>Manually lowercase <code>context.protocol</code> via <code>context.protocol.toLowerCase()</code> before attempting to check for certain protocols.</li>\n<li>Avoid use of or turn off the <code>trust</code> option.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p>KaTeX did not normalize the <code>protocol</code> entry of the <code>context</code> object provided to a user-specified <code>trust</code>-function, so it could be a mix of lowercase and/or uppercase letters.</p>\n<p>It is generally better to allow-list by protocol, in which case this would normally not be an issue. But in some cases, you might want to block-list, and the <a href=\"https://katex.org/docs/options.html\">KaTeX documentation</a> even provides such an example:</p>\n<blockquote>\n<p>Allow all commands but forbid specific protocol: <code>trust: (context) =&gt; context.protocol !== 'file'</code></p>\n</blockquote>\n<p>Currently KaTeX internally sees <code>file:</code> and <code>File:</code> URLs as different protocols, so <code>context.protocol</code> can be <code>file</code> or <code>File</code>, so the above check does not suffice.  A simple workaround would be:</p>\n<blockquote>\n<p><code>trust: (context) =&gt; context.protocol.toLowerCase() !== 'file'</code></p>\n</blockquote>\n<p>Most URL parsers normalize the scheme to lowercase. For example, <a href=\"https://datatracker.ietf.org/doc/html/rfc3986#section-3.1\">RFC3986</a> says:</p>\n<blockquote>\n<p>Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. An implementation should accept uppercase letters as equivalent to lowercase in scheme names (e.g., allow \"HTTP\" as well as \"http\") for the sake of robustness but should only produce lowercase scheme names for consistency.</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329\">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329</a></li>\n<li><a href=\"https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de\">https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28246\">https://nvd.nist.gov/vuln/detail/CVE-2024-28246</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wc5-fcw2-2329\">https://github.com/advisories/GHSA-3wc5-fcw2-2329</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wc5-fcw2-2329",
            "title": "[katex] KaTeX missing normalization of the protocol in URLs allows bypassing forbidden protocols",
            "date_modified": "2024-03-25T22:32:12.000Z",
            "date_published": "2024-03-25T19:38:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wc5-fcw2-2329"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\\includegraphics</code> that runs arbitrary JavaScript, or generate invalid HTML.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Avoid use of or turn off the <code>trust</code> option, or set it to forbid <code>\\includegraphics</code> commands.</li>\n<li>Forbid inputs containing the substring <code>\"\\\\includegraphics\"</code>.</li>\n<li>Sanitize HTML output from KaTeX.</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><code>\\includegraphics</code> did not properly quote its filename argument, allowing it to generate invalid or malicious HTML that runs scripts.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue or security advisory in the <a href=\"https://github.com/KaTeX/KaTeX/\">KaTeX repository</a></li>\n<li>Email us at <a href=\"mailto:katex-security@mit.edu\">katex-security@mit.edu</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h\">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h</a></li>\n<li><a href=\"https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770\">https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28245\">https://nvd.nist.gov/vuln/detail/CVE-2024-28245</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f98w-7cxr-ff2h\">https://github.com/advisories/GHSA-f98w-7cxr-ff2h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f98w-7cxr-ff2h",
            "title": "[katex] KaTeX's `\\includegraphics` does not escape filename",
            "date_modified": "2024-03-25T22:32:07.000Z",
            "date_published": "2024-03-25T19:38:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f98w-7cxr-ff2h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\\def</code> or <code>\\newcommand</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Forbid inputs containing any of the characters <code>₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ⁺⁻⁼⁽⁾⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘʷˣʸᶻᵛᵝᵞᵟᵠᵡ</code> before passing them to KaTeX.\n(There is no easy workaround for the auto-render extension.)</p>\n<h3 id=\"details\">Details</h3>\n<p>KaTeX supports an option named <code>maxExpand</code> which aims to prevent infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. Unfortunately, <a href=\"https://github.com/KaTeX/KaTeX/commit/d8fc35e6a97f8e561c723b93ad275cf5a7f3094a\">support for \"Unicode (sub|super)script characters\"</a> allows an attacker to bypass this limit. Each sub/superscript group instantiated a separate Parser with its own limit on macro executions, without inheriting the current count of macro executions from its parent. This has been corrected in KaTeX v0.16.10.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue or security advisory in the <a href=\"https://github.com/KaTeX/KaTeX/\">KaTeX repository</a></li>\n<li>Email us at <a href=\"mailto:katex-security@mit.edu\">katex-security@mit.edu</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc\">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc</a></li>\n<li><a href=\"https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2\">https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28244\">https://nvd.nist.gov/vuln/detail/CVE-2024-28244</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cvr6-37gx-v8wc\">https://github.com/advisories/GHSA-cvr6-37gx-v8wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cvr6-37gx-v8wc",
            "title": "[katex] KaTeX's maxExpand bypassed by Unicode sub/superscripts",
            "date_modified": "2024-03-25T22:32:02.000Z",
            "date_published": "2024-03-25T19:38:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cvr6-37gx-v8wc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\\edef</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Forbid inputs containing the substring <code>\"\\\\edef\"</code> before passing them to KaTeX.\n(There is no easy workaround for the auto-render extension.)</p>\n<h3 id=\"details\">Details</h3>\n<p>KaTeX supports an option named <code>maxExpand</code> which prevents infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. However, what counted as an \"expansion\" is a single macro expanding to any number of tokens. The expand-and-define TeX command <code>\\edef</code> can be used to build up an exponential number of tokens using only a linear number of expansions according to this definition, e.g. by repeatedly doubling the previous definition. This has been corrected in KaTeX v0.16.10, where every expanded token in an <code>\\edef</code> counts as an expansion.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue or security advisory in the <a href=\"https://github.com/KaTeX/KaTeX/\">KaTeX repository</a></li>\n<li>Email us at <a href=\"mailto:katex-security@mit.edu\">katex-security@mit.edu</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w\">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w</a></li>\n<li><a href=\"https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34\">https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28243\">https://nvd.nist.gov/vuln/detail/CVE-2024-28243</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-64fm-8hw2-v72w\">https://github.com/advisories/GHSA-64fm-8hw2-v72w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-64fm-8hw2-v72w",
            "title": "[katex] KaTeX's maxExpand bypassed by `\\edef`",
            "date_modified": "2024-03-25T22:31:57.000Z",
            "date_published": "2024-03-25T19:38:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-64fm-8hw2-v72w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A security vulnerability exists in oneuptime's local storage handling, where a regular user can escalate privileges by modifying the <code>is_master_admin</code> key to <code>true</code>. This allows unauthorized access to administrative functionalities.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the <code>is_master_admin</code> key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation. </p>\n<h2 id=\"poc\">POC</h2>\n<p>(I am using Firefox Developer to demonstrate this vulnerability)\nLog in as a normal user. Open developer tools (hit F12), click Storage, then Local Storage. Modify the <code>is_master_admin</code> key from <code>false</code> to <code>true</code>.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability represents a high security risk as it allows any authenticated user to gain administrative privileges through client-side manipulation. Most of the admin previlages were disabled except the user list. Where an attacker could see all the list of users who signed up to OneUptome. </p>\n<h2 id=\"patch\">Patch</h2>\n<p>This has been patched in 7.0.1815</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq\">https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29194\">https://nvd.nist.gov/vuln/detail/CVE-2024-29194</a></li>\n<li><a href=\"https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c\">https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-246p-xmg8-wmcq\">https://github.com/advisories/GHSA-246p-xmg8-wmcq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-246p-xmg8-wmcq",
            "title": "[@oneuptime/common-server] OneUptime Vulnerable to a Privilege Escalation via Local Storage Key Manipulation",
            "date_modified": "2024-03-26T13:40:14.000Z",
            "date_published": "2024-03-25T19:37:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-246p-xmg8-wmcq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>A security vulnerability exists in oneuptime's local storage handling, where a regular user can escalate privileges by modifying the <code>is_master_admin</code> key to <code>true</code>. This allows unauthorized access to administrative functionalities.</p>\n<h2 id=\"details\">Details</h2>\n<p>The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the <code>is_master_admin</code> key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation. </p>\n<h2 id=\"poc\">POC</h2>\n<p>(I am using Firefox Developer to demonstrate this vulnerability)\nLog in as a normal user. Open developer tools (hit F12), click Storage, then Local Storage. Modify the <code>is_master_admin</code> key from <code>false</code> to <code>true</code>.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability represents a high security risk as it allows any authenticated user to gain administrative privileges through client-side manipulation. Most of the admin previlages were disabled except the user list. Where an attacker could see all the list of users who signed up to OneUptome. </p>\n<h2 id=\"patch\">Patch</h2>\n<p>This has been patched in 7.0.1815</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq\">https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29194\">https://nvd.nist.gov/vuln/detail/CVE-2024-29194</a></li>\n<li><a href=\"https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c\">https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-246p-xmg8-wmcq\">https://github.com/advisories/GHSA-246p-xmg8-wmcq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-246p-xmg8-wmcq",
            "title": "[@oneuptime/model] OneUptime Vulnerable to a Privilege Escalation via Local Storage Key Manipulation",
            "date_modified": "2024-03-26T13:40:14.000Z",
            "date_published": "2024-03-25T19:37:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-246p-xmg8-wmcq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-2g4c-8fpm-c46v. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>Versions of the package web3-utils before 4.2.1 are vulnerable to Prototype Pollution via the utility functions format and mergeDeep, due to insecure recursive merge.\nAn attacker can manipulate an object's prototype, potentially leading to the alteration of the behavior of all objects inheriting from the affected prototype by passing specially crafted input to these functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21505\">https://nvd.nist.gov/vuln/detail/CVE-2024-21505</a></li>\n<li><a href=\"https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80\">https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337\">https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87qp-7cw8-8q9c\">https://github.com/advisories/GHSA-87qp-7cw8-8q9c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87qp-7cw8-8q9c",
            "title": "[web3-utils] Duplicate Advisory: web3-utils Prototype Pollution vulnerability",
            "date_modified": "2024-03-27T21:57:37.000Z",
            "date_published": "2024-03-25T06:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87qp-7cw8-8q9c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in @thi.ng/paths v.5.1.62 and before allows a remote attacker to execute arbitrary code via the <code>mutIn</code> and <code>mutInManyUnsafe</code> components.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29650\">https://nvd.nist.gov/vuln/detail/CVE-2024-29650</a></li>\n<li><a href=\"https://gist.github.com/tariqhawis/1bc340ca5ea6ae115c9ab9665cfd5921\">https://gist.github.com/tariqhawis/1bc340ca5ea6ae115c9ab9665cfd5921</a></li>\n<li><a href=\"https://learn.snyk.io/lesson/prototype-pollution/#a0a863a5-fd3a-539f-e1ed-a0769f6c6e3b\">https://learn.snyk.io/lesson/prototype-pollution/#a0a863a5-fd3a-539f-e1ed-a0769f6c6e3b</a></li>\n<li><a href=\"https://github.com/thi-ng/umbrella/issues/445\">https://github.com/thi-ng/umbrella/issues/445</a></li>\n<li><a href=\"https://github.com/thi-ng/umbrella/commit/c78b484882ad5214a46ef83ddb8020571c171353\">https://github.com/thi-ng/umbrella/commit/c78b484882ad5214a46ef83ddb8020571c171353</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8ppr-www8-hfjx\">https://github.com/advisories/GHSA-8ppr-www8-hfjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8ppr-www8-hfjx",
            "title": "[@thi.ng/paths] @thi.ng/paths Prototype Pollution vulnerability",
            "date_modified": "2024-03-25T19:34:46.000Z",
            "date_published": "2024-03-25T15:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8ppr-www8-hfjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>An attacker controlling the second variable of the <code>translate</code> function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>opt.id</code> parameter allows the overwriting of the cache key. If an attacker sets the <code>id</code> variable to the cache key that would be generated by another user, they can choose the response that user gets served.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Take the following simple server allowing users to supply text and the language to translate to.</p>\n<pre><code class=\"language-javascript\">import translate from \"translate\";\nimport express from 'express';\n\nconst app = express();\napp.use(express.json());\n\napp.post('/translate', async (req, res) =&gt; {\n  const { text, language } = req.body;\n  const result = await translate(text, language);\n  return res.json(result);\n});\n\nconst port = 3000;\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<p>We can send the following request to poison the cache:</p>\n<pre><code>{\"text\":\"I hate you\", \"language\":{\"to\":\"nl\",\"id\":\"undefined:en:nl:google:I love you\"}}\n</code></pre>\n<p><img alt=\"Poisoning the cache\" src=\"https://user-images.githubusercontent.com/44903767/285421743-ccfa3d9d-24cf-47b7-b805-0e4034cec82e.png\"></p>\n<p>Now, any user that attempts to translate \"I love you\" to Dutch, will get \"I hate you\" in Dutch as the response.\n<img alt=\"The victim gets our poisoned data\" src=\"https://user-images.githubusercontent.com/44903767/285422033-b3853ca2-8a5a-4875-91e8-ba2ef0258bc6.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can control the results other users may get</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj\">https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj</a></li>\n<li><a href=\"https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4\">https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29042\">https://nvd.nist.gov/vuln/detail/CVE-2024-29042</a></li>\n<li><a href=\"https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3\">https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-882j-4vj5-7vmj\">https://github.com/advisories/GHSA-882j-4vj5-7vmj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-882j-4vj5-7vmj",
            "title": "[translate] Cache Poisoning Vulnerability",
            "date_modified": "2024-03-22T20:02:16.000Z",
            "date_published": "2024-03-22T16:57:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-882j-4vj5-7vmj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description:</h2>\n<p>During some analysis today on npm's <code>node-tar</code> package I came across the folder creation process, Basicly if you provide node-tar with a path like this <code>./a/b/c/foo.txt</code> it would create every folder and sub-folder here a, b and c until it reaches the last folder to create <code>foo.txt</code>, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside</p>\n<h2 id=\"steps-to-reproduce\">Steps To Reproduce:</h2>\n<p>You can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video</p>\n<h2 id=\"proof-of-concept\">Proof Of Concept:</h2>\n<p>Here's a <a href=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&amp;response-content-type=video%2Fwebm&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2\">video</a> show-casing the exploit: </p>\n<h2 id=\"impact\">Impact</h2>\n<p>Denial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources</p>\n<h2 id=\"report-resources\">Report resources</h2>\n<p><a href=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&amp;response-content-type=text%2Fplain&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae\">payload.txt</a>\n<a href=\"https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&amp;response-content-type=application%2Fx-tar&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea\">archeive.tar.gz</a></p>\n<h2 id=\"note\">Note</h2>\n<p>This report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36\">https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28863\">https://nvd.nist.gov/vuln/detail/CVE-2024-28863</a></li>\n<li><a href=\"https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7\">https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f5x3-32g6-xq36\">https://github.com/advisories/GHSA-f5x3-32g6-xq36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f5x3-32g6-xq36",
            "title": "[node-tar] Denial of service while parsing a tar file due to lack of folders count validation",
            "date_modified": "2024-03-22T16:57:07.000Z",
            "date_published": "2024-03-22T16:57:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f5x3-32g6-xq36"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>\n<h3 id=\"details\">Details</h3>\n<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.\nIf <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>\n<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>\n<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>\n<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:\n<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>\n<pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>\n<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>\n<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>The URL should be unescaped and normalized before any further processing.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29180\">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353\">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e\">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6",
            "title": "[webpack-dev-middleware] Path traversal in webpack-dev-middleware",
            "date_modified": "2024-03-21T18:59:29.000Z",
            "date_published": "2024-03-21T18:59:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>\n<h3 id=\"details\">Details</h3>\n<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.\nIf <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>\n<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>\n<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>\n<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:\n<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>\n<pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>\n<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>\n<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>The URL should be unescaped and normalized before any further processing.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29180\">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353\">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e\">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6",
            "title": "[webpack-dev-middleware] Path traversal in webpack-dev-middleware",
            "date_modified": "2024-03-21T18:59:29.000Z",
            "date_published": "2024-03-21T18:59:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>\n<h3 id=\"details\">Details</h3>\n<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.\nIf <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>\n<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.\nThe public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:\n<a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>\nAs the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>\n<h3 id=\"poc\">PoC</h3>\n<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>\n<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>\n<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:\n<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>\n<pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>\n<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>\n<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>The URL should be unescaped and normalized before any further processing.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29180\">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132\">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353\">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e\">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21\">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0\">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wr3j-pwj9-hqq6\">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6",
            "title": "[webpack-dev-middleware] Path traversal in webpack-dev-middleware",
            "date_modified": "2024-03-21T18:59:29.000Z",
            "date_published": "2024-03-21T18:59:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting (XSS) vulnerability in SurveyJS Survey Creator v.1.9.132 and before, allows attackers to execute arbitrary code and obtain sensitive information via the title parameter in form.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28635\">https://nvd.nist.gov/vuln/detail/CVE-2024-28635</a></li>\n<li><a href=\"https://github.com/surveyjs/survey-creator/issues/5285\">https://github.com/surveyjs/survey-creator/issues/5285</a></li>\n<li><a href=\"https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt\">https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xgj4-2hrf-j4xg\">https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xgj4-2hrf-j4xg",
            "title": "[survey-creator] Cross-site scripting in Survey Creator",
            "date_modified": "2024-03-21T18:58:34.000Z",
            "date_published": "2024-03-21T06:33:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xgj4-2hrf-j4xg"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}