{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>Versions of the package exec-local-bin before 1.2.0 are vulnerable to Command Injection via the <code>theProcess()</code> functionality due to improper user-input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25923\">https://nvd.nist.gov/vuln/detail/CVE-2022-25923</a></li>\n<li><a href=\"https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624\">https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624</a></li>\n<li><a href=\"https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9\">https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956\">https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f259-h6m8-hm8m\">https://github.com/advisories/GHSA-f259-h6m8-hm8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f259-h6m8-hm8m",
            "title": "[exec-local-bin] exec-local-bin vulnerable to Command Injection",
            "date_modified": "2023-01-09T20:11:57.000Z",
            "date_published": "2023-01-06T06:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f259-h6m8-hm8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An open redirect vulnerability exists in Okta OIDC Middleware prior to version 5.0.0 allowing an attacker to redirect a user to an arbitrary URL.</p>\n<p><strong>Affected products and versions</strong>\nOkta OIDC Middleware prior to version 5.0.0.</p>\n<p><strong>Resolution</strong>\nThe vulnerability is fixed in OIDC Middleware 5.0.0.  To remediate this vulnerability, upgrade Okta OIDC Middleware to this version or later.</p>\n<p><strong>CVE details</strong>\n<strong>CVE ID:</strong>\t\t<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=2022-3145\">CVE-2022-3145</a>\n<strong>Published Date:</strong>\t01/05/2023\n<strong>Vulnerability Type:</strong>\tOpen Redirect\n<strong>CWE:</strong>\t\t\tCWE-601\n<strong>CVSS v3.1 Score:</strong> 4.3\n<strong>Severity:</strong> Medium\n<strong>Vector string:</strong> AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N</p>\n<p><strong>Severity Details</strong>\nTo exploit this issue, an attacker would need to send a victim a malformed URL containing a target server that they control. Once a user successfully completed the login process, the victim user would then be redirected to the attacker controlled site.</p>\n<p><strong>References</strong>\n<a href=\"https://github.com/okta/okta-oidc-middleware\">https://github.com/okta/okta-oidc-middleware</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/okta/okta-oidc-middleware/security/advisories/GHSA-58h4-9m7m-j9m4\">https://github.com/okta/okta-oidc-middleware/security/advisories/GHSA-58h4-9m7m-j9m4</a></li>\n<li><a href=\"https://github.com/okta/okta-oidc-middleware/commit/5d10b3ccdd5d6893de4d8b58696094267d30c113\">https://github.com/okta/okta-oidc-middleware/commit/5d10b3ccdd5d6893de4d8b58696094267d30c113</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-58h4-9m7m-j9m4\">https://github.com/advisories/GHSA-58h4-9m7m-j9m4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-58h4-9m7m-j9m4",
            "title": "[@okta/oidc-middleware] @okta/oidc-middlewareOpen Redirect vulnerability",
            "date_modified": "2023-01-09T20:06:03.000Z",
            "date_published": "2023-01-09T20:06:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-58h4-9m7m-j9m4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Woorank robots-txt-guard. It has been rated as problematic. Affected by this issue is the function makePathPattern of the file lib/patterns.js. The manipulation of the argument pattern leads to inefficient regular expression complexity. The exploit has been disclosed to the public and may be used. The name of the patch is c03827cd2f9933619c23894ce7c98401ea824020. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-217448.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4305\">https://nvd.nist.gov/vuln/detail/CVE-2021-4305</a></li>\n<li><a href=\"https://github.com/Woorank/robots-txt-guard/pull/4\">https://github.com/Woorank/robots-txt-guard/pull/4</a></li>\n<li><a href=\"https://github.com/Woorank/robots-txt-guard/commit/c03827cd2f9933619c23894ce7c98401ea824020\">https://github.com/Woorank/robots-txt-guard/commit/c03827cd2f9933619c23894ce7c98401ea824020</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.217448\">https://vuldb.com/?ctiid.217448</a></li>\n<li><a href=\"https://vuldb.com/?id.217448\">https://vuldb.com/?id.217448</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6g33-8w2q-4hxv\">https://github.com/advisories/GHSA-6g33-8w2q-4hxv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6g33-8w2q-4hxv",
            "title": "[robots-txt-guard] robots-txt-guard Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-09T20:04:05.000Z",
            "date_published": "2023-01-05T12:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6g33-8w2q-4hxv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as problematic has been found in cronvel tree-kit up to 0.6.x. This affects an unknown part. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). Upgrading to version 0.7.0 is able to address this issue. The name of the patch is a63f559c50d70e8cb2eaae670dec25d1dbc4afcd. It is recommended to upgrade the affected component. The identifier VDB-216765 was assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4278\">https://nvd.nist.gov/vuln/detail/CVE-2021-4278</a></li>\n<li><a href=\"https://github.com/cronvel/tree-kit/commit/a63f559c50d70e8cb2eaae670dec25d1dbc4afcd\">https://github.com/cronvel/tree-kit/commit/a63f559c50d70e8cb2eaae670dec25d1dbc4afcd</a></li>\n<li><a href=\"https://github.com/cronvel/tree-kit/releases/tag/v0.7.0\">https://github.com/cronvel/tree-kit/releases/tag/v0.7.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216765\">https://vuldb.com/?ctiid.216765</a></li>\n<li><a href=\"https://vuldb.com/?id.216765\">https://vuldb.com/?id.216765</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mw4x-g2x8-qcvf\">https://github.com/advisories/GHSA-mw4x-g2x8-qcvf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mw4x-g2x8-qcvf",
            "title": "[tree-kit] tree-kit vulnerable to Prototype Pollution",
            "date_modified": "2023-01-09T19:53:51.000Z",
            "date_published": "2022-12-25T18:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mw4x-g2x8-qcvf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>Luxon's `DateTime.fromRFC2822() has quadratic (N^2) complexity on some specific inputs. This causes a noticeable slowdown for inputs with lengths above 10k characters. Users providing untrusted data to this method are therefore vulnerable to (Re)DoS attacks.</p>\n<p>This is the same bug as Moment's <a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>Limit the length of the input.</p>\n<h1 id=\"references\">References</h1>\n<p>There is an excellent writeup of the same issue in Moment: <a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></p>\n<h1 id=\"details\">Details</h1>\n<p><code>DateTime.fromRFC2822(\"(\".repeat(500000))</code> takes a couple minutes to complete.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n<li><a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22467\">https://nvd.nist.gov/vuln/detail/CVE-2023-22467</a></li>\n<li><a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></li>\n<li><a href=\"https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf\">https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc",
            "title": "[luxon] Luxon Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-09T14:10:51.000Z",
            "date_published": "2023-01-09T14:10:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>Luxon's `DateTime.fromRFC2822() has quadratic (N^2) complexity on some specific inputs. This causes a noticeable slowdown for inputs with lengths above 10k characters. Users providing untrusted data to this method are therefore vulnerable to (Re)DoS attacks.</p>\n<p>This is the same bug as Moment's <a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>Limit the length of the input.</p>\n<h1 id=\"references\">References</h1>\n<p>There is an excellent writeup of the same issue in Moment: <a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></p>\n<h1 id=\"details\">Details</h1>\n<p><code>DateTime.fromRFC2822(\"(\".repeat(500000))</code> takes a couple minutes to complete.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n<li><a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22467\">https://nvd.nist.gov/vuln/detail/CVE-2023-22467</a></li>\n<li><a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></li>\n<li><a href=\"https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf\">https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc",
            "title": "[luxon] Luxon Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-09T14:10:51.000Z",
            "date_published": "2023-01-09T14:10:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"impact\">Impact</h1>\n<p>Luxon's `DateTime.fromRFC2822() has quadratic (N^2) complexity on some specific inputs. This causes a noticeable slowdown for inputs with lengths above 10k characters. Users providing untrusted data to this method are therefore vulnerable to (Re)DoS attacks.</p>\n<p>This is the same bug as Moment's <a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></p>\n<h1 id=\"workarounds\">Workarounds</h1>\n<p>Limit the length of the input.</p>\n<h1 id=\"references\">References</h1>\n<p>There is an excellent writeup of the same issue in Moment: <a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></p>\n<h1 id=\"details\">Details</h1>\n<p><code>DateTime.fromRFC2822(\"(\".repeat(500000))</code> takes a couple minutes to complete.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/moment/luxon/security/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n<li><a href=\"https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g\">https://github.com/moment/moment/security/advisories/GHSA-wc69-rhjr-hc9g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22467\">https://nvd.nist.gov/vuln/detail/CVE-2023-22467</a></li>\n<li><a href=\"https://github.com/moment/moment/pull/6015#issuecomment-1152961973\">https://github.com/moment/moment/pull/6015#issuecomment-1152961973</a></li>\n<li><a href=\"https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf\">https://github.com/moment/luxon/commit/5ab3bf64a10da929a437629cdb2f059bb83212bf</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3xq5-wjfh-ppjc\">https://github.com/advisories/GHSA-3xq5-wjfh-ppjc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc",
            "title": "[luxon] Luxon Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-09T14:10:51.000Z",
            "date_published": "2023-01-09T14:10:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3xq5-wjfh-ppjc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>In versions &lt;=8.5.1 of jsonwebtoken library, lack of algorithm definition and a falsy secret or key in the <code>jwt.verify()</code> function can lead to signature validation bypass due to defaulting to the <code>none</code> algorithm for signature verification.</p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You will be affected if all the following are true in the <code>jwt.verify()</code> function:</p>\n<ul>\n<li>a token with no signature is received</li>\n<li>no algorithms are specified </li>\n<li>a falsy (e.g. null, false, undefined) secret or key is passed</li>\n</ul>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0 which removes the default support for the none algorithm in the <code>jwt.verify()</code> method. </p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>There will be no impact, if you update to version 9.0.0 and you don’t need to allow for the <code>none</code> algorithm. If you need 'none' algorithm, you have to explicitly specify that in <code>jwt.verify()</code> options.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23540\">https://nvd.nist.gov/vuln/detail/CVE-2022-23540</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qwph-4952-7xr6\">https://github.com/advisories/GHSA-qwph-4952-7xr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6",
            "title": "[jsonwebtoken] jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()",
            "date_modified": "2023-01-09T08:23:10.000Z",
            "date_published": "2022-12-22T03:32:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in email-existence. It has been rated as problematic. Affected by this issue is some unknown functionality of the file <code>index.js</code>. The manipulation leads to inefficient regular expression complexity. The name of the patch is 0029ba71b6ad0d8ec0baa2ecc6256d038bdd9b56. It is recommended to apply a patch to fix this issue. VDB-216854 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-25049\">https://nvd.nist.gov/vuln/detail/CVE-2018-25049</a></li>\n<li><a href=\"https://github.com/nmanousos/email-existence/pull/37\">https://github.com/nmanousos/email-existence/pull/37</a></li>\n<li><a href=\"https://github.com/nmanousos/email-existence/commit/0029ba71b6ad0d8ec0baa2ecc6256d038bdd9b56\">https://github.com/nmanousos/email-existence/commit/0029ba71b6ad0d8ec0baa2ecc6256d038bdd9b56</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216854\">https://vuldb.com/?ctiid.216854</a></li>\n<li><a href=\"https://vuldb.com/?id.216854\">https://vuldb.com/?id.216854</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p27h-4cpf-fw48\">https://github.com/advisories/GHSA-p27h-4cpf-fw48</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p27h-4cpf-fw48",
            "title": "[email-existence] email-existence Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-07T05:05:26.000Z",
            "date_published": "2022-12-27T09:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p27h-4cpf-fw48"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as critical was found in SimbCo httpster. This vulnerability affects the function fs.realpathSync of the file src/server.coffee. The manipulation leads to path traversal. The exploit has been disclosed to the public and may be used. The name of the patch is d3055b3e30b40b65d30c5a06d6e053dffa7f35d0. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216748.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36629\">https://nvd.nist.gov/vuln/detail/CVE-2020-36629</a></li>\n<li><a href=\"https://github.com/SimbCo/httpster/pull/36\">https://github.com/SimbCo/httpster/pull/36</a></li>\n<li><a href=\"https://github.com/SimbCo/httpster/commit/d3055b3e30b40b65d30c5a06d6e053dffa7f35d0\">https://github.com/SimbCo/httpster/commit/d3055b3e30b40b65d30c5a06d6e053dffa7f35d0</a></li>\n<li><a href=\"https://vuldb.com/?id.216748\">https://vuldb.com/?id.216748</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p8j8-wxvp-h695\">https://github.com/advisories/GHSA-p8j8-wxvp-h695</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p8j8-wxvp-h695",
            "title": "[httpster] SimbCo httpster vulnerable to Path Traversal",
            "date_modified": "2023-01-06T23:07:39.000Z",
            "date_published": "2022-12-25T12:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p8j8-wxvp-h695"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>window-control is an npm package that provides tools to manage window focus. Versions before 1.4.5 are vulnerable to Command Injection via the <code>sendKeys</code> function due to improper input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25926\">https://nvd.nist.gov/vuln/detail/CVE-2022-25926</a></li>\n<li><a href=\"https://github.com/bruno-robert/window-control/commit/075c854534a749d887655a906759f5a7eee95173\">https://github.com/bruno-robert/window-control/commit/075c854534a749d887655a906759f5a7eee95173</a></li>\n<li><a href=\"https://github.com/bruno-robert/window-control/releases/tag/v1.4.5\">https://github.com/bruno-robert/window-control/releases/tag/v1.4.5</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-WINDOWCONTROL-3186345\">https://security.snyk.io/vuln/SNYK-JS-WINDOWCONTROL-3186345</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9mjx-wfqp-j5ph\">https://github.com/advisories/GHSA-9mjx-wfqp-j5ph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9mjx-wfqp-j5ph",
            "title": "[window-control] window-control vulnerable to Command Injection due to improper input sanitization",
            "date_modified": "2023-01-06T21:39:19.000Z",
            "date_published": "2023-01-04T18:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9mjx-wfqp-j5ph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <em>sanitize-svg</em> package uses a deny-list-pattern to sanitize SVGs to prevent cross-site scripting (XSS). In doing so, literal <code>&lt;script&gt;</code>-tags and on-event handlers were detected:</p>\n<pre><code class=\"language-typescript\">[...]\n  const svgEl = div.firstElementChild!\n  const attributes = Array.from(svgEl.attributes).map(({ name }) =&gt; name)\n  const hasScriptAttr = !!attributes.find((attr) =&gt; attr.startsWith('on'))\n  const scripts = svgEl.getElementsByTagName('script')\n  return scripts.length === 0 &amp;&amp; !hasScriptAttr ? svg : null\n[...]\n</code></pre>\n<p>There are more ways to embed JavaScript in XML files.</p>\n<p><strong>Anchor Tag</strong> (requires user to click link):</p>\n<pre><code class=\"language-xml\">&lt;svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n  &lt;a href=\"javascript:alert(document.domain)\"&gt;\n    &lt;text x=\"50\" y=\"50\" text-anchor=\"middle\"&gt;Lauritz&lt;/text&gt;\n  &lt;/a&gt;\n&lt;/svg&gt;\n</code></pre>\n<p><strong>Foreign Object Tag</strong> (no user interaction required):</p>\n<pre><code class=\"language-xml\">&lt;svg width=\"500\" height=\"500\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n        &lt;text x=\"20\" y=\"35\"&gt;Lauritz&lt;/text&gt;\n        &lt;foreignObject width=\"500\" height=\"500\"&gt;\n                &lt;iframe xmlns=\"http://www.w3.org/1999/xhtml\" src=\"javascript:confirm(document.domain);\" width=\"400\" height=\"250\"/&gt;\n        &lt;/foreignObject&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>As a result, downstream software that relies on <code>sanitize-svg</code> and expects resulting SVGs to be safe, may be vulnerable to XSS. We are aware of at least one downstream project for which this vulnerability had security implications. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability was addressed in v0.4.0.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>N/A</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mattkrick/sanitize-svg/security/advisories/GHSA-h857-2g56-468g\">https://github.com/mattkrick/sanitize-svg/security/advisories/GHSA-h857-2g56-468g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22461\">https://nvd.nist.gov/vuln/detail/CVE-2023-22461</a></li>\n<li><a href=\"https://github.com/mattkrick/sanitize-svg/commit/b107e453ede7b58adcccae74a3e474c012eec85d\">https://github.com/mattkrick/sanitize-svg/commit/b107e453ede7b58adcccae74a3e474c012eec85d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h857-2g56-468g\">https://github.com/advisories/GHSA-h857-2g56-468g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h857-2g56-468g",
            "title": "[@mattkrick/sanitize-svg] @mattkrick/sanitize-svg vulnerable to Cross-Site Scripting (XSS)",
            "date_modified": "2023-01-05T12:18:37.000Z",
            "date_published": "2023-01-05T12:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h857-2g56-468g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The <code>Schema.path()</code> function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2564\">https://nvd.nist.gov/vuln/detail/CVE-2022-2564</a></li>\n<li><a href=\"https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8\">https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8</a></li>\n<li><a href=\"https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd\">https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md\">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141\">https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6\">https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f825-f98c-gj3g\">https://github.com/advisories/GHSA-f825-f98c-gj3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f825-f98c-gj3g",
            "title": "[mongoose] automattic/mongoose vulnerable to Prototype pollution via Schema.path",
            "date_modified": "2023-01-05T05:01:39.000Z",
            "date_published": "2022-07-29T00:00:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f825-f98c-gj3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability classified as problematic was found in cronvel string-kit up to 0.12.7. This vulnerability affects the function naturalSort of the file lib/naturalSort.js. The manipulation leads to inefficient regular expression complexity. The attack can be initiated remotely. Upgrading to version 0.12.8 can address this issue. The name of the patch is 9cac4c298ee92c1695b0695951f1488884a7ca73. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-217180.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4299\">https://nvd.nist.gov/vuln/detail/CVE-2021-4299</a></li>\n<li><a href=\"https://github.com/cronvel/string-kit/commit/9cac4c298ee92c1695b0695951f1488884a7ca73\">https://github.com/cronvel/string-kit/commit/9cac4c298ee92c1695b0695951f1488884a7ca73</a></li>\n<li><a href=\"https://github.com/cronvel/string-kit/releases/tag/v0.12.8\">https://github.com/cronvel/string-kit/releases/tag/v0.12.8</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.217180\">https://vuldb.com/?ctiid.217180</a></li>\n<li><a href=\"https://vuldb.com/?id.217180\">https://vuldb.com/?id.217180</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pfrm-4rjw-g9q5\">https://github.com/advisories/GHSA-pfrm-4rjw-g9q5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pfrm-4rjw-g9q5",
            "title": "[string-kit] string-kit Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-01-04T14:27:38.000Z",
            "date_published": "2023-01-02T09:31:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pfrm-4rjw-g9q5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in rgb2hex up to 0.1.5. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. Upgrading to version 0.1.6 can address this issue. The name of the patch is 9e0c38594432edfa64136fdf7bb651835e17c34f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217151.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-25061\">https://nvd.nist.gov/vuln/detail/CVE-2018-25061</a></li>\n<li><a href=\"https://github.com/christian-bromann/rgb2hex/commit/9e0c38594432edfa64136fdf7bb651835e17c34f\">https://github.com/christian-bromann/rgb2hex/commit/9e0c38594432edfa64136fdf7bb651835e17c34f</a></li>\n<li><a href=\"https://github.com/christian-bromann/rgb2hex/releases/tag/v0.1.6\">https://github.com/christian-bromann/rgb2hex/releases/tag/v0.1.6</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.217151\">https://vuldb.com/?ctiid.217151</a></li>\n<li><a href=\"https://vuldb.com/?id.217151\">https://vuldb.com/?id.217151</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7599-fqgm-v84p\">https://github.com/advisories/GHSA-7599-fqgm-v84p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7599-fqgm-v84p",
            "title": "[rgb2hex] rgb2hex vulnerable to inefficient regular expression complexity",
            "date_modified": "2023-01-04T14:26:43.000Z",
            "date_published": "2022-12-31T21:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7599-fqgm-v84p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>\n<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>\n<h2 id=\"details\">Details</h2>\n<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>\n<pre><code>const JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) =&gt; {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) =&gt; {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) =&gt; {\n    if (searchKeys.indexOf(key) &gt; -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n} else {\n  throw new Error('Forbidden...');\n}\n</code></pre>\n<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>\n<pre><code>const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); // Error: Forbidden…\n}\n</code></pre>\n<p>However, users can instead set the <code>__proto__</code> key to <code>{\\\"isAdmin\\\": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>\n<pre><code>const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n} else {\n  throw new Error('Forbidden...');\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46175\">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/199\">https://github.com/json5/json5/issues/199</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/295\">https://github.com/json5/json5/issues/295</a></li>\n<li><a href=\"https://github.com/json5/json5/pull/298\">https://github.com/json5/json5/pull/298</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h",
            "title": "[json5] Prototype Pollution in JSON5 via Parse Method",
            "date_modified": "2023-01-04T13:47:06.000Z",
            "date_published": "2022-12-29T01:51:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>\n<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>\n<h2 id=\"details\">Details</h2>\n<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>\n<pre><code>const JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) =&gt; {\n  if (props.isAdmin) {\n    console.log('Doing dangerous thing as admin.');\n  } else {\n    console.log('Doing dangerous thing as user.');\n  }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) =&gt; {\n  let searchKeyFound = false;\n  Object.keys(obj).forEach((key) =&gt; {\n    if (searchKeys.indexOf(key) &gt; -1) {\n      searchKeyFound = true;\n    }\n  });\n  return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n} else {\n  throw new Error('Forbidden...');\n}\n</code></pre>\n<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>\n<pre><code>const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props);\n} else {\n  throw new Error('Forbidden...'); // Error: Forbidden…\n}\n</code></pre>\n<p>However, users can instead set the <code>__proto__</code> key to <code>{\\\"isAdmin\\\": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>\n<pre><code>const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n  doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n} else {\n  throw new Error('Forbidden...');\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46175\">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/199\">https://github.com/json5/json5/issues/199</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/295\">https://github.com/json5/json5/issues/295</a></li>\n<li><a href=\"https://github.com/json5/json5/pull/298\">https://github.com/json5/json5/pull/298</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h",
            "title": "[json5] Prototype Pollution in JSON5 via Parse Method",
            "date_modified": "2023-01-04T13:47:06.000Z",
            "date_published": "2022-12-29T01:51:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as critical, has been found in json-pointer. Affected by this issue is the function set of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. The name of the patch is 859c9984b6c407fc2d5a0a7e47c7274daa681941. It is recommended to apply a patch to fix this issue. VDB-216794 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4742\">https://nvd.nist.gov/vuln/detail/CVE-2022-4742</a></li>\n<li><a href=\"https://github.com/manuelstofer/json-pointer/pull/36\">https://github.com/manuelstofer/json-pointer/pull/36</a></li>\n<li><a href=\"https://github.com/manuelstofer/json-pointer/commit/859c9984b6c407fc2d5a0a7e47c7274daa681941\">https://github.com/manuelstofer/json-pointer/commit/859c9984b6c407fc2d5a0a7e47c7274daa681941</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216794\">https://vuldb.com/?ctiid.216794</a></li>\n<li><a href=\"https://vuldb.com/?id.216794\">https://vuldb.com/?id.216794</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6xrf-q977-5vgc\">https://github.com/advisories/GHSA-6xrf-q977-5vgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6xrf-q977-5vgc",
            "title": "[json-pointer] json-pointer vulnerable to Prototype Pollution",
            "date_modified": "2023-01-06T03:21:32.000Z",
            "date_published": "2022-12-26T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6xrf-q977-5vgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been found in Starcounter-Jack JSON-Patch up to 3.1.0 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.1 can address this issue. The name of the patch is 7ad6af41eabb2d799f698740a91284d762c955c9. It is recommended to upgrade the affected component. VDB-216778 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4279\">https://nvd.nist.gov/vuln/detail/CVE-2021-4279</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/pull/262\">https://github.com/Starcounter-Jack/JSON-Patch/pull/262</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9\">https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1\">https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216778\">https://vuldb.com/?ctiid.216778</a></li>\n<li><a href=\"https://vuldb.com/?id.216778\">https://vuldb.com/?id.216778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8gh8-hqwg-xf34\">https://github.com/advisories/GHSA-8gh8-hqwg-xf34</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8gh8-hqwg-xf34",
            "title": "[fast-json-patch] Starcounter-Jack JSON-Patch Prototype Pollution vulnerability",
            "date_modified": "2023-01-07T05:05:32.000Z",
            "date_published": "2022-12-25T21:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8gh8-hqwg-xf34"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>flat helps flatten/unflatten nested Javascript objects. A vulnerability, which was classified as critical, was found in hughsk flat up to 5.0.0. This affects the function unflatten of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). It is possible to initiate the attack remotely. Upgrading to version 5.0.1 can address this issue. The name of the patch is 20ef0ef55dfa028caddaedbcb33efbdb04d18e13. It is recommended to upgrade the affected component. The identifier VDB-216777 was assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36632\">https://nvd.nist.gov/vuln/detail/CVE-2020-36632</a></li>\n<li><a href=\"https://github.com/hughsk/flat/issues/105\">https://github.com/hughsk/flat/issues/105</a></li>\n<li><a href=\"https://github.com/hughsk/flat/pull/106\">https://github.com/hughsk/flat/pull/106</a></li>\n<li><a href=\"https://github.com/hughsk/flat/commit/20ef0ef55dfa028caddaedbcb33efbdb04d18e13\">https://github.com/hughsk/flat/commit/20ef0ef55dfa028caddaedbcb33efbdb04d18e13</a></li>\n<li><a href=\"https://github.com/hughsk/flat/releases/tag/5.0.1\">https://github.com/hughsk/flat/releases/tag/5.0.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216777\">https://vuldb.com/?ctiid.216777</a></li>\n<li><a href=\"https://vuldb.com/?id.216777\">https://vuldb.com/?id.216777</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2j2x-2gpw-g8fm\">https://github.com/advisories/GHSA-2j2x-2gpw-g8fm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2j2x-2gpw-g8fm",
            "title": "[flat] flat vulnerable to Prototype Pollution",
            "date_modified": "2023-01-06T03:16:40.000Z",
            "date_published": "2022-12-25T21:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2j2x-2gpw-g8fm"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}