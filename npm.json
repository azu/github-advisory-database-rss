{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for API users if content types accessible to the authenticated user contain relationships to API users (from:users-permissions). There are many scenarios in which such details from API users can leak in the JSON response within the admin panel, either through a direct or indirect relationship. Access to this information enables a user to compromise these users’ accounts if the password reset API endpoints have been enabled. In a worst-case scenario, a low-privileged user could get access to a high-privileged API account, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30618\">https://nvd.nist.gov/vuln/detail/CVE-2022-30618</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgj7-895j-gpr6\">https://github.com/advisories/GHSA-vgj7-895j-gpr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6",
            "title": "[@strapi/strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:06.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for API users if content types accessible to the authenticated user contain relationships to API users (from:users-permissions). There are many scenarios in which such details from API users can leak in the JSON response within the admin panel, either through a direct or indirect relationship. Access to this information enables a user to compromise these users’ accounts if the password reset API endpoints have been enabled. In a worst-case scenario, a low-privileged user could get access to a high-privileged API account, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30618\">https://nvd.nist.gov/vuln/detail/CVE-2022-30618</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vgj7-895j-gpr6\">https://github.com/advisories/GHSA-vgj7-895j-gpr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6",
            "title": "[strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:06.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vgj7-895j-gpr6"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for other admin panel users that have a relationship (e.g., created by, updated by) with content accessible to the authenticated user. For example, a low-privileged “author” role account can view these details in the JSON response for an “editor” or “super admin” that has updated one of the author’s blog posts. There are also many other scenarios where such details from other users can leak in the JSON response, either through a direct or indirect relationship. Access to this information enables a user to compromise other users’ accounts by successfully invoking the password reset workflow. In a worst-case scenario, a low-privileged user could get access to a “super admin” account with full control over the Strapi instance, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30617\">https://nvd.nist.gov/vuln/detail/CVE-2022-30617</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6fm-r26q-p747\">https://github.com/advisories/GHSA-f6fm-r26q-p747</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747",
            "title": "[@strapi/strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:01.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747"
            }
        },
        {
            "content_html": "<p>An authenticated user with access to the Strapi admin panel can view private and sensitive data, such as email and password reset tokens, for other admin panel users that have a relationship (e.g., created by, updated by) with content accessible to the authenticated user. For example, a low-privileged “author” role account can view these details in the JSON response for an “editor” or “super admin” that has updated one of the author’s blog posts. There are also many other scenarios where such details from other users can leak in the JSON response, either through a direct or indirect relationship. Access to this information enables a user to compromise other users’ accounts by successfully invoking the password reset workflow. In a worst-case scenario, a low-privileged user could get access to a “super admin” account with full control over the Strapi instance, and could read and modify any data as well as block access to both the admin panel and API by revoking privileges for all other users.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-30617\">https://nvd.nist.gov/vuln/detail/CVE-2022-30617</a></li>\n<li><a href=\"https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi\">https://www.synopsys.com/blogs/software-security/cyrc-advisory-strapi</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6fm-r26q-p747\">https://github.com/advisories/GHSA-f6fm-r26q-p747</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747",
            "title": "[strapi] Improper Removal of Sensitive Information Before Storage or Transfer in Strapi",
            "date_modified": "2022-06-07T21:17:01.000Z",
            "date_published": "2022-05-20T00:00:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6fm-r26q-p747"
            }
        },
        {
            "content_html": "<p>OS Command injection vulnerability in Mintzo Docker-Tester through 1.2.1 allows attackers to execute arbitrary commands via shell metacharacters in the 'ports' entry of a crafted docker-compose.yml file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34079\">https://nvd.nist.gov/vuln/detail/CVE-2021-34079</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4786\">https://advisory.checkmarx.net/advisory/CX-2021-4786</a></li>\n<li><a href=\"https://www.npmjs.com/package/docker-tester\">https://www.npmjs.com/package/docker-tester</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rj88-4777-828h\">https://github.com/advisories/GHSA-rj88-4777-828h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rj88-4777-828h",
            "title": "[docker-tester] Command injection in docker-tester",
            "date_modified": "2022-06-03T22:33:18.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rj88-4777-828h"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The gatsby-plugin-mdx plugin prior to versions 3.15.2 and 2.14.1 passes input through to the <code>gray-matter</code> npm package, which is vulnerable to JavaScript injection in its default configuration, unless input is sanitized.  The vulnerability is present when passing input in both webpack (MDX files in <code>src/pages</code> or MDX file imported as component in frontend / React code) and data mode (querying MDX nodes via GraphQL).  Injected JavaScript executes in the context of the build server.</p>\n<p>To exploit this vulnerability untrusted/unsanitized input would need to be sourced or added into an MDX file.  The following MDX payload demonstrates a vulnerable configuration:</p>\n<pre><code>---js\n((require(\"child_process\")).execSync(\"id &gt;&gt; /tmp/rce\"))\n--- \n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced in <code>gatsby-plugin-mdx@3.15.2</code> and <code>gatsby-plugin-mdx@2.14.1</code> which mitigates the issue by disabling the <code>gray-matter</code> JavaScript Frontmatter engine.  The patch introduces a new option, <code>JSFrontmatterEngine</code> which is set to <code>false</code> by default.  When setting <code>JSFrontmatterEngine</code> to <code>true</code>, input passed to <code>gatsby-plugin-mdx</code> must be sanitized before processing to avoid a security risk.  Warnings are displayed when enabling <code>JSFrontmatterEngine</code> to <code>true</code> or if it appears that the MDX input is attempting to use the Frontmatter engine.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If an older version of <code>gatsby-plugin-mdx</code> must be used, input passed into the plugin should be sanitized ahead of processing.</p>\n<p><strong>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</strong></p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Snyk [snyk.io] for initially bringing the issue to our attention, as well as Feng Xiao and Zhongfu Su, who reported the issue to Snyk.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@gatsbyjs.com\">security@gatsbyjs.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/advisories/GHSA-mj46-r4gr-5x83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83",
            "title": "[gatsby-plugin-mdx] Unsanitized JavaScript code injection possible in gatsby-plugin-mdx",
            "date_modified": "2022-06-06T19:00:13.000Z",
            "date_published": "2022-06-03T22:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The gatsby-plugin-mdx plugin prior to versions 3.15.2 and 2.14.1 passes input through to the <code>gray-matter</code> npm package, which is vulnerable to JavaScript injection in its default configuration, unless input is sanitized.  The vulnerability is present when passing input in both webpack (MDX files in <code>src/pages</code> or MDX file imported as component in frontend / React code) and data mode (querying MDX nodes via GraphQL).  Injected JavaScript executes in the context of the build server.</p>\n<p>To exploit this vulnerability untrusted/unsanitized input would need to be sourced or added into an MDX file.  The following MDX payload demonstrates a vulnerable configuration:</p>\n<pre><code>---js\n((require(\"child_process\")).execSync(\"id &gt;&gt; /tmp/rce\"))\n--- \n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>A patch has been introduced in <code>gatsby-plugin-mdx@3.15.2</code> and <code>gatsby-plugin-mdx@2.14.1</code> which mitigates the issue by disabling the <code>gray-matter</code> JavaScript Frontmatter engine.  The patch introduces a new option, <code>JSFrontmatterEngine</code> which is set to <code>false</code> by default.  When setting <code>JSFrontmatterEngine</code> to <code>true</code>, input passed to <code>gatsby-plugin-mdx</code> must be sanitized before processing to avoid a security risk.  Warnings are displayed when enabling <code>JSFrontmatterEngine</code> to <code>true</code> or if it appears that the MDX input is attempting to use the Frontmatter engine.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If an older version of <code>gatsby-plugin-mdx</code> must be used, input passed into the plugin should be sanitized ahead of processing.</p>\n<p><strong>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</strong></p>\n<h3 id=\"credits\">Credits</h3>\n<p>We would like to thank Snyk [snyk.io] for initially bringing the issue to our attention, as well as Feng Xiao and Zhongfu Su, who reported the issue to Snyk.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:security@gatsbyjs.com\">security@gatsbyjs.com</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-mj46-r4gr-5x83</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mj46-r4gr-5x83\">https://github.com/advisories/GHSA-mj46-r4gr-5x83</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83",
            "title": "[gatsby-plugin-mdx] Unsanitized JavaScript code injection possible in gatsby-plugin-mdx",
            "date_modified": "2022-06-06T19:00:13.000Z",
            "date_published": "2022-06-03T22:32:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mj46-r4gr-5x83"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the devcert npm package, when an attacker is able to supply arbitrary input to the certificateFor method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1929\">https://nvd.nist.gov/vuln/detail/CVE-2022-1929</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/devcert-redos-xray-211352/\">https://research.jfrog.com/vulnerabilities/devcert-redos-xray-211352/</a></li>\n<li><a href=\"https://github.com/davewasmer/devcert/commit/b0763215f6683271d296fda98f7ef7bcd4a55977\">https://github.com/davewasmer/devcert/commit/b0763215f6683271d296fda98f7ef7bcd4a55977</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fp36-299x-pwmw\">https://github.com/advisories/GHSA-fp36-299x-pwmw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fp36-299x-pwmw",
            "title": "[devcert] Regular expression denial of service in devcert",
            "date_modified": "2022-06-03T22:27:36.000Z",
            "date_published": "2022-06-03T00:01:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fp36-299x-pwmw"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the jquery-validation npm package, when an attacker is able to supply arbitrary input to the url2 method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43306\">https://nvd.nist.gov/vuln/detail/CVE-2021-43306</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/jquery-validation-redos-xray-211348/\">https://research.jfrog.com/vulnerabilities/jquery-validation-redos-xray-211348/</a></li>\n<li><a href=\"https://github.com/jquery-validation/jquery-validation/commit/69cb17ed774b427f7e2ffcdf197968231725c30e\">https://github.com/jquery-validation/jquery-validation/commit/69cb17ed774b427f7e2ffcdf197968231725c30e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j9m2-h2pv-wvph\">https://github.com/advisories/GHSA-j9m2-h2pv-wvph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j9m2-h2pv-wvph",
            "title": "[jquery-validation] Regular expression denial of service in jquery-validation",
            "date_modified": "2022-06-03T22:27:01.000Z",
            "date_published": "2022-06-03T00:00:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j9m2-h2pv-wvph"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the semver-regex npm package, when an attacker is able to supply arbitrary input to the test() method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43307\">https://nvd.nist.gov/vuln/detail/CVE-2021-43307</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/\">https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/</a></li>\n<li><a href=\"https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c\">https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4x5v-gmq8-25ch\">https://github.com/advisories/GHSA-4x5v-gmq8-25ch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch",
            "title": "[semver-regex] Regular expression denial of service in semver-regex",
            "date_modified": "2022-06-03T22:26:34.000Z",
            "date_published": "2022-06-03T00:01:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the semver-regex npm package, when an attacker is able to supply arbitrary input to the test() method</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43307\">https://nvd.nist.gov/vuln/detail/CVE-2021-43307</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/\">https://research.jfrog.com/vulnerabilities/semver-regex-redos-xray-211349/</a></li>\n<li><a href=\"https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c\">https://github.com/sindresorhus/semver-regex/commit/d8ba39a528c1027c43ab23f12eec28ca4d40dd0c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4x5v-gmq8-25ch\">https://github.com/advisories/GHSA-4x5v-gmq8-25ch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch",
            "title": "[semver-regex] Regular expression denial of service in semver-regex",
            "date_modified": "2022-06-03T22:26:34.000Z",
            "date_published": "2022-06-03T00:01:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4x5v-gmq8-25ch"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the markdown-link-extractor npm package, when an attacker is able to supply arbitrary input to the module's exported function</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43308\">https://nvd.nist.gov/vuln/detail/CVE-2021-43308</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/markdown-link-extractor-redos-xray-211350/\">https://research.jfrog.com/vulnerabilities/markdown-link-extractor-redos-xray-211350/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mmh6-m7v9-5956\">https://github.com/advisories/GHSA-mmh6-m7v9-5956</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mmh6-m7v9-5956",
            "title": "[markdown-link-extractor] Regular expression denial of service in markdown-link-extractor",
            "date_modified": "2022-06-03T22:25:17.000Z",
            "date_published": "2022-06-03T00:01:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mmh6-m7v9-5956"
            }
        },
        {
            "content_html": "<p>An exponential ReDoS (Regular Expression Denial of Service) can be triggered in the markdown-link-extractor npm package, when an attacker is able to supply arbitrary input to the module's exported function</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-43308\">https://nvd.nist.gov/vuln/detail/CVE-2021-43308</a></li>\n<li><a href=\"https://research.jfrog.com/vulnerabilities/markdown-link-extractor-redos-xray-211350/\">https://research.jfrog.com/vulnerabilities/markdown-link-extractor-redos-xray-211350/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mmh6-m7v9-5956\">https://github.com/advisories/GHSA-mmh6-m7v9-5956</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mmh6-m7v9-5956",
            "title": "[markdown-link-extractor] Regular expression denial of service in markdown-link-extractor",
            "date_modified": "2022-06-03T22:25:17.000Z",
            "date_published": "2022-06-03T00:01:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mmh6-m7v9-5956"
            }
        },
        {
            "content_html": "<p>OS Command Injection vulnerability in allenhwkim proctree through 0.1.1 and commit 0ac10ae575459457838f14e21d5996f2fa5c7593 for Node.js, allows attackers to execute arbitrary commands via the fix function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34082\">https://nvd.nist.gov/vuln/detail/CVE-2021-34082</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4783\">https://advisory.checkmarx.net/advisory/CX-2021-4783</a></li>\n<li><a href=\"https://github.com/allenhwkim/proctree/blob/master/index.js#L46\">https://github.com/allenhwkim/proctree/blob/master/index.js#L46</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cv76-rv4h-4mqc\">https://github.com/advisories/GHSA-cv76-rv4h-4mqc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cv76-rv4h-4mqc",
            "title": "[proctree] OS Command Injection in proctree",
            "date_modified": "2022-06-03T22:24:15.000Z",
            "date_published": "2022-06-03T00:00:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cv76-rv4h-4mqc"
            }
        },
        {
            "content_html": "<p>Google-it is a Node.js package which allows its users to send search queries to Google and receive the results in a JSON format. When using the 'Open in browser' option in versions up to 1.6.2, google-it will unsafely concat the result's link retrieved from google to a shell command, potentially exposing the server to RCE.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34083\">https://nvd.nist.gov/vuln/detail/CVE-2021-34083</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4777\">https://advisory.checkmarx.net/advisory/CX-2021-4777</a></li>\n<li><a href=\"https://github.com/PatNeedham/google-it/blob/v1.6.2/lib/googleIt.js#L59\">https://github.com/PatNeedham/google-it/blob/v1.6.2/lib/googleIt.js#L59</a></li>\n<li><a href=\"https://github.com/PatNeedham/google-it/blob/v1.6.2/src/googleIt.js#L34\">https://github.com/PatNeedham/google-it/blob/v1.6.2/src/googleIt.js#L34</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7xhv-mpjw-422f\">https://github.com/advisories/GHSA-7xhv-mpjw-422f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7xhv-mpjw-422f",
            "title": "[google-it] Command injection in google-it",
            "date_modified": "2022-06-03T22:23:46.000Z",
            "date_published": "2022-06-03T00:00:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7xhv-mpjw-422f"
            }
        },
        {
            "content_html": "<p>OS command injection vulnerability in Turistforeningen node-s3-uploader through 2.0.3 for Node.js allows attackers to execute arbitrary commands via the metadata() function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34084\">https://nvd.nist.gov/vuln/detail/CVE-2021-34084</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4776\">https://advisory.checkmarx.net/advisory/CX-2021-4776</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gwp3-f7mr-qpfv\">https://github.com/advisories/GHSA-gwp3-f7mr-qpfv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gwp3-f7mr-qpfv",
            "title": "[s3-uploader] OS Command Injection in s3-uploader",
            "date_modified": "2022-06-03T22:21:32.000Z",
            "date_published": "2022-06-03T00:00:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gwp3-f7mr-qpfv"
            }
        },
        {
            "content_html": "<p>A Server-Side Template Injection (SSTI) was discovered in Form.io 2.0.0. This leads to Remote Code Execution during deletion of the default Email template URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28246\">https://nvd.nist.gov/vuln/detail/CVE-2020-28246</a></li>\n<li><a href=\"https://github.com/formio/enterprise-release/blob/master/API-Server-Change-Log.md\">https://github.com/formio/enterprise-release/blob/master/API-Server-Change-Log.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-52vj-mr2j-f8jh\">https://github.com/advisories/GHSA-52vj-mr2j-f8jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-52vj-mr2j-f8jh",
            "title": "[formio] Server-Side Template Injection in formio",
            "date_modified": "2022-06-03T22:20:22.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-52vj-mr2j-f8jh"
            }
        },
        {
            "content_html": "<p>lifion-verify-dependencies through 1.1.0 is vulnerable to OS command injection via a crafted dependency name on the scanned project's package.json file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34078\">https://nvd.nist.gov/vuln/detail/CVE-2021-34078</a></li>\n<li><a href=\"https://github.com/lifion/lifion-verify-deps/commit/be1133d5b78e3caa0004fa60207013dca4e1bf38\">https://github.com/lifion/lifion-verify-deps/commit/be1133d5b78e3caa0004fa60207013dca4e1bf38</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4785\">https://advisory.checkmarx.net/advisory/CX-2021-4785</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rphm-c8gw-3r38\">https://github.com/advisories/GHSA-rphm-c8gw-3r38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rphm-c8gw-3r38",
            "title": "[lifion-verify-deps] OS Command Injection in lifion-verify-deps",
            "date_modified": "2022-06-03T22:19:57.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rphm-c8gw-3r38"
            }
        },
        {
            "content_html": "<p>OS Command Injection vulnerability in es128 ssl-utils 1.0.0 for Node.js allows attackers to execute arbitrary commands via unsanitized shell metacharacters provided to the createCertRequest() and the createCert() functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34080\">https://nvd.nist.gov/vuln/detail/CVE-2021-34080</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4782\">https://advisory.checkmarx.net/advisory/CX-2021-4782</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-552j-pv39-f3jf\">https://github.com/advisories/GHSA-552j-pv39-f3jf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-552j-pv39-f3jf",
            "title": "[ssl-utils] OS Command injection in ssl-utils",
            "date_modified": "2022-06-03T22:13:44.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-552j-pv39-f3jf"
            }
        },
        {
            "content_html": "<p>OS Command Injection vulnerability in bbultman gitsome through 0.2.3 allows attackers to execute arbitrary commands via a crafted tag name of the target git repository.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-34081\">https://nvd.nist.gov/vuln/detail/CVE-2021-34081</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4780\">https://advisory.checkmarx.net/advisory/CX-2021-4780</a></li>\n<li><a href=\"https://www.npmjs.com/package/gitsome\">https://www.npmjs.com/package/gitsome</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9v73-x562-wv5x\">https://github.com/advisories/GHSA-9v73-x562-wv5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9v73-x562-wv5x",
            "title": "[gitsome] OS Command Injection in gitsome",
            "date_modified": "2022-06-03T22:09:26.000Z",
            "date_published": "2022-06-03T00:00:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9v73-x562-wv5x"
            }
        }
    ]
}