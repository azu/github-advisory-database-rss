{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>The multipart body parser accepts an unlimited number of file parts.</li>\n<li>The multipart body parser accepts an unlimited number of field parts.</li>\n<li>The multipart body parser accepts an unlimited number of empty parts as field\nparts.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This is fixed in v7.4.1 (for Fastify v4.x) and v6.0.1 (for Fastify v3.x).</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workaround.  </p>\n<h3 id=\"references\">References</h3>\n<p>Reported at <a href=\"https://hackerone.com/reports/1816195\">https://hackerone.com/reports/1816195</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g\">https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25576\">https://nvd.nist.gov/vuln/detail/CVE-2023-25576</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297\">https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297</a></li>\n<li><a href=\"https://hackerone.com/reports/1816195\">https://hackerone.com/reports/1816195</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1\">https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1\">https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hpp2-2cr5-pf6g\">https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hpp2-2cr5-pf6g",
            "title": "[@fastify/multipart] Denial of service due to unlimited number of parts",
            "date_modified": "2023-02-14T21:49:56.000Z",
            "date_published": "2023-02-14T21:49:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hpp2-2cr5-pf6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<ul>\n<li>The multipart body parser accepts an unlimited number of file parts.</li>\n<li>The multipart body parser accepts an unlimited number of field parts.</li>\n<li>The multipart body parser accepts an unlimited number of empty parts as field\nparts.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This is fixed in v7.4.1 (for Fastify v4.x) and v6.0.1 (for Fastify v3.x).</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workaround.  </p>\n<h3 id=\"references\">References</h3>\n<p>Reported at <a href=\"https://hackerone.com/reports/1816195\">https://hackerone.com/reports/1816195</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g\">https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25576\">https://nvd.nist.gov/vuln/detail/CVE-2023-25576</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297\">https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297</a></li>\n<li><a href=\"https://hackerone.com/reports/1816195\">https://hackerone.com/reports/1816195</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1\">https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1</a></li>\n<li><a href=\"https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1\">https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hpp2-2cr5-pf6g\">https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hpp2-2cr5-pf6g",
            "title": "[@fastify/multipart] Denial of service due to unlimited number of parts",
            "date_modified": "2023-02-14T21:49:56.000Z",
            "date_published": "2023-02-14T21:49:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hpp2-2cr5-pf6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>\n<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our chat, linked to in the <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25571\">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8\">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv",
            "title": "[@backstage/plugin-catalog-backend] Cross site scripting Vulnerability in backstage Software Catalog",
            "date_modified": "2023-02-14T21:35:13.000Z",
            "date_published": "2023-02-14T21:35:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>\n<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our chat, linked to in the <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25571\">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8\">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv",
            "title": "[@backstage/catalog-model] Cross site scripting Vulnerability in backstage Software Catalog",
            "date_modified": "2023-02-14T21:35:13.000Z",
            "date_published": "2023-02-14T21:35:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>\n<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/backstage/backstage\">Backstage repository</a></li>\n<li>Visit our chat, linked to in the <a href=\"https://github.com/backstage/backstage\">Backstage README</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25571\">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>\n<li><a href=\"https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8\">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7hv8-3fr9-j2hv\">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv",
            "title": "[@backstage/core-components] Cross site scripting Vulnerability in backstage Software Catalog",
            "date_modified": "2023-02-14T21:35:13.000Z",
            "date_published": "2023-02-14T21:35:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package glance before 3.0.9 are vulnerable to Directory Traversal that allows users to read files outside the public root directory. This is related to but distinct from the vulnerability reported in <a href=\"https://security.snyk.io/vuln/npm:glance:20180129\">CVE-2018-3715</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25937\">https://nvd.nist.gov/vuln/detail/CVE-2022-25937</a></li>\n<li><a href=\"https://github.com/jarofghosts/glance/commit/8cecfe90286e0c45a5494067f1b592d0ccfeabac\">https://github.com/jarofghosts/glance/commit/8cecfe90286e0c45a5494067f1b592d0ccfeabac</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-GLANCE-3318395\">https://security.snyk.io/vuln/SNYK-JS-GLANCE-3318395</a></li>\n<li><a href=\"https://gist.github.com/lirantal/c8cfb0398c78e558b7d4ac02aae67809\">https://gist.github.com/lirantal/c8cfb0398c78e558b7d4ac02aae67809</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3hjh-5hgx-f5wh\">https://github.com/advisories/GHSA-3hjh-5hgx-f5wh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3hjh-5hgx-f5wh",
            "title": "[glance] Path traversal vulnerability in glance",
            "date_modified": "2023-02-14T16:52:36.000Z",
            "date_published": "2023-02-13T06:30:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3hjh-5hgx-f5wh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been found in simple-markdown 0.5.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file simple-markdown.js. The manipulation leads to inefficient regular expression complexity. The attack can be launched remotely. Upgrading to version 0.5.2 is able to address this issue. The name of the patch is 89797fef9abb4cab2fb76a335968266a92588816. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220639.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-25103\">https://nvd.nist.gov/vuln/detail/CVE-2019-25103</a></li>\n<li><a href=\"https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816\">https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816</a></li>\n<li><a href=\"https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2\">https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.220639\">https://vuldb.com/?ctiid.220639</a></li>\n<li><a href=\"https://vuldb.com/?id.220639\">https://vuldb.com/?id.220639</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gpvj-gp8c-c7p2\">https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gpvj-gp8c-c7p2",
            "title": "[simple-markdown] Regular Expression Denial of Service in simple-markdown",
            "date_modified": "2023-02-14T01:02:09.000Z",
            "date_published": "2023-02-12T15:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gpvj-gp8c-c7p2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as problematic, was found in simple-markdown 0.6.0. Affected is an unknown function of the file simple-markdown.js. The manipulation with the input &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;:/:/:/:/:/:/:/:/:/:/ leads to inefficient regular expression complexity. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.6.1 is able to address this issue. The name of the patch is 015a719bf5cdc561feea05500ecb3274ef609cd2. It is recommended to upgrade the affected component. VDB-220638 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-25102\">https://nvd.nist.gov/vuln/detail/CVE-2019-25102</a></li>\n<li><a href=\"https://github.com/ariabuckles/simple-markdown/pull/73\">https://github.com/ariabuckles/simple-markdown/pull/73</a></li>\n<li><a href=\"https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2\">https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2</a></li>\n<li><a href=\"https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1\">https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.220638\">https://vuldb.com/?ctiid.220638</a></li>\n<li><a href=\"https://vuldb.com/?id.220638\">https://vuldb.com/?id.220638</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j533-2g8v-pmpg\">https://github.com/advisories/GHSA-j533-2g8v-pmpg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j533-2g8v-pmpg",
            "title": "[simple-markdown] Regular Expression Denial of Service in simple-markdown",
            "date_modified": "2023-02-14T00:57:46.000Z",
            "date_published": "2023-02-12T15:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j533-2g8v-pmpg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>\n<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>\n<p>Proof of concept:</p>\n<pre><code class=\"language-jsx\">import { RichTextField } from 'react-admin';\n\nconst record = {\n    id: 1,\n    body: `\n&lt;p&gt;\n&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author\n&lt;a href=\"https://en.wikipedia.org/wiki/Leo_Tolstoy\" onclick=\"document.getElementById('stolendata').value='credentials';\"&gt;Leo Tolstoy&lt;/a&gt;,\npublished serially, then in its entirety in 1869.\n&lt;/p&gt;\n&lt;p onmouseover=\"document.getElementById('stolendata').value='credentials';\"&gt;\nIt is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.\n&lt;/p&gt;\n&lt;img src=\"x\" onerror=\"document.getElementById('stolendata').value='credentials';\" /&gt;\n`,\n};\n\nconst VulnerableRichTextField = () =&gt; (\n    &lt;&gt;\n        &lt;RichTextField record={record} source=\"body\" /&gt;\n        &lt;hr /&gt;\n        &lt;h4&gt;Stolen data:&lt;/h4&gt;\n        &lt;input id=\"stolendata\" defaultValue=\"none\" /&gt;\n    &lt;/&gt;\n);\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>\n<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>\n<pre><code class=\"language-tsx\">// react-admin v4\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';\nimport purify from 'dompurify';\n\nexport const removeTags = (input) =&gt;\n    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';\n\nconst RichTextField = memo(\n    props =&gt; {\n        const { className, emptyText, source, stripTags, ...rest } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            &lt;Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            &gt;\n                {value == null &amp;&amp; emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    &lt;span\n                        dangerouslySetInnerHTML={{\n                            __html: purify.sanitize(value),\n                        }}\n                    /&gt;\n                )}\n            &lt;/Typography&gt;\n        );\n    }\n);\n\nRichTextField.defaultProps = {\n    addLabel: true,\n    stripTags: false,\n};\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nRichTextField.displayName = 'RichTextField';\n\nexport default RichTextField;\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a>, <a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v\">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25572\">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v3.19.12\">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v4.7.6\">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jcr-82fh-339v\">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v",
            "title": "[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`",
            "date_modified": "2023-02-14T00:32:22.000Z",
            "date_published": "2023-02-14T00:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>\n<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>\n<p>Proof of concept:</p>\n<pre><code class=\"language-jsx\">import { RichTextField } from 'react-admin';\n\nconst record = {\n    id: 1,\n    body: `\n&lt;p&gt;\n&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author\n&lt;a href=\"https://en.wikipedia.org/wiki/Leo_Tolstoy\" onclick=\"document.getElementById('stolendata').value='credentials';\"&gt;Leo Tolstoy&lt;/a&gt;,\npublished serially, then in its entirety in 1869.\n&lt;/p&gt;\n&lt;p onmouseover=\"document.getElementById('stolendata').value='credentials';\"&gt;\nIt is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.\n&lt;/p&gt;\n&lt;img src=\"x\" onerror=\"document.getElementById('stolendata').value='credentials';\" /&gt;\n`,\n};\n\nconst VulnerableRichTextField = () =&gt; (\n    &lt;&gt;\n        &lt;RichTextField record={record} source=\"body\" /&gt;\n        &lt;hr /&gt;\n        &lt;h4&gt;Stolen data:&lt;/h4&gt;\n        &lt;input id=\"stolendata\" defaultValue=\"none\" /&gt;\n    &lt;/&gt;\n);\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>\n<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>\n<pre><code class=\"language-tsx\">// react-admin v4\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';\nimport purify from 'dompurify';\n\nexport const removeTags = (input) =&gt;\n    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';\n\nconst RichTextField = memo(\n    props =&gt; {\n        const { className, emptyText, source, stripTags, ...rest } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            &lt;Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            &gt;\n                {value == null &amp;&amp; emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    &lt;span\n                        dangerouslySetInnerHTML={{\n                            __html: purify.sanitize(value),\n                        }}\n                    /&gt;\n                )}\n            &lt;/Typography&gt;\n        );\n    }\n);\n\nRichTextField.defaultProps = {\n    addLabel: true,\n    stripTags: false,\n};\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nRichTextField.displayName = 'RichTextField';\n\nexport default RichTextField;\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a>, <a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v\">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25572\">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v3.19.12\">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v4.7.6\">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jcr-82fh-339v\">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v",
            "title": "[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`",
            "date_modified": "2023-02-14T00:32:22.000Z",
            "date_published": "2023-02-14T00:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>\n<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>\n<p>Proof of concept:</p>\n<pre><code class=\"language-jsx\">import { RichTextField } from 'react-admin';\n\nconst record = {\n    id: 1,\n    body: `\n&lt;p&gt;\n&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author\n&lt;a href=\"https://en.wikipedia.org/wiki/Leo_Tolstoy\" onclick=\"document.getElementById('stolendata').value='credentials';\"&gt;Leo Tolstoy&lt;/a&gt;,\npublished serially, then in its entirety in 1869.\n&lt;/p&gt;\n&lt;p onmouseover=\"document.getElementById('stolendata').value='credentials';\"&gt;\nIt is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.\n&lt;/p&gt;\n&lt;img src=\"x\" onerror=\"document.getElementById('stolendata').value='credentials';\" /&gt;\n`,\n};\n\nconst VulnerableRichTextField = () =&gt; (\n    &lt;&gt;\n        &lt;RichTextField record={record} source=\"body\" /&gt;\n        &lt;hr /&gt;\n        &lt;h4&gt;Stolen data:&lt;/h4&gt;\n        &lt;input id=\"stolendata\" defaultValue=\"none\" /&gt;\n    &lt;/&gt;\n);\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>\n<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>\n<pre><code class=\"language-tsx\">// react-admin v4\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';\nimport purify from 'dompurify';\n\nexport const removeTags = (input) =&gt;\n    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';\n\nconst RichTextField = memo(\n    props =&gt; {\n        const { className, emptyText, source, stripTags, ...rest } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            &lt;Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            &gt;\n                {value == null &amp;&amp; emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    &lt;span\n                        dangerouslySetInnerHTML={{\n                            __html: purify.sanitize(value),\n                        }}\n                    /&gt;\n                )}\n            &lt;/Typography&gt;\n        );\n    }\n);\n\nRichTextField.defaultProps = {\n    addLabel: true,\n    stripTags: false,\n};\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nRichTextField.displayName = 'RichTextField';\n\nexport default RichTextField;\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a>, <a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v\">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25572\">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v3.19.12\">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v4.7.6\">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jcr-82fh-339v\">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v",
            "title": "[react-admin] Cross-Site-Scripting attack on `<RichTextField>`",
            "date_modified": "2023-02-14T00:32:22.000Z",
            "date_published": "2023-02-14T00:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>\n<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>\n<p>Proof of concept:</p>\n<pre><code class=\"language-jsx\">import { RichTextField } from 'react-admin';\n\nconst record = {\n    id: 1,\n    body: `\n&lt;p&gt;\n&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author\n&lt;a href=\"https://en.wikipedia.org/wiki/Leo_Tolstoy\" onclick=\"document.getElementById('stolendata').value='credentials';\"&gt;Leo Tolstoy&lt;/a&gt;,\npublished serially, then in its entirety in 1869.\n&lt;/p&gt;\n&lt;p onmouseover=\"document.getElementById('stolendata').value='credentials';\"&gt;\nIt is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.\n&lt;/p&gt;\n&lt;img src=\"x\" onerror=\"document.getElementById('stolendata').value='credentials';\" /&gt;\n`,\n};\n\nconst VulnerableRichTextField = () =&gt; (\n    &lt;&gt;\n        &lt;RichTextField record={record} source=\"body\" /&gt;\n        &lt;hr /&gt;\n        &lt;h4&gt;Stolen data:&lt;/h4&gt;\n        &lt;input id=\"stolendata\" defaultValue=\"none\" /&gt;\n    &lt;/&gt;\n);\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>\n<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>\n<pre><code class=\"language-tsx\">// react-admin v4\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport Typography from '@material-ui/core/Typography';\nimport { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';\nimport purify from 'dompurify';\n\nexport const removeTags = (input) =&gt;\n    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';\n\nconst RichTextField = memo(\n    props =&gt; {\n        const { className, emptyText, source, stripTags, ...rest } = props;\n        const record = useRecordContext(props);\n        const value = get(record, source);\n\n        return (\n            &lt;Typography\n                className={className}\n                variant=\"body2\"\n                component=\"span\"\n                {...sanitizeFieldRestProps(rest)}\n            &gt;\n                {value == null &amp;&amp; emptyText ? (\n                    emptyText\n                ) : stripTags ? (\n                    removeTags(value)\n                ) : (\n                    &lt;span\n                        dangerouslySetInnerHTML={{\n                            __html: purify.sanitize(value),\n                        }}\n                    /&gt;\n                )}\n            &lt;/Typography&gt;\n        );\n    }\n);\n\nRichTextField.defaultProps = {\n    addLabel: true,\n    stripTags: false,\n};\n\nRichTextField.propTypes = {\n    // @ts-ignore\n    ...Typography.propTypes,\n    ...fieldPropTypes,\n    stripTags: PropTypes.bool,\n};\n\nRichTextField.displayName = 'RichTextField';\n\nexport default RichTextField;\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a>, <a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v\">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25572\">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8644\">https://github.com/marmelab/react-admin/pull/8644</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/pull/8645\">https://github.com/marmelab/react-admin/pull/8645</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v3.19.12\">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>\n<li><a href=\"https://github.com/marmelab/react-admin/releases/tag/v4.7.6\">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5jcr-82fh-339v\">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v",
            "title": "[react-admin] Cross-Site-Scripting attack on `<RichTextField>`",
            "date_modified": "2023-02-14T00:32:22.000Z",
            "date_published": "2023-02-14T00:32:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5jcr-82fh-339v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>CKSource CKEditor5 35.4.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the Full Featured CKEditor5 widget.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-48110\">https://nvd.nist.gov/vuln/detail/CVE-2022-48110</a></li>\n<li><a href=\"https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html\">https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html</a></li>\n<li><a href=\"https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html\">https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6p89-3p7c-qrhv\">https://github.com/advisories/GHSA-6p89-3p7c-qrhv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6p89-3p7c-qrhv",
            "title": "[ckeditor5] Cross-site scripting in CKEditor5",
            "date_modified": "2023-02-14T00:29:25.000Z",
            "date_published": "2023-02-13T21:31:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6p89-3p7c-qrhv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of the package create-choo-app3 are vulnerable to Command Injection via the devInstall function due to improper user-input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25855\">https://nvd.nist.gov/vuln/detail/CVE-2022-25855</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951\">https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rj7m-2p3g-fjxg\">https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rj7m-2p3g-fjxg",
            "title": "[create-choo-app3] create-choo-app3 is vulnerable to Command Injection via the devInstall function",
            "date_modified": "2023-02-13T20:51:27.000Z",
            "date_published": "2023-02-06T06:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rj7m-2p3g-fjxg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross site scripting (XSS) vulnerability in the Insert Video function of Froala WYSIWYG Editor allows attackers to execute arbitrary web scripts or HTML.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-22864\">https://nvd.nist.gov/vuln/detail/CVE-2020-22864</a></li>\n<li><a href=\"https://github.com/froala/wysiwyg-editor/issues/3880\">https://github.com/froala/wysiwyg-editor/issues/3880</a></li>\n<li><a href=\"https://github.com/froala/wysiwyg-editor/pull/3911\">https://github.com/froala/wysiwyg-editor/pull/3911</a></li>\n<li><a href=\"https://github.com/418sec/wysiwyg-editor/pull/1\">https://github.com/418sec/wysiwyg-editor/pull/1</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WE3b1iSnWJY\">https://www.youtube.com/watch?v=WE3b1iSnWJY</a></li>\n<li><a href=\"https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11\">https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-97x5-cc53-cv4v\">https://github.com/advisories/GHSA-97x5-cc53-cv4v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-97x5-cc53-cv4v",
            "title": "[froala-editor] Cross site scripting in froala-editor",
            "date_modified": "2023-02-13T18:05:45.000Z",
            "date_published": "2021-10-28T23:14:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-97x5-cc53-cv4v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>chrome-launcher prior to 0.13.2 is subject to OS Command Injection via the $HOME environment variable in Linux operating systems. This issue is patched in version 0.13.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7645\">https://nvd.nist.gov/vuln/detail/CVE-2020-7645</a></li>\n<li><a href=\"http://snyk.io/vuln/SNYK-JS-CHROMELAUNCHER-537575\">http://snyk.io/vuln/SNYK-JS-CHROMELAUNCHER-537575</a></li>\n<li><a href=\"https://github.com/GoogleChrome/chrome-launcher/pull/197\">https://github.com/GoogleChrome/chrome-launcher/pull/197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gp2j-mg4w-2rh5\">https://github.com/advisories/GHSA-gp2j-mg4w-2rh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gp2j-mg4w-2rh5",
            "title": "[chrome-launcher] chrome-launcher prior to 0.13.2 is subject to OS Command Injection via the $HOME environment variable",
            "date_modified": "2023-02-10T19:46:55.000Z",
            "date_published": "2022-05-24T17:17:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gp2j-mg4w-2rh5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in Segmentio is-url up to 1.2.2. It has been rated as problematic. Affected by this issue is some unknown functionality of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. Upgrading to version 1.2.3 is able to address this issue. The name of the patch is 149550935c63a98c11f27f694a7c4a9479e53794. It is recommended to upgrade the affected component. VDB-220058 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-25079\">https://nvd.nist.gov/vuln/detail/CVE-2018-25079</a></li>\n<li><a href=\"https://github.com/segmentio/is-url/pull/18\">https://github.com/segmentio/is-url/pull/18</a></li>\n<li><a href=\"https://github.com/segmentio/is-url/commit/149550935c63a98c11f27f694a7c4a9479e53794\">https://github.com/segmentio/is-url/commit/149550935c63a98c11f27f694a7c4a9479e53794</a></li>\n<li><a href=\"https://github.com/segmentio/is-url/releases/tag/v1.2.3\">https://github.com/segmentio/is-url/releases/tag/v1.2.3</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.220058\">https://vuldb.com/?ctiid.220058</a></li>\n<li><a href=\"https://vuldb.com/?id.220058\">https://vuldb.com/?id.220058</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p9w8-2mpq-49h9\">https://github.com/advisories/GHSA-p9w8-2mpq-49h9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p9w8-2mpq-49h9",
            "title": "[is-url] is-url Inefficient Regular Expression Complexity vulnerability",
            "date_modified": "2023-02-10T00:59:16.000Z",
            "date_published": "2023-02-04T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p9w8-2mpq-49h9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>User-provided strings to formula's parser might lead to polynomial execution time.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users should upgrade to 3.0.1+.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/hapijs/formula/security/advisories/GHSA-c2jc-4fpr-4vhg\">https://github.com/hapijs/formula/security/advisories/GHSA-c2jc-4fpr-4vhg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-25166\">https://nvd.nist.gov/vuln/detail/CVE-2023-25166</a></li>\n<li><a href=\"https://github.com/hapijs/formula/commit/9fbc20a02d75ae809c37a610a57802cd1b41b3fe\">https://github.com/hapijs/formula/commit/9fbc20a02d75ae809c37a610a57802cd1b41b3fe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2jc-4fpr-4vhg\">https://github.com/advisories/GHSA-c2jc-4fpr-4vhg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2jc-4fpr-4vhg",
            "title": "[@sideway/formula] @sideway/formula contains Regular Expression Denial of Service (ReDoS) Vulnerability",
            "date_modified": "2023-02-08T22:38:10.000Z",
            "date_published": "2023-02-08T22:38:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2jc-4fpr-4vhg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting vulnerability in Joplin Desktop App before v2.9.17 allows attacker to execute arbitrary code via improper santization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45598\">https://nvd.nist.gov/vuln/detail/CVE-2022-45598</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/commit/a2de167b95debad83a0f0c7925a88c0198db812e\">https://github.com/laurent22/joplin/commit/a2de167b95debad83a0f0c7925a88c0198db812e</a></li>\n<li><a href=\"https://github.com/laurent22/joplin/releases/tag/v2.9.17\">https://github.com/laurent22/joplin/releases/tag/v2.9.17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6c2-879r-jffh\">https://github.com/advisories/GHSA-h6c2-879r-jffh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6c2-879r-jffh",
            "title": "[joplin] Joplin Desktop App vulnerable to Cross-site Scripting",
            "date_modified": "2023-02-08T21:56:38.000Z",
            "date_published": "2023-01-31T18:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6c2-879r-jffh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package mt7688-wiscan before 0.8.3 are vulnerable to Command Injection due to improper input sanitization in the 'wiscan.scan' function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25916\">https://nvd.nist.gov/vuln/detail/CVE-2022-25916</a></li>\n<li><a href=\"https://github.com/simenkid/mt7688-wiscan/commit/ff6d6567c65b4e972916a8fbc4533212f20a2fa5\">https://github.com/simenkid/mt7688-wiscan/commit/ff6d6567c65b4e972916a8fbc4533212f20a2fa5</a></li>\n<li><a href=\"https://github.com/simenkid/mt7688-wiscan/blob/master/index.js%23L22\">https://github.com/simenkid/mt7688-wiscan/blob/master/index.js%23L22</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-MT7688WISCAN-3177394\">https://security.snyk.io/vuln/SNYK-JS-MT7688WISCAN-3177394</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h8c-8ccp-8gmh\">https://github.com/advisories/GHSA-5h8c-8ccp-8gmh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h8c-8ccp-8gmh",
            "title": "[mt7688-wiscan] mt7688-wiscan is vulnerable to Command Injection due to improper input sanitization",
            "date_modified": "2023-02-08T21:48:42.000Z",
            "date_published": "2023-02-01T06:30:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h8c-8ccp-8gmh"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}