{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Windows-Only: The NSIS installer makes a system call to open cmd.exe via NSExec in the <code>.nsh</code> installer script. NSExec by default searches the current directory of where the installer is located before searching <code>PATH</code>. This means that if an attacker can place a malicious executable file named cmd.exe in the same folder as the installer, the installer will run the malicious file.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Fixed in <a href=\"https://github.com/electron-userland/electron-builder/pull/8059\">https://github.com/electron-userland/electron-builder/pull/8059</a></p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None, it executes at the installer-level before the app is present on the system, so there's no way to check if it exists in a current installer.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://cwe.mitre.org/data/definitions/426.html\">https://cwe.mitre.org/data/definitions/426.html</a>\n<a href=\"https://cwe.mitre.org/data/definitions/427\">https://cwe.mitre.org/data/definitions/427</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/electron-userland/electron-builder/security/advisories/GHSA-r4pf-3v7r-hh55\">https://github.com/electron-userland/electron-builder/security/advisories/GHSA-r4pf-3v7r-hh55</a></li>\n<li><a href=\"https://github.com/electron-userland/electron-builder/pull/8059\">https://github.com/electron-userland/electron-builder/pull/8059</a></li>\n<li><a href=\"https://github.com/electron-userland/electron-builder/commit/8f4acff3c2d45c1cb07779bb3fe79644408ee387\">https://github.com/electron-userland/electron-builder/commit/8f4acff3c2d45c1cb07779bb3fe79644408ee387</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r4pf-3v7r-hh55\">https://github.com/advisories/GHSA-r4pf-3v7r-hh55</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r4pf-3v7r-hh55",
            "title": "[app-builder-lib] electron-builder's NSIS installer - execute arbitrary code on the target machine (Windows only)",
            "date_modified": "2024-03-06T18:33:16.000Z",
            "date_published": "2024-03-04T20:42:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r4pf-3v7r-hh55"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Serveral Server-Side Request Forgery (SSRF) vulnerabilities in RSSHub allow remote attackers to use the server as a proxy to send HTTP GET requests to arbitrary targets and retrieve information in the internal network or conduct Denial-of-Service (DoS) attacks.</p>\n<h3 id=\"details\">Details</h3>\n<h4 id=\"mastodonacctacctstatusesonly_media\"><code>/mastodon/acct/:acct/statuses/:only_media?</code></h4>\n<p><a href=\"https://github.com/DIYgod/RSSHub/blob/5928c5db2472e101c2f5c3bafed77a2f72edd40a/lib/routes/mastodon/acct.js#L4-L7\">https://github.com/DIYgod/RSSHub/blob/5928c5db2472e101c2f5c3bafed77a2f72edd40a/lib/routes/mastodon/acct.js#L4-L7</a></p>\n<p><a href=\"https://github.com/DIYgod/RSSHub/blob/5928c5db2472e101c2f5c3bafed77a2f72edd40a/lib/routes/mastodon/utils.js#L85-L105\">https://github.com/DIYgod/RSSHub/blob/5928c5db2472e101c2f5c3bafed77a2f72edd40a/lib/routes/mastodon/utils.js#L85-L105</a></p>\n<h4 id=\"zjolpaperid\"><code>/zjol/paper/:id?</code></h4>\n<p><a href=\"https://github.com/DIYgod/RSSHub/blob/172f6cfd2b69ea6affdbdedf61e6dde1671f3796/lib/routes/zjol/paper.js#L7-L13\">https://github.com/DIYgod/RSSHub/blob/172f6cfd2b69ea6affdbdedf61e6dde1671f3796/lib/routes/zjol/paper.js#L7-L13</a></p>\n<h4 id=\"m4idcategory\"><code>/m4/:id?/:category*</code></h4>\n<p><a href=\"https://github.com/DIYgod/RSSHub/blob/172f6cfd2b69ea6affdbdedf61e6dde1671f3796/lib/routes/m4/index.js#L10-L14\">https://github.com/DIYgod/RSSHub/blob/172f6cfd2b69ea6affdbdedf61e6dde1671f3796/lib/routes/m4/index.js#L10-L14</a></p>\n<h3 id=\"poc\">PoC</h3>\n<ul>\n<li><a href=\"https://rsshub.app/mastodon/acct/test@a6wt15r2.requestrepo.com%23/statuses\">https://rsshub.app/mastodon/acct/test@a6wt15r2.requestrepo.com%23/statuses</a></li>\n<li><a href=\"https://rsshub.app/zjol/paper/a6wt15r2.requestrepo.com%23\">https://rsshub.app/zjol/paper/a6wt15r2.requestrepo.com%23</a></li>\n<li><a href=\"https://rsshub.app/m4/a6wt15r2.requestrepo.com%23/test\">https://rsshub.app/m4/a6wt15r2.requestrepo.com%23/test</a></li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can send malicious requests to a RSSHub server, to make the server send HTTP GET requests to arbitrary destinations and see partial responses. This may lead to:</p>\n<ol>\n<li>Leak the server IP address, which could be hidden behind a CDN.</li>\n<li>Retrieve information in the internal network. e.g. which addresses/ports are accessible, the titles and meta descriptions of HTML pages.</li>\n<li>DoS amplification. The attacker could request the server to download some large files, or chain several SSRF requests in a single attacker request: <code>https://rsshub.a.com/zjol/paper/rsshub.b.net%2Fzjol%2Fpaper%2Frsshub.a.com%252Fzjol%252Fpaper%252Frsshub.b.net%25252Fzjol%25252Fpaper%25252Frsshub.a.com%2525252Fzjol%2525252Fpaper%2525252Fexample.com%2525252523%25252523%252523%2523%23</code>.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/DIYgod/RSSHub/security/advisories/GHSA-3p3p-cgj7-vgw3\">https://github.com/DIYgod/RSSHub/security/advisories/GHSA-3p3p-cgj7-vgw3</a></li>\n<li><a href=\"https://github.com/DIYgod/RSSHub/commit/a42947231104a9ec3436fc52cedb31740c9a7069\">https://github.com/DIYgod/RSSHub/commit/a42947231104a9ec3436fc52cedb31740c9a7069</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3p3p-cgj7-vgw3\">https://github.com/advisories/GHSA-3p3p-cgj7-vgw3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3p3p-cgj7-vgw3",
            "title": "[rsshub] RSSHub vulnerable to Server-Side Request Forgery",
            "date_modified": "2024-03-06T17:03:13.000Z",
            "date_published": "2024-03-06T17:03:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3p3p-cgj7-vgw3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>When the specially crafted image is supplied to the internal media proxy, it proxies the image without handling XSS vulnerabilities, allowing for the execution of arbitrary JavaScript code.</p>\n<p>Users who access the deliberately constructed URL are affected.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>This vulnerability was fixed in version <a href=\"https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87\">https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87</a>. Please upgrade to this or a later version.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>No.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/DIYgod/RSSHub/security/advisories/GHSA-2wqw-hr4f-xrhh\">https://github.com/DIYgod/RSSHub/security/advisories/GHSA-2wqw-hr4f-xrhh</a></li>\n<li><a href=\"https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87\">https://github.com/DIYgod/RSSHub/commit/4d3e5d79c1c17837e931b4cd253d2013b487aa87</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2wqw-hr4f-xrhh\">https://github.com/advisories/GHSA-2wqw-hr4f-xrhh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2wqw-hr4f-xrhh",
            "title": "[rsshub] RSSHub Cross-site Scripting vulnerability caused by internal media proxy",
            "date_modified": "2024-03-06T17:02:34.000Z",
            "date_published": "2024-03-06T17:02:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2wqw-hr4f-xrhh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting (XSS) vulnerability in hexo-theme-anzhiyu v1.6.12, allows remote attackers to execute arbitrary code via the algolia search function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-25865\">https://nvd.nist.gov/vuln/detail/CVE-2024-25865</a></li>\n<li><a href=\"https://github.com/anzhiyu-c/hexo-theme-anzhiyu/issues/200\">https://github.com/anzhiyu-c/hexo-theme-anzhiyu/issues/200</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-82jf-8f24-xq9m\">https://github.com/advisories/GHSA-82jf-8f24-xq9m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-82jf-8f24-xq9m",
            "title": "[hexo-theme-anzhiyu] hexo-theme-anzhiyu Cross-site Scripting vulnerability",
            "date_modified": "2024-03-06T16:08:33.000Z",
            "date_published": "2024-03-03T00:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-82jf-8f24-xq9m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability relates to insecure handling of HTTP requests by the @tomphttp/bare-server-node package. This flaw potentially exposes the users of the package to manipulation of their web traffic. The impact may vary depending on the specific usage of the package but it can potentially affect any system where this package is in use.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Yes, the problem has been patched. We advise all users to upgrade to version @tomphttp/<a href=\"mailto:bare-server-node@2.0.2\">bare-server-node@2.0.2</a> as soon as possible.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Given the nature of the vulnerability, the most effective solution is to upgrade to the patched version of the package. Specific workaround strategies will be disclosed later due to security considerations.</p>\n<h3 id=\"references\">References</h3>\n<p>Further information about this vulnerability will be provided at a later date to provide users with an opportunity to upgrade to a patched version and to prevent potential exploitation of the vulnerability. Users are advised to follow the repository announcements and updates.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tomphttp/bare-server-node/security/advisories/GHSA-86fc-f9gr-v533\">https://github.com/tomphttp/bare-server-node/security/advisories/GHSA-86fc-f9gr-v533</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-86fc-f9gr-v533\">https://github.com/advisories/GHSA-86fc-f9gr-v533</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-86fc-f9gr-v533",
            "title": "[@tomphttp/bare-server-node] HTTP Handling Vulnerability in the Bare server",
            "date_modified": "2024-03-05T16:24:32.000Z",
            "date_published": "2024-03-05T16:24:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-86fc-f9gr-v533"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In JSONata versions <code>&gt;= 1.4.0, &lt; 1.8.7</code> and <code>&gt;= 2.0.0, &lt; 2.0.4</code>, a malicious expression can use the <a href=\"https://docs.jsonata.org/other-operators#-------transform\">transform operator</a> to override properties on the <code>Object</code> constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions.</p>\n<h3 id=\"patch\">Patch</h3>\n<p>This issue has been fixed in JSONata versions <code>&gt;= 1.8.7</code> and <code>&gt;= 2.0.4</code>. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. The following patch can be applied if updating is not possible.</p>\n<pre><code class=\"language-patch\">--- a/src/jsonata.js\n+++ b/src/jsonata.js\n@@ -1293,6 +1293,13 @@ var jsonata = (function() {\n                 }\n                 for(var ii = 0; ii &lt; matches.length; ii++) {\n                     var match = matches[ii];\n+                    if (match &amp;&amp; (match.isPrototypeOf(result) || match instanceof Object.constructor)) {\n+                        throw {\n+                            code: \"D1010\",\n+                            stack: (new Error()).stack,\n+                            position: expr.position\n+                        };\n+                    }\n                     // evaluate the update value for each match\n                     var update = await evaluate(expr.update, match, environment);\n                     // update must be an object\n@@ -1539,7 +1546,7 @@ var jsonata = (function() {\n                 if (typeof err.token == 'undefined' &amp;&amp; typeof proc.token !== 'undefined') {\n                     err.token = proc.token;\n                 }\n-                err.position = proc.position;\n+                err.position = proc.position || err.position;\n             }\n             throw err;\n         }\n@@ -1972,6 +1979,7 @@ var jsonata = (function() {\n         \"T1007\": \"Attempted to partially apply a non-function. Did you mean ${{{token}}}?\",\n         \"T1008\": \"Attempted to partially apply a non-function\",\n         \"D1009\": \"Multiple key definitions evaluate to same key: {{value}}\",\n+        \"D1010\": \"Attempted to access the Javascript object prototype\", // Javascript specific \n         \"T1010\": \"The matcher function argument passed to function {{token}} does not return the correct object structure\",\n         \"T2001\": \"The left side of the {{token}} operator must evaluate to a number\",\n         \"T2002\": \"The right side of the {{token}} operator must evaluate to a number\",\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4\">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></p>\n<h3 id=\"credit\">Credit</h3>\n<p>Thank you to Albert Pedersen of Cloudflare for disclosing this issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8\">https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1\">https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c\">https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2\">https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4\">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fqg8-vfv7-8fj8\">https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fqg8-vfv7-8fj8",
            "title": "[jsonata] JSONata expression can pollute the \"Object\" prototype",
            "date_modified": "2024-03-04T20:43:50.000Z",
            "date_published": "2024-03-04T20:43:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fqg8-vfv7-8fj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>In JSONata versions <code>&gt;= 1.4.0, &lt; 1.8.7</code> and <code>&gt;= 2.0.0, &lt; 2.0.4</code>, a malicious expression can use the <a href=\"https://docs.jsonata.org/other-operators#-------transform\">transform operator</a> to override properties on the <code>Object</code> constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions.</p>\n<h3 id=\"patch\">Patch</h3>\n<p>This issue has been fixed in JSONata versions <code>&gt;= 1.8.7</code> and <code>&gt;= 2.0.4</code>. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. The following patch can be applied if updating is not possible.</p>\n<pre><code class=\"language-patch\">--- a/src/jsonata.js\n+++ b/src/jsonata.js\n@@ -1293,6 +1293,13 @@ var jsonata = (function() {\n                 }\n                 for(var ii = 0; ii &lt; matches.length; ii++) {\n                     var match = matches[ii];\n+                    if (match &amp;&amp; (match.isPrototypeOf(result) || match instanceof Object.constructor)) {\n+                        throw {\n+                            code: \"D1010\",\n+                            stack: (new Error()).stack,\n+                            position: expr.position\n+                        };\n+                    }\n                     // evaluate the update value for each match\n                     var update = await evaluate(expr.update, match, environment);\n                     // update must be an object\n@@ -1539,7 +1546,7 @@ var jsonata = (function() {\n                 if (typeof err.token == 'undefined' &amp;&amp; typeof proc.token !== 'undefined') {\n                     err.token = proc.token;\n                 }\n-                err.position = proc.position;\n+                err.position = proc.position || err.position;\n             }\n             throw err;\n         }\n@@ -1972,6 +1979,7 @@ var jsonata = (function() {\n         \"T1007\": \"Attempted to partially apply a non-function. Did you mean ${{{token}}}?\",\n         \"T1008\": \"Attempted to partially apply a non-function\",\n         \"D1009\": \"Multiple key definitions evaluate to same key: {{value}}\",\n+        \"D1010\": \"Attempted to access the Javascript object prototype\", // Javascript specific \n         \"T1010\": \"The matcher function argument passed to function {{token}} does not return the correct object structure\",\n         \"T2001\": \"The left side of the {{token}} operator must evaluate to a number\",\n         \"T2002\": \"The right side of the {{token}} operator must evaluate to a number\",\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4\">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></p>\n<h3 id=\"credit\">Credit</h3>\n<p>Thank you to Albert Pedersen of Cloudflare for disclosing this issue.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8\">https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1\">https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c\">https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2\">https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2</a></li>\n<li><a href=\"https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4\">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fqg8-vfv7-8fj8\">https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fqg8-vfv7-8fj8",
            "title": "[jsonata] JSONata expression can pollute the \"Object\" prototype",
            "date_modified": "2024-03-04T20:43:50.000Z",
            "date_published": "2024-03-04T20:43:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fqg8-vfv7-8fj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Currently the exact Directus version number is being shipped in compiled JS bundles which are accessible without authentication. With this information a malicious attacker can trivially look for known vulnerabilities in Directus core or any of its shipped dependencies in that specific running version.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved in versions 10.8.3 and newer</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-5mhg-wv8w-p59j\">https://github.com/directus/directus/security/advisories/GHSA-5mhg-wv8w-p59j</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27296\">https://nvd.nist.gov/vuln/detail/CVE-2024-27296</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a5a1c26ac48795ed3212a4c51b9523588aff4fa0\">https://github.com/directus/directus/commit/a5a1c26ac48795ed3212a4c51b9523588aff4fa0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5mhg-wv8w-p59j\">https://github.com/advisories/GHSA-5mhg-wv8w-p59j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5mhg-wv8w-p59j",
            "title": "[directus] Directus version number disclosure",
            "date_modified": "2024-03-01T20:11:11.000Z",
            "date_published": "2024-03-01T20:11:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5mhg-wv8w-p59j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Previously, budibase used a library called <code>vm2</code> for code execution inside the Budibase builder and apps, such as the UI below for configuring bindings in the design section.</p>\n<p><img alt=\"Screenshot 2024-03-01 at 13 50 16\" src=\"https://github.com/Budibase/budibase/assets/11256663/5f049b64-cd99-48fd-a184-644cd312c82e\"></p>\n<p>Due to a <a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">vulnerability in vm2</a>, any environment that executed the code server side (automations and column formulas) was susceptible to this vulnerability, allowing users to escape the sandbox provided by <code>vm2</code>, and to expose server side variables such as <code>process.env</code>. It's recommended by the authors of <code>vm2</code> themselves that you should move to another solution for remote JS execution due to this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We moved our entire JS sandbox infrastructure over to <code>isolated-vm</code>, a much more secure and recommended library for remote code execution in 2.20.0. This also comes with a performance benefit in the way we cache and execute your JS server side. The budibase cloud platform has been patched already and is not running <code>vm2</code>, but self host users will need to manage the updates by themselves.</p>\n<p>If you are a self hosted user, you can take the following steps to reproduce the exploit and to verify if your installation is currently affected.</p>\n<p>Create a new formula column on one of your tables in the data section with the following configuration.\n<img alt=\"Screenshot 2024-03-01 at 14 04 28\" src=\"https://github.com/Budibase/budibase/assets/11256663/0f8bc19b-9e44-4e95-ab4e-6ef6278eea34\"></p>\n<p>Add the following JS function to the formula and save.\n<img alt=\"Screenshot 2024-03-01 at 14 05 19\" src=\"https://github.com/Budibase/budibase/assets/11256663/1d0c9705-1a88-49b0-93e0-f385a04b5c25\"></p>\n<p>If your installation is vulnerable, when the formula evaluates you will be able to see the printed <code>process.env</code> in your new formula field. If not, your installation is not affected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround at this time for any budibase app that uses JS. You must fully migrate post version 2.20.0 to patch the vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Budibase/budibase/security/advisories/GHSA-4g2x-vq5p-5vj6\">https://github.com/Budibase/budibase/security/advisories/GHSA-4g2x-vq5p-5vj6</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/security/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/patriksimek/vm2/security/advisories/GHSA-cchq-frgv-rjh5</a></li>\n<li><a href=\"https://github.com/Budibase/budibase/commit/601c02a4acc695b1cc602bf611f0ae66d6e5868f\">https://github.com/Budibase/budibase/commit/601c02a4acc695b1cc602bf611f0ae66d6e5868f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4g2x-vq5p-5vj6\">https://github.com/advisories/GHSA-4g2x-vq5p-5vj6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4g2x-vq5p-5vj6",
            "title": "[@budibase/server] Budibase affected by VM2 Constructor Escape Vulnerability",
            "date_modified": "2024-03-01T20:09:00.000Z",
            "date_published": "2024-03-01T20:09:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4g2x-vq5p-5vj6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The algorithm to detect SQL injection has been improved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/6.5.0\">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a> (fixed in Parse Server 6)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20\">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a> (fixed in Parse Server 7 alpha release)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Mikhail Shcherbakov (<a href=\"https://twitter.com/yu5k3\">https://twitter.com/yu5k3</a>) working with Trend Micro Zero Day Initiative (finder)</li>\n<li>Ehsan Persania (remediation developer)</li>\n<li>Manuel Trezza (coordinator)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27298\">https://nvd.nist.gov/vuln/detail/CVE-2024-27298</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504\">https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833\">https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/6.5.0\">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20\">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/advisories/GHSA-6927-3vr9-fxf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6927-3vr9-fxf2",
            "title": "[parse-server] ZDI-CAN-19105: Parse Server literalizeRegexPart SQL Injection",
            "date_modified": "2024-03-01T20:08:24.000Z",
            "date_published": "2024-03-01T20:08:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6927-3vr9-fxf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The algorithm to detect SQL injection has been improved.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/6.5.0\">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a> (fixed in Parse Server 6)</li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20\">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a> (fixed in Parse Server 7 alpha release)</li>\n</ul>\n<h3 id=\"credits\">Credits</h3>\n<ul>\n<li>Mikhail Shcherbakov (<a href=\"https://twitter.com/yu5k3\">https://twitter.com/yu5k3</a>) working with Trend Micro Zero Day Initiative (finder)</li>\n<li>Ehsan Persania (remediation developer)</li>\n<li>Manuel Trezza (coordinator)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27298\">https://nvd.nist.gov/vuln/detail/CVE-2024-27298</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504\">https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833\">https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/6.5.0\">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a></li>\n<li><a href=\"https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20\">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6927-3vr9-fxf2\">https://github.com/advisories/GHSA-6927-3vr9-fxf2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6927-3vr9-fxf2",
            "title": "[parse-server] ZDI-CAN-19105: Parse Server literalizeRegexPart SQL Injection",
            "date_modified": "2024-03-01T20:08:24.000Z",
            "date_published": "2024-03-01T20:08:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6927-3vr9-fxf2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"password-reset-vulnerable-to-accent-confusion\">Password reset vulnerable to accent confusion</h2>\n<p>The password reset mechanism of the Directus backend is implemented in a way where combined with (specific, need to double check if i can work around) configuration in MySQL or MariaDB. As such, it allows attackers to receive a password reset email of a victim user, specifically having it arrive at a similar email address as the victim with a one or more characters changed to use accents. </p>\n<p>This is due to the fact that by default MySQL/MariaDB are configured for accent-insenstive and case-insensitve comparisons.</p>\n<p>MySQL weak comparison:</p>\n<pre><code class=\"language-sql\">select 1 from directus_users where 'julian@cure53.de' = 'julian@cüre53.de';\n</code></pre>\n<p>This is exploitable due to an error in the API using the supplied email address for sending the reset password mail instead of using the email from the database.</p>\n<h3 id=\"steps-to-reproduce\">Steps to reproduce:</h3>\n<ol>\n<li>If the attacker knows the email address of the victim user, i.e., <code>julian@cure53.de</code>. (possibly just the domain could be enough for an educated guess)</li>\n<li>A off-by-one accented domain <code>cüre53.de</code> can be registered to be able to receive emails.</li>\n<li>With this email the attacker can request a password reset for <code>julian@cüre53.de</code>.</li>\n</ol>\n<pre><code class=\"language-http\">POST /auth/password/request HTTP/1.1\nHost: example.com\n[...]\n{\"email\":\"julian@cüre53.de\"}\n</code></pre>\n<ol start=\"4\">\n<li>The supplied email (julian@cüre53.de) gets checked against the database and will match the non-accented email <code>julian@cure53.de</code> and will continue to email the password reset link to the provided email address instead of the saved email address.</li>\n<li>With this email the attacker can log into the target account and use it for nefarious things</li>\n</ol>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Should be possible with collations but haven't been able to confirm this. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/\">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html\">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5\">https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5</a></li>\n<li><a href=\"https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919\">https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html\">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>\n<li><a href=\"https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation\">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27295\">https://nvd.nist.gov/vuln/detail/CVE-2024-27295</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qw9g-7549-7wg5\">https://github.com/advisories/GHSA-qw9g-7549-7wg5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qw9g-7549-7wg5",
            "title": "[directus] Directus has MySQL accent insensitive email matching",
            "date_modified": "2024-03-02T22:17:03.000Z",
            "date_published": "2024-03-01T16:58:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qw9g-7549-7wg5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In mongo-express 1.0.2, /admin allows CSRF, as demonstrated by deletion of a Collection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-52555\">https://nvd.nist.gov/vuln/detail/CVE-2023-52555</a></li>\n<li><a href=\"https://github.com/mongo-express/mongo-express/issues/1338\">https://github.com/mongo-express/mongo-express/issues/1338</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fffg-cwc9-xvj7\">https://github.com/advisories/GHSA-fffg-cwc9-xvj7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fffg-cwc9-xvj7",
            "title": "[mongo-express] mongo-express Cross-site Request Forgery vulnerability",
            "date_modified": "2024-03-01T16:58:16.000Z",
            "date_published": "2024-03-01T09:31:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fffg-cwc9-xvj7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>SDK versions between and including 5.16.0 and 5.19.0 allowed Sentry auth tokens to be set in the optional authToken configuration parameter, for debugging purposes. Doing so would result in the auth token being built into the application bundle, and therefore the auth token could be potentially exposed in case the application bundle is subsequently published.</p>\n<p>You may ignore this notification if you are not using <code>authToken</code> configuration parameter in your React Native SDK configuration or did not publish apps using this way of configuring the <code>authToken</code>.</p>\n<p>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href=\"https://docs.sentry.io/product/accounts/auth-tokens/\">rotate your token</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The behavior that allowed setting an <code>authToken</code> parameter was fixed in SDK version 5.19.1 where, if this parameter was set, you will see a warning and the <code>authToken</code> would be removed before bundling the application.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ol>\n<li>Remove <code>authToken</code> from the plugin configuration.</li>\n<li>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href=\"https://docs.sentry.io/product/accounts/auth-tokens/\">rotate your token</a>.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1\">sentry-react-native 5.19.1 release notes</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-docs/pull/9244\">https://github.com/getsentry/sentry-docs/pull/9244</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95\">https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b\">https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b</a></li>\n<li><a href=\"https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1\">https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-68c2-4mpx-qh95\">https://github.com/advisories/GHSA-68c2-4mpx-qh95</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-68c2-4mpx-qh95",
            "title": "[@sentry/react-native] Potential leakage of Sentry auth tokens by React Native SDK with Expo plugin",
            "date_modified": "2024-03-01T16:57:57.000Z",
            "date_published": "2024-03-01T16:57:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-68c2-4mpx-qh95"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Nteract v.0.28.0 was discovered to contain a remote code execution (RCE) vulnerability via the Markdown link.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-22891\">https://nvd.nist.gov/vuln/detail/CVE-2024-22891</a></li>\n<li><a href=\"https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891\">https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6jvg-hp25-42f6\">https://github.com/advisories/GHSA-6jvg-hp25-42f6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6jvg-hp25-42f6",
            "title": "[nteract] Nteract Remote Code Execution vulnerability",
            "date_modified": "2024-03-01T16:57:13.000Z",
            "date_published": "2024-03-01T06:33:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6jvg-hp25-42f6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package sanitize-html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21501\">https://nvd.nist.gov/vuln/detail/CVE-2024-21501</a></li>\n<li><a href=\"https://github.com/apostrophecms/sanitize-html/pull/650\">https://github.com/apostrophecms/sanitize-html/pull/650</a></li>\n<li><a href=\"https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4\">https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4</a></li>\n<li><a href=\"https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf\">https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf</a></li>\n<li><a href=\"https://github.com/apostrophecms/apostrophe/discussions/4436\">https://github.com/apostrophecms/apostrophe/discussions/4436</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334\">https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-6276557\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-6276557</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rm97-x556-q36h\">https://github.com/advisories/GHSA-rm97-x556-q36h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rm97-x556-q36h",
            "title": "[sanitize-html] sanitize-html Information Exposure vulnerability",
            "date_modified": "2024-03-06T20:05:05.000Z",
            "date_published": "2024-02-24T06:30:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rm97-x556-q36h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>\n<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>\n<ul>\n<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>\n<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>\n</ul>\n<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 5.0.2 or 4.9.6.</p>\n<h3 id=\"references\">References</h3>\n<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9vx6-7xxf-x967\">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory",
            "date_modified": "2024-02-29T20:10:04.000Z",
            "date_published": "2024-02-29T20:09:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9vx6-7xxf-x967"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}