{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Google Analytics element Attribute Injection leading to XSS</p>\n<h3 id=\"details\">Details</h3>\n<p>Since the custom status interface can set an independent Google Analytics ID and the template has not been sanitized, there is an attribute injection vulnerability here, which can lead to XSS attacks.\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/110759348/282278047-667b774b-421f-449a-8f95-3f3906ae4216.png\"></p>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Run the latest version of the louislam/uptime-kuma container and initialize the account password.</li>\n<li>Create a new status page.</li>\n<li>Edit the status page and change the Google Analytics ID to following payload(it only works for firefox. Any attribute can be injected, but this seems the most intuitive):</li>\n</ol>\n<pre><code>123123\" onafterscriptexecute=alert(window.name+1),eval(window.name) a=\"x\n</code></pre>\n<ol start=\"4\">\n<li>Click Save and return to the interface. XSS occurs.\nscreenshots:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/110759348/282287393-4874974f-9416-4941-9c2e-a92ee2412197.png\"></li>\n</ol>\n<p><img alt=\"9d0603e634fb7da2e83a0a45dc0a36ac\" src=\"https://user-images.githubusercontent.com/110759348/282287346-1deb0382-520f-47cf-b191-9b7d19c47879.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Latest docker version (Other versions have not been tested accurately)</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/louislam/uptime-kuma/security/advisories/GHSA-v4v2-8h88-65qj\">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-v4v2-8h88-65qj</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4v2-8h88-65qj\">https://github.com/advisories/GHSA-v4v2-8h88-65qj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4v2-8h88-65qj",
            "title": "[uptime-kuma] Attribute Injection leading to XSS(Cross-Site-Scripting)",
            "date_modified": "2023-11-24T16:54:21.000Z",
            "date_published": "2023-11-24T16:54:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4v2-8h88-65qj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A function in the implementation contract may be inaccessible if its selector clashes with one of the proxy's own selectors. Specifically, if the clashing function has a different signature with incompatible ABI encoding, the proxy could revert while attempting to decode the arguments from calldata.</p>\n<p>The probability of an accidental clash is negligible, but one could be caused deliberately.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been fixed in v4.8.3.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If a function appears to be inaccessible for this reason, it may be possible to craft the calldata such that ABI decoding does not fail at the proxy and the function is properly proxied through.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-mx2q-35m2-x2rh\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-mx2q-35m2-x2rh</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30541\">https://nvd.nist.gov/vuln/detail/CVE-2023-30541</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.3\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.3</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mx2q-35m2-x2rh\">https://github.com/advisories/GHSA-mx2q-35m2-x2rh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mx2q-35m2-x2rh",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts TransparentUpgradeableProxy clashing selector calls may not be delegated",
            "date_modified": "2023-11-23T03:36:07.000Z",
            "date_published": "2023-04-17T16:45:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mx2q-35m2-x2rh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A function in the implementation contract may be inaccessible if its selector clashes with one of the proxy's own selectors. Specifically, if the clashing function has a different signature with incompatible ABI encoding, the proxy could revert while attempting to decode the arguments from calldata.</p>\n<p>The probability of an accidental clash is negligible, but one could be caused deliberately.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been fixed in v4.8.3.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If a function appears to be inaccessible for this reason, it may be possible to craft the calldata such that ABI decoding does not fail at the proxy and the function is properly proxied through.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-mx2q-35m2-x2rh\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-mx2q-35m2-x2rh</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4154</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-30541\">https://nvd.nist.gov/vuln/detail/CVE-2023-30541</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.3\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.8.3</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21\">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/58fa0f81c4036f1a3b616fdffad2fd27e5d5ce21</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mx2q-35m2-x2rh\">https://github.com/advisories/GHSA-mx2q-35m2-x2rh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mx2q-35m2-x2rh",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts TransparentUpgradeableProxy clashing selector calls may not be delegated",
            "date_modified": "2023-11-23T03:36:07.000Z",
            "date_published": "2023-04-17T16:45:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mx2q-35m2-x2rh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Request Forgery (CSRF) vulnerability in NASA Open MCT (aka openmct) through 3.1.0 allows attackers to view sensitive information via the flexibleLayout plugin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45884\">https://nvd.nist.gov/vuln/detail/CVE-2023-45884</a></li>\n<li><a href=\"https://www.linkedin.com/pulse/xss-nasas-open-mct-v302-visionspace-technologies-ubg4f\">https://www.linkedin.com/pulse/xss-nasas-open-mct-v302-visionspace-technologies-ubg4f</a></li>\n<li><a href=\"https://github.com/nasa/openmct/pull/7148\">https://github.com/nasa/openmct/pull/7148</a></li>\n<li><a href=\"https://github.com/nasa/openmct/pull/7148/commits/4e95e12559c9c5364269ff366a59768573baacb4\">https://github.com/nasa/openmct/pull/7148/commits/4e95e12559c9c5364269ff366a59768573baacb4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4g88-4hgm-m99x\">https://github.com/advisories/GHSA-4g88-4hgm-m99x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4g88-4hgm-m99x",
            "title": "[openmct] NASA Open MCT Cross Site Request Forgery (CSRF) vulnerability",
            "date_modified": "2023-11-22T17:02:03.000Z",
            "date_published": "2023-11-09T18:34:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4g88-4hgm-m99x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An XSS issue was discovered in tooltip/tooltip.js in PrimeTek PrimeFaces 7.0.11. In a web application using PrimeFaces, an attacker can provide JavaScript code in an input field whose data is later used as a tooltip title without any input validation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-10544\">https://nvd.nist.gov/vuln/detail/CVE-2020-10544</a></li>\n<li><a href=\"https://github.com/primefaces/primefaces/issues/5642\">https://github.com/primefaces/primefaces/issues/5642</a></li>\n<li><a href=\"https://github.com/primefaces/primefaces/commit/9982c4f7a83f75e3ab06168fa283e3d6128dfd1f\">https://github.com/primefaces/primefaces/commit/9982c4f7a83f75e3ab06168fa283e3d6128dfd1f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fw5f-7c6c-3vmv\">https://github.com/advisories/GHSA-fw5f-7c6c-3vmv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fw5f-7c6c-3vmv",
            "title": "[primefaces] Cross-site Scripting in PrimeFaces",
            "date_modified": "2023-11-21T11:37:52.000Z",
            "date_published": "2021-05-07T16:16:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fw5f-7c6c-3vmv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting (XSS) vulnerability in CesiumJS v1.111 allows attackers to execute arbitrary code in the context of the victim's browser via sending a crafted payload to /container_files/public_html/doc/index.html.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48094\">https://nvd.nist.gov/vuln/detail/CVE-2023-48094</a></li>\n<li><a href=\"https://gist.github.com/cd80/33ab71cc49c42feb55de3e574753320f\">https://gist.github.com/cd80/33ab71cc49c42feb55de3e574753320f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4532-pmx7-9ww7\">https://github.com/advisories/GHSA-4532-pmx7-9ww7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4532-pmx7-9ww7",
            "title": "[cesium] Cross-site Scripting in cesium",
            "date_modified": "2023-11-20T23:28:56.000Z",
            "date_published": "2023-11-14T18:30:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4532-pmx7-9ww7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><code>next-auth</code> applications prior to version <strong>4.24.5</strong> that rely on the default <a href=\"https://next-auth.js.org/configuration/nextjs#middleware\">Middleware authorization</a> are affected.</p>\n<p>A bad actor could create an empty/mock user, by getting hold of a NextAuth.js-issued JWT from an interrupted OAuth sign-in flow (state, PKCE or nonce).</p>\n<p>Manually overriding the <code>next-auth.session-token</code> cookie value with this non-related JWT would let the user simulate a logged in user, albeit having no user information associated with it. (The only property on this user is an opaque randomly generated string).</p>\n<p>This vulnerability does <strong>not</strong> give access to other users' data, neither to resources that require proper authorization via scopes or other means. The created mock user has no information associated with it (ie. no name, email, access_token, etc.)</p>\n<p>This vulnerability can be exploited by bad actors to peek at logged in user states (e.g. dashboard layout).</p>\n<p><em>Note: Regardless of the vulnerability, the existence of a NextAuth.js session state can provide simple authentication, but not authorization in your applications. For role-based access control, you can check out <a href=\"https://authjs.dev/guides/basics/role-based-access-control\">our guide</a>.</em></p>\n<h3 id=\"patches\">Patches</h3>\n<p>We patched the vulnerability in <code>next-auth</code> <code>v4.24.5</code>. To upgrade, run one of the following:</p>\n<pre><code>npm i next-auth@latest\n</code></pre>\n<pre><code>yarn add next-auth@latest\n</code></pre>\n<pre><code>pnpm add next-auth@latest\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrading to <code>latest</code> is the recommended way to fix this issue. However, using <a href=\"https://next-auth.js.org/configuration/nextjs#advanced-usage\">a custom authorization callback for Middleware</a>, developers can manually do a basic authentication:</p>\n<pre><code class=\"language-ts\">// middleware.ts\nimport { withAuth } from \"next-auth/middleware\"\n\nexport default withAuth(/*your middleware function*/, {\n  // checking the existence of any property - besides `value` which might be a random string - on the `token` object is sufficient to prevent this vulnerability\n  callbacks: { authorized: ({ token }) =&gt; !!token?.email }\n})\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://next-auth.js.org/configuration/nextjs#middleware\">NextAuth.js Middleware</a></li>\n<li><a href=\"https://authjs.dev/guides/basics/role-based-access-control\">Role-based access contorl (RBAC) guide</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nextauthjs/next-auth/security/advisories/GHSA-v64w-49xw-qq89\">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-v64w-49xw-qq89</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48309\">https://nvd.nist.gov/vuln/detail/CVE-2023-48309</a></li>\n<li><a href=\"https://github.com/nextauthjs/next-auth/commit/d237059b6d0cb868c041ba18b698e0cee20a2f10\">https://github.com/nextauthjs/next-auth/commit/d237059b6d0cb868c041ba18b698e0cee20a2f10</a></li>\n<li><a href=\"https://authjs.dev/guides/basics/role-based-access-control\">https://authjs.dev/guides/basics/role-based-access-control</a></li>\n<li><a href=\"https://next-auth.js.org/configuration/nextjs#advanced-usage\">https://next-auth.js.org/configuration/nextjs#advanced-usage</a></li>\n<li><a href=\"https://next-auth.js.org/configuration/nextjs#middlewar\">https://next-auth.js.org/configuration/nextjs#middlewar</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v64w-49xw-qq89\">https://github.com/advisories/GHSA-v64w-49xw-qq89</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v64w-49xw-qq89",
            "title": "[next-auth] Possible user mocking that bypasses basic authentication",
            "date_modified": "2023-11-20T23:25:38.000Z",
            "date_published": "2023-11-20T23:25:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v64w-49xw-qq89"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users are able to bypass the field level security. This means fields that they where not allowed to populate could be populated anyway even in the event that they tried to populate something that they don't have access to.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This issue has been patched in 1.3.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/strapi-community/strapi-plugin-protected-populate/security/advisories/GHSA-6h67-934r-82g7\">https://github.com/strapi-community/strapi-plugin-protected-populate/security/advisories/GHSA-6h67-934r-82g7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48218\">https://nvd.nist.gov/vuln/detail/CVE-2023-48218</a></li>\n<li><a href=\"https://github.com/strapi-community/strapi-plugin-protected-populate/commit/05441066d64e09dd55937d9f089962e9ebe2fb39\">https://github.com/strapi-community/strapi-plugin-protected-populate/commit/05441066d64e09dd55937d9f089962e9ebe2fb39</a></li>\n<li><a href=\"https://github.com/strapi-community/strapi-plugin-protected-populate/releases/tag/v1.3.4\">https://github.com/strapi-community/strapi-plugin-protected-populate/releases/tag/v1.3.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6h67-934r-82g7\">https://github.com/advisories/GHSA-6h67-934r-82g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6h67-934r-82g7",
            "title": "[strapi-plugin-protected-populate] Bypass of field access control in strapi-plugin-protected-populate",
            "date_modified": "2023-11-20T21:01:44.000Z",
            "date_published": "2023-11-20T21:01:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6h67-934r-82g7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The fast-jwt library does not properly prevent JWT algorithm confusion for all public key types.</p>\n<h3 id=\"details\">Details</h3>\n<p>The 'publicKeyPemMatcher' in 'fast-jwt/src/crypto.js' does not properly match all common PEM formats for public keys. To exploit this vulnerability, an attacker needs to craft a malicious JWT token containing the HS256 algorithm, signed with the public RSA key of the victim application. This attack will only work if the victim application utilizes a public key containing the <code>BEGIN RSA PUBLIC KEY</code> header.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Take a server running the following code:</p>\n<pre><code class=\"language-javascript\">const express = require('express');\nconst { createSigner, createVerifier } = require('fast-jwt')\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\n// Load the keys from the file\nconst publicKeyPath = path.join(__dirname, 'public_key.pem');\nconst publicKey = fs.readFileSync(publicKeyPath, 'utf8');\nconst privateKeyPath = path.join(__dirname, 'key');\nconst privateKey = fs.readFileSync(privateKeyPath, 'utf8');\n\napp.use(express.json());\n\n// Endpoint to generate a JWT token with admin: False\napp.get('/generateToken', async (req, res) =&gt; {\n  const payload = { admin: false, name: req.query.name };\n\n  const signSync = createSigner({ algorithm: 'RS256', key: privateKey });\n  const token = signSync(payload);\n  \n  res.json({ token });\n});\n\n// Middleware to verify the JWT token\nfunction verifyToken(req, res, next) {\n  const token = req.query.token;\n\n  const verifySync = createVerifier({ key: publicKey });\n  const payload = verifySync(token);\n\n  req.decoded = payload;\n  next();\n}\n\n// Endpoint to check if you are the admin or not\napp.get('/checkAdmin', verifyToken, (req, res) =&gt; {\n  res.json(req.decoded);\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<p>Assume the server generated their keys like follows:</p>\n<pre><code>ssh-keygen -t rsa -b 2048 -m PEM\nssh-keygen -f key.pub -e -m PEM &gt; public_key.pem\n</code></pre>\n<p><strong>Public key recovery</strong>\nFirst, an attacker needs to recover the public key from the server in any way possible. It is possible to extract this from just two JWT tokens as shown below.\nGrab two different JWT tokens and utilize the following tool: <code>https://github.com/silentsignal/rsa_sign2n/blob/release/standalone/jwt_forgery.py</code></p>\n<pre><code>python3 jwt_forgery.py token1 token2\n</code></pre>\n<p>The tool will generate 4 different public keys, all in different formats. Try the following for all 4 formats.</p>\n<p><strong>Algorithm confusion</strong>\nChange the JWT to the HS256 algorithm and modify any of the contents to your liking at <code>https://jwt.io/</code>.\nCopy the resulting JWT token and use with the following tool: <code>https://github.com/ticarpi/jwt_tool</code></p>\n<pre><code>python /opt/jwt_tool/jwt_tool.py --exploit k -pk public_key token\n</code></pre>\n<p>You will now get a resulting JWT token that is validly signed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications using the RS256 algorithm, a public key with a <code>BEGIN RSA PUBLIC KEY</code> header, and calling the verify function without explicitly providing an algorithm, are vulnerable to this algorithm confusion attack which allows attackers to sign arbitrary payloads which will be accepted by the verifier.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Change <a href=\"https://github.com/nearform/fast-jwt/blob/master/src/crypto.js#L29\">https://github.com/nearform/fast-jwt/blob/master/src/crypto.js#L29</a></p>\n<pre><code class=\"language-javascript\">const publicKeyPemMatcher = '-----BEGIN PUBLIC KEY-----'\n</code></pre>\n<p>to be regex: </p>\n<pre><code class=\"language-javascript\">const publicKeyPemMatcher = /^-----BEGIN( RSA)? PUBLIC KEY-----/\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nearform/fast-jwt/security/advisories/GHSA-c2ff-88x2-x9pg\">https://github.com/nearform/fast-jwt/security/advisories/GHSA-c2ff-88x2-x9pg</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48223\">https://nvd.nist.gov/vuln/detail/CVE-2023-48223</a></li>\n<li><a href=\"https://github.com/nearform/fast-jwt/commit/15a6e92c9adb39acde41a9b11cec0cbde8ad763b\">https://github.com/nearform/fast-jwt/commit/15a6e92c9adb39acde41a9b11cec0cbde8ad763b</a></li>\n<li><a href=\"https://github.com/nearform/fast-jwt/blob/master/src/crypto.js#L29\">https://github.com/nearform/fast-jwt/blob/master/src/crypto.js#L29</a></li>\n<li><a href=\"https://github.com/nearform/fast-jwt/releases/tag/v3.3.2\">https://github.com/nearform/fast-jwt/releases/tag/v3.3.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2ff-88x2-x9pg\">https://github.com/advisories/GHSA-c2ff-88x2-x9pg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2ff-88x2-x9pg",
            "title": "[fast-jwt] JWT Algorithm Confusion",
            "date_modified": "2023-11-20T20:58:56.000Z",
            "date_published": "2023-11-20T20:58:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2ff-88x2-x9pg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The json-web-token library is vulnerable to a JWT algorithm confusion attack.</p>\n<h3 id=\"details\">Details</h3>\n<p>On line 86 of the 'index.js' file, the algorithm to use for verifying the signature of the JWT token is taken from the JWT token, which at that point is still unverified and thus shouldn't be trusted. To exploit this vulnerability, an attacker needs to craft a malicious JWT token containing the HS256 algorithm, signed with the public RSA key of the victim application. This attack will only work against this library is the RS256 algorithm is in use, however it is a best practice to use that algorithm.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>Take a server running the following code:</p>\n<pre><code class=\"language-javascript\">const express = require('express');\nconst jwt = require('json-web-token');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst port = 3000;\n\n// Load the keys from the file\nconst publicKeyPath = path.join(__dirname, 'public-key.pem');\nconst publicKey = fs.readFileSync(publicKeyPath, 'utf8');\nconst privateKeyPath = path.join(__dirname, 'private-key.pem');\nconst privateKey = fs.readFileSync(privateKeyPath, 'utf8');\n\napp.use(express.json());\n\n// Endpoint to generate a JWT token with admin: False\napp.get('/generateToken', async (req, res) =&gt; {\n  const payload = { admin: false, name: req.query.name };\n  const token = await jwt.encode(privateKey, payload, 'RS256', function (err, token) {\n    res.json({ token });\n  });\n});\n\n// Middleware to verify the JWT token\nfunction verifyToken(req, res, next) {\n  const token = req.query.token;\n\n  jwt.decode(publicKey, token, (err, decoded) =&gt; {\n    if (err) {\n      console.log(err)\n      return res.status(401).json({ message: 'Token authentication failed' });\n    }\n\n    req.decoded = decoded;\n    next();\n  });\n}\n\n// Endpoint to check if you are the admin or not\napp.get('/checkAdmin', verifyToken, (req, res) =&gt; {\n  res.json(req.decoded);\n});\n\napp.listen(port, () =&gt; {\n  console.log(`Server is running on port ${port}`);\n});\n</code></pre>\n<p><strong>Public key recovery</strong>\nFirst, an attacker needs to recover the public key from the server in any way possible. It is possible to extract this from just two JWT tokens as shown below.\nGrab two different JWT tokens and utilize the following tool: <code>https://github.com/silentsignal/rsa_sign2n/blob/release/standalone/jwt_forgery.py</code></p>\n<pre><code>python3 jwt_forgery.py token1 token2\n</code></pre>\n<p>The tool will generate 4 different public keys, all in different formats. Try the following for all 4 formats.</p>\n<p><strong>Algorithm confusion</strong>\nChange the JWT to the HS256 algorithm and modify any of the contents to your liking at <code>https://jwt.io/</code>.\nCopy the resulting JWT token and use with the following tool: <code>https://github.com/ticarpi/jwt_tool</code>.</p>\n<pre><code>python /opt/jwt_tool/jwt_tool.py --exploit k -pk public_key token\n</code></pre>\n<p>You will now get a resulting JWT token that is validly signed.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Applications using the RS256 algorithm, are vulnerable to this algorithm confusion attack which allows attackers to sign arbitrary payloads that the verifier will accept.</p>\n<h3 id=\"solution\">Solution</h3>\n<p>Either one of the following solutions will work.</p>\n<ol>\n<li>Change the signature of the <code>decode</code> function to ensure that the algorithm is set in that call</li>\n<li>Check whether or not the secret could be a public key in the decode function and in that case, set the key to be a public key.</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joaquimserafim/json-web-token/security/advisories/GHSA-4xw9-cx39-r355\">https://github.com/joaquimserafim/json-web-token/security/advisories/GHSA-4xw9-cx39-r355</a></li>\n<li><a href=\"https://github.com/joaquimserafim/json-web-token/blob/acf6a462471e1b14187eb77414e9161b8b7bff7e/index.js#L86\">https://github.com/joaquimserafim/json-web-token/blob/acf6a462471e1b14187eb77414e9161b8b7bff7e/index.js#L86</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48238\">https://nvd.nist.gov/vuln/detail/CVE-2023-48238</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4xw9-cx39-r355\">https://github.com/advisories/GHSA-4xw9-cx39-r355</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4xw9-cx39-r355",
            "title": "[json-web-token] json-web-token library is vulnerable to a JWT algorithm confusion attack",
            "date_modified": "2023-11-20T22:06:44.000Z",
            "date_published": "2023-11-17T22:48:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4xw9-cx39-r355"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Currently, in many Vendure deployments it's possible to select any currencyCode (really any, doesn't need to be assigned to the channel) and pay through Mollie and Stripe in that particular currencyCode.\nThe prices are not transformed. The result is the Order is in Payment Settled in the foreign currency.\nSee SS, CZK is not in the channel.\nI've tested with Mollie and Stripe it both works.</p>\n<p><strong>Further notes</strong></p>\n<p>After looking into this further and with help from the comments below, the root cause of this vulnerability is the ability to specify an arbitrary <code>currencyCode</code> as a query parameter to an API call, and then Vendure will use this and pass it to the rest of the system as <code>RequestContext.currencyCode</code>.</p>\n<p>The solution is to add validation to the passed <code>currencyCode</code> to ensure that it matches one of the available <code>availableCurrencyCodes</code> of the active Channel.</p>\n<p>Furthermore, an additional check has been added for when the currencyCode changes during the AddingItems stage - in this case we need to re-calculate the prices in the new currency.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>v2.1.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You can define a custom OrderProcess <a href=\"https://docs.vendure.io/guides/core-concepts/orders/#intercepting-a-state-transition\">onTransitionStart function</a> which can verify the order's <code>currencyCode</code> is as expected before allowing the transition to the <code>ArrangingPayment</code> state.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-wm63-7627-ch33\">https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-wm63-7627-ch33</a></li>\n<li><a href=\"https://github.com/vendure-ecommerce/vendure/commit/5e506fd8ba9f7e20030c329e62af1140d906121f\">https://github.com/vendure-ecommerce/vendure/commit/5e506fd8ba9f7e20030c329e62af1140d906121f</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wm63-7627-ch33\">https://github.com/advisories/GHSA-wm63-7627-ch33</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wm63-7627-ch33",
            "title": "[@vendure/core] @vendure/core's insecure currencyCode handling allows wrong payment amounts",
            "date_modified": "2023-11-17T21:50:32.000Z",
            "date_published": "2023-11-17T21:50:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wm63-7627-ch33"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Cross-Site scripting vulnerability has been found in CKSource CKEditor affecting versions 4.15.1 and earlier. An attacker could send malicious javascript code through the /<code>ckeditor/samples/old/ajax.html</code> file and retrieve an authorized user's information.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-4771\">https://nvd.nist.gov/vuln/detail/CVE-2023-4771</a></li>\n<li><a href=\"https://www.incibe.es/en/incibe-cert/notices/aviso/cross-site-scripting-vulnerability-cksource-ckeditor\">https://www.incibe.es/en/incibe-cert/notices/aviso/cross-site-scripting-vulnerability-cksource-ckeditor</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxjc-9j8v-v9pr\">https://github.com/advisories/GHSA-hxjc-9j8v-v9pr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxjc-9j8v-v9pr",
            "title": "[ckeditor4] CKEditor Cross-site Scripting vulnerability",
            "date_modified": "2023-11-16T21:02:41.000Z",
            "date_published": "2023-11-16T15:30:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxjc-9j8v-v9pr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting (XSS) vulnerability in NASA Open MCT (aka openmct) through 3.1.0 allows attackers to run arbitrary code via the new component feature in the <code>flexibleLayout</code> plugin.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-45885\">https://nvd.nist.gov/vuln/detail/CVE-2023-45885</a></li>\n<li><a href=\"https://www.linkedin.com/pulse/xss-nasas-open-mct-v302-visionspace-technologies-ubg4f\">https://www.linkedin.com/pulse/xss-nasas-open-mct-v302-visionspace-technologies-ubg4f</a></li>\n<li><a href=\"https://github.com/nasa/openmct/pull/7148\">https://github.com/nasa/openmct/pull/7148</a></li>\n<li><a href=\"https://github.com/nasa/openmct/pull/7148/commits/4e95e12559c9c5364269ff366a59768573baacb4\">https://github.com/nasa/openmct/pull/7148/commits/4e95e12559c9c5364269ff366a59768573baacb4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8fc-qxvj-f3mg\">https://github.com/advisories/GHSA-v8fc-qxvj-f3mg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8fc-qxvj-f3mg",
            "title": "[openmct] NASA Open MCT Cross Site Scripting vulnerability",
            "date_modified": "2023-11-22T16:49:06.000Z",
            "date_published": "2023-11-09T18:34:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8fc-qxvj-f3mg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"overview\">Overview</h2>\n<p>sharp uses libwebp to decode WebP images and versions prior to the latest 0.32.6 are vulnerable to the high severity <a href=\"https://github.com/advisories/GHSA-j7hp-h8jx-5ppr\">https://github.com/advisories/GHSA-j7hp-h8jx-5ppr</a>.</p>\n<h2 id=\"who-does-this-affect\">Who does this affect?</h2>\n<p>Almost anyone processing untrusted input with versions of sharp prior to 0.32.6.</p>\n<h2 id=\"how-to-resolve-this\">How to resolve this?</h2>\n<h3 id=\"using-prebuilt-binaries-provided-by-sharp\">Using prebuilt binaries provided by sharp?</h3>\n<p>Most people rely on the prebuilt binaries provided by sharp.</p>\n<p>Please upgrade sharp to the latest 0.32.6, which provides libwebp 1.3.2.</p>\n<h3 id=\"using-a-globally-installed-libvips\">Using a globally-installed libvips?</h3>\n<p>Please ensure you are using the latest libwebp 1.3.2.</p>\n<h2 id=\"possible-workaround\">Possible workaround</h2>\n<p>Add the following to your code to prevent sharp from decoding WebP images.</p>\n<pre><code class=\"language-js\">sharp.block({ operation: [\"VipsForeignLoadWebp\"] });\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lovell/sharp/security/advisories/GHSA-54xq-cgqr-rpm3\">https://github.com/lovell/sharp/security/advisories/GHSA-54xq-cgqr-rpm3</a></li>\n<li><a href=\"https://github.com/lovell/sharp/commit/dbce6fab795ca4250bda9b1ef502c1fdb7d4a30c\">https://github.com/lovell/sharp/commit/dbce6fab795ca4250bda9b1ef502c1fdb7d4a30c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-54xq-cgqr-rpm3\">https://github.com/advisories/GHSA-54xq-cgqr-rpm3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-54xq-cgqr-rpm3",
            "title": "[sharp] sharp vulnerability in libwebp dependency CVE-2023-4863",
            "date_modified": "2023-11-16T17:14:17.000Z",
            "date_published": "2023-11-16T17:14:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-54xq-cgqr-rpm3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>DOMPurify before 1.0.11 allows reverse tabnabbing in demos/hooks-target-blank-demo.html because links lack a 'rel=\"noopener noreferrer\"' attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-25155\">https://nvd.nist.gov/vuln/detail/CVE-2019-25155</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify/compare/1.0.10...1.0.11\">https://github.com/cure53/DOMPurify/compare/1.0.10...1.0.11</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify/pull/337\">https://github.com/cure53/DOMPurify/pull/337</a></li>\n<li><a href=\"https://github.com/cure53/DOMPurify/commit/7601c33a57e029cce51d910eda5179a3f1b51c83\">https://github.com/cure53/DOMPurify/commit/7601c33a57e029cce51d910eda5179a3f1b51c83</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8hgg-xxm5-3873\">https://github.com/advisories/GHSA-8hgg-xxm5-3873</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8hgg-xxm5-3873",
            "title": "[dompurify] DOMPurify Open Redirect vulnerability",
            "date_modified": "2023-11-15T20:11:06.000Z",
            "date_published": "2023-11-14T21:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8hgg-xxm5-3873"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://researchgate.net/publication/266654651_mXSS_attacks_Attacking_well-secured_web-applications_by_using_innerHTML_mutations\">mutation cross-site scripting</a> (mXSS) vulnerability was discovered in TinyMCE’s core undo/redo functionality and other APIs and plugins. Text nodes within specific parents are not escaped upon serialization according to the <a href=\"https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments\">HTML standard</a>. If such text nodes contain a special character reserved as an internal marker, they can be combined with other HTML patterns to form malicious snippets. These snippets pass the initial sanitisation layer when the content is parsed into the editor body, but can trigger XSS when the special internal marker is removed from the content and re-parsed. Such mutations occur when serialised HTML content is processed before being stored in the undo stack, or when the following APIs and plugins are used:</p>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#getContent\"><code>tinymce.Editor.getContent({ format: 'raw' })</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#resetContent\"><code>tinymce.Editor.resetContent()</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/autosave/\">Autosave Plugin</a></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 6.7.3 by:</p>\n<ul>\n<li>ensuring that any unescaped text nodes which contain the special internal marker are emptied before removing the marker from the rest of the HTML, and</li>\n<li>removing the special internal marker from content strings passed to <code>Editor.setContent</code>, <code>Editor.insertContent</code>, and <code>Editor.resetContent</code> APIs to prevent them from being loaded into the editor as user-provided content.</li>\n</ul>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 6.7.3 or higher for TinyMCE 6.x.</li>\n<li>Upgrade to TinyMCE 5.10.9 or higher for TinyMCE 5.x.</li>\n</ul>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Tiny Technologies would like to thank Masato Kinugawa of <a href=\"https://cure53.de/\">Cure53</a> for discovering this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5109/\">TinyMCE 5.10.9 Release Notes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/\">TinyMCE 6.7.3 Release Notes</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a>\nOpen an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-v626-r774-j7f8\">https://github.com/tinymce/tinymce/security/advisories/GHSA-v626-r774-j7f8</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/releases/tag/5.10.9\">https://github.com/tinymce/tinymce/releases/tag/5.10.9</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/releases/tag/6.7.3\">https://github.com/tinymce/tinymce/releases/tag/6.7.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48219\">https://nvd.nist.gov/vuln/detail/CVE-2023-48219</a></li>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5109/\">https://tiny.cloud/docs/release-notes/release-notes5109/</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/\">https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v626-r774-j7f8\">https://github.com/advisories/GHSA-v626-r774-j7f8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v626-r774-j7f8",
            "title": "[tinymce] TinyMCE vulnerable to mutation Cross-site Scripting via special characters in unescaped text nodes",
            "date_modified": "2023-11-15T23:26:02.000Z",
            "date_published": "2023-11-15T18:32:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v626-r774-j7f8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://researchgate.net/publication/266654651_mXSS_attacks_Attacking_well-secured_web-applications_by_using_innerHTML_mutations\">mutation cross-site scripting</a> (mXSS) vulnerability was discovered in TinyMCE’s core undo/redo functionality and other APIs and plugins. Text nodes within specific parents are not escaped upon serialization according to the <a href=\"https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments\">HTML standard</a>. If such text nodes contain a special character reserved as an internal marker, they can be combined with other HTML patterns to form malicious snippets. These snippets pass the initial sanitisation layer when the content is parsed into the editor body, but can trigger XSS when the special internal marker is removed from the content and re-parsed. Such mutations occur when serialised HTML content is processed before being stored in the undo stack, or when the following APIs and plugins are used:</p>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#getContent\"><code>tinymce.Editor.getContent({ format: 'raw' })</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#resetContent\"><code>tinymce.Editor.resetContent()</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/autosave/\">Autosave Plugin</a></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 6.7.3 by:</p>\n<ul>\n<li>ensuring that any unescaped text nodes which contain the special internal marker are emptied before removing the marker from the rest of the HTML, and</li>\n<li>removing the special internal marker from content strings passed to <code>Editor.setContent</code>, <code>Editor.insertContent</code>, and <code>Editor.resetContent</code> APIs to prevent them from being loaded into the editor as user-provided content.</li>\n</ul>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 6.7.3 or higher for TinyMCE 6.x.</li>\n<li>Upgrade to TinyMCE 5.10.9 or higher for TinyMCE 5.x.</li>\n</ul>\n<h3 id=\"acknowledgements\">Acknowledgements</h3>\n<p>Tiny Technologies would like to thank Masato Kinugawa of <a href=\"https://cure53.de/\">Cure53</a> for discovering this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5109/\">TinyMCE 5.10.9 Release Notes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/\">TinyMCE 6.7.3 Release Notes</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a>\nOpen an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-v626-r774-j7f8\">https://github.com/tinymce/tinymce/security/advisories/GHSA-v626-r774-j7f8</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/releases/tag/5.10.9\">https://github.com/tinymce/tinymce/releases/tag/5.10.9</a></li>\n<li><a href=\"https://github.com/tinymce/tinymce/releases/tag/6.7.3\">https://github.com/tinymce/tinymce/releases/tag/6.7.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48219\">https://nvd.nist.gov/vuln/detail/CVE-2023-48219</a></li>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5109/\">https://tiny.cloud/docs/release-notes/release-notes5109/</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/\">https://tiny.cloud/docs/tinymce/6/6.7.3-release-notes/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v626-r774-j7f8\">https://github.com/advisories/GHSA-v626-r774-j7f8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v626-r774-j7f8",
            "title": "[tinymce] TinyMCE vulnerable to mutation Cross-site Scripting via special characters in unescaped text nodes",
            "date_modified": "2023-11-15T23:26:02.000Z",
            "date_published": "2023-11-15T18:32:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v626-r774-j7f8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of <code>summit</code> allow attackers to execute arbitrary commands via collection names when using the <code>PouchDB</code> driver.</p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>No direct patch is available at this time.</p>\n<p>Currently, the best option to mitigate the issue is to avoid using the <code>PouchDB</code> driver, as the package author has abandoned this feature entirely.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/notduncansmith/summit/issues/23\">https://github.com/notduncansmith/summit/issues/23</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-16020\">https://nvd.nist.gov/vuln/detail/CVE-2017-16020</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cwcp-6c48-fm7m\">https://github.com/advisories/GHSA-cwcp-6c48-fm7m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cwcp-6c48-fm7m",
            "title": "[summit] Unsafe eval() in summit allows arbitrary code execution",
            "date_modified": "2023-11-14T21:08:19.000Z",
            "date_published": "2020-09-01T16:39:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cwcp-6c48-fm7m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting vulnerability in BootBox Bootbox.js v.3.2 through 6.0 allows a remote attacker to execute arbitrary code via a crafted payload to alert(), confirm(), prompt() functions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-46998\">https://nvd.nist.gov/vuln/detail/CVE-2023-46998</a></li>\n<li><a href=\"https://github.com/bootboxjs/bootbox/issues/661\">https://github.com/bootboxjs/bootbox/issues/661</a></li>\n<li><a href=\"https://github.com/soy-oreocato/CVE-2023-46998/\">https://github.com/soy-oreocato/CVE-2023-46998/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4ch-4m5f-2gp6\">https://github.com/advisories/GHSA-m4ch-4m5f-2gp6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4ch-4m5f-2gp6",
            "title": "[bootbox] Bootbox.js Cross Site Scripting vulnerability",
            "date_modified": "2023-11-14T20:39:19.000Z",
            "date_published": "2023-11-14T18:30:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4ch-4m5f-2gp6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-44906\">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>\n<li><a href=\"https://github.com/substack/minimist/issues/164\">https://github.com/substack/minimist/issues/164</a></li>\n<li><a href=\"https://github.com/substack/minimist/blob/master/index.js#L69\">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-MINIMIST-559764\">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>\n<li><a href=\"https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068\">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>\n<li><a href=\"https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip\">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/issues/11\">https://github.com/minimistjs/minimist/issues/11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/pull/24\">https://github.com/minimistjs/minimist/pull/24</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703\">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb\">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11\">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>\n<li><a href=\"https://github.com/minimistjs/minimist/commits/v0.2.4\">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xvch-5gv4-984h\">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h",
            "title": "[minimist] Prototype Pollution in minimist",
            "date_modified": "2023-11-13T22:17:54.000Z",
            "date_published": "2022-03-18T00:01:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvch-5gv4-984h"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}