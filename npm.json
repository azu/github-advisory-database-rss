{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>apiconnect-cli-plugins through 6.0.1 is vulnerable to Command Injection. It allows execution of arbitrary commands via the <code>pluginUri</code> argument.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code class=\"language-js\">var root = require(\"apiconnect-cli-plugins\");\nvar payload = \"&amp; touch Song &amp;\";\nroot.pluginLoader.installPlugin(payload, \"\");\n</code></pre>\n<p>The injection point is located in line 181 of file <code>lib/plugin-loader.js</code>, in the function <code>installPlugin(pluginUri, registryUri)</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7633\">https://nvd.nist.gov/vuln/detail/CVE-2020-7633</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-APICONNECTCLIPLUGINS-564427\">https://snyk.io/vuln/SNYK-JS-APICONNECTCLIPLUGINS-564427</a></li>\n<li><a href=\"https://web.archive.org/web/20211209115530/https://openbase.com/js/apiconnect-cli-plugins\">https://web.archive.org/web/20211209115530/https://openbase.com/js/apiconnect-cli-plugins</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c9m9-48pw-6mpv\">https://github.com/advisories/GHSA-c9m9-48pw-6mpv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c9m9-48pw-6mpv",
            "title": "[apiconnect-cli-plugins] apiconnect-cli-plugins vulnerable to OS Command Injection",
            "date_modified": "2023-10-19T18:57:47.000Z",
            "date_published": "2021-05-24T22:18:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c9m9-48pw-6mpv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>PhantomJS through 2.1.1 has an arbitrary file read vulnerability, as demonstrated by an XMLHttpRequest for a <code>file://</code> URI. The vulnerability exists in the <code>page.open()</code> function of the webpage module, which loads a specified URL and calls a given callback. An attacker can supply a specially crafted HTML file, as user input, that allows reading arbitrary files on the filesystem. For example, if <code>page.render()</code> is the function callback, this generates a PDF or an image of the targeted file. <strong>NOTE</strong>: this product is no longer developed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-17221\">https://nvd.nist.gov/vuln/detail/CVE-2019-17221</a></li>\n<li><a href=\"https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/\">https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x43g-gj9x-838x\">https://github.com/advisories/GHSA-x43g-gj9x-838x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x43g-gj9x-838x",
            "title": "[phantomjs] PhantomJS Arbitrary File Read",
            "date_modified": "2023-10-19T18:55:55.000Z",
            "date_published": "2022-05-24T22:01:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x43g-gj9x-838x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>mxGraph through 4.0.0, related to the <a href=\"https://github.com/jgraph/drawio\">draw.io Diagrams</a> plugin before 8.3.14 for Confluence and other products, is vulnerable to cross-site scripting. draw.io Diagrams allows the creation and editing of draw.io-based diagrams in Confluence. Among other things, it allows to set the background color of text displayed in the diagram. The color provided by the user is notproperly sanitized, leading to HTML and JavaScript code to be displayed \"as it is\" to visitors of the page. This allows attackers to execute JavaScript code in the context of the visitor's browser and session and to e.g. run Confluence command under the visitor's user or attack the visitor's browser.</p>\n<p><strong>Proof of Concept (PoC):</strong></p>\n<ol>\n<li>Create a new draw.io Diagram, add an element and edit its background color and enter some text to the element</li>\n<li>Enter the following \"color\": <code>onMouseOver=alert(1) a=</code></li>\n<li>Save and view the resulting diagram, moving your mouse over the text</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-13127\">https://nvd.nist.gov/vuln/detail/CVE-2019-13127</a></li>\n<li><a href=\"https://github.com/jgraph/mxgraph/commit/76e8e2809b622659a9c5ffdc4f19922b7a68cfa3\">https://github.com/jgraph/mxgraph/commit/76e8e2809b622659a9c5ffdc4f19922b7a68cfa3</a></li>\n<li><a href=\"https://marketplace.atlassian.com/apps/1210933/draw-io-diagrams-for-confluence/version-history\">https://marketplace.atlassian.com/apps/1210933/draw-io-diagrams-for-confluence/version-history</a></li>\n<li><a href=\"https://www.syss.de/fileadmin/dokumente/Publikationen/Advisories/SYSS-2019-032.txt\">https://www.syss.de/fileadmin/dokumente/Publikationen/Advisories/SYSS-2019-032.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xm59-jvxm-cp3v\">https://github.com/advisories/GHSA-xm59-jvxm-cp3v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xm59-jvxm-cp3v",
            "title": "[mxgraph] mxGraph vulnerable to cross-site scripting in color field",
            "date_modified": "2023-10-19T18:54:38.000Z",
            "date_published": "2022-05-24T16:49:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xm59-jvxm-cp3v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Enhanced Image (aka <a href=\"https://github.com/ckeditor/ckeditor4/tree/master/plugins/image2\">image2</a>) plugin for CKEditor in versions 4.5.10 through 4.9.1; fixed in 4.9.2, and as used in Drupal 8 before 8.4.7 and 8.5.x before 8.5.2 and other products, is vulnerable to cross-site scripting because it allows remote attackers to inject arbitrary web script through a crafted IMG element.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-9861\">https://nvd.nist.gov/vuln/detail/CVE-2018-9861</a></li>\n<li><a href=\"https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md\">https://github.com/ckeditor/ckeditor-dev/blob/master/CHANGES.md</a></li>\n<li><a href=\"https://www.drupal.org/sa-core-2018-003\">https://www.drupal.org/sa-core-2018-003</a></li>\n<li><a href=\"https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html\">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>\n<li><a href=\"http://www.securityfocus.com/bid/103924\">http://www.securityfocus.com/bid/103924</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g78h-pf65-46rv\">https://github.com/advisories/GHSA-g78h-pf65-46rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g78h-pf65-46rv",
            "title": "[ckeditor-dev] Enhanced Image plugin for CKEditor is vulnerable to Cross-site scripting (XSS)",
            "date_modified": "2023-10-19T18:50:45.000Z",
            "date_published": "2022-05-14T00:56:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g78h-pf65-46rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pg-native before 3.0.1 and libpq before 1.8.10 are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25852\">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366\">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365\">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>\n<li><a href=\"https://github.com/brianc/node-libpq/issues/84\">https://github.com/brianc/node-libpq/issues/84</a></li>\n<li><a href=\"https://github.com/brianc/node-libpq/pull/86\">https://github.com/brianc/node-libpq/pull/86</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j32j-2hxv-rqf7\">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7",
            "title": "[pg-native] pg-native and libpq vulnerable to uncontrolled resource consumption",
            "date_modified": "2023-10-19T18:45:44.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pg-native before 3.0.1 and libpq before 1.8.10 are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25852\">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366\">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365\">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>\n<li><a href=\"https://github.com/brianc/node-libpq/issues/84\">https://github.com/brianc/node-libpq/issues/84</a></li>\n<li><a href=\"https://github.com/brianc/node-libpq/pull/86\">https://github.com/brianc/node-libpq/pull/86</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j32j-2hxv-rqf7\">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7",
            "title": "[libpq] pg-native and libpq vulnerable to uncontrolled resource consumption",
            "date_modified": "2023-10-19T18:45:44.000Z",
            "date_published": "2022-06-18T00:00:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j32j-2hxv-rqf7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A Code Injection exists in tree-kill on Windows which allows a remote code execution when an attacker is able to control the input into the command, which is executed without any check. The issue arises here: <a href=\"https://github.com/pkrumins/node-tree-kill/blob/master/index.js#L20\">https://github.com/pkrumins/node-tree-kill/blob/master/index.js#L20</a> . While the Linux part is sanitized, the Windows on simply uses the <code>+</code> operand to concatenate the input into <code>exec()</code></p>\n<h3 id=\"steps-to-reproduce\">Steps To Reproduce:</h3>\n<p>Create the following PoC file:</p>\n<pre><code class=\"language-js\">// poc.js\nvar kill = require('tree-kill');\nkill('3333332 &amp; echo \"HACKED\" &gt; HACKED.txt &amp; ');\n</code></pre>\n<p>Execute the following commands in another terminal:</p>\n<pre><code class=\"language-bash\">npm i tree-kill # Install affected module\ndir # Check *HACKED.txt* doesn't exist\nnode poc.js #  Run the PoC\ndir # Now *HACKED.txt* exists :)\n</code></pre>\n<p>A new file called <code>HACKED.txt</code> will be created, containing the <code>HACKED</code> string.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-15599\">https://nvd.nist.gov/vuln/detail/CVE-2019-15599</a></li>\n<li><a href=\"https://hackerone.com/reports/701183\">https://hackerone.com/reports/701183</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mxq6-vrrr-ppmg\">https://github.com/advisories/GHSA-mxq6-vrrr-ppmg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mxq6-vrrr-ppmg",
            "title": "[tree-kill] tree-kill vulnerable to remote code execution",
            "date_modified": "2023-10-19T18:39:49.000Z",
            "date_published": "2022-05-24T17:04:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mxq6-vrrr-ppmg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>docsify versions 4.12.1 and earlier are vulnerable to cross-site scripting (XSS) because the search component does not appropriately encode Code Blocks and mishandles the <code>\"</code> character.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-30074\">https://nvd.nist.gov/vuln/detail/CVE-2021-30074</a></li>\n<li><a href=\"https://github.com/docsifyjs/docsify/issues/1549\">https://github.com/docsifyjs/docsify/issues/1549</a></li>\n<li><a href=\"https://github.com/docsifyjs/docsify/pull/1551\">https://github.com/docsifyjs/docsify/pull/1551</a></li>\n<li><a href=\"https://github.com/docsifyjs/docsify/commit/c24f7f6f0b87a87f6dd3755f69eb0969ebb029c9\">https://github.com/docsifyjs/docsify/commit/c24f7f6f0b87a87f6dd3755f69eb0969ebb029c9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5h7x-68wj-jhwc\">https://github.com/advisories/GHSA-5h7x-68wj-jhwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5h7x-68wj-jhwc",
            "title": "[docsify] Docsify vulnerable to cross-site scripting due to mishandled encoding",
            "date_modified": "2023-10-19T18:37:42.000Z",
            "date_published": "2022-05-24T17:46:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5h7x-68wj-jhwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Electron before 1.6.8 allows remote command execution because of a <code>nodeIntegration</code> bypass vulnerability. This also affects all applications that bundle Electron code equivalent to 1.6.8 or earlier. Bypassing the Same Origin Policy (SOP) is a precondition; however, recent Electron versions do not have strict SOP enforcement. Combining an SOP bypass with a privileged URL internally used by Electron, it was possible to execute native Node.js primitives in order to run OS commands on the user's host. Specifically, a <code>chrome-devtools://devtools/bundled/inspector.html</code> window could be used to eval a Node.js <code>child_process.execFile</code> API call.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-12581\">https://nvd.nist.gov/vuln/detail/CVE-2017-12581</a></li>\n<li><a href=\"https://blog.doyensec.com/2017/08/03/electron-framework-security.html\">https://blog.doyensec.com/2017/08/03/electron-framework-security.html</a></li>\n<li><a href=\"https://doyensec.com/resources/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security.pdf\">https://doyensec.com/resources/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security.pdf</a></li>\n<li><a href=\"https://github.com/electron/electron/commit/05b6d91bf4c1e0ee65eeef70cd5d1bd1df125644\">https://github.com/electron/electron/commit/05b6d91bf4c1e0ee65eeef70cd5d1bd1df125644</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7fv9-m79r-j9x8\">https://github.com/advisories/GHSA-7fv9-m79r-j9x8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7fv9-m79r-j9x8",
            "title": "[electron] Electron vulnerable to remote command execution",
            "date_modified": "2023-10-19T18:37:42.000Z",
            "date_published": "2022-05-17T02:14:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7fv9-m79r-j9x8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Xen Orchestra (with xo-web through 5.80.0 and xo-server through 5.84.0) mishandles authorization, as demonstrated by modified WebSocket <code>resourceSet.getAll</code> data is which the attacker changes the permission field from none to admin. The attacker gains access to data sets such as VMs, Backups, Audit, Users, and Groups.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-36383\">https://nvd.nist.gov/vuln/detail/CVE-2021-36383</a></li>\n<li><a href=\"https://github.com/vatesfr/xen-orchestra/issues/5712\">https://github.com/vatesfr/xen-orchestra/issues/5712</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-grvm-gcqf-gh8q\">https://github.com/advisories/GHSA-grvm-gcqf-gh8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-grvm-gcqf-gh8q",
            "title": "[xo-server] Xen Orchestra Mishandles Authorization",
            "date_modified": "2023-10-19T18:34:47.000Z",
            "date_published": "2022-05-24T19:07:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-grvm-gcqf-gh8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Xen Orchestra (with xo-web through 5.80.0 and xo-server through 5.84.0) mishandles authorization, as demonstrated by modified WebSocket <code>resourceSet.getAll</code> data is which the attacker changes the permission field from none to admin. The attacker gains access to data sets such as VMs, Backups, Audit, Users, and Groups.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-36383\">https://nvd.nist.gov/vuln/detail/CVE-2021-36383</a></li>\n<li><a href=\"https://github.com/vatesfr/xen-orchestra/issues/5712\">https://github.com/vatesfr/xen-orchestra/issues/5712</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-grvm-gcqf-gh8q\">https://github.com/advisories/GHSA-grvm-gcqf-gh8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-grvm-gcqf-gh8q",
            "title": "[xo-web] Xen Orchestra Mishandles Authorization",
            "date_modified": "2023-10-19T18:34:47.000Z",
            "date_published": "2022-05-24T19:07:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-grvm-gcqf-gh8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>clamscan through 1.2.0 is vulnerable to Command Injection. It is possible to inject arbitrary commands as part of the <code>_is_clamav_binary</code> function located within <code>Index.js</code>. It should be noted that this vulnerability requires a pre-requisite that a folder should be created with the same command that will be chained to execute. This lowers the risk of this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-7613\">https://nvd.nist.gov/vuln/detail/CVE-2020-7613</a></li>\n<li><a href=\"https://github.com/kylefarris/clamscan/blob/master/index.js#L34\">https://github.com/kylefarris/clamscan/blob/master/index.js#L34</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-CLAMSCAN-564113\">https://snyk.io/vuln/SNYK-JS-CLAMSCAN-564113</a></li>\n<li><a href=\"https://github.com/kylefarris/clamscan/pull/45\">https://github.com/kylefarris/clamscan/pull/45</a></li>\n<li><a href=\"https://github.com/kylefarris/clamscan/commit/5f557c970817fe8c578ec3f7ad3bcbcef4cf5538\">https://github.com/kylefarris/clamscan/commit/5f557c970817fe8c578ec3f7ad3bcbcef4cf5538</a></li>\n<li><a href=\"https://huntr.dev/bounties/1-npm-clamscan/\">https://huntr.dev/bounties/1-npm-clamscan/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5v25-xr56-phph\">https://github.com/advisories/GHSA-5v25-xr56-phph</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5v25-xr56-phph",
            "title": "[clamscan] Clamscan vulnerable to command injection",
            "date_modified": "2023-10-19T18:32:36.000Z",
            "date_published": "2022-05-24T17:13:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5v25-xr56-phph"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability in karma-runner grunt-karma 4.0.1 via the <code>key</code> variable in <code>grunt-karma.js</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-37602\">https://nvd.nist.gov/vuln/detail/CVE-2022-37602</a></li>\n<li><a href=\"https://github.com/karma-runner/grunt-karma/issues/311\">https://github.com/karma-runner/grunt-karma/issues/311</a></li>\n<li><a href=\"https://github.com/karma-runner/grunt-karma/blob/45b925964f55870f375c6e670d9945b223c984f5/tasks/grunt-karma.js#L109\">https://github.com/karma-runner/grunt-karma/blob/45b925964f55870f375c6e670d9945b223c984f5/tasks/grunt-karma.js#L109</a></li>\n<li><a href=\"https://github.com/karma-runner/grunt-karma/blob/45b925964f55870f375c6e670d9945b223c984f5/tasks/grunt-karma.js#L26\">https://github.com/karma-runner/grunt-karma/blob/45b925964f55870f375c6e670d9945b223c984f5/tasks/grunt-karma.js#L26</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hcj4-xf6x-63wj\">https://github.com/advisories/GHSA-hcj4-xf6x-63wj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hcj4-xf6x-63wj",
            "title": "[grunt-karma] Grunt-karma vulnerable to prototype pollution",
            "date_modified": "2023-10-19T18:30:56.000Z",
            "date_published": "2022-10-14T12:00:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hcj4-xf6x-63wj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Obsidian Dataview through 0.4.12-hotfix1 allows eval injection. The <code>evalInContext</code> function in executes user input, which allows an attacker to craft malicious Markdown files that will execute arbitrary code once opened. NOTE: 0.4.13 provides a mitigation for some use cases.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-42057\">https://nvd.nist.gov/vuln/detail/CVE-2021-42057</a></li>\n<li><a href=\"https://github.com/blacksmithgu/obsidian-dataview/issues/615\">https://github.com/blacksmithgu/obsidian-dataview/issues/615</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfg5-vrmc-24wc\">https://github.com/advisories/GHSA-xfg5-vrmc-24wc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfg5-vrmc-24wc",
            "title": "[obsidian-dataview] Obsidian Dataview vulnerable to code injection due to unsafe eval",
            "date_modified": "2023-10-19T18:29:49.000Z",
            "date_published": "2022-05-24T19:19:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfg5-vrmc-24wc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>Prototype pollution vulnerability in 'changeset' versions 0.0.1 through 0.2.5 allows attackers to cause a denial of service and may lead to remote code execution.</p>\n<h3 id=\"details\">Details</h3>\n<p>The npm module 'changeset' can be abused by Prototype Pollution vulnerability since the function 'apply()' does not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.</p>\n<h3 id=\"poc-details\">PoC Details</h3>\n<p>The 'apply()' function accepts 'changes, target, modify' as argument. Due to the absence of validation on the values passed into the 'changes' argument, an attacker can supply a malicious value by adjusting the value to include the '<strong>proto</strong>' property. Since there is no validation before assigning the property to check whether the assigned argument is the Object's own property or not, the property 'polluted' will be directly be assigned to the new object thereby polluting the Object prototype. Using the example below, if there is a check to validate 'polluted' the valued later in the code, it would be substituted as \"Yes! Its Polluted\" as it had been polluted.</p>\n<h3 id=\"poc-code\">PoC Code</h3>\n<pre><code class=\"language-js\">var changeset = require(\"changeset\") const patch = [{\n    type: 'put',\n    key: [\"__proto__\", \"polluted\"],\n    value: \"Yes! Its Polluted\"\n}];\nconsole.log(\"Before : \" + {}.polluted);\nchangeset.apply(patch, {}, true);\nconsole.log(\"After : \" + {}.polluted);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-25915\">https://nvd.nist.gov/vuln/detail/CVE-2021-25915</a></li>\n<li><a href=\"https://github.com/eugeneware/changeset/commit/9e588844edbb9993b32e7366cc799262b4447f99\">https://github.com/eugeneware/changeset/commit/9e588844edbb9993b32e7366cc799262b4447f99</a></li>\n<li><a href=\"https://web.archive.org/web/20210323102946/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25915\">https://web.archive.org/web/20210323102946/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25915</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2gqw-q9r9-7f79\">https://github.com/advisories/GHSA-2gqw-q9r9-7f79</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2gqw-q9r9-7f79",
            "title": "[changeset] Changeset vulnerable to prototype pollution",
            "date_modified": "2023-10-19T18:27:41.000Z",
            "date_published": "2022-05-24T17:44:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2gqw-q9r9-7f79"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>Prototype pollution vulnerability in 'keyget' versions 1.0.0 through 2.2.0 allows attacker to cause a denial of service and may lead to remote code execution.</p>\n<h3 id=\"details\">Details</h3>\n<p>The npm module 'keyget' can be abused by Prototype Pollution vulnerability since the function 'setByPath()' did not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.</p>\n<h3 id=\"poc-details\">PoC Details</h3>\n<p>The <code>setByPath()</code> function accepts three arguments <code>target, path, value</code>. Due to the absence of validation, at values passed into <code>path, value</code> an attacker can supply a malicious value by adjusting the <code>path</code> value to include the <code>__proto__</code> property. Since there is no validation before assigning property to check whether the assigned <code>path</code> is the Object's own property or not, the property <code>polluted</code> will be directly be assigned to the empty obj({}) thereby polluting the Object prototype. Later in the code, if there is a check to validate <code>polluted</code> the value would be substituted as \"true\" as it had been polluted.</p>\n<h3 id=\"poc-code\">PoC Code</h3>\n<pre><code class=\"language-js\">var keyget = require(\"keyget\")\n keyget.set({}, '__proto__.polluted', 'true');\n console.log(polluted); \n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28272\">https://nvd.nist.gov/vuln/detail/CVE-2020-28272</a></li>\n<li><a href=\"https://github.com/rumkin/keyget/commit/17d15b6c75036eb429075a8cfeccfc18094dd2e2\">https://github.com/rumkin/keyget/commit/17d15b6c75036eb429075a8cfeccfc18094dd2e2</a></li>\n<li><a href=\"https://web.archive.org/web/20201207183211/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28272\">https://web.archive.org/web/20201207183211/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28272</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8mp8-28xh-r486\">https://github.com/advisories/GHSA-8mp8-28xh-r486</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8mp8-28xh-r486",
            "title": "[keyget] keyget vulnerable to prototype pollution",
            "date_modified": "2023-10-19T18:24:50.000Z",
            "date_published": "2022-05-24T17:35:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8mp8-28xh-r486"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Auth0 angular-jwt before 0.1.10 treats whiteListedDomains entries as regular expressions, which allows remote attackers with knowledge of the <code>jwtInterceptorProvider.whiteListedDomains</code> setting to bypass the domain allowlist filter via a crafted domain.</p>\n<p> For example, if the setting is initialized with:</p>\n<p><code>jwtInterceptorProvider.whiteListedDomains = ['whitelisted.Example.com'];</code></p>\n<p>An attacker can set up a domain <code>whitelistedXexample.com</code> that will pass the allow list filter, as it considers the <code>.</code> separator to be a regex whildcard which matches any character.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-11537\">https://nvd.nist.gov/vuln/detail/CVE-2018-11537</a></li>\n<li><a href=\"https://auth0.com/docs/security/bulletins/cve-2018-11537\">https://auth0.com/docs/security/bulletins/cve-2018-11537</a></li>\n<li><a href=\"https://github.com/auth0/angular-jwt/pull/174\">https://github.com/auth0/angular-jwt/pull/174</a></li>\n<li><a href=\"https://github.com/auth0/angular-jwt/commit/a4f03b49c3fb47cc6375c2a33b5ac11ca3c606f0\">https://github.com/auth0/angular-jwt/commit/a4f03b49c3fb47cc6375c2a33b5ac11ca3c606f0</a></li>\n<li><a href=\"https://github.com/auth0/angular-jwt/commit/e368cf124443507f1710f60ae855c4c54eebc6ea\">https://github.com/auth0/angular-jwt/commit/e368cf124443507f1710f60ae855c4c54eebc6ea</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vm2p-f5j4-mj6g\">https://github.com/advisories/GHSA-vm2p-f5j4-mj6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vm2p-f5j4-mj6g",
            "title": "[angular-jwt] Auth0 angular-jwt misinterprets allowlist as regex",
            "date_modified": "2023-10-19T18:21:28.000Z",
            "date_published": "2022-05-14T03:05:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vm2p-f5j4-mj6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s Notification Manager API. The vulnerability exploits TinyMCE's unfiltered notification system, which is used in error handling.  The conditions for this exploit requires carefully crafted malicious content to have been inserted into the editor and a notification to have been triggered.  </p>\n<p>When a notification was opened, the HTML within the text argument was displayed unfiltered in the notification. The vulnerability allowed arbitrary JavaScript execution when an notification presented in the TinyMCE UI for the current user.  This issue could also be exploited by any integration which uses a TinyMCE notification to display unfiltered HTML content.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 5.10.8 and TinyMCE 6.7.1 by ensuring that the HTML displayed in the notification is sanitized, preventing the exploit.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 5.10.8 or higher for TinyMCE 5.x.</li>\n<li>Upgrade to TinyMCE 6.7.1 or higher for TinyMCE 6.x.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a></li>\n<li>Open an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-hgqx-r2hp-jr38\">https://github.com/tinymce/tinymce/security/advisories/GHSA-hgqx-r2hp-jr38</a></li>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hgqx-r2hp-jr38\">https://github.com/advisories/GHSA-hgqx-r2hp-jr38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hgqx-r2hp-jr38",
            "title": "[tinymce] TinyMCE XSS vulnerability in notificationManager.open API",
            "date_modified": "2023-10-19T16:42:59.000Z",
            "date_published": "2023-10-19T16:42:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hgqx-r2hp-jr38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s Notification Manager API. The vulnerability exploits TinyMCE's unfiltered notification system, which is used in error handling.  The conditions for this exploit requires carefully crafted malicious content to have been inserted into the editor and a notification to have been triggered.  </p>\n<p>When a notification was opened, the HTML within the text argument was displayed unfiltered in the notification. The vulnerability allowed arbitrary JavaScript execution when an notification presented in the TinyMCE UI for the current user.  This issue could also be exploited by any integration which uses a TinyMCE notification to display unfiltered HTML content.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 5.10.8 and TinyMCE 6.7.1 by ensuring that the HTML displayed in the notification is sanitized, preventing the exploit.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 5.10.8 or higher for TinyMCE 5.x.</li>\n<li>Upgrade to TinyMCE 6.7.1 or higher for TinyMCE 6.x.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a></li>\n<li>Open an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-hgqx-r2hp-jr38\">https://github.com/tinymce/tinymce/security/advisories/GHSA-hgqx-r2hp-jr38</a></li>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hgqx-r2hp-jr38\">https://github.com/advisories/GHSA-hgqx-r2hp-jr38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hgqx-r2hp-jr38",
            "title": "[tinymce] TinyMCE XSS vulnerability in notificationManager.open API",
            "date_modified": "2023-10-19T16:42:59.000Z",
            "date_published": "2023-10-19T16:42:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hgqx-r2hp-jr38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A <a href=\"https://researchgate.net/publication/266654651_mXSS_attacks_Attacking_well-secured_web-applications_by_using_innerHTML_mutations\">mutation cross-site scripting</a> (mXSS) vulnerability was discovered in TinyMCE’s core undo and redo functionality. When a carefully-crafted HTML snippet passes the XSS sanitisation layer, it is manipulated as a string by internal trimming functions before being stored in the undo stack. If the HTML snippet is restored from the undo stack, the combination of the string manipulation and reparative parsing by either the browser's native <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMParser\">DOMParser API</a> (TinyMCE 6) or the <a href=\"https://www.tiny.cloud/docs/api/tinymce.html/tinymce.html.saxparser/\">SaxParser API</a> (TinyMCE 5) mutates the HTML maliciously, allowing an XSS payload to be executed.\n​This vulnerability also impacts these related TinyMCE APIs and plugins:​</p>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#getContent\"><code>tinymce.Editor.getContent({ format: 'raw' })</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/apis/tinymce.editor/#resetContent\"><code>tinymce.Editor.resetContent()</code></a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/autosave/\">Austosave Plugin</a></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in TinyMCE 5.10.8 and TinyMCE 6.7.1 by ensuring HTML is trimmed using node-level manipulation instead of string manipulation.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>To avoid this vulnerability:</p>\n<ul>\n<li>Upgrade to TinyMCE 5.10.8 or higher for TinyMCE 5.x.</li>\n<li>Upgrade to TinyMCE 6.7.1 or higher for TinyMCE 6.x.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:infosec@tiny.cloud\">infosec@tiny.cloud</a></li>\n<li>Open an issue in the <a href=\"https://github.com/tinymce/tinymce/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc\">TinyMCE repo</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tinymce/tinymce/security/advisories/GHSA-v65r-p3vv-jjfv\">https://github.com/tinymce/tinymce/security/advisories/GHSA-v65r-p3vv-jjfv</a></li>\n<li><a href=\"https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes\">https://tiny.cloud/docs/release-notes/release-notes5108/#securityfixes</a></li>\n<li><a href=\"https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes\">https://tiny.cloud/docs/tinymce/6/6.7.1-release-notes/#security-fixes</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v65r-p3vv-jjfv\">https://github.com/advisories/GHSA-v65r-p3vv-jjfv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v65r-p3vv-jjfv",
            "title": "[tinymce] TinyMCE mXSS vulnerability in undo/redo, getContent API, resetContent API, and Autosave plugin",
            "date_modified": "2023-10-19T16:36:31.000Z",
            "date_published": "2023-10-19T16:36:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v65r-p3vv-jjfv"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}