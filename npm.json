{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>hoek versions prior to 8.5.1, and 9.x prior to 9.0.3 are vulnerable to prototype pollution in the clone function. If an object with the <strong>proto</strong> key is passed to clone() the key is converted to a prototype. This issue has been patched in version 9.0.3, and backported to 8.5.1. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36604\">https://nvd.nist.gov/vuln/detail/CVE-2020-36604</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/issues/352\">https://github.com/hapijs/hoek/issues/352</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/commit/4d0804bc6135ad72afdc5e1ec002b935b2f5216a\">https://github.com/hapijs/hoek/commit/4d0804bc6135ad72afdc5e1ec002b935b2f5216a</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90\">https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c429-5p7v-vgjp\">https://github.com/advisories/GHSA-c429-5p7v-vgjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c429-5p7v-vgjp",
            "title": "[@hapi/hoek] hoek subject to prototype pollution via the clone function.",
            "date_modified": "2023-08-14T05:04:31.000Z",
            "date_published": "2022-09-25T00:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c429-5p7v-vgjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>hoek versions prior to 8.5.1, and 9.x prior to 9.0.3 are vulnerable to prototype pollution in the clone function. If an object with the <strong>proto</strong> key is passed to clone() the key is converted to a prototype. This issue has been patched in version 9.0.3, and backported to 8.5.1. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36604\">https://nvd.nist.gov/vuln/detail/CVE-2020-36604</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/issues/352\">https://github.com/hapijs/hoek/issues/352</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/commit/4d0804bc6135ad72afdc5e1ec002b935b2f5216a\">https://github.com/hapijs/hoek/commit/4d0804bc6135ad72afdc5e1ec002b935b2f5216a</a></li>\n<li><a href=\"https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90\">https://github.com/hapijs/hoek/commit/948baf98634a5c206875b67d11368f133034fa90</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c429-5p7v-vgjp\">https://github.com/advisories/GHSA-c429-5p7v-vgjp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c429-5p7v-vgjp",
            "title": "[@hapi/hoek] hoek subject to prototype pollution via the clone function.",
            "date_modified": "2023-08-14T05:04:31.000Z",
            "date_published": "2022-09-25T00:00:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c429-5p7v-vgjp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it?</em></p>\n<p>Denial of service.</p>\n<p>The regular expression <code>inline.reflinkSearch</code> may cause catastrophic backtracking against some strings.\nPoC is the following.</p>\n<pre><code class=\"language-javascript\">import * as marked from 'marked';\n\nconsole.log(marked.parse(`[x]: x\n\n\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](\\\\[\\\\](`));\n</code></pre>\n<p><em>Who is impacted?</em></p>\n<p>Anyone who runs untrusted markdown through marked and does not use a worker with a time limit.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched?</em></p>\n<p>Yes</p>\n<p><em>What versions should users upgrade to?</em></p>\n<p>4.0.10</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Do not run untrusted markdown through marked or run marked on a <a href=\"https://marked.js.org/using_advanced#workers\">worker</a> thread and set a reasonable time limit to prevent draining resources.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://marked.js.org/using_advanced#workers\">https://marked.js.org/using_advanced#workers</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/markedjs/marked\">marked</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/markedjs/marked/security/advisories/GHSA-5v2h-r2cx-5xgj\">https://github.com/markedjs/marked/security/advisories/GHSA-5v2h-r2cx-5xgj</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21681\">https://nvd.nist.gov/vuln/detail/CVE-2022-21681</a></li>\n<li><a href=\"https://github.com/markedjs/marked/commit/8f806573a3f6c6b7a39b8cdb66ab5ebb8d55a5f5\">https://github.com/markedjs/marked/commit/8f806573a3f6c6b7a39b8cdb66ab5ebb8d55a5f5</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5v2h-r2cx-5xgj\">https://github.com/advisories/GHSA-5v2h-r2cx-5xgj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5v2h-r2cx-5xgj",
            "title": "[marked] Inefficient Regular Expression Complexity in marked",
            "date_modified": "2023-08-14T05:04:30.000Z",
            "date_published": "2022-01-14T21:04:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5v2h-r2cx-5xgj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>If using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (<code>\\</code>) character as part of the scheme delimiter, e.g. <code>scheme:/\\hostname</code>. If the hostname is used in security decisions, the decision may be incorrect.</p>\n<p>Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.</p>\n<p>Example URL: <code>https:/\\expected-example.com/path</code>\nEscaped string: <code>https:/\\\\expected-example.com/path</code> (JavaScript strings must escape backslash)</p>\n<p>Affected versions incorrectly return no hostname. Patched versions correctly return <code>expected-example.com</code>. Patched versions match the behavior of other parsers which implement the <a href=\"https://url.spec.whatwg.org/\">WHATWG URL specification</a>, including web browsers and <a href=\"https://nodejs.org/api/url.html\">Node's built-in URL class</a>.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Version 1.19.6 is patched against all known payload variants.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/medialize/URI.js/releases/tag/v1.19.6\">https://github.com/medialize/URI.js/releases/tag/v1.19.6</a> (fix for this particular bypass)\n<a href=\"https://github.com/medialize/URI.js/releases/tag/v1.19.4\">https://github.com/medialize/URI.js/releases/tag/v1.19.4</a> (fix for related bypass)\n<a href=\"https://github.com/medialize/URI.js/releases/tag/v1.19.3\">https://github.com/medialize/URI.js/releases/tag/v1.19.3</a> (fix for related bypass)\n<a href=\"https://github.com/medialize/URI.js/pull/233\">PR #233</a> (initial fix for backslash handling)</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory, open an issue in <a href=\"https://github.com/medialize/URI.js\">https://github.com/medialize/URI.js</a></p>\n<h3 id=\"reporter-credit\">Reporter credit</h3>\n<p><a href=\"https://twitter.com/ynizry\">Yaniv Nizry</a> from the CxSCA AppSec team at Checkmarx</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/medialize/URI.js/security/advisories/GHSA-p6j9-7xhc-rhwp\">https://github.com/medialize/URI.js/security/advisories/GHSA-p6j9-7xhc-rhwp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-27516\">https://nvd.nist.gov/vuln/detail/CVE-2021-27516</a></li>\n<li><a href=\"https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839\">https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839</a></li>\n<li><a href=\"https://github.com/medialize/URI.js/releases/tag/v1.19.6\">https://github.com/medialize/URI.js/releases/tag/v1.19.6</a></li>\n<li><a href=\"https://advisory.checkmarx.net/advisory/CX-2021-4305\">https://advisory.checkmarx.net/advisory/CX-2021-4305</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p6j9-7xhc-rhwp\">https://github.com/advisories/GHSA-p6j9-7xhc-rhwp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p6j9-7xhc-rhwp",
            "title": "[urijs] Hostname spoofing via backslashes in URL",
            "date_modified": "2023-08-14T05:04:30.000Z",
            "date_published": "2021-03-01T20:03:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p6j9-7xhc-rhwp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in diff before v3.5.0, the affected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0\">https://github.com/kpdecker/jsdiff/commit/2aec4298639bf30fb88a00b356bf404d3551b8c0</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1552148\">https://bugzilla.redhat.com/show_bug.cgi?id=1552148</a></li>\n<li><a href=\"https://snyk.io/vuln/npm:diff:20180305\">https://snyk.io/vuln/npm:diff:20180305</a></li>\n<li><a href=\"https://www.npmjs.com/advisories/1631\">https://www.npmjs.com/advisories/1631</a></li>\n<li><a href=\"https://www.whitesourcesoftware.com/vulnerability-database/WS-2018-0590\">https://www.whitesourcesoftware.com/vulnerability-database/WS-2018-0590</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6ch-v84p-w6p9\">https://github.com/advisories/GHSA-h6ch-v84p-w6p9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6ch-v84p-w6p9",
            "title": "[diff] Regular Expression Denial of Service (ReDoS)",
            "date_modified": "2023-08-14T05:04:30.000Z",
            "date_published": "2019-06-13T18:58:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6ch-v84p-w6p9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>\\r, \\n and \\t characters in user-input URLs can potentially lead to incorrect protocol extraction when using npm package urijs prior to version 1.19.11.</p>\n<p>This can lead to XSS when the module is used to prevent passing in malicious javascript: links into HTML or Javascript (see following example):</p>\n<pre><code>const parse = require('urijs')\nconst express = require('express')\nconst app = express()\nconst port = 3000\n\ninput = \"ja\\r\\nvascript:alert(1)\"\nurl = parse(input)\n\nconsole.log(url)\n\napp.get('/', (req, res) =&gt; {\n if (url.protocol !== \"javascript:\") {res.send(\"&lt;iframe src=\\'\" + input + \"\\'&gt;CLICK ME!&lt;/iframe&gt;\")}\n})\n\napp.listen(port, () =&gt; {\n console.log(`Example app listening on port ${port}`)\n})\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1243\">https://nvd.nist.gov/vuln/detail/CVE-2022-1243</a></li>\n<li><a href=\"https://github.com/medialize/uri.js/commit/b0c9796aa1a95a85f40924fb18b1e5da3dc8ffae\">https://github.com/medialize/uri.js/commit/b0c9796aa1a95a85f40924fb18b1e5da3dc8ffae</a></li>\n<li><a href=\"https://huntr.dev/bounties/8c5afc47-1553-4eba-a98e-024e4cc3dfb7\">https://huntr.dev/bounties/8c5afc47-1553-4eba-a98e-024e4cc3dfb7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3vjf-82ff-p4r3\">https://github.com/advisories/GHSA-3vjf-82ff-p4r3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3vjf-82ff-p4r3",
            "title": "[urijs] Incorrect protocol extraction via \\r, \\n and \\t characters",
            "date_modified": "2023-08-14T05:04:16.000Z",
            "date_published": "2022-04-06T00:01:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3vjf-82ff-p4r3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prototype pollution vulnerability via <code>.parse()</code> in Plist allows attackers to cause a Denial of Service (DoS) and may lead to remote code execution.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-22912\">https://nvd.nist.gov/vuln/detail/CVE-2022-22912</a></li>\n<li><a href=\"https://github.com/TooTallNate/plist.js/issues/114\">https://github.com/TooTallNate/plist.js/issues/114</a></li>\n<li><a href=\"https://github.com/TooTallNate/plist.js/pull/118\">https://github.com/TooTallNate/plist.js/pull/118</a></li>\n<li><a href=\"https://github.com/TooTallNate/plist.js/commit/96e2303d059e6be0c9e0c4773226d14b4758de52\">https://github.com/TooTallNate/plist.js/commit/96e2303d059e6be0c9e0c4773226d14b4758de52</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4cpg-3vgw-4877\">https://github.com/advisories/GHSA-4cpg-3vgw-4877</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4cpg-3vgw-4877",
            "title": "[plist] Prototype pollution in Plist before 3.0.5 can cause denial of service",
            "date_modified": "2023-08-14T05:04:04.000Z",
            "date_published": "2022-02-18T00:00:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4cpg-3vgw-4877"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it?</em></p>\n<p>Denial of service.</p>\n<p>The regular expression <code>block.def</code> may cause catastrophic backtracking against some strings.\nPoC is the following.</p>\n<pre><code class=\"language-javascript\">import * as marked from \"marked\";\n\nmarked.parse(`[x]:${' '.repeat(1500)}x ${' '.repeat(1500)} x`);\n</code></pre>\n<p><em>Who is impacted?</em></p>\n<p>Anyone who runs untrusted markdown through marked and does not use a worker with a time limit.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched?</em></p>\n<p>Yes</p>\n<p><em>What versions should users upgrade to?</em></p>\n<p>4.0.10</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Do not run untrusted markdown through marked or run marked on a <a href=\"https://marked.js.org/using_advanced#workers\">worker</a> thread and set a reasonable time limit to prevent draining resources.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://marked.js.org/using_advanced#workers\">https://marked.js.org/using_advanced#workers</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/markedjs/marked\">marked</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/markedjs/marked/security/advisories/GHSA-rrrm-qjm4-v8hf\">https://github.com/markedjs/marked/security/advisories/GHSA-rrrm-qjm4-v8hf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-21680\">https://nvd.nist.gov/vuln/detail/CVE-2022-21680</a></li>\n<li><a href=\"https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0\">https://github.com/markedjs/marked/commit/c4a3ccd344b6929afa8a1d50ac54a721e57012c0</a></li>\n<li><a href=\"https://github.com/markedjs/marked/releases/tag/v4.0.10\">https://github.com/markedjs/marked/releases/tag/v4.0.10</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AIXDMC3CSHYW3YWVSQOXAWLUYQHAO5UX/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrrm-qjm4-v8hf\">https://github.com/advisories/GHSA-rrrm-qjm4-v8hf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrrm-qjm4-v8hf",
            "title": "[marked] Inefficient Regular Expression Complexity in marked",
            "date_modified": "2023-08-14T05:03:59.000Z",
            "date_published": "2022-01-14T21:04:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrrm-qjm4-v8hf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-3296\">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/04/10/10\">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>\n<li><a href=\"https://github.com/NodeBB/NodeBB/issues/2273\">https://github.com/NodeBB/NodeBB/issues/2273</a></li>\n<li><a href=\"https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3\">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3\">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>\n<li><a href=\"https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824\">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9g4f-5rpg-4948\">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948",
            "title": "[nodebb-plugin-markdown] NodeBB Cross-site Scripting Vulnerability in Markdown Processing",
            "date_modified": "2023-08-13T05:02:21.000Z",
            "date_published": "2022-05-17T00:47:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-3296\">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/04/10/10\">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>\n<li><a href=\"https://github.com/NodeBB/NodeBB/issues/2273\">https://github.com/NodeBB/NodeBB/issues/2273</a></li>\n<li><a href=\"https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3\">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3\">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>\n<li><a href=\"https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824\">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9g4f-5rpg-4948\">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948",
            "title": "[nodebb] NodeBB Cross-site Scripting Vulnerability in Markdown Processing",
            "date_modified": "2023-08-13T05:02:21.000Z",
            "date_published": "2022-05-17T00:47:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in StaticPool in SUCHMOKUO node-worker-threads-pool version 1.4.3 that allows attackers to cause a denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-29057\">https://nvd.nist.gov/vuln/detail/CVE-2021-29057</a></li>\n<li><a href=\"https://github.com/SUCHMOKUO/node-worker-threads-pool/issues/20\">https://github.com/SUCHMOKUO/node-worker-threads-pool/issues/20</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vxc-q7rv-qfj8\">https://github.com/advisories/GHSA-7vxc-q7rv-qfj8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vxc-q7rv-qfj8",
            "title": "[node-worker-threads-pool] SUCHMOKUO node-worker-threads-pool denial of service Vulnerability",
            "date_modified": "2023-08-11T22:16:45.000Z",
            "date_published": "2023-08-11T15:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vxc-q7rv-qfj8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A prototype pollution vulnerability in MrSwitch hello.js prior to version 1.18.8 allows remote attackers to execute arbitrary code via <code>hello.utils.extend</code> function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26505\">https://nvd.nist.gov/vuln/detail/CVE-2021-26505</a></li>\n<li><a href=\"https://github.com/MrSwitch/hello.js/issues/634\">https://github.com/MrSwitch/hello.js/issues/634</a></li>\n<li><a href=\"https://github.com/MrSwitch/hello.js/commit/7ab50aeff2d41991f08d4ad6c0481125eea8f6b7\">https://github.com/MrSwitch/hello.js/commit/7ab50aeff2d41991f08d4ad6c0481125eea8f6b7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g3vf-47fv-8f3c\">https://github.com/advisories/GHSA-g3vf-47fv-8f3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g3vf-47fv-8f3c",
            "title": "[hellojs] MrSwitch hello.js vulnerable to prototype pollution",
            "date_modified": "2023-08-11T22:08:43.000Z",
            "date_published": "2023-08-11T15:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g3vf-47fv-8f3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Cross Site Scripting (XSS) vulnerability in margox braft-editor version 2.3.8, allows remote attackers to execute arbitrary code via the embed media feature.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-27524\">https://nvd.nist.gov/vuln/detail/CVE-2021-27524</a></li>\n<li><a href=\"https://github.com/margox/braft-editor/issues/880\">https://github.com/margox/braft-editor/issues/880</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jfrf-vv54-j2jg\">https://github.com/advisories/GHSA-jfrf-vv54-j2jg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jfrf-vv54-j2jg",
            "title": "[braft-editor] Margox Braft-Editor Cross-site Scripting Vulnerability",
            "date_modified": "2023-08-11T22:06:57.000Z",
            "date_published": "2023-08-11T15:30:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jfrf-vv54-j2jg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using <code>ERC2771Context</code> along with a custom trusted forwarder may see <code>_msgSender</code> return <code>address(0)</code> in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for <code>MinimalForwarder</code> from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in v4.9.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40014\">https://nvd.nist.gov/vuln/detail/CVE-2023-40014</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4vp-m682-qqmp\">https://github.com/advisories/GHSA-g4vp-m682-qqmp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4vp-m682-qqmp",
            "title": "[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts vulnerable to Improper Escaping of Output",
            "date_modified": "2023-08-11T19:00:48.000Z",
            "date_published": "2023-08-11T19:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4vp-m682-qqmp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using <code>ERC2771Context</code> along with a custom trusted forwarder may see <code>_msgSender</code> return <code>address(0)</code> in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for <code>MinimalForwarder</code> from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been patched in v4.9.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp\">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-40014\">https://nvd.nist.gov/vuln/detail/CVE-2023-40014</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484\">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5\">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3\">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g4vp-m682-qqmp\">https://github.com/advisories/GHSA-g4vp-m682-qqmp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g4vp-m682-qqmp",
            "title": "[@openzeppelin/contracts] OpenZeppelin Contracts vulnerable to Improper Escaping of Output",
            "date_modified": "2023-08-11T19:00:48.000Z",
            "date_published": "2023-08-11T19:00:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g4vp-m682-qqmp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Critters version 0.0.17-0.0.19 have an issue when parsing the HTML which leads to a potential <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> bug.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The bug has been fixed in <code>v0.0.20</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrading Critters version to <code>&gt;0.0.20</code> is the easiest fix. This is a non breaking version upgrade so we recommend all users to use <code>v0.0.20</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/GoogleChromeLabs/critters/security/advisories/GHSA-cx3j-qqxj-9597\">https://github.com/GoogleChromeLabs/critters/security/advisories/GHSA-cx3j-qqxj-9597</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/critters/pull/133\">https://github.com/GoogleChromeLabs/critters/pull/133</a></li>\n<li><a href=\"https://github.com/GoogleChromeLabs/critters/commit/7757902c9e0b3285d516359b3cb602cd9d50d80e\">https://github.com/GoogleChromeLabs/critters/commit/7757902c9e0b3285d516359b3cb602cd9d50d80e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cx3j-qqxj-9597\">https://github.com/advisories/GHSA-cx3j-qqxj-9597</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cx3j-qqxj-9597",
            "title": "[critters] Critters Cross-site Scripting Vulnerability",
            "date_modified": "2023-08-11T18:57:54.000Z",
            "date_published": "2023-08-11T18:57:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cx3j-qqxj-9597"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>According to the documentation, controllers are allowed to register new domains and extend the expiry of existing domains, but they cannot change the ownership or reduce the expiration time of existing domains. However, a preliminary analysis suggests that an attacker-controlled controller may be able to reduce the expiration time of existing domains due to an integer overflow in the renew function.</p>\n<p>The vulnerability resides in the following GitHub repository: <a href=\"https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171\">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a> </p>\n<p>The vulnerable line of code is:</p>\n<pre><code class=\"language-js\">require(\n            expiries[id] + duration + GRACE_PERIOD &gt; duration + GRACE_PERIOD\n        ); // Prevent future overflow\n</code></pre>\n<p>In this code snippet, the <code>duration</code> variable is user-supplied, making it possible to provide a value that would cause an overflow on both sides of the '&gt;' expression, ultimately rendering the condition true. Specifically, when the duration is set to <code>2^256 - GRACE_PERIOD</code>, the subsequent line <code>expiries[id] += duration;</code> also experiences an overflow, as <code>expiries[id]</code> is greater than <code>GRACE_PERIOD</code>. This results in the reduction of <code>expiries[id]</code> by <code>GRACE_PERIOD</code>. By repeatedly calling the renew function, an attacker could potentially force the expiration of an ENS record.</p>\n<p>You can find the PoC included in the attached document. To execute the test, please use the following command:</p>\n<pre><code>forge test -vvv --match-contract RegistrarExploit --fork-url &lt;alchemy_url&gt;\n</code></pre>\n<p>Replace <code>&lt;alchemy_url&gt;</code> with your Alchemy API URL. This command will run the Foundry test file and demonstrate the potential vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If successfully exploited, this vulnerability would enable attackers to force the expiration of any ENS record, ultimately allowing them to claim the affected domains for themselves.</p>\n<p>Currently, it would require a malicious DAO to exploit it. Nevertheless, any vulnerability present in the controllers could potentially render this issue exploitable in the future.</p>\n<p>An additional concern is the possibility of renewal discounts. Should ENS decide to implement a system that offers unlimited .eth domains for a fixed fee in the future, the vulnerability could become exploitable by any user due to the reduced attack cost.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>A mitigation is being developed.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>As long as registration cost remains linear or superlinear based on registration duration, or limited to a reasonable maximum (eg, 1 million years), this vulnerability could only be exploited by a malicious DAO. The interim workaround is thus to take no action.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3\">https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3</a></li>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca\">https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca</a></li>\n<li><a href=\"https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171\">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38698\">https://nvd.nist.gov/vuln/detail/CVE-2023-38698</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rrxv-q8m4-wch3\">https://github.com/advisories/GHSA-rrxv-q8m4-wch3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rrxv-q8m4-wch3",
            "title": "[@ensdomains/ens-contracts] .eth registrar controller can shorten the duration of registered names",
            "date_modified": "2023-08-10T22:10:22.000Z",
            "date_published": "2023-08-01T19:48:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rrxv-q8m4-wch3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>The <code>import-in-the-middle</code> loader used by <code>@opentelemetry/instrumentation</code> works by generating a wrapper module on the fly. The wrapper uses the module specifier to load the original module and add some wrapping code. It allows for remote code execution in cases where an application passes user-supplied input directly to an <code>import()</code> function.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>This vulnerability has been patched in <code>@opentelemetry/instrumentation</code> version <code>0.41.2</code></p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<ul>\n<li>Do not pass any user-supplied input to <code>import()</code>. Instead, verify it against a set of allowed values.</li>\n<li>If using <code>@opentelemetry/instrumentation</code> with support for EcmaScript Modules is not needed, ensure that none of the following options are set (either via command-line or the <code>NODE_OPTIONS</code> environment variable):</li>\n</ul>\n<pre><code>--experimental-loader=@opentelemetry/instrumentation/hook.mjs\n--experimental-loader @opentelemetry/instrumentation/hook.mjs\n--loader=import-in-the-middle/hook.mjs\n--loader import-in-the-middle/hook.mjs\n</code></pre>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967\">https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5\">https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5</a></li>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28\">https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f8pq-3926-8gx5\">https://github.com/advisories/GHSA-f8pq-3926-8gx5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f8pq-3926-8gx5",
            "title": "[@opentelemetry/instrumentation] Unsanitized user controlled input in module generation",
            "date_modified": "2023-08-09T20:59:14.000Z",
            "date_published": "2023-08-09T20:59:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f8pq-3926-8gx5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}