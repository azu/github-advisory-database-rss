{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>\n<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>\n<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>\n<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>\n<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>\n<pre><code class=\"language-diff\">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001\nFrom: Kris Kowal &lt;kris@agoric.com&gt;\nDate: Thu, 27 Jul 2023 13:25:13 -0700\nSubject: [PATCH] fix(fix): Censor spread import\n\n---\n packages/ses/src/transforms.js       |  2 +-\n packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-\n 2 files changed, 22 insertions(+), 2 deletions(-)\n\ndiff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js\nindex a0fc8d0ef..64a46cb53 100644\n--- a/packages/ses/src/transforms.js\n+++ b/packages/ses/src/transforms.js\n@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {\n // /////////////////////////////////////////////////////////////////////////////\n \n const importPattern = new FERAL_REG_EXP(\n-  '(^|[^.])\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n+  '(^|[^.]|\\\\.\\\\.\\\\.)\\\\bimport(\\\\s*(?:\\\\(|/[/*]))',\n   'g',\n );\n \ndiff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js\nindex cef0c02c1..8f6818b83 100644\n--- a/packages/ses/test/test-transforms.js\n+++ b/packages/ses/test/test-transforms.js\n@@ -6,7 +6,7 @@ import {\n } from '../src/transforms.js';\n \n test('no-import-expression regexp', t =&gt; {\n-  t.plan(9);\n+  t.plan(13);\n \n   // Note: we cannot define these as regular functions (and then stringify)\n   // because the 'esm' module loader that we use for running the tests (i.e.\n@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {\n   const safe = 'const a = 1';\n   const safe2 = \"const a = notimport('evil')\";\n   const safe3 = \"const a = importnot('evil')\";\n+  const safe4 = \"const a = compartment.import('name')\";\n \n   const obvious = \"const a = import('evil')\";\n   const whitespace = \"const a = import ('evil')\";\n@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {\n   const doubleSlashComment = \"const a = import // hah\\n('evil')\";\n   const newline = \"const a = import\\n('evil')\";\n   const multiline = \"\\nimport('a')\\nimport('b')\";\n+  const spread = \"{...import('exfil')}\";\n+  const spread2 = \"{\\n...\\nimport\\n('exfil')}\";\n+  const spread3 = \"{\\n...\\nimport/**/\\n('exfil')}\";\n \n   t.is(rejectImportExpressions(safe), safe, 'safe');\n   t.is(rejectImportExpressions(safe2), safe2, 'safe2');\n   t.is(rejectImportExpressions(safe3), safe3, 'safe3');\n+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');\n   t.throws(\n     () =&gt; rejectImportExpressions(obvious),\n     { instanceOf: SyntaxError },\n@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {\n     'possible import expression rejected around line 2',\n     'multiline',\n   );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread),\n+    { instanceOf: SyntaxError },\n+    'spread',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread2),\n+    { instanceOf: SyntaxError },\n+    'spread2',\n+  );\n+  t.throws(\n+    () =&gt; rejectImportExpressions(spread3),\n+    { instanceOf: SyntaxError },\n+    'spread3',\n+  );\n });\n \n test('no-html-comment-expression regexp', t =&gt; {\n-- \n2.40.1\n</code></pre>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>\n<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>\n<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>\n<h3 id=\"references\">References</h3>\n<p>No references at this time.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-39532\">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>\n<li><a href=\"https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041\">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c4h-3f7h-322r\">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r",
            "title": "[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution",
            "date_modified": "2023-08-09T14:43:20.000Z",
            "date_published": "2023-08-09T14:43:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c4h-3f7h-322r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Angular Universal applications on 16.1.0 and 16.1.1 using critical CSS inlining are vulnerable to a <a href=\"https://owasp.org/www-community/attacks/xss/\">cross-site scripting (XSS)</a> attack where an attacker can trick another user into visiting a page which injects malicious JavaScript.</p>\n<p>Angular CLI applications without Universal do perform critical CSS inlining as well, however exploiting this requires a malicious actor to already have access to modify source code directly.</p>\n<h3 id=\"patches\">Patches</h3>\n<p><code>@nguniversal/common</code> should be upgraded to 16.1.2 or higher. 16.2.0-rc.0 is safe.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The easiest solution is likely to upgrade Universal to 16.1.2 or downgrade to 16.0.x or lower. Alternatively you can <a href=\"https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides\">override</a> specifically the <code>critters</code> dependency with version <code>0.0.20</code> in your <code>package.json</code>.</p>\n<pre><code class=\"language-json\">{\n  \"overrides\": {\n    \"critters\": \"0.0.20\"\n  }\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://blog.angular.io/notice-of-xss-issue-affecting-angular-universal-16-1-0-16-1-1-95dbae068f\">Angular Blog Post</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p\">https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3hf-q8q7-fv2p\">https://github.com/advisories/GHSA-r3hf-q8q7-fv2p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3hf-q8q7-fv2p",
            "title": "[@nguniversal/common] Angular critical CSS inlining Cross-site Scripting Vulnerability Advisory",
            "date_modified": "2023-08-09T12:51:51.000Z",
            "date_published": "2023-08-09T12:51:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3hf-q8q7-fv2p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package exec-local-bin before 1.2.0 are vulnerable to Command Injection via the <code>theProcess()</code> functionality due to improper user-input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25923\">https://nvd.nist.gov/vuln/detail/CVE-2022-25923</a></li>\n<li><a href=\"https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624\">https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624</a></li>\n<li><a href=\"https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9\">https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956\">https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f259-h6m8-hm8m\">https://github.com/advisories/GHSA-f259-h6m8-hm8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f259-h6m8-hm8m",
            "title": "[exec-local-bin] exec-local-bin vulnerable to Command Injection",
            "date_modified": "2023-08-08T22:04:54.000Z",
            "date_published": "2023-01-06T06:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f259-h6m8-hm8m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This impacts users that use shescape to escape arguments:</p>\n<ul>\n<li>for the Unix shell Bash, or any not-officially-supported Unix shell;</li>\n<li>using the <code>escape</code> or <code>escapeAll</code> functions with the <code>interpolation</code> option set to <code>true</code>.</li>\n</ul>\n<p>An attacker can cause polynomial backtracking in terms of the input string length due to a Regular Expression in shescape that is vulnerable to Regular Expression Denial of Service (ReDoS). Example:</p>\n<pre><code class=\"language-javascript\">import * as shescape from \"shescape\";\n\n/* 1. Prerequisites */\nconst options = {\n  interpolation: true,\n  // and\n  shell: \"/bin/bash\",\n  // or\n  shell: \"some-not-officially-supported-shell\",\n  // or\n  shell: undefined, // Only if the system's default shell is bash or an unsupported shell.\n};\n\n/* 2. Attack */\nlet userInput = '{,'.repeat(150_000); // polynomial backtracking\n\n/* 3. Usage */\nshescape.escape(userInput, options);\n// or\nshescape.escapeAll([userInput], options);\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been patched in <a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1\">v1.6.1</a> which you can upgrade to now. No further changes required.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Alternatively, a maximum length can be enforced on input strings to shescape to reduce the impact of the vulnerability. It is not recommended to try and detect vulnerable input strings, as the logic for this may end up being vulnerable to ReDoS itself.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>Shescape commit <a href=\"https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\">552e8ea</a></li>\n<li>Shescape Release <a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1\">v1.6.1</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<ul>\n<li>Comment on commit <a href=\"https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\">552e8ea</a></li>\n<li>Open an issue at <a href=\"https://github.com/ericcornelissen/shescape/issues?q=is%3Aissue+is%3Aopen\">https://github.com/ericcornelissen/shescape/issues</a> (New issue &gt; Question &gt; Get started)</li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ericcornelissen/shescape/security/advisories/GHSA-cr84-xvw4-qx3c\">https://github.com/ericcornelissen/shescape/security/advisories/GHSA-cr84-xvw4-qx3c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25918\">https://nvd.nist.gov/vuln/detail/CVE-2022-25918</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9\">https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/blob/main/src/unix.js%23L52\">https://github.com/ericcornelissen/shescape/blob/main/src/unix.js%23L52</a></li>\n<li><a href=\"https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1\">https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SHESCAPE-3061108\">https://security.snyk.io/vuln/SNYK-JS-SHESCAPE-3061108</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cr84-xvw4-qx3c\">https://github.com/advisories/GHSA-cr84-xvw4-qx3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cr84-xvw4-qx3c",
            "title": "[shescape] Inefficient Regular Expression Complexity in shescape ",
            "date_modified": "2023-08-08T21:24:13.000Z",
            "date_published": "2022-10-25T22:27:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cr84-xvw4-qx3c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-23484\">https://nvd.nist.gov/vuln/detail/CVE-2021-23484</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085\">https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365\">https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365</a></li>\n<li><a href=\"https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477\">https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477</a></li>\n<li><a href=\"https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b\">https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wxj7-97fp-j53j\">https://github.com/advisories/GHSA-wxj7-97fp-j53j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wxj7-97fp-j53j",
            "title": "[zip-local] Exposure of Resource to Wrong Sphere in Zip-Local",
            "date_modified": "2023-08-08T20:15:02.000Z",
            "date_published": "2022-02-01T00:46:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wxj7-97fp-j53j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The <code>import-in-the-middle</code> loader works by generating a wrapper module on the fly. The wrapper uses the module specifier to load the original module and add some wrapping code. It allows for remote code execution in cases where an application passes user-supplied input directly to an import() function.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This vulnerability has been patched in <code>import-in-the-middle</code> version 1.4.2</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Do not pass any user-supplied input to <code>import()</code>. Instead, verify it against a set of allowed values.</li>\n<li>If using <code>import-in-the-middle</code> and support for EcmaScript Modules is not needed, ensure that none of the following options are set (either via command-line or the <code>NODE_OPTIONS</code> environment variable):</li>\n</ul>\n<pre><code>--loader=import-in-the-middle/hook.mjs\n--loader import-in-the-middle/hook.mjs\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p>If you have any questions or comments about this advisory, email us at <a href=\"mailto:security@datadoghq.com\">security@datadoghq.com</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967\">https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38704\">https://nvd.nist.gov/vuln/detail/CVE-2023-38704</a></li>\n<li><a href=\"https://github.com/DataDog/import-in-the-middle/commit/2531cdd9d1d73f9eaa87c16967f60cb276c1971b\">https://github.com/DataDog/import-in-the-middle/commit/2531cdd9d1d73f9eaa87c16967f60cb276c1971b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r27-rw8r-7967\">https://github.com/advisories/GHSA-5r27-rw8r-7967</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r27-rw8r-7967",
            "title": "[import-in-the-middle] Unsanitized user controlled input in module generation",
            "date_modified": "2023-08-08T19:26:41.000Z",
            "date_published": "2023-08-08T19:26:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r27-rw8r-7967"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Version 1.0.2 of <code>uploader-plugin</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Remove the package from your environment. It's also recommended to evaluate your application to determine whether or not user data was compromised.</p>\n<p>Users may consider downgrading to version 1.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/advisories/1100\">https://www.npmjs.com/advisories/1100</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fx6f-fpfv-5hmc\">https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fx6f-fpfv-5hmc",
            "title": "[uploader-plugin] Malicious Package in uploader-plugin",
            "date_modified": "2023-08-05T05:02:38.000Z",
            "date_published": "2020-09-03T19:10:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fx6f-fpfv-5hmc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Version 1.0.2 of <code>radic-util</code> contained malicious code. The code when executed in the browser would enumerate password, cvc and cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>\n<h2 id=\"recommendation\">Recommendation</h2>\n<p>Remove the package from your environment and evaluate your application to determine whether or not user data was compromised.</p>\n<p>Users may consider downgrading to version 1.0.1</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/advisories/942\">https://www.npmjs.com/advisories/942</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8qh7-xw58-3ww7\">https://github.com/advisories/GHSA-8qh7-xw58-3ww7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8qh7-xw58-3ww7",
            "title": "[radic-util] Malicious Package in radic-util",
            "date_modified": "2023-08-05T05:02:07.000Z",
            "date_published": "2020-09-11T21:25:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8qh7-xw58-3ww7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-3296\">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/04/10/10\">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>\n<li><a href=\"https://github.com/NodeBB/NodeBB/issues/2273\">https://github.com/NodeBB/NodeBB/issues/2273</a></li>\n<li><a href=\"https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3\">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3\">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>\n<li><a href=\"https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824\">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9g4f-5rpg-4948\">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948",
            "title": "[nodebb-plugin-markdown] NodeBB Cross-site Scripting Vulnerability in Markdown Processing",
            "date_modified": "2023-08-04T23:16:46.000Z",
            "date_published": "2022-05-17T00:47:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-3296\">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2015/04/10/10\">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>\n<li><a href=\"https://github.com/NodeBB/NodeBB/issues/2273\">https://github.com/NodeBB/NodeBB/issues/2273</a></li>\n<li><a href=\"https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3\">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3\">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>\n<li><a href=\"https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824\">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9g4f-5rpg-4948\">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948",
            "title": "[nodebb] NodeBB Cross-site Scripting Vulnerability in Markdown Processing",
            "date_modified": "2023-08-04T23:16:46.000Z",
            "date_published": "2022-05-17T00:47:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9g4f-5rpg-4948"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It is possible to craft a command with newlines which would not be properly parsed. This would mean you could pass a string of commands as a channel name, which would then be run by the IRC bridge bot. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Versions 1.0.1 and above are patched.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no robust workarounds to the bug. You can disable dynamic channels in the config to disable the most common execution method but others may exist. It is highly recommended to upgrade the bridge.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Discovered and reported by <a href=\"https://valentin-lorentz.fr/\">Val Lorentz</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@matrix.org\">security@matrix.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3\">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3\">https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1\">https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38690\">https://nvd.nist.gov/vuln/detail/CVE-2023-38690</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pmj-jqqp-2mj3\">https://github.com/advisories/GHSA-3pmj-jqqp-2mj3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pmj-jqqp-2mj3",
            "title": "[matrix-appservice-irc] matrix-appservice-irc IRC command injection via admin commands containing newlines ",
            "date_modified": "2023-08-04T18:41:53.000Z",
            "date_published": "2023-08-04T17:26:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pmj-jqqp-2mj3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious Matrix server can use a foreign user's MXID in an OpenID exchange, allowing a bad actor to impersonate users when using the provisioning API.</p>\n<h3 id=\"details\">Details</h3>\n<p>The library does not check that the servername part of the <code>sub</code> parameter (containing the user's <em>claimed</em> MXID) is the same as the servername we are talking to. A malicious actor could spin up a server on any given domain, respond with a <code>sub</code> parameter according to the user they want to act as and use the resulting token to perform provisioning requests.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the provisioning API. If the bridge does not use the provisioning API, you are not vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x\">https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552\">https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38691\">https://nvd.nist.gov/vuln/detail/CVE-2023-38691</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc7j-h8xg-fv5x\">https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc7j-h8xg-fv5x",
            "title": "[matrix-appservice-bridge] matrix-appservice-bridge doesn't verify the sub parameter of an openId token exhange, allowing unauthorized access to provisioning APIs",
            "date_modified": "2023-08-04T18:41:58.000Z",
            "date_published": "2023-08-04T17:26:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc7j-h8xg-fv5x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A malicious Matrix server can use a foreign user's MXID in an OpenID exchange, allowing a bad actor to impersonate users when using the provisioning API.</p>\n<h3 id=\"details\">Details</h3>\n<p>The library does not check that the servername part of the <code>sub</code> parameter (containing the user's <em>claimed</em> MXID) is the same as the servername we are talking to. A malicious actor could spin up a server on any given domain, respond with a <code>sub</code> parameter according to the user they want to act as and use the resulting token to perform provisioning requests.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Disable the provisioning API. If the bridge does not use the provisioning API, you are not vulnerable.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x\">https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552\">https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38691\">https://nvd.nist.gov/vuln/detail/CVE-2023-38691</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc7j-h8xg-fv5x\">https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc7j-h8xg-fv5x",
            "title": "[matrix-appservice-bridge] matrix-appservice-bridge doesn't verify the sub parameter of an openId token exhange, allowing unauthorized access to provisioning APIs",
            "date_modified": "2023-08-04T18:41:58.000Z",
            "date_published": "2023-08-04T17:26:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc7j-h8xg-fv5x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>It was possible to craft an event such that it would leak part of a targeted message event from another bridged room. This required knowing an event ID to target.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Please upgrade to 1.0.1.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>You can set the <code>matrixHandler.eventCacheSize</code> config value to <code>0</code> to workaround this bug. However, this may impact performance.</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Discovered and reported by <a href=\"https://valentin-lorentz.fr/\">Val Lorentz</a>.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory email us at <a href=\"mailto:security@matrix.org\">security@matrix.org</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-c7hh-3v6c-fj4q\">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-c7hh-3v6c-fj4q</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/commit/8bbd2b69a16cbcbeffdd9b5c973fd89d61498d75\">https://github.com/matrix-org/matrix-appservice-irc/commit/8bbd2b69a16cbcbeffdd9b5c973fd89d61498d75</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-38700\">https://nvd.nist.gov/vuln/detail/CVE-2023-38700</a></li>\n<li><a href=\"https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1\">https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c7hh-3v6c-fj4q\">https://github.com/advisories/GHSA-c7hh-3v6c-fj4q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c7hh-3v6c-fj4q",
            "title": "[matrix-appservice-irc] matrix-appservice-irc events can be crafted to leak parts of targeted messages from other bridged rooms",
            "date_modified": "2023-08-08T18:28:29.000Z",
            "date_published": "2023-08-04T17:26:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c7hh-3v6c-fj4q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em>\nAnyone who might have used Soketi with the <code>cluster</code> driver (or through PM2).</p>\n<h3 id=\"patches\">Patches</h3>\n<p><em>Has the problem been patched? What versions should users upgrade to?</em>\nGet the latest version of Soketi.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>\nNone. It's advised to upgrade to the latest version.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/issues/533\">https://github.com/patriksimek/vm2/issues/533</a></li>\n<li><a href=\"https://github.com/Unitech/pm2/issues/5643\">https://github.com/Unitech/pm2/issues/5643</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5\">https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5</a></li>\n<li><a href=\"https://github.com/Unitech/pm2/issues/5643\">https://github.com/Unitech/pm2/issues/5643</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/issues/533\">https://github.com/patriksimek/vm2/issues/533</a></li>\n<li><a href=\"https://github.com/soketi/soketi/pull/927\">https://github.com/soketi/soketi/pull/927</a></li>\n<li><a href=\"https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a\">https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cchq-frgv-rjh5\">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>\n<li><a href=\"https://github.com/soketi/soketi/releases/tag/1.6.0\">https://github.com/soketi/soketi/releases/tag/1.6.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6w6-h933-4rc5\">https://github.com/advisories/GHSA-g6w6-h933-4rc5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6w6-h933-4rc5",
            "title": "[@soketi/soketi] Soketi was exposed to Sandbox Escape vulnerability via vm2",
            "date_modified": "2023-08-03T19:44:53.000Z",
            "date_published": "2023-08-03T19:44:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6w6-h933-4rc5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}