{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for JavaScript packages hosted at npmjs.com",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/npm.json",
    "description": "Security Advisory for JavaScript packages hosted at npmjs.com on GitHub",
    "items": [
        {
            "content_html": "<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>\n<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>\n<h2 id=\"details\">Details</h2>\n<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>\n<pre><code class=\"language-js\">const JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) =&gt; {\n if (props.isAdmin) {\n console.log('Doing dangerous thing as admin.');\n } else {\n console.log('Doing dangerous thing as user.');\n\n }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) =&gt; {\n let searchKeyFound = false;\n Object.keys(obj).forEach((key) =&gt; {\n if (searchKeys.indexOf(key) &gt; -1) {\n searchKeyFound = true;\n }\n });\n return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n} else {\n throw new Error('Forbidden...');\n}\n</code></pre>\n<p>If an attacker attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>\n<pre><code class=\"language-js\">const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\ndoSomethingDangerous(props);\n} else {\n throw new Error('Forbidden...'); // Error: Forbidden...\n}\n</code></pre>\n<p>However, attackers can instead set the <code>__proto__</code> key to <code>{\\\"isAdmin\\\": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the attacker to bypass the security check and run their request as an admin:</p>\n<pre><code class=\"language-js\">const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n} else {\n throw new Error('Forbidden...');\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46175\">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/199\">https://github.com/json5/json5/issues/199</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/295\">https://github.com/json5/json5/issues/295</a></li>\n<li><a href=\"https://github.com/json5/json5/pull/298\">https://github.com/json5/json5/pull/298</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h",
            "title": "[json5] Prototype Pollution in JSON5 via Parse Method",
            "date_modified": "2023-01-03T15:04:41.000Z",
            "date_published": "2022-12-29T01:51:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>\n<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>\n<h2 id=\"mitigation\">Mitigation</h2>\n<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>\n<h2 id=\"details\">Details</h2>\n<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>\n<pre><code class=\"language-js\">const JSON5 = require('json5');\n\nconst doSomethingDangerous = (props) =&gt; {\n if (props.isAdmin) {\n console.log('Doing dangerous thing as admin.');\n } else {\n console.log('Doing dangerous thing as user.');\n\n }\n};\n\nconst secCheckKeysSet = (obj, searchKeys) =&gt; {\n let searchKeyFound = false;\n Object.keys(obj).forEach((key) =&gt; {\n if (searchKeys.indexOf(key) &gt; -1) {\n searchKeyFound = true;\n }\n });\n return searchKeyFound;\n};\n\nconst props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\"}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n doSomethingDangerous(props); // \\\"Doing dangerous thing as user.\\\"\n} else {\n throw new Error('Forbidden...');\n}\n</code></pre>\n<p>If an attacker attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>\n<pre><code class=\"language-js\">const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"isAdmin\\\": true}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\ndoSomethingDangerous(props);\n} else {\n throw new Error('Forbidden...'); // Error: Forbidden...\n}\n</code></pre>\n<p>However, attackers can instead set the <code>__proto__</code> key to <code>{\\\"isAdmin\\\": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the attacker to bypass the security check and run their request as an admin:</p>\n<pre><code class=\"language-js\">const props = JSON5.parse('{\\\"foo\\\": \\\"bar\\\", \\\"__proto__\\\": {\\\"isAdmin\\\": true}}');\nif (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {\n doSomethingDangerous(props); // \\\"Doing dangerous thing as admin.\\\"\n} else {\n throw new Error('Forbidden...');\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46175\">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/199\">https://github.com/json5/json5/issues/199</a></li>\n<li><a href=\"https://github.com/json5/json5/issues/295\">https://github.com/json5/json5/issues/295</a></li>\n<li><a href=\"https://github.com/json5/json5/pull/298\">https://github.com/json5/json5/pull/298</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9c47-m6qq-7p4h\">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h",
            "title": "[json5] Prototype Pollution in JSON5 via Parse Method",
            "date_modified": "2023-01-03T15:04:41.000Z",
            "date_published": "2022-12-29T01:51:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9c47-m6qq-7p4h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability, which was classified as critical, has been found in json-pointer. Affected by this issue is the function set of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. The name of the patch is 859c9984b6c407fc2d5a0a7e47c7274daa681941. It is recommended to apply a patch to fix this issue. VDB-216794 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4742\">https://nvd.nist.gov/vuln/detail/CVE-2022-4742</a></li>\n<li><a href=\"https://github.com/manuelstofer/json-pointer/pull/36\">https://github.com/manuelstofer/json-pointer/pull/36</a></li>\n<li><a href=\"https://github.com/manuelstofer/json-pointer/commit/859c9984b6c407fc2d5a0a7e47c7274daa681941\">https://github.com/manuelstofer/json-pointer/commit/859c9984b6c407fc2d5a0a7e47c7274daa681941</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216794\">https://vuldb.com/?ctiid.216794</a></li>\n<li><a href=\"https://vuldb.com/?id.216794\">https://vuldb.com/?id.216794</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6xrf-q977-5vgc\">https://github.com/advisories/GHSA-6xrf-q977-5vgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6xrf-q977-5vgc",
            "title": "[json-pointer] json-pointer vulnerable to Prototype Pollution",
            "date_modified": "2022-12-30T17:21:12.000Z",
            "date_published": "2022-12-26T09:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6xrf-q977-5vgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been found in Starcounter-Jack JSON-Patch up to 3.1.0 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.1 can address this issue. The name of the patch is 7ad6af41eabb2d799f698740a91284d762c955c9. It is recommended to upgrade the affected component. VDB-216778 is the identifier assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4279\">https://nvd.nist.gov/vuln/detail/CVE-2021-4279</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/pull/262\">https://github.com/Starcounter-Jack/JSON-Patch/pull/262</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9\">https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9</a></li>\n<li><a href=\"https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1\">https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216778\">https://vuldb.com/?ctiid.216778</a></li>\n<li><a href=\"https://vuldb.com/?id.216778\">https://vuldb.com/?id.216778</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8gh8-hqwg-xf34\">https://github.com/advisories/GHSA-8gh8-hqwg-xf34</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8gh8-hqwg-xf34",
            "title": "[fast-json-patch] Starcounter-Jack JSON-Patch Prototype Pollution vulnerability",
            "date_modified": "2022-12-30T16:27:25.000Z",
            "date_published": "2022-12-25T21:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8gh8-hqwg-xf34"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>flat helps flatten/unflatten nested Javascript objects. A vulnerability, which was classified as critical, was found in hughsk flat up to 5.0.0. This affects the function unflatten of the file index.js. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). It is possible to initiate the attack remotely. Upgrading to version 5.0.1 can address this issue. The name of the patch is 20ef0ef55dfa028caddaedbcb33efbdb04d18e13. It is recommended to upgrade the affected component. The identifier VDB-216777 was assigned to this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36632\">https://nvd.nist.gov/vuln/detail/CVE-2020-36632</a></li>\n<li><a href=\"https://github.com/hughsk/flat/issues/105\">https://github.com/hughsk/flat/issues/105</a></li>\n<li><a href=\"https://github.com/hughsk/flat/pull/106\">https://github.com/hughsk/flat/pull/106</a></li>\n<li><a href=\"https://github.com/hughsk/flat/commit/20ef0ef55dfa028caddaedbcb33efbdb04d18e13\">https://github.com/hughsk/flat/commit/20ef0ef55dfa028caddaedbcb33efbdb04d18e13</a></li>\n<li><a href=\"https://github.com/hughsk/flat/releases/tag/5.0.1\">https://github.com/hughsk/flat/releases/tag/5.0.1</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216777\">https://vuldb.com/?ctiid.216777</a></li>\n<li><a href=\"https://vuldb.com/?id.216777\">https://vuldb.com/?id.216777</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2j2x-2gpw-g8fm\">https://github.com/advisories/GHSA-2j2x-2gpw-g8fm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2j2x-2gpw-g8fm",
            "title": "[flat] flat vulnerable to Prototype Pollution",
            "date_modified": "2022-12-30T16:27:14.000Z",
            "date_published": "2022-12-25T21:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2j2x-2gpw-g8fm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in markdown-it up to 2.x. It has been classified as problematic. Affected is an unknown function of the file <code>lib/common/html_re.js</code>. The manipulation leads to inefficient regular expression complexity. Upgrading to version 3.0.0 is able to address this issue. The name of the patch is 89c8620157d6e38f9872811620d25138fc9d1b0d. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216852.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2015-10005\">https://nvd.nist.gov/vuln/detail/CVE-2015-10005</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/commit/89c8620157d6e38f9872811620d25138fc9d1b0d\">https://github.com/markdown-it/markdown-it/commit/89c8620157d6e38f9872811620d25138fc9d1b0d</a></li>\n<li><a href=\"https://github.com/markdown-it/markdown-it/releases/tag/3.0.0\">https://github.com/markdown-it/markdown-it/releases/tag/3.0.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216852\">https://vuldb.com/?ctiid.216852</a></li>\n<li><a href=\"https://vuldb.com/?id.216852\">https://vuldb.com/?id.216852</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j5p7-jf4q-742q\">https://github.com/advisories/GHSA-j5p7-jf4q-742q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j5p7-jf4q-742q",
            "title": "[markdown-it] markdown-it vulnerable to Inefficient Regular Expression Complexity",
            "date_modified": "2022-12-30T16:27:09.000Z",
            "date_published": "2022-12-27T09:30:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j5p7-jf4q-742q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Jodit Editor is a WYSIWYG editor written in pure TypeScript without the use of additional libraries. Jodit Editor is vulnerable to XSS attacks when pasting specially constructed input. This issue has not been fully patched. There are no known workarounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23461\">https://nvd.nist.gov/vuln/detail/CVE-2022-23461</a></li>\n<li><a href=\"https://securitylab.github.com/advisories/GHSL-2022-030_xdan_jodit/\">https://securitylab.github.com/advisories/GHSL-2022-030_xdan_jodit/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-42hx-vrxx-5r6v\">https://github.com/advisories/GHSA-42hx-vrxx-5r6v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-42hx-vrxx-5r6v",
            "title": "[jodit] Jodit Editor vulnerable to Cross-site Scripting",
            "date_modified": "2022-12-28T21:22:16.000Z",
            "date_published": "2022-09-25T00:00:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-42hx-vrxx-5r6v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Json2html is a client side javascript HTML templating library with wrappers for both jQuery and Node.js. A vulnerability was found in moappi Json2html up to 1.1.x and classified as problematic. This issue affects some unknown processing of the file json2html.js. The manipulation leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 1.2.0 can address this issue. The name of the patch is 2d3d24d971b19a8ed1fb823596300b9835d55801. The associated identifier of this vulnerability is VDB-216959.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-25053\">https://nvd.nist.gov/vuln/detail/CVE-2018-25053</a></li>\n<li><a href=\"https://github.com/moappi/json2html/commit/2d3d24d971b19a8ed1fb823596300b9835d55801\">https://github.com/moappi/json2html/commit/2d3d24d971b19a8ed1fb823596300b9835d55801</a></li>\n<li><a href=\"https://github.com/moappi/json2html/releases/tag/1.2.0\">https://github.com/moappi/json2html/releases/tag/1.2.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216959\">https://vuldb.com/?ctiid.216959</a></li>\n<li><a href=\"https://vuldb.com/?id.216959\">https://vuldb.com/?id.216959</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-79mp-cxp4-9p6r\">https://github.com/advisories/GHSA-79mp-cxp4-9p6r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-79mp-cxp4-9p6r",
            "title": "[node-json2html] Json2html vulnerable to cross-site scripting",
            "date_modified": "2022-12-28T20:35:03.000Z",
            "date_published": "2022-12-28T12:30:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-79mp-cxp4-9p6r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\\n\\nAffected versions of this package are vulnerable to Prototype Pollution. The <code>Schema.path()</code> function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2564\">https://nvd.nist.gov/vuln/detail/CVE-2022-2564</a></li>\n<li><a href=\"https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8\">https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8</a></li>\n<li><a href=\"https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd\">https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md\">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141\">https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141</a></li>\n<li><a href=\"https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6\">https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f825-f98c-gj3g\">https://github.com/advisories/GHSA-f825-f98c-gj3g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f825-f98c-gj3g",
            "title": "[mongoose] automattic/mongoose vulnerable to Prototype pollution via Schema.path",
            "date_modified": "2022-12-28T05:03:34.000Z",
            "date_published": "2022-07-29T00:00:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f825-f98c-gj3g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package liquidjs before 10.0.0 is vulnerable to Information Exposure when <code>ownPropertyOnly</code> parameter is set to <code>False</code>, which results in leaking properties of a prototype. Workaround For versions 9.34.0 and higher, an option to disable this functionality is provided.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25948\">https://nvd.nist.gov/vuln/detail/CVE-2022-25948</a></li>\n<li><a href=\"https://github.com/harttle/liquidjs/issues/454\">https://github.com/harttle/liquidjs/issues/454</a></li>\n<li><a href=\"https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db\">https://github.com/harttle/liquidjs/commit/7e99efc5131e20cf3f59e1fc2c371a15aa4109db</a></li>\n<li><a href=\"https://github.com/harttle/liquidjs/commit/7eb621601c2b05d6e379e5ce42219f2b1f556208\">https://github.com/harttle/liquidjs/commit/7eb621601c2b05d6e379e5ce42219f2b1f556208</a></li>\n<li><a href=\"https://groups.google.com/u/0/a/snyk.io/g/report/c/9ipXecWRtTM/m/IgLadevtCQAJ\">https://groups.google.com/u/0/a/snyk.io/g/report/c/9ipXecWRtTM/m/IgLadevtCQAJ</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-LIQUIDJS-2952868\">https://security.snyk.io/vuln/SNYK-JS-LIQUIDJS-2952868</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45rm-2893-5f49\">https://github.com/advisories/GHSA-45rm-2893-5f49</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45rm-2893-5f49",
            "title": "[liquidjs] liquidjs may leak properties of a prototype",
            "date_modified": "2023-01-02T21:15:49.000Z",
            "date_published": "2022-12-22T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45rm-2893-5f49"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability was found in LinkedIn dustjs prior to version 3.0.0 and classified as problematic. Affected by this issue is some unknown functionality. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack may be launched remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.0.0 can address this issue. The name of the patch is ddb6523832465d38c9d80189e9de60519ac307c3. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216464.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4264\">https://nvd.nist.gov/vuln/detail/CVE-2021-4264</a></li>\n<li><a href=\"https://github.com/linkedin/dustjs/issues/804\">https://github.com/linkedin/dustjs/issues/804</a></li>\n<li><a href=\"https://github.com/linkedin/dustjs/pull/805\">https://github.com/linkedin/dustjs/pull/805</a></li>\n<li><a href=\"https://github.com/linkedin/dustjs/commit/ddb6523832465d38c9d80189e9de60519ac307c3\">https://github.com/linkedin/dustjs/commit/ddb6523832465d38c9d80189e9de60519ac307c3</a></li>\n<li><a href=\"https://vuldb.com/?id.216464\">https://vuldb.com/?id.216464</a></li>\n<li><a href=\"https://github.com/linkedin/dustjs/releases/tag/v3.0.0\">https://github.com/linkedin/dustjs/releases/tag/v3.0.0</a></li>\n<li><a href=\"https://vuldb.com/?ctiid.216464\">https://vuldb.com/?ctiid.216464</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c6rp-wrp9-qr4q\">https://github.com/advisories/GHSA-c6rp-wrp9-qr4q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c6rp-wrp9-qr4q",
            "title": "[dustjs-linkedin] dustjs-linkedin vulnerable to Prototype Pollution",
            "date_modified": "2022-12-29T01:06:39.000Z",
            "date_published": "2022-12-21T21:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c6rp-wrp9-qr4q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package vm2 before 3.9.10 is vulnerable to Arbitrary Code Execution due to the usage of prototype lookup for the WeakMap.prototype.set method. Exploiting this vulnerability leads to access to a host object and a sandbox compromise.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25893\">https://nvd.nist.gov/vuln/detail/CVE-2022-25893</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/issues/444\">https://github.com/patriksimek/vm2/issues/444</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/pull/445\">https://github.com/patriksimek/vm2/pull/445</a></li>\n<li><a href=\"https://github.com/patriksimek/vm2/pull/445/commits/3a9876482be487b78a90ac459675da7f83f46d69\">https://github.com/patriksimek/vm2/pull/445/commits/3a9876482be487b78a90ac459675da7f83f46d69</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-VM2-2990237\">https://security.snyk.io/vuln/SNYK-JS-VM2-2990237</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4w2j-2rg4-5mjw\">https://github.com/advisories/GHSA-4w2j-2rg4-5mjw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4w2j-2rg4-5mjw",
            "title": "[vm2] vm2 vulnerable to Arbitrary Code Execution",
            "date_modified": "2022-12-22T03:33:45.000Z",
            "date_published": "2022-12-21T06:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4w2j-2rg4-5mjw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>Versions <code>&lt;=8.5.1</code> of <code>jsonwebtoken</code> library can be misconfigured so that passing a poorly implemented key retrieval function (referring to the <code>secretOrPublicKey</code> argument from the <a href=\"https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback\">readme link</a>) will result in incorrect verification of tokens. There is a possibility of using a different algorithm and key combination in verification  than the one that was used to sign the tokens. Specifically, tokens signed with an asymmetric public key could be verified with a symmetric HS256 algorithm. This can lead to successful validation of forged tokens. </p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You will be affected if your application is supporting usage of both symmetric key and asymmetric key in jwt.verify() implementation with the same key retrieval function. </p>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0.</p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>There is no impact for end users</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-hjrf-2m68-5959</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23541\">https://nvd.nist.gov/vuln/detail/CVE-2022-23541</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0\">https://github.com/auth0/node-jsonwebtoken/releases/tag/v9.0.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hjrf-2m68-5959\">https://github.com/advisories/GHSA-hjrf-2m68-5959</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hjrf-2m68-5959",
            "title": "[jsonwebtoken] jsonwebtoken's insecure implementation of key retrieval function could lead to Forgeable Public/Private Tokens from RSA to HMAC",
            "date_modified": "2022-12-30T00:47:06.000Z",
            "date_published": "2022-12-22T03:33:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hjrf-2m68-5959"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>In versions <code>&lt;=8.5.1</code> of <code>jsonwebtoken</code> library, lack of algorithm definition in the <code>jwt.verify()</code> function can lead to signature validation bypass due to defaulting to the <code>none</code> algorithm for signature verification. </p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You will be affected if you do not specify algorithms in the <code>jwt.verify()</code> function</p>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0 which removes the default support for the none algorithm in the <code>jwt.verify()</code> method. </p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>There will be no impact, if you update to version 9.0.0 and you don’t need to allow for the <code>none</code> algorithm. If you need 'none' algorithm, you have to explicitly specify that in <code>jwt.verify()</code> options.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-qwph-4952-7xr6</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23540\">https://nvd.nist.gov/vuln/detail/CVE-2022-23540</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qwph-4952-7xr6\">https://github.com/advisories/GHSA-qwph-4952-7xr6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6",
            "title": "[jsonwebtoken] jsonwebtoken vulnerable to signature validation bypass due to insecure default algorithm in jwt.verify()",
            "date_modified": "2022-12-30T00:47:21.000Z",
            "date_published": "2022-12-22T03:32:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qwph-4952-7xr6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>Versions <code>&lt;=8.5.1</code> of <code>jsonwebtoken</code> library could be misconfigured so that legacy, insecure key types are used for signature verification. For example, DSA keys could be used with the RS256 algorithm. </p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You are affected if you are using an algorithm and a key type other than the combinations mentioned below</p>\n<table>\n<thead>\n<tr>\n<th>Key type</th>\n<th>algorithm</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ec</td>\n<td>ES256, ES384, ES512</td>\n</tr>\n<tr>\n<td>rsa</td>\n<td>RS256, RS384, RS512, PS256, PS384, PS512</td>\n</tr>\n<tr>\n<td>rsa-pss</td>\n<td>PS256, PS384, PS512</td>\n</tr>\n</tbody></table>\n<p>And for Elliptic Curve algorithms:</p>\n<table>\n<thead>\n<tr>\n<th><code>alg</code></th>\n<th>Curve</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ES256</td>\n<td>prime256v1</td>\n</tr>\n<tr>\n<td>ES384</td>\n<td>secp384r1</td>\n</tr>\n<tr>\n<td>ES512</td>\n<td>secp521r1</td>\n</tr>\n</tbody></table>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0. This version validates for asymmetric key type and algorithm combinations. Please refer to the above mentioned algorithm / key type combinations for the valid secure configuration. After updating to version 9.0.0, If you still intend to continue with signing or verifying tokens using invalid key type/algorithm value combinations, you’ll need to set the <code>allowInvalidAsymmetricKeyTypes</code> option  to <code>true</code> in the <code>sign()</code> and/or <code>verify()</code> functions.</p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>There will be no impact, if you update to version 9.0.0 and you already use a valid secure combination of key type and algorithm. Otherwise,  use the  <code>allowInvalidAsymmetricKeyTypes</code> option  to <code>true</code> in the <code>sign()</code> and <code>verify()</code> functions to continue usage of invalid key type/algorithm combination in 9.0.0 for legacy compatibility. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-8cf7-32gw-wr33</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23539\">https://nvd.nist.gov/vuln/detail/CVE-2022-23539</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8cf7-32gw-wr33\">https://github.com/advisories/GHSA-8cf7-32gw-wr33</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33",
            "title": "[jsonwebtoken] jsonwebtoken unrestricted key type could lead to legacy keys usage ",
            "date_modified": "2022-12-23T00:39:15.000Z",
            "date_published": "2022-12-22T03:32:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8cf7-32gw-wr33"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"overview\">Overview</h1>\n<p>For versions <code>&lt;=8.5.1</code> of <code>jsonwebtoken</code> library, if a malicious actor has the ability to modify the key retrieval parameter (referring to the <code>secretOrPublicKey</code> argument from the <a href=\"https://github.com/auth0/node-jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback\">readme link</a>) of the <code>jwt.verify()</code> function, they can gain remote code execution (RCE).</p>\n<h1 id=\"am-i-affected\">Am I affected?</h1>\n<p>You are affected only if you allow untrusted entities to modify the key retrieval parameter of the <code>jwt.verify()</code>  on a host that you control. </p>\n<h1 id=\"how-do-i-fix-it\">How do I fix it?</h1>\n<p>Update to version 9.0.0</p>\n<h1 id=\"will-the-fix-impact-my-users\">Will the fix impact my users?</h1>\n<p>The fix has no impact on end users.</p>\n<h1 id=\"credits\">Credits</h1>\n<p><a href=\"https://www.paloaltonetworks.com/\">Palo Alto Networks</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-27h2-hvpr-p74q\">https://github.com/auth0/node-jsonwebtoken/security/advisories/GHSA-27h2-hvpr-p74q</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23529\">https://nvd.nist.gov/vuln/detail/CVE-2022-23529</a></li>\n<li><a href=\"https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3\">https://github.com/auth0/node-jsonwebtoken/commit/e1fa9dcc12054a8681db4e6373da1b30cf7016e3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-27h2-hvpr-p74q\">https://github.com/advisories/GHSA-27h2-hvpr-p74q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-27h2-hvpr-p74q",
            "title": "[jsonwebtoken] jsonwebtoken has insecure input validation in jwt.verify function",
            "date_modified": "2022-12-27T22:57:36.000Z",
            "date_published": "2022-12-22T03:31:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-27h2-hvpr-p74q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The package smoothie from 1.31.0 and before 1.36.1 are vulnerable to Cross-site Scripting (XSS) due to improper user input sanitization in strokeStyle and tooltipLabel properties. Exploiting this vulnerability is possible when the user can control these properties.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25929\">https://nvd.nist.gov/vuln/detail/CVE-2022-25929</a></li>\n<li><a href=\"https://github.com/joewalnes/smoothie/pull/147\">https://github.com/joewalnes/smoothie/pull/147</a></li>\n<li><a href=\"https://github.com/joewalnes/smoothie/commit/8e0920d50da82f4b6e605d56f41b69fbb9606a98\">https://github.com/joewalnes/smoothie/commit/8e0920d50da82f4b6e605d56f41b69fbb9606a98</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARS-3177369\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARS-3177369</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-3177368\">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSBOWER-3177368</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SMOOTHIE-3177364\">https://security.snyk.io/vuln/SNYK-JS-SMOOTHIE-3177364</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g662-qq45-ppwm\">https://github.com/advisories/GHSA-g662-qq45-ppwm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g662-qq45-ppwm",
            "title": "[smoothie] Smoothie vulnerable to Cross-site Scripting when tooltipLabel or strokeStyle are controlled by users",
            "date_modified": "2022-12-21T18:53:54.000Z",
            "date_published": "2022-12-21T06:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g662-qq45-ppwm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of package abacus-ext-cmdline are vulnerable to Command Injection via the execute function due to improper user-input sanitization.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24431\">https://nvd.nist.gov/vuln/detail/CVE-2022-24431</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-ABACUSEXTCMDLINE-3157950\">https://security.snyk.io/vuln/SNYK-JS-ABACUSEXTCMDLINE-3157950</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m5v8-wpw4-rj3x\">https://github.com/advisories/GHSA-m5v8-wpw4-rj3x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m5v8-wpw4-rj3x",
            "title": "[abacus-ext-cmdline] abacus-ext-cmdline vulnerable to Command Injection",
            "date_modified": "2023-01-02T21:16:30.000Z",
            "date_published": "2022-12-21T06:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m5v8-wpw4-rj3x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of package lite-dev-server are vulnerable to Directory Traversal due to missing input sanitization and sandboxes being employed to the <code>req.url</code> user input that is passed to the server code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25895\">https://nvd.nist.gov/vuln/detail/CVE-2022-25895</a></li>\n<li><a href=\"https://gist.github.com/lirantal/0f8a48c3f5ac581ce73123abe9f7f120\">https://gist.github.com/lirantal/0f8a48c3f5ac581ce73123abe9f7f120</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-LITEDEVSERVER-3153718\">https://security.snyk.io/vuln/SNYK-JS-LITEDEVSERVER-3153718</a></li>\n<li><a href=\"https://github.com/shadowwzw/lite-dev-server/blob/master/src/server.js#23L134\">https://github.com/shadowwzw/lite-dev-server/blob/master/src/server.js#23L134</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pppv-ch8p-rp2w\">https://github.com/advisories/GHSA-pppv-ch8p-rp2w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pppv-ch8p-rp2w",
            "title": "[lite-dev-server] lite-dev-server vulnerable to Directory Traversal",
            "date_modified": "2022-12-27T17:55:22.000Z",
            "date_published": "2022-12-21T06:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pppv-ch8p-rp2w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>All versions of package safe-eval are vulnerable to Prototype Pollution which allows an attacker to add or modify properties of the Object.prototype.Consolidate when using the function safeEval. This is because the function uses vm variable, leading an attacker to modify properties of the Object.prototype.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25904\">https://nvd.nist.gov/vuln/detail/CVE-2022-25904</a></li>\n<li><a href=\"https://github.com/hacksparrow/safe-eval/issues/26\">https://github.com/hacksparrow/safe-eval/issues/26</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-JS-SAFEEVAL-3175701\">https://security.snyk.io/vuln/SNYK-JS-SAFEEVAL-3175701</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-33vh-7x8q-mg35\">https://github.com/advisories/GHSA-33vh-7x8q-mg35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-33vh-7x8q-mg35",
            "title": "[safe-eval] safe-eval vulnerable to Prototype Pollution",
            "date_modified": "2022-12-20T17:38:42.000Z",
            "date_published": "2022-12-20T06:30:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-33vh-7x8q-mg35"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}