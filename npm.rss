<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-08-12T06:01:40.687Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[node-worker-threads-pool] SUCHMOKUO node-worker-threads-pool denial of service Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7vxc-q7rv-qfj8</id>
        <link href="https://github.com/advisories/GHSA-7vxc-q7rv-qfj8"/>
        <updated>2023-08-11T22:16:45.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in StaticPool in SUCHMOKUO node-worker-threads-pool version 1.4.3 that allows attackers to cause a denial of service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29057">https://nvd.nist.gov/vuln/detail/CVE-2021-29057</a></li>
<li><a href="https://github.com/SUCHMOKUO/node-worker-threads-pool/issues/20">https://github.com/SUCHMOKUO/node-worker-threads-pool/issues/20</a></li>
<li><a href="https://github.com/advisories/GHSA-7vxc-q7rv-qfj8">https://github.com/advisories/GHSA-7vxc-q7rv-qfj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7vxc-q7rv-qfj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T15:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hellojs] MrSwitch hello.js vulnerable to prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-g3vf-47fv-8f3c</id>
        <link href="https://github.com/advisories/GHSA-g3vf-47fv-8f3c"/>
        <updated>2023-08-11T22:08:43.000Z</updated>
        <content type="html"><![CDATA[<p>A prototype pollution vulnerability in MrSwitch hello.js prior to version 1.18.8 allows remote attackers to execute arbitrary code via <code>hello.utils.extend</code> function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26505">https://nvd.nist.gov/vuln/detail/CVE-2021-26505</a></li>
<li><a href="https://github.com/MrSwitch/hello.js/issues/634">https://github.com/MrSwitch/hello.js/issues/634</a></li>
<li><a href="https://github.com/MrSwitch/hello.js/commit/7ab50aeff2d41991f08d4ad6c0481125eea8f6b7">https://github.com/MrSwitch/hello.js/commit/7ab50aeff2d41991f08d4ad6c0481125eea8f6b7</a></li>
<li><a href="https://github.com/advisories/GHSA-g3vf-47fv-8f3c">https://github.com/advisories/GHSA-g3vf-47fv-8f3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g3vf-47fv-8f3c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T15:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[braft-editor] Margox Braft-Editor Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jfrf-vv54-j2jg</id>
        <link href="https://github.com/advisories/GHSA-jfrf-vv54-j2jg"/>
        <updated>2023-08-11T22:06:57.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting (XSS) vulnerability in margox braft-editor version 2.3.8, allows remote attackers to execute arbitrary code via the embed media feature.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-27524">https://nvd.nist.gov/vuln/detail/CVE-2021-27524</a></li>
<li><a href="https://github.com/margox/braft-editor/issues/880">https://github.com/margox/braft-editor/issues/880</a></li>
<li><a href="https://github.com/advisories/GHSA-jfrf-vv54-j2jg">https://github.com/advisories/GHSA-jfrf-vv54-j2jg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jfrf-vv54-j2jg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T15:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts vulnerable to Improper Escaping of Output]]></title>
        <id>https://github.com/advisories/GHSA-g4vp-m682-qqmp</id>
        <link href="https://github.com/advisories/GHSA-g4vp-m682-qqmp"/>
        <updated>2023-08-11T19:00:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using <code>ERC2771Context</code> along with a custom trusted forwarder may see <code>_msgSender</code> return <code>address(0)</code> in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for <code>MinimalForwarder</code> from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in v4.9.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40014">https://nvd.nist.gov/vuln/detail/CVE-2023-40014</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3</a></li>
<li><a href="https://github.com/advisories/GHSA-g4vp-m682-qqmp">https://github.com/advisories/GHSA-g4vp-m682-qqmp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4vp-m682-qqmp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T19:00:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts vulnerable to Improper Escaping of Output]]></title>
        <id>https://github.com/advisories/GHSA-g4vp-m682-qqmp</id>
        <link href="https://github.com/advisories/GHSA-g4vp-m682-qqmp"/>
        <updated>2023-08-11T19:00:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenZeppelin Contracts is a library for secure smart contract development. Starting in version 4.0.0 and prior to version 4.9.3, contracts using <code>ERC2771Context</code> along with a custom trusted forwarder may see <code>_msgSender</code> return <code>address(0)</code> in calls that originate from the forwarder with calldata shorter than 20 bytes. This combination of circumstances does not appear to be common, in particular it is not the case for <code>MinimalForwarder</code> from OpenZeppelin Contracts, or any deployed forwarder the team is aware of, given that the signer address is appended to all calls that originate from these forwarders.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in v4.9.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-g4vp-m682-qqmp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40014">https://nvd.nist.gov/vuln/detail/CVE-2023-40014</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4481</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484">https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4484</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/9445f96223041abf2bf08daa56f8da50b674cbcd</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/e4435eed757d4309436b1e06608e97b6d6e2fdb5</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.9.3/CHANGELOG.md</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.3</a></li>
<li><a href="https://github.com/advisories/GHSA-g4vp-m682-qqmp">https://github.com/advisories/GHSA-g4vp-m682-qqmp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4vp-m682-qqmp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T19:00:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[critters] Critters Cross-site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cx3j-qqxj-9597</id>
        <link href="https://github.com/advisories/GHSA-cx3j-qqxj-9597"/>
        <updated>2023-08-11T18:57:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Critters version 0.0.17-0.0.19 have an issue when parsing the HTML which leads to a potential <a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a> bug.</p>
<h3 id="patches">Patches</h3>
<p>The bug has been fixed in <code>v0.0.20</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrading Critters version to <code>&gt;0.0.20</code> is the easiest fix. This is a non breaking version upgrade so we recommend all users to use <code>v0.0.20</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GoogleChromeLabs/critters/security/advisories/GHSA-cx3j-qqxj-9597">https://github.com/GoogleChromeLabs/critters/security/advisories/GHSA-cx3j-qqxj-9597</a></li>
<li><a href="https://github.com/GoogleChromeLabs/critters/pull/133">https://github.com/GoogleChromeLabs/critters/pull/133</a></li>
<li><a href="https://github.com/GoogleChromeLabs/critters/commit/7757902c9e0b3285d516359b3cb602cd9d50d80e">https://github.com/GoogleChromeLabs/critters/commit/7757902c9e0b3285d516359b3cb602cd9d50d80e</a></li>
<li><a href="https://github.com/advisories/GHSA-cx3j-qqxj-9597">https://github.com/advisories/GHSA-cx3j-qqxj-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cx3j-qqxj-9597</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-11T18:57:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ensdomains/ens-contracts] .eth registrar controller can shorten the duration of registered names]]></title>
        <id>https://github.com/advisories/GHSA-rrxv-q8m4-wch3</id>
        <link href="https://github.com/advisories/GHSA-rrxv-q8m4-wch3"/>
        <updated>2023-08-10T22:10:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>According to the documentation, controllers are allowed to register new domains and extend the expiry of existing domains, but they cannot change the ownership or reduce the expiration time of existing domains. However, a preliminary analysis suggests that an attacker-controlled controller may be able to reduce the expiration time of existing domains due to an integer overflow in the renew function.</p>
<p>The vulnerability resides in the following GitHub repository: <a href="https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a> </p>
<p>The vulnerable line of code is:</p>
<pre><code class="language-js">require(
            expiries[id] + duration + GRACE_PERIOD &gt; duration + GRACE_PERIOD
        ); // Prevent future overflow
</code></pre>
<p>In this code snippet, the <code>duration</code> variable is user-supplied, making it possible to provide a value that would cause an overflow on both sides of the '&gt;' expression, ultimately rendering the condition true. Specifically, when the duration is set to <code>2^256 - GRACE_PERIOD</code>, the subsequent line <code>expiries[id] += duration;</code> also experiences an overflow, as <code>expiries[id]</code> is greater than <code>GRACE_PERIOD</code>. This results in the reduction of <code>expiries[id]</code> by <code>GRACE_PERIOD</code>. By repeatedly calling the renew function, an attacker could potentially force the expiration of an ENS record.</p>
<p>You can find the PoC included in the attached document. To execute the test, please use the following command:</p>
<pre><code>forge test -vvv --match-contract RegistrarExploit --fork-url &lt;alchemy_url&gt;
</code></pre>
<p>Replace <code>&lt;alchemy_url&gt;</code> with your Alchemy API URL. This command will run the Foundry test file and demonstrate the potential vulnerability.</p>
<h3 id="impact">Impact</h3>
<p>If successfully exploited, this vulnerability would enable attackers to force the expiration of any ENS record, ultimately allowing them to claim the affected domains for themselves.</p>
<p>Currently, it would require a malicious DAO to exploit it. Nevertheless, any vulnerability present in the controllers could potentially render this issue exploitable in the future.</p>
<p>An additional concern is the possibility of renewal discounts. Should ENS decide to implement a system that offers unlimited .eth domains for a fixed fee in the future, the vulnerability could become exploitable by any user due to the reduced attack cost.</p>
<h3 id="patches">Patches</h3>
<p>A mitigation is being developed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As long as registration cost remains linear or superlinear based on registration duration, or limited to a reasonable maximum (eg, 1 million years), this vulnerability could only be exploited by a malicious DAO. The interim workaround is thus to take no action.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3">https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3</a></li>
<li><a href="https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca">https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca</a></li>
<li><a href="https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38698">https://nvd.nist.gov/vuln/detail/CVE-2023-38698</a></li>
<li><a href="https://github.com/advisories/GHSA-rrxv-q8m4-wch3">https://github.com/advisories/GHSA-rrxv-q8m4-wch3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrxv-q8m4-wch3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-01T19:48:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@opentelemetry/instrumentation] Unsanitized user controlled input in module generation]]></title>
        <id>https://github.com/advisories/GHSA-f8pq-3926-8gx5</id>
        <link href="https://github.com/advisories/GHSA-f8pq-3926-8gx5"/>
        <updated>2023-08-09T20:59:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The <code>import-in-the-middle</code> loader used by <code>@opentelemetry/instrumentation</code> works by generating a wrapper module on the fly. The wrapper uses the module specifier to load the original module and add some wrapping code. It allows for remote code execution in cases where an application passes user-supplied input directly to an <code>import()</code> function.</p>
<h2 id="patches">Patches</h2>
<p>This vulnerability has been patched in <code>@opentelemetry/instrumentation</code> version <code>0.41.2</code></p>
<h2 id="workarounds">Workarounds</h2>
<ul>
<li>Do not pass any user-supplied input to <code>import()</code>. Instead, verify it against a set of allowed values.</li>
<li>If using <code>@opentelemetry/instrumentation</code> with support for EcmaScript Modules is not needed, ensure that none of the following options are set (either via command-line or the <code>NODE_OPTIONS</code> environment variable):</li>
</ul>
<pre><code>--experimental-loader=@opentelemetry/instrumentation/hook.mjs
--experimental-loader @opentelemetry/instrumentation/hook.mjs
--loader=import-in-the-middle/hook.mjs
--loader import-in-the-middle/hook.mjs
</code></pre>
<h2 id="references">References</h2>
<ul>
<li><a href="https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967">https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5">https://github.com/open-telemetry/opentelemetry-js/security/advisories/GHSA-f8pq-3926-8gx5</a></li>
<li><a href="https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28">https://github.com/open-telemetry/opentelemetry-js/commit/ffe641c08c69f41ca8d292221dc1804d511efb28</a></li>
<li><a href="https://github.com/advisories/GHSA-f8pq-3926-8gx5">https://github.com/advisories/GHSA-f8pq-3926-8gx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8pq-3926-8gx5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-09T20:59:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-09T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nguniversal/common] Angular critical CSS inlining Cross-site Scripting Vulnerability Advisory]]></title>
        <id>https://github.com/advisories/GHSA-r3hf-q8q7-fv2p</id>
        <link href="https://github.com/advisories/GHSA-r3hf-q8q7-fv2p"/>
        <updated>2023-08-09T12:51:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Angular Universal applications on 16.1.0 and 16.1.1 using critical CSS inlining are vulnerable to a <a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a> attack where an attacker can trick another user into visiting a page which injects malicious JavaScript.</p>
<p>Angular CLI applications without Universal do perform critical CSS inlining as well, however exploiting this requires a malicious actor to already have access to modify source code directly.</p>
<h3 id="patches">Patches</h3>
<p><code>@nguniversal/common</code> should be upgraded to 16.1.2 or higher. 16.2.0-rc.0 is safe.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The easiest solution is likely to upgrade Universal to 16.1.2 or downgrade to 16.0.x or lower. Alternatively you can <a href="https://docs.npmjs.com/cli/v9/configuring-npm/package-json#overrides">override</a> specifically the <code>critters</code> dependency with version <code>0.0.20</code> in your <code>package.json</code>.</p>
<pre><code class="language-json">{
  "overrides": {
    "critters": "0.0.20"
  }
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://blog.angular.io/notice-of-xss-issue-affecting-angular-universal-16-1-0-16-1-1-95dbae068f">Angular Blog Post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p">https://github.com/angular/universal/security/advisories/GHSA-r3hf-q8q7-fv2p</a></li>
<li><a href="https://github.com/advisories/GHSA-r3hf-q8q7-fv2p">https://github.com/advisories/GHSA-r3hf-q8q7-fv2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r3hf-q8q7-fv2p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-09T12:51:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[exec-local-bin] exec-local-bin vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-f259-h6m8-hm8m</id>
        <link href="https://github.com/advisories/GHSA-f259-h6m8-hm8m"/>
        <updated>2023-08-08T22:04:54.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package exec-local-bin before 1.2.0 are vulnerable to Command Injection via the <code>theProcess()</code> functionality due to improper user-input sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25923">https://nvd.nist.gov/vuln/detail/CVE-2022-25923</a></li>
<li><a href="https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624">https://github.com/saeedseyfi/exec-local-bin/commit/d425866375c85038133a6f79db2aac66c0a72624</a></li>
<li><a href="https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9">https://github.com/saeedseyfi/exec-local-bin/blob/92db00bde9d6e2d83410849f898df12f075b73b0/index.js%23L9</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956">https://security.snyk.io/vuln/SNYK-JS-EXECLOCALBIN-3157956</a></li>
<li><a href="https://github.com/advisories/GHSA-f259-h6m8-hm8m">https://github.com/advisories/GHSA-f259-h6m8-hm8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f259-h6m8-hm8m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-06T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shescape] Inefficient Regular Expression Complexity in shescape ]]></title>
        <id>https://github.com/advisories/GHSA-cr84-xvw4-qx3c</id>
        <link href="https://github.com/advisories/GHSA-cr84-xvw4-qx3c"/>
        <updated>2023-08-08T21:24:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This impacts users that use shescape to escape arguments:</p>
<ul>
<li>for the Unix shell Bash, or any not-officially-supported Unix shell;</li>
<li>using the <code>escape</code> or <code>escapeAll</code> functions with the <code>interpolation</code> option set to <code>true</code>.</li>
</ul>
<p>An attacker can cause polynomial backtracking in terms of the input string length due to a Regular Expression in shescape that is vulnerable to Regular Expression Denial of Service (ReDoS). Example:</p>
<pre><code class="language-javascript">import * as shescape from "shescape";

/* 1. Prerequisites */
const options = {
  interpolation: true,
  // and
  shell: "/bin/bash",
  // or
  shell: "some-not-officially-supported-shell",
  // or
  shell: undefined, // Only if the system's default shell is bash or an unsupported shell.
};

/* 2. Attack */
let userInput = '{,'.repeat(150_000); // polynomial backtracking

/* 3. Usage */
shescape.escape(userInput, options);
// or
shescape.escapeAll([userInput], options);
</code></pre>
<h3 id="patches">Patches</h3>
<p>This bug has been patched in <a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1">v1.6.1</a> which you can upgrade to now. No further changes required.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Alternatively, a maximum length can be enforced on input strings to shescape to reduce the impact of the vulnerability. It is not recommended to try and detect vulnerable input strings, as the logic for this may end up being vulnerable to ReDoS itself.</p>
<h3 id="references">References</h3>
<ul>
<li>Shescape commit <a href="https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9">552e8ea</a></li>
<li>Shescape Release <a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1">v1.6.1</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Comment on commit <a href="https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9">552e8ea</a></li>
<li>Open an issue at <a href="https://github.com/ericcornelissen/shescape/issues?q=is%3Aissue+is%3Aopen">https://github.com/ericcornelissen/shescape/issues</a> (New issue &gt; Question &gt; Get started)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ericcornelissen/shescape/security/advisories/GHSA-cr84-xvw4-qx3c">https://github.com/ericcornelissen/shescape/security/advisories/GHSA-cr84-xvw4-qx3c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25918">https://nvd.nist.gov/vuln/detail/CVE-2022-25918</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9">https://github.com/ericcornelissen/shescape/commit/552e8eab56861720b1d4e5474fb65741643358f9</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/blob/main/src/unix.js%23L52">https://github.com/ericcornelissen/shescape/blob/main/src/unix.js%23L52</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1">https://github.com/ericcornelissen/shescape/releases/tag/v1.6.1</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-SHESCAPE-3061108">https://security.snyk.io/vuln/SNYK-JS-SHESCAPE-3061108</a></li>
<li><a href="https://github.com/advisories/GHSA-cr84-xvw4-qx3c">https://github.com/advisories/GHSA-cr84-xvw4-qx3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cr84-xvw4-qx3c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-25T22:27:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zip-local] Exposure of Resource to Wrong Sphere in Zip-Local]]></title>
        <id>https://github.com/advisories/GHSA-wxj7-97fp-j53j</id>
        <link href="https://github.com/advisories/GHSA-wxj7-97fp-j53j"/>
        <updated>2023-08-08T20:15:02.000Z</updated>
        <content type="html"><![CDATA[<p>The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23484">https://nvd.nist.gov/vuln/detail/CVE-2021-23484</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085">https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365">https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477">https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b">https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b</a></li>
<li><a href="https://github.com/advisories/GHSA-wxj7-97fp-j53j">https://github.com/advisories/GHSA-wxj7-97fp-j53j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxj7-97fp-j53j</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-01T00:46:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[import-in-the-middle] Unsanitized user controlled input in module generation]]></title>
        <id>https://github.com/advisories/GHSA-5r27-rw8r-7967</id>
        <link href="https://github.com/advisories/GHSA-5r27-rw8r-7967"/>
        <updated>2023-08-08T19:26:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>import-in-the-middle</code> loader works by generating a wrapper module on the fly. The wrapper uses the module specifier to load the original module and add some wrapping code. It allows for remote code execution in cases where an application passes user-supplied input directly to an import() function.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in <code>import-in-the-middle</code> version 1.4.2</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Do not pass any user-supplied input to <code>import()</code>. Instead, verify it against a set of allowed values.</li>
<li>If using <code>import-in-the-middle</code> and support for EcmaScript Modules is not needed, ensure that none of the following options are set (either via command-line or the <code>NODE_OPTIONS</code> environment variable):</li>
</ul>
<pre><code>--loader=import-in-the-middle/hook.mjs
--loader import-in-the-middle/hook.mjs
</code></pre>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@datadoghq.com">security@datadoghq.com</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967">https://github.com/DataDog/import-in-the-middle/security/advisories/GHSA-5r27-rw8r-7967</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38704">https://nvd.nist.gov/vuln/detail/CVE-2023-38704</a></li>
<li><a href="https://github.com/DataDog/import-in-the-middle/commit/2531cdd9d1d73f9eaa87c16967f60cb276c1971b">https://github.com/DataDog/import-in-the-middle/commit/2531cdd9d1d73f9eaa87c16967f60cb276c1971b</a></li>
<li><a href="https://github.com/advisories/GHSA-5r27-rw8r-7967">https://github.com/advisories/GHSA-5r27-rw8r-7967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r27-rw8r-7967</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-08T19:26:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uploader-plugin] Malicious Package in uploader-plugin]]></title>
        <id>https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</id>
        <link href="https://github.com/advisories/GHSA-fx6f-fpfv-5hmc"/>
        <updated>2023-08-05T05:02:38.000Z</updated>
        <content type="html"><![CDATA[<p>Version 1.0.2 of <code>uploader-plugin</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>Remove the package from your environment. It's also recommended to evaluate your application to determine whether or not user data was compromised.</p>
<p>Users may consider downgrading to version 1.0.1</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/1100">https://www.npmjs.com/advisories/1100</a></li>
<li><a href="https://github.com/advisories/GHSA-fx6f-fpfv-5hmc">https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-03T19:10:12.000Z</published>
    </entry>
</feed>