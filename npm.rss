<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-02-07T01:20:51.043Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@devicefarmer/stf] DeviceFarmer stf uses DES-ECB]]></title>
        <id>https://github.com/advisories/GHSA-7xm8-wjq7-88r5</id>
        <link href="https://github.com/advisories/GHSA-7xm8-wjq7-88r5"/>
        <updated>2024-02-06T20:29:20.000Z</updated>
        <content type="html"><![CDATA[<p>DeviceFarmer stf v3.6.6 suffers from Use of a Broken or Risky Cryptographic Algorithm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51839">https://nvd.nist.gov/vuln/detail/CVE-2023-51839</a></li>
<li><a href="https://github.com/DeviceFarmer/stf/issues/736">https://github.com/DeviceFarmer/stf/issues/736</a></li>
<li><a href="https://github.com/DeviceFarmer/stf">https://github.com/DeviceFarmer/stf</a></li>
<li><a href="https://github.com/tianjk99/Cryptographic-Misuses/blob/main/CVE-2023-51839.md">https://github.com/tianjk99/Cryptographic-Misuses/blob/main/CVE-2023-51839.md</a></li>
<li><a href="https://github.com/DeviceFarmer/stf/blob/a6b5f18941d0de5929f9c24c3ce3e9c13317a653/lib/util/vncauth.js#L35">https://github.com/DeviceFarmer/stf/blob/a6b5f18941d0de5929f9c24c3ce3e9c13317a653/lib/util/vncauth.js#L35</a></li>
<li><a href="https://github.com/advisories/GHSA-7xm8-wjq7-88r5">https://github.com/advisories/GHSA-7xm8-wjq7-88r5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xm8-wjq7-88r5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-29T21:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulsoft-dashboards-js] Stimulsoft Dashboard.JS directory traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gfqf-9w98-7jmx</id>
        <link href="https://github.com/advisories/GHSA-gfqf-9w98-7jmx"/>
        <updated>2024-02-06T18:23:20.000Z</updated>
        <content type="html"><![CDATA[<p>Directory Traversal vulnerability in Stimulsoft GmbH Stimulsoft Dashboard.JS before v.2024.1.3 allows a remote attacker to execute arbitrary code via a crafted payload to the fileName parameter of the Save function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24398">https://nvd.nist.gov/vuln/detail/CVE-2024-24398</a></li>
<li><a href="https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R">https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R</a></li>
<li><a href="https://cves.at/posts/cve-2024-24398/writeup/">https://cves.at/posts/cve-2024-24398/writeup/</a></li>
<li><a href="http://stimulsoft.com">http://stimulsoft.com</a></li>
<li><a href="https://github.com/advisories/GHSA-gfqf-9w98-7jmx">https://github.com/advisories/GHSA-gfqf-9w98-7jmx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gfqf-9w98-7jmx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-06T00:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulsoft-dashboards-js] Stimulsoft Dashboard.JS Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9m6m-c64r-w4f4</id>
        <link href="https://github.com/advisories/GHSA-9m6m-c64r-w4f4"/>
        <updated>2024-02-05T22:58:57.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Stimulsoft GmbH Stimulsoft Dashboard.JS before v.2024.1.2 allows a remote attacker to execute arbitrary code via a crafted payload to the search bar component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24396">https://nvd.nist.gov/vuln/detail/CVE-2024-24396</a></li>
<li><a href="https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R">https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R</a></li>
<li><a href="https://cves.at/posts/cve-2024-24396/writeup/">https://cves.at/posts/cve-2024-24396/writeup/</a></li>
<li><a href="http://stimulsoft.com">http://stimulsoft.com</a></li>
<li><a href="https://github.com/advisories/GHSA-9m6m-c64r-w4f4">https://github.com/advisories/GHSA-9m6m-c64r-w4f4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9m6m-c64r-w4f4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-05T21:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulsoft-dashboards-js] Stimulsoft Dashboard.JS Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9cgf-pxwq-2cpw</id>
        <link href="https://github.com/advisories/GHSA-9cgf-pxwq-2cpw"/>
        <updated>2024-02-05T22:33:49.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Stimulsoft GmbH Stimulsoft Dashboard.JS before v.2024.1.2 allows a remote attacker to execute arbitrary code via a crafted payload to the ReportName field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24397">https://nvd.nist.gov/vuln/detail/CVE-2024-24397</a></li>
<li><a href="https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R">https://cloud-trustit.spp.at/s/Pi78FFazHamJQ5R</a></li>
<li><a href="https://cves.at/posts/cve-2024-24397/writeup/">https://cves.at/posts/cve-2024-24397/writeup/</a></li>
<li><a href="http://stimulsoft.com">http://stimulsoft.com</a></li>
<li><a href="https://github.com/advisories/GHSA-9cgf-pxwq-2cpw">https://github.com/advisories/GHSA-9cgf-pxwq-2cpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cgf-pxwq-2cpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-05T18:31:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yarn] Yarn untrusted search path vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mpwj-fcr6-x34c</id>
        <link href="https://github.com/advisories/GHSA-mpwj-fcr6-x34c"/>
        <updated>2024-02-05T20:20:30.000Z</updated>
        <content type="html"><![CDATA[<p>An untrusted search path vulnerability was found in Yarn. When a victim runs certain Yarn commands in a directory with attacker-controlled content, malicious commands could be executed in unexpected ways.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4435">https://nvd.nist.gov/vuln/detail/CVE-2021-4435</a></li>
<li><a href="https://github.com/yarnpkg/yarn/commit/67fcce88935e45092ffa2674c08053f1ef5268a1">https://github.com/yarnpkg/yarn/commit/67fcce88935e45092ffa2674c08053f1ef5268a1</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2021-4435">https://access.redhat.com/security/cve/CVE-2021-4435</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2262284">https://bugzilla.redhat.com/show_bug.cgi?id=2262284</a></li>
<li><a href="https://github.com/yarnpkg/yarn/releases/tag/v1.22.13">https://github.com/yarnpkg/yarn/releases/tag/v1.22.13</a></li>
<li><a href="https://github.com/advisories/GHSA-mpwj-fcr6-x34c">https://github.com/advisories/GHSA-mpwj-fcr6-x34c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mpwj-fcr6-x34c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-04T21:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-app-api] @backstage/backend-app-api leaks GitLab access tokens]]></title>
        <id>https://github.com/advisories/GHSA-86rg-pf4c-5grg</id>
        <link href="https://github.com/advisories/GHSA-86rg-pf4c-5grg"/>
        <updated>2024-02-05T17:59:42.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in the Red Hat Developer Hub (RHDH). The catalog-import function leaks GitLab access tokens on the frontend when the base64 encoded GitLab token includes a newline at the end of the string. The sanitized error can display on the frontend, including the raw access token. Upon gaining access to this token and depending on permissions, an attacker could push malicious code to repositories, delete resources in Git, revoke or generate new keys, and sign code illegitimately.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6944">https://nvd.nist.gov/vuln/detail/CVE-2023-6944</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-6944">https://access.redhat.com/security/cve/CVE-2023-6944</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2255204">https://bugzilla.redhat.com/show_bug.cgi?id=2255204</a></li>
<li><a href="https://github.com/backstage/backstage/issues/21503">https://github.com/backstage/backstage/issues/21503</a></li>
<li><a href="https://github.com/backstage/backstage/pull/21582">https://github.com/backstage/backstage/pull/21582</a></li>
<li><a href="https://github.com/backstage/backstage/commit/0382db60f6c8e8715a702bde6408ad10a48d8e11">https://github.com/backstage/backstage/commit/0382db60f6c8e8715a702bde6408ad10a48d8e11</a></li>
<li><a href="https://github.com/backstage/backstage/blob/master/docs/releases/v1.21.0-next.2-changelog.md">https://github.com/backstage/backstage/blob/master/docs/releases/v1.21.0-next.2-changelog.md</a></li>
<li><a href="https://github.com/advisories/GHSA-86rg-pf4c-5grg">https://github.com/advisories/GHSA-86rg-pf4c-5grg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-86rg-pf4c-5grg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-04T12:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zmarkdown] Zmarkdown Server-Side Request Forgery (SSRF) in remark-download-images]]></title>
        <id>https://github.com/advisories/GHSA-mf74-qq7w-6j7v</id>
        <link href="https://github.com/advisories/GHSA-mf74-qq7w-6j7v"/>
        <updated>2024-02-03T00:38:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A major blind SSRF has been found in <code>remark-images-download</code>, which allowed
for requests to be made to neighboring servers on local IP ranges.
The issue came from a loose filtering of URLs inside the module.</p>
<p>Imagine a server running on a private network <code>192.168.1.0/24</code>.
A private service serving images is running on <code>192.168.1.2</code>, and
is not expected to be accessed by users. A machine is running
<code>remark-images-download</code> on the neighboring <code>192.168.1.3</code> host.
An user enters the following Markdown:</p>
<pre><code class="language-markdown">![](http://192.168.1.2/private-img.png)
</code></pre>
<p>The image is downloaded by the server and included inside the resulting
document. Hence, the user has access to the private image.</p>
<p>It has been corrected by preventing images downloads from
local IP ranges, both in IPv4 and IPv6.
To avoid malicious domain names, resolved local IPs from are also
forbidden inside the module.
This vulnerability impact is moderate, as it is can allow access to
unexposed documents on the local network, and is very easy
to exploit.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in version 3.1.0.
If impacted, you should update to this version as soon as possible.</p>
<p>Please note that a minor version has been released instead of a bugfix.
This is due to a new option included to prevent another vulnerability,
upgrading to the new version will not break compatibility.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workaround is known, the package should be upgraded.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/zestedesavoir/zmarkdown/issues">ZMarkdown</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mf74-qq7w-6j7v">https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mf74-qq7w-6j7v</a></li>
<li><a href="https://github.com/advisories/GHSA-mf74-qq7w-6j7v">https://github.com/advisories/GHSA-mf74-qq7w-6j7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mf74-qq7w-6j7v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-03T00:38:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zmarkdown] Local File Inclusion vulnerability in zmarkdown]]></title>
        <id>https://github.com/advisories/GHSA-mq6v-w35g-3c97</id>
        <link href="https://github.com/advisories/GHSA-mq6v-w35g-3c97"/>
        <updated>2024-02-03T00:37:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A minor Local File Inclusion vulnerability has been found in
<code>zmarkdown</code>, which allowed for images with a known path on
the host machine to be included inside a LaTeX document.</p>
<p>To prevent it, a new option has been created that allow to replace
invalid paths with a default image instead of linking the image on the
host directly. <code>zmarkdown</code> has been updated to make this setting the
default.</p>
<p>Every user of <code>zmarkdown</code> is likely impacted, except if
disabling LaTeX generation or images download. Here
is an example of including an image from an invalid path:</p>
<pre><code class="language-markdown">![](/tmp/img.png)
</code></pre>
<p>Will effectively redownload and include the image
found at <code>/tmp/img.png</code>.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability has been patched in version 10.1.3.
If impacted, you should update to this version as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable images downloading, or sanitize paths.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/zestedesavoir/zmarkdown/issues">ZMarkdown</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mq6v-w35g-3c97">https://github.com/zestedesavoir/zmarkdown/security/advisories/GHSA-mq6v-w35g-3c97</a></li>
<li><a href="https://github.com/advisories/GHSA-mq6v-w35g-3c97">https://github.com/advisories/GHSA-mq6v-w35g-3c97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mq6v-w35g-3c97</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-03T00:37:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links]]></title>
        <id>https://github.com/advisories/GHSA-9r2w-394v-53qc</id>
        <link href="https://github.com/advisories/GHSA-9r2w-394v-53qc"/>
        <updated>2024-02-02T23:30:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>
<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\</code> and <code>/</code> characters as path separators, however <code>\</code> is a valid filename character on posix systems.</p>
<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>
<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>
<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>
<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>
<h3 id="patches">Patches</h3>
<p>4.4.16 || 5.0.8 || 6.1.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>
<pre><code class="language-js">const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) =&gt; {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
</code></pre>
<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>
<h3 id="fix">Fix</h3>
<p>The problem is addressed in the following ways:</p>
<ol>
<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\</code> with <code>/</code> on Windows systems, and leaving <code>\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>
<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>
</ol>
<h4 id="caveat">Caveat</h4>
<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>
<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37701">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-5008">https://www.debian.org/security/2021/dsa-5008</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9r2w-394v-53qc">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r2w-394v-53qc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[meshcentral] Ylianst MeshCentral 1.1.16 suffers from Use of a Broken or Risky Cryptographic Algorithm.]]></title>
        <id>https://github.com/advisories/GHSA-v269-rrr6-cx6r</id>
        <link href="https://github.com/advisories/GHSA-v269-rrr6-cx6r"/>
        <updated>2024-02-02T20:17:32.000Z</updated>
        <content type="html"><![CDATA[<p>Ylianst MeshCentral 1.1.16 suffers from Use of a Broken or Risky Cryptographic Algorithm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51838">https://nvd.nist.gov/vuln/detail/CVE-2023-51838</a></li>
<li><a href="https://github.com/Ylianst/MeshCentral/tree/master">https://github.com/Ylianst/MeshCentral/tree/master</a></li>
<li><a href="https://github.com/tianjk99/Cryptographic-Misuses/blob/main/Bug_MeshCentral.md">https://github.com/tianjk99/Cryptographic-Misuses/blob/main/Bug_MeshCentral.md</a></li>
<li><a href="https://github.com/tianjk99/Cryptographic-Misuses/blob/main/CVE-2023-51838.md">https://github.com/tianjk99/Cryptographic-Misuses/blob/main/CVE-2023-51838.md</a></li>
<li><a href="https://github.com/advisories/GHSA-v269-rrr6-cx6r">https://github.com/advisories/GHSA-v269-rrr6-cx6r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v269-rrr6-cx6r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-02T18:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dash-html-components] Dash apps vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-547x-748v-vp6p</id>
        <link href="https://github.com/advisories/GHSA-547x-748v-vp6p"/>
        <updated>2024-02-02T18:10:52.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dash-core-components before 2.13.0; all versions of the package dash-core-components; versions of the package dash before 2.15.0; all versions of the package dash-html-components; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server.</p>
<p><strong>Note:</strong></p>
<p>This is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21485">https://nvd.nist.gov/vuln/detail/CVE-2024-21485</a></li>
<li><a href="https://github.com/plotly/dash/issues/2729">https://github.com/plotly/dash/issues/2729</a></li>
<li><a href="https://github.com/plotly/dash/pull/2732">https://github.com/plotly/dash/pull/2732</a></li>
<li><a href="https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c">https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c</a></li>
<li><a href="https://github.com/plotly/dash/releases/tag/v2.15.0">https://github.com/plotly/dash/releases/tag/v2.15.0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084">https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337">https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335">https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334">https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336">https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336</a></li>
<li><a href="https://github.com/advisories/GHSA-547x-748v-vp6p">https://github.com/advisories/GHSA-547x-748v-vp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-547x-748v-vp6p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-02T06:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dash-core-components] Dash apps vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-547x-748v-vp6p</id>
        <link href="https://github.com/advisories/GHSA-547x-748v-vp6p"/>
        <updated>2024-02-02T18:10:52.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dash-core-components before 2.13.0; all versions of the package dash-core-components; versions of the package dash before 2.15.0; all versions of the package dash-html-components; versions of the package dash-html-components before 2.0.16 are vulnerable to Cross-site Scripting (XSS) when the href of the a tag is controlled by an adversary. An authenticated attacker who stores a view that exploits this vulnerability could steal the data that's visible to another user who opens that view - not just the data already included on the page, but they could also, in theory, make additional requests and access other data accessible to this user. In some cases, they could also steal the access tokens of that user, which would allow the attacker to act as that user, including viewing other apps and resources hosted on the same server.</p>
<p><strong>Note:</strong></p>
<p>This is only exploitable in Dash apps that include some mechanism to store user input to be reloaded by a different user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21485">https://nvd.nist.gov/vuln/detail/CVE-2024-21485</a></li>
<li><a href="https://github.com/plotly/dash/issues/2729">https://github.com/plotly/dash/issues/2729</a></li>
<li><a href="https://github.com/plotly/dash/pull/2732">https://github.com/plotly/dash/pull/2732</a></li>
<li><a href="https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c">https://github.com/plotly/dash/commit/9920073c9a8619ae8f90fcec1924f2f3a4332a8c</a></li>
<li><a href="https://github.com/plotly/dash/releases/tag/v2.15.0">https://github.com/plotly/dash/releases/tag/v2.15.0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084">https://security.snyk.io/vuln/SNYK-JS-DASHCORECOMPONENTS-6183084</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337">https://security.snyk.io/vuln/SNYK-JS-DASHHTMLCOMPONENTS-6226337</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335">https://security.snyk.io/vuln/SNYK-PYTHON-DASH-6226335</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334">https://security.snyk.io/vuln/SNYK-PYTHON-DASHCORECOMPONENTS-6226334</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336">https://security.snyk.io/vuln/SNYK-PYTHON-DASHHTMLCOMPONENTS-6226336</a></li>
<li><a href="https://github.com/advisories/GHSA-547x-748v-vp6p">https://github.com/advisories/GHSA-547x-748v-vp6p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-547x-748v-vp6p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-02T06:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dset] dset vulnerable to prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-q4xc-7cw8-cgfj</id>
        <link href="https://github.com/advisories/GHSA-q4xc-7cw8-cgfj"/>
        <updated>2024-02-01T21:04:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Prototype pollution vulnerability in 'dset' versions 1.0.0 through 2.0.1 allows attacker to cause a denial of service and may lead to remote code execution.</p>
<h3 id="details">Details</h3>
<p>The NPM module 'dset' can be abused by Prototype Pollution vulnerability since the function ‘export ()' did not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.</p>
<h3 id="poc">PoC</h3>
<p>The export function accepts three arguments <code>obj, keys, val</code>. Due to the absence of validation, at values passed into <code>keys, val</code> arguments, an attacker can supply a malicious value by adjusting the <code>keys</code> value to include the <code>__proto__</code> property. Since there is no validation before assigning property to check whether the assigned <code>keys</code> is the Object's own property or not, the property <code>isAdmin</code> will be directly be assigned to the empty obj({}) thereby polluting the Object prototype. Later in the code, if there is a check to validate <code>isAdmin</code> the valued would be substituted as "true" as it had been polluted.</p>
<pre><code class="language-js">const dset = require('dset');
var obj = {}
console.log("Before : " + obj.isAdmin);
dset(obj, '__proto__.polluted', true);
console.log("After : " + obj.polluted);
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28277">https://nvd.nist.gov/vuln/detail/CVE-2020-28277</a></li>
<li><a href="https://github.com/lukeed/dset/blob/50a6ead172d1466a96035eff00f8eb465ccd050a/src/index.js#L6">https://github.com/lukeed/dset/blob/50a6ead172d1466a96035eff00f8eb465ccd050a/src/index.js#L6</a></li>
<li><a href="https://github.com/lukeed/dset/issues/11">https://github.com/lukeed/dset/issues/11</a></li>
<li><a href="https://github.com/lukeed/dset/commit/2b9ec49e231107b1a83b04a1bc1a66a8d14cea1c">https://github.com/lukeed/dset/commit/2b9ec49e231107b1a83b04a1bc1a66a8d14cea1c</a></li>
<li><a href="https://web.archive.org/web/20210104204657/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28277">https://web.archive.org/web/20210104204657/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28277</a></li>
<li><a href="https://github.com/advisories/GHSA-q4xc-7cw8-cgfj">https://github.com/advisories/GHSA-q4xc-7cw8-cgfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4xc-7cw8-cgfj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:37:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shvl] shvl vulnerable to prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-pqwc-3vhw-qcvq</id>
        <link href="https://github.com/advisories/GHSA-pqwc-3vhw-qcvq"/>
        <updated>2024-02-01T21:00:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Prototype pollution vulnerability in 'shvl' versions 1.0.0 through 2.0.1 allows an attacker to cause a denial of service and may lead to remote code execution.</p>
<h3 id="details">Details</h3>
<p>The NPM module 'shvl' can be abused by Prototype Pollution vulnerability since the function 'set()' did not check for the type of object before assigning value to the property. Due to this flaw an attacker could create a non-existent property or able to manipulate the property which leads to Denial of Service or potentially Remote code execution.</p>
<h3 id="poc-details">PoC Details</h3>
<p>The 'set()' function accepts four arguments <code>object, path, val, obj</code>. Due to the absence of validation, at values passed into <code>path, val</code> arguments, an attacker can supply a malicious value by adjusting the <code>path</code> value to include the <code>__proto__</code> property. Since there is no validation before assigning property to check whether the assigned <code>path</code> is the Object's own property or not, the property <code>isAdmin</code> will be directly be assigned to the empty obj({}) thereby polluting the Object prototype. Later in the code, if there is a check to validate <code>isAdmin</code> the valued would be substituted as "true" as it had been polluted.</p>
<pre><code class="language-js">const shvl = require('shvl');
var obj = {}
console.log("Before : " + obj.isAdmin);
shvl.set(obj, '__proto__.isAdmin', true);
console.log("After : " + obj.isAdmin);
</code></pre>
<h3 id="affected-environments">Affected Environments</h3>
<p>1.0.0-2.0.1</p>
<h3 id="remediation">Remediation</h3>
<p>There are a couple of ways to mitigate prototype pollution vulnerabilities, for example: Most of the cases can be solved by freezing an object which doesn’t allow to add, remove, or change its properties. Validating the JSON input with schema validation, this guarantees that the JSON input contains only predefined attributes. We can change the objects, so they won’t have any prototype association by using “Object.create”.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28278">https://nvd.nist.gov/vuln/detail/CVE-2020-28278</a></li>
<li><a href="https://github.com/robinvdvleuten/shvl/issues/34">https://github.com/robinvdvleuten/shvl/issues/34</a></li>
<li><a href="https://github.com/robinvdvleuten/shvl/pull/36">https://github.com/robinvdvleuten/shvl/pull/36</a></li>
<li><a href="https://github.com/robinvdvleuten/shvl/commit/513c0848774dfb114ad0d0554abf7927cfdd569e">https://github.com/robinvdvleuten/shvl/commit/513c0848774dfb114ad0d0554abf7927cfdd569e</a></li>
<li><a href="https://web.archive.org/web/20210320222933/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28278">https://web.archive.org/web/20210320222933/https://www.whitesourcesoftware.com/vulnerability-database/CVE-2020-28278</a></li>
<li><a href="https://github.com/advisories/GHSA-pqwc-3vhw-qcvq">https://github.com/advisories/GHSA-pqwc-3vhw-qcvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqwc-3vhw-qcvq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:37:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodemailer] nodemailer ReDoS when trying to send a specially crafted email]]></title>
        <id>https://github.com/advisories/GHSA-9h6g-pr28-7cqp</id>
        <link href="https://github.com/advisories/GHSA-9h6g-pr28-7cqp"/>
        <updated>2024-02-01T17:58:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A ReDoS vulnerability occurs when nodemailer tries to parse img files with the parameter <code>attachDataUrls</code> set, causing the stuck of event loop. 
Another flaw was found when nodemailer tries to parse an attachments with a embedded file, causing the stuck of event loop. </p>
<h3 id="details">Details</h3>
<p>Regex: /^data:((?:[^;]<em>;)</em>(?:[^,]<em>)),(.</em>)$/</p>
<p>Path: compile -&gt; getAttachments -&gt; _processDataUrl</p>
<p>Regex: /(&lt;img\b[^&gt;]* src\s*=[\s"']*)(data:([^;]+);[^"'&gt;\s]+)/</p>
<p>Path: _convertDataImages</p>
<h3 id="poc">PoC</h3>
<p><a href="https://gist.github.com/francoatmega/890dd5053375333e40c6fdbcc8c58df6">https://gist.github.com/francoatmega/890dd5053375333e40c6fdbcc8c58df6</a>
<a href="https://gist.github.com/francoatmega/9aab042b0b24968d7b7039818e8b2698">https://gist.github.com/francoatmega/9aab042b0b24968d7b7039818e8b2698</a></p>
<h3 id="impact">Impact</h3>
<p>ReDoS causes the event loop to stuck a specially crafted evil email can cause this problem.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/nodemailer/nodemailer/security/advisories/GHSA-9h6g-pr28-7cqp">https://github.com/nodemailer/nodemailer/security/advisories/GHSA-9h6g-pr28-7cqp</a></li>
<li><a href="https://gist.github.com/francoatmega/890dd5053375333e40c6fdbcc8c58df6">https://gist.github.com/francoatmega/890dd5053375333e40c6fdbcc8c58df6</a></li>
<li><a href="https://gist.github.com/francoatmega/9aab042b0b24968d7b7039818e8b2698">https://gist.github.com/francoatmega/9aab042b0b24968d7b7039818e8b2698</a></li>
<li><a href="https://github.com/nodemailer/nodemailer/commit/dd8f5e8a4ddc99992e31df76bcff9c590035cd4a">https://github.com/nodemailer/nodemailer/commit/dd8f5e8a4ddc99992e31df76bcff9c590035cd4a</a></li>
<li><a href="https://github.com/advisories/GHSA-9h6g-pr28-7cqp">https://github.com/advisories/GHSA-9h6g-pr28-7cqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9h6g-pr28-7cqp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-31T22:42:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@lobehub/chat] @lobehub/chat vulnerable to unauthorized access to plugins]]></title>
        <id>https://github.com/advisories/GHSA-pf55-fj96-xf37</id>
        <link href="https://github.com/advisories/GHSA-pf55-fj96-xf37"/>
        <updated>2024-01-31T20:25:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description:</h3>
<p>When the application is password-protected (deployed with the <code>ACCESS_CODE</code> option), it is possible to access plugins without proper authorization (without password).
###	Proof-of-Concept:
Let’s suppose that application has been deployed with following command:
<code>sudo docker run -d -p 3210:3210   -e OPENAI_API_KEY=sk-[REDACTED] -e ACCESS_CODE=TEST123   --name lobe-chat   lobehub/lobe-chat</code>
Due to the utilization of the <code>ACCESS_CODE</code>,  access to the chat is possible only after entering the password:</p>
<p><img alt="image" src="https://raw.githubusercontent.com/dastaj/assets/main/others/image.png"></p>
<p>However, it is possible to interact with chat plugins without entering the <code>ACCESS_CODE</code>. 
Example HTTP request:</p>
<pre><code>POST /api/plugin/gateway HTTP/1.1
Host: localhost:3210
Content-Length: 1276

{"apiName":"checkWeatherUsingGET","arguments":"{\n  \"location\": \"London\"\n}","identifier":"WeatherGPT","type":"default","manifest":{"api":[{"description":"Get current weather information","name":"checkWeatherUsingGET","parameters":{"properties":{"location":{"type":"string"}},"required":["location"],"type":"object"}}],"homepage":"https://weathergpt.vercel.app/legal","identifier":"WeatherGPT","meta":{"avatar":"https://openai-collections.chat-plugin.lobehub.com/weather-gpt/logo.webp","description":"Get current weather information for a specific location.","title":"WeatherGPT"},"openapi":"https://openai-collections.chat-plugin.lobehub.com/weather-gpt/openapi.json","systemRole":"Use the WeatherGPT plugin to automatically fetch current weather information for a specific location when it's being generated by the ChatGPT assistant. The plugin will return weather data, including temperature, wind speed, humidity, and other relevant information, as well as a link to a page that has all the information. Links will always be returned and should be shown to the user. The weather data can be used to provide users with up-to-date and accurate weather information for their desired location.","type":"default","version":"1","settings":{"properties":{},"type":"object"}}}
</code></pre>
<p>HTTP response:</p>
<pre><code>HTTP/1.1 200 OK
[...]
{"location":{"name":"London","region":"City of London, Greater London","country":"United Kingdom","lat":51.52,"lon":-0.11,"tz_id":"Europe/London","localtime_epoch":1706379026,"localtime":"2024-01-27 18:10"},"current":{"last_updated_epoch":1706378400,"last_updated":"2024-01-27 18:00","temp_c":6,"temp_f":42.8,"is_day":0,"condition":{"text":"Clear","icon":"//cdn.weatherapi.com/weather/64x64/night/113.png","code":1000},"wind_mph":4.3,"wind_kph":6.8,"wind_degree":170,"wind_dir":"S","pressure_mb":1031,"pressure_in":30.45,"precip_mm":0,"precip_in":0,"humidity":81,"cloud":0,"feelslike_c":3.8,"feelslike_f":38.9,"vis_km":10,"vis_miles":6,"uv":1,"gust_mph":9.5,"gust_kph":15.3},"infoLink":"https://weathergpt.vercel.app/London"}
</code></pre>
<h3 id="remediation">Remediation:</h3>
<p>Verify the <code>ACCESS_CODE</code> for HTTP requests to the <code>/api/plugin/:</code> route.</p>
<h3 id="impact">Impact:</h3>
<p>Unauthorized access to plugins.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lobehub/lobe-chat/security/advisories/GHSA-pf55-fj96-xf37">https://github.com/lobehub/lobe-chat/security/advisories/GHSA-pf55-fj96-xf37</a></li>
<li><a href="https://github.com/lobehub/lobe-chat/commit/2184167f09ab68e4efa051ee984ea0c4e7c48fbd">https://github.com/lobehub/lobe-chat/commit/2184167f09ab68e4efa051ee984ea0c4e7c48fbd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24566">https://nvd.nist.gov/vuln/detail/CVE-2024-24566</a></li>
<li><a href="https://github.com/advisories/GHSA-pf55-fj96-xf37">https://github.com/advisories/GHSA-pf55-fj96-xf37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf55-fj96-xf37</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-31T18:04:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mathjax] MathJax Regular expression Denial of Service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-v638-q856-grg8</id>
        <link href="https://github.com/advisories/GHSA-v638-q856-grg8"/>
        <updated>2024-01-31T00:02:47.000Z</updated>
        <content type="html"><![CDATA[<p>Mathjax up to v2.7.9 was discovered to contain two Regular expression Denial of Service (ReDoS) vulnerabilities in MathJax.js via the components pattern and markdownPattern. NOTE: the vendor disputes this because the regular expressions are not applied to user input; thus, there is no risk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39663">https://nvd.nist.gov/vuln/detail/CVE-2023-39663</a></li>
<li><a href="https://github.com/mathjax/MathJax/issues/3074">https://github.com/mathjax/MathJax/issues/3074</a></li>
<li><a href="https://github.com/advisories/GHSA-v638-q856-grg8">https://github.com/advisories/GHSA-v638-q856-grg8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v638-q856-grg8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-29T21:30:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/experimental-nextjs-app-support] @apollo/experimental-nextjs-app-support Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rv8p-rr2h-fgpg</id>
        <link href="https://github.com/advisories/GHSA-rv8p-rr2h-fgpg"/>
        <updated>2024-01-30T20:57:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The @apollo/experimental-apollo-client-nextjs NPM package is vulnerable to a cross-site scripting vulnerability. This vulnerability arises from improper handling of untrusted input when @apollo/experimental-apollo-client-nextjs performs server-side rendering of HTML pages. To fix this vulnerability, we implemented appropriate escaping to prevent javascript injection into rendered pages.</p>
<h3 id="patches">Patches</h3>
<p>To fix this issue, please update to version 0.7.0 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this issue. Please update to version 0.7.0</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apollographql/apollo-client-nextjs/security/advisories/GHSA-rv8p-rr2h-fgpg">https://github.com/apollographql/apollo-client-nextjs/security/advisories/GHSA-rv8p-rr2h-fgpg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23841">https://nvd.nist.gov/vuln/detail/CVE-2024-23841</a></li>
<li><a href="https://github.com/apollographql/apollo-client-nextjs/commit/b92bc42abd5f8e17d4db361c36bd08e4f541a46b">https://github.com/apollographql/apollo-client-nextjs/commit/b92bc42abd5f8e17d4db361c36bd08e4f541a46b</a></li>
<li><a href="https://github.com/advisories/GHSA-rv8p-rr2h-fgpg">https://github.com/advisories/GHSA-rv8p-rr2h-fgpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv8p-rr2h-fgpg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-30T20:57:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@urql/next] @urql/next Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qhjf-hm5j-335w</id>
        <link href="https://github.com/advisories/GHSA-qhjf-hm5j-335w"/>
        <updated>2024-01-30T20:57:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">impact</h2>
<p>The <code>@urql/next</code> package is vulnerable to XSS. To exploit this an attacker would need to ensure that the response returns <code>html</code> tags and that the web-application is using streamed responses (non-RSC). This vulnerability is due to improper escaping of html-like characters in the response-stream.</p>
<p>To fix this vulnerability upgrade to version 1.1.1</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/urql-graphql/urql/security/advisories/GHSA-qhjf-hm5j-335w">https://github.com/urql-graphql/urql/security/advisories/GHSA-qhjf-hm5j-335w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24556">https://nvd.nist.gov/vuln/detail/CVE-2024-24556</a></li>
<li><a href="https://github.com/urql-graphql/urql/commit/4b7011b70d5718728ff912d02a4dbdc7f703540d">https://github.com/urql-graphql/urql/commit/4b7011b70d5718728ff912d02a4dbdc7f703540d</a></li>
<li><a href="https://github.com/advisories/GHSA-qhjf-hm5j-335w">https://github.com/advisories/GHSA-qhjf-hm5j-335w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qhjf-hm5j-335w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-30T20:57:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tanstack/react-query-next-experimental] react-query-streamed-hydration Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-997g-27x8-43rf</id>
        <link href="https://github.com/advisories/GHSA-997g-27x8-43rf"/>
        <updated>2024-01-30T21:34:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>@tanstack/react-query-next-experimental</code> NPM package is vulnerable to a cross-site scripting vulnerability. To exploit this, an attacker would need to either inject malicious input or arrange to have malicious input be returned from an endpoint.</p>
<p>This vulnerability arises from improper handling of untrusted input when <code>@tanstack/react-query-next-experimental</code> performs server-side rendering of HTML pages. To fix this vulnerability, we implemented appropriate escaping to prevent javascript injection into rendered pages.</p>
<h3 id="patches">Patches</h3>
<p>To fix this issue, please update to version 5.18.0 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this issue. Please update to version 5.18.0 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TanStack/query/security/advisories/GHSA-997g-27x8-43rf">https://github.com/TanStack/query/security/advisories/GHSA-997g-27x8-43rf</a></li>
<li><a href="https://github.com/TanStack/query/commit/f2ddaf2536e8b71d2da88a9310ac9a48c13512a1">https://github.com/TanStack/query/commit/f2ddaf2536e8b71d2da88a9310ac9a48c13512a1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24558">https://nvd.nist.gov/vuln/detail/CVE-2024-24558</a></li>
<li><a href="https://github.com/advisories/GHSA-997g-27x8-43rf">https://github.com/advisories/GHSA-997g-27x8-43rf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-997g-27x8-43rf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-30T20:57:22.000Z</published>
    </entry>
</feed>