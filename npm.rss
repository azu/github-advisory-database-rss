<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-06-13T09:01:25.990Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[fast-json-patch] Starcounter-Jack JSON-Patch Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8gh8-hqwg-xf34</id>
        <link href="https://github.com/advisories/GHSA-8gh8-hqwg-xf34"/>
        <updated>2023-06-12T23:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in Starcounter-Jack JSON-Patch up to 3.1.0 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.1 can address this issue. The name of the patch is 7ad6af41eabb2d799f698740a91284d762c955c9. It is recommended to upgrade the affected component. VDB-216778 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4279">https://nvd.nist.gov/vuln/detail/CVE-2021-4279</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/pull/262">https://github.com/Starcounter-Jack/JSON-Patch/pull/262</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9">https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1">https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1</a></li>
<li><a href="https://blog.effectrenan.com/pwn2win-2021-illusion-web-challenge/">https://blog.effectrenan.com/pwn2win-2021-illusion-web-challenge/</a></li>
<li><a href="https://www.huntr.dev/bounties/1-npm-fast-json-patch/">https://www.huntr.dev/bounties/1-npm-fast-json-patch/</a></li>
<li><a href="https://github.com/advisories/GHSA-8gh8-hqwg-xf34">https://github.com/advisories/GHSA-8gh8-hqwg-xf34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gh8-hqwg-xf34</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-25T21:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[progressbar.js] progressbar.js vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-89qm-hm2x-mxm3</id>
        <link href="https://github.com/advisories/GHSA-89qm-hm2x-mxm3"/>
        <updated>2023-06-12T18:53:33.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package progressbar.js are vulnerable to Prototype Pollution via the function extend() in the file utils.js.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26133">https://nvd.nist.gov/vuln/detail/CVE-2023-26133</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-PROGRESSBARJS-3184152">https://security.snyk.io/vuln/SNYK-JS-PROGRESSBARJS-3184152</a></li>
<li><a href="https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L18">https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L18</a></li>
<li><a href="https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L20">https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L20</a></li>
<li><a href="https://github.com/advisories/GHSA-89qm-hm2x-mxm3">https://github.com/advisories/GHSA-89qm-hm2x-mxm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-89qm-hm2x-mxm3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-12T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@keystone-6/core] @keystone-6/core's bundled cuid package known to be insecure]]></title>
        <id>https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</id>
        <link href="https://github.com/advisories/GHSA-5fp6-4xw3-xqq3"/>
        <updated>2023-06-12T18:37:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>cuid</code> package used by <code>@keystone-6/*</code> and upstream dependencies is deprecated and <a href="https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead">marked as insecure by the author</a>.</p>
<p>As reported by the author</p>
<blockquote>
<p>Cuid and other k-sortable and non-cryptographic ids (Ulid, ObjectId, KSUID, all UUIDs) are all insecure. Use @paralleldrive/cuid2 instead.</p>
</blockquote>
<h3 id="what-are-doing-about-this">What are doing about this?</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/issues/8282">We are waiting on Prisma</a> to add support for <a href="https://github.com/paralleldrive/cuid2"><code>cuid2</code></a></li>
<li>Alternatively, we might default to a random string ourselves</li>
</ul>
<h3 id="what-if-i-need-a-cuid">What if I need a <code>cuid</code>?</h3>
<p>The features marked as a security vulnerability by @paralleldrive are sometimes actually needed (<a href="https://github.com/paralleldrive/cuid#motivation">as written in the README of <code>cuid</code></a>) - the problem is the inherent risks that features like this can have.</p>
<p>You might actually want the features of a monotonically increasing (auto-increment, k-sortable), and timestamp-based id as part of your application, and keystone should support that - but you might not want them by <em>default</em>.
This is why this security advisory has been accepted by me (@dcousens), we currently use cuid identifiers by default, and that should change.</p>
<h3 id="impact">Impact</h3>
<p>I have accepted this security advisory on the basis that we don't need this kind of identifier typically, and the need for them should be driven by an application's requirements, not a convenient default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/security/advisories/GHSA-5fp6-4xw3-xqq3">https://github.com/keystonejs/keystone/security/advisories/GHSA-5fp6-4xw3-xqq3</a></li>
<li><a href="https://github.com/keystonejs/keystone/issues/8282#issuecomment-1586019823">https://github.com/keystonejs/keystone/issues/8282#issuecomment-1586019823</a></li>
<li><a href="https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead">https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead</a></li>
<li><a href="https://github.com/advisories/GHSA-5fp6-4xw3-xqq3">https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-12T18:37:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dottie] dottie vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-4gxf-g5gf-22h4</id>
        <link href="https://github.com/advisories/GHSA-4gxf-g5gf-22h4"/>
        <updated>2023-06-12T18:34:40.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dottie before 2.0.4 are vulnerable to Prototype Pollution due to insufficient checks, via the <code>set()</code> function and the current variable in the <code>/dottie.js</code> file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26132">https://nvd.nist.gov/vuln/detail/CVE-2023-26132</a></li>
<li><a href="https://github.com/mickhansen/dottie.js/commit/7d3aee1c9c3c842720506e131de7e181e5c8db68">https://github.com/mickhansen/dottie.js/commit/7d3aee1c9c3c842720506e131de7e181e5c8db68</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DOTTIE-3332763">https://security.snyk.io/vuln/SNYK-JS-DOTTIE-3332763</a></li>
<li><a href="https://github.com/mickhansen/dottie.js/blob/b48e22714aae4489ea6276452f22cc61980ba5a4/dottie.js#L107">https://github.com/mickhansen/dottie.js/blob/b48e22714aae4489ea6276452f22cc61980ba5a4/dottie.js#L107</a></li>
<li><a href="https://github.com/advisories/GHSA-4gxf-g5gf-22h4">https://github.com/advisories/GHSA-4gxf-g5gf-22h4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gxf-g5gf-22h4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-10T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-sdk] Snowflake NodeJS Driver vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-h53w-7qw7-vh5c</id>
        <link href="https://github.com/advisories/GHSA-h53w-7qw7-vh5c"/>
        <updated>2023-06-09T22:53:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake was informed via our bug bounty program of a command injection vulnerability in the Snowflake NodeJS driver via SSO browser URL authentication.</p>
<h3 id="impacted-driver-package">Impacted driver package:</h3>
<p>snowflake-connector-nodejs</p>
<h3 id="impacted-version-range">Impacted version range:</h3>
<p>before <a href="https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes">Version 1.6.21</a> </p>
<h3 id="attack-scenario">Attack Scenario</h3>
<p>In order to exploit the potential for command injection, an attacker would need to be successful in (1) establishing a malicious resource and (2) redirecting users to utilize the resource. The attacker could set up a malicious, publicly accessible server which responds to the SSO URL with an attack payload. If the attacker then tricked a user into visiting the maliciously crafted connection URL, the user’s local machine would render the malicious payload, leading to a remote code execution. </p>
<p>This attack scenario can be mitigated through URL whitelisting as well as common anti-phishing resources.  </p>
<h3 id="solution">Solution</h3>
<p>On April 18, 2023, Snowflake merged a patch that fixed a command injection vulnerability in the Snowflake NodeJS driver via SSO browser URL authentication. The vulnerability affected the Snowflake NodeJS driver before Version 1.6.21. We strongly recommend users upgrade to Version 1.6.21 as soon as possible via the following resources: <a href="https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver">Snowflake NodeJS Driver</a></p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c">https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34232">https://nvd.nist.gov/vuln/detail/CVE-2023-34232</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465">https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a">https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a</a></li>
<li><a href="https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes">https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes</a></li>
<li><a href="https://github.com/advisories/GHSA-h53w-7qw7-vh5c">https://github.com/advisories/GHSA-h53w-7qw7-vh5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h53w-7qw7-vh5c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T22:53:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gatsby] Gatsby develop server has Local File Inclusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</id>
        <link href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc"/>
        <updated>2023-06-09T22:52:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Gatsby framework prior to versions 4.25.7 and 5.9.1 contain a Local File Inclusion vulnerability in the <code>__file-code-frame</code> and <code>__original-stack-frame</code> paths, exposed when running the Gatsby develop server (<code>gatsby develop</code>).</p>
<p>The following steps can be used to reproduce the vulnerability:</p>
<pre><code># Create a new Gatsby project
$ npm init gatsby
$ cd my-gatsby-site

# Start the Gatsby develop server
$ gatsby develop

# Execute the Local File Inclusion vulnerability in __file-code-frame
$ curl "http://127.0.0.1:8000/__file-code-frame?filePath=/etc/passwd&amp;lineNumber=1"

# Execute the Local File Inclusion vulnerability in __original-stack-frame
$ curl "http://127.0.0.1:8000/__original-stack-frame?moduleId=/etc/hosts&amp;lineNumber=1&amp;skipSourceMap=1"
</code></pre>
<p>It should be noted that by default <code>gatsby develop</code> is only accessible via the localhost <code>127.0.0.1</code>, and one would need to intentionally expose the server to other interfaces to exploit this vulnerability by using server options such as <code>--host 0.0.0.0</code>, <code>-H 0.0.0.0</code>, or the <code>GATSBY_HOST=0.0.0.0</code> environment variable.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced in <code>gatsby@5.9.1</code> and <code>gatsby@4.25.7</code> which mitigates the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As stated above, by default <code>gatsby develop</code> is only exposed to the localhost <code>127.0.0.1</code>.  For those using the develop server in the default configuration no risk is posed.  If other ranges are required, preventing the develop server from being exposed to untrusted interfaces or IP address ranges would mitigate the risk from this vulnerability.</p>
<p>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Maxwell Garrett of Assetnote for bringing the <code>__file-code-frame</code> issue to our attention.</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@gatsbyjs.com">security@gatsbyjs.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34238">https://nvd.nist.gov/vuln/detail/CVE-2023-34238</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c">https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7">https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7</a></li>
<li><a href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/advisories/GHSA-c6f8-8r25-c4gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T22:52:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gatsby] Gatsby develop server has Local File Inclusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</id>
        <link href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc"/>
        <updated>2023-06-09T22:52:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Gatsby framework prior to versions 4.25.7 and 5.9.1 contain a Local File Inclusion vulnerability in the <code>__file-code-frame</code> and <code>__original-stack-frame</code> paths, exposed when running the Gatsby develop server (<code>gatsby develop</code>).</p>
<p>The following steps can be used to reproduce the vulnerability:</p>
<pre><code># Create a new Gatsby project
$ npm init gatsby
$ cd my-gatsby-site

# Start the Gatsby develop server
$ gatsby develop

# Execute the Local File Inclusion vulnerability in __file-code-frame
$ curl "http://127.0.0.1:8000/__file-code-frame?filePath=/etc/passwd&amp;lineNumber=1"

# Execute the Local File Inclusion vulnerability in __original-stack-frame
$ curl "http://127.0.0.1:8000/__original-stack-frame?moduleId=/etc/hosts&amp;lineNumber=1&amp;skipSourceMap=1"
</code></pre>
<p>It should be noted that by default <code>gatsby develop</code> is only accessible via the localhost <code>127.0.0.1</code>, and one would need to intentionally expose the server to other interfaces to exploit this vulnerability by using server options such as <code>--host 0.0.0.0</code>, <code>-H 0.0.0.0</code>, or the <code>GATSBY_HOST=0.0.0.0</code> environment variable.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced in <code>gatsby@5.9.1</code> and <code>gatsby@4.25.7</code> which mitigates the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As stated above, by default <code>gatsby develop</code> is only exposed to the localhost <code>127.0.0.1</code>.  For those using the develop server in the default configuration no risk is posed.  If other ranges are required, preventing the develop server from being exposed to untrusted interfaces or IP address ranges would mitigate the risk from this vulnerability.</p>
<p>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Maxwell Garrett of Assetnote for bringing the <code>__file-code-frame</code> issue to our attention.</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@gatsbyjs.com">security@gatsbyjs.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34238">https://nvd.nist.gov/vuln/detail/CVE-2023-34238</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c">https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7">https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7</a></li>
<li><a href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/advisories/GHSA-c6f8-8r25-c4gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T22:52:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@udecode/plate-link] @udecode/plate-link does not sanitize URLs to prevent use of the `javascript:` scheme]]></title>
        <id>https://github.com/advisories/GHSA-4882-hxpr-hrvm</id>
        <link href="https://github.com/advisories/GHSA-4882-hxpr-hrvm"/>
        <updated>2023-06-09T22:41:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Affected versions of the link plugin and link UI component do not sanitize URLs to prevent use of the <code>javascript:</code> scheme. As a result, links with JavaScript URLs can be inserted into the Plate editor through various means, including opening or pasting malicious content.</p>
<h3 id="patches">Patches</h3>
<p><code>@udecode/plate-link</code> 20.0.0 resolves this issue by introducing an <code>allowedSchemes</code> option to the link plugin, defaulting to <code>['http', 'https', 'mailto', 'tel']</code>. URLs using a scheme that isn't in this list will not be rendered to the DOM.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to update <code>@udecode/plate-link</code> to version 20.0.0, we recommend overriding the <code>LinkElement</code> and <code>PlateFloatingLink</code> components with implementations that explicitly check the URL scheme before rendering any anchor elements.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm">https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34245">https://nvd.nist.gov/vuln/detail/CVE-2023-34245</a></li>
<li><a href="https://github.com/udecode/plate/pull/2240">https://github.com/udecode/plate/pull/2240</a></li>
<li><a href="https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7">https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7</a></li>
<li><a href="https://github.com/advisories/GHSA-4882-hxpr-hrvm">https://github.com/advisories/GHSA-4882-hxpr-hrvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4882-hxpr-hrvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T22:41:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning]]></title>
        <id>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</id>
        <link href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"/>
        <updated>2023-06-08T18:03:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>
<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>
<h3 id="credit">Credit</h3>
<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>
<h3 id="references">References</h3>
<p><a href="https://www.coinspect.com/openzeppelin-governor-dos/">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34234">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-08T18:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning]]></title>
        <id>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</id>
        <link href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"/>
        <updated>2023-06-08T18:03:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>
<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>
<h3 id="credit">Credit</h3>
<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>
<h3 id="references">References</h3>
<p><a href="https://www.coinspect.com/openzeppelin-governor-dos/">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34234">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-08T18:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-xml-parser] fast-xml-parser vulnerable to Regex Injection via Doctype Entities]]></title>
        <id>https://github.com/advisories/GHSA-6w63-h3fj-q4vw</id>
        <link href="https://github.com/advisories/GHSA-6w63-h3fj-q4vw"/>
        <updated>2023-06-06T18:50:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"fast-xml-parser" allows special characters in entity names, which are not escaped or sanitized. Since the entity name is used for creating a regex for searching and replacing entities in the XML body, an attacker can abuse it for DoS attacks. By crafting an entity name that results in an intentionally bad performing regex and utilizing it in the entity replacement step of the parser, this can cause the parser to stall for an indefinite amount of time.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved in v4.2.4</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using DOCTYPE parsing by <code>processEntities: false</code> option.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c">https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34104">https://nvd.nist.gov/vuln/detail/CVE-2023-34104</a></li>
<li><a href="https://github.com/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/advisories/GHSA-6w63-h3fj-q4vw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w63-h3fj-q4vw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T17:33:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite Server Options (server.fs.deny) can be bypassed using double forward-slash (//)]]></title>
        <id>https://github.com/advisories/GHSA-353f-5xf4-qw67</id>
        <link href="https://github.com/advisories/GHSA-353f-5xf4-qw67"/>
        <updated>2023-06-09T21:10:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Vite Server Options (<code>server.fs.deny</code>) can be bypassed using double forward-slash (//) allows any unauthenticated user to read file from the Vite root-path of the application including the default <a href="https://vitejs.dev/config/server-options.html#server-fs-deny"><code>fs.deny</code> settings</a> (<code>['.env', '.env.*', '*.{crt,pem}']</code>)</p>
<h3 id="impact">Impact</h3>
<p>Only users explicitly exposing the Vite dev server to the network (using <code>--host</code> or <a href="https://vitejs.dev/config/server-options.html#server-host"><code>server.host</code> config option</a>) are affected, and only files in the immediate Vite project root folder could be exposed.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@4.3.9">vite@4.3.9</a>, <a href="mailto:vite@4.2.3">vite@4.2.3</a>, <a href="mailto:vite@4.1.5">vite@4.1.5</a>, <a href="mailto:vite@4.0.5">vite@4.0.5</a>
And in the latest minors of the previous two majors: <a href="mailto:vite@3.2.7">vite@3.2.7</a>, <a href="mailto:vite@2.9.16">vite@2.9.16</a></p>
<h3 id="details">Details</h3>
<p>Vite serve the application with under the root-path of the project while running on the dev mode. By default, vite using server options fs.deny to protected the sensitive information of the file. But, with simply double forward-slash, we can bypass this fs restriction. </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new latest project of vite using any package manager. (here I'm using react and vue templates for tested and pnpm)</li>
<li>Serve the application on dev mode using pnpm run dev.</li>
<li>Directly access the file from url using double forward-slash (<code>//</code>) (e.g: <code>//.env</code>, <code>//.env.local</code>)</li>
<li>Server Options <code>fs.deny</code> restrict successfully bypassed.</li>
</ol>
<p>Proof Images:
<img alt="proof-1" src="https://user-images.githubusercontent.com/30733517/241105344-6ecbc7f6-57b7-45c7-856a-6421a577dda1.png">
<img alt="proof-2" src="https://user-images.githubusercontent.com/30733517/241105349-ab9561e7-8aff-4f29-97f9-b784e673c122.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67">https://github.com/vitejs/vite/security/advisories/GHSA-353f-5xf4-qw67</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34092">https://nvd.nist.gov/vuln/detail/CVE-2023-34092</a></li>
<li><a href="https://github.com/vitejs/vite/pull/13348">https://github.com/vitejs/vite/pull/13348</a></li>
<li><a href="https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32">https://github.com/vitejs/vite/commit/813ddd6155c3d54801e264ba832d8347f6f66b32</a></li>
<li><a href="https://github.com/advisories/GHSA-353f-5xf4-qw67">https://github.com/advisories/GHSA-353f-5xf4-qw67</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-353f-5xf4-qw67</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T02:01:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[proxy] proxy denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mj6p-3pc9-wf5m</id>
        <link href="https://github.com/advisories/GHSA-mj6p-3pc9-wf5m"/>
        <updated>2023-06-06T01:52:50.000Z</updated>
        <content type="html"><![CDATA[<p>A remote attacker can trigger a denial of service in the <code>socket.remoteAddress</code> variable, by sending a crafted HTTP request. Usage of the undefined variable raises a TypeError exception.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2968">https://nvd.nist.gov/vuln/detail/CVE-2023-2968</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/undefined-variable-usage-in-proxy-leads-to-remote-denial-of-service-xray-520917">https://research.jfrog.com/vulnerabilities/undefined-variable-usage-in-proxy-leads-to-remote-denial-of-service-xray-520917</a></li>
<li><a href="https://github.com/TooTallNate/proxy-agents/pull/178">https://github.com/TooTallNate/proxy-agents/pull/178</a></li>
<li><a href="https://github.com/TooTallNate/proxy-agents/commit/25e0c931390eb8f41c5ceaca72820de9198ece39">https://github.com/TooTallNate/proxy-agents/commit/25e0c931390eb8f41c5ceaca72820de9198ece39</a></li>
<li><a href="https://github.com/advisories/GHSA-mj6p-3pc9-wf5m">https://github.com/advisories/GHSA-mj6p-3pc9-wf5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj6p-3pc9-wf5m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-30T18:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@antfu/utils] antfu/utils vulnerable to prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-p2fh-2h23-6grg</id>
        <link href="https://github.com/advisories/GHSA-p2fh-2h23-6grg"/>
        <updated>2023-06-02T17:11:19.000Z</updated>
        <content type="html"><![CDATA[<p>Prototype Pollution in GitHub repository antfu/utils prior to 0.7.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-2972">https://nvd.nist.gov/vuln/detail/CVE-2023-2972</a></li>
<li><a href="https://github.com/antfu/utils/commit/7f8b16c6181c988bdb96613fbb2533b345f68682">https://github.com/antfu/utils/commit/7f8b16c6181c988bdb96613fbb2533b345f68682</a></li>
<li><a href="https://huntr.dev/bounties/009f1cd9-401c-49a7-bd08-be35cff6faef">https://huntr.dev/bounties/009f1cd9-401c-49a7-bd08-be35cff6faef</a></li>
<li><a href="https://github.com/advisories/GHSA-p2fh-2h23-6grg">https://github.com/advisories/GHSA-p2fh-2h23-6grg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p2fh-2h23-6grg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-30T12:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Phishing attack vulnerability by uploading malicious HTML file]]></title>
        <id>https://github.com/advisories/GHSA-9prm-jqwx-45x9</id>
        <link href="https://github.com/advisories/GHSA-9prm-jqwx-45x9"/>
        <updated>2023-05-31T23:39:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Phishing attack vulnerability by uploading malicious files. A malicious user could upload a HTML file to Parse Server via its public API. That HTML file would then be accessible at the internet domain at which Parse Server is hosted. The URL of the the uploaded HTML could be shared for phishing attacks. The HTML page may seem legitimate because it is served under the internet domain where Parse Server is hosted, which may be the same as a company's official website domain.</p>
<p>An additional security issue arises when the Parse JavaScript SDK is used. The SDK stores sessions in the internet browser's local storage, which usually restricts data access depending on the internet domain. A malicious HTML file could contain a script that retrieves the user's session token from local storage and then share it with the attacker.</p>
<h3 id="patches">Patches</h3>
<p>The fix adds a new Parse Server option <code>fileUpload.fileExtensions</code> to restrict file upload on Parse Server by file extension. It is recommended to restrict file upload for HTML file extensions, which this fix disables by default. If an app requires upload of files with HTML file extensions, the option can be set to <code>['.*']</code> or another custom value to override the default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8538">https://github.com/parse-community/parse-server/pull/8538</a> (Parse Server 6)</li>
<li><a href="https://github.com/parse-community/parse-server/pull/8537">https://github.com/parse-community/parse-server/pull/8537</a> (Parse Server 5)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9">https://github.com/parse-community/parse-server/security/advisories/GHSA-9prm-jqwx-45x9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32689">https://nvd.nist.gov/vuln/detail/CVE-2023-32689</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8537">https://github.com/parse-community/parse-server/pull/8537</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8538">https://github.com/parse-community/parse-server/pull/8538</a></li>
<li><a href="https://github.com/advisories/GHSA-9prm-jqwx-45x9">https://github.com/advisories/GHSA-9prm-jqwx-45x9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9prm-jqwx-45x9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-05-31T23:39:15.000Z</published>
    </entry>
</feed>