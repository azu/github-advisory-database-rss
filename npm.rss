<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-04-22T22:01:20.709Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[lodash] Prototype Pollution in lodash]]></title>
        <id>https://github.com/advisories/GHSA-fvqr-27wr-82fm</id>
        <link href="https://github.com/advisories/GHSA-fvqr-27wr-82fm"/>
        <updated>2024-04-22T19:49:54.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>lodash</code> before 4.17.5 are vulnerable to prototype pollution. </p>
<p>The vulnerable functions are 'defaultsDeep', 'merge', and 'mergeWith' which allow a malicious user to modify the prototype of <code>Object</code> via <code>__proto__</code> causing the addition or modification of an existing property that will exist on all objects.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 4.17.5 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-3721">https://nvd.nist.gov/vuln/detail/CVE-2018-3721</a></li>
<li><a href="https://hackerone.com/reports/310443">https://hackerone.com/reports/310443</a></li>
<li><a href="https://github.com/advisories/GHSA-fvqr-27wr-82fm">https://github.com/advisories/GHSA-fvqr-27wr-82fm</a></li>
<li><a href="https://www.npmjs.com/advisories/577">https://www.npmjs.com/advisories/577</a></li>
<li><a href="https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a">https://github.com/lodash/lodash/commit/d8e069cc3410082e44eb18fcf8e7f3d08ebe1d4a</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20190919-0004">https://security.netapp.com/advisory/ntap-20190919-0004</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fvqr-27wr-82fm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-07-26T15:14:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ghost] Arbitrary file upload in Ghost]]></title>
        <id>https://github.com/advisories/GHSA-ffhq-g856-9f2p</id>
        <link href="https://github.com/advisories/GHSA-ffhq-g856-9f2p"/>
        <updated>2024-04-22T19:43:49.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the file upload module of Ghost CMS v4.42.0 allows attackers to execute arbitrary code via a crafted file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-28397">https://nvd.nist.gov/vuln/detail/CVE-2022-28397</a></li>
<li><a href="https://github.com/TryGhost/Ghost">https://github.com/TryGhost/Ghost</a></li>
<li><a href="https://trends.builtwith.com/cms/Ghost">https://trends.builtwith.com/cms/Ghost</a></li>
<li><a href="https://youtu.be/PncfBetPk2g">https://youtu.be/PncfBetPk2g</a></li>
<li><a href="http://ghost.com">http://ghost.com</a></li>
<li><a href="https://ghost.org/docs/security/#privilege-escalation-attacks">https://ghost.org/docs/security/#privilege-escalation-attacks</a></li>
<li><a href="https://ghost.org/customers">https://ghost.org/customers</a></li>
<li><a href="https://github.com/advisories/GHSA-ffhq-g856-9f2p">https://github.com/advisories/GHSA-ffhq-g856-9f2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ffhq-g856-9f2p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-04-13T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uri-js] Regular Expression Denial Of Service in uri-js]]></title>
        <id>https://github.com/advisories/GHSA-333w-rxj3-f55r</id>
        <link href="https://github.com/advisories/GHSA-333w-rxj3-f55r"/>
        <updated>2024-04-22T19:38:17.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>uri-js</code> is susceptible to a regular expression denial of service vulnerability when user input is sent to the <code>.parse()</code> method.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to v3.0.0 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16021">https://nvd.nist.gov/vuln/detail/CVE-2017-16021</a></li>
<li><a href="https://github.com/garycourt/uri-js/issues/12">https://github.com/garycourt/uri-js/issues/12</a></li>
<li><a href="https://github.com/advisories/GHSA-333w-rxj3-f55r">https://github.com/advisories/GHSA-333w-rxj3-f55r</a></li>
<li><a href="https://www.npmjs.com/advisories/100">https://www.npmjs.com/advisories/100</a></li>
<li><a href="https://nodesecurity.io/advisories/100">https://nodesecurity.io/advisories/100</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-333w-rxj3-f55r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-07-24T20:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@hoppscotch/cli] @hoppscotch/cli affected by Sandbox Escape in @hoppscotch/js-sandbox leads to RCE]]></title>
        <id>https://github.com/advisories/GHSA-qmmm-73r2-f8xr</id>
        <link href="https://github.com/advisories/GHSA-qmmm-73r2-f8xr"/>
        <updated>2024-04-22T18:38:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="observations">Observations</h3>
<p>The Hoppscotch desktop app takes multiple precautions to be secure against arbitrary JavaScript and system command execution. It does not render user-controlled HTML or Markdown, uses Tauri instead of Electron, and sandboxes pre-request scripts with a simple yet secure implementation using web workers.</p>
<p>Unfortunately, web workers are not available in a pure Node.js application like Hoppscotch CLI. That is why the <a href="https://github.com/hoppscotch/hoppscotch/tree/main/packages/hoppscotch-js-sandbox">@hoppscotch/js-sandbox</a> package also provides a Javascript sandbox that uses the Node.js <code>vm</code> module. However, the <code>vm</code> module is not safe for sandboxing untrusted Javascript code, as stated <a href="https://nodejs.org/api/vm.html#vm-executing-javascript">in the documentation</a>. This is because <a href="https://thegoodhacker.com/posts/the-unsecure-node-vm-module/">code inside the vm context can break out</a> if it can get a hold of any reference to an object created outside of the vm.</p>
<p>In the case of @hoppscotch/js-sandbox, multiple references to external objects are passed into the vm context to allow pre-request scripts interactions with environment variables and more. But this also allows the pre-request script to escape the sandbox.
<a href="https://github.com/hoppscotch/hoppscotch/blob/faab1d20fde9a6be660db40fc73dcf28f9038008/packages/hoppscotch-js-sandbox/src/pre-request/node-vm/index.ts#L23-L31">packages/hoppscotch-js-sandbox/src/pre-request/node-vm/index.ts</a></p>
<pre><code class="language-js">const { pw, updatedEnvs } = getPreRequestScriptMethods(envs)

// Expose pw to the context
context.pw = pw
context.atob = atob
context.btoa = btoa

// Run the pre-request script in the provided context
runInContext(preRequestScript, context)
</code></pre>
<h3 id="exploitation">Exploitation</h3>
<p>An attacker can use the exposed <code>pw</code> object reference to escape the sandbox and execute arbitrary system commands using the <code>child_process</code> Node.js module. This PoC pre-request script executes the <code>id &gt; /tmp/pwnd</code> system command as soon as a request is sent.</p>
<pre><code class="language-js">outside = pw.constructor.constructor('return this')()
outside.process.mainModule.require('child_process').execSync('id &gt; /tmp/pwnd')
</code></pre>
<p>An attacker who wants to run arbitrary code on the machine of a victim can create a Hoppscotch collection containing a request with a malicious pre-request script and share it with a victim, using the JSON export feature. The victim then has to run the collection with the Hoppscotch CLI. Then the malicious pre-request script executes.</p>
<h3 id="impact">Impact</h3>
<p>This attack gives an attacker arbitrary command execution on the machine of a victim Hoppscotch CLI user. For the attack to succeed, an attacker has to lure the victim into downloading a malicious Hoppscotch collection and running it with the Hoppscotch CLI.</p>
<p>This issue does not impact Hoppscotch Web or Desktop, as they use the safe web worker sandboxing approach.</p>
<h3 id="recommendations">Recommendations</h3>
<p>Hoppscotch CLI and other tools that rely on @hoppscotch/js-sandbox but don't have access to a browser cannot use the web worker sandbox. For these, you can look into other safe JavaScript sandboxing libraries. We think that <a href="https://github.com/laverdet/isolated-vm">isolated-vm</a> looks promising. We discourage the use of <a href="https://github.com/patriksimek/vm2">vm2</a>, which is deprecated because it has arbitrary bypasses. Alternatively, you can introduce an <code>--enable-scripting</code> flag for the CLI and disable scripting by default. Or you can change the threat model and educate users that they should not run untrusted collections as it can lead to RCE.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hoppscotch/hoppscotch/security/advisories/GHSA-qmmm-73r2-f8xr">https://github.com/hoppscotch/hoppscotch/security/advisories/GHSA-qmmm-73r2-f8xr</a></li>
<li><a href="https://github.com/hoppscotch/hoppscotch/commit/22c6eabd133195d22874250a5ae40cb26b851b01">https://github.com/hoppscotch/hoppscotch/commit/22c6eabd133195d22874250a5ae40cb26b851b01</a></li>
<li><a href="https://github.com/advisories/GHSA-qmmm-73r2-f8xr">https://github.com/advisories/GHSA-qmmm-73r2-f8xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmmm-73r2-f8xr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-22T18:38:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@hono/node-server] @hono/node-server has Denial of Service risk when receiving Host header that cannot be parsed]]></title>
        <id>https://github.com/advisories/GHSA-hgxw-5xg3-69jx</id>
        <link href="https://github.com/advisories/GHSA-hgxw-5xg3-69jx"/>
        <updated>2024-04-19T21:44:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The application hangs when receiving a Host header with a value that <code>@hono/node-server</code> can't handle well. Invalid values are those that cannot be parsed by the <code>URL</code> as a hostname such as an empty string, slashes <code>/</code>, and other strings.</p>
<p>For example, if you have a simple application:</p>
<pre><code class="language-ts">import { serve } from '@hono/node-server'
import { Hono } from 'hono'

const app = new Hono()

app.get('/', (c) =&gt; c.text('Hello'))

serve(app)
</code></pre>
<p>Sending a request with a Host header with an empty value to it:</p>
<pre><code>curl localhost:3000/ -H "Host: "
</code></pre>
<p>The results:</p>
<pre><code>node:internal/url:775
    this.#updateContext(bindingUrl.parse(input, base));
                                   ^

TypeError: Invalid URL
    at new URL (node:internal/url:775:36)
    at newRequest (/Users/yusuke/work/h/159/node_modules/@hono/node-server/dist/index.js:137:17)
    at Server.&lt;anonymous&gt; (/Users/yusuke/work/h/159/node_modules/@hono/node-server/dist/index.js:399:17)
    at Server.emit (node:events:514:28)
    at Server.emit (node:domain:488:12)
    at parserOnIncoming (node:_http_server:1143:12)
    at HTTPParser.parserOnHeadersComplete (node:_http_common:119:17) {
  code: 'ERR_INVALID_URL',
  input: 'http:///'
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>The version <code>1.10.1</code> includes the fix for this issue. But, you should use <code>1.11.0</code>, which has other fixes related to this issue. <a href="https://github.com/honojs/node-server/issues/160">https://github.com/honojs/node-server/issues/160</a> <a href="https://github.com/honojs/node-server/issues/161">https://github.com/honojs/node-server/issues/161</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Nothing. Upgrade your <code>@hono/node-server</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/honojs/node-server/issues/159">https://github.com/honojs/node-server/issues/159</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx">https://github.com/honojs/node-server/security/advisories/GHSA-hgxw-5xg3-69jx</a></li>
<li><a href="https://github.com/honojs/node-server/issues/159">https://github.com/honojs/node-server/issues/159</a></li>
<li><a href="https://github.com/honojs/node-server/issues/161">https://github.com/honojs/node-server/issues/161</a></li>
<li><a href="https://github.com/honojs/node-server/commit/306d98f02a8671a0a1fb91ac8fe7e281690c05af">https://github.com/honojs/node-server/commit/306d98f02a8671a0a1fb91ac8fe7e281690c05af</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32652">https://nvd.nist.gov/vuln/detail/CVE-2024-32652</a></li>
<li><a href="https://github.com/honojs/node-server/commit/d847e60249fd8183ba0998bc379ba20505643204">https://github.com/honojs/node-server/commit/d847e60249fd8183ba0998bc379ba20505643204</a></li>
<li><a href="https://github.com/advisories/GHSA-hgxw-5xg3-69jx">https://github.com/advisories/GHSA-hgxw-5xg3-69jx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgxw-5xg3-69jx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-19T19:48:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Enabling Authentication does not close all logged in socket connections immediately ]]></title>
        <id>https://github.com/advisories/GHSA-23q2-5gf8-gjpp</id>
        <link href="https://github.com/advisories/GHSA-23q2-5gf8-gjpp"/>
        <updated>2024-04-19T17:26:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This is basically <a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3">GHSA-88j4-pcx8-q4q</a> but instead of changing passwords, when enabling authentication.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Open Uptime Kuma with authentication disabled</li>
<li>Enable authentication using another window</li>
<li>Access the platform using the previously logged-in window</li>
<li>Note that access (read-write) remains despite the enabled authentication</li>
<li>Expected behaviour:<ul>
<li>After enabling authentication, all previously connected sessions should be invalidated, requiring users to log in.</li>
</ul>
</li>
<li>Actual behaviour:<ul>
<li>The system retains sessions and never logs out users unless explicitly done by clicking logout or refreshing the page.</li>
</ul>
</li>
</ul>
<h3 id="impact">Impact</h3>
<p>See <a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g">GHSA-g9v2-wqcj-j99g</a> and <a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3">GHSA-88j4-pcx8-q4q</a></p>
<p>TBH this is quite a niche edge case, so I don't know if this even warrants a security report.  </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-23q2-5gf8-gjpp">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-23q2-5gf8-gjpp</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/7a9e2f5de69aa0bb884ead25d1dcc833bb8c6579">https://github.com/louislam/uptime-kuma/commit/7a9e2f5de69aa0bb884ead25d1dcc833bb8c6579</a></li>
<li><a href="https://github.com/advisories/GHSA-23q2-5gf8-gjpp">https://github.com/advisories/GHSA-23q2-5gf8-gjpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-23q2-5gf8-gjpp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-19T17:26:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@andrei-tatar/nora-firebase-common] @andrei-tatar/nora-firebase-common Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jjff-q3q4-5hh8</id>
        <link href="https://github.com/advisories/GHSA-jjff-q3q4-5hh8"/>
        <updated>2024-04-18T16:58:18.000Z</updated>
        <content type="html"><![CDATA[<p>An issue inandrei-tatar nora-firebase-common between v.1.0.41 and v.1.12.2 allows a remote attacker to execute arbitrary code via a crafted script to the updateState parameter of the updateStateInternal method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30564">https://nvd.nist.gov/vuln/detail/CVE-2024-30564</a></li>
<li><a href="https://github.com/andrei-tatar/nora-firebase-common/issues/9">https://github.com/andrei-tatar/nora-firebase-common/issues/9</a></li>
<li><a href="https://github.com/andrei-tatar/nora-firebase-common/commit/bf30b75d51be04f6c1f884561a223226c890f01b">https://github.com/andrei-tatar/nora-firebase-common/commit/bf30b75d51be04f6c1f884561a223226c890f01b</a></li>
<li><a href="https://gist.github.com/mestrtee/5dc2c948c2057f98d3de0a9790903c6c">https://gist.github.com/mestrtee/5dc2c948c2057f98d3de0a9790903c6c</a></li>
<li><a href="https://github.com/advisories/GHSA-jjff-q3q4-5hh8">https://github.com/advisories/GHSA-jjff-q3q4-5hh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjff-q3q4-5hh8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-18T15:30:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[derby] Prototype pollution in emit function]]></title>
        <id>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</id>
        <link href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6"/>
        <updated>2024-04-17T22:26:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>
<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>
<h3 id="details">Details</h3>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>
<h3 id="poc">PoC</h3>
<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>
<pre><code>it('ignores DOM mutations in components\' create()', function() {
      function Box() {}
      Box.view = {
        is: 'box',
-        source: '&lt;index:&gt;&lt;div class="box" as="boxElement"&gt;&lt;/div&gt;'
+        source: '&lt;index:&gt;&lt;div class="box" as="__proto__"&gt;&lt;/div&gt;'
      };
      Box.prototype.create = function() {
        this.boxElement.className = 'box-changed-in-create';
      };
      var harness = runner.createHarness('&lt;view is="box" /&gt;', Box);
      expect(harness).to.render('&lt;div class="box"&gt;&lt;/div&gt;');
});
</code></pre>
<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>
<h3 id="patch">Patch</h3>
<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {
+    throw new Error('Unsafe code detected');
+  }
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>
<li><a href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-17T22:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[derby] Prototype pollution in emit function]]></title>
        <id>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</id>
        <link href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6"/>
        <updated>2024-04-17T22:26:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>
<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>
<h3 id="details">Details</h3>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>
<h3 id="poc">PoC</h3>
<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>
<pre><code>it('ignores DOM mutations in components\' create()', function() {
      function Box() {}
      Box.view = {
        is: 'box',
-        source: '&lt;index:&gt;&lt;div class="box" as="boxElement"&gt;&lt;/div&gt;'
+        source: '&lt;index:&gt;&lt;div class="box" as="__proto__"&gt;&lt;/div&gt;'
      };
      Box.prototype.create = function() {
        this.boxElement.className = 'box-changed-in-create';
      };
      var harness = runner.createHarness('&lt;view is="box" /&gt;', Box);
      expect(harness).to.render('&lt;div class="box"&gt;&lt;/div&gt;');
});
</code></pre>
<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>
<h3 id="patch">Patch</h3>
<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {
+    throw new Error('Unsafe code detected');
+  }
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>
<li><a href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-17T22:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[derby] Prototype pollution in emit function]]></title>
        <id>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</id>
        <link href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6"/>
        <updated>2024-04-17T22:26:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A prototype pollution in derby can crash the application, if the application author has atypical HTML templates that feed user input into an object key.</p>
<p>Attribute keys are almost always developer-controlled, not end-user-controlled, so this shouldn't be an issue in practice for most applications.</p>
<h3 id="details">Details</h3>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<p>The emit() function in src/templates/templates.ts is called without sanitizing the variable <code>this.lastSegment </code>. The variable <code>this.lastSegment </code> can be set to <code>__proto__</code>, and this will pollute the prototype of Javascipt Object (<code>node['__proto__'] = target</code>).</p>
<h3 id="poc">PoC</h3>
<p>To reproduce this vulnerability, you can adjust the test case <code>ignores DOM mutations in components\' create()</code> in <code>test/dom/ComponentHarness.mocha.js</code>.</p>
<pre><code>it('ignores DOM mutations in components\' create()', function() {
      function Box() {}
      Box.view = {
        is: 'box',
-        source: '&lt;index:&gt;&lt;div class="box" as="boxElement"&gt;&lt;/div&gt;'
+        source: '&lt;index:&gt;&lt;div class="box" as="__proto__"&gt;&lt;/div&gt;'
      };
      Box.prototype.create = function() {
        this.boxElement.className = 'box-changed-in-create';
      };
      var harness = runner.createHarness('&lt;view is="box" /&gt;', Box);
      expect(harness).to.render('&lt;div class="box"&gt;&lt;/div&gt;');
});
</code></pre>
<p>When <code>as</code> attribute is controlled by attackers, the variable in <code>this.lastSegment</code> will exactly take value<code> __proto__</code> and prototype pollution happens.</p>
<h3 id="patch">Patch</h3>
<p>Add a check on <code>this.lastSegment</code> can prevent this attack.</p>
<pre><code>emit(context: Context, target: T) {
  const node = traverseAndCreate(context.controller, this.segments);
+  if (this.lastSegment.includes('__proto__') || this.lastSegment.includes('prototype')) {
+    throw new Error('Unsafe code detected');
+  }
    node[this.lastSegment] = target;
    this.addListeners(target, node, this.lastSegment);
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/derbyjs/derby/security/advisories/GHSA-82jv-9wjw-pqh6</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0">https://github.com/derbyjs/derby/commit/24524e96f36976883c7c619811320428536bd4d0</a></li>
<li><a href="https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440">https://github.com/derbyjs/derby/commit/465a0c2f6a77361eda4a09b77a8c94ba6a9da440</a></li>
<li><a href="https://github.com/advisories/GHSA-82jv-9wjw-pqh6">https://github.com/advisories/GHSA-82jv-9wjw-pqh6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-82jv-9wjw-pqh6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-04-17T22:26:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@excalidraw/excalidraw] Stored Cross-site Scripting (XSS) in excalidraw's web embed component]]></title>
        <id>https://github.com/advisories/GHSA-m64q-4jqh-f72f</id>
        <link href="https://github.com/advisories/GHSA-m64q-4jqh-f72f"/>
        <updated>2024-04-18T00:31:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A stored XSS vulnerability in Excalidraw's web embeddable component. This allows arbitrary JavaScript to be run in the context of the domain where the editor is hosted. </p>
<h3 id="poc">Poc</h3>
<p>Inserting an embed with the below url (can be copy/pasted onto canvas to insert as embed) will log <code>42</code> to the console:</p>
<pre><code>https://gist.github.com/vv=v&lt;script&gt;console.log(42)&lt;/script&gt;
</code></pre>
<h3 id="details">Details</h3>
<p>There were two vectors. One rendering untrusted string as iframe's <code>srcdoc</code> without properly sanitizing against HTML injection. Second by improperly sanitizing against attribute HTML injection. This in conjunction with allowing <code>allow-same-origin</code> sandbox flag (necessary for several embeds) resulted in the XSS.</p>
<p>Former was fixed by no longer rendering unsafe <code>srcdoc</code> content verbatim, and instead strictly parsing the supplied content and constructing the <code>srcdoc</code> manually. The latter by sanitizing properly.</p>
<p>The <code>allow-same-origin</code> flag is now also set only in cases that require it, following the principle of least privilege.</p>
<h3 id="impact">Impact</h3>
<p>This is a cross site scripting vulnerability, for more information, please see: <a href="https://portswigger.net/web-security/cross-site-scripting">https://portswigger.net/web-security/cross-site-scripting</a></p>
<p>Two npm <code>@excalidraw/excalidraw</code> stable version releases were affected (<code>0.16.x</code>, <code>0.17.x</code>), and both are now patched.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f">https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f</a></li>
<li><a href="https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d">https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d</a></li>
<li><a href="https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0">https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32472">https://nvd.nist.gov/vuln/detail/CVE-2024-32472</a></li>
<li><a href="https://github.com/advisories/GHSA-m64q-4jqh-f72f">https://github.com/advisories/GHSA-m64q-4jqh-f72f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m64q-4jqh-f72f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-17T21:32:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@excalidraw/excalidraw] Stored Cross-site Scripting (XSS) in excalidraw's web embed component]]></title>
        <id>https://github.com/advisories/GHSA-m64q-4jqh-f72f</id>
        <link href="https://github.com/advisories/GHSA-m64q-4jqh-f72f"/>
        <updated>2024-04-18T00:31:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A stored XSS vulnerability in Excalidraw's web embeddable component. This allows arbitrary JavaScript to be run in the context of the domain where the editor is hosted. </p>
<h3 id="poc">Poc</h3>
<p>Inserting an embed with the below url (can be copy/pasted onto canvas to insert as embed) will log <code>42</code> to the console:</p>
<pre><code>https://gist.github.com/vv=v&lt;script&gt;console.log(42)&lt;/script&gt;
</code></pre>
<h3 id="details">Details</h3>
<p>There were two vectors. One rendering untrusted string as iframe's <code>srcdoc</code> without properly sanitizing against HTML injection. Second by improperly sanitizing against attribute HTML injection. This in conjunction with allowing <code>allow-same-origin</code> sandbox flag (necessary for several embeds) resulted in the XSS.</p>
<p>Former was fixed by no longer rendering unsafe <code>srcdoc</code> content verbatim, and instead strictly parsing the supplied content and constructing the <code>srcdoc</code> manually. The latter by sanitizing properly.</p>
<p>The <code>allow-same-origin</code> flag is now also set only in cases that require it, following the principle of least privilege.</p>
<h3 id="impact">Impact</h3>
<p>This is a cross site scripting vulnerability, for more information, please see: <a href="https://portswigger.net/web-security/cross-site-scripting">https://portswigger.net/web-security/cross-site-scripting</a></p>
<p>Two npm <code>@excalidraw/excalidraw</code> stable version releases were affected (<code>0.16.x</code>, <code>0.17.x</code>), and both are now patched.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f">https://github.com/excalidraw/excalidraw/security/advisories/GHSA-m64q-4jqh-f72f</a></li>
<li><a href="https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d">https://github.com/excalidraw/excalidraw/commit/6be752e1b6d776ccfbd3bb9eea17463cb264121d</a></li>
<li><a href="https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0">https://github.com/excalidraw/excalidraw/commit/988f81911ca58e3ca2583e0dd44a954dd00e09d0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32472">https://nvd.nist.gov/vuln/detail/CVE-2024-32472</a></li>
<li><a href="https://github.com/advisories/GHSA-m64q-4jqh-f72f">https://github.com/advisories/GHSA-m64q-4jqh-f72f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m64q-4jqh-f72f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-17T21:32:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@solana/web3.js] Handling untrusted input can result in a crash, leading to loss of availability / denial of service]]></title>
        <id>https://github.com/advisories/GHSA-8m45-2rjm-j347</id>
        <link href="https://github.com/advisories/GHSA-8m45-2rjm-j347"/>
        <updated>2024-04-17T21:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>Using particular inputs with <code>@solana/web3.js</code> will result in memory exhaustion (OOM).</p>
<p>If you have a server, client, mobile, or desktop product that accepts untrusted input for use with <code>@solana/web3.js</code>, your application/service may crash, resulting in a loss of availability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347">https://github.com/solana-labs/solana-web3.js/security/advisories/GHSA-8m45-2rjm-j347</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-30253">https://nvd.nist.gov/vuln/detail/CVE-2024-30253</a></li>
<li><a href="https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0">https://github.com/solana-labs/solana-web3.js/commit/77d935221a4805107b20b60ae7c1148725e4e2d0</a></li>
<li><a href="https://github.com/advisories/GHSA-8m45-2rjm-j347">https://github.com/advisories/GHSA-8m45-2rjm-j347</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m45-2rjm-j347</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-17T18:21:18.000Z</published>
    </entry>
</feed>