<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-03-25T21:01:16.914Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[express] Express.js Open Redirect in malformed URLs]]></title>
        <id>https://github.com/advisories/GHSA-rv95-896h-c2vc</id>
        <link href="https://github.com/advisories/GHSA-rv95-896h-c2vc"/>
        <updated>2024-03-25T19:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>
<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href="https://github.com/pillarjs/encodeurl">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>
<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>
<a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>
<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a>
<a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a>
<a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>
<li><a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a></li>
<li><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a></li>
<li><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>
<li><a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>
<li><a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></li>
<li><a href="https://github.com/advisories/GHSA-rv95-896h-c2vc">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv95-896h-c2vc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:40:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] Express.js Open Redirect in malformed URLs]]></title>
        <id>https://github.com/advisories/GHSA-rv95-896h-c2vc</id>
        <link href="https://github.com/advisories/GHSA-rv95-896h-c2vc"/>
        <updated>2024-03-25T19:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>
<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href="https://github.com/pillarjs/encodeurl">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>
<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>
<a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>
<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a>
<a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a>
<a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>
<li><a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a></li>
<li><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a></li>
<li><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>
<li><a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>
<li><a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></li>
<li><a href="https://github.com/advisories/GHSA-rv95-896h-c2vc">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv95-896h-c2vc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:40:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX missing normalization of the protocol in URLs allows bypassing forbidden protocols]]></title>
        <id>https://github.com/advisories/GHSA-3wc5-fcw2-2329</id>
        <link href="https://github.com/advisories/GHSA-3wc5-fcw2-2329"/>
        <updated>2024-03-25T19:38:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Code that uses KaTeX's <code>trust</code> option, specifically that provides a function to block-list certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate <code>javascript:</code> links in the output, even if the <code>trust</code> function tries to forbid this protocol via <code>trust: (context) =&gt; context.protocol !== 'javascript'</code>.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Allow-list instead of block protocols in your <code>trust</code> function.</li>
<li>Manually lowercase <code>context.protocol</code> via <code>context.protocol.toLowerCase()</code> before attempting to check for certain protocols.</li>
<li>Avoid use of or turn off the <code>trust</code> option.</li>
</ul>
<h3 id="details">Details</h3>
<p>KaTeX did not normalize the <code>protocol</code> entry of the <code>context</code> object provided to a user-specified <code>trust</code>-function, so it could be a mix of lowercase and/or uppercase letters.</p>
<p>It is generally better to allow-list by protocol, in which case this would normally not be an issue. But in some cases, you might want to block-list, and the <a href="https://katex.org/docs/options.html">KaTeX documentation</a> even provides such an example:</p>
<blockquote>
<p>Allow all commands but forbid specific protocol: <code>trust: (context) =&gt; context.protocol !== 'file'</code></p>
</blockquote>
<p>Currently KaTeX internally sees <code>file:</code> and <code>File:</code> URLs as different protocols, so <code>context.protocol</code> can be <code>file</code> or <code>File</code>, so the above check does not suffice.  A simple workaround would be:</p>
<blockquote>
<p><code>trust: (context) =&gt; context.protocol.toLowerCase() !== 'file'</code></p>
</blockquote>
<p>Most URL parsers normalize the scheme to lowercase. For example, <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.1">RFC3986</a> says:</p>
<blockquote>
<p>Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. An implementation should accept uppercase letters as equivalent to lowercase in scheme names (e.g., allow "HTTP" as well as "http") for the sake of robustness but should only produce lowercase scheme names for consistency.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de">https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de</a></li>
<li><a href="https://github.com/advisories/GHSA-3wc5-fcw2-2329">https://github.com/advisories/GHSA-3wc5-fcw2-2329</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wc5-fcw2-2329</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's `\includegraphics` does not escape filename]]></title>
        <id>https://github.com/advisories/GHSA-f98w-7cxr-ff2h</id>
        <link href="https://github.com/advisories/GHSA-f98w-7cxr-ff2h"/>
        <updated>2024-03-25T19:38:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\includegraphics</code> that runs arbitrary JavaScript, or generate invalid HTML.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Avoid use of or turn off the <code>trust</code> option, or set it to forbid <code>\includegraphics</code> commands.</li>
<li>Forbid inputs containing the substring <code>"\\includegraphics"</code>.</li>
<li>Sanitize HTML output from KaTeX.</li>
</ul>
<h3 id="details">Details</h3>
<p><code>\includegraphics</code> did not properly quote its filename argument, allowing it to generate invalid or malicious HTML that runs scripts.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770">https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770</a></li>
<li><a href="https://github.com/advisories/GHSA-f98w-7cxr-ff2h">https://github.com/advisories/GHSA-f98w-7cxr-ff2h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f98w-7cxr-ff2h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's maxExpand bypassed by Unicode sub/superscripts]]></title>
        <id>https://github.com/advisories/GHSA-cvr6-37gx-v8wc</id>
        <link href="https://github.com/advisories/GHSA-cvr6-37gx-v8wc"/>
        <updated>2024-03-25T19:38:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\def</code> or <code>\newcommand</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Forbid inputs containing any of the characters <code>₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ⁺⁻⁼⁽⁾⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘʷˣʸᶻᵛᵝᵞᵟᵠᵡ</code> before passing them to KaTeX.
(There is no easy workaround for the auto-render extension.)</p>
<h3 id="details">Details</h3>
<p>KaTeX supports an option named <code>maxExpand</code> which aims to prevent infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. Unfortunately, <a href="https://github.com/KaTeX/KaTeX/commit/d8fc35e6a97f8e561c723b93ad275cf5a7f3094a">support for "Unicode (sub|super)script characters"</a> allows an attacker to bypass this limit. Each sub/superscript group instantiated a separate Parser with its own limit on macro executions, without inheriting the current count of macro executions from its parent. This has been corrected in KaTeX v0.16.10.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2">https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2</a></li>
<li><a href="https://github.com/advisories/GHSA-cvr6-37gx-v8wc">https://github.com/advisories/GHSA-cvr6-37gx-v8wc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvr6-37gx-v8wc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's maxExpand bypassed by `\edef`]]></title>
        <id>https://github.com/advisories/GHSA-64fm-8hw2-v72w</id>
        <link href="https://github.com/advisories/GHSA-64fm-8hw2-v72w"/>
        <updated>2024-03-25T19:38:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\edef</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Forbid inputs containing the substring <code>"\\edef"</code> before passing them to KaTeX.
(There is no easy workaround for the auto-render extension.)</p>
<h3 id="details">Details</h3>
<p>KaTeX supports an option named <code>maxExpand</code> which prevents infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. However, what counted as an "expansion" is a single macro expanding to any number of tokens. The expand-and-define TeX command <code>\edef</code> can be used to build up an exponential number of tokens using only a linear number of expansions according to this definition, e.g. by repeatedly doubling the previous definition. This has been corrected in KaTeX v0.16.10, where every expanded token in an <code>\edef</code> counts as an expansion.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34">https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34</a></li>
<li><a href="https://github.com/advisories/GHSA-64fm-8hw2-v72w">https://github.com/advisories/GHSA-64fm-8hw2-v72w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64fm-8hw2-v72w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@oneuptime/common-server] OneUptime Vulnerable to a Privilege Escalation via Local Storage Key Manipulation]]></title>
        <id>https://github.com/advisories/GHSA-246p-xmg8-wmcq</id>
        <link href="https://github.com/advisories/GHSA-246p-xmg8-wmcq"/>
        <updated>2024-03-25T19:37:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A security vulnerability exists in oneuptime's local storage handling, where a regular user can escalate privileges by modifying the <code>is_master_admin</code> key to <code>true</code>. This allows unauthorized access to administrative functionalities.</p>
<h2 id="details">Details</h2>
<p>The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the <code>is_master_admin</code> key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation. </p>
<h2 id="poc">POC</h2>
<p>(I am using Firefox Developer to demonstrate this vulnerability)
Log in as a normal user. Open developer tools (hit F12), click Storage, then Local Storage. Modify the <code>is_master_admin</code> key from <code>false</code> to <code>true</code>.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability represents a high security risk as it allows any authenticated user to gain administrative privileges through client-side manipulation. Most of the admin previlages were disabled except the user list. Where an attacker could see all the list of users who signed up to OneUptome. </p>
<h2 id="patch">Patch</h2>
<p>This has been patched in 7.0.1815</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq">https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29194">https://nvd.nist.gov/vuln/detail/CVE-2024-29194</a></li>
<li><a href="https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c">https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c</a></li>
<li><a href="https://github.com/advisories/GHSA-246p-xmg8-wmcq">https://github.com/advisories/GHSA-246p-xmg8-wmcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-246p-xmg8-wmcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:37:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@oneuptime/model] OneUptime Vulnerable to a Privilege Escalation via Local Storage Key Manipulation]]></title>
        <id>https://github.com/advisories/GHSA-246p-xmg8-wmcq</id>
        <link href="https://github.com/advisories/GHSA-246p-xmg8-wmcq"/>
        <updated>2024-03-25T19:37:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A security vulnerability exists in oneuptime's local storage handling, where a regular user can escalate privileges by modifying the <code>is_master_admin</code> key to <code>true</code>. This allows unauthorized access to administrative functionalities.</p>
<h2 id="details">Details</h2>
<p>The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the <code>is_master_admin</code> key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation. </p>
<h2 id="poc">POC</h2>
<p>(I am using Firefox Developer to demonstrate this vulnerability)
Log in as a normal user. Open developer tools (hit F12), click Storage, then Local Storage. Modify the <code>is_master_admin</code> key from <code>false</code> to <code>true</code>.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability represents a high security risk as it allows any authenticated user to gain administrative privileges through client-side manipulation. Most of the admin previlages were disabled except the user list. Where an attacker could see all the list of users who signed up to OneUptome. </p>
<h2 id="patch">Patch</h2>
<p>This has been patched in 7.0.1815</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq">https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29194">https://nvd.nist.gov/vuln/detail/CVE-2024-29194</a></li>
<li><a href="https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c">https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c</a></li>
<li><a href="https://github.com/advisories/GHSA-246p-xmg8-wmcq">https://github.com/advisories/GHSA-246p-xmg8-wmcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-246p-xmg8-wmcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:37:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web3-utils] web3-utils Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-87qp-7cw8-8q9c</id>
        <link href="https://github.com/advisories/GHSA-87qp-7cw8-8q9c"/>
        <updated>2024-03-25T19:36:43.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package web3-utils before 4.2.1 are vulnerable to Prototype Pollution via the utility functions format and mergeDeep, due to insecure recursive merge.
An attacker can manipulate an object's prototype, potentially leading to the alteration of the behavior of all objects inheriting from the affected prototype by passing specially crafted input to these functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21505">https://nvd.nist.gov/vuln/detail/CVE-2024-21505</a></li>
<li><a href="https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80">https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337">https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337</a></li>
<li><a href="https://github.com/advisories/GHSA-87qp-7cw8-8q9c">https://github.com/advisories/GHSA-87qp-7cw8-8q9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87qp-7cw8-8q9c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T06:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@thi.ng/paths] @thi.ng/paths Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8ppr-www8-hfjx</id>
        <link href="https://github.com/advisories/GHSA-8ppr-www8-hfjx"/>
        <updated>2024-03-25T19:34:46.000Z</updated>
        <content type="html"><![CDATA[<p>An issue in @thi.ng/paths v.5.1.62 and before allows a remote attacker to execute arbitrary code via the <code>mutIn</code> and <code>mutInManyUnsafe</code> components.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29650">https://nvd.nist.gov/vuln/detail/CVE-2024-29650</a></li>
<li><a href="https://gist.github.com/tariqhawis/1bc340ca5ea6ae115c9ab9665cfd5921">https://gist.github.com/tariqhawis/1bc340ca5ea6ae115c9ab9665cfd5921</a></li>
<li><a href="https://learn.snyk.io/lesson/prototype-pollution/#a0a863a5-fd3a-539f-e1ed-a0769f6c6e3b">https://learn.snyk.io/lesson/prototype-pollution/#a0a863a5-fd3a-539f-e1ed-a0769f6c6e3b</a></li>
<li><a href="https://github.com/thi-ng/umbrella/issues/445">https://github.com/thi-ng/umbrella/issues/445</a></li>
<li><a href="https://github.com/thi-ng/umbrella/commit/c78b484882ad5214a46ef83ddb8020571c171353">https://github.com/thi-ng/umbrella/commit/c78b484882ad5214a46ef83ddb8020571c171353</a></li>
<li><a href="https://github.com/advisories/GHSA-8ppr-www8-hfjx">https://github.com/advisories/GHSA-8ppr-www8-hfjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8ppr-www8-hfjx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T15:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[translate] Cache Poisoning Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-882j-4vj5-7vmj</id>
        <link href="https://github.com/advisories/GHSA-882j-4vj5-7vmj"/>
        <updated>2024-03-22T20:02:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker controlling the second variable of the <code>translate</code> function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users.</p>
<h3 id="details">Details</h3>
<p>The <code>opt.id</code> parameter allows the overwriting of the cache key. If an attacker sets the <code>id</code> variable to the cache key that would be generated by another user, they can choose the response that user gets served.</p>
<h3 id="poc">PoC</h3>
<p>Take the following simple server allowing users to supply text and the language to translate to.</p>
<pre><code class="language-javascript">import translate from "translate";
import express from 'express';

const app = express();
app.use(express.json());

app.post('/translate', async (req, res) =&gt; {
  const { text, language } = req.body;
  const result = await translate(text, language);
  return res.json(result);
});

const port = 3000;
app.listen(port, () =&gt; {
  console.log(`Server is running on port ${port}`);
});
</code></pre>
<p>We can send the following request to poison the cache:</p>
<pre><code>{"text":"I hate you", "language":{"to":"nl","id":"undefined:en:nl:google:I love you"}}
</code></pre>
<p><img alt="Poisoning the cache" src="https://user-images.githubusercontent.com/44903767/285421743-ccfa3d9d-24cf-47b7-b805-0e4034cec82e.png"></p>
<p>Now, any user that attempts to translate "I love you" to Dutch, will get "I hate you" in Dutch as the response.
<img alt="The victim gets our poisoned data" src="https://user-images.githubusercontent.com/44903767/285422033-b3853ca2-8a5a-4875-91e8-ba2ef0258bc6.png"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can control the results other users may get</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj">https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj</a></li>
<li><a href="https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4">https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29042">https://nvd.nist.gov/vuln/detail/CVE-2024-29042</a></li>
<li><a href="https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3">https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3</a></li>
<li><a href="https://github.com/advisories/GHSA-882j-4vj5-7vmj">https://github.com/advisories/GHSA-882j-4vj5-7vmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-882j-4vj5-7vmj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-22T16:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-tar] Denial of service while parsing a tar file due to lack of folders count validation]]></title>
        <id>https://github.com/advisories/GHSA-f5x3-32g6-xq36</id>
        <link href="https://github.com/advisories/GHSA-f5x3-32g6-xq36"/>
        <updated>2024-03-22T16:57:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description:</h2>
<p>During some analysis today on npm's <code>node-tar</code> package I came across the folder creation process, Basicly if you provide node-tar with a path like this <code>./a/b/c/foo.txt</code> it would create every folder and sub-folder here a, b and c until it reaches the last folder to create <code>foo.txt</code>, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside</p>
<h2 id="steps-to-reproduce">Steps To Reproduce:</h2>
<p>You can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video</p>
<h2 id="proof-of-concept">Proof Of Concept:</h2>
<p>Here's a <a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&amp;response-content-type=video%2Fwebm&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2">video</a> show-casing the exploit: </p>
<h2 id="impact">Impact</h2>
<p>Denial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources</p>
<h2 id="report-resources">Report resources</h2>
<p><a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&amp;response-content-type=text%2Fplain&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae">payload.txt</a>
<a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&amp;response-content-type=application%2Fx-tar&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea">archeive.tar.gz</a></p>
<h2 id="note">Note</h2>
<p>This report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36">https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28863">https://nvd.nist.gov/vuln/detail/CVE-2024-28863</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7">https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7</a></li>
<li><a href="https://github.com/advisories/GHSA-f5x3-32g6-xq36">https://github.com/advisories/GHSA-f5x3-32g6-xq36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f5x3-32g6-xq36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-22T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[survey-creator] Cross-site scripting in Survey Creator]]></title>
        <id>https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</id>
        <link href="https://github.com/advisories/GHSA-xgj4-2hrf-j4xg"/>
        <updated>2024-03-21T18:58:34.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting (XSS) vulnerability in SurveyJS Survey Creator v.1.9.132 and before, allows attackers to execute arbitrary code and obtain sensitive information via the title parameter in form.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28635">https://nvd.nist.gov/vuln/detail/CVE-2024-28635</a></li>
<li><a href="https://github.com/surveyjs/survey-creator/issues/5285">https://github.com/surveyjs/survey-creator/issues/5285</a></li>
<li><a href="https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt">https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-xgj4-2hrf-j4xg">https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-21T06:33:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typeorm] SQL injection in typeORM]]></title>
        <id>https://github.com/advisories/GHSA-fx4w-v43j-vc45</id>
        <link href="https://github.com/advisories/GHSA-fx4w-v43j-vc45"/>
        <updated>2024-03-21T18:57:33.000Z</updated>
        <content type="html"><![CDATA[<p>The findOne function in TypeORM before 0.3.0 can either be supplied with a string or a FindOneOptions object. When input to the function is a user-controlled parsed JSON object, supplying a crafted FindOneOptions instead of an id string leads to SQL injection. NOTE: the vendor's position is that the user's application is responsible for input validation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33171">https://nvd.nist.gov/vuln/detail/CVE-2022-33171</a></li>
<li><a href="https://github.com/typeorm/typeorm/compare/0.2.45...0.3.0">https://github.com/typeorm/typeorm/compare/0.2.45...0.3.0</a></li>
<li><a href="https://seclists.org/fulldisclosure/2022/Jun/51">https://seclists.org/fulldisclosure/2022/Jun/51</a></li>
<li><a href="http://packetstormsecurity.com/files/168096/TypeORM-0.3.7-Information-Disclosure.html">http://packetstormsecurity.com/files/168096/TypeORM-0.3.7-Information-Disclosure.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2022/Aug/7">http://seclists.org/fulldisclosure/2022/Aug/7</a></li>
<li><a href="https://github.com/advisories/GHSA-fx4w-v43j-vc45">https://github.com/advisories/GHSA-fx4w-v43j-vc45</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx4w-v43j-vc45</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-07-05T00:00:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Server crashes on invalid Cloud Function or Cloud Job name]]></title>
        <id>https://github.com/advisories/GHSA-6hh7-46r2-vf29</id>
        <link href="https://github.com/advisories/GHSA-6hh7-46r2-vf29"/>
        <updated>2024-03-19T22:15:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Calling an invalid Parse Server Cloud Function name or Cloud Job name crashes server and may allow for code injection.</p>
<h3 id="patches">Patches</h3>
<p>Added string sanitation for Cloud Function name and Cloud Job name.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitize the Cloud Function name and Cloud Job name before it reaches Parse Server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a> (Fix for Parse Server 7 alpha)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a> (Fix for Parse Server 6 LTS)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b">https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e">https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29027">https://nvd.nist.gov/vuln/detail/CVE-2024-29027</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a></li>
<li><a href="https://github.com/advisories/GHSA-6hh7-46r2-vf29">https://github.com/advisories/GHSA-6hh7-46r2-vf29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hh7-46r2-vf29</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-19T20:07:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Server crashes on invalid Cloud Function or Cloud Job name]]></title>
        <id>https://github.com/advisories/GHSA-6hh7-46r2-vf29</id>
        <link href="https://github.com/advisories/GHSA-6hh7-46r2-vf29"/>
        <updated>2024-03-19T22:15:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Calling an invalid Parse Server Cloud Function name or Cloud Job name crashes server and may allow for code injection.</p>
<h3 id="patches">Patches</h3>
<p>Added string sanitation for Cloud Function name and Cloud Job name.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitize the Cloud Function name and Cloud Job name before it reaches Parse Server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a> (Fix for Parse Server 7 alpha)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a> (Fix for Parse Server 6 LTS)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b">https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e">https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29027">https://nvd.nist.gov/vuln/detail/CVE-2024-29027</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a></li>
<li><a href="https://github.com/advisories/GHSA-6hh7-46r2-vf29">https://github.com/advisories/GHSA-6hh7-46r2-vf29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hh7-46r2-vf29</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-19T20:07:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@turbo-boost/commands] TurboBoost Commands vulnerable to arbitrary method invocation]]></title>
        <id>https://github.com/advisories/GHSA-mp76-7w5v-pr75</id>
        <link href="https://github.com/advisories/GHSA-mp76-7w5v-pr75"/>
        <updated>2024-03-18T16:48:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.</p>
<h4 id="details">Details</h4>
<p>Commands verify that the class must be a <code>Command</code> and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  </p>
<h3 id="patches">Patches</h3>
<p>Patched in the following versions.</p>
<ul>
<li>0.1.3<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3">Ruby GEM</a></li>
</ul>
</li>
<li>0.2.2<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2">Ruby GEM</a></li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library.</p>
<pre><code class="language-ruby">class ApplicationCommand &lt; TurboBoost::Commands::Command
  before_command do
    method_name = params[:name].include?("#") ? params[:name].split("#").last : :perform
    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }
    throw :abort unless allowed # ← blocks invocation
    # raise "Invalid Command" unless allowed # ← blocks invocation
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75">https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28181">https://nvd.nist.gov/vuln/detail/CVE-2024-28181</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477">https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba">https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-mp76-7w5v-pr75">https://github.com/advisories/GHSA-mp76-7w5v-pr75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp76-7w5v-pr75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T19:53:50.000Z</published>
    </entry>
</feed>