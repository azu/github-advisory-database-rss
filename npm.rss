<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-04-03T06:01:31.807Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[limdu] Command Injection in Limdu]]></title>
        <id>https://github.com/advisories/GHSA-77qv-gh6f-pgh4</id>
        <link href="https://github.com/advisories/GHSA-77qv-gh6f-pgh4"/>
        <updated>2023-03-31T18:27:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>trainBatch</code> function has a command injection vulnerability. Clients of the Limdu library are unlikely to be aware of this, so they might unwittingly write code that contains a vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>Patched in version 0.9.5.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not use trainBatch with classifiers that rely on shell execution, such as SVM Perf, SVM Linear or Adaboost</p>
<h3 id="references">References</h3>
<p>No</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/erelsgl/limdu/security/advisories/GHSA-77qv-gh6f-pgh4">https://github.com/erelsgl/limdu/security/advisories/GHSA-77qv-gh6f-pgh4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-4066">https://nvd.nist.gov/vuln/detail/CVE-2020-4066</a></li>
<li><a href="https://github.com/erelsgl/limdu/commit/03475a6a6bb253de6fad8f7f39cfb3504f11438d">https://github.com/erelsgl/limdu/commit/03475a6a6bb253de6fad8f7f39cfb3504f11438d</a></li>
<li><a href="https://github.com/advisories/GHSA-77qv-gh6f-pgh4">https://github.com/advisories/GHSA-77qv-gh6f-pgh4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-77qv-gh6f-pgh4</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2020-06-22T15:24:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor4] CKEditor 4.0 vulnerability in the HTML Data Processor]]></title>
        <id>https://github.com/advisories/GHSA-vcjf-mgcg-jxjq</id>
        <link href="https://github.com/advisories/GHSA-vcjf-mgcg-jxjq"/>
        <updated>2023-03-31T18:24:19.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability in the HTML Data Processor for CKEditor 4.0 before 4.14.0 allows remote attackers to inject arbitrary web script through a crafted "protected" comment (with the cke_protected syntax).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-9281">https://nvd.nist.gov/vuln/detail/CVE-2020-9281</a></li>
<li><a href="https://github.com/ckeditor/ckeditor4">https://github.com/ckeditor/ckeditor4</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/7OJ4BSS3VEAEXPNSOOUAXX6RDNECGZNO/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/7OJ4BSS3VEAEXPNSOOUAXX6RDNECGZNO/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L322YA73LCV3TO7ORY45WQDAFJVNKXBE/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/L322YA73LCV3TO7ORY45WQDAFJVNKXBE/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4HHYQ6N452XTCIROFMJOTYEUWSB6FR4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/M4HHYQ6N452XTCIROFMJOTYEUWSB6FR4/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2020.html">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-vcjf-mgcg-jxjq">https://github.com/advisories/GHSA-vcjf-mgcg-jxjq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vcjf-mgcg-jxjq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-07T16:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[feathers-sequelize] Feather-Sequelize cleanQuery method vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-p5m3-27vh-52j4</id>
        <link href="https://github.com/advisories/GHSA-p5m3-27vh-52j4"/>
        <updated>2023-03-31T18:23:08.000Z</updated>
        <content type="html"><![CDATA[<p>Feather-Sequelize cleanQuery method uses insecure recursive logic to filter unsupported keys from the query object. This results in a Remote Code Execution (RCE) with privileges of application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29823">https://nvd.nist.gov/vuln/detail/CVE-2022-29823</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00020">https://csirt.divd.nl/cases/DIVD-2022-00020</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-29823/">https://csirt.divd.nl/cves/CVE-2022-29823/</a></li>
<li><a href="https://github.com/feathersjs-ecosystem/feathers-sequelize/commit/0b7beaa773dc313fdb27edd9ee8115064d7cf114">https://github.com/feathersjs-ecosystem/feathers-sequelize/commit/0b7beaa773dc313fdb27edd9ee8115064d7cf114</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-29823/">https://csirt.divd.nl/CVE-2022-29823/</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00020">https://csirt.divd.nl/DIVD-2022-00020</a></li>
<li><a href="https://github.com/advisories/GHSA-p5m3-27vh-52j4">https://github.com/advisories/GHSA-p5m3-27vh-52j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p5m3-27vh-52j4</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[feathers-sequelize] feathers-sequelize contains improper input validation leading to SQL injection]]></title>
        <id>https://github.com/advisories/GHSA-qpv8-4pjq-qqh7</id>
        <link href="https://github.com/advisories/GHSA-qpv8-4pjq-qqh7"/>
        <updated>2023-03-31T18:22:37.000Z</updated>
        <content type="html"><![CDATA[<p>Due to improper input validation in the Feathers js library, it is possible to perform a SQL injection attack on the back-end database, in case the feathers-sequelize package is used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2422">https://nvd.nist.gov/vuln/detail/CVE-2022-2422</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00020">https://csirt.divd.nl/cases/DIVD-2022-00020</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-2422">https://csirt.divd.nl/cves/CVE-2022-2422</a></li>
<li><a href="https://github.com/feathersjs-ecosystem/feathers-sequelize/commit/0f2d85f0b2d556f2b6c70423dcebdbd29d95e3dc">https://github.com/feathersjs-ecosystem/feathers-sequelize/commit/0f2d85f0b2d556f2b6c70423dcebdbd29d95e3dc</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-2422">https://csirt.divd.nl/CVE-2022-2422</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00020">https://csirt.divd.nl/DIVD-2022-00020</a></li>
<li><a href="https://github.com/advisories/GHSA-qpv8-4pjq-qqh7">https://github.com/advisories/GHSA-qpv8-4pjq-qqh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qpv8-4pjq-qqh7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jquery] Potential XSS vulnerability in jQuery]]></title>
        <id>https://github.com/advisories/GHSA-gxr4-xjj5-5px2</id>
        <link href="https://github.com/advisories/GHSA-gxr4-xjj5-5px2"/>
        <updated>2023-03-31T18:22:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Passing HTML from untrusted sources - even after sanitizing it - to one of jQuery's DOM manipulation methods (i.e. <code>.html()</code>, <code>.append()</code>, and others) may execute untrusted code.</p>
<h3 id="patches">Patches</h3>
<p>This problem is patched in jQuery 3.5.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>To workaround the issue without upgrading, adding the following to your code:</p>
<pre><code class="language-js">jQuery.htmlPrefilter = function( html ) {
    return html;
};
</code></pre>
<p>You need to use at least jQuery 1.12/2.2 or newer to be able to apply this workaround.</p>
<h3 id="references">References</h3>
<p><a href="https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/">https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/</a>
<a href="https://jquery.com/upgrade-guide/3.5/">https://jquery.com/upgrade-guide/3.5/</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, search for a relevant issue in <a href="https://github.com/jquery/jquery/issues">the jQuery repo</a>. If you don't find an answer, open a new issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2">https://github.com/jquery/jquery/security/advisories/GHSA-gxr4-xjj5-5px2</a></li>
<li><a href="https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77">https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77</a></li>
<li><a href="https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/">https://blog.jquery.com/2020/04/10/jquery-3-5-0-released/</a></li>
<li><a href="https://jquery.com/upgrade-guide/3.5/">https://jquery.com/upgrade-guide/3.5/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-11022">https://nvd.nist.gov/vuln/detail/CVE-2020-11022</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200511-0006/">https://security.netapp.com/advisory/ntap-20200511-0006/</a></li>
<li><a href="https://www.drupal.org/sa-core-2020-002">https://www.drupal.org/sa-core-2020-002</a></li>
<li><a href="https://www.debian.org/security/2020/dsa-4693">https://www.debian.org/security/2020/dsa-4693</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOE7P7APPRQKD4FGNHBKJPDY6FFCOH3W/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VOE7P7APPRQKD4FGNHBKJPDY6FFCOH3W/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QPN2L2XVQGUA2V5HNQJWHK3APSK3VN7K/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QPN2L2XVQGUA2V5HNQJWHK3APSK3VN7K/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2020.html">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00067.html">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00067.html</a></li>
<li><a href="https://security.gentoo.org/glsa/202007-03">https://security.gentoo.org/glsa/202007-03</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00085.html">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00085.html</a></li>
<li><a href="https://lists.apache.org/thread.html/rdf44341677cf7eec7e9aa96dcf3f37ed709544863d619cca8c36f133@%3Ccommits.airflow.apache.org%3E">https://lists.apache.org/thread.html/rdf44341677cf7eec7e9aa96dcf3f37ed709544863d619cca8c36f133@%3Ccommits.airflow.apache.org%3E</a></li>
<li><a href="https://github.com/advisories/GHSA-gxr4-xjj5-5px2">https://github.com/advisories/GHSA-gxr4-xjj5-5px2</a></li>
<li><a href="https://www.npmjs.com/advisories/1518">https://www.npmjs.com/advisories/1518</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AVKYXLWCLZBV2N7M46KYK4LVA5OXWPBY/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/AVKYXLWCLZBV2N7M46KYK4LVA5OXWPBY/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SFP4UK4EGP4AFH2MWYJ5A5Z4I7XVFQ6B/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SFP4UK4EGP4AFH2MWYJ5A5Z4I7XVFQ6B/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SAPQVX3XDNPGFT26QAQ6AJIXZZBZ4CD4/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/SAPQVX3XDNPGFT26QAQ6AJIXZZBZ4CD4/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2020.html">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r706cfbc098420f7113968cc377247ec3d1439bce42e679c11c609e2d@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r706cfbc098420f7113968cc377247ec3d1439bce42e679c11c609e2d@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rbb448222ba62c430e21e13f940be4cb5cfc373cd3bce56b48c0ffa67@%3Cdev.flink.apache.org%3E">https://lists.apache.org/thread.html/rbb448222ba62c430e21e13f940be4cb5cfc373cd3bce56b48c0ffa67@%3Cdev.flink.apache.org%3E</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-11/msg00039.html">http://lists.opensuse.org/opensuse-security-announce/2020-11/msg00039.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r49ce4243b4738dd763caeb27fa8ad6afb426ae3e8c011ff00b8b1f48@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r49ce4243b4738dd763caeb27fa8ad6afb426ae3e8c011ff00b8b1f48@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://www.tenable.com/security/tns-2020-10">https://www.tenable.com/security/tns-2020-10</a></li>
<li><a href="https://www.tenable.com/security/tns-2020-11">https://www.tenable.com/security/tns-2020-11</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r564585d97bc069137e64f521e68ba490c7c9c5b342df5d73c49a0760@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r564585d97bc069137e64f521e68ba490c7c9c5b342df5d73c49a0760@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r8f70b0f65d6bedf316ecd899371fd89e65333bc988f6326d2956735c@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r8f70b0f65d6bedf316ecd899371fd89e65333bc988f6326d2956735c@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-02">https://www.tenable.com/security/tns-2021-02</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/03/msg00033.html">https://lists.debian.org/debian-lts-announce/2021/03/msg00033.html</a></li>
<li><a href="http://packetstormsecurity.com/files/162159/jQuery-1.2-Cross-Site-Scripting.html">http://packetstormsecurity.com/files/162159/jQuery-1.2-Cross-Site-Scripting.html</a></li>
<li><a href="https://lists.apache.org/thread.html/rede9cfaa756e050a3d83045008f84a62802fc68c17f2b4eabeaae5e4@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/rede9cfaa756e050a3d83045008f84a62802fc68c17f2b4eabeaae5e4@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ree3bd8ddb23df5fa4e372d11c226830ea3650056b1059f3965b3fce2@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/ree3bd8ddb23df5fa4e372d11c226830ea3650056b1059f3965b3fce2@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r54565a8f025c7c4f305355fdfd75b68eca442eebdb5f31c2e7d977ae@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r54565a8f025c7c4f305355fdfd75b68eca442eebdb5f31c2e7d977ae@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/re4ae96fa5c1a2fe71ccbb7b7ac1538bd0cb677be270a2bf6e2f8d108@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/re4ae96fa5c1a2fe71ccbb7b7ac1538bd0cb677be270a2bf6e2f8d108@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-10">https://www.tenable.com/security/tns-2021-10</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r0483ba0072783c2e1bfea613984bfb3c86e73ba8879d780dc1cc7d36@%3Cissues.flink.apache.org%3E">https://lists.apache.org/thread.html/r0483ba0072783c2e1bfea613984bfb3c86e73ba8879d780dc1cc7d36@%3Cissues.flink.apache.org%3E</a></li>
<li><a href="https://github.com/jquery/jquery/releases/tag/3.5.0">https://github.com/jquery/jquery/releases/tag/3.5.0</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxr4-xjj5-5px2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-04-29T22:18:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron Vulnerable to Code Execution by Re-Enabling Node.js Integration]]></title>
        <id>https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</id>
        <link href="https://github.com/advisories/GHSA-8xwg-wv7v-4vqp"/>
        <updated>2023-03-31T18:21:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of electron 
A vulnerability has been discovered which allows Node.js integration to be re-enabled in some Electron applications that disable it.</p>
<p>For the application to be impacted by this vulnerability it must meet all of these conditions</p>
<ul>
<li>Runs on Electron 1.7, 1.8, or a 2.0.0-beta</li>
<li>Allows execution of arbitrary remote code</li>
<li>Disables Node.js integration</li>
<li>Does not explicitly declare webviewTag: false in its webPreferences</li>
<li>Does not enable the nativeWindowOption option</li>
<li>Does not intercept new-window events and manually override event.newGuest without using the supplied options tag</li>
</ul>
<h2 id="recommendation">Recommendation</h2>
<p>Update to <code>electron</code> version 1.7.13, 1.8.4, or 2.0.0-beta.5 or later.</p>
<p>If you are unable to update your Electron version can mitigate the vulnerability with the following code.</p>
<pre><code>app.on('web-contents-created', (event, win) =&gt; {
  win.on('new-window', (event, newURL, frameName, disposition,
                        options, additionalFeatures) =&gt; {
    if (!options.webPreferences) options.webPreferences = {};
    options.webPreferences.nodeIntegration = false;
    options.webPreferences.nodeIntegrationInWorker = false;
    options.webPreferences.webviewTag = false;
    delete options.webPreferences.preload;
  })
})

// and *IF* you don't use WebViews at all,
// you might also want
app.on('web-contents-created', (event, win) =&gt; {
  win.on('will-attach-webview', (event, webPreferences, params) =&gt; {
    event.preventDefault();
  })
})
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1000136">https://nvd.nist.gov/vuln/detail/CVE-2018-1000136</a></li>
<li><a href="https://electronjs.org/blog/webview-fix">https://electronjs.org/blog/webview-fix</a></li>
<li><a href="https://www.npmjs.com/advisories/574">https://www.npmjs.com/advisories/574</a></li>
<li><a href="https://www.electronjs.org/blog/webview-fix">https://www.electronjs.org/blog/webview-fix</a></li>
<li><a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/CVE-2018-1000136---Electron-nodeIntegration-Bypass/">https://www.trustwave.com/Resources/SpiderLabs-Blog/CVE-2018-1000136---Electron-nodeIntegration-Bypass/</a></li>
<li><a href="https://github.com/electron/electron/pull/12271">https://github.com/electron/electron/pull/12271</a></li>
<li><a href="https://github.com/electron/electron/pull/12292">https://github.com/electron/electron/pull/12292</a></li>
<li><a href="https://github.com/electron/electron/pull/12294">https://github.com/electron/electron/pull/12294</a></li>
<li><a href="https://github.com/electron/electron/commit/1a48ee28276e6588dbf4e70e58d78e7bfdc57043">https://github.com/electron/electron/commit/1a48ee28276e6588dbf4e70e58d78e7bfdc57043</a></li>
<li><a href="https://github.com/advisories/GHSA-8xwg-wv7v-4vqp">https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-03-26T16:41:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron Vulnerable to Code Execution by Re-Enabling Node.js Integration]]></title>
        <id>https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</id>
        <link href="https://github.com/advisories/GHSA-8xwg-wv7v-4vqp"/>
        <updated>2023-03-31T18:21:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of electron 
A vulnerability has been discovered which allows Node.js integration to be re-enabled in some Electron applications that disable it.</p>
<p>For the application to be impacted by this vulnerability it must meet all of these conditions</p>
<ul>
<li>Runs on Electron 1.7, 1.8, or a 2.0.0-beta</li>
<li>Allows execution of arbitrary remote code</li>
<li>Disables Node.js integration</li>
<li>Does not explicitly declare webviewTag: false in its webPreferences</li>
<li>Does not enable the nativeWindowOption option</li>
<li>Does not intercept new-window events and manually override event.newGuest without using the supplied options tag</li>
</ul>
<h2 id="recommendation">Recommendation</h2>
<p>Update to <code>electron</code> version 1.7.13, 1.8.4, or 2.0.0-beta.5 or later.</p>
<p>If you are unable to update your Electron version can mitigate the vulnerability with the following code.</p>
<pre><code>app.on('web-contents-created', (event, win) =&gt; {
  win.on('new-window', (event, newURL, frameName, disposition,
                        options, additionalFeatures) =&gt; {
    if (!options.webPreferences) options.webPreferences = {};
    options.webPreferences.nodeIntegration = false;
    options.webPreferences.nodeIntegrationInWorker = false;
    options.webPreferences.webviewTag = false;
    delete options.webPreferences.preload;
  })
})

// and *IF* you don't use WebViews at all,
// you might also want
app.on('web-contents-created', (event, win) =&gt; {
  win.on('will-attach-webview', (event, webPreferences, params) =&gt; {
    event.preventDefault();
  })
})
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1000136">https://nvd.nist.gov/vuln/detail/CVE-2018-1000136</a></li>
<li><a href="https://electronjs.org/blog/webview-fix">https://electronjs.org/blog/webview-fix</a></li>
<li><a href="https://www.npmjs.com/advisories/574">https://www.npmjs.com/advisories/574</a></li>
<li><a href="https://www.electronjs.org/blog/webview-fix">https://www.electronjs.org/blog/webview-fix</a></li>
<li><a href="https://www.trustwave.com/Resources/SpiderLabs-Blog/CVE-2018-1000136---Electron-nodeIntegration-Bypass/">https://www.trustwave.com/Resources/SpiderLabs-Blog/CVE-2018-1000136---Electron-nodeIntegration-Bypass/</a></li>
<li><a href="https://github.com/electron/electron/pull/12271">https://github.com/electron/electron/pull/12271</a></li>
<li><a href="https://github.com/electron/electron/pull/12292">https://github.com/electron/electron/pull/12292</a></li>
<li><a href="https://github.com/electron/electron/pull/12294">https://github.com/electron/electron/pull/12294</a></li>
<li><a href="https://github.com/electron/electron/commit/1a48ee28276e6588dbf4e70e58d78e7bfdc57043">https://github.com/electron/electron/commit/1a48ee28276e6588dbf4e70e58d78e7bfdc57043</a></li>
<li><a href="https://github.com/advisories/GHSA-8xwg-wv7v-4vqp">https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xwg-wv7v-4vqp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-03-26T16:41:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap] Bootstrap vulnerable to Cross-Site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-3wqf-4x89-9g79</id>
        <link href="https://github.com/advisories/GHSA-3wqf-4x89-9g79"/>
        <updated>2023-03-31T18:12:49.000Z</updated>
        <content type="html"><![CDATA[<p>In Bootstrap 4.x before 4.1.2, XSS is possible in the collapse data-parent attribute.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14040">https://nvd.nist.gov/vuln/detail/CVE-2018-14040</a></li>
<li><a href="https://github.com/twbs/bootstrap/issues/26423">https://github.com/twbs/bootstrap/issues/26423</a></li>
<li><a href="https://github.com/twbs/bootstrap/issues/26625">https://github.com/twbs/bootstrap/issues/26625</a></li>
<li><a href="https://github.com/twbs/bootstrap/pull/26630">https://github.com/twbs/bootstrap/pull/26630</a></li>
<li><a href="https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/">https://blog.getbootstrap.com/2018/07/12/bootstrap-4-1-2/</a></li>
<li><a href="https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/52e0e6b5df827ee7f1e68f7cc3babe61af3b2160f5d74a85469b7b0e@%3Cdev.superset.apache.org%3E">https://lists.apache.org/thread.html/52e0e6b5df827ee7f1e68f7cc3babe61af3b2160f5d74a85469b7b0e@%3Cdev.superset.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E">https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3dc0cac8d856bca02bd6997355d7ff83027dcfc82f8646a29b89b714@%3Cissues.hbase.apache.org%3E">https://lists.apache.org/thread.html/r3dc0cac8d856bca02bd6997355d7ff83027dcfc82f8646a29b89b714@%3Cissues.hbase.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/rd0e44e8ef71eeaaa3cf3d1b8b41eb25894372e2995ec908ce7624d26@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2018/08/msg00027.html">https://lists.debian.org/debian-lts-announce/2018/08/msg00027.html</a></li>
<li><a href="https://seclists.org/bugtraq/2019/May/18">https://seclists.org/bugtraq/2019/May/18</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.tenable.com/security/tns-2021-14">https://www.tenable.com/security/tns-2021-14</a></li>
<li><a href="http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html">http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html</a></li>
<li><a href="http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html">http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2019/May/10">http://seclists.org/fulldisclosure/2019/May/10</a></li>
<li><a href="http://seclists.org/fulldisclosure/2019/May/11">http://seclists.org/fulldisclosure/2019/May/11</a></li>
<li><a href="http://seclists.org/fulldisclosure/2019/May/13">http://seclists.org/fulldisclosure/2019/May/13</a></li>
<li><a href="https://github.com/twbs/bootstrap/blob/v3.4.1/js/collapse.js#L140">https://github.com/twbs/bootstrap/blob/v3.4.1/js/collapse.js#L140</a></li>
<li><a href="https://github.com/twbs/bootstrap/blob/v3.4.1/js/scrollspy.js#L56">https://github.com/twbs/bootstrap/blob/v3.4.1/js/scrollspy.js#L56</a></li>
<li><a href="https://github.com/twbs/bootstrap/blob/v3.4.1/js/tooltip.js#L352">https://github.com/twbs/bootstrap/blob/v3.4.1/js/tooltip.js#L352</a></li>
<li><a href="https://github.com/advisories/GHSA-3wqf-4x89-9g79">https://github.com/advisories/GHSA-3wqf-4x89-9g79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wqf-4x89-9g79</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:07:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-esm-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-cjs-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-browser-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-esm-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-cjs-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-browser-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2023-03-31T18:07:20.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[deep-extend] Prototype Pollution in deep-extend]]></title>
        <id>https://github.com/advisories/GHSA-hr2v-3952-633q</id>
        <link href="https://github.com/advisories/GHSA-hr2v-3952-633q"/>
        <updated>2023-03-30T22:48:38.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>deep-extend</code> before 0.5.1 are vulnerable to prototype pollution.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 0.5.1 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-3750">https://nvd.nist.gov/vuln/detail/CVE-2018-3750</a></li>
<li><a href="https://hackerone.com/reports/311333">https://hackerone.com/reports/311333</a></li>
<li><a href="https://github.com/advisories/GHSA-hr2v-3952-633q">https://github.com/advisories/GHSA-hr2v-3952-633q</a></li>
<li><a href="https://www.npmjs.com/advisories/612">https://www.npmjs.com/advisories/612</a></li>
<li><a href="https://github.com/unclechu/node-deep-extend/commit/9423fae877e2ab6b4aecc4db79a0ed63039d4703">https://github.com/unclechu/node-deep-extend/commit/9423fae877e2ab6b4aecc4db79a0ed63039d4703</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr2v-3952-633q</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-10-09T00:44:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bson] Deserialization of Untrusted Data in bson]]></title>
        <id>https://github.com/advisories/GHSA-v8w9-2789-6hhr</id>
        <link href="https://github.com/advisories/GHSA-v8w9-2789-6hhr"/>
        <updated>2023-03-30T22:46:25.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of bson before 1.1.4 are vulnerable to Deserialization of Untrusted Data. The package will ignore an unknown value for an object's _bsontype, leading to cases where an object is serialized as a document rather than the intended BSON type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7610">https://nvd.nist.gov/vuln/detail/CVE-2020-7610</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-BSON-561052">https://snyk.io/vuln/SNYK-JS-BSON-561052</a></li>
<li><a href="https://github.com/mongodb/js-bson/commit/3809c1313a7b2a8001065f0271199df9fa3d16a8">https://github.com/mongodb/js-bson/commit/3809c1313a7b2a8001065f0271199df9fa3d16a8</a></li>
<li><a href="https://github.com/advisories/GHSA-v8w9-2789-6hhr">https://github.com/advisories/GHSA-v8w9-2789-6hhr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8w9-2789-6hhr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-07T16:04:54.000Z</published>
    </entry>
</feed>