<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-03-05T16:01:25.550Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[jsonata] JSONata expression can pollute the "Object" prototype]]></title>
        <id>https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</id>
        <link href="https://github.com/advisories/GHSA-fqg8-vfv7-8fj8"/>
        <updated>2024-03-04T20:43:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In JSONata versions <code>&gt;= 1.4.0, &lt; 1.8.7</code> and <code>&gt;= 2.0.0, &lt; 2.0.4</code>, a malicious expression can use the <a href="https://docs.jsonata.org/other-operators#-------transform">transform operator</a> to override properties on the <code>Object</code> constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions.</p>
<h3 id="patch">Patch</h3>
<p>This issue has been fixed in JSONata versions <code>&gt;= 1.8.7</code> and <code>&gt;= 2.0.4</code>. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. The following patch can be applied if updating is not possible.</p>
<pre><code class="language-patch">--- a/src/jsonata.js
+++ b/src/jsonata.js
@@ -1293,6 +1293,13 @@ var jsonata = (function() {
                 }
                 for(var ii = 0; ii &lt; matches.length; ii++) {
                     var match = matches[ii];
+                    if (match &amp;&amp; (match.isPrototypeOf(result) || match instanceof Object.constructor)) {
+                        throw {
+                            code: "D1010",
+                            stack: (new Error()).stack,
+                            position: expr.position
+                        };
+                    }
                     // evaluate the update value for each match
                     var update = await evaluate(expr.update, match, environment);
                     // update must be an object
@@ -1539,7 +1546,7 @@ var jsonata = (function() {
                 if (typeof err.token == 'undefined' &amp;&amp; typeof proc.token !== 'undefined') {
                     err.token = proc.token;
                 }
-                err.position = proc.position;
+                err.position = proc.position || err.position;
             }
             throw err;
         }
@@ -1972,6 +1979,7 @@ var jsonata = (function() {
         "T1007": "Attempted to partially apply a non-function. Did you mean ${{{token}}}?",
         "T1008": "Attempted to partially apply a non-function",
         "D1009": "Multiple key definitions evaluate to same key: {{value}}",
+        "D1010": "Attempted to access the Javascript object prototype", // Javascript specific 
         "T1010": "The matcher function argument passed to function {{token}} does not return the correct object structure",
         "T2001": "The left side of the {{token}} operator must evaluate to a number",
         "T2002": "The right side of the {{token}} operator must evaluate to a number",
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></p>
<h3 id="credit">Credit</h3>
<p>Thank you to Albert Pedersen of Cloudflare for disclosing this issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8">https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1">https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c">https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2">https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></li>
<li><a href="https://github.com/advisories/GHSA-fqg8-vfv7-8fj8">https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:43:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jsonata] JSONata expression can pollute the "Object" prototype]]></title>
        <id>https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</id>
        <link href="https://github.com/advisories/GHSA-fqg8-vfv7-8fj8"/>
        <updated>2024-03-04T20:43:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In JSONata versions <code>&gt;= 1.4.0, &lt; 1.8.7</code> and <code>&gt;= 2.0.0, &lt; 2.0.4</code>, a malicious expression can use the <a href="https://docs.jsonata.org/other-operators#-------transform">transform operator</a> to override properties on the <code>Object</code> constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions.</p>
<h3 id="patch">Patch</h3>
<p>This issue has been fixed in JSONata versions <code>&gt;= 1.8.7</code> and <code>&gt;= 2.0.4</code>. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. The following patch can be applied if updating is not possible.</p>
<pre><code class="language-patch">--- a/src/jsonata.js
+++ b/src/jsonata.js
@@ -1293,6 +1293,13 @@ var jsonata = (function() {
                 }
                 for(var ii = 0; ii &lt; matches.length; ii++) {
                     var match = matches[ii];
+                    if (match &amp;&amp; (match.isPrototypeOf(result) || match instanceof Object.constructor)) {
+                        throw {
+                            code: "D1010",
+                            stack: (new Error()).stack,
+                            position: expr.position
+                        };
+                    }
                     // evaluate the update value for each match
                     var update = await evaluate(expr.update, match, environment);
                     // update must be an object
@@ -1539,7 +1546,7 @@ var jsonata = (function() {
                 if (typeof err.token == 'undefined' &amp;&amp; typeof proc.token !== 'undefined') {
                     err.token = proc.token;
                 }
-                err.position = proc.position;
+                err.position = proc.position || err.position;
             }
             throw err;
         }
@@ -1972,6 +1979,7 @@ var jsonata = (function() {
         "T1007": "Attempted to partially apply a non-function. Did you mean ${{{token}}}?",
         "T1008": "Attempted to partially apply a non-function",
         "D1009": "Multiple key definitions evaluate to same key: {{value}}",
+        "D1010": "Attempted to access the Javascript object prototype", // Javascript specific 
         "T1010": "The matcher function argument passed to function {{token}} does not return the correct object structure",
         "T2001": "The left side of the {{token}} operator must evaluate to a number",
         "T2002": "The right side of the {{token}} operator must evaluate to a number",
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></p>
<h3 id="credit">Credit</h3>
<p>Thank you to Albert Pedersen of Cloudflare for disclosing this issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8">https://github.com/jsonata-js/jsonata/security/advisories/GHSA-fqg8-vfv7-8fj8</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1">https://github.com/jsonata-js/jsonata/commit/1d579dbe99c19fbe509f5ba2c6db7959b0d456d1</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c">https://github.com/jsonata-js/jsonata/commit/335d38f6278e96c908b24183f1c9c90afc8ae00c</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2">https://github.com/jsonata-js/jsonata/commit/c907b5e517bb718015fcbd993d742ba6202f2be2</a></li>
<li><a href="https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4">https://github.com/jsonata-js/jsonata/releases/tag/v2.0.4</a></li>
<li><a href="https://github.com/advisories/GHSA-fqg8-vfv7-8fj8">https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqg8-vfv7-8fj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:43:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[app-builder-lib] electron-builder's NSIS installer - execute arbitrary code on the target machine (Windows only)]]></title>
        <id>https://github.com/advisories/GHSA-r4pf-3v7r-hh55</id>
        <link href="https://github.com/advisories/GHSA-r4pf-3v7r-hh55"/>
        <updated>2024-03-04T20:43:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Windows-Only: The NSIS installer makes a system call to open cmd.exe via NSExec in the <code>.nsh</code> installer script. NSExec by default searches the current directory of where the installer is located before searching <code>PATH</code>. This means that if an attacker can place a malicious executable file named cmd.exe in the same folder as the installer, the installer will run the malicious file.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="https://github.com/electron-userland/electron-builder/pull/8059">https://github.com/electron-userland/electron-builder/pull/8059</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>None, it executes at the installer-level before the app is present on the system, so there's no way to check if it exists in a current installer.</p>
<h3 id="references">References</h3>
<p><a href="https://cwe.mitre.org/data/definitions/426.html">https://cwe.mitre.org/data/definitions/426.html</a>
<a href="https://cwe.mitre.org/data/definitions/427">https://cwe.mitre.org/data/definitions/427</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/electron-userland/electron-builder/security/advisories/GHSA-r4pf-3v7r-hh55">https://github.com/electron-userland/electron-builder/security/advisories/GHSA-r4pf-3v7r-hh55</a></li>
<li><a href="https://github.com/electron-userland/electron-builder/pull/8059">https://github.com/electron-userland/electron-builder/pull/8059</a></li>
<li><a href="https://github.com/electron-userland/electron-builder/commit/8f4acff3c2d45c1cb07779bb3fe79644408ee387">https://github.com/electron-userland/electron-builder/commit/8f4acff3c2d45c1cb07779bb3fe79644408ee387</a></li>
<li><a href="https://github.com/advisories/GHSA-r4pf-3v7r-hh55">https://github.com/advisories/GHSA-r4pf-3v7r-hh55</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4pf-3v7r-hh55</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-04T20:42:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus version number disclosure]]></title>
        <id>https://github.com/advisories/GHSA-5mhg-wv8w-p59j</id>
        <link href="https://github.com/advisories/GHSA-5mhg-wv8w-p59j"/>
        <updated>2024-03-01T20:11:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Currently the exact Directus version number is being shipped in compiled JS bundles which are accessible without authentication. With this information a malicious attacker can trivially look for known vulnerabilities in Directus core or any of its shipped dependencies in that specific running version.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved in versions 10.8.3 and newer</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-5mhg-wv8w-p59j">https://github.com/directus/directus/security/advisories/GHSA-5mhg-wv8w-p59j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27296">https://nvd.nist.gov/vuln/detail/CVE-2024-27296</a></li>
<li><a href="https://github.com/directus/directus/commit/a5a1c26ac48795ed3212a4c51b9523588aff4fa0">https://github.com/directus/directus/commit/a5a1c26ac48795ed3212a4c51b9523588aff4fa0</a></li>
<li><a href="https://github.com/advisories/GHSA-5mhg-wv8w-p59j">https://github.com/advisories/GHSA-5mhg-wv8w-p59j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5mhg-wv8w-p59j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T20:11:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@budibase/server] Budibase affected by VM2 Constructor Escape Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4g2x-vq5p-5vj6</id>
        <link href="https://github.com/advisories/GHSA-4g2x-vq5p-5vj6"/>
        <updated>2024-03-01T20:09:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Previously, budibase used a library called <code>vm2</code> for code execution inside the Budibase builder and apps, such as the UI below for configuring bindings in the design section.</p>
<p><img alt="Screenshot 2024-03-01 at 13 50 16" src="https://github.com/Budibase/budibase/assets/11256663/5f049b64-cd99-48fd-a184-644cd312c82e"></p>
<p>Due to a <a href="https://github.com/advisories/GHSA-cchq-frgv-rjh5">vulnerability in vm2</a>, any environment that executed the code server side (automations and column formulas) was susceptible to this vulnerability, allowing users to escape the sandbox provided by <code>vm2</code>, and to expose server side variables such as <code>process.env</code>. It's recommended by the authors of <code>vm2</code> themselves that you should move to another solution for remote JS execution due to this vulnerability.</p>
<h3 id="patches">Patches</h3>
<p>We moved our entire JS sandbox infrastructure over to <code>isolated-vm</code>, a much more secure and recommended library for remote code execution in 2.20.0. This also comes with a performance benefit in the way we cache and execute your JS server side. The budibase cloud platform has been patched already and is not running <code>vm2</code>, but self host users will need to manage the updates by themselves.</p>
<p>If you are a self hosted user, you can take the following steps to reproduce the exploit and to verify if your installation is currently affected.</p>
<p>Create a new formula column on one of your tables in the data section with the following configuration.
<img alt="Screenshot 2024-03-01 at 14 04 28" src="https://github.com/Budibase/budibase/assets/11256663/0f8bc19b-9e44-4e95-ab4e-6ef6278eea34"></p>
<p>Add the following JS function to the formula and save.
<img alt="Screenshot 2024-03-01 at 14 05 19" src="https://github.com/Budibase/budibase/assets/11256663/1d0c9705-1a88-49b0-93e0-f385a04b5c25"></p>
<p>If your installation is vulnerable, when the formula evaluates you will be able to see the printed <code>process.env</code> in your new formula field. If not, your installation is not affected.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround at this time for any budibase app that uses JS. You must fully migrate post version 2.20.0 to patch the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-cchq-frgv-rjh5">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Budibase/budibase/security/advisories/GHSA-4g2x-vq5p-5vj6">https://github.com/Budibase/budibase/security/advisories/GHSA-4g2x-vq5p-5vj6</a></li>
<li><a href="https://github.com/patriksimek/vm2/security/advisories/GHSA-cchq-frgv-rjh5">https://github.com/patriksimek/vm2/security/advisories/GHSA-cchq-frgv-rjh5</a></li>
<li><a href="https://github.com/Budibase/budibase/commit/601c02a4acc695b1cc602bf611f0ae66d6e5868f">https://github.com/Budibase/budibase/commit/601c02a4acc695b1cc602bf611f0ae66d6e5868f</a></li>
<li><a href="https://github.com/advisories/GHSA-4g2x-vq5p-5vj6">https://github.com/advisories/GHSA-4g2x-vq5p-5vj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4g2x-vq5p-5vj6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-01T20:09:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] ZDI-CAN-19105: Parse Server literalizeRegexPart SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-6927-3vr9-fxf2</id>
        <link href="https://github.com/advisories/GHSA-6927-3vr9-fxf2"/>
        <updated>2024-03-01T20:08:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>
<h3 id="patches">Patches</h3>
<p>The algorithm to detect SQL injection has been improved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.0">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a> (fixed in Parse Server 6)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a> (fixed in Parse Server 7 alpha release)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Mikhail Shcherbakov (<a href="https://twitter.com/yu5k3">https://twitter.com/yu5k3</a>) working with Trend Micro Zero Day Initiative (finder)</li>
<li>Ehsan Persania (remediation developer)</li>
<li>Manuel Trezza (coordinator)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27298">https://nvd.nist.gov/vuln/detail/CVE-2024-27298</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504">https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833">https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.0">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a></li>
<li><a href="https://github.com/advisories/GHSA-6927-3vr9-fxf2">https://github.com/advisories/GHSA-6927-3vr9-fxf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6927-3vr9-fxf2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-01T20:08:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] ZDI-CAN-19105: Parse Server literalizeRegexPart SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-6927-3vr9-fxf2</id>
        <link href="https://github.com/advisories/GHSA-6927-3vr9-fxf2"/>
        <updated>2024-03-01T20:08:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows SQL injection when Parse Server is configured to use the PostgreSQL database.</p>
<h3 id="patches">Patches</h3>
<p>The algorithm to detect SQL injection has been improved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.0">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a> (fixed in Parse Server 6)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a> (fixed in Parse Server 7 alpha release)</li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Mikhail Shcherbakov (<a href="https://twitter.com/yu5k3">https://twitter.com/yu5k3</a>) working with Trend Micro Zero Day Initiative (finder)</li>
<li>Ehsan Persania (remediation developer)</li>
<li>Manuel Trezza (coordinator)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2">https://github.com/parse-community/parse-server/security/advisories/GHSA-6927-3vr9-fxf2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27298">https://nvd.nist.gov/vuln/detail/CVE-2024-27298</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504">https://github.com/parse-community/parse-server/commit/a6e654943536932904a69b51e513507fcf90a504</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833">https://github.com/parse-community/parse-server/commit/cbefe770a7260b54748a058b8a7389937dc35833</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.0">https://github.com/parse-community/parse-server/releases/tag/6.5.0</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.20</a></li>
<li><a href="https://github.com/advisories/GHSA-6927-3vr9-fxf2">https://github.com/advisories/GHSA-6927-3vr9-fxf2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6927-3vr9-fxf2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-01T20:08:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus has MySQL accent insensitive email matching]]></title>
        <id>https://github.com/advisories/GHSA-qw9g-7549-7wg5</id>
        <link href="https://github.com/advisories/GHSA-qw9g-7549-7wg5"/>
        <updated>2024-03-02T22:17:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="password-reset-vulnerable-to-accent-confusion">Password reset vulnerable to accent confusion</h2>
<p>The password reset mechanism of the Directus backend is implemented in a way where combined with (specific, need to double check if i can work around) configuration in MySQL or MariaDB. As such, it allows attackers to receive a password reset email of a victim user, specifically having it arrive at a similar email address as the victim with a one or more characters changed to use accents. </p>
<p>This is due to the fact that by default MySQL/MariaDB are configured for accent-insenstive and case-insensitve comparisons.</p>
<p>MySQL weak comparison:</p>
<pre><code class="language-sql">select 1 from directus_users where 'julian@cure53.de' = 'julian@cüre53.de';
</code></pre>
<p>This is exploitable due to an error in the API using the supplied email address for sending the reset password mail instead of using the email from the database.</p>
<h3 id="steps-to-reproduce">Steps to reproduce:</h3>
<ol>
<li>If the attacker knows the email address of the victim user, i.e., <code>julian@cure53.de</code>. (possibly just the domain could be enough for an educated guess)</li>
<li>A off-by-one accented domain <code>cüre53.de</code> can be registered to be able to receive emails.</li>
<li>With this email the attacker can request a password reset for <code>julian@cüre53.de</code>.</li>
</ol>
<pre><code class="language-http">POST /auth/password/request HTTP/1.1
Host: example.com
[...]
{"email":"julian@cüre53.de"}
</code></pre>
<ol start="4">
<li>The supplied email (julian@cüre53.de) gets checked against the database and will match the non-accented email <code>julian@cure53.de</code> and will continue to email the password reset link to the provided email address instead of the saved email address.</li>
<li>With this email the attacker can log into the target account and use it for nefarious things</li>
</ol>
<h3 id="workarounds">Workarounds</h3>
<p>Should be possible with collations but haven't been able to confirm this. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation/</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5">https://github.com/directus/directus/security/advisories/GHSA-qw9g-7549-7wg5</a></li>
<li><a href="https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919">https://github.com/directus/directus/commit/a8ef790ea2d28b1727f9027d99bd360920d57919</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>
<li><a href="https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation">https://www.monolune.com/articles/what-is-the-utf8mb4_0900_ai_ci-collation</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27295">https://nvd.nist.gov/vuln/detail/CVE-2024-27295</a></li>
<li><a href="https://github.com/advisories/GHSA-qw9g-7549-7wg5">https://github.com/advisories/GHSA-qw9g-7549-7wg5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw9g-7549-7wg5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-01T16:58:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongo-express] mongo-express Cross-site Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fffg-cwc9-xvj7</id>
        <link href="https://github.com/advisories/GHSA-fffg-cwc9-xvj7"/>
        <updated>2024-03-01T16:58:16.000Z</updated>
        <content type="html"><![CDATA[<p>In mongo-express 1.0.2, /admin allows CSRF, as demonstrated by deletion of a Collection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-52555">https://nvd.nist.gov/vuln/detail/CVE-2023-52555</a></li>
<li><a href="https://github.com/mongo-express/mongo-express/issues/1338">https://github.com/mongo-express/mongo-express/issues/1338</a></li>
<li><a href="https://github.com/advisories/GHSA-fffg-cwc9-xvj7">https://github.com/advisories/GHSA-fffg-cwc9-xvj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fffg-cwc9-xvj7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T09:31:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@sentry/react-native] Potential leakage of Sentry auth tokens by React Native SDK with Expo plugin]]></title>
        <id>https://github.com/advisories/GHSA-68c2-4mpx-qh95</id>
        <link href="https://github.com/advisories/GHSA-68c2-4mpx-qh95"/>
        <updated>2024-03-01T16:57:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SDK versions between and including 5.16.0 and 5.19.0 allowed Sentry auth tokens to be set in the optional authToken configuration parameter, for debugging purposes. Doing so would result in the auth token being built into the application bundle, and therefore the auth token could be potentially exposed in case the application bundle is subsequently published.</p>
<p>You may ignore this notification if you are not using <code>authToken</code> configuration parameter in your React Native SDK configuration or did not publish apps using this way of configuring the <code>authToken</code>.</p>
<p>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href="https://docs.sentry.io/product/accounts/auth-tokens/">rotate your token</a>.</p>
<h3 id="patches">Patches</h3>
<p>The behavior that allowed setting an <code>authToken</code> parameter was fixed in SDK version 5.19.1 where, if this parameter was set, you will see a warning and the <code>authToken</code> would be removed before bundling the application.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Remove <code>authToken</code> from the plugin configuration.</li>
<li>If you had set the <code>authToken</code> in the plugin config previously, and built and published an app with that config, you should <a href="https://docs.sentry.io/product/accounts/auth-tokens/">rotate your token</a>.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1">sentry-react-native 5.19.1 release notes</a></li>
<li><a href="https://github.com/getsentry/sentry-docs/pull/9244">https://github.com/getsentry/sentry-docs/pull/9244</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95">https://github.com/getsentry/sentry-react-native/security/advisories/GHSA-68c2-4mpx-qh95</a></li>
<li><a href="https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b">https://github.com/getsentry/sentry-react-native/commit/9148964a50d2ea1de830854c95f3649f6cb94b1b</a></li>
<li><a href="https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1">https://github.com/getsentry/sentry-react-native/releases/tag/5.19.1</a></li>
<li><a href="https://github.com/advisories/GHSA-68c2-4mpx-qh95">https://github.com/advisories/GHSA-68c2-4mpx-qh95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68c2-4mpx-qh95</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-01T16:57:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nteract] Nteract Remote Code Execution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6jvg-hp25-42f6</id>
        <link href="https://github.com/advisories/GHSA-6jvg-hp25-42f6"/>
        <updated>2024-03-01T16:57:13.000Z</updated>
        <content type="html"><![CDATA[<p>Nteract v.0.28.0 was discovered to contain a remote code execution (RCE) vulnerability via the Markdown link.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-22891">https://nvd.nist.gov/vuln/detail/CVE-2024-22891</a></li>
<li><a href="https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891">https://github.com/EQSTLab/PoC/tree/main/2024/RCE/CVE-2024-22891</a></li>
<li><a href="https://github.com/advisories/GHSA-6jvg-hp25-42f6">https://github.com/advisories/GHSA-6jvg-hp25-42f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jvg-hp25-42f6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-01T06:33:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sanitize-html] sanitize-html Information Exposure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rm97-x556-q36h</id>
        <link href="https://github.com/advisories/GHSA-rm97-x556-q36h"/>
        <updated>2024-03-01T16:55:54.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package sanitize-html before 2.12.1 are vulnerable to Information Exposure when used on the backend and with the style attribute allowed, allowing enumeration of files in the system (including project dependencies). An attacker could exploit this vulnerability to gather details about the file system structure and dependencies of the targeted server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21501">https://nvd.nist.gov/vuln/detail/CVE-2024-21501</a></li>
<li><a href="https://github.com/apostrophecms/sanitize-html/pull/650">https://github.com/apostrophecms/sanitize-html/pull/650</a></li>
<li><a href="https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4">https://github.com/apostrophecms/sanitize-html/commit/c5dbdf77fe8b836d3bf4554ea39edb45281ec0b4</a></li>
<li><a href="https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf">https://gist.github.com/Slonser/8b4d061abe6ee1b2e10c7242987674cf</a></li>
<li><a href="https://github.com/apostrophecms/apostrophe/discussions/4436">https://github.com/apostrophecms/apostrophe/discussions/4436</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334">https://security.snyk.io/vuln/SNYK-JS-SANITIZEHTML-6256334</a></li>
<li><a href="https://github.com/advisories/GHSA-rm97-x556-q36h">https://github.com/advisories/GHSA-rm97-x556-q36h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rm97-x556-q36h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-24T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webui-aria2] webui-aria2 Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</id>
        <link href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w"/>
        <updated>2024-03-01T14:58:13.000Z</updated>
        <content type="html"><![CDATA[<p>webui-aria2 commit 4fe2e was discovered to contain a path traversal vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39141">https://nvd.nist.gov/vuln/detail/CVE-2023-39141</a></li>
<li><a href="https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e">https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e</a></li>
<li><a href="https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10">https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10</a></li>
<li><a href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w">https://github.com/advisories/GHSA-crv8-r5wq-gv2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-22T21:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nfid/embed] @nfid/embed has compromised private key due to @dfinity/auth-client producing insecure session keys]]></title>
        <id>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</id>
        <link href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8"/>
        <updated>2024-02-26T20:10:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>User sessions in the @nfid/embed SDK with Ed25519 keys are vulnerable due to a compromised private key <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. This exposes users to potential loss of funds on ledgers and unauthorized access to canisters they control.</p>
<h3 id="solution">Solution</h3>
<p>Using version &gt;1.0.1 of @dfinity/auth-client and @dfinity/identity packages, or @nfid/embed &gt;0.10.1-alpha.6 includes patched versions of the issue.</p>
<p>User sessions will be automatically fixed when they re-authenticate.</p>
<h3 id="why-this-happened">Why this happened</h3>
<p>The DFINITY auth client library provides a function, <code>Ed25519KeyIdentity.generate</code>, for generating an Ed25519 key pair. This function includes an optional parameter to supply a 32-byte seed value, which will be utilized as the secret key. In cases where no seed value is provided, the library is expected to generate the secret key using secure randomness. However, a recent update of DFINITY libraries has compromised this assurance by employing an insecure seed for key pair generation.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">AgentJS CVE </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8</a></li>
<li><a href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/advisories/GHSA-84c3-j8r2-mcm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-26T20:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[es5-ext] es5-ext vulnerable to Regular Expression Denial of Service in `function#copy` and `function#toStringTokens`]]></title>
        <id>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</id>
        <link href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h"/>
        <updated>2024-02-26T20:01:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Passing functions with very long names or complex default argument names into <code>function#copy</code> or<code>function#toStringTokens</code> may put script to stall</p>
<h3 id="patches">Patches</h3>
<p>Fixed with <a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a> and <a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a>
Published with v0.10.63</p>
<h3 id="workarounds">Workarounds</h3>
<p>No real workaround aside of refraining from using above utilities.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27088">https://nvd.nist.gov/vuln/detail/CVE-2024-27088</a></li>
<li><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a></li>
<li><a href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-26T20:01:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
</feed>