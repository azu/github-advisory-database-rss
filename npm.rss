<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-03-24T16:01:11.882Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[translate] Cache Poisoning Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-882j-4vj5-7vmj</id>
        <link href="https://github.com/advisories/GHSA-882j-4vj5-7vmj"/>
        <updated>2024-03-22T20:02:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker controlling the second variable of the <code>translate</code> function is able to perform a cache poisoning attack. They can change the outcome of translation requests made by subsequent users.</p>
<h3 id="details">Details</h3>
<p>The <code>opt.id</code> parameter allows the overwriting of the cache key. If an attacker sets the <code>id</code> variable to the cache key that would be generated by another user, they can choose the response that user gets served.</p>
<h3 id="poc">PoC</h3>
<p>Take the following simple server allowing users to supply text and the language to translate to.</p>
<pre><code class="language-javascript">import translate from "translate";
import express from 'express';

const app = express();
app.use(express.json());

app.post('/translate', async (req, res) =&gt; {
  const { text, language } = req.body;
  const result = await translate(text, language);
  return res.json(result);
});

const port = 3000;
app.listen(port, () =&gt; {
  console.log(`Server is running on port ${port}`);
});
</code></pre>
<p>We can send the following request to poison the cache:</p>
<pre><code>{"text":"I hate you", "language":{"to":"nl","id":"undefined:en:nl:google:I love you"}}
</code></pre>
<p><img alt="Poisoning the cache" src="https://user-images.githubusercontent.com/44903767/285421743-ccfa3d9d-24cf-47b7-b805-0e4034cec82e.png"></p>
<p>Now, any user that attempts to translate "I love you" to Dutch, will get "I hate you" in Dutch as the response.
<img alt="The victim gets our poisoned data" src="https://user-images.githubusercontent.com/44903767/285422033-b3853ca2-8a5a-4875-91e8-ba2ef0258bc6.png"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can control the results other users may get</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj">https://github.com/franciscop/translate/security/advisories/GHSA-882j-4vj5-7vmj</a></li>
<li><a href="https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4">https://github.com/franciscop/translate/commit/7a2bf8b9f05f7c45c09683973ef4d8e995804aa4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29042">https://nvd.nist.gov/vuln/detail/CVE-2024-29042</a></li>
<li><a href="https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3">https://github.com/franciscop/translate/commit/cc1ba03078102f83e0503a96f1a081489bb865d3</a></li>
<li><a href="https://github.com/advisories/GHSA-882j-4vj5-7vmj">https://github.com/advisories/GHSA-882j-4vj5-7vmj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-882j-4vj5-7vmj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-22T16:57:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-tar] Denial of service while parsing a tar file due to lack of folders count validation]]></title>
        <id>https://github.com/advisories/GHSA-f5x3-32g6-xq36</id>
        <link href="https://github.com/advisories/GHSA-f5x3-32g6-xq36"/>
        <updated>2024-03-22T16:57:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description:</h2>
<p>During some analysis today on npm's <code>node-tar</code> package I came across the folder creation process, Basicly if you provide node-tar with a path like this <code>./a/b/c/foo.txt</code> it would create every folder and sub-folder here a, b and c until it reaches the last folder to create <code>foo.txt</code>, In-this case I noticed that there's no validation at all on the amount of folders being created, that said we're actually able to CPU and memory consume the system running node-tar and even crash the nodejs client within few seconds of running it using a path with too many sub-folders inside</p>
<h2 id="steps-to-reproduce">Steps To Reproduce:</h2>
<p>You can reproduce this issue by downloading the tar file I provided in the resources and using node-tar to extract it, you should get the same behavior as the video</p>
<h2 id="proof-of-concept">Proof Of Concept:</h2>
<p>Here's a <a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/3i7uojw8s52psar6pg8zkdo4h9io?response-content-disposition=attachment%3B%20filename%3D%22tar-dos-poc.webm%22%3B%20filename%2A%3DUTF-8%27%27tar-dos-poc.webm&amp;response-content-type=video%2Fwebm&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=1e8235d885f1d61529b7d6b23ea3a0780c300c91d86e925dd8310d5b661ddbe2">video</a> show-casing the exploit: </p>
<h2 id="impact">Impact</h2>
<p>Denial of service by crashing the nodejs client when attempting to parse a tar archive, make it run out of heap memory and consuming server CPU and memory resources</p>
<h2 id="report-resources">Report resources</h2>
<p><a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/1e83ayb5dd3350fvj3gst0mqixwk?response-content-disposition=attachment%3B%20filename%3D%22payload.txt%22%3B%20filename%2A%3DUTF-8%27%27payload.txt&amp;response-content-type=text%2Fplain&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=bad9fe731f05a63a950f99828125653a8c1254750fe0ca7be882e89ecdd449ae">payload.txt</a>
<a href="https://hackerone-us-west-2-production-attachments.s3.us-west-2.amazonaws.com/ymkuh4xnfdcf1soeyi7jc2x4yt2i?response-content-disposition=attachment%3B%20filename%3D%22archive.tar.gz%22%3B%20filename%2A%3DUTF-8%27%27archive.tar.gz&amp;response-content-type=application%2Fx-tar&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAQGK6FURQSWWGDXHA%2F20240312%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20240312T080103Z&amp;X-Amz-Expires=3600&amp;X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDcaCXVzLXdlc3QtMiJHMEUCID3xYDc6emXVPOg8iVR5dVk0u3gguTPIDJ0OIE%2BKxj17AiEAi%2BGiay1gGMWhH%2F031fvMYnSsa8U7CnpZpxvFAYqNRwgqsQUIQBADGgwwMTM2MTkyNzQ4NDkiDAaj6OgUL3gg4hhLLCqOBUUrOgWSqaK%2FmxN6nKRvB4Who3LIyzswFKm9LV94GiSVFP3zXYA480voCmAHTg7eBL7%2BrYgV2RtXbhF4aCFMCN3qu7GeXkIdH7xwVMi9zXHkekviSKZ%2FsZtVVjn7RFqOCKhJl%2FCoiLQJuDuju%2FtfdTGZbEbGsPgKHoILYbRp81K51zeRL21okjsOehmypkZzq%2BoGrXIX0ynPOKujxw27uqdF4T%2BF9ynodq01vGgwgVBEjHojc4OKOfr1oW5b%2FtGVV59%2BOBVI1hqIKHRG0Ed4SWmp%2BLd1hazGuZPvp52szmegnOj5qr3ubppnKL242bX%2FuAnQKzKK0HpwolqXjsuEeFeM85lxhqHV%2B1BJqaqSHHDa0HUMLZistMRshRlntuchcFQCR6HBa2c8PSnhpVC31zMzvYMfKsI12h4HB6l%2FudrmNrvmH4LmNpi4dZFcio21DzKj%2FRjWmxjH7l8egDyG%2FIgPMY6Ls4IiN7aR1jijYTrBCgPUUHets3BFvqLzHtPFnG3B7%2FYRPnhCLu%2FgzvKN3F8l38KqeTNMHJaxkuhCvEjpFB2SJbi2QZqZZbLj3xASqXoogzbsyPp0Tzp0tH7EKDhPA7H6wwiZukXfFhhlYzP8on9fO2Ajz%2F%2BTDkDjbfWw4KNJ0cFeDsGrUspqQZb5TAKlUge7iOZEc2TZ5uagatSy9Mg08E4nImBSE5QUHDc7Daya1gyqrETMDZBBUHH2RFkGA9qMpEtNrtJ9G%2BPedz%2FpPY1hh9OCp9Pg1BrX97l3SfVzlAMRfNibhywq6qnE35rVnZi%2BEQ1UgBjs9jD%2FQrW49%2FaD0oUDojVeuFFryzRnQxDbKtYgonRcItTvLT5Y0xaK9P0u6H1197%2FMk3XxmjD9%2Fb%2BvBjqxAQWWkKiIxpC1oHEWK9Jt8UdJ39xszDBGpBqjB6Tvt5ePAXSyX8np%2FrBi%2BAPx06O0%2Ba7pU4NmH800EVXxxhgfj9nMw3CeoUIdxorVKtU2Mxw%2FLaAiPgxPS4rqkt65NF7eQYfegcSYDTm2Z%2BHPbz9HfCaVZ28Zqeko6sR%2F29ML4bguqVvHAM4mWPLNDXH33mjG%2BuzLi8e1BF7tNveg2X9G%2FRdcMkojwKYbu6xN3M6aX2alQg%3D%3D&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Signature=5e2c0d4b4de40373ac0fe91908c2659141a6dd4ab850271cc26042a3885c82ea">archeive.tar.gz</a></p>
<h2 id="note">Note</h2>
<p>This report was originally reported to GitHub bug bounty program, they asked me to report it to you a month ago</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36">https://github.com/isaacs/node-tar/security/advisories/GHSA-f5x3-32g6-xq36</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28863">https://nvd.nist.gov/vuln/detail/CVE-2024-28863</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7">https://github.com/isaacs/node-tar/commit/fe8cd57da5686f8695415414bda49206a545f7f7</a></li>
<li><a href="https://github.com/advisories/GHSA-f5x3-32g6-xq36">https://github.com/advisories/GHSA-f5x3-32g6-xq36</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f5x3-32g6-xq36</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-22T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack-dev-middleware] Path traversal in webpack-dev-middleware]]></title>
        <id>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</id>
        <link href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6"/>
        <updated>2024-03-21T18:59:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><em>The <strong>webpack-dev-middleware</strong> middleware does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine.</em></p>
<h3 id="details">Details</h3>
<p>The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory <em>memfs</em> filesystem.
If <em>writeToDisk</em> configuration option is set to <strong>true</strong>, the physical filesystem is used:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></p>
<p>The <em><strong>getFilenameFromUrl</strong></em> method is used to parse URL and build the local file path.
The public path prefix is stripped from the URL, and the <strong>unsecaped</strong> path suffix is appended to the <em>outputPath</em>:
<a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a>
As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use <em>%2e</em> and <em>%2f</em> sequences to perform path traversal attack.</p>
<h3 id="poc">PoC</h3>
<p><em>A blank project can be created containing the following configuration file <strong>webpack.config.js</strong>:</em>
<code>module.exports = {   devServer: {     devMiddleware: {       writeToDisk: true     }   } }; </code></p>
<p>When started, it is possible to access any local file, e.g. <em>/etc/passwd</em>:
<code>$ curl localhost:8080/public/..%2f..%2f..%2f..%2f../etc/passwd</code></p>
<pre><code>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
</code></pre>
<h3 id="impact">Impact</h3>
<p>The developers using <em>webpack-dev-server</em> or <em>webpack-dev-middleware</em> are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content (e.g. password, configuration files, private source code, ...).</p>
<p>If the development server is listening on a public IP address (or <strong>0.0.0.0</strong>), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port).</p>
<p>If the server allows access from third-party domains (CORS, **<em>Allow-Access-Origin: *</em>** ), an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files.</p>
<h3 id="recommendation">Recommendation</h3>
<p>The URL should be unescaped and normalized before any further processing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/webpack/webpack-dev-middleware/security/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29180">https://nvd.nist.gov/vuln/detail/CVE-2024-29180</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132">https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353">https://github.com/webpack/webpack-dev-middleware/commit/9670b3495da518fe667ff3428c5e4cb9f2f3d353</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e">https://github.com/webpack/webpack-dev-middleware/commit/e10008c762e4d5821ed6990348dabf0d4d93a10e</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/getFilenameFromUrl.js#L82</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21">https://github.com/webpack/webpack-dev-middleware/blob/7ed24e0b9f53ad1562343f9f517f0f0ad2a70377/src/utils/setupOutputFileSystem.js#L21</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4">https://github.com/webpack/webpack-dev-middleware/releases/tag/v5.3.4</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2">https://github.com/webpack/webpack-dev-middleware/releases/tag/v6.1.2</a></li>
<li><a href="https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0">https://github.com/webpack/webpack-dev-middleware/releases/tag/v7.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wr3j-pwj9-hqq6">https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wr3j-pwj9-hqq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-21T18:59:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[survey-creator] Cross-site scripting in Survey Creator]]></title>
        <id>https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</id>
        <link href="https://github.com/advisories/GHSA-xgj4-2hrf-j4xg"/>
        <updated>2024-03-21T18:58:34.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting (XSS) vulnerability in SurveyJS Survey Creator v.1.9.132 and before, allows attackers to execute arbitrary code and obtain sensitive information via the title parameter in form.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28635">https://nvd.nist.gov/vuln/detail/CVE-2024-28635</a></li>
<li><a href="https://github.com/surveyjs/survey-creator/issues/5285">https://github.com/surveyjs/survey-creator/issues/5285</a></li>
<li><a href="https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt">https://packetstormsecurity.com/2403-exploits/surveyjssurveycreator19132-xss.txt</a></li>
<li><a href="https://github.com/advisories/GHSA-xgj4-2hrf-j4xg">https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgj4-2hrf-j4xg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-21T06:33:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typeorm] SQL injection in typeORM]]></title>
        <id>https://github.com/advisories/GHSA-fx4w-v43j-vc45</id>
        <link href="https://github.com/advisories/GHSA-fx4w-v43j-vc45"/>
        <updated>2024-03-21T18:57:33.000Z</updated>
        <content type="html"><![CDATA[<p>The findOne function in TypeORM before 0.3.0 can either be supplied with a string or a FindOneOptions object. When input to the function is a user-controlled parsed JSON object, supplying a crafted FindOneOptions instead of an id string leads to SQL injection. NOTE: the vendor's position is that the user's application is responsible for input validation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-33171">https://nvd.nist.gov/vuln/detail/CVE-2022-33171</a></li>
<li><a href="https://github.com/typeorm/typeorm/compare/0.2.45...0.3.0">https://github.com/typeorm/typeorm/compare/0.2.45...0.3.0</a></li>
<li><a href="https://seclists.org/fulldisclosure/2022/Jun/51">https://seclists.org/fulldisclosure/2022/Jun/51</a></li>
<li><a href="http://packetstormsecurity.com/files/168096/TypeORM-0.3.7-Information-Disclosure.html">http://packetstormsecurity.com/files/168096/TypeORM-0.3.7-Information-Disclosure.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2022/Aug/7">http://seclists.org/fulldisclosure/2022/Aug/7</a></li>
<li><a href="https://github.com/advisories/GHSA-fx4w-v43j-vc45">https://github.com/advisories/GHSA-fx4w-v43j-vc45</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx4w-v43j-vc45</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-07-05T00:00:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Server crashes on invalid Cloud Function or Cloud Job name]]></title>
        <id>https://github.com/advisories/GHSA-6hh7-46r2-vf29</id>
        <link href="https://github.com/advisories/GHSA-6hh7-46r2-vf29"/>
        <updated>2024-03-19T22:15:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Calling an invalid Parse Server Cloud Function name or Cloud Job name crashes server and may allow for code injection.</p>
<h3 id="patches">Patches</h3>
<p>Added string sanitation for Cloud Function name and Cloud Job name.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitize the Cloud Function name and Cloud Job name before it reaches Parse Server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a> (Fix for Parse Server 7 alpha)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a> (Fix for Parse Server 6 LTS)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b">https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e">https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29027">https://nvd.nist.gov/vuln/detail/CVE-2024-29027</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a></li>
<li><a href="https://github.com/advisories/GHSA-6hh7-46r2-vf29">https://github.com/advisories/GHSA-6hh7-46r2-vf29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hh7-46r2-vf29</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-19T20:07:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Server crashes on invalid Cloud Function or Cloud Job name]]></title>
        <id>https://github.com/advisories/GHSA-6hh7-46r2-vf29</id>
        <link href="https://github.com/advisories/GHSA-6hh7-46r2-vf29"/>
        <updated>2024-03-19T22:15:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Calling an invalid Parse Server Cloud Function name or Cloud Job name crashes server and may allow for code injection.</p>
<h3 id="patches">Patches</h3>
<p>Added string sanitation for Cloud Function name and Cloud Job name.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitize the Cloud Function name and Cloud Job name before it reaches Parse Server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a> (Fix for Parse Server 7 alpha)</li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a> (Fix for Parse Server 6 LTS)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29">https://github.com/parse-community/parse-server/security/advisories/GHSA-6hh7-46r2-vf29</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b">https://github.com/parse-community/parse-server/commit/5ae6d6a36d75c4511029f0ba5673ae4b2999179b</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e">https://github.com/parse-community/parse-server/commit/9f6e3429d3b326cf4e2994733c618d08032fac6e</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.5.5">https://github.com/parse-community/parse-server/releases/tag/6.5.5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29027">https://nvd.nist.gov/vuln/detail/CVE-2024-29027</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29">https://github.com/parse-community/parse-server/releases/tag/7.0.0-alpha.29</a></li>
<li><a href="https://github.com/advisories/GHSA-6hh7-46r2-vf29">https://github.com/advisories/GHSA-6hh7-46r2-vf29</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hh7-46r2-vf29</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-03-19T20:07:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@turbo-boost/commands] TurboBoost Commands vulnerable to arbitrary method invocation]]></title>
        <id>https://github.com/advisories/GHSA-mp76-7w5v-pr75</id>
        <link href="https://github.com/advisories/GHSA-mp76-7w5v-pr75"/>
        <updated>2024-03-18T16:48:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.</p>
<h4 id="details">Details</h4>
<p>Commands verify that the class must be a <code>Command</code> and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  </p>
<h3 id="patches">Patches</h3>
<p>Patched in the following versions.</p>
<ul>
<li>0.1.3<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3">Ruby GEM</a></li>
</ul>
</li>
<li>0.2.2<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2">Ruby GEM</a></li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library.</p>
<pre><code class="language-ruby">class ApplicationCommand &lt; TurboBoost::Commands::Command
  before_command do
    method_name = params[:name].include?("#") ? params[:name].split("#").last : :perform
    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }
    throw :abort unless allowed # ← blocks invocation
    # raise "Invalid Command" unless allowed # ← blocks invocation
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75">https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28181">https://nvd.nist.gov/vuln/detail/CVE-2024-28181</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477">https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba">https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-mp76-7w5v-pr75">https://github.com/advisories/GHSA-mp76-7w5v-pr75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp76-7w5v-pr75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T19:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@turbo-boost/commands] TurboBoost Commands vulnerable to arbitrary method invocation]]></title>
        <id>https://github.com/advisories/GHSA-mp76-7w5v-pr75</id>
        <link href="https://github.com/advisories/GHSA-mp76-7w5v-pr75"/>
        <updated>2024-03-18T16:48:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TurboBoost Commands has existing protections in place to guarantee that only public methods on Command classes can be invoked; however, the existing checks aren't as robust as they should be. It's possible for a sophisticated attacker to invoke more methods than should be permitted depending on the the strictness of authorization checks that individual applications enforce. Being able to call some of these methods can have security implications.</p>
<h4 id="details">Details</h4>
<p>Commands verify that the class must be a <code>Command</code> and that the method requested is defined as a public method; however, this isn't robust enough to guard against all unwanted code execution. The library should more strictly enforce which methods are considered safe before allowing them to be executed.  </p>
<h3 id="patches">Patches</h3>
<p>Patched in the following versions.</p>
<ul>
<li>0.1.3<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.1.3">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.1.3">Ruby GEM</a></li>
</ul>
</li>
<li>0.2.2<ul>
<li><a href="https://www.npmjs.com/package/@turbo-boost/commands/v/0.2.2">NPM Package</a></li>
<li><a href="https://rubygems.org/gems/turbo_boost-commands/versions/0.2.2">Ruby GEM</a></li>
</ul>
</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library.</p>
<pre><code class="language-ruby">class ApplicationCommand &lt; TurboBoost::Commands::Command
  before_command do
    method_name = params[:name].include?("#") ? params[:name].split("#").last : :perform
    ancestors = self.class.ancestors[0..self.class.ancestors.index(TurboBoost::Commands::Command) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any? method_name.to_sym }
    throw :abort unless allowed # ← blocks invocation
    # raise "Invalid Command" unless allowed # ← blocks invocation
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75">https://github.com/hopsoft/turbo_boost-commands/security/advisories/GHSA-mp76-7w5v-pr75</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28181">https://nvd.nist.gov/vuln/detail/CVE-2024-28181</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477">https://github.com/hopsoft/turbo_boost-commands/commit/337cda7d9222f1f449905454a7374222017a7477</a></li>
<li><a href="https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba">https://github.com/hopsoft/turbo_boost-commands/commit/88af4fc0ac39cc1799d16c49fab52f6dfbcec9ba</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/turbo_boost-commands/CVE-2024-28181.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-mp76-7w5v-pr75">https://github.com/advisories/GHSA-mp76-7w5v-pr75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mp76-7w5v-pr75</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-15T19:53:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[follow-redirects] follow-redirects' Proxy-Authorization header kept across hosts]]></title>
        <id>https://github.com/advisories/GHSA-cxjh-pqwp-8mfp</id>
        <link href="https://github.com/advisories/GHSA-cxjh-pqwp-8mfp"/>
        <updated>2024-03-23T03:30:25.000Z</updated>
        <content type="html"><![CDATA[<p>When using axios, its dependency library follow-redirects only clears authorization header during cross-domain redirect, but allows the proxy-authentication header which contains credentials too.</p>
<p>Steps To Reproduce &amp; PoC</p>
<p>axios Test Code</p>
<p>const axios = require('axios');</p>
<p>axios.get('<a href="http://127.0.0.1:10081/',%7B">http://127.0.0.1:10081/',{</a>
    headers: {
        'AuThorization': 'Rear Test',
        'ProXy-AuthoriZation': 'Rear Test',
        'coOkie': 't=1'
    }
    }).then(function (response) {
        console.log(response);
})
When I meet the cross-domain redirect, the sensitive headers like authorization and cookie are cleared, but proxy-authentication header is kept.</p>
<p>Request sent by axios</p>
<p>image-20240314130755052.png
Request sent by follow-redirects after redirectimage-20240314130809838.png</p>
<p>Impact</p>
<p>This vulnerability may lead to credentials leak.</p>
<p>Recommendations</p>
<p>Remove proxy-authentication header during cross-domain redirect
Recommended Patch</p>
<p>follow-redirects/index.js:464</p>
<p>removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
change to</p>
<p>removeMatchingHeaders(/^(?:authorization|proxy-authorization|cookie)$/i, this._options.headers);
Ref</p>
<p><a href="https://fetch.spec.whatwg.org/#authentication-entries">https://fetch.spec.whatwg.org/#authentication-entries</a>
<a href="https://hackerone.com/reports/2390009">https://hackerone.com/reports/2390009</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp">https://github.com/follow-redirects/follow-redirects/security/advisories/GHSA-cxjh-pqwp-8mfp</a></li>
<li><a href="https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b">https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b</a></li>
<li><a href="https://fetch.spec.whatwg.org/#authentication-entries">https://fetch.spec.whatwg.org/#authentication-entries</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28849">https://nvd.nist.gov/vuln/detail/CVE-2024-28849</a></li>
<li><a href="https://github.com/psf/requests/issues/1885">https://github.com/psf/requests/issues/1885</a></li>
<li><a href="https://hackerone.com/reports/2390009">https://hackerone.com/reports/2390009</a></li>
<li><a href="https://github.com/advisories/GHSA-cxjh-pqwp-8mfp">https://github.com/advisories/GHSA-cxjh-pqwp-8mfp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cxjh-pqwp-8mfp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-14T17:19:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] URL Redirection to Untrusted Site in OAuth2/OpenID in directus]]></title>
        <id>https://github.com/advisories/GHSA-fr3w-2p22-6w7p</id>
        <link href="https://github.com/advisories/GHSA-fr3w-2p22-6w7p"/>
        <updated>2024-03-13T22:25:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The authentication API has a <code>redirect</code> parameter that can be exploited as an open redirect vulnerability as the user tries to log in via the API URL <a href="https://docs.directus.io/reference/authentication.html#login-using-sso-providers">https://docs.directus.io/reference/authentication.html#login-using-sso-providers</a> /auth/login/google?redirect for example.</p>
<h3 id="details">Details</h3>
<p>There's a redirect that is done after successful login via the Auth API GET request to <code>directus/auth/login/google?redirect=http://malicious-fishing-site.com</code>, which I think is here: <a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L394">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L394</a>. While credentials don't seem to be passed to the attacker site, the user can be phished into clicking a legitimate directus site and be taken to a malicious site made to look like a an error message "Your password needs to be updated" to phish out the current password.</p>
<h3 id="poc">PoC</h3>
<p>Turn on any auth provider in Directus instance. Form a link to <code>directus-instance/auth/login/:provider_id?redirect=http://malicious-fishing-site.com</code>, login and get taken to malicious-site. Tested on the <code>ory</code> OAuth2 integration.</p>
<h3 id="impact">Impact</h3>
<p>Users who login via OAuth2 into Directus.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-fr3w-2p22-6w7p">https://github.com/directus/directus/security/advisories/GHSA-fr3w-2p22-6w7p</a></li>
<li><a href="https://github.com/directus/directus/commit/5477d7d61babd7ffc2f835d399bf79611b15b203">https://github.com/directus/directus/commit/5477d7d61babd7ffc2f835d399bf79611b15b203</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28239">https://nvd.nist.gov/vuln/detail/CVE-2024-28239</a></li>
<li><a href="https://docs.directus.io/reference/authentication.html#login-using-sso-providers">https://docs.directus.io/reference/authentication.html#login-using-sso-providers</a></li>
<li><a href="https://github.com/advisories/GHSA-fr3w-2p22-6w7p">https://github.com/advisories/GHSA-fr3w-2p22-6w7p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fr3w-2p22-6w7p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-12T20:50:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Session Token in URL in directus]]></title>
        <id>https://github.com/advisories/GHSA-2ccr-g2rv-h677</id>
        <link href="https://github.com/advisories/GHSA-2ccr-g2rv-h677"/>
        <updated>2024-03-13T22:25:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When reaching the /files page, a JWT is passed via GET request. Inclusion of session tokens in URLs poses a security risk as URLs are often logged in various places (e.g., web server logs, browser history). Attackers gaining access to these logs may hijack active user sessions, leading to unauthorized access to sensitive information or actions on behalf of the user.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p>There's no workaround available.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-2ccr-g2rv-h677">https://github.com/directus/directus/security/advisories/GHSA-2ccr-g2rv-h677</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28238">https://nvd.nist.gov/vuln/detail/CVE-2024-28238</a></li>
<li><a href="https://github.com/advisories/GHSA-2ccr-g2rv-h677">https://github.com/advisories/GHSA-2ccr-g2rv-h677</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ccr-g2rv-h677</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-03-12T20:47:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-18T18:33:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/stimulus_reflex/CVE-2024-28121.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/stimulus_reflex/CVE-2024-28121.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[stimulus_reflex] StimulusReflex arbitrary method call]]></title>
        <id>https://github.com/advisories/GHSA-f78j-4w3g-4q65</id>
        <link href="https://github.com/advisories/GHSA-f78j-4w3g-4q65"/>
        <updated>2024-03-18T18:33:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>More methods than expected can be called on reflex instances. Being able to call some of them has security implications.</p>
<h3 id="details">Details</h3>
<p>To invoke a reflex a websocket message of the following shape is sent:</p>
<pre><code class="language-json">{ 
  "target": "[class_name]#[method_name]", 
  "args": [] 
}
</code></pre>
<p>The server will proceed to instantiate <code>reflex</code> using the provided <code>class_name</code> as long as it extends <code>StimulusReflex::Reflex</code>.
It then attempts to call <code>method_name</code> on the instance with the provided arguments <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">ref</a>:</p>
<pre><code class="language-ruby">method = reflex.method method_name
required_params = method.parameters.select { |(kind, _)| kind == :req }
optional_params = method.parameters.select { |(kind, _)| kind == :opt }

if arguments.size &gt;= required_params.size &amp;&amp; arguments.size &lt;= required_params.size + optional_params.size
  reflex.public_send(method_name, *arguments)
end
</code></pre>
<p>This is problematic as <code>reflex.method(method_name)</code> can be more methods than those explicitly specified by the developer in their reflex class. A good example is the <code>instance_variable_set</code> method.</p>
<details>

<summary>Read more</summary>
Let's imagine a reflex that uses `@user` as a trusted variable in an `after_reflex` callback.

<p>This variable can be overwritten using the following message:</p>
<pre><code class="language-json">{
  "target": "ChatReflex#instance_variable_set", 
  "args": ["@user", "&lt;admin-id&gt;"]
}
</code></pre>
<p>Here are other interesting methods that were found to be available for the <a href="https://github.com/hopsoft/stimulus_reflex_expo/blob/dcce8c36a6782d1e7f57f0e2766a3f6fd770b3b1/app/reflexes/chat_reflex.rb">ChatReflex sample reflex</a></p>
<ul>
<li><code>remote_byebug</code>: bind a debugging server</li>
<li><code>pry</code>: drop the process in a REPL session</li>
</ul>
<p>All in all, only counting  <code>:req</code> and <code>:opt</code> parameters helps.
For example around <a href="https://github.com/stimulusreflex/stimulus_reflex/blob/1f610b636abfed27de2c61104aebd1ac98180d5b/lib/stimulus_reflex/channel.rb#L41">version 1.0</a> only <code>.arity</code> was checked which allowed access to the <code>system</code> method (<code>.arity == -1</code>)</p>
<pre><code class="language-json">{
  "target": "ChatReflex#system", 
  "args": ["[command here]"]
}
</code></pre>
<p>Using <code>public_send</code> instead of <code>send</code> does not help but the following payloads <strong>do not</strong> work since <code>:rest</code> parameters are not counted in the current version</p>
<pre><code class="language-json">{
  "target": "ChatReflex#send", 
  "args": ["system", "[command here]"] 
}
</code></pre>
<pre><code class="language-json">{ 
  "target": "ChatReflex#instance_eval", 
  "args": ["system('[command here]')"]
}
</code></pre>
</details>

<p>Pre-versions of 3.5.0 added a <code>render_collection</code> method on reflexes with  a <code>:req</code> parameter. Calling this method could lead to arbitrary code execution:</p>
<pre><code class="language-json">{
  "target": "StimulusReflex::Reflex#render_collection", 
  "args": [
    { "inline":  "&lt;% system('[command here]') %&gt;" }
  ]
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>Patches are <a href="https://rubygems.org/gems/stimulus_reflex">available on RubyGems</a> and on <a href="https://npmjs.org/package/stimulus_reflex">NPM</a>. </p>
<p>The patched versions are: </p>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2"><code>3.4.2</code></a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4"><code>3.5.0.rc4</code></a></li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>You can add this guard to mitigate the issue if running an unpatched version of the library. </p>
<p>1.) Make sure all your reflexes inherit from the <code>ApplicationReflex</code> class
2.) Add this <code>before_reflex</code> callback to your <code>app/reflexes/application_reflex.rb</code> file:</p>
<pre><code class="language-ruby">class ApplicationReflex &lt; StimulusReflex::Reflex
  before_reflex do
    ancestors = self.class.ancestors[0..self.class.ancestors.index(StimulusReflex::Reflex) - 1]
    allowed = ancestors.any? { |a| a.public_instance_methods(false).any?(method_name.to_sym) }

    raise ArgumentError.new("Reflex method '#{method_name}' is not defined on class '#{self.class.name}' or on any of its ancestors") if !allowed
  end
end
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65">https://github.com/stimulusreflex/stimulus_reflex/security/advisories/GHSA-f78j-4w3g-4q65</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f">https://github.com/stimulusreflex/stimulus_reflex/commit/538582d240439aab76066c72335ea92096cd0c7f</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c">https://github.com/stimulusreflex/stimulus_reflex/commit/d823d7348f9ca42eb6df25574f11974e4f5bc88c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28121">https://nvd.nist.gov/vuln/detail/CVE-2024-28121</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83">https://github.com/stimulusreflex/stimulus_reflex/blob/0211cad7d60fe96838587f159d657e44cee51b9b/app/channels/stimulus_reflex/channel.rb#L83</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.4.2</a></li>
<li><a href="https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4">https://github.com/stimulusreflex/stimulus_reflex/releases/tag/v3.5.0.rc4</a></li>
<li><a href="http://seclists.org/fulldisclosure/2024/Mar/16">http://seclists.org/fulldisclosure/2024/Mar/16</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/stimulus_reflex/CVE-2024-28121.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/stimulus_reflex/CVE-2024-28121.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-f78j-4w3g-4q65">https://github.com/advisories/GHSA-f78j-4w3g-4q65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f78j-4w3g-4q65</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-12T15:44:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] jose vulnerable to resource exhaustion via specifically crafted JWE with compressed plaintext]]></title>
        <id>https://github.com/advisories/GHSA-hhhv-q57g-882q</id>
        <link href="https://github.com/advisories/GHSA-hhhv-q57g-882q"/>
        <updated>2024-03-23T03:30:25.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the <a href="https://www.rfc-editor.org/rfc/rfc7516.html#section-4.1.3">support for decompressing plaintext after its decryption</a>. This allows an adversary to exploit specific scenarios where the compression ratio becomes exceptionally high. As a result, the length of the JWE token, which is determined by the compressed content's size, can land below application-defined limits. In such cases, other existing application level mechanisms for preventing resource exhaustion may be rendered ineffective.</p>
<p>Note that as per <a href="https://www.rfc-editor.org/rfc/rfc8725.html#name-avoid-compression-of-encryp">RFC 8725</a> compression of data SHOULD NOT be done before encryption, because such compressed data often reveals information about the plaintext. For this reason the v5.x major version of <code>jose</code> removed support for compressed payloads entirely and is therefore NOT affected by this advisory.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to Node.js users utilizing the JWE decryption APIs to decrypt JWEs from untrusted sources.</p>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code uses jose version v5.x where JWE Compression is not supported anymore</li>
<li>Your code runs in an environment other than Node.js (e.g. Deno, CF Workers), which is the only runtime where JWE Compression is implemented out of the box</li>
<li>Your code does not use the JWE decryption APIs</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v2.0.7</code> and <code>v4.15.5</code> releases limit the decompression routine to only allow decompressing up to 250 kB of plaintext. In v4.x it is possible to further adjust this limit via the <code>inflateRaw</code> decryption option implementation. In v2.x it is possible to further adjust this limit via the <code>inflateRawSyncLimit</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade and do not want to support compressed JWEs you may detect and reject these tokens early by checking the token's protected header</p>
<pre><code class="language-js">const { zip } = jose.decodeProtectedHeader(token)
if (zip !== undefined) {
  throw new Error('JWE Compression is not supported')
}
</code></pre>
<p>If you wish to continue supporting JWEs with compressed payloads in these legacy release lines you must upgrade (v1.x and v2.x to version v2.0.7, v3.x and v4.x to version v4.15.5) and review the limits put forth by the patched releases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open a discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-hhhv-q57g-882q%20advisory%20question">repository</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q">https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q</a></li>
<li><a href="https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314">https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314</a></li>
<li><a href="https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b">https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28176">https://nvd.nist.gov/vuln/detail/CVE-2024-28176</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://github.com/advisories/GHSA-hhhv-q57g-882q">https://github.com/advisories/GHSA-hhhv-q57g-882q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhhv-q57g-882q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T17:40:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-esm-runtime] jose vulnerable to resource exhaustion via specifically crafted JWE with compressed plaintext]]></title>
        <id>https://github.com/advisories/GHSA-hhhv-q57g-882q</id>
        <link href="https://github.com/advisories/GHSA-hhhv-q57g-882q"/>
        <updated>2024-03-23T03:30:25.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the <a href="https://www.rfc-editor.org/rfc/rfc7516.html#section-4.1.3">support for decompressing plaintext after its decryption</a>. This allows an adversary to exploit specific scenarios where the compression ratio becomes exceptionally high. As a result, the length of the JWE token, which is determined by the compressed content's size, can land below application-defined limits. In such cases, other existing application level mechanisms for preventing resource exhaustion may be rendered ineffective.</p>
<p>Note that as per <a href="https://www.rfc-editor.org/rfc/rfc8725.html#name-avoid-compression-of-encryp">RFC 8725</a> compression of data SHOULD NOT be done before encryption, because such compressed data often reveals information about the plaintext. For this reason the v5.x major version of <code>jose</code> removed support for compressed payloads entirely and is therefore NOT affected by this advisory.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to Node.js users utilizing the JWE decryption APIs to decrypt JWEs from untrusted sources.</p>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code uses jose version v5.x where JWE Compression is not supported anymore</li>
<li>Your code runs in an environment other than Node.js (e.g. Deno, CF Workers), which is the only runtime where JWE Compression is implemented out of the box</li>
<li>Your code does not use the JWE decryption APIs</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v2.0.7</code> and <code>v4.15.5</code> releases limit the decompression routine to only allow decompressing up to 250 kB of plaintext. In v4.x it is possible to further adjust this limit via the <code>inflateRaw</code> decryption option implementation. In v2.x it is possible to further adjust this limit via the <code>inflateRawSyncLimit</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade and do not want to support compressed JWEs you may detect and reject these tokens early by checking the token's protected header</p>
<pre><code class="language-js">const { zip } = jose.decodeProtectedHeader(token)
if (zip !== undefined) {
  throw new Error('JWE Compression is not supported')
}
</code></pre>
<p>If you wish to continue supporting JWEs with compressed payloads in these legacy release lines you must upgrade (v1.x and v2.x to version v2.0.7, v3.x and v4.x to version v4.15.5) and review the limits put forth by the patched releases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open a discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-hhhv-q57g-882q%20advisory%20question">repository</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q">https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q</a></li>
<li><a href="https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314">https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314</a></li>
<li><a href="https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b">https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28176">https://nvd.nist.gov/vuln/detail/CVE-2024-28176</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://github.com/advisories/GHSA-hhhv-q57g-882q">https://github.com/advisories/GHSA-hhhv-q57g-882q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhhv-q57g-882q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T17:40:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-cjs-runtime] jose vulnerable to resource exhaustion via specifically crafted JWE with compressed plaintext]]></title>
        <id>https://github.com/advisories/GHSA-hhhv-q57g-882q</id>
        <link href="https://github.com/advisories/GHSA-hhhv-q57g-882q"/>
        <updated>2024-03-23T03:30:25.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the <a href="https://www.rfc-editor.org/rfc/rfc7516.html#section-4.1.3">support for decompressing plaintext after its decryption</a>. This allows an adversary to exploit specific scenarios where the compression ratio becomes exceptionally high. As a result, the length of the JWE token, which is determined by the compressed content's size, can land below application-defined limits. In such cases, other existing application level mechanisms for preventing resource exhaustion may be rendered ineffective.</p>
<p>Note that as per <a href="https://www.rfc-editor.org/rfc/rfc8725.html#name-avoid-compression-of-encryp">RFC 8725</a> compression of data SHOULD NOT be done before encryption, because such compressed data often reveals information about the plaintext. For this reason the v5.x major version of <code>jose</code> removed support for compressed payloads entirely and is therefore NOT affected by this advisory.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to Node.js users utilizing the JWE decryption APIs to decrypt JWEs from untrusted sources.</p>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code uses jose version v5.x where JWE Compression is not supported anymore</li>
<li>Your code runs in an environment other than Node.js (e.g. Deno, CF Workers), which is the only runtime where JWE Compression is implemented out of the box</li>
<li>Your code does not use the JWE decryption APIs</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v2.0.7</code> and <code>v4.15.5</code> releases limit the decompression routine to only allow decompressing up to 250 kB of plaintext. In v4.x it is possible to further adjust this limit via the <code>inflateRaw</code> decryption option implementation. In v2.x it is possible to further adjust this limit via the <code>inflateRawSyncLimit</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade and do not want to support compressed JWEs you may detect and reject these tokens early by checking the token's protected header</p>
<pre><code class="language-js">const { zip } = jose.decodeProtectedHeader(token)
if (zip !== undefined) {
  throw new Error('JWE Compression is not supported')
}
</code></pre>
<p>If you wish to continue supporting JWEs with compressed payloads in these legacy release lines you must upgrade (v1.x and v2.x to version v2.0.7, v3.x and v4.x to version v4.15.5) and review the limits put forth by the patched releases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open a discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-hhhv-q57g-882q%20advisory%20question">repository</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q">https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q</a></li>
<li><a href="https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314">https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314</a></li>
<li><a href="https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b">https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28176">https://nvd.nist.gov/vuln/detail/CVE-2024-28176</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://github.com/advisories/GHSA-hhhv-q57g-882q">https://github.com/advisories/GHSA-hhhv-q57g-882q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhhv-q57g-882q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T17:40:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] jose vulnerable to resource exhaustion via specifically crafted JWE with compressed plaintext]]></title>
        <id>https://github.com/advisories/GHSA-hhhv-q57g-882q</id>
        <link href="https://github.com/advisories/GHSA-hhhv-q57g-882q"/>
        <updated>2024-03-23T03:30:25.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in the JSON Web Encryption (JWE) decryption interfaces, specifically related to the <a href="https://www.rfc-editor.org/rfc/rfc7516.html#section-4.1.3">support for decompressing plaintext after its decryption</a>. This allows an adversary to exploit specific scenarios where the compression ratio becomes exceptionally high. As a result, the length of the JWE token, which is determined by the compressed content's size, can land below application-defined limits. In such cases, other existing application level mechanisms for preventing resource exhaustion may be rendered ineffective.</p>
<p>Note that as per <a href="https://www.rfc-editor.org/rfc/rfc8725.html#name-avoid-compression-of-encryp">RFC 8725</a> compression of data SHOULD NOT be done before encryption, because such compressed data often reveals information about the plaintext. For this reason the v5.x major version of <code>jose</code> removed support for compressed payloads entirely and is therefore NOT affected by this advisory.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions it is possible to have the user's environment consume unreasonable amount of CPU time or memory during JWE Decryption operations.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to Node.js users utilizing the JWE decryption APIs to decrypt JWEs from untrusted sources.</p>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code uses jose version v5.x where JWE Compression is not supported anymore</li>
<li>Your code runs in an environment other than Node.js (e.g. Deno, CF Workers), which is the only runtime where JWE Compression is implemented out of the box</li>
<li>Your code does not use the JWE decryption APIs</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v2.0.7</code> and <code>v4.15.5</code> releases limit the decompression routine to only allow decompressing up to 250 kB of plaintext. In v4.x it is possible to further adjust this limit via the <code>inflateRaw</code> decryption option implementation. In v2.x it is possible to further adjust this limit via the <code>inflateRawSyncLimit</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade and do not want to support compressed JWEs you may detect and reject these tokens early by checking the token's protected header</p>
<pre><code class="language-js">const { zip } = jose.decodeProtectedHeader(token)
if (zip !== undefined) {
  throw new Error('JWE Compression is not supported')
}
</code></pre>
<p>If you wish to continue supporting JWEs with compressed payloads in these legacy release lines you must upgrade (v1.x and v2.x to version v2.0.7, v3.x and v4.x to version v4.15.5) and review the limits put forth by the patched releases.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please open a discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-hhhv-q57g-882q%20advisory%20question">repository</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q">https://github.com/panva/jose/security/advisories/GHSA-hhhv-q57g-882q</a></li>
<li><a href="https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314">https://github.com/panva/jose/commit/02a65794f7873cdaf12e81e80ad076fcdc4a9314</a></li>
<li><a href="https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b">https://github.com/panva/jose/commit/1b91d88d2f8233f3477a5f4579aa5f8057b2ee8b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28176">https://nvd.nist.gov/vuln/detail/CVE-2024-28176</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XJDO5VSIAOGT2WP63AXAAWNRSVJCNCRH</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KXKGNCRU7OTM5AHC7YIYBNOWI742PRMY</a></li>
<li><a href="https://github.com/advisories/GHSA-hhhv-q57g-882q">https://github.com/advisories/GHSA-hhhv-q57g-882q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hhhv-q57g-882q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-07T17:40:57.000Z</published>
    </entry>
</feed>