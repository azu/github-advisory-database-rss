<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-12-06T07:01:16.721Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload]]></title>
        <id>https://github.com/advisories/GHSA-92r3-m2mg-pj97</id>
        <link href="https://github.com/advisories/GHSA-92r3-m2mg-pj97"/>
        <updated>2023-12-05T23:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type="module"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>
<h3 id="impact">Impact</h3>
<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@5.0.5">vite@5.0.5</a>, <a href="mailto:vite@4.5.1">vite@4.5.1</a>, <a href="mailto:vite@4.4.12">vite@4.4.12</a></p>
<h3 id="details">Details</h3>
<p>Suppose <code>index.html</code> contains an inline module script:</p>
<pre><code class="language-html">&lt;script type="module"&gt;
  // Inline script
&lt;/script&gt;
</code></pre>
<p>This script is transformed into a proxy script like</p>
<pre><code class="language-html">&lt;script type="module" src="/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>due to Vite's HTML plugin:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>
<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>
<p><a href="https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>
<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>
<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>
<pre><code>"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;
</code></pre>
<p>so a request to <a href="http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/?"&gt;&lt;/script&gt;&lt;script&gt;alert("boom")&lt;/script&gt;?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>which demonstrates XSS.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>
<li>"Open in New Tab"</li>
<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>
<li>Witness XSS:</li>
<li><img alt="image" src="https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png"></li>
</ul>
</li>
<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>
<li>(Same steps as above)</li>
</ul>
</li>
<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>
<li>(Same steps as above)</li>
<li>You should <em>not</em> see the alert box in this case</li>
</ul>
</li>
</ul>
<h3 id="detailed-impact">Detailed Impact</h3>
<p>This will probably predominantly affect <a href="https://vitejs.dev/guide/ssr#setting-up-the-dev-server">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>
<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>
<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>
<pre><code class="language-js">import fs from 'node:fs/promises';
import * as vite from 'vite';

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="module"&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: 'custom' });
const transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);
console.log(transformed);
await server.close();
</code></pre>
<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49293">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>
<li><a href="https://github.com/advisories/GHSA-92r3-m2mg-pj97">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92r3-m2mg-pj97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload]]></title>
        <id>https://github.com/advisories/GHSA-92r3-m2mg-pj97</id>
        <link href="https://github.com/advisories/GHSA-92r3-m2mg-pj97"/>
        <updated>2023-12-05T23:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type="module"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>
<h3 id="impact">Impact</h3>
<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@5.0.5">vite@5.0.5</a>, <a href="mailto:vite@4.5.1">vite@4.5.1</a>, <a href="mailto:vite@4.4.12">vite@4.4.12</a></p>
<h3 id="details">Details</h3>
<p>Suppose <code>index.html</code> contains an inline module script:</p>
<pre><code class="language-html">&lt;script type="module"&gt;
  // Inline script
&lt;/script&gt;
</code></pre>
<p>This script is transformed into a proxy script like</p>
<pre><code class="language-html">&lt;script type="module" src="/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>due to Vite's HTML plugin:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>
<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>
<p><a href="https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>
<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>
<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>
<pre><code>"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;
</code></pre>
<p>so a request to <a href="http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/?"&gt;&lt;/script&gt;&lt;script&gt;alert("boom")&lt;/script&gt;?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>which demonstrates XSS.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>
<li>"Open in New Tab"</li>
<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>
<li>Witness XSS:</li>
<li><img alt="image" src="https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png"></li>
</ul>
</li>
<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>
<li>(Same steps as above)</li>
</ul>
</li>
<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>
<li>(Same steps as above)</li>
<li>You should <em>not</em> see the alert box in this case</li>
</ul>
</li>
</ul>
<h3 id="detailed-impact">Detailed Impact</h3>
<p>This will probably predominantly affect <a href="https://vitejs.dev/guide/ssr#setting-up-the-dev-server">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>
<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>
<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>
<pre><code class="language-js">import fs from 'node:fs/promises';
import * as vite from 'vite';

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="module"&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: 'custom' });
const transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);
console.log(transformed);
await server.close();
</code></pre>
<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49293">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>
<li><a href="https://github.com/advisories/GHSA-92r3-m2mg-pj97">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92r3-m2mg-pj97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload]]></title>
        <id>https://github.com/advisories/GHSA-92r3-m2mg-pj97</id>
        <link href="https://github.com/advisories/GHSA-92r3-m2mg-pj97"/>
        <updated>2023-12-05T23:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type="module"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>
<h3 id="impact">Impact</h3>
<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@5.0.5">vite@5.0.5</a>, <a href="mailto:vite@4.5.1">vite@4.5.1</a>, <a href="mailto:vite@4.4.12">vite@4.4.12</a></p>
<h3 id="details">Details</h3>
<p>Suppose <code>index.html</code> contains an inline module script:</p>
<pre><code class="language-html">&lt;script type="module"&gt;
  // Inline script
&lt;/script&gt;
</code></pre>
<p>This script is transformed into a proxy script like</p>
<pre><code class="language-html">&lt;script type="module" src="/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>due to Vite's HTML plugin:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>
<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>
<p><a href="https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>
<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>
<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>
<pre><code>"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;
</code></pre>
<p>so a request to <a href="http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/?"&gt;&lt;/script&gt;&lt;script&gt;alert("boom")&lt;/script&gt;?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>which demonstrates XSS.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>
<li>"Open in New Tab"</li>
<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>
<li>Witness XSS:</li>
<li><img alt="image" src="https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png"></li>
</ul>
</li>
<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>
<li>(Same steps as above)</li>
</ul>
</li>
<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>
<li>(Same steps as above)</li>
<li>You should <em>not</em> see the alert box in this case</li>
</ul>
</li>
</ul>
<h3 id="detailed-impact">Detailed Impact</h3>
<p>This will probably predominantly affect <a href="https://vitejs.dev/guide/ssr#setting-up-the-dev-server">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>
<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>
<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>
<pre><code class="language-js">import fs from 'node:fs/promises';
import * as vite from 'vite';

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="module"&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: 'custom' });
const transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);
console.log(transformed);
await server.close();
</code></pre>
<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49293">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>
<li><a href="https://github.com/advisories/GHSA-92r3-m2mg-pj97">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92r3-m2mg-pj97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@google-cloud/firestore] Logging of the firestore key within nodejs-firestore]]></title>
        <id>https://github.com/advisories/GHSA-4g6q-77j7-vvjc</id>
        <link href="https://github.com/advisories/GHSA-4g6q-77j7-vvjc"/>
        <updated>2023-12-04T23:13:52.000Z</updated>
        <content type="html"><![CDATA[<p>A potential logging of the firestore key via logging within nodejs-firestore exists - Developers who were logging objects through this._settings would be logging the firestore key as well potentially exposing it to anyone with logs read access. We recommend upgrading to version 6.1.0 to avoid this issue</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6460">https://nvd.nist.gov/vuln/detail/CVE-2023-6460</a></li>
<li><a href="https://github.com/googleapis/nodejs-firestore/pull/1742">https://github.com/googleapis/nodejs-firestore/pull/1742</a></li>
<li><a href="https://github.com/googleapis/nodejs-firestore/releases/tag/v6.1.0">https://github.com/googleapis/nodejs-firestore/releases/tag/v6.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-4g6q-77j7-vvjc">https://github.com/advisories/GHSA-4g6q-77j7-vvjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4g6q-77j7-vvjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-04T15:31:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sequelize-typescript] sequelize-typescript Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7pvx-4585-hqww</id>
        <link href="https://github.com/advisories/GHSA-7pvx-4585-hqww"/>
        <updated>2023-12-01T22:37:52.000Z</updated>
        <content type="html"><![CDATA[<p>Prototype Pollution in GitHub repository robinbuschmann/sequelize-typescript prior to 2.1.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6293">https://nvd.nist.gov/vuln/detail/CVE-2023-6293</a></li>
<li><a href="https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78">https://github.com/robinbuschmann/sequelize-typescript/commit/5ce8afdd1671b08c774ce106b000605ba8fccf78</a></li>
<li><a href="https://huntr.com/bounties/36a7ecbf-4d3d-462e-86a3-cda7b1ec64e2">https://huntr.com/bounties/36a7ecbf-4d3d-462e-86a3-cda7b1ec64e2</a></li>
<li><a href="https://github.com/advisories/GHSA-7pvx-4585-hqww">https://github.com/advisories/GHSA-7pvx-4585-hqww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7pvx-4585-hqww</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-24T21:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] ASAR Integrity bypass via filetype confusion in electron]]></title>
        <id>https://github.com/advisories/GHSA-7m48-wc93-9g85</id>
        <link href="https://github.com/advisories/GHSA-7m48-wc93-9g85"/>
        <updated>2023-12-04T15:19:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This only impacts apps that have the <code>embeddedAsarIntegrityValidation</code> and <code>onlyLoadAppFromAsar</code> <a href="https://www.electronjs.org/docs/latest/tutorial/fuses">fuses</a> enabled.  Apps without these fuses enabled are not impacted.  This issue is specific to macOS as these fuses are only currently supported on macOS.</p>
<p>Specifically this issue can only be exploited if your app is launched from a filesystem the attacker has write access too.  i.e. the ability to edit files inside the <code>.app</code> bundle on macOS which these fuses are supposed to protect against.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>27.0.0-alpha.7</code></li>
<li><code>26.2.1</code></li>
<li><code>25.8.1</code></li>
<li><code>24.8.3</code></li>
<li><code>23.3.14</code></li>
<li><code>22.3.24</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85">https://github.com/electron/electron/security/advisories/GHSA-7m48-wc93-9g85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44402">https://nvd.nist.gov/vuln/detail/CVE-2023-44402</a></li>
<li><a href="https://github.com/electron/electron/pull/39788">https://github.com/electron/electron/pull/39788</a></li>
<li><a href="https://www.electronjs.org/docs/latest/tutorial/fuses">https://www.electronjs.org/docs/latest/tutorial/fuses</a></li>
<li><a href="https://github.com/advisories/GHSA-7m48-wc93-9g85">https://github.com/advisories/GHSA-7m48-wc93-9g85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7m48-wc93-9g85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-01T21:32:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@adobe/css-tools] @adobe/css-tools Improper Input Validation and Inefficient Regular Expression Complexity]]></title>
        <id>https://github.com/advisories/GHSA-prr3-c3m5-p7q2</id>
        <link href="https://github.com/advisories/GHSA-prr3-c3m5-p7q2"/>
        <updated>2023-11-30T19:51:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>@adobe/css-tools version 4.3.1 and earlier are affected by an Improper Input Validation vulnerability that could result in a denial of service while attempting to parse CSS.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in 4.3.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/adobe/css-tools/security/advisories/GHSA-prr3-c3m5-p7q2">https://github.com/adobe/css-tools/security/advisories/GHSA-prr3-c3m5-p7q2</a></li>
<li><a href="https://github.com/adobe/css-tools/issues/211">https://github.com/adobe/css-tools/issues/211</a></li>
<li><a href="https://github.com/adobe/css-tools/pull/249">https://github.com/adobe/css-tools/pull/249</a></li>
<li><a href="https://github.com/adobe/css-tools/commit/472bef91bde9caab305f3f36231ad0c253581b43">https://github.com/adobe/css-tools/commit/472bef91bde9caab305f3f36231ad0c253581b43</a></li>
<li><a href="https://github.com/advisories/GHSA-prr3-c3m5-p7q2">https://github.com/advisories/GHSA-prr3-c3m5-p7q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-prr3-c3m5-p7q2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-30T19:51:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zip-local] Exposure of Resource to Wrong Sphere in Zip-Local]]></title>
        <id>https://github.com/advisories/GHSA-wxj7-97fp-j53j</id>
        <link href="https://github.com/advisories/GHSA-wxj7-97fp-j53j"/>
        <updated>2023-11-29T22:46:07.000Z</updated>
        <content type="html"><![CDATA[<p>The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23484">https://nvd.nist.gov/vuln/detail/CVE-2021-23484</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085">https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365">https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477">https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477</a></li>
<li><a href="https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b">https://github.com/Mostafa-Samir/zip-local/commit/6bb9b59733df379ac168aa705790bd8339b4bf9b</a></li>
<li><a href="https://github.com/advisories/GHSA-wxj7-97fp-j53j">https://github.com/advisories/GHSA-wxj7-97fp-j53j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxj7-97fp-j53j</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-01T00:46:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[y18n] Prototype Pollution in y18n]]></title>
        <id>https://github.com/advisories/GHSA-c4w7-xm78-47vh</id>
        <link href="https://github.com/advisories/GHSA-c4w7-xm78-47vh"/>
        <updated>2023-11-29T22:45:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>
<h3 id="poc">POC</h3>
<pre><code class="language-js">const y18n = require('y18n')();

y18n.setLocale('__proto__');
y18n.updateLocale({polluted: true});

console.log(polluted); // true
</code></pre>
<h3 id="recommendation">Recommendation</h3>
<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7774">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>
<li><a href="https://github.com/yargs/y18n/issues/96">https://github.com/yargs/y18n/issues/96</a></li>
<li><a href="https://github.com/yargs/y18n/pull/108">https://github.com/yargs/y18n/pull/108</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-Y18N-1021887">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>
<li><a href="https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>
<li><a href="https://github.com/advisories/GHSA-c4w7-xm78-47vh">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c4w7-xm78-47vh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-29T16:05:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[y18n] Prototype Pollution in y18n]]></title>
        <id>https://github.com/advisories/GHSA-c4w7-xm78-47vh</id>
        <link href="https://github.com/advisories/GHSA-c4w7-xm78-47vh"/>
        <updated>2023-11-29T22:45:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>
<h3 id="poc">POC</h3>
<pre><code class="language-js">const y18n = require('y18n')();

y18n.setLocale('__proto__');
y18n.updateLocale({polluted: true});

console.log(polluted); // true
</code></pre>
<h3 id="recommendation">Recommendation</h3>
<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7774">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>
<li><a href="https://github.com/yargs/y18n/issues/96">https://github.com/yargs/y18n/issues/96</a></li>
<li><a href="https://github.com/yargs/y18n/pull/108">https://github.com/yargs/y18n/pull/108</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-Y18N-1021887">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>
<li><a href="https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>
<li><a href="https://github.com/advisories/GHSA-c4w7-xm78-47vh">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c4w7-xm78-47vh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-29T16:05:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[y18n] Prototype Pollution in y18n]]></title>
        <id>https://github.com/advisories/GHSA-c4w7-xm78-47vh</id>
        <link href="https://github.com/advisories/GHSA-c4w7-xm78-47vh"/>
        <updated>2023-11-29T22:45:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>The npm package <code>y18n</code> before versions 3.2.2, 4.0.1, and 5.0.5 is vulnerable to Prototype Pollution. </p>
<h3 id="poc">POC</h3>
<pre><code class="language-js">const y18n = require('y18n')();

y18n.setLocale('__proto__');
y18n.updateLocale({polluted: true});

console.log(polluted); // true
</code></pre>
<h3 id="recommendation">Recommendation</h3>
<p>Upgrade to version 3.2.2, 4.0.1, 5.0.5 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7774">https://nvd.nist.gov/vuln/detail/CVE-2020-7774</a></li>
<li><a href="https://github.com/yargs/y18n/issues/96">https://github.com/yargs/y18n/issues/96</a></li>
<li><a href="https://github.com/yargs/y18n/pull/108">https://github.com/yargs/y18n/pull/108</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1038306</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-Y18N-1021887">https://snyk.io/vuln/SNYK-JS-Y18N-1021887</a></li>
<li><a href="https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25">https://github.com/yargs/y18n/commit/a9ac604abf756dec9687be3843e2c93bfe581f25</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3">https://github.com/yargs/y18n/commit/90401eea9062ad498f4f792e3fff8008c4c193a3</a></li>
<li><a href="https://github.com/advisories/GHSA-c4w7-xm78-47vh">https://github.com/advisories/GHSA-c4w7-xm78-47vh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c4w7-xm78-47vh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-29T16:05:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmlhttprequest-ssl] xmlhttprequest and xmlhttprequest-ssl vulnerable to Arbitrary Code Injection]]></title>
        <id>https://github.com/advisories/GHSA-h4j5-c7cj-74xg</id>
        <link href="https://github.com/advisories/GHSA-h4j5-c7cj-74xg"/>
        <updated>2023-11-29T22:44:55.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (<code>async=False</code> on <code>xhr.open</code>), malicious user input flowing into <code>xhr.send</code> could result in arbitrary code being injected and run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28502">https://nvd.nist.gov/vuln/detail/CVE-2020-28502</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6">https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531">https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291">https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291</a></li>
<li><a href="https://github.com/advisories/GHSA-h4j5-c7cj-74xg">https://github.com/advisories/GHSA-h4j5-c7cj-74xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4j5-c7cj-74xg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-04T18:02:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmlhttprequest] xmlhttprequest and xmlhttprequest-ssl vulnerable to Arbitrary Code Injection]]></title>
        <id>https://github.com/advisories/GHSA-h4j5-c7cj-74xg</id>
        <link href="https://github.com/advisories/GHSA-h4j5-c7cj-74xg"/>
        <updated>2023-11-29T22:44:55.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package xmlhttprequest before 1.7.0; all versions of package xmlhttprequest-ssl. Provided requests are sent synchronously (<code>async=False</code> on <code>xhr.open</code>), malicious user input flowing into <code>xhr.send</code> could result in arbitrary code being injected and run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-28502">https://nvd.nist.gov/vuln/detail/CVE-2020-28502</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6">https://github.com/driverdan/node-XMLHttpRequest/commit/983cfc244c7567ad6a59e366e55a8037e0497fe6</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js#L480</a></li>
<li><a href="https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480">https://github.com/driverdan/node-XMLHttpRequest/blob/1.6.0/lib/XMLHttpRequest.js%23L480</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531">https://github.com/mjwwit/node-XMLHttpRequest/blob/ae38832a0f1347c5e96dda665402509a3458e302/lib/XMLHttpRequest.js#L531</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082937</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-1082938</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUEST-1082935</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936">https://snyk.io/vuln/SNYK-JS-XMLHTTPREQUESTSSL-1082936</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291">https://github.com/mjwwit/node-XMLHttpRequest/commit/ee1e81fc67729c7c0eba5537ed7fe1e30a6b3291</a></li>
<li><a href="https://github.com/advisories/GHSA-h4j5-c7cj-74xg">https://github.com/advisories/GHSA-h4j5-c7cj-74xg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h4j5-c7cj-74xg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-04T18:02:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmlhttprequest-ssl] Improper Certificate Validation in xmlhttprequest-ssl]]></title>
        <id>https://github.com/advisories/GHSA-72mh-269x-7mh5</id>
        <link href="https://github.com/advisories/GHSA-72mh-269x-7mh5"/>
        <updated>2023-11-29T22:43:23.000Z</updated>
        <content type="html"><![CDATA[<p>The xmlhttprequest-ssl package before 1.6.1 for Node.js disables SSL certificate validation by default, because rejectUnauthorized (when the property exists but is undefined) is considered to be false within the https.request function of Node.js. In other words, no certificate is ever rejected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-31597">https://nvd.nist.gov/vuln/detail/CVE-2021-31597</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2">https://github.com/mjwwit/node-XMLHttpRequest/commit/bf53329b61ca6afc5d28f6b8d2dc2e3ca740a9b2</a></li>
<li><a href="https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1">https://github.com/mjwwit/node-XMLHttpRequest/compare/v1.6.0...1.6.1</a></li>
<li><a href="https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt">https://people.kingsds.network/wesgarland/xmlhttprequest-ssl-vuln.txt</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210618-0004/">https://security.netapp.com/advisory/ntap-20210618-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-72mh-269x-7mh5">https://github.com/advisories/GHSA-72mh-269x-7mh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-72mh-269x-7mh5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-24T19:52:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[word-wrap] word-wrap vulnerable to Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-j8xg-fqg3-53r7</id>
        <link href="https://github.com/advisories/GHSA-j8xg-fqg3-53r7"/>
        <updated>2023-11-29T22:42:45.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26115">https://nvd.nist.gov/vuln/detail/CVE-2023-26115</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-4058657">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-4058657</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-WORDWRAP-3149973">https://security.snyk.io/vuln/SNYK-JS-WORDWRAP-3149973</a></li>
<li><a href="https://github.com/jonschlinkert/word-wrap/blob/master/index.js#L39">https://github.com/jonschlinkert/word-wrap/blob/master/index.js#L39</a></li>
<li><a href="https://github.com/jonschlinkert/word-wrap/releases/tag/1.2.4">https://github.com/jonschlinkert/word-wrap/releases/tag/1.2.4</a></li>
<li><a href="https://github.com/jonschlinkert/word-wrap/commit/420dce9a2412b21881202b73a3c34f0edc53cb2e">https://github.com/jonschlinkert/word-wrap/commit/420dce9a2412b21881202b73a3c34f0edc53cb2e</a></li>
<li><a href="https://github.com/jonschlinkert/word-wrap/blob/master/index.js%23L39">https://github.com/jonschlinkert/word-wrap/blob/master/index.js%23L39</a></li>
<li><a href="https://github.com/advisories/GHSA-j8xg-fqg3-53r7">https://github.com/advisories/GHSA-j8xg-fqg3-53r7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8xg-fqg3-53r7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-22T06:30:18.000Z</published>
    </entry>
</feed>