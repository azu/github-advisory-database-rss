<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-06-11T14:01:27.874Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits]]></title>
        <id>https://github.com/advisories/GHSA-7v5v-9h63-cj86</id>
        <link href="https://github.com/advisories/GHSA-7v5v-9h63-cj86"/>
        <updated>2024-06-10T21:38:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>
<ol>
<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>
<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>
<li><a href="https://github.com/advisories/GHSA-7v5v-9h63-cj86">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v5v-9h63-cj86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-10T21:38:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits]]></title>
        <id>https://github.com/advisories/GHSA-7v5v-9h63-cj86</id>
        <link href="https://github.com/advisories/GHSA-7v5v-9h63-cj86"/>
        <updated>2024-06-10T21:38:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>
<ol>
<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>
<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>
<li><a href="https://github.com/advisories/GHSA-7v5v-9h63-cj86">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v5v-9h63-cj86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-10T21:38:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@grpc/grpc-js] @grpc/grpc-js can allocate memory for incoming messages well above configured limits]]></title>
        <id>https://github.com/advisories/GHSA-7v5v-9h63-cj86</id>
        <link href="https://github.com/advisories/GHSA-7v5v-9h63-cj86"/>
        <updated>2024-06-10T21:38:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There are two separate code paths in which memory can be allocated per message in excess of the <code>grpc.max_receive_message_length</code> channel option:</p>
<ol>
<li>If an incoming message has a size on the wire greater than the configured limit, the entire message is buffered before it is discarded.</li>
<li>If an incoming message has a size within the limit on the wire but decompresses to a size greater than the limit, the entire message is decompressed into memory, and on the server is not discarded.</li>
</ol>
<h3 id="patches">Patches</h3>
<p>This has been patched in versions 1.10.9, 1.9.15, and 1.8.22</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86">https://github.com/grpc/grpc-node/security/advisories/GHSA-7v5v-9h63-cj86</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650">https://github.com/grpc/grpc-node/commit/08b0422dae56467ecae1007e899efe66a8c4a650</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3">https://github.com/grpc/grpc-node/commit/674f4e351a619fd4532f84ae6dff96b8ee4e1ed3</a></li>
<li><a href="https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb">https://github.com/grpc/grpc-node/commit/a8a020339c7eab1347a343a512ad17a4aea4bfdb</a></li>
<li><a href="https://github.com/advisories/GHSA-7v5v-9h63-cj86">https://github.com/advisories/GHSA-7v5v-9h63-cj86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v5v-9h63-cj86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-10T21:38:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ghtml] ghtml Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vvhj-v88f-5gxr</id>
        <link href="https://github.com/advisories/GHSA-vvhj-v88f-5gxr"/>
        <updated>2024-06-10T21:36:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>It is possible to introduce user-controlled JavaScript code and trigger a Cross-Site Scripting (XSS) vulnerability in some cases.</p>
<h2 id="actions-taken">Actions Taken</h2>
<ul>
<li>Updated the documentation to clarify that while <code>ghtml</code> escapes characters with special meaning in HTML, it does not provide comprehensive protection against all types of XSS attacks in every scenario. <strong><em>This aligns with the approach taken by other template engines. Developers should be cautious and take additional measures to sanitize user input and prevent potential vulnerabilities.</em></strong> More reading: <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html</a></li>
<li>The backtick character (`) is now also escaped to prevent the creation of strings in most cases where a malicious actor somehow gains the ability to write JavaScript. This does not provide comprehensive protection either.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gurgunday/ghtml/security/advisories/GHSA-vvhj-v88f-5gxr">https://github.com/gurgunday/ghtml/security/advisories/GHSA-vvhj-v88f-5gxr</a></li>
<li><a href="https://github.com/gurgunday/ghtml/commit/df1ea50fe8968a766fd2b9379a8f9806375227f8">https://github.com/gurgunday/ghtml/commit/df1ea50fe8968a766fd2b9379a8f9806375227f8</a></li>
<li><a href="https://github.com/advisories/GHSA-vvhj-v88f-5gxr">https://github.com/advisories/GHSA-vvhj-v88f-5gxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvhj-v88f-5gxr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-10T21:36:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[braces] Uncontrolled resource consumption in braces]]></title>
        <id>https://github.com/advisories/GHSA-grv7-fg5c-xmjg</id>
        <link href="https://github.com/advisories/GHSA-grv7-fg5c-xmjg"/>
        <updated>2024-06-10T20:17:26.000Z</updated>
        <content type="html"><![CDATA[<p>The NPM package <code>braces</code> fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In <code>lib/parse.js,</code> if a malicious user sends "imbalanced braces" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4068">https://nvd.nist.gov/vuln/detail/CVE-2024-4068</a></li>
<li><a href="https://github.com/micromatch/braces/issues/35">https://github.com/micromatch/braces/issues/35</a></li>
<li><a href="https://devhub.checkmarx.com/cve-details/CVE-2024-4068">https://devhub.checkmarx.com/cve-details/CVE-2024-4068</a></li>
<li><a href="https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308">https://github.com/micromatch/braces/blob/98414f9f1fabe021736e26836d8306d5de747e0d/lib/parse.js#L308</a></li>
<li><a href="https://github.com/micromatch/braces/pull/37">https://github.com/micromatch/braces/pull/37</a></li>
<li><a href="https://github.com/micromatch/braces/pull/40">https://github.com/micromatch/braces/pull/40</a></li>
<li><a href="https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff">https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff</a></li>
<li><a href="https://github.com/advisories/GHSA-grv7-fg5c-xmjg">https://github.com/advisories/GHSA-grv7-fg5c-xmjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-grv7-fg5c-xmjg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-14T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/dom] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/yup] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/zod] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@conform-to/dom] Conform contains a Prototype Pollution Vulnerability in `parseWith...` function]]></title>
        <id>https://github.com/advisories/GHSA-624g-8qjg-8qxf</id>
        <link href="https://github.com/advisories/GHSA-624g-8qjg-8qxf"/>
        <updated>2024-06-10T20:13:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Conform allows the parsing of nested objects in the form of <code>object.property</code>. Due to an improper implementation of this feature, an attacker can exploit it to trigger prototype pollution by passing a crafted input to <code>parseWith...</code> functions.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-javascript">const { parseWithZod } = require('@conform-to/zod');
const { z } = require("zod"); 

const param = new URLSearchParams("__proto__.pollution=polluted");
const schema = z.object({ "a": z.string() });

parseWithZod(param, { schema });
console.log("pollution:", ({}).pollution); // should print "polluted"
</code></pre>
<h3 id="details">Details</h3>
<p>The invocation of the <code>parseWithZod</code> function in the above PoC triggers the <code>setValue</code> function through <code>getSubmissionContext</code> and <code>parse</code>, executing the following process, resulting in prototype pollution:</p>
<pre><code class="language-javascript">let pointer = value;

pointer.__proto__ = pointer.__proto__;
pointer = pointer.__proto__;

pointer.polluted = "polluted";
</code></pre>
<p>This is caused by the lack of object existence checking on <a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">line 117 in formdata.ts</a>, where the code only checks for the presence of <code>pointer[key]</code> without proper validation.</p>
<h3 id="impact">Impact</h3>
<p>Applications that use conform for server-side validation of form data or URL parameters are affected by this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf">https://github.com/edmundhung/conform/security/advisories/GHSA-624g-8qjg-8qxf</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de">https://github.com/edmundhung/conform/commit/4819d51b5a53fd5486fc85c17cdc148eb160e3de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32866">https://nvd.nist.gov/vuln/detail/CVE-2024-32866</a></li>
<li><a href="https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117">https://github.com/edmundhung/conform/blob/59156d7115a7207fa3b6f8a70a4342a9b24c2501/packages/conform-dom/formdata.ts#L117</a></li>
<li><a href="https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef">https://github.com/edmundhung/conform/commit/cb604dd58b99e2d12716d901a23bfca724e741ef</a></li>
<li><a href="https://github.com/advisories/GHSA-624g-8qjg-8qxf">https://github.com/advisories/GHSA-624g-8qjg-8qxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-624g-8qjg-8qxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-23T21:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] lunary-ai/lunary allows users unauthorized access to projects]]></title>
        <id>https://github.com/advisories/GHSA-w5xm-mx47-v7c8</id>
        <link href="https://github.com/advisories/GHSA-w5xm-mx47-v7c8"/>
        <updated>2024-06-10T15:33:08.000Z</updated>
        <content type="html"><![CDATA[<p>In lunary-ai/lunary version v1.2.13, an improper authorization vulnerability exists that allows unauthorized users to access and manipulate projects within an organization they should not have access to. Specifically, the vulnerability is located in the <code>checkProjectAccess</code> method within the authorization middleware, which fails to adequately verify if a user has the correct permissions to access a specific project. Instead, it only checks if the user is part of the organization owning the project, overlooking the necessary check against the <code>account_project</code> table for explicit project access rights. This flaw enables attackers to gain complete control over all resources within a project, including the ability to create, update, read, and delete any resource, compromising the privacy and security of sensitive information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4146">https://nvd.nist.gov/vuln/detail/CVE-2024-4146</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/c43b6c62035f32ca455f66d5fd22ba661648cde7">https://github.com/lunary-ai/lunary/commit/c43b6c62035f32ca455f66d5fd22ba661648cde7</a></li>
<li><a href="https://huntr.com/bounties/a749e696-b398-4260-b2d0-b0054b9fffa7">https://huntr.com/bounties/a749e696-b398-4260-b2d0-b0054b9fffa7</a></li>
<li><a href="https://github.com/advisories/GHSA-w5xm-mx47-v7c8">https://github.com/advisories/GHSA-w5xm-mx47-v7c8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5xm-mx47-v7c8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-08T21:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zsa] Generation of Error Message Containing Sensitive Information in zsa]]></title>
        <id>https://github.com/advisories/GHSA-wjmj-h3xc-hxp8</id>
        <link href="https://github.com/advisories/GHSA-wjmj-h3xc-hxp8"/>
        <updated>2024-06-07T15:49:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users are impacted. The zsa application transfers the parse error stack from the server to the client in production build mode. This can potentially reveal sensitive information about the server environment, such as the machine username and directory paths. An attacker could exploit this vulnerability to gain unauthorized access to sensitive server information. This information could be used to plan further attacks or gain a deeper understanding of the server infrastructure.</p>
<h3 id="patches">Patches</h3>
<p>Yes, this has been pathed on <code>0.3.3</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>No way to fix other than the patch.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/IdoPesok/zsa/security/advisories/GHSA-wjmj-h3xc-hxp8">https://github.com/IdoPesok/zsa/security/advisories/GHSA-wjmj-h3xc-hxp8</a></li>
<li><a href="https://github.com/IdoPesok/zsa/commit/86b86b282bde6780963f62406cc8bc65f2c86f3a">https://github.com/IdoPesok/zsa/commit/86b86b282bde6780963f62406cc8bc65f2c86f3a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37162">https://nvd.nist.gov/vuln/detail/CVE-2024-37162</a></li>
<li><a href="https://github.com/advisories/GHSA-wjmj-h3xc-hxp8">https://github.com/advisories/GHSA-wjmj-h3xc-hxp8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjmj-h3xc-hxp8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-06T22:58:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@jmondi/url-to-png] Arbitrary file read via Playwright's screenshot feature exploiting file wrapper]]></title>
        <id>https://github.com/advisories/GHSA-665w-mwrr-77q3</id>
        <link href="https://github.com/advisories/GHSA-665w-mwrr-77q3"/>
        <updated>2024-06-10T20:22:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users of url-to-png. Please see <a href="https://github.com/jasonraimondi/url-to-png/issues/47">https://github.com/jasonraimondi/url-to-png/issues/47</a></p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/jasonraimondi/url-to-png/releases/tag/v2.0.3">v2.0.3</a> requires input url to be of protocol <code>http</code> or <code>https</code> </p>
<h3 id="workarounds">Workarounds</h3>
<p>Requires upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jasonraimondi/url-to-png/issues/47">https://github.com/jasonraimondi/url-to-png/issues/47</a></li>
<li><a href="https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf">https://github.com/user-attachments/files/15536336/Arbitrary.File.Read.via.Playwright.s.Screenshot.Feature.Exploiting.File.Wrapper.pdf</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jasonraimondi/url-to-png/security/advisories/GHSA-665w-mwrr-77q3">https://github.com/jasonraimondi/url-to-png/security/advisories/GHSA-665w-mwrr-77q3</a></li>
<li><a href="https://github.com/jasonraimondi/url-to-png/issues/47">https://github.com/jasonraimondi/url-to-png/issues/47</a></li>
<li><a href="https://github.com/advisories/GHSA-665w-mwrr-77q3">https://github.com/advisories/GHSA-665w-mwrr-77q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-665w-mwrr-77q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T13:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[effect] Withdrawn Advisory: OS Command Injection in effect]]></title>
        <id>https://github.com/advisories/GHSA-6hr9-4692-fch9</id>
        <link href="https://github.com/advisories/GHSA-6hr9-4692-fch9"/>
        <updated>2024-06-04T18:25:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="withdrawn-advisory">Withdrawn Advisory</h2>
<p>This advisory has been withdrawn because the <a href="https://www.npmjs.com/package/effect">npm package effect</a>, for which alerts were issued, does not correspond with <a href="https://github.com/Javascipt/effect">https://github.com/Javascipt/effect</a>, the repository with the vulnerable code. <a href="https://github.com/Javascipt/effect">https://github.com/Javascipt/effect</a> is not in any <a href="https://docs.github.com/en/code-security/security-advisories/working-with-global-security-advisories-from-the-github-advisory-database/about-the-github-advisory-database#github-reviewed-advisories">supported ecosystem</a>.</p>
<p>Additionally, the CVE Numbering Authority that issued the CVE for CVE-2020-7624 has updated <a href="https://snyk.io/vuln/SNYK-JS-EFFECT-564256">their advisory</a> stating that "This was deemed not a vulnerability."</p>
<h2 id="original-description">Original Description</h2>
<p>effect through 1.0.4 is vulnerable to Command Injection. It allows execution of arbitrary command via the options argument.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7624">https://nvd.nist.gov/vuln/detail/CVE-2020-7624</a></li>
<li><a href="https://github.com/Javascipt/effect/blob/master/helper.js#L24,">https://github.com/Javascipt/effect/blob/master/helper.js#L24,</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-EFFECT-564256">https://snyk.io/vuln/SNYK-JS-EFFECT-564256</a></li>
<li><a href="https://github.com/advisories/GHSA-6hr9-4692-fch9">https://github.com/advisories/GHSA-6hr9-4692-fch9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hr9-4692-fch9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-10T23:45:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus is soft-locked by providing a string value to random string util]]></title>
        <id>https://github.com/advisories/GHSA-632p-p495-25m5</id>
        <link href="https://github.com/advisories/GHSA-632p-p495-25m5"/>
        <updated>2024-06-04T17:53:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="describe-the-bug">Describe the Bug</h3>
<p>Providing a non-numeric length value to the random string generation utility will create a memory issue breaking the capability to generate random strings platform wide. This creates a denial of service situation where logged in sessions can no longer be refreshed as sessions depend on the capability to generate a random session ID.</p>
<h3 id="to-reproduce">To Reproduce</h3>
<ol>
<li>Test if the endpoint is working and accessible, <code>GET http://localhost:8055/utils/random/string</code></li>
<li>Do a bad request <code>GET http://localhost:8055/utils/random/string?length=foo</code></li>
<li>After this all calls to <code>GET http://localhost:8055/utils/random/string</code> will return an empty string instead of a random string</li>
<li>In this error situation you'll see authentication refreshes fail for the app and api.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This counts as an unauthenticated denial of service attack vector so this impacts all unpatched instances reachable over the internet.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-632p-p495-25m5">https://github.com/directus/directus/security/advisories/GHSA-632p-p495-25m5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36128">https://nvd.nist.gov/vuln/detail/CVE-2024-36128</a></li>
<li><a href="https://github.com/directus/directus/commit/7d2a1392f43613094de700062aba168a9400dd3b">https://github.com/directus/directus/commit/7d2a1392f43613094de700062aba168a9400dd3b</a></li>
<li><a href="https://github.com/advisories/GHSA-632p-p495-25m5">https://github.com/advisories/GHSA-632p-p495-25m5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-632p-p495-25m5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T17:53:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[js-deobfuscator] javascript-deobfuscator crafted payload can lead to code execution]]></title>
        <id>https://github.com/advisories/GHSA-9p6p-8v9r-8c9m</id>
        <link href="https://github.com/advisories/GHSA-9p6p-8v9r-8c9m"/>
        <updated>2024-06-04T15:13:56.000Z</updated>
        <content type="html"><![CDATA[<p>javascript-deobfuscator removes common JavaScript obfuscation techniques. Crafted payloads targeting expression simplification can lead to code execution. This issue has been patched in version 1.1.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ben-sb/javascript-deobfuscator/security/advisories/GHSA-9p6p-8v9r-8c9m">https://github.com/ben-sb/javascript-deobfuscator/security/advisories/GHSA-9p6p-8v9r-8c9m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36120">https://nvd.nist.gov/vuln/detail/CVE-2024-36120</a></li>
<li><a href="https://github.com/ben-sb/javascript-deobfuscator/commit/630d3caec83d5f31c5f7a07e6fadf613d06699d6">https://github.com/ben-sb/javascript-deobfuscator/commit/630d3caec83d5f31c5f7a07e6fadf613d06699d6</a></li>
<li><a href="https://github.com/advisories/GHSA-9p6p-8v9r-8c9m">https://github.com/advisories/GHSA-9p6p-8v9r-8c9m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p6p-8v9r-8c9m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-04T15:13:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@wangeditor/editor] wangEditor was discovered to contain a cross-site scripting (XSS) vulnerability via the image upload function]]></title>
        <id>https://github.com/advisories/GHSA-9hfw-cvf4-5x25</id>
        <link href="https://github.com/advisories/GHSA-9hfw-cvf4-5x25"/>
        <updated>2024-06-04T00:38:13.000Z</updated>
        <content type="html"><![CDATA[<p>There is a cross-site scripting (XSS) issue in wangEditor via the image upload function in version 4.7.11. This issue has been fixed in version 4.7.12.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25037">https://nvd.nist.gov/vuln/detail/CVE-2022-25037</a></li>
<li><a href="https://github.com/wangeditor-team/wangEditor/issues/3870">https://github.com/wangeditor-team/wangEditor/issues/3870</a></li>
<li><a href="https://gist.github.com/Mdxjj/5cf0a31e8abf24ed688ceb5b3543516d">https://gist.github.com/Mdxjj/5cf0a31e8abf24ed688ceb5b3543516d</a></li>
<li><a href="https://github.com/wangeditor-team/wangEditor/issues/3872">https://github.com/wangeditor-team/wangEditor/issues/3872</a></li>
<li><a href="https://github.com/wangeditor-team/wangEditor/commit/6257a2e166346913c34ac5cfb31b6a46e9544c5a">https://github.com/wangeditor-team/wangEditor/commit/6257a2e166346913c34ac5cfb31b6a46e9544c5a</a></li>
<li><a href="https://github.com/advisories/GHSA-9hfw-cvf4-5x25">https://github.com/advisories/GHSA-9hfw-cvf4-5x25</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hfw-cvf4-5x25</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-31T18:31:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ip] ip SSRF improper categorization in isPublic]]></title>
        <id>https://github.com/advisories/GHSA-2p57-rm9w-gvfp</id>
        <link href="https://github.com/advisories/GHSA-2p57-rm9w-gvfp"/>
        <updated>2024-06-02T22:29:30.000Z</updated>
        <content type="html"><![CDATA[<p>The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29415">https://nvd.nist.gov/vuln/detail/CVE-2024-29415</a></li>
<li><a href="https://github.com/indutny/node-ip/issues/150">https://github.com/indutny/node-ip/issues/150</a></li>
<li><a href="https://github.com/indutny/node-ip/pull/143">https://github.com/indutny/node-ip/pull/143</a></li>
<li><a href="https://github.com/indutny/node-ip/pull/144">https://github.com/indutny/node-ip/pull/144</a></li>
<li><a href="https://github.com/advisories/GHSA-2p57-rm9w-gvfp">https://github.com/advisories/GHSA-2p57-rm9w-gvfp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p57-rm9w-gvfp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-02T22:29:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mysql2] mysql2 vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-pmh2-wpjm-fj45</id>
        <link href="https://github.com/advisories/GHSA-pmh2-wpjm-fj45"/>
        <updated>2024-06-06T16:49:04.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package mysql2 before 3.9.8 are vulnerable to Prototype Pollution due to improper user input sanitization passed to fields and tables when using nestTables.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21512">https://nvd.nist.gov/vuln/detail/CVE-2024-21512</a></li>
<li><a href="https://github.com/sidorares/node-mysql2/pull/2702">https://github.com/sidorares/node-mysql2/pull/2702</a></li>
<li><a href="https://github.com/sidorares/node-mysql2/commit/efe3db527a2c94a63c2d14045baba8dfefe922bc">https://github.com/sidorares/node-mysql2/commit/efe3db527a2c94a63c2d14045baba8dfefe922bc</a></li>
<li><a href="https://gist.github.com/domdomi3/e9f0f9b9b1ed6bfbbc0bea87c5ca1e4a">https://gist.github.com/domdomi3/e9f0f9b9b1ed6bfbbc0bea87c5ca1e4a</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6861580">https://security.snyk.io/vuln/SNYK-JS-MYSQL2-6861580</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-7176010">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-7176010</a></li>
<li><a href="https://github.com/advisories/GHSA-pmh2-wpjm-fj45">https://github.com/advisories/GHSA-pmh2-wpjm-fj45</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmh2-wpjm-fj45</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T18:34:32.000Z</published>
    </entry>
</feed>