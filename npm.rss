<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-04-03T10:01:29.369Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[jquery-file-upload] jQuery-Upload-File XSS in fileNameStr]]></title>
        <id>https://github.com/advisories/GHSA-43x9-7hfv-mxrf</id>
        <link href="https://github.com/advisories/GHSA-43x9-7hfv-mxrf"/>
        <updated>2024-04-02T20:31:04.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability in the fileNameStr parameter of jQuery-Upload-File v4.0.11 allows attackers to execute arbitrary web scripts or HTML via a crafted file with a Javascript payload in the file name.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37504">https://nvd.nist.gov/vuln/detail/CVE-2021-37504</a></li>
<li><a href="https://github.com/hayageek/jquery-upload-file/blob/master/js/jquery.uploadfile.js#L469">https://github.com/hayageek/jquery-upload-file/blob/master/js/jquery.uploadfile.js#L469</a></li>
<li><a href="https://github.com/advisories/GHSA-43x9-7hfv-mxrf">https://github.com/advisories/GHSA-43x9-7hfv-mxrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43x9-7hfv-mxrf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-26T00:00:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jplayer] jplayer Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3jcq-cwr7-6332</id>
        <link href="https://github.com/advisories/GHSA-3jcq-cwr7-6332"/>
        <updated>2024-04-02T14:07:58.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple cross-site scripting (XSS) vulnerabilities in actionscript/Jplayer.as in the Flash SWF component (jplayer.swf) in jPlayer before 2.3.0 allow remote attackers to inject arbitrary web script or HTML via the (1) jQuery or (2) id parameters, a different vulnerability than CVE-2013-1942 and CVE-2013-2023, as demonstrated by using the alert function in the jQuery parameter.  NOTE: these are the same parameters as CVE-2013-1942, but the fix for CVE-2013-1942 uses a blacklist for the jQuery parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-2022">https://nvd.nist.gov/vuln/detail/CVE-2013-2022</a></li>
<li><a href="https://github.com/happyworm/jPlayer/commit/c5fe17bb4459164bd59153b57248cf94b8867373">https://github.com/happyworm/jPlayer/commit/c5fe17bb4459164bd59153b57248cf94b8867373</a></li>
<li><a href="http://marc.info/?l=oss-security&amp;m=136570964825921&amp;w=2">http://marc.info/?l=oss-security&amp;m=136570964825921&amp;w=2</a></li>
<li><a href="http://marc.info/?l=oss-security&amp;m=136726705917858&amp;w=2">http://marc.info/?l=oss-security&amp;m=136726705917858&amp;w=2</a></li>
<li><a href="http://marc.info/?l=oss-security&amp;m=136773622321563&amp;w=2">http://marc.info/?l=oss-security&amp;m=136773622321563&amp;w=2</a></li>
<li><a href="http://seclists.org/fulldisclosure/2013/Apr/192">http://seclists.org/fulldisclosure/2013/Apr/192</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2013/06/27/7">http://www.openwall.com/lists/oss-security/2013/06/27/7</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2013/07/04/5">http://www.openwall.com/lists/oss-security/2013/07/04/5</a></li>
<li><a href="https://github.com/jplayer/jPlayer/commit/c5fe17bb4459164bd59153b57248cf94b8867373">https://github.com/jplayer/jPlayer/commit/c5fe17bb4459164bd59153b57248cf94b8867373</a></li>
<li><a href="http://www.jplayer.org/2.3.0/release-notes">http://www.jplayer.org/2.3.0/release-notes</a></li>
<li><a href="https://github.com/advisories/GHSA-3jcq-cwr7-6332">https://github.com/advisories/GHSA-3jcq-cwr7-6332</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jcq-cwr7-6332</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T04:39:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mootools] MooTools Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-v63q-hgqc-qvpg</id>
        <link href="https://github.com/advisories/GHSA-v63q-hgqc-qvpg"/>
        <updated>2024-04-02T14:07:07.000Z</updated>
        <content type="html"><![CDATA[<p>MooTools is a collection of JavaScript utilities for JavaScript developers. All known versions include a CSS selector parser that is vulnerable to Regular Expression Denial of Service (ReDoS). An attack requires that an attacker can inject a string into a CSS selector at runtime, which is quite common with e.g. jQuery CSS selectors. No patches are available for this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32821">https://nvd.nist.gov/vuln/detail/CVE-2021-32821</a></li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2020-345-redos-mootools">https://securitylab.github.com/advisories/GHSL-2020-345-redos-mootools</a></li>
<li><a href="https://github.com/advisories/GHSA-v63q-hgqc-qvpg">https://github.com/advisories/GHSA-v63q-hgqc-qvpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v63q-hgqc-qvpg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-03T18:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express-cart] express-cart allows any user to create an admin user]]></title>
        <id>https://github.com/advisories/GHSA-hr89-w7p6-pjmq</id>
        <link href="https://github.com/advisories/GHSA-hr89-w7p6-pjmq"/>
        <updated>2024-04-01T22:03:24.000Z</updated>
        <content type="html"><![CDATA[<p>Express-Cart before 1.1.6 allows remote attackers to create an admin user via an <code>/admin/setup</code> Referer header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-12457">https://nvd.nist.gov/vuln/detail/CVE-2018-12457</a></li>
<li><a href="https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b">https://github.com/mrvautin/expressCart/commit/baccaae9b0b72f00b10c5453ca00231340ad3e3b</a></li>
<li><a href="https://hackerone.com/reports/343626">https://hackerone.com/reports/343626</a></li>
<li><a href="https://www.npmjs.com/package/express-cart?activeTab=versions">https://www.npmjs.com/package/express-cart?activeTab=versions</a></li>
<li><a href="https://github.com/advisories/GHSA-hr89-w7p6-pjmq">https://github.com/advisories/GHSA-hr89-w7p6-pjmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr89-w7p6-pjmq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:49:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express-cart] express-cart unrestricted file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4w62-cq5r-5mmq</id>
        <link href="https://github.com/advisories/GHSA-4w62-cq5r-5mmq"/>
        <updated>2024-04-01T22:03:21.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted file upload (RCE) in express-cart module before 1.1.7 allows a privileged user to gain access in the hosting machine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-3758">https://nvd.nist.gov/vuln/detail/CVE-2018-3758</a></li>
<li><a href="https://hackerone.com/reports/343726">https://hackerone.com/reports/343726</a></li>
<li><a href="https://github.com/mrvautin/expressCart/commit/65b18cfe426fa217aa6ada1d4162891883137893">https://github.com/mrvautin/expressCart/commit/65b18cfe426fa217aa6ada1d4162891883137893</a></li>
<li><a href="https://github.com/advisories/GHSA-4w62-cq5r-5mmq">https://github.com/advisories/GHSA-4w62-cq5r-5mmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4w62-cq5r-5mmq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[formstone] Formstone Vulnerable to Reflected XSS]]></title>
        <id>https://github.com/advisories/GHSA-wc29-h54q-q8qx</id>
        <link href="https://github.com/advisories/GHSA-wc29-h54q-q8qx"/>
        <updated>2024-04-01T22:02:55.000Z</updated>
        <content type="html"><![CDATA[<p>Formstone &lt;=1.4.16 is vulnerable to a Reflected Cross-Site Scripting (XSS) vulnerability caused by improper validation of user supplied input in the <code>upload-target.php</code> and <code>upload-chunked.php</code> files. A remote attacker could exploit this vulnerability using a specially crafted URL to execute a script in a victim's Web browser within the security context of the hosting Web site once the URL is clicked or visited. An attacker could use this vulnerability to steal the victim's cookie-based authentication credentials, force malware execution, user redirection and others.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26768">https://nvd.nist.gov/vuln/detail/CVE-2020-26768</a></li>
<li><a href="https://github.com/Formstone/Formstone/issues/286">https://github.com/Formstone/Formstone/issues/286</a></li>
<li><a href="https://github.com/Formstone/Formstone/commit/b067f31f5f6a0acd3ade4fd6dccae6e3633caa02">https://github.com/Formstone/Formstone/commit/b067f31f5f6a0acd3ade4fd6dccae6e3633caa02</a></li>
<li><a href="https://github.com/advisories/GHSA-wc29-h54q-q8qx">https://github.com/advisories/GHSA-wc29-h54q-q8qx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wc29-h54q-q8qx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:38:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@kindspells/astro-shield] In Astro-Shield, setting a correct `integrity` attribute to injected code allows to bypass the allow-lists]]></title>
        <id>https://github.com/advisories/GHSA-c4gr-q97g-ppwc</id>
        <link href="https://github.com/advisories/GHSA-c4gr-q97g-ppwc"/>
        <updated>2024-04-01T20:33:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions from 1.2.0 to 1.3.1 of Astro-Shield allow to bypass the allow-lists for cross-origin resources by introducing valid <code>integrity</code> attributes to the injected code. This implies that the injected SRI hash would be added to the generated CSP header, which would lead the browser to believe that the injected resource is legit.</p>
<p>To exploit this vulnerability, the attacker needs to first inject code into the rendered pages by exploiting other not-related potential vulnerabilities.</p>
<h3 id="patches">Patches</h3>
<p>Version <a href="https://github.com/kindspells/astro-shield/releases/tag/1.3.2">1.3.2</a> provides a patch.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>To not use the middleware functionality of Astro-Shield.</li>
<li>To use the middleware functionality of Astro-Shield ONLY for content that cannot be controlled in any way by external users.</li>
</ul>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/kindspells/astro-shield/security/advisories/GHSA-c4gr-q97g-ppwc">https://github.com/kindspells/astro-shield/security/advisories/GHSA-c4gr-q97g-ppwc</a></li>
<li><a href="https://github.com/kindspells/astro-shield/commit/1221019306f501bf5fa9bcfb5a23a2321d34ba0a">https://github.com/kindspells/astro-shield/commit/1221019306f501bf5fa9bcfb5a23a2321d34ba0a</a></li>
<li><a href="https://github.com/kindspells/astro-shield/commit/5ae8b8ef4f681d3a81431ee7e79d5dec545c6e1f">https://github.com/kindspells/astro-shield/commit/5ae8b8ef4f681d3a81431ee7e79d5dec545c6e1f</a></li>
<li><a href="https://github.com/kindspells/astro-shield/releases/tag/1.3.2">https://github.com/kindspells/astro-shield/releases/tag/1.3.2</a></li>
<li><a href="https://github.com/advisories/GHSA-c4gr-q97g-ppwc">https://github.com/advisories/GHSA-c4gr-q97g-ppwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c4gr-q97g-ppwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-04-01T20:33:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@electron/packager] @electron/packager's build process memory potentially leaked into final executable]]></title>
        <id>https://github.com/advisories/GHSA-34h3-8mw4-qw57</id>
        <link href="https://github.com/advisories/GHSA-34h3-8mw4-qw57"/>
        <updated>2024-03-29T20:16:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A random segment of ~1-10kb of Node.js heap memory allocated either side of a known buffer will be leaked into the final executable. This memory <em>could</em> contain sensitive information such as environment variables, secrets files, etc.</p>
<h3 id="patches">Patches</h3>
<p>This issue is patched in 18.3.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>No workarounds, please update to a patched version of <code>@electron/packager</code> immediately if impacated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/packager/security/advisories/GHSA-34h3-8mw4-qw57">https://github.com/electron/packager/security/advisories/GHSA-34h3-8mw4-qw57</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29900">https://nvd.nist.gov/vuln/detail/CVE-2024-29900</a></li>
<li><a href="https://github.com/electron/packager/commit/d421d4bd3ced889a4143c5c3ab6d95e3be249eee">https://github.com/electron/packager/commit/d421d4bd3ced889a4143c5c3ab6d95e3be249eee</a></li>
<li><a href="https://github.com/advisories/GHSA-34h3-8mw4-qw57">https://github.com/advisories/GHSA-34h3-8mw4-qw57</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-34h3-8mw4-qw57</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-29T20:16:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@workos-inc/authkit-nextjs] @workos-inc/authkit-nextjs session replay vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-35w3-6qhc-474v</id>
        <link href="https://github.com/advisories/GHSA-35w3-6qhc-474v"/>
        <updated>2024-03-29T20:16:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A user can reuse an expired session by controlling the <code>x-workos-session</code> header.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/workos/authkit-nextjs/releases/tag/v0.4.2">https://github.com/workos/authkit-nextjs/releases/tag/v0.4.2</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/workos/authkit-nextjs/security/advisories/GHSA-35w3-6qhc-474v">https://github.com/workos/authkit-nextjs/security/advisories/GHSA-35w3-6qhc-474v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29901">https://nvd.nist.gov/vuln/detail/CVE-2024-29901</a></li>
<li><a href="https://github.com/workos/authkit-nextjs/commit/6c3f4f3179d66cbb15de3962792083ff3b244a01">https://github.com/workos/authkit-nextjs/commit/6c3f4f3179d66cbb15de3962792083ff3b244a01</a></li>
<li><a href="https://github.com/workos/authkit-nextjs/releases/tag/v0.4.2">https://github.com/workos/authkit-nextjs/releases/tag/v0.4.2</a></li>
<li><a href="https://github.com/advisories/GHSA-35w3-6qhc-474v">https://github.com/advisories/GHSA-35w3-6qhc-474v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-35w3-6qhc-474v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-29T20:16:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@kindspells/astro-shield] Content-Security-Policy header generation in middleware could be compromised by malicious injections]]></title>
        <id>https://github.com/advisories/GHSA-w387-5qqw-7g8m</id>
        <link href="https://github.com/advisories/GHSA-w387-5qqw-7g8m"/>
        <updated>2024-03-29T19:04:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the following conditions are met:</p>
<ul>
<li>Automated CSP headers generation for SSR content is enabled</li>
<li>The web application serves content that can be partially controlled by external users</li>
</ul>
<p>Then it is possible that the CSP headers generation feature might be "allow-listing" malicious injected resources like inlined JS, or references to external malicious scripts.</p>
<h3 id="patches">Patches</h3>
<p>Available in version 1.3.0 .</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Do not enable CSP headers generation.</li>
<li>Use it only for dynamically generated content that cannot be controlled by external users in any way.</li>
</ul>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/KindSpells/astro-shield/security/advisories/GHSA-w387-5qqw-7g8m">https://github.com/KindSpells/astro-shield/security/advisories/GHSA-w387-5qqw-7g8m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29896">https://nvd.nist.gov/vuln/detail/CVE-2024-29896</a></li>
<li><a href="https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d">https://github.com/KindSpells/astro-shield/commit/41b84576d37fa486a57005ea297658d0bc38566d</a></li>
<li><a href="https://github.com/KindSpells/astro-shield/commit/ad3abf5577bae9be420b7ddf376337a5b8817869">https://github.com/KindSpells/astro-shield/commit/ad3abf5577bae9be420b7ddf376337a5b8817869</a></li>
<li><a href="https://github.com/KindSpells/astro-shield/compare/1.2.0...1.3.0">https://github.com/KindSpells/astro-shield/compare/1.2.0...1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-w387-5qqw-7g8m">https://github.com/advisories/GHSA-w387-5qqw-7g8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w387-5qqw-7g8m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-29T19:03:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web3-utils] web3-utils Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2g4c-8fpm-c46v</id>
        <link href="https://github.com/advisories/GHSA-2g4c-8fpm-c46v"/>
        <updated>2024-03-27T21:57:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact:</h3>
<p>The mergeDeep() function in the web3-utils package has been identified for Prototype Pollution vulnerability. An attacker has the ability to modify an object's prototype, which could result in changing the behavior of all objects that inherit from the impacted prototype by providing carefully crafted input to function.</p>
<h3 id="patches">Patches:</h3>
<p>It has been fixed in web3-utils version 4.2.1 so all packages and apps depending on web3-utils &gt;=4.0.1 and &lt;=4.2.0 should upgrade to web3-utils 4.2.1.</p>
<h3 id="workarounds">Workarounds:</h3>
<p>None</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/web3/web3.js/security/advisories/GHSA-2g4c-8fpm-c46v">https://github.com/web3/web3.js/security/advisories/GHSA-2g4c-8fpm-c46v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21505">https://nvd.nist.gov/vuln/detail/CVE-2024-21505</a></li>
<li><a href="https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80">https://github.com/web3/web3.js/commit/8ed041c6635d807b3da8960ad49e125e3d1b0e80</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337">https://security.snyk.io/vuln/SNYK-JS-WEB3UTILS-6229337</a></li>
<li><a href="https://github.com/advisories/GHSA-2g4c-8fpm-c46v">https://github.com/advisories/GHSA-2g4c-8fpm-c46v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2g4c-8fpm-c46v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-27T21:57:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling iframes]]></title>
        <id>https://github.com/advisories/GHSA-438c-3975-5x3f</id>
        <link href="https://github.com/advisories/GHSA-438c-3975-5x3f"/>
        <updated>2024-03-26T21:23:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A&nbsp;<a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a>&nbsp;vulnerability was discovered in TinyMCE’s content insertion code.  This allowed <code>iframe</code> elements containing malicious code to execute when inserted into the editor.  These <code>iframe</code> elements are restricted in their permissions by same-origin browser protections, but could still trigger operations such as downloading of malicious assets.</p>
<h3 id="fix">Fix</h3>
<p>TinyMCE 6.8.1 introduced a new <code>sandbox_iframes</code> boolean option which adds the <code>sandbox=""</code> attribute to every <code>iframe</code> element by default when enabled. This will prevent cross-origin, and in special cases same-origin, XSS by embedded resources in <code>iframe</code> elements. From TinyMCE 7.0.0 onwards the default value of this option is <code>true</code>.</p>
<p>In TinyMCE 7.0.0 a new <code>sandbox_iframes_exclusions</code> option was also added, allowing a list of domains to be specified that should be excluded from having the&nbsp;<code>sandbox=""</code>&nbsp;attribute applied when the&nbsp;<code>sandbox_iframes</code>&nbsp;option is enabled. By default, this option is set to an array of domains that are provided in embed code by popular websites. To sandbox <code>iframe</code> elements from every domain, set this option to <code>[]</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The HTTP Content-Security-Policy (CSP) <code>frame-src</code> or <code>object-src</code> can be configured to restrict or block the loading of unauthorized URLS.  Refer to the <a href="https://www.tiny.cloud/docs/tinymce/latest/tinymce-and-csp/">TinyMCE Content Security Policy Guide</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">TinyMCE 6.8.1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true">TinyMCE 7.0.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f">https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true</a></li>
<li><a href="https://github.com/advisories/GHSA-438c-3975-5x3f">https://github.com/advisories/GHSA-438c-3975-5x3f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-438c-3975-5x3f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T21:23:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling external SVG files through Object or Embed elements]]></title>
        <id>https://github.com/advisories/GHSA-5359-pvf2-pw78</id>
        <link href="https://github.com/advisories/GHSA-5359-pvf2-pw78"/>
        <updated>2024-03-26T21:23:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A <a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s content loading and content inserting code. A SVG image could be loaded though an <code>object</code> or <code>embed</code> element and that image could potentially contain a XSS payload.</p>
<h3 id="fix">Fix</h3>
<p>TinyMCE 6.8.1 introduced a new <code>convert_unsafe_embeds</code> option to automatically convert <code>object</code> and <code>embed</code> elements respective of their <code>type</code> attribute.  From TinyMCE 7.0.0 onwards, the <code>convert_unsafe_embeds</code> option is enabled by default.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using TinyMCE 6.8.1 or higher, set <code>convert_unsafe_embeds</code> to true. For any earlier versions, a custom NodeFilter is recommended to remove or modify any <code>object</code> or <code>embed</code> elements. This can be added using the <code>editor.parser.addNodeFilter</code> and <code>editor.serializer.addNodeFilter</code> APIs.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>Tiny Technologies would like to thank Toni Huttunen of <a href="https://www.fraktal.fi/">Fraktal Oy</a> for discovering this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">TinyMCE 6.8.1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true">TinyMCE 7.0.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78">https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true</a></li>
<li><a href="https://github.com/advisories/GHSA-5359-pvf2-pw78">https://github.com/advisories/GHSA-5359-pvf2-pw78</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5359-pvf2-pw78</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T21:23:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] Express.js Open Redirect in malformed URLs]]></title>
        <id>https://github.com/advisories/GHSA-rv95-896h-c2vc</id>
        <link href="https://github.com/advisories/GHSA-rv95-896h-c2vc"/>
        <updated>2024-03-27T21:47:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>
<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href="https://github.com/pillarjs/encodeurl">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>
<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>
<a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>
<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a>
<a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a>
<a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>
<li><a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a></li>
<li><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a></li>
<li><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>
<li><a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>
<li><a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29041">https://nvd.nist.gov/vuln/detail/CVE-2024-29041</a></li>
<li><a href="https://github.com/advisories/GHSA-rv95-896h-c2vc">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv95-896h-c2vc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:40:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] Express.js Open Redirect in malformed URLs]]></title>
        <id>https://github.com/advisories/GHSA-rv95-896h-c2vc</id>
        <link href="https://github.com/advisories/GHSA-rv95-896h-c2vc"/>
        <updated>2024-03-27T21:47:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of Express.js prior to 4.19.2 and pre-release alpha and beta versions before 5.0.0-beta.3 are affected by an open redirect vulnerability using malformed URLs.</p>
<p>When a user of Express performs a redirect using a user-provided URL Express performs an encode <a href="https://github.com/pillarjs/encodeurl">using <code>encodeurl</code></a> on the contents before passing it to the <code>location</code> header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list.</p>
<p>The main method impacted is <code>res.location()</code> but this is also called from within <code>res.redirect()</code>.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a>
<a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></p>
<p>An initial fix went out with <code>express@4.19.0</code>, we then patched a feature regression in <code>4.19.1</code> and added improved handling for the bypass in <code>4.19.2</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The fix for this involves pre-parsing the url string with either <code>require('node:url').parse</code> or <code>new URL</code>. These are steps you can take on your own before passing the user input string to <code>res.location</code> or <code>res.redirect</code>.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a>
<a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a>
<a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc">https://github.com/expressjs/express/security/advisories/GHSA-rv95-896h-c2vc</a></li>
<li><a href="https://github.com/koajs/koa/issues/1800">https://github.com/koajs/koa/issues/1800</a></li>
<li><a href="https://github.com/expressjs/express/pull/5539">https://github.com/expressjs/express/pull/5539</a></li>
<li><a href="https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd">https://github.com/expressjs/express/commit/0867302ddbde0e9463d0564fea5861feb708c2dd</a></li>
<li><a href="https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94">https://github.com/expressjs/express/commit/0b746953c4bd8e377123527db11f9cd866e39f94</a></li>
<li><a href="https://expressjs.com/en/4x/api.html#res.location">https://expressjs.com/en/4x/api.html#res.location</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29041">https://nvd.nist.gov/vuln/detail/CVE-2024-29041</a></li>
<li><a href="https://github.com/advisories/GHSA-rv95-896h-c2vc">https://github.com/advisories/GHSA-rv95-896h-c2vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv95-896h-c2vc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:40:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX missing normalization of the protocol in URLs allows bypassing forbidden protocols]]></title>
        <id>https://github.com/advisories/GHSA-3wc5-fcw2-2329</id>
        <link href="https://github.com/advisories/GHSA-3wc5-fcw2-2329"/>
        <updated>2024-03-25T22:32:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Code that uses KaTeX's <code>trust</code> option, specifically that provides a function to block-list certain URL protocols, can be fooled by URLs in malicious inputs that use uppercase characters in the protocol. In particular, this can allow for malicious input to generate <code>javascript:</code> links in the output, even if the <code>trust</code> function tries to forbid this protocol via <code>trust: (context) =&gt; context.protocol !== 'javascript'</code>.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Allow-list instead of block protocols in your <code>trust</code> function.</li>
<li>Manually lowercase <code>context.protocol</code> via <code>context.protocol.toLowerCase()</code> before attempting to check for certain protocols.</li>
<li>Avoid use of or turn off the <code>trust</code> option.</li>
</ul>
<h3 id="details">Details</h3>
<p>KaTeX did not normalize the <code>protocol</code> entry of the <code>context</code> object provided to a user-specified <code>trust</code>-function, so it could be a mix of lowercase and/or uppercase letters.</p>
<p>It is generally better to allow-list by protocol, in which case this would normally not be an issue. But in some cases, you might want to block-list, and the <a href="https://katex.org/docs/options.html">KaTeX documentation</a> even provides such an example:</p>
<blockquote>
<p>Allow all commands but forbid specific protocol: <code>trust: (context) =&gt; context.protocol !== 'file'</code></p>
</blockquote>
<p>Currently KaTeX internally sees <code>file:</code> and <code>File:</code> URLs as different protocols, so <code>context.protocol</code> can be <code>file</code> or <code>File</code>, so the above check does not suffice.  A simple workaround would be:</p>
<blockquote>
<p><code>trust: (context) =&gt; context.protocol.toLowerCase() !== 'file'</code></p>
</blockquote>
<p>Most URL parsers normalize the scheme to lowercase. For example, <a href="https://datatracker.ietf.org/doc/html/rfc3986#section-3.1">RFC3986</a> says:</p>
<blockquote>
<p>Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. An implementation should accept uppercase letters as equivalent to lowercase in scheme names (e.g., allow "HTTP" as well as "http") for the sake of robustness but should only produce lowercase scheme names for consistency.</p>
</blockquote>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-3wc5-fcw2-2329</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de">https://github.com/KaTeX/KaTeX/commit/fc5af64183a3ceb9be9d1c23a275999a728593de</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28246">https://nvd.nist.gov/vuln/detail/CVE-2024-28246</a></li>
<li><a href="https://github.com/advisories/GHSA-3wc5-fcw2-2329">https://github.com/advisories/GHSA-3wc5-fcw2-2329</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wc5-fcw2-2329</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's `\includegraphics` does not escape filename]]></title>
        <id>https://github.com/advisories/GHSA-f98w-7cxr-ff2h</id>
        <link href="https://github.com/advisories/GHSA-f98w-7cxr-ff2h"/>
        <updated>2024-03-25T22:32:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\includegraphics</code> that runs arbitrary JavaScript, or generate invalid HTML.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Avoid use of or turn off the <code>trust</code> option, or set it to forbid <code>\includegraphics</code> commands.</li>
<li>Forbid inputs containing the substring <code>"\\includegraphics"</code>.</li>
<li>Sanitize HTML output from KaTeX.</li>
</ul>
<h3 id="details">Details</h3>
<p><code>\includegraphics</code> did not properly quote its filename argument, allowing it to generate invalid or malicious HTML that runs scripts.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-f98w-7cxr-ff2h</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770">https://github.com/KaTeX/KaTeX/commit/c5897fcd1f73da9612a53e6b5544f1d776e17770</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28245">https://nvd.nist.gov/vuln/detail/CVE-2024-28245</a></li>
<li><a href="https://github.com/advisories/GHSA-f98w-7cxr-ff2h">https://github.com/advisories/GHSA-f98w-7cxr-ff2h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f98w-7cxr-ff2h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's maxExpand bypassed by Unicode sub/superscripts]]></title>
        <id>https://github.com/advisories/GHSA-cvr6-37gx-v8wc</id>
        <link href="https://github.com/advisories/GHSA-cvr6-37gx-v8wc"/>
        <updated>2024-03-25T22:32:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\def</code> or <code>\newcommand</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Forbid inputs containing any of the characters <code>₊₋₌₍₎₀₁₂₃₄₅₆₇₈₉ₐₑₕᵢⱼₖₗₘₙₒₚᵣₛₜᵤᵥₓᵦᵧᵨᵩᵪ⁺⁻⁼⁽⁾⁰¹²³⁴⁵⁶⁷⁸⁹ᵃᵇᶜᵈᵉᵍʰⁱʲᵏˡᵐⁿᵒᵖʳˢᵗᵘʷˣʸᶻᵛᵝᵞᵟᵠᵡ</code> before passing them to KaTeX.
(There is no easy workaround for the auto-render extension.)</p>
<h3 id="details">Details</h3>
<p>KaTeX supports an option named <code>maxExpand</code> which aims to prevent infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. Unfortunately, <a href="https://github.com/KaTeX/KaTeX/commit/d8fc35e6a97f8e561c723b93ad275cf5a7f3094a">support for "Unicode (sub|super)script characters"</a> allows an attacker to bypass this limit. Each sub/superscript group instantiated a separate Parser with its own limit on macro executions, without inheriting the current count of macro executions from its parent. This has been corrected in KaTeX v0.16.10.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-cvr6-37gx-v8wc</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2">https://github.com/KaTeX/KaTeX/commit/085e21b5da05414efefa932570e7201a7c70e5b2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28244">https://nvd.nist.gov/vuln/detail/CVE-2024-28244</a></li>
<li><a href="https://github.com/advisories/GHSA-cvr6-37gx-v8wc">https://github.com/advisories/GHSA-cvr6-37gx-v8wc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvr6-37gx-v8wc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[katex] KaTeX's maxExpand bypassed by `\edef`]]></title>
        <id>https://github.com/advisories/GHSA-64fm-8hw2-v72w</id>
        <link href="https://github.com/advisories/GHSA-64fm-8hw2-v72w"/>
        <updated>2024-03-25T22:31:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>KaTeX users who render untrusted mathematical expressions could encounter malicious input using <code>\edef</code> that causes a near-infinite loop, despite setting <code>maxExpand</code> to avoid such loops. This can be used as an availability attack, where e.g. a client rendering another user's KaTeX input will be unable to use the site due to memory overflow, tying up the main thread, or stack overflow.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to KaTeX v0.16.10 to remove this vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Forbid inputs containing the substring <code>"\\edef"</code> before passing them to KaTeX.
(There is no easy workaround for the auto-render extension.)</p>
<h3 id="details">Details</h3>
<p>KaTeX supports an option named <code>maxExpand</code> which prevents infinitely recursive macros from consuming all available memory and/or triggering a stack overflow error. However, what counted as an "expansion" is a single macro expanding to any number of tokens. The expand-and-define TeX command <code>\edef</code> can be used to build up an exponential number of tokens using only a linear number of expansions according to this definition, e.g. by repeatedly doubling the previous definition. This has been corrected in KaTeX v0.16.10, where every expanded token in an <code>\edef</code> counts as an expansion.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue or security advisory in the <a href="https://github.com/KaTeX/KaTeX/">KaTeX repository</a></li>
<li>Email us at <a href="mailto:katex-security@mit.edu">katex-security@mit.edu</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w">https://github.com/KaTeX/KaTeX/security/advisories/GHSA-64fm-8hw2-v72w</a></li>
<li><a href="https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34">https://github.com/KaTeX/KaTeX/commit/e88b4c357f978b1bca8edfe3297f0aa309bcbe34</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28243">https://nvd.nist.gov/vuln/detail/CVE-2024-28243</a></li>
<li><a href="https://github.com/advisories/GHSA-64fm-8hw2-v72w">https://github.com/advisories/GHSA-64fm-8hw2-v72w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64fm-8hw2-v72w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:38:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@oneuptime/common-server] OneUptime Vulnerable to a Privilege Escalation via Local Storage Key Manipulation]]></title>
        <id>https://github.com/advisories/GHSA-246p-xmg8-wmcq</id>
        <link href="https://github.com/advisories/GHSA-246p-xmg8-wmcq"/>
        <updated>2024-03-26T13:40:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>A security vulnerability exists in oneuptime's local storage handling, where a regular user can escalate privileges by modifying the <code>is_master_admin</code> key to <code>true</code>. This allows unauthorized access to administrative functionalities.</p>
<h2 id="details">Details</h2>
<p>The vulnerability lies in the improper validation of client-side stored data within the web application. Specifically, the <code>is_master_admin</code> key, stored in the local storage of the browser, can be manipulated by an attacker. By changing this key from false to true, the application grants administrative privileges to the user, without proper server-side validation. </p>
<h2 id="poc">POC</h2>
<p>(I am using Firefox Developer to demonstrate this vulnerability)
Log in as a normal user. Open developer tools (hit F12), click Storage, then Local Storage. Modify the <code>is_master_admin</code> key from <code>false</code> to <code>true</code>.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability represents a high security risk as it allows any authenticated user to gain administrative privileges through client-side manipulation. Most of the admin previlages were disabled except the user list. Where an attacker could see all the list of users who signed up to OneUptome. </p>
<h2 id="patch">Patch</h2>
<p>This has been patched in 7.0.1815</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq">https://github.com/OneUptime/oneuptime/security/advisories/GHSA-246p-xmg8-wmcq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29194">https://nvd.nist.gov/vuln/detail/CVE-2024-29194</a></li>
<li><a href="https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c">https://github.com/OneUptime/oneuptime/commit/14016d23d834038dd65d3a96cf71af04b556a32c</a></li>
<li><a href="https://github.com/advisories/GHSA-246p-xmg8-wmcq">https://github.com/advisories/GHSA-246p-xmg8-wmcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-246p-xmg8-wmcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:37:27.000Z</published>
    </entry>
</feed>