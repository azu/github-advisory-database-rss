<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2022-09-06T07:16:14.240Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[mongoose] automattic/mongoose vulnerable to Prototype pollution via Schema.path]]></title>
        <id>https://github.com/advisories/GHSA-f825-f98c-gj3g</id>
        <link href="https://github.com/advisories/GHSA-f825-f98c-gj3g"/>
        <updated>2022-09-02T03:02:20.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The <code>Schema.path()</code> function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2564">https://nvd.nist.gov/vuln/detail/CVE-2022-2564</a></li>
<li><a href="https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8">https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8</a></li>
<li><a href="https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd">https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-f825-f98c-gj3g">https://github.com/advisories/GHSA-f825-f98c-gj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f825-f98c-gj3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-29T00:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-opcua] node-opcua DoS when bypassing limitations for excessive memory consumption]]></title>
        <id>https://github.com/advisories/GHSA-vh4f-fgpp-x8x2</id>
        <link href="https://github.com/advisories/GHSA-vh4f-fgpp-x8x2"/>
        <updated>2022-09-01T22:23:21.000Z</updated>
        <content type="html"><![CDATA[<p>The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) when bypassing the limitations for excessive memory consumption by sending multiple <code>CloseSession</code> requests with the <code>deleteSubscription</code> parameter equal to <code>False</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24375">https://nvd.nist.gov/vuln/detail/CVE-2022-24375</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/pull/1182">https://github.com/node-opcua/node-opcua/pull/1182</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/commit/3fd46ec156e7718a506be41f3916310b6bdd0407">https://github.com/node-opcua/node-opcua/commit/3fd46ec156e7718a506be41f3916310b6bdd0407</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/commit/7b5044b3f5866fbedc3efabd05e407352c07bd2f">https://github.com/node-opcua/node-opcua/commit/7b5044b3f5866fbedc3efabd05e407352c07bd2f</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988725">https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988725</a></li>
<li><a href="https://github.com/advisories/GHSA-vh4f-fgpp-x8x2">https://github.com/advisories/GHSA-vh4f-fgpp-x8x2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vh4f-fgpp-x8x2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-25T00:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-opcua] node-opcua DoS vulnerability via message with memory allocation that exceeds v8's memory limit]]></title>
        <id>https://github.com/advisories/GHSA-qpgc-xh7j-52q8</id>
        <link href="https://github.com/advisories/GHSA-qpgc-xh7j-52q8"/>
        <updated>2022-09-01T22:19:49.000Z</updated>
        <content type="html"><![CDATA[<p>The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) by sending a specifically crafted OPC UA message with a special OPC UA NodeID, when the requested memory allocation exceeds the v8â€™s memory limit.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25231">https://nvd.nist.gov/vuln/detail/CVE-2022-25231</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/pull/1182">https://github.com/node-opcua/node-opcua/pull/1182</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/commit/7b5044b3f5866fbedc3efabd05e407352c07bd2f">https://github.com/node-opcua/node-opcua/commit/7b5044b3f5866fbedc3efabd05e407352c07bd2f</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988724">https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988724</a></li>
<li><a href="https://github.com/advisories/GHSA-qpgc-xh7j-52q8">https://github.com/advisories/GHSA-qpgc-xh7j-52q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qpgc-xh7j-52q8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mdx-mermaid] Improper Control of Generation of Code ('Code Injection') in mdx-mermaid]]></title>
        <id>https://github.com/advisories/GHSA-rvgm-35jw-q628</id>
        <link href="https://github.com/advisories/GHSA-rvgm-35jw-q628"/>
        <updated>2022-08-31T22:26:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitary javascript injection</p>
<p>Modify any mermaid code blocks with the following code and the code inside will execute when the component is loaded by MDXjs</p>
<pre><code>` + (function () {
  // Put Javascript code here
  return ''
}()) + `
</code></pre>
<p>The block below shows a valid mermaid code block</p>
<pre><code class="language-md">```mermaid
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
```
</code></pre>
<p>The same block but with the exploit added</p>
<pre><code class="language-md">```mermaid
` + (function () {
  alert('vulnerable')
  return ''
}()) + `
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
```
</code></pre>
<h3 id="patches">Patches</h3>
<p>1.3.0 and 2.0.0-rc2</p>
<h3 id="workarounds">Workarounds</h3>
<p>None known</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628">https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36036">https://nvd.nist.gov/vuln/detail/CVE-2022-36036</a></li>
<li><a href="https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a">https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a</a></li>
<li><a href="https://github.com/advisories/GHSA-rvgm-35jw-q628">https://github.com/advisories/GHSA-rvgm-35jw-q628</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvgm-35jw-q628</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-08-31T22:26:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mdx-mermaid] Improper Control of Generation of Code ('Code Injection') in mdx-mermaid]]></title>
        <id>https://github.com/advisories/GHSA-rvgm-35jw-q628</id>
        <link href="https://github.com/advisories/GHSA-rvgm-35jw-q628"/>
        <updated>2022-08-31T22:26:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitary javascript injection</p>
<p>Modify any mermaid code blocks with the following code and the code inside will execute when the component is loaded by MDXjs</p>
<pre><code>` + (function () {
  // Put Javascript code here
  return ''
}()) + `
</code></pre>
<p>The block below shows a valid mermaid code block</p>
<pre><code class="language-md">```mermaid
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
```
</code></pre>
<p>The same block but with the exploit added</p>
<pre><code class="language-md">```mermaid
` + (function () {
  alert('vulnerable')
  return ''
}()) + `
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
```
</code></pre>
<h3 id="patches">Patches</h3>
<p>1.3.0 and 2.0.0-rc2</p>
<h3 id="workarounds">Workarounds</h3>
<p>None known</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628">https://github.com/sjwall/mdx-mermaid/security/advisories/GHSA-rvgm-35jw-q628</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36036">https://nvd.nist.gov/vuln/detail/CVE-2022-36036</a></li>
<li><a href="https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a">https://github.com/sjwall/mdx-mermaid/commit/f2b99386660fd13316823529c3f1314ebbcdfd2a</a></li>
<li><a href="https://github.com/advisories/GHSA-rvgm-35jw-q628">https://github.com/advisories/GHSA-rvgm-35jw-q628</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvgm-35jw-q628</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-08-31T22:26:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nitrado.js] Polynomial regular expression used on uncontrolled data in nitrado.js]]></title>
        <id>https://github.com/advisories/GHSA-vqc4-v8hc-h2jg</id>
        <link href="https://github.com/advisories/GHSA-vqc4-v8hc-h2jg"/>
        <updated>2022-08-31T22:23:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Possible ReDoS with lib input of <code>{{</code> and with many repetitions of <code>{{|</code>.</p>
<h3 id="patches">Patches</h3>
<p>Patched in all versions above <code>0.2.5</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>No known work arounds.</p>
<h3 id="references">References</h3>
<ul>
<li>OWASP: <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">Regular expression Denial of Service - ReDoS</a></li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/ReDoS">ReDoS</a>.</li>
<li>Wikipedia: <a href="https://en.wikipedia.org/wiki/Time_complexity">Time complexity</a>.</li>
<li>James Kirrage, Asiri Rathnayake, Hayo Thielecke: <a href="http://www.cs.bham.ac.uk/~hxt/research/reg-exp-sec.pdf">Static Analysis for Regular Expression Denial-of-Service Attack</a>.</li>
<li>Common Weakness Enumeration: <a href="https://cwe.mitre.org/data/definitions/1333.html">CWE-1333</a>.</li>
<li>Common Weakness Enumeration: <a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cainthebest/nitrado.js/security/advisories/GHSA-vqc4-v8hc-h2jg">https://github.com/cainthebest/nitrado.js/security/advisories/GHSA-vqc4-v8hc-h2jg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36034">https://nvd.nist.gov/vuln/detail/CVE-2022-36034</a></li>
<li><a href="https://github.com/cainthebest/nitrado.js/blob/v0.2.5/CHANGELOG.md">https://github.com/cainthebest/nitrado.js/blob/v0.2.5/CHANGELOG.md</a></li>
<li><a href="https://github.com/advisories/GHSA-vqc4-v8hc-h2jg">https://github.com/advisories/GHSA-vqc4-v8hc-h2jg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vqc4-v8hc-h2jg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-31T22:23:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[strapi-plugin-ezforms] Captcha Bypass in strapi-plugin-ezforms]]></title>
        <id>https://github.com/advisories/GHSA-8mgq-6r2q-82w9</id>
        <link href="https://github.com/advisories/GHSA-8mgq-6r2q-82w9"/>
        <updated>2022-08-30T20:54:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Users using any captcha providers</p>
<h3 id="patches">Patches</h3>
<blockquote>
<p>0.1.0</p>
</blockquote>
<h3 id="references">References</h3>
<p><a href="https://github.com/excl-networks/strapi-plugin-ezforms/issues/15">Issue</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/excl-networks/strapi-plugin-ezforms/security/advisories/GHSA-8mgq-6r2q-82w9">https://github.com/excl-networks/strapi-plugin-ezforms/security/advisories/GHSA-8mgq-6r2q-82w9</a></li>
<li><a href="https://github.com/excl-networks/strapi-plugin-ezforms/issues/15">https://github.com/excl-networks/strapi-plugin-ezforms/issues/15</a></li>
<li><a href="https://github.com/excl-networks/strapi-plugin-ezforms/commit/a8372190b7122e5dda32d5b71b2513fd5352656a">https://github.com/excl-networks/strapi-plugin-ezforms/commit/a8372190b7122e5dda32d5b71b2513fd5352656a</a></li>
<li><a href="https://github.com/advisories/GHSA-8mgq-6r2q-82w9">https://github.com/advisories/GHSA-8mgq-6r2q-82w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8mgq-6r2q-82w9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:54:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-opcua] Uncontrolled Resource Consumption in node-opcua]]></title>
        <id>https://github.com/advisories/GHSA-4hr4-pjjh-2q2w</id>
        <link href="https://github.com/advisories/GHSA-4hr4-pjjh-2q2w"/>
        <updated>2022-08-30T20:51:44.000Z</updated>
        <content type="html"><![CDATA[<p>The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21208">https://nvd.nist.gov/vuln/detail/CVE-2022-21208</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/pull/1149">https://github.com/node-opcua/node-opcua/pull/1149</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/commit/33ca3bab4ab781392a2f8d8f5a14de9a0aa0e410">https://github.com/node-opcua/node-opcua/commit/33ca3bab4ab781392a2f8d8f5a14de9a0aa0e410</a></li>
<li><a href="https://github.com/node-opcua/node-opcua/commit/dbcb5d5191118c22ee9c89332a94b94e6553d76b">https://github.com/node-opcua/node-opcua/commit/dbcb5d5191118c22ee9c89332a94b94e6553d76b</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988723">https://security.snyk.io/vuln/SNYK-JS-NODEOPCUA-2988723</a></li>
<li><a href="https://github.com/advisories/GHSA-4hr4-pjjh-2q2w">https://github.com/advisories/GHSA-4hr4-pjjh-2q2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4hr4-pjjh-2q2w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-24T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Unexpected server crash in Next.js]]></title>
        <id>https://github.com/advisories/GHSA-wff4-fpwg-qqv3</id>
        <link href="https://github.com/advisories/GHSA-wff4-fpwg-qqv3"/>
        <updated>2022-08-30T20:38:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When specific requests are made to the Next.js server it can cause an <code>unhandledRejection</code> in the server which can crash the process to exit in specific Node.js versions with strict <code>unhandledRejection</code> handling. </p>
<ul>
<li><p>Affected: All of the following must be true to be affected by this CVE</p>
<ul>
<li>Node.js version above v15.0.0 being used with strict <code>unhandledRejection</code> exiting</li>
<li>Next.js version v12.2.3</li>
<li>Using next start or a <a href="https://nextjs.org/docs/advanced-features/custom-server">custom server</a></li>
</ul>
</li>
<li><p>Not affected: Deployments on Vercel (<a href="https://vercel.com/">vercel.com</a>) are not affected along with similar environments where <code>next-server</code> isn't being shared across requests.</p>
</li>
</ul>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/vercel/next.js/releases/tag/v12.2.4">https://github.com/vercel/next.js/releases/tag/v12.2.4</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-wff4-fpwg-qqv3">https://github.com/vercel/next.js/security/advisories/GHSA-wff4-fpwg-qqv3</a></li>
<li><a href="https://github.com/vercel/next.js/releases/tag/v12.2.4">https://github.com/vercel/next.js/releases/tag/v12.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-wff4-fpwg-qqv3">https://github.com/advisories/GHSA-wff4-fpwg-qqv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wff4-fpwg-qqv3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:38:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb] Cryptographically weak PRNG in `utils.generateUUID`]]></title>
        <id>https://github.com/advisories/GHSA-p4cc-w597-6cpm</id>
        <link href="https://github.com/advisories/GHSA-p4cc-w597-6cpm"/>
        <updated>2022-08-30T20:38:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="in-brief">In Brief</h3>
<p><code>utils.generateUUID</code>, a helper function available in essentially all versions of NodeBB (as far back as v1.0.1 and potentially earlier) used a cryptographically insecure Pseudo-random number generator (<code>Math.random()</code>), which meant that a specially crafted script combined with multiple invocations of the password reset functionality could enable an attacker to correctly calculate the reset code for an account they do not have access to.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability impacts all installations of NodeBB. The vulnerability allows for an attacker to take over any account without the involvement of the victim, and as such, the remediation should be applied immediately (either via NodeBB upgrade or cherry-pick of the specific changeset. Patches have been provided for both active branches of NodeBB (v2.x and v1.19.x)â€”please see below.</p>
<p>If you are already on v2.0.0 or v1.19.7, you can upgrade with no ill effects. The new version contains only the patch for this vulnerability.</p>
<p>The impact of this vulnerability is slightly lessened by the requirement that the target's email address must be known, <strong>and</strong> user emails are protected values in NodeBB. However, since NodeBB can be configured to display email addresses if the admin so wishes, and as email addresses can often by derived from other sources and/or guessed, the impact of this vulnerability is still fairly high.</p>
<h3 id="patches">Patches</h3>
<h4 id="v2x">v2.x</h4>
<p>The vulnerability has been patched in <a href="https://github.com/NodeBB/NodeBB/commit/e802fab87f94a13f397f04cfe6068f2f7ddf7888">https://github.com/NodeBB/NodeBB/commit/e802fab87f94a13f397f04cfe6068f2f7ddf7888</a>. You can cherry-pick this directly into your codebase.</p>
<h4 id="v119x">v1.19.x</h4>
<p>The vulnerability has been patched in 81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9. You can cherry-pick this directly into your codebase.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no known workaround, but the patch sets listed above will fully patch the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="http://cwe.mitre.org/data/definitions/338.html">CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Discuss it on <a href="community.nodebb.org/">our community forum</a></li>
<li>Email us at <a href="mailto:support@nodebb.org">support@nodebb.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NodeBB/NodeBB/security/advisories/GHSA-p4cc-w597-6cpm">https://github.com/NodeBB/NodeBB/security/advisories/GHSA-p4cc-w597-6cpm</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/commit/81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9">https://github.com/NodeBB/NodeBB/commit/81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9</a></li>
<li><a href="https://github.com/advisories/GHSA-p4cc-w597-6cpm">https://github.com/advisories/GHSA-p4cc-w597-6cpm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4cc-w597-6cpm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-30T20:38:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb] Cryptographically weak PRNG in `utils.generateUUID`]]></title>
        <id>https://github.com/advisories/GHSA-p4cc-w597-6cpm</id>
        <link href="https://github.com/advisories/GHSA-p4cc-w597-6cpm"/>
        <updated>2022-08-30T20:38:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="in-brief">In Brief</h3>
<p><code>utils.generateUUID</code>, a helper function available in essentially all versions of NodeBB (as far back as v1.0.1 and potentially earlier) used a cryptographically insecure Pseudo-random number generator (<code>Math.random()</code>), which meant that a specially crafted script combined with multiple invocations of the password reset functionality could enable an attacker to correctly calculate the reset code for an account they do not have access to.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability impacts all installations of NodeBB. The vulnerability allows for an attacker to take over any account without the involvement of the victim, and as such, the remediation should be applied immediately (either via NodeBB upgrade or cherry-pick of the specific changeset. Patches have been provided for both active branches of NodeBB (v2.x and v1.19.x)â€”please see below.</p>
<p>If you are already on v2.0.0 or v1.19.7, you can upgrade with no ill effects. The new version contains only the patch for this vulnerability.</p>
<p>The impact of this vulnerability is slightly lessened by the requirement that the target's email address must be known, <strong>and</strong> user emails are protected values in NodeBB. However, since NodeBB can be configured to display email addresses if the admin so wishes, and as email addresses can often by derived from other sources and/or guessed, the impact of this vulnerability is still fairly high.</p>
<h3 id="patches">Patches</h3>
<h4 id="v2x">v2.x</h4>
<p>The vulnerability has been patched in <a href="https://github.com/NodeBB/NodeBB/commit/e802fab87f94a13f397f04cfe6068f2f7ddf7888">https://github.com/NodeBB/NodeBB/commit/e802fab87f94a13f397f04cfe6068f2f7ddf7888</a>. You can cherry-pick this directly into your codebase.</p>
<h4 id="v119x">v1.19.x</h4>
<p>The vulnerability has been patched in 81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9. You can cherry-pick this directly into your codebase.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no known workaround, but the patch sets listed above will fully patch the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="http://cwe.mitre.org/data/definitions/338.html">CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Discuss it on <a href="community.nodebb.org/">our community forum</a></li>
<li>Email us at <a href="mailto:support@nodebb.org">support@nodebb.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NodeBB/NodeBB/security/advisories/GHSA-p4cc-w597-6cpm">https://github.com/NodeBB/NodeBB/security/advisories/GHSA-p4cc-w597-6cpm</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/commit/81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9">https://github.com/NodeBB/NodeBB/commit/81e3c1ba488d03371a5ce8d0ebb5c5803026e0f9</a></li>
<li><a href="https://github.com/advisories/GHSA-p4cc-w597-6cpm">https://github.com/advisories/GHSA-p4cc-w597-6cpm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4cc-w597-6cpm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-30T20:38:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[moment-timezone] Command Injection in moment-timezone]]></title>
        <id>https://github.com/advisories/GHSA-56x4-j7p9-fcf9</id>
        <link href="https://github.com/advisories/GHSA-56x4-j7p9-fcf9"/>
        <updated>2022-08-30T20:31:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All versions of moment-timezone from 0.1.0 contain build tasks vulnerable to command injection.</p>
<ul>
<li>if Alice uses tzdata pipeline to package moment-timezone on her own (for example via <code>grunt data:2014d</code>, where <code>2014d</code> stands for the version of the tzdata to be used from IANA's website),</li>
<li>and Alice let's Mallory select the version (<code>2014d</code> in our example), then Mallory can execute arbitrary commands on the machine running the grunt task, with the same privilege as the grunt task</li>
</ul>
<h4 id="am-i-affected">Am I affected?</h4>
<h5 id="do-you-build-custom-versions-of-moment-timezone-with-grunt">Do you build custom versions of moment-timezone with grunt?</h5>
<p>If no, you're not affected.</p>
<h5 id="do-you-allow-a-third-party-to-specify-which-particular-version-you-want-build">Do you allow a third party to specify which particular version you want build?</h5>
<p>If yes, you're vulnerable to command injection -- third party may execute arbitrary commands on the system running grunt task with the same privileges as grunt task.</p>
<h3 id="description">Description</h3>
<h4 id="command-injection-via-grunt-zdownloadjs-and-mitm-on-ianas-ftp-endpoint">Command Injection via grunt-zdownload.js and MITM on iana's ftp endpoint</h4>
<p>The <code>tasks/data-download.js</code> script takes in a parameter from grunt and uses it to form a command line which is then executed:</p>
<pre><code>6  module.exports = function (grunt) {
7      grunt.registerTask('data-download', '1. Download data from iana.org/time-zones.', function (version) {
8          version = version || 'latest';

10          var done  = this.async(),
11              src   = 'ftp://ftp.iana.org/tz/tzdata-latest.tar.gz',
12              curl  = path.resolve('temp/curl', version, 'data.tar.gz'),
13              dest  = path.resolve('temp/download', version);
...
24          exec('curl ' + src + ' -o ' + curl + ' &amp;&amp; cd ' + dest + ' &amp;&amp; gzip -dc ' + curl + ' | tar -xf -', function (err) {
</code></pre>
<p>Ordinarily, one one run this script using something like <code>grunt data-download:2014d</code>, in which case version would have the value <code>2014d</code>. However, if an attacker were to provide additional content on the command line, they would be able to execute arbitrary code</p>
<pre><code>root@e94ba0490b65:/usr/src/app/moment-timezone# grunt 'data-download:2014d ; echo flag&gt;/tmp/foo #'
\Running "data-download:2014d ; echo flag&gt;/tmp/foo #" (data-download) task
&gt;&gt; Downloading https://data.iana.org/time-zones/releases/tzdata2014d ; echo flag&gt;/tmp/foo #.tar.gz
&gt;&gt; Downloaded https://data.iana.org/time-zones/releases/tzdata2014d ; echo flag&gt;/tmp/foo #.tar.gz

Done.
root@e94ba0490b65:/usr/src/app/moment-timezone# cat /tmp/foo
flag
</code></pre>
<h4 id="command-injection-via-data-zdumpjs">Command Injection via data-zdump.js</h4>
<p>The <code>tasks/data-zdump.js</code> script reads a list of files present in a temporary directory (created by previous tasks), and for each one, assembles and executes a command line without sanitization. As a result, an attacker able to influence the contents of that directory could gain code execution. This attack is exacerbated by timezone data being downloaded via cleartext FTP (described above), but beyond that, an attacker at iana.org able to modify the timezone files could disrupt any systems that build moment-timezone.</p>
<pre><code>15              files     = grunt.file.expand({ filter : 'isFile', cwd : 'temp/zic/' + version }, '**/*');
...
27          function next () {
...
33              var file = files.pop(),
34                  src  = path.join(zicBase, file),
35                  dest = path.join(zdumpBase, file);
36              exec('zdump -v ' + src, { maxBuffer: 20*1024*1024 }, function (err, stdout) {
</code></pre>
<p>In this case, an attacker able to add a file to <code>temp/zic/2014d</code> (for example) with a filename like <code>Z; curl www.example.com</code> would influence the called to exec on line 36 and run arbitrary code. There are a few minor challenges in exploiting this, since the string needs to be a valid filename.</p>
<h4 id="command-injection-via-data-zicjs">Command Injection via data-zic.js</h4>
<p>Similar to the vulnerability in /tasks/data-download.js, the /tasks/data-zic.js script takes a version from the command line and uses it as part of a command line, executed without sanitization.</p>
<pre><code>10          var done  = this.async(),
11              dest  = path.resolve('temp/zic', version),
...
22              var file = files.shift(),
23                  src = path.resolve('temp/download', version, file);
24
25              exec('zic -d ' + dest + ' ' + src, function (err) {
</code></pre>
<p>As a result, an attacker able to influence that string can run arbitrary commands. Of course, it requires an attacker able to influence the command passed to grunt, so may be unlikely in practice.</p>
<pre><code>root@e94ba0490b65:/usr/src/app/moment-timezone# grunt 'data-zic:2014d; echo hi &gt; /tmp/evil; echo '
Running "data-zic:2014d; echo hi &gt; /tmp/evil; echo " (data-zic) task
exec: zid -d /usr/src/app/moment-timezone/temp/zic/2014d; echo hi &gt; /tmp/evil; echo  /usr/src/app/moment-timezone/temp/download/2014d; echo hi &gt; /tmp/evil; echo /africa
...

root@e94ba0490b65:/usr/src/app/moment-timezone# cat /tmp/evil
hi
</code></pre>
<h3 id="patches">Patches</h3>
<p>The supplied patch on top of 0.5.34 is applicable with minor tweaks to all affected versions. It switches <code>exec</code> to <code>execFile</code> so arbitrary bash fragments won't be executed any more.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://knowledge-base.secureflag.com/vulnerabilities/code_injection/os_command_injection_nodejs.html">https://knowledge-base.secureflag.com/vulnerabilities/code_injection/os_command_injection_nodejs.html</a></li>
<li><a href="https://auth0.com/blog/preventing-command-injection-attacks-in-node-js-apps/">https://auth0.com/blog/preventing-command-injection-attacks-in-node-js-apps/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/moment/moment-timezone/security/advisories/GHSA-56x4-j7p9-fcf9">https://github.com/moment/moment-timezone/security/advisories/GHSA-56x4-j7p9-fcf9</a></li>
<li><a href="https://github.com/moment/moment-timezone/commit/ce955a301ff372e8e9fb3a5b516620c60e7a082a">https://github.com/moment/moment-timezone/commit/ce955a301ff372e8e9fb3a5b516620c60e7a082a</a></li>
<li><a href="https://github.com/advisories/GHSA-56x4-j7p9-fcf9">https://github.com/advisories/GHSA-56x4-j7p9-fcf9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-56x4-j7p9-fcf9</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-08-30T20:31:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[moment-timezone] Cleartext Transmission of Sensitive Information in moment-timezone]]></title>
        <id>https://github.com/advisories/GHSA-v78c-4p63-2j6c</id>
        <link href="https://github.com/advisories/GHSA-v78c-4p63-2j6c"/>
        <updated>2022-08-30T20:28:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>if Alice uses <code>grunt data</code> (or <code>grunt release</code>) to prepare a custom-build, moment-timezone with the latest tzdata from IANA's website</li>
<li>and Mallory intercepts the request to IANA's unencrypted ftp server, Mallory can serve data which might exploit further stages of the moment-timezone tzdata pipeline, or potentially produce a tainted version of moment-timezone (practicality of such attacks is not proved)</li>
</ul>
<h3 id="patches">Patches</h3>
<p>Problem has been patched in version 0.5.35, patch should be applicable with minor modifications to all affected versions. The patch includes changing the FTP endpoint with an HTTPS endpoint.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Specify the exact version of tzdata (like <code>2014d</code>, full command being <code>grunt data:2014d</code>, then run the rest of the release tasks by hand), or just apply the patch before issuing the grunt command.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/moment/moment-timezone/security/advisories/GHSA-v78c-4p63-2j6c">https://github.com/moment/moment-timezone/security/advisories/GHSA-v78c-4p63-2j6c</a></li>
<li><a href="https://github.com/moment/moment-timezone/commit/7915ac567ab19700e44ad6b5d8ef0b85e48a9e75">https://github.com/moment/moment-timezone/commit/7915ac567ab19700e44ad6b5d8ef0b85e48a9e75</a></li>
<li><a href="https://github.com/advisories/GHSA-v78c-4p63-2j6c">https://github.com/advisories/GHSA-v78c-4p63-2j6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v78c-4p63-2j6c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:28:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mobiledoc-kit] Cross site scripting in mobiledoc-kit]]></title>
        <id>https://github.com/advisories/GHSA-hw2p-xqhq-3mjf</id>
        <link href="https://github.com/advisories/GHSA-hw2p-xqhq-3mjf"/>
        <updated>2022-08-30T20:21:23.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Reflected in GitHub repository bustle/mobiledoc-kit prior to 0.14.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2932">https://nvd.nist.gov/vuln/detail/CVE-2022-2932</a></li>
<li><a href="https://github.com/bustle/mobiledoc-kit/commit/f3fdaa5352904fd2a0b4247ccb0dbf68aad43b5a">https://github.com/bustle/mobiledoc-kit/commit/f3fdaa5352904fd2a0b4247ccb0dbf68aad43b5a</a></li>
<li><a href="https://huntr.dev/bounties/2-other-bustle/mobiledoc-kit">https://huntr.dev/bounties/2-other-bustle/mobiledoc-kit</a></li>
<li><a href="https://github.com/advisories/GHSA-hw2p-xqhq-3mjf">https://github.com/advisories/GHSA-hw2p-xqhq-3mjf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw2p-xqhq-3mjf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-23T00:00:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus vulnerable to unhandled exception on illegal filename_disk value]]></title>
        <id>https://github.com/advisories/GHSA-77qm-wvqq-fg79</id>
        <link href="https://github.com/advisories/GHSA-77qm-wvqq-fg79"/>
        <updated>2022-08-30T20:18:49.000Z</updated>
        <content type="html"><![CDATA[<p>The Directus process can be aborted by having an authorized user update the <code>filename_disk</code> value to a folder and accessing that file through the <code>/assets</code> endpoint. </p>
<p>The vulnerability is patched and released in v9.15.0.</p>
<p>You can prevent this problem by making sure no (untrusted) non-admin users have permissions to update the <code>filename_disk</code> field on <code>directus_files</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open a Discussion in <a href="https://github.com/directus/directus/discussions">directus/directus</a></li>
<li>Email us at <a href="mailto:security@directus.io">security@directus.io</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>This vulnerability was first discovered and reported by Witold Gorecki.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-77qm-wvqq-fg79">https://github.com/directus/directus/security/advisories/GHSA-77qm-wvqq-fg79</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36031">https://nvd.nist.gov/vuln/detail/CVE-2022-36031</a></li>
<li><a href="https://github.com/advisories/GHSA-77qm-wvqq-fg79">https://github.com/advisories/GHSA-77qm-wvqq-fg79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-77qm-wvqq-fg79</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-30T20:18:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vitejs Vite before v2.9.13 vulnerable to directory traversal via crafted URL to victim's service]]></title>
        <id>https://github.com/advisories/GHSA-mv48-hcvh-8jj8</id>
        <link href="https://github.com/advisories/GHSA-mv48-hcvh-8jj8"/>
        <updated>2022-08-30T20:17:44.000Z</updated>
        <content type="html"><![CDATA[<p>Vitejs Vite before v2.9.13 was discovered to allow attackers to perform a directory traversal via a crafted URL to the victim's service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35204">https://nvd.nist.gov/vuln/detail/CVE-2022-35204</a></li>
<li><a href="https://github.com/vitejs/vite/issues/8498">https://github.com/vitejs/vite/issues/8498</a></li>
<li><a href="https://github.com/vitejs/vite/releases/tag/v2.9.13">https://github.com/vitejs/vite/releases/tag/v2.9.13</a></li>
<li><a href="https://github.com/vitejs/vite/releases/tag/v3.0.0-beta.4">https://github.com/vitejs/vite/releases/tag/v3.0.0-beta.4</a></li>
<li><a href="https://github.com/advisories/GHSA-mv48-hcvh-8jj8">https://github.com/advisories/GHSA-mv48-hcvh-8jj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mv48-hcvh-8jj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-19T00:00:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[git-it-electron] Command injection in git-it-electron]]></title>
        <id>https://github.com/advisories/GHSA-wjqc-j537-j9gj</id>
        <link href="https://github.com/advisories/GHSA-wjqc-j537-j9gj"/>
        <updated>2022-08-30T17:34:56.000Z</updated>
        <content type="html"><![CDATA[<p>Git-it through 4.4.0 allows OS command injection at the Branches Aren't Just For Birds challenge step. During the verification process, it attempts to run the reflog command followed by the current branch name (which is not sanitized for execution).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44685">https://nvd.nist.gov/vuln/detail/CVE-2021-44685</a></li>
<li><a href="https://github.com/dwisiswant0/advisory/issues/3">https://github.com/dwisiswant0/advisory/issues/3</a></li>
<li><a href="https://github.com/jlord/git-it-electron/releases">https://github.com/jlord/git-it-electron/releases</a></li>
<li><a href="https://advisory.dw1.io/3">https://advisory.dw1.io/3</a></li>
<li><a href="https://github.com/advisories/GHSA-wjqc-j537-j9gj">https://github.com/advisories/GHSA-wjqc-j537-j9gj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjqc-j537-j9gj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-12-08T00:01:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pg-native] Uncontrolled Resource Consumption in pg-native and libpq]]></title>
        <id>https://github.com/advisories/GHSA-j32j-2hxv-rqf7</id>
        <link href="https://github.com/advisories/GHSA-j32j-2hxv-rqf7"/>
        <updated>2022-08-25T21:20:48.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package pg-native; all versions of package libpq are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25852">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>
<li><a href="https://github.com/brianc/node-libpq/issues/84">https://github.com/brianc/node-libpq/issues/84</a></li>
<li><a href="https://github.com/brianc/node-libpq/pull/86">https://github.com/brianc/node-libpq/pull/86</a></li>
<li><a href="https://github.com/advisories/GHSA-j32j-2hxv-rqf7">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j32j-2hxv-rqf7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-06-18T00:00:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libpq] Uncontrolled Resource Consumption in pg-native and libpq]]></title>
        <id>https://github.com/advisories/GHSA-j32j-2hxv-rqf7</id>
        <link href="https://github.com/advisories/GHSA-j32j-2hxv-rqf7"/>
        <updated>2022-08-25T21:20:48.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package pg-native; all versions of package libpq are vulnerable to Denial of Service (DoS) when the addons attempt to cast the second argument to an array and fail. This happens for every non-array argument passed. <strong>Note:</strong> pg-native is a mere binding to npm's libpq library, which in turn has the addons and bindings to the actual C libpq library. This means that problems found in pg-native may transitively impact npm's libpq.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25852">https://nvd.nist.gov/vuln/detail/CVE-2022-25852</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366">https://snyk.io/vuln/SNYK-JS-LIBPQ-2392366</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365">https://snyk.io/vuln/SNYK-JS-PGNATIVE-2392365</a></li>
<li><a href="https://github.com/brianc/node-libpq/issues/84">https://github.com/brianc/node-libpq/issues/84</a></li>
<li><a href="https://github.com/brianc/node-libpq/pull/86">https://github.com/brianc/node-libpq/pull/86</a></li>
<li><a href="https://github.com/advisories/GHSA-j32j-2hxv-rqf7">https://github.com/advisories/GHSA-j32j-2hxv-rqf7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j32j-2hxv-rqf7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-06-18T00:00:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-editable-json-tree] React Editable Json Tree vulnerable to arbitrary code execution via function parsing]]></title>
        <id>https://github.com/advisories/GHSA-j3rv-w43q-f9x2</id>
        <link href="https://github.com/advisories/GHSA-j3rv-w43q-f9x2"/>
        <updated>2022-08-18T19:15:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Our library allows strings to be parsed as functions and stored as a specialized component, <a href="https://github.com/oxyno-zeta/react-editable-json-tree/blob/09a0ca97835b0834ad054563e2fddc6f22bc5d8c/src/components/JsonFunctionValue.js"><code>JsonFunctionValue</code></a>. To do this, Javascript's <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval"><code>eval</code></a> function was used to execute strings that begin with "function" as Javascript. This was an oversight that unfortunately allows arbitrary code to be executed if it exists as a value within the JSON structure being displayed. Given that this component may often be used to display data from arbitrary, untrusted sources, this is extremely dangerous.</p>
<p>One important note is that users who have defined a custom <a href="https://github.com/oxyno-zeta/react-editable-json-tree/tree/09a0ca97835b0834ad054563e2fddc6f22bc5d8c#onsubmitvalueparser"><code>onSubmitValueParser</code></a> callback prop on the <a href="https://github.com/oxyno-zeta/react-editable-json-tree/blob/09a0ca97835b0834ad054563e2fddc6f22bc5d8c/src/JsonTree.js"><code>JsonTree</code></a> component should be <em><strong>unaffected</strong></em>. This vulnerability exists in the default <code>onSubmitValueParser</code> prop which calls <a href="https://github.com/oxyno-zeta/react-editable-json-tree/blob/master/src/utils/parse.js#L30"><code>parse</code></a>.</p>
<h3 id="patches">Patches</h3>
<p>We have decided on a two-pronged approach to patching this vulnerability:</p>
<ol>
<li>Create a patch update that adds a workaround <strong>which is not enabled by default</strong> to preserve backwards-compatibility</li>
<li>On the next major update, <strong>we will enable this workaround by default</strong></li>
</ol>
<p>The workaround we have decided on is adding a prop to <code>JsonTree</code> called <code>allowFunctionEvaluation</code>. This prop will be set to <code>true</code> in v2.2.2, so you can upgrade without fear of losing backwards-compatibility.</p>
<p>We have also implemented additional security measures as we know many people may not read the details of this vulnerability, and we want to do the best we can to keep you protected. In v2.2.2, we switched from using <code>eval</code> to using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"><code>Function</code></a> to construct anonymous functions. This is better than <code>eval</code> for the following reasons:</p>
<ul>
<li>Arbitrary code should not be able to execute immediately, since the <code>Function</code> constructor explicitly <em>only creates</em> anonymous functions</li>
<li>Functions are created without local closures, so they only have access to the global scope</li>
</ul>
<p>This change has brought a <em>slight</em> potential for breaking backwards-compatibility if users for some reason were relying on side-effects of our usage of <code>eval</code>, but that is beyond intended behavior, so we have decided to go ahead with this change and consider it a non-breaking change.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As mentioned above, there are a few scenarios you must consider:</p>
<p>If you use:</p>
<ul>
<li><strong>Version <code>&lt;2.2.2</code></strong>, you must upgrade as soon as possible.</li>
<li><strong>Version <code>^2.2.2</code></strong>, you must explicitly set <code>JsonTree</code>'s <code>allowFunctionEvaluation</code> prop to <code>false</code> to fully mitigate this vulnerability.</li>
<li><strong>Version <code>&gt;=3.0.0</code></strong>, <code>allowFunctionEvaluation</code> is already set to <code>false</code> by default, so no further steps are necessary.</li>
</ul>
<h3 id="references">References</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/oxyno-zeta/react-editable-json-tree">GitHub repo</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/oxyno-zeta/react-editable-json-tree/security/advisories/GHSA-j3rv-w43q-f9x2">https://github.com/oxyno-zeta/react-editable-json-tree/security/advisories/GHSA-j3rv-w43q-f9x2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36010">https://nvd.nist.gov/vuln/detail/CVE-2022-36010</a></li>
<li><a href="https://github.com/oxyno-zeta/react-editable-json-tree/releases/tag/2.2.2">https://github.com/oxyno-zeta/react-editable-json-tree/releases/tag/2.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-j3rv-w43q-f9x2">https://github.com/advisories/GHSA-j3rv-w43q-f9x2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3rv-w43q-f9x2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-18T19:15:28.000Z</published>
    </entry>
</feed>