<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-08-30T23:01:25.790Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2023-08-30T22:49:50.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2023-08-30T22:49:50.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apollo-server-core] Prevent logging invalid header values]]></title>
        <id>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</id>
        <link href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx"/>
        <updated>2023-08-30T21:24:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<h3 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h3>
<p>Apollo Server can log sensitive information (Studio API keys) if they are passed incorrectly (with leading/trailing whitespace) or if they have any characters that are invalid as part of a header value.</p>
<h3 id="who-is-impacted">Who is impacted?</h3>
<p>Users who (all of the below):</p>
<ul>
<li>use either the schema reporting or usage reporting feature</li>
<li>use an Apollo Studio API key which has invalid header values</li>
<li>use the default fetcher (<code>node-fetch</code>) or configured their own <code>node-fetch</code> fetcher</li>
</ul>
<p>The following node snippet can test whether your API key has invalid header values. This code is taken directly from <code>node-fetch@2</code>'s header value validation code.</p>
<pre><code class="language-js">const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
if (invalidHeaderCharRegex.test('&lt;YOUR_API_KEY&gt;')) {
  console.log('potentially affected');
}
console.log('unaffected');
</code></pre>
<p>If the provided API key is not a valid header value, whenever Apollo Server uses that API key in a request (to Studio, for example), <code>node-fetch</code> will throw an error <em>which contains the header value</em>. This error is logged in various ways depending on the user's configuration, but most likely the console or some configured logging service.</p>
<h3 id="patches">Patches</h3>
<p>This problem is patched in the latest version of Apollo Server as soon as this advisory is published.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Try retrieving a new API key from Studio. Note: this may not work if the invalid character is not part of the secret (it may be derived from identifiers like graph name, user name).</li>
<li>Override the <code>fetcher</code> </li>
<li>Disable schema reporting and/or usage reporting</li>
</ul>
<h3 id="solution">Solution</h3>
<ul>
<li>Apollo Server will now call <code>.trim()</code> on incoming API keys in order to eliminate leading/trailing whitespace and log a warning when it does so.</li>
<li>Apollo Server will now perform the same validation of API keys as <code>node-fetch@2</code> performs on header values on startup. Apollo Server will throw an error on startup (i.e., fail to start completely) and notify the user their API key is invalid along with the offending characters.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314">https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575">https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575</a></li>
<li><a href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-08-30T21:24:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apollo-server-core] Prevent logging invalid header values]]></title>
        <id>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</id>
        <link href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx"/>
        <updated>2023-08-30T21:24:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<h3 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h3>
<p>Apollo Server can log sensitive information (Studio API keys) if they are passed incorrectly (with leading/trailing whitespace) or if they have any characters that are invalid as part of a header value.</p>
<h3 id="who-is-impacted">Who is impacted?</h3>
<p>Users who (all of the below):</p>
<ul>
<li>use either the schema reporting or usage reporting feature</li>
<li>use an Apollo Studio API key which has invalid header values</li>
<li>use the default fetcher (<code>node-fetch</code>) or configured their own <code>node-fetch</code> fetcher</li>
</ul>
<p>The following node snippet can test whether your API key has invalid header values. This code is taken directly from <code>node-fetch@2</code>'s header value validation code.</p>
<pre><code class="language-js">const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
if (invalidHeaderCharRegex.test('&lt;YOUR_API_KEY&gt;')) {
  console.log('potentially affected');
}
console.log('unaffected');
</code></pre>
<p>If the provided API key is not a valid header value, whenever Apollo Server uses that API key in a request (to Studio, for example), <code>node-fetch</code> will throw an error <em>which contains the header value</em>. This error is logged in various ways depending on the user's configuration, but most likely the console or some configured logging service.</p>
<h3 id="patches">Patches</h3>
<p>This problem is patched in the latest version of Apollo Server as soon as this advisory is published.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Try retrieving a new API key from Studio. Note: this may not work if the invalid character is not part of the secret (it may be derived from identifiers like graph name, user name).</li>
<li>Override the <code>fetcher</code> </li>
<li>Disable schema reporting and/or usage reporting</li>
</ul>
<h3 id="solution">Solution</h3>
<ul>
<li>Apollo Server will now call <code>.trim()</code> on incoming API keys in order to eliminate leading/trailing whitespace and log a warning when it does so.</li>
<li>Apollo Server will now perform the same validation of API keys as <code>node-fetch@2</code> performs on header values on startup. Apollo Server will throw an error on startup (i.e., fail to start completely) and notify the user their API key is invalid along with the offending characters.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314">https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575">https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575</a></li>
<li><a href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-08-30T21:24:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/server] Prevent logging invalid header values]]></title>
        <id>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</id>
        <link href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx"/>
        <updated>2023-08-30T21:24:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<h3 id="what-kind-of-vulnerability-is-it">What kind of vulnerability is it?</h3>
<p>Apollo Server can log sensitive information (Studio API keys) if they are passed incorrectly (with leading/trailing whitespace) or if they have any characters that are invalid as part of a header value.</p>
<h3 id="who-is-impacted">Who is impacted?</h3>
<p>Users who (all of the below):</p>
<ul>
<li>use either the schema reporting or usage reporting feature</li>
<li>use an Apollo Studio API key which has invalid header values</li>
<li>use the default fetcher (<code>node-fetch</code>) or configured their own <code>node-fetch</code> fetcher</li>
</ul>
<p>The following node snippet can test whether your API key has invalid header values. This code is taken directly from <code>node-fetch@2</code>'s header value validation code.</p>
<pre><code class="language-js">const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
if (invalidHeaderCharRegex.test('&lt;YOUR_API_KEY&gt;')) {
  console.log('potentially affected');
}
console.log('unaffected');
</code></pre>
<p>If the provided API key is not a valid header value, whenever Apollo Server uses that API key in a request (to Studio, for example), <code>node-fetch</code> will throw an error <em>which contains the header value</em>. This error is logged in various ways depending on the user's configuration, but most likely the console or some configured logging service.</p>
<h3 id="patches">Patches</h3>
<p>This problem is patched in the latest version of Apollo Server as soon as this advisory is published.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Try retrieving a new API key from Studio. Note: this may not work if the invalid character is not part of the secret (it may be derived from identifiers like graph name, user name).</li>
<li>Override the <code>fetcher</code> </li>
<li>Disable schema reporting and/or usage reporting</li>
</ul>
<h3 id="solution">Solution</h3>
<ul>
<li>Apollo Server will now call <code>.trim()</code> on incoming API keys in order to eliminate leading/trailing whitespace and log a warning when it does so.</li>
<li>Apollo Server will now perform the same validation of API keys as <code>node-fetch@2</code> performs on header values on startup. Apollo Server will throw an error on startup (i.e., fail to start completely) and notify the user their API key is invalid along with the offending characters.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/apollographql/apollo-server/security/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314">https://github.com/apollographql/apollo-server/commit/2c8106c433c4add4b43e2e2b2f5c5c4887b17314</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575">https://github.com/apollographql/apollo-server/commit/d38b43bac88acdef4295759d7dcc3d4c348d9575</a></li>
<li><a href="https://github.com/advisories/GHSA-j5g3-5c8r-7qfx">https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j5g3-5c8r-7qfx</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-08-30T21:24:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongodb] MongoDB Driver may publish events containing authentication-related data]]></title>
        <id>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</id>
        <link href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7"/>
        <updated>2023-08-30T21:20:47.000Z</updated>
        <content type="html"><![CDATA[<p>Some MongoDB Drivers may erroneously publish events containing authentication-related data to a command listener configured by an application. The published events may contain security-sensitive data when specific authentication-related commands are executed.</p>
<p>Without due care, an application may inadvertently expose this sensitive information, e.g., by writing it to a log file. This issue only arises if an application enables the command listener feature (this is not enabled by default).</p>
<p>This issue affects the MongoDB C Driver 1.0.0 prior to 1.17.7, MongoDB PHP Driver 1.0.0 prior to 1.9.2, MongoDB Swift Driver 1.0.0 prior to 1.1.1, MongoDB Node.js Driver 3.6 prior to 3.6.10, MongoDB Node.js Driver 4.0 prior to 4.17.0 and MongoDB Node.js Driver 5.0 prior to 5.8.0. This issue also affects users of the MongoDB C++ Driver dependent on the C driver 1.0.0 prior to 1.17.7 (C++ driver prior to 3.7.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32050">https://nvd.nist.gov/vuln/detail/CVE-2021-32050</a></li>
<li><a href="https://jira.mongodb.org/browse/CDRIVER-3797">https://jira.mongodb.org/browse/CDRIVER-3797</a></li>
<li><a href="https://jira.mongodb.org/browse/CXX-2028">https://jira.mongodb.org/browse/CXX-2028</a></li>
<li><a href="https://jira.mongodb.org/browse/NODE-3356">https://jira.mongodb.org/browse/NODE-3356</a></li>
<li><a href="https://jira.mongodb.org/browse/PHPC-1869">https://jira.mongodb.org/browse/PHPC-1869</a></li>
<li><a href="https://jira.mongodb.org/browse/SWIFT-1229">https://jira.mongodb.org/browse/SWIFT-1229</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/pull/1235">https://github.com/mongodb/mongo-php-driver/pull/1235</a></li>
<li><a href="https://github.com/mongodb/mongo-swift-driver/pull/643">https://github.com/mongodb/mongo-swift-driver/pull/643</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748">https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748</a></li>
<li><a href="https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0">https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0</a></li>
<li><a href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7">https://github.com/advisories/GHSA-vxvm-qww3-2fh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongodb] MongoDB Driver may publish events containing authentication-related data]]></title>
        <id>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</id>
        <link href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7"/>
        <updated>2023-08-30T21:20:47.000Z</updated>
        <content type="html"><![CDATA[<p>Some MongoDB Drivers may erroneously publish events containing authentication-related data to a command listener configured by an application. The published events may contain security-sensitive data when specific authentication-related commands are executed.</p>
<p>Without due care, an application may inadvertently expose this sensitive information, e.g., by writing it to a log file. This issue only arises if an application enables the command listener feature (this is not enabled by default).</p>
<p>This issue affects the MongoDB C Driver 1.0.0 prior to 1.17.7, MongoDB PHP Driver 1.0.0 prior to 1.9.2, MongoDB Swift Driver 1.0.0 prior to 1.1.1, MongoDB Node.js Driver 3.6 prior to 3.6.10, MongoDB Node.js Driver 4.0 prior to 4.17.0 and MongoDB Node.js Driver 5.0 prior to 5.8.0. This issue also affects users of the MongoDB C++ Driver dependent on the C driver 1.0.0 prior to 1.17.7 (C++ driver prior to 3.7.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32050">https://nvd.nist.gov/vuln/detail/CVE-2021-32050</a></li>
<li><a href="https://jira.mongodb.org/browse/CDRIVER-3797">https://jira.mongodb.org/browse/CDRIVER-3797</a></li>
<li><a href="https://jira.mongodb.org/browse/CXX-2028">https://jira.mongodb.org/browse/CXX-2028</a></li>
<li><a href="https://jira.mongodb.org/browse/NODE-3356">https://jira.mongodb.org/browse/NODE-3356</a></li>
<li><a href="https://jira.mongodb.org/browse/PHPC-1869">https://jira.mongodb.org/browse/PHPC-1869</a></li>
<li><a href="https://jira.mongodb.org/browse/SWIFT-1229">https://jira.mongodb.org/browse/SWIFT-1229</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/pull/1235">https://github.com/mongodb/mongo-php-driver/pull/1235</a></li>
<li><a href="https://github.com/mongodb/mongo-swift-driver/pull/643">https://github.com/mongodb/mongo-swift-driver/pull/643</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748">https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748</a></li>
<li><a href="https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0">https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0</a></li>
<li><a href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7">https://github.com/advisories/GHSA-vxvm-qww3-2fh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongodb] MongoDB Driver may publish events containing authentication-related data]]></title>
        <id>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</id>
        <link href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7"/>
        <updated>2023-08-30T21:20:47.000Z</updated>
        <content type="html"><![CDATA[<p>Some MongoDB Drivers may erroneously publish events containing authentication-related data to a command listener configured by an application. The published events may contain security-sensitive data when specific authentication-related commands are executed.</p>
<p>Without due care, an application may inadvertently expose this sensitive information, e.g., by writing it to a log file. This issue only arises if an application enables the command listener feature (this is not enabled by default).</p>
<p>This issue affects the MongoDB C Driver 1.0.0 prior to 1.17.7, MongoDB PHP Driver 1.0.0 prior to 1.9.2, MongoDB Swift Driver 1.0.0 prior to 1.1.1, MongoDB Node.js Driver 3.6 prior to 3.6.10, MongoDB Node.js Driver 4.0 prior to 4.17.0 and MongoDB Node.js Driver 5.0 prior to 5.8.0. This issue also affects users of the MongoDB C++ Driver dependent on the C driver 1.0.0 prior to 1.17.7 (C++ driver prior to 3.7.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32050">https://nvd.nist.gov/vuln/detail/CVE-2021-32050</a></li>
<li><a href="https://jira.mongodb.org/browse/CDRIVER-3797">https://jira.mongodb.org/browse/CDRIVER-3797</a></li>
<li><a href="https://jira.mongodb.org/browse/CXX-2028">https://jira.mongodb.org/browse/CXX-2028</a></li>
<li><a href="https://jira.mongodb.org/browse/NODE-3356">https://jira.mongodb.org/browse/NODE-3356</a></li>
<li><a href="https://jira.mongodb.org/browse/PHPC-1869">https://jira.mongodb.org/browse/PHPC-1869</a></li>
<li><a href="https://jira.mongodb.org/browse/SWIFT-1229">https://jira.mongodb.org/browse/SWIFT-1229</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/pull/1235">https://github.com/mongodb/mongo-php-driver/pull/1235</a></li>
<li><a href="https://github.com/mongodb/mongo-swift-driver/pull/643">https://github.com/mongodb/mongo-swift-driver/pull/643</a></li>
<li><a href="https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748">https://github.com/mongodb/mongo-php-driver/commit/4495de8313c0d313e4dde906fc7aedf998ee3748</a></li>
<li><a href="https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0">https://github.com/mongodb/node-mongodb-native/commit/8c8b4c3b8c55f10fb96f63d3bbfa5d408b4ed7d0</a></li>
<li><a href="https://github.com/advisories/GHSA-vxvm-qww3-2fh7">https://github.com/advisories/GHSA-vxvm-qww3-2fh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxvm-qww3-2fh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T18:31:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[find-exec] Command Injection Vulnerability in find-exec]]></title>
        <id>https://github.com/advisories/GHSA-95rp-6gqp-6622</id>
        <link href="https://github.com/advisories/GHSA-95rp-6gqp-6622"/>
        <updated>2023-08-30T20:08:59.000Z</updated>
        <content type="html"><![CDATA[<p>Older versions of the package are vulnerable to Command Injection as an attacker controlled parameter. As a result, attackers may run malicious commands.</p>
<p>For example:</p>
<pre><code>const find = require("find-exec");
find("mplayer; touch hacked")
</code></pre>
<p>This creates a file named "hacked" on the filesystem.</p>
<p>You should never allow users to control commands to find, since this package attempts to run every command provided.</p>
<p>Thanks to @miguelafmonteiro for reporting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/shime/find-exec/security/advisories/GHSA-95rp-6gqp-6622">https://github.com/shime/find-exec/security/advisories/GHSA-95rp-6gqp-6622</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-40582">https://nvd.nist.gov/vuln/detail/CVE-2023-40582</a></li>
<li><a href="https://github.com/shime/find-exec/commit/74fb108097c229b03d6dba4cce81e36aa364b51c">https://github.com/shime/find-exec/commit/74fb108097c229b03d6dba4cce81e36aa364b51c</a></li>
<li><a href="https://github.com/advisories/GHSA-95rp-6gqp-6622">https://github.com/advisories/GHSA-95rp-6gqp-6622</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95rp-6gqp-6622</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-30T20:08:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@goauthentik/api] Username enumeration attack in goauthentik]]></title>
        <id>https://github.com/advisories/GHSA-vmf9-6pcv-xr87</id>
        <link href="https://github.com/advisories/GHSA-vmf9-6pcv-xr87"/>
        <updated>2023-08-29T23:34:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Using a recovery flow with an identification stage an attacker is able to determine if a username exists.</p>
<h2 id="impact">Impact</h2>
<p>Only setups configured with a recovery flow are impacted by this. Anyone with a user account on a system with the recovery flow described above is susceptible to having their username/email revealed as existing.</p>
<h2 id="details">Details</h2>
<p>An attacker can easily enumerate and check users' existence using the recovery flow, as a clear message is shown when a user doesn't exist. Depending on configuration this can either be done by username, email, or both.</p>
<p>The invalid and valid usernames should both show the same message and always send an email. Article for reference here: <a href="https://postmarkapp.com/guides/password-reset-email-best-practices#how-to-make-sure-your-password-reset-emails-are-secure">https://postmarkapp.com/guides/password-reset-email-best-practices#how-to-make-sure-your-password-reset-emails-are-secure</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@goauthentik.io">security@goauthentik.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87">https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39522">https://nvd.nist.gov/vuln/detail/CVE-2023-39522</a></li>
<li><a href="https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599">https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599</a></li>
<li><a href="https://github.com/advisories/GHSA-vmf9-6pcv-xr87">https://github.com/advisories/GHSA-vmf9-6pcv-xr87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmf9-6pcv-xr87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T23:34:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@goauthentik/api] Username enumeration attack in goauthentik]]></title>
        <id>https://github.com/advisories/GHSA-vmf9-6pcv-xr87</id>
        <link href="https://github.com/advisories/GHSA-vmf9-6pcv-xr87"/>
        <updated>2023-08-29T23:34:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="summary">Summary</h2>
<p>Using a recovery flow with an identification stage an attacker is able to determine if a username exists.</p>
<h2 id="impact">Impact</h2>
<p>Only setups configured with a recovery flow are impacted by this. Anyone with a user account on a system with the recovery flow described above is susceptible to having their username/email revealed as existing.</p>
<h2 id="details">Details</h2>
<p>An attacker can easily enumerate and check users' existence using the recovery flow, as a clear message is shown when a user doesn't exist. Depending on configuration this can either be done by username, email, or both.</p>
<p>The invalid and valid usernames should both show the same message and always send an email. Article for reference here: <a href="https://postmarkapp.com/guides/password-reset-email-best-practices#how-to-make-sure-your-password-reset-emails-are-secure">https://postmarkapp.com/guides/password-reset-email-best-practices#how-to-make-sure-your-password-reset-emails-are-secure</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@goauthentik.io">security@goauthentik.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87">https://github.com/goauthentik/authentik/security/advisories/GHSA-vmf9-6pcv-xr87</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39522">https://nvd.nist.gov/vuln/detail/CVE-2023-39522</a></li>
<li><a href="https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599">https://github.com/goauthentik/authentik/commit/aa874dd92a770d5f8cd8f265b7cdd31cd73a4599</a></li>
<li><a href="https://github.com/advisories/GHSA-vmf9-6pcv-xr87">https://github.com/advisories/GHSA-vmf9-6pcv-xr87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vmf9-6pcv-xr87</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T23:34:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@adobe/css-tools] @adobe/css-tools Regular Expression Denial of Service (ReDOS) while Parsing CSS]]></title>
        <id>https://github.com/advisories/GHSA-hpx4-r86g-5jrg</id>
        <link href="https://github.com/advisories/GHSA-hpx4-r86g-5jrg"/>
        <updated>2023-08-29T23:33:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>@adobe/css-tools version 4.3.0 and earlier are affected by an Improper Input Validation vulnerability that could result in a denial of service while attempting to parse CSS.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in 4.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p>N/A</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/adobe/css-tools/security/advisories/GHSA-hpx4-r86g-5jrg">https://github.com/adobe/css-tools/security/advisories/GHSA-hpx4-r86g-5jrg</a></li>
<li><a href="https://github.com/adobe/css-tools/commit/2b09a25d1dbdbb16fe80065e4c9beb5623ee5793">https://github.com/adobe/css-tools/commit/2b09a25d1dbdbb16fe80065e4c9beb5623ee5793</a></li>
<li><a href="https://github.com/advisories/GHSA-hpx4-r86g-5jrg">https://github.com/advisories/GHSA-hpx4-r86g-5jrg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpx4-r86g-5jrg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T23:33:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openpgp] Cleartext Signed Message Signature Spoofing in openpgp]]></title>
        <id>https://github.com/advisories/GHSA-ch3c-v47x-4pgp</id>
        <link href="https://github.com/advisories/GHSA-ch3c-v47x-4pgp"/>
        <updated>2023-08-29T22:13:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenPGP Cleartext Signed Messages are cryptographically signed messages where the signed text is readable without special tools:</p>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

This text is signed.
-----BEGIN PGP SIGNATURE-----

wnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+
BwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd
WJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=
-----END PGP SIGNATURE-----
</code></pre>
<p>These messages typically contain a "Hash: ..." header declaring the hash algorithm used to compute the signature digest.
OpenPGP.js up to v5.9.0 ignored any data preceding the "Hash: ..." texts when verifying the signature. As a result, malicious parties could add arbitrary text to a third-party Cleartext Signed Message, to lead the victim to believe that the arbitrary text was signed.</p>
<p>A user or application is vulnerable to said attack vector if it verifies the CleartextMessage by only checking the returned <code>verified</code> property, discarding the associated <code>data</code> information, and instead <em>visually trusting</em> the contents of the original message:</p>
<pre><code class="language-js">const cleartextMessage = `
-----BEGIN PGP SIGNED MESSAGE-----
This text is not signed but you might think it is. Hash: SHA256

This text is signed.
-----BEGIN PGP SIGNATURE-----

wnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+
BwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd
WJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=
-----END PGP SIGNATURE-----
`;
const message = await openpgp.readCleartextMessage({ cleartextMessage });
const verificationResult = await verifyCleartextMessage({ message, verificationKeys });
console.log(await verificationResult.verified); // output: true
console.log(verificationResult.data); // output: 'This text is signed.'
</code></pre>
<p>Since <code>verificationResult.data</code> would always contain the actual signed data, users and apps that check this information are not vulnerable.
Similarly, given a CleartextMessage object, retrieving the data using <code>getText()</code> or the <code>text</code> field returns only the contents that are considered when verifying the signature.
Finally, re-armoring a CleartextMessage object (using <code>armor()</code> will also result in a "sanitised" version, with the extraneous text being removed.
Because of this, we consider the vulnerability impact to be very limited when the CleartextMessage is processed programmatically; this is reflected in the Severity CVSS assessment, specifically in the scope's score ("Unchanged").</p>
<h3 id="patches">Patches</h3>
<ul>
<li>v5.10.1 (current stable version) will reject messages when calling <code>openpgp.readCleartextMessage()</code></li>
<li>v4.10.11 (legacy version) will reject messages when calling <code>openpgp.cleartext.readArmored()</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Check the contents of <code>verificationResult.data</code> to see what data was actually signed, rather than visually trusting the contents of the armored message.</p>
<h3 id="references">References</h3>
<p>Similar CVE: <a href="https://sec-consult.com/vulnerability-lab/advisory/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/">https://sec-consult.com/vulnerability-lab/advisory/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp">https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v4.10.11">https://github.com/openpgpjs/openpgpjs/releases/tag/v4.10.11</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v5.10.1">https://github.com/openpgpjs/openpgpjs/releases/tag/v5.10.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41037">https://nvd.nist.gov/vuln/detail/CVE-2023-41037</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566">https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3c-v47x-4pgp">https://github.com/advisories/GHSA-ch3c-v47x-4pgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3c-v47x-4pgp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T17:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openpgp] Cleartext Signed Message Signature Spoofing in openpgp]]></title>
        <id>https://github.com/advisories/GHSA-ch3c-v47x-4pgp</id>
        <link href="https://github.com/advisories/GHSA-ch3c-v47x-4pgp"/>
        <updated>2023-08-29T22:13:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenPGP Cleartext Signed Messages are cryptographically signed messages where the signed text is readable without special tools:</p>
<pre><code>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

This text is signed.
-----BEGIN PGP SIGNATURE-----

wnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+
BwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd
WJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=
-----END PGP SIGNATURE-----
</code></pre>
<p>These messages typically contain a "Hash: ..." header declaring the hash algorithm used to compute the signature digest.
OpenPGP.js up to v5.9.0 ignored any data preceding the "Hash: ..." texts when verifying the signature. As a result, malicious parties could add arbitrary text to a third-party Cleartext Signed Message, to lead the victim to believe that the arbitrary text was signed.</p>
<p>A user or application is vulnerable to said attack vector if it verifies the CleartextMessage by only checking the returned <code>verified</code> property, discarding the associated <code>data</code> information, and instead <em>visually trusting</em> the contents of the original message:</p>
<pre><code class="language-js">const cleartextMessage = `
-----BEGIN PGP SIGNED MESSAGE-----
This text is not signed but you might think it is. Hash: SHA256

This text is signed.
-----BEGIN PGP SIGNATURE-----

wnUEARMIACcFgmTkrNAJkInXCgj0fgcIFiEE1JlKzzDGQxZmmHkYidcKCPR+
BwgAAKXDAQDWGhI7tPbhB+jlKwe4+yPJ+9X8aWDUG60XFNi/w8T7ZgEAsAGd
WJrkm/H5AXGZsqyqqO6IWGF0geTCd4mWm/CsveM=
-----END PGP SIGNATURE-----
`;
const message = await openpgp.readCleartextMessage({ cleartextMessage });
const verificationResult = await verifyCleartextMessage({ message, verificationKeys });
console.log(await verificationResult.verified); // output: true
console.log(verificationResult.data); // output: 'This text is signed.'
</code></pre>
<p>Since <code>verificationResult.data</code> would always contain the actual signed data, users and apps that check this information are not vulnerable.
Similarly, given a CleartextMessage object, retrieving the data using <code>getText()</code> or the <code>text</code> field returns only the contents that are considered when verifying the signature.
Finally, re-armoring a CleartextMessage object (using <code>armor()</code> will also result in a "sanitised" version, with the extraneous text being removed.
Because of this, we consider the vulnerability impact to be very limited when the CleartextMessage is processed programmatically; this is reflected in the Severity CVSS assessment, specifically in the scope's score ("Unchanged").</p>
<h3 id="patches">Patches</h3>
<ul>
<li>v5.10.1 (current stable version) will reject messages when calling <code>openpgp.readCleartextMessage()</code></li>
<li>v4.10.11 (legacy version) will reject messages when calling <code>openpgp.cleartext.readArmored()</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Check the contents of <code>verificationResult.data</code> to see what data was actually signed, rather than visually trusting the contents of the armored message.</p>
<h3 id="references">References</h3>
<p>Similar CVE: <a href="https://sec-consult.com/vulnerability-lab/advisory/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/">https://sec-consult.com/vulnerability-lab/advisory/cleartext-message-spoofing-in-go-cryptography-libraries-cve-2019-11841/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp">https://github.com/openpgpjs/openpgpjs/security/advisories/GHSA-ch3c-v47x-4pgp</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v4.10.11">https://github.com/openpgpjs/openpgpjs/releases/tag/v4.10.11</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/releases/tag/v5.10.1">https://github.com/openpgpjs/openpgpjs/releases/tag/v5.10.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41037">https://nvd.nist.gov/vuln/detail/CVE-2023-41037</a></li>
<li><a href="https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566">https://github.com/openpgpjs/openpgpjs/commit/6b43e02a254853f5ff508ebd1b07541f78b7c566</a></li>
<li><a href="https://github.com/advisories/GHSA-ch3c-v47x-4pgp">https://github.com/advisories/GHSA-ch3c-v47x-4pgp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ch3c-v47x-4pgp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-29T17:36:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dijit] dijit editor cross-site scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wp32-wq34-2rqh</id>
        <link href="https://github.com/advisories/GHSA-wp32-wq34-2rqh"/>
        <updated>2023-08-28T23:09:39.000Z</updated>
        <content type="html"><![CDATA[<p>dijit.Editor in Dojo Toolkit 1.13 allows XSS via the onload attribute of an SVG element.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-6561">https://nvd.nist.gov/vuln/detail/CVE-2018-6561</a></li>
<li><a href="https://github.com/imsebao/404team/blob/master/dijit_editor_xss.md">https://github.com/imsebao/404team/blob/master/dijit_editor_xss.md</a></li>
<li><a href="https://github.com/dojo/dijit/commit/d22d6cc3458c3c29d2d1fc44652b4bd7f10751f6">https://github.com/dojo/dijit/commit/d22d6cc3458c3c29d2d1fc44652b4bd7f10751f6</a></li>
<li><a href="https://github.com/advisories/GHSA-wp32-wq34-2rqh">https://github.com/advisories/GHSA-wp32-wq34-2rqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp32-wq34-2rqh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T03:44:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@materializecss/materialize] Materialize-css vulnerable to Cross-site Scripting in autocomplete component]]></title>
        <id>https://github.com/advisories/GHSA-7752-f4gf-94gc</id>
        <link href="https://github.com/advisories/GHSA-7752-f4gf-94gc"/>
        <updated>2023-08-28T15:35:49.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>materialize-css</code> are vulnerable to Cross-Site Scripting. The <code>autocomplete</code> component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11003">https://nvd.nist.gov/vuln/detail/CVE-2019-11003</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6286">https://github.com/Dogfalo/materialize/issues/6286</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174144">https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174144</a></li>
<li><a href="https://github.com/materializecss/materialize/pull/49">https://github.com/materializecss/materialize/pull/49</a></li>
<li><a href="https://github.com/advisories/GHSA-7752-f4gf-94gc">https://github.com/advisories/GHSA-7752-f4gf-94gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7752-f4gf-94gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-04-09T19:44:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[materialize-css] Materialize-css vulnerable to Cross-site Scripting in autocomplete component]]></title>
        <id>https://github.com/advisories/GHSA-7752-f4gf-94gc</id>
        <link href="https://github.com/advisories/GHSA-7752-f4gf-94gc"/>
        <updated>2023-08-28T15:35:49.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>materialize-css</code> are vulnerable to Cross-Site Scripting. The <code>autocomplete</code> component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11003">https://nvd.nist.gov/vuln/detail/CVE-2019-11003</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6286">https://github.com/Dogfalo/materialize/issues/6286</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174144">https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174144</a></li>
<li><a href="https://github.com/materializecss/materialize/pull/49">https://github.com/materializecss/materialize/pull/49</a></li>
<li><a href="https://github.com/advisories/GHSA-7752-f4gf-94gc">https://github.com/advisories/GHSA-7752-f4gf-94gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7752-f4gf-94gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-04-09T19:44:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@materializecss/materialize] Materialize-css vulnerable to Cross-site Scripting in tooltip component]]></title>
        <id>https://github.com/advisories/GHSA-98f7-p5rc-jx67</id>
        <link href="https://github.com/advisories/GHSA-98f7-p5rc-jx67"/>
        <updated>2023-08-28T15:34:44.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>materialize-css</code> are vulnerable to Cross-Site Scripting. The <code>tooltip</code> component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11002">https://nvd.nist.gov/vuln/detail/CVE-2019-11002</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6286">https://github.com/Dogfalo/materialize/issues/6286</a></li>
<li><a href="https://github.com/advisories/GHSA-98f7-p5rc-jx67">https://github.com/advisories/GHSA-98f7-p5rc-jx67</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174148">https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174148</a></li>
<li><a href="https://www.npmjs.com/advisories/818">https://www.npmjs.com/advisories/818</a></li>
<li><a href="https://github.com/materializecss/materialize/pull/49">https://github.com/materializecss/materialize/pull/49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98f7-p5rc-jx67</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-04-09T19:44:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[materialize-css] Materialize-css vulnerable to Cross-site Scripting in tooltip component]]></title>
        <id>https://github.com/advisories/GHSA-98f7-p5rc-jx67</id>
        <link href="https://github.com/advisories/GHSA-98f7-p5rc-jx67"/>
        <updated>2023-08-28T15:34:44.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>materialize-css</code> are vulnerable to Cross-Site Scripting. The <code>tooltip</code> component does not sufficiently sanitize user input, allowing an attacker to execute arbitrary JavaScript code if the malicious input is rendered by a user.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11002">https://nvd.nist.gov/vuln/detail/CVE-2019-11002</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6286">https://github.com/Dogfalo/materialize/issues/6286</a></li>
<li><a href="https://github.com/advisories/GHSA-98f7-p5rc-jx67">https://github.com/advisories/GHSA-98f7-p5rc-jx67</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174148">https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174148</a></li>
<li><a href="https://www.npmjs.com/advisories/818">https://www.npmjs.com/advisories/818</a></li>
<li><a href="https://github.com/materializecss/materialize/pull/49">https://github.com/materializecss/materialize/pull/49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-98f7-p5rc-jx67</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-04-09T19:44:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@materializecss/materialize] Materialize-css vulnerable to Improper Neutralization of Input During Web Page Generation]]></title>
        <id>https://github.com/advisories/GHSA-rg3q-jxmp-pvjj</id>
        <link href="https://github.com/advisories/GHSA-rg3q-jxmp-pvjj"/>
        <updated>2023-08-28T15:30:08.000Z</updated>
        <content type="html"><![CDATA[<p>In Materialize through 1.0.0, XSS is possible via the Toast feature.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11004">https://nvd.nist.gov/vuln/detail/CVE-2019-11004</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6286">https://github.com/Dogfalo/materialize/issues/6286</a></li>
<li><a href="https://github.com/advisories/GHSA-rg3q-jxmp-pvjj">https://github.com/advisories/GHSA-rg3q-jxmp-pvjj</a></li>
<li><a href="https://github.com/Dogfalo/materialize/issues/6331#issuecomment-549080183">https://github.com/Dogfalo/materialize/issues/6331#issuecomment-549080183</a></li>
<li><a href="https://github.com/materializecss/materialize/pull/49">https://github.com/materializecss/materialize/pull/49</a></li>
<li><a href="https://github.com/samschurter/materialize/commit/3aae4cc9bb2b58c337bf25d2f04f129a2a0fa78f">https://github.com/samschurter/materialize/commit/3aae4cc9bb2b58c337bf25d2f04f129a2a0fa78f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg3q-jxmp-pvjj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-04-09T19:44:37.000Z</published>
    </entry>
</feed>