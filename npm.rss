<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-02-16T22:01:23.137Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[undici] Regular Expression Denial of Service in Headers]]></title>
        <id>https://github.com/advisories/GHSA-r6ch-mqf9-qc9w</id>
        <link href="https://github.com/advisories/GHSA-r6ch-mqf9-qc9w"/>
        <updated>2023-02-16T20:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Headers.set()</code> and <code>Headers.append()</code> methods are vulnerable to Regular Expression Denial of Service (ReDoS) attacks when untrusted values are passed into the functions. This is due to the inefficient regular expression used to normalize the values in the <code>headerValueNormalize()</code> utility function.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was patched in v5.19.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no workaround. Please update to an unaffected version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://hackerone.com/bugs?report_id=1784449">https://hackerone.com/bugs?report_id=1784449</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Carter Snook reported this vulnerability.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nodejs/undici/security/advisories/GHSA-r6ch-mqf9-qc9w">https://github.com/nodejs/undici/security/advisories/GHSA-r6ch-mqf9-qc9w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24807">https://nvd.nist.gov/vuln/detail/CVE-2023-24807</a></li>
<li><a href="https://github.com/nodejs/undici/commit/f2324e549943f0b0937b09fb1c0c16cc7c93abdf">https://github.com/nodejs/undici/commit/f2324e549943f0b0937b09fb1c0c16cc7c93abdf</a></li>
<li><a href="https://github.com/nodejs/undici/releases/tag/v5.19.1">https://github.com/nodejs/undici/releases/tag/v5.19.1</a></li>
<li><a href="https://hackerone.com/bugs?report_id=1784449">https://hackerone.com/bugs?report_id=1784449</a></li>
<li><a href="https://github.com/advisories/GHSA-r6ch-mqf9-qc9w">https://github.com/advisories/GHSA-r6ch-mqf9-qc9w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6ch-mqf9-qc9w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-16T20:46:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[undici] CRLF Injection in Nodejs ‘undici’ via host]]></title>
        <id>https://github.com/advisories/GHSA-5r9g-qh6m-jxff</id>
        <link href="https://github.com/advisories/GHSA-5r9g-qh6m-jxff"/>
        <updated>2023-02-16T20:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>undici library does not protect <code>host</code> HTTP header from CRLF injection vulnerabilities.</p>
<h3 id="patches">Patches</h3>
<p>This issue was patched in Undici v5.19.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitize the <code>headers.host</code> string before passing to undici.</p>
<h3 id="references">References</h3>
<p>Reported at <a href="https://hackerone.com/reports/1820955">https://hackerone.com/reports/1820955</a>.</p>
<h3 id="credits">Credits</h3>
<p>Thank you to Zhipeng Zhang (<a href="https://hackerone.com/timon8">@timon8</a>) for reporting this vulnerability. </p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nodejs/undici/security/advisories/GHSA-5r9g-qh6m-jxff">https://github.com/nodejs/undici/security/advisories/GHSA-5r9g-qh6m-jxff</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23936">https://nvd.nist.gov/vuln/detail/CVE-2023-23936</a></li>
<li><a href="https://github.com/nodejs/undici/commit/a2eff05401358f6595138df963837c24348f2034">https://github.com/nodejs/undici/commit/a2eff05401358f6595138df963837c24348f2034</a></li>
<li><a href="https://hackerone.com/reports/1820955">https://hackerone.com/reports/1820955</a></li>
<li><a href="https://github.com/nodejs/undici/releases/tag/v5.19.1">https://github.com/nodejs/undici/releases/tag/v5.19.1</a></li>
<li><a href="https://github.com/advisories/GHSA-5r9g-qh6m-jxff">https://github.com/advisories/GHSA-5r9g-qh6m-jxff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r9g-qh6m-jxff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-16T20:46:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-jose] Improper calculations in ECC implementation can trigger a Denial-of-Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-5h4j-qrvg-9xhw</id>
        <link href="https://github.com/advisories/GHSA-5h4j-qrvg-9xhw"/>
        <updated>2023-02-16T21:52:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>When using the non-default "fallback" crypto back-end, ECC operations in <code>node-jose</code> can trigger a Denial-of-Service (DoS) condition, due to a possible infinite loop in an internal calculation.  For some ECC operations, this condition is triggered randomly; for others, it can be triggered by malicious input.</p>
<h4 id="technical-summary">Technical summary</h4>
<p>The JOSE logic implemented by <code>node-jose</code> usually relies on an external cryptographic library for the underlying cryptographic primitives that JOSE operations require.  When WebCrypto or the Node <code>crypto</code> module are available, they are used.  When neither of these libraries is available, <code>node-jose</code> includes its own "fallback" implementations of some algorithms based on <code>node-forge</code>, in particular implementations of ECDH and ECDSA. </p>
<p>A various points, these algorithm implementations need to compute to the X coordinate of an elliptic curve point.  This is done by calling the <code>getX()</code> method of the object representing the point, which is an alias of the function <code>pointFpGetX()</code> in <code>lib/deps/ecc/math.js</code>.</p>
<p>Computing the X coordinate from the form in which the point is stored requires computing the modular inverse of the Z coordinate, using the <code>modInverse</code> function from the <code>jsbn</code> library (e.g., <code>this.z.modInverse(this.curve.p)</code>).  The output of this function call is multiplied by another value before being reduced with the <code>barrettReduce()</code> function.</p>
<p>The root cause of this issue is that the <code>jsbn</code> <code>modInverse</code> function sometimes returns negative results.  These results are correct in that they are equivalent mod the relevant modulus, but can be problematic for functions that expect modular operations to always return positive results (in the range <code>[0, p)</code>, where <code>p</code> is the modulus).</p>
<p>In particular, while the Barrett reduction algorithm in general can handle negative inputs, the implementation in <code>node-jose</code> explicitly does not. Therefore, while the negative value that is returned by <code>modInverse()</code> is mathematically correct, it leads to an error in <code>barrettReduce()</code> causing an infinite loop which may result in a Denial of Service condition.</p>
<p>For a given prime modulus, we estimate that roughly one in every <code>2^20</code> inputs produce a negative <code>modInverse()</code>.  This estimate was validated with exhaustive testing on small primes (&lt;30 bits) and randomized testing with regard to the P-256 prime.</p>
<h3 id="impact">Impact</h3>
<p>This issue is only present in situations where the "fallback" cryptographic implementation is being used, i.e., situations where neither WebCrypto nor the Node <code>crypto</code> module is available.</p>
<p>The following elliptic curve algorithms are impacted by this issue (all in <code>lib/deps/ecc/index.js</code>):</p>
<ul>
<li>Elliptic curve key generation (<code>exports.generateKeyPair</code>)</li>
<li>Converting an elliptic curve private key to a public key (<code>ECPrivateKey.prototype.toPublicKey</code>)</li>
<li>ECDSA signing (<code>ECPrivateKey.prototype.sign</code>)</li>
<li>ECDSA verification (<code>ECPublicKey.prototype.verify</code>)</li>
<li>ECDH key agreement (<code>ECPrivateKey.prototype.computeSecret</code>)</li>
</ul>
<p>In the first three cases, the points being evaluated are generated randomly, so an attack could only arise due to a bad value being randomly selected (as noted above, with probability roughly <code>2^{-20}</code>).  In the latter two cases, the points being evaluated are provided from outside the library, and thus potentially by attackers.</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p>Since this issue is only present in the "fallback" crypto implementation, it can be avoided by ensuring that either WebCrypto or the Node <code>crypto</code> module is available in the JS environment where <code>node-jose</code> is being run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Barrett_reduction">Barrett reduction on Wikipedia</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/cisco/node-jose/issues">cisco/node-jose</a></li>
<li>Email <a href="mailto:oss-security@cisco.com">Cisco open source security</a></li>
</ul>
<h3 id="credits">Credits</h3>
<ul>
<li>Research and disclosure: BlackBerry</li>
<li>Fix implementation: <a href="https://github.com/bifurcation">Richard Barnes (@bifurcation)</a></li>
<li>Release engineering: <a href="https://github.com/justaugustus">Stephen Augustus (@justaugustus)</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cisco/node-jose/security/advisories/GHSA-5h4j-qrvg-9xhw">https://github.com/cisco/node-jose/security/advisories/GHSA-5h4j-qrvg-9xhw</a></li>
<li><a href="https://github.com/cisco/node-jose/commit/901d91508a70e3b9bdfc45688ea07bb4e1b8210d">https://github.com/cisco/node-jose/commit/901d91508a70e3b9bdfc45688ea07bb4e1b8210d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25653">https://nvd.nist.gov/vuln/detail/CVE-2023-25653</a></li>
<li><a href="https://github.com/advisories/GHSA-5h4j-qrvg-9xhw">https://github.com/advisories/GHSA-5h4j-qrvg-9xhw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h4j-qrvg-9xhw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-16T18:44:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@graphql-mesh/http] Unwanted access to the entire file system vulnerability due to a missing check in `staticFiles` HTTP handler]]></title>
        <id>https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</id>
        <link href="https://github.com/advisories/GHSA-j2wh-wrv3-4x4g"/>
        <updated>2023-02-16T18:41:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Missing check vulnerability in the static file handler allows any client to access the files in the server's file system</p>
<h3 id="details">Details</h3>
<p>When <code>staticFiles</code> is set in the <code>serve</code> settings in the configuration file, the following handler doesn't check if <code>absolutePath</code> is still under the directory provided as <code>staticFiles</code>;</p>
<pre><code class="language-ts">  if (staticFiles) {
    router.get('/:relativePath+', async request =&gt; {
      let { relativePath } = request.params;
      if (!relativePath) {
        relativePath = 'index.html';
      }
      const absolutePath = path.join(baseDir, staticFiles, relativePath);
      if (absolutePath.includes(staticFiles) &amp;&amp; (await pathExists(absolutePath))) {
        const readStream = fs.createReadStream(absolutePath);
        return new Response(readStream as any, {
          status: 200,
        });
      }
      return undefined;
    });
</code></pre>
<h3 id="example-scenario">Example scenario</h3>
<p>To reproduce it, set <code>staticFiles</code> to the relative path of a directory in <code>.meshrc.yml</code>;</p>
<pre><code class="language-yml">serve:
   staticFiles: ./public
</code></pre>
<p>Then start the server with <code>mesh dev</code>, and browse to <code>/..%2fpackage.json</code> then you will see the content of <code>package.json</code>. You can even go deeper to see sensitive data; <code>/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd</code></p>
<h3 id="impact-and-solution">Impact and solution</h3>
<p>If <code>staticFiles</code> is set under <code>serve</code> in the configuration file. you have two options to fix vulnerability;</p>
<ul>
<li>Update <code>@graphql-mesh/cli</code> to a version higher than <code>0.82.21</code>, and if you use <code>@graphql-mesh/http</code>, update it to a version higher than <code>0.3.18</code></li>
<li>Remove <code>staticFiles</code> option from the configuration, and use other solutions to serve static files.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks <a href="mailto:alanwillms@gmail.com">alanwillms@gmail.com</a> for reporting this vulnerability with details</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Urigo/graphql-mesh/security/advisories/GHSA-j2wh-wrv3-4x4g">https://github.com/Urigo/graphql-mesh/security/advisories/GHSA-j2wh-wrv3-4x4g</a></li>
<li><a href="https://github.com/Urigo/graphql-mesh/commit/95d93e7c140c2995b37e9d822aa3fe4e24ed2e78">https://github.com/Urigo/graphql-mesh/commit/95d93e7c140c2995b37e9d822aa3fe4e24ed2e78</a></li>
<li><a href="https://github.com/advisories/GHSA-j2wh-wrv3-4x4g">https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-16T18:41:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@graphql-mesh/cli] Unwanted access to the entire file system vulnerability due to a missing check in `staticFiles` HTTP handler]]></title>
        <id>https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</id>
        <link href="https://github.com/advisories/GHSA-j2wh-wrv3-4x4g"/>
        <updated>2023-02-16T18:41:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Missing check vulnerability in the static file handler allows any client to access the files in the server's file system</p>
<h3 id="details">Details</h3>
<p>When <code>staticFiles</code> is set in the <code>serve</code> settings in the configuration file, the following handler doesn't check if <code>absolutePath</code> is still under the directory provided as <code>staticFiles</code>;</p>
<pre><code class="language-ts">  if (staticFiles) {
    router.get('/:relativePath+', async request =&gt; {
      let { relativePath } = request.params;
      if (!relativePath) {
        relativePath = 'index.html';
      }
      const absolutePath = path.join(baseDir, staticFiles, relativePath);
      if (absolutePath.includes(staticFiles) &amp;&amp; (await pathExists(absolutePath))) {
        const readStream = fs.createReadStream(absolutePath);
        return new Response(readStream as any, {
          status: 200,
        });
      }
      return undefined;
    });
</code></pre>
<h3 id="example-scenario">Example scenario</h3>
<p>To reproduce it, set <code>staticFiles</code> to the relative path of a directory in <code>.meshrc.yml</code>;</p>
<pre><code class="language-yml">serve:
   staticFiles: ./public
</code></pre>
<p>Then start the server with <code>mesh dev</code>, and browse to <code>/..%2fpackage.json</code> then you will see the content of <code>package.json</code>. You can even go deeper to see sensitive data; <code>/..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc/passwd</code></p>
<h3 id="impact-and-solution">Impact and solution</h3>
<p>If <code>staticFiles</code> is set under <code>serve</code> in the configuration file. you have two options to fix vulnerability;</p>
<ul>
<li>Update <code>@graphql-mesh/cli</code> to a version higher than <code>0.82.21</code>, and if you use <code>@graphql-mesh/http</code>, update it to a version higher than <code>0.3.18</code></li>
<li>Remove <code>staticFiles</code> option from the configuration, and use other solutions to serve static files.</li>
</ul>
<h3 id="credits">Credits</h3>
<p>Thanks <a href="mailto:alanwillms@gmail.com">alanwillms@gmail.com</a> for reporting this vulnerability with details</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Urigo/graphql-mesh/security/advisories/GHSA-j2wh-wrv3-4x4g">https://github.com/Urigo/graphql-mesh/security/advisories/GHSA-j2wh-wrv3-4x4g</a></li>
<li><a href="https://github.com/Urigo/graphql-mesh/commit/95d93e7c140c2995b37e9d822aa3fe4e24ed2e78">https://github.com/Urigo/graphql-mesh/commit/95d93e7c140c2995b37e9d822aa3fe4e24ed2e78</a></li>
<li><a href="https://github.com/advisories/GHSA-j2wh-wrv3-4x4g">https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2wh-wrv3-4x4g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-16T18:41:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@fastify/multipart] Denial of service due to unlimited number of parts]]></title>
        <id>https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</id>
        <link href="https://github.com/advisories/GHSA-hpp2-2cr5-pf6g"/>
        <updated>2023-02-14T21:49:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>The multipart body parser accepts an unlimited number of file parts.</li>
<li>The multipart body parser accepts an unlimited number of field parts.</li>
<li>The multipart body parser accepts an unlimited number of empty parts as field
parts.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This is fixed in v7.4.1 (for Fastify v4.x) and v6.0.1 (for Fastify v3.x).</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workaround.  </p>
<h3 id="references">References</h3>
<p>Reported at <a href="https://hackerone.com/reports/1816195">https://hackerone.com/reports/1816195</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g">https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25576">https://nvd.nist.gov/vuln/detail/CVE-2023-25576</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297">https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297</a></li>
<li><a href="https://hackerone.com/reports/1816195">https://hackerone.com/reports/1816195</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1">https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1">https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-hpp2-2cr5-pf6g">https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-14T21:49:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@fastify/multipart] Denial of service due to unlimited number of parts]]></title>
        <id>https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</id>
        <link href="https://github.com/advisories/GHSA-hpp2-2cr5-pf6g"/>
        <updated>2023-02-14T21:49:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>The multipart body parser accepts an unlimited number of file parts.</li>
<li>The multipart body parser accepts an unlimited number of field parts.</li>
<li>The multipart body parser accepts an unlimited number of empty parts as field
parts.</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This is fixed in v7.4.1 (for Fastify v4.x) and v6.0.1 (for Fastify v3.x).</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workaround.  </p>
<h3 id="references">References</h3>
<p>Reported at <a href="https://hackerone.com/reports/1816195">https://hackerone.com/reports/1816195</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g">https://github.com/fastify/fastify-multipart/security/advisories/GHSA-hpp2-2cr5-pf6g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25576">https://nvd.nist.gov/vuln/detail/CVE-2023-25576</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297">https://github.com/fastify/fastify-multipart/commit/85be81bedf5b29cfd9fe3efc30fb5a17173c1297</a></li>
<li><a href="https://hackerone.com/reports/1816195">https://hackerone.com/reports/1816195</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1">https://github.com/fastify/fastify-multipart/releases/tag/v6.0.1</a></li>
<li><a href="https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1">https://github.com/fastify/fastify-multipart/releases/tag/v7.4.1</a></li>
<li><a href="https://github.com/advisories/GHSA-hpp2-2cr5-pf6g">https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpp2-2cr5-pf6g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-14T21:49:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-catalog-backend] Cross site scripting Vulnerability in backstage Software Catalog]]></title>
        <id>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</id>
        <link href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"/>
        <updated>2023-02-14T21:35:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>
<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our chat, linked to in the <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25571">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>
<li><a href="https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>
<li><a href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T21:35:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/catalog-model] Cross site scripting Vulnerability in backstage Software Catalog]]></title>
        <id>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</id>
        <link href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"/>
        <updated>2023-02-14T21:35:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>
<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our chat, linked to in the <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25571">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>
<li><a href="https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>
<li><a href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T21:35:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/core-components] Cross site scripting Vulnerability in backstage Software Catalog]]></title>
        <id>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</id>
        <link href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv"/>
        <updated>2023-02-14T21:35:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows a malicious actor with access to add or modify content in an instance of the Backstage software catalog to inject script URLs in the entities stored in the catalog. If users of the catalog then click on said URLs, that can lead to an XSS attack.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in both the frontend and backend implementations. The default <code>Link</code> component from <code>@backstage/core-components</code> will now reject <code>javascript:</code> URLs, and there is a global override of <code>window.open</code> to do the same.</p>
<p>In addition the catalog model as well as the catalog backend now has additional validation built in that prevents <code>javascript:</code> URLs in known annotations.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The general practice of limiting access to modifying catalog content and requiring code reviews greatly helps mitigate this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our chat, linked to in the <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/backstage/backstage/security/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25571">https://nvd.nist.gov/vuln/detail/CVE-2023-25571</a></li>
<li><a href="https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8">https://github.com/backstage/backstage/commit/3d1371954512f7fa8bd0e2d357e00eada2c3e8a8</a></li>
<li><a href="https://github.com/advisories/GHSA-7hv8-3fr9-j2hv">https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7hv8-3fr9-j2hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T21:35:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[glance] Path traversal vulnerability in glance]]></title>
        <id>https://github.com/advisories/GHSA-3hjh-5hgx-f5wh</id>
        <link href="https://github.com/advisories/GHSA-3hjh-5hgx-f5wh"/>
        <updated>2023-02-14T16:52:36.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package glance before 3.0.9 are vulnerable to Directory Traversal that allows users to read files outside the public root directory. This is related to but distinct from the vulnerability reported in <a href="https://security.snyk.io/vuln/npm:glance:20180129">CVE-2018-3715</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25937">https://nvd.nist.gov/vuln/detail/CVE-2022-25937</a></li>
<li><a href="https://github.com/jarofghosts/glance/commit/8cecfe90286e0c45a5494067f1b592d0ccfeabac">https://github.com/jarofghosts/glance/commit/8cecfe90286e0c45a5494067f1b592d0ccfeabac</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-GLANCE-3318395">https://security.snyk.io/vuln/SNYK-JS-GLANCE-3318395</a></li>
<li><a href="https://gist.github.com/lirantal/c8cfb0398c78e558b7d4ac02aae67809">https://gist.github.com/lirantal/c8cfb0398c78e558b7d4ac02aae67809</a></li>
<li><a href="https://github.com/advisories/GHSA-3hjh-5hgx-f5wh">https://github.com/advisories/GHSA-3hjh-5hgx-f5wh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3hjh-5hgx-f5wh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-13T06:30:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simple-markdown] Regular Expression Denial of Service in simple-markdown]]></title>
        <id>https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</id>
        <link href="https://github.com/advisories/GHSA-gpvj-gp8c-c7p2"/>
        <updated>2023-02-14T01:02:09.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in simple-markdown 0.5.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file simple-markdown.js. The manipulation leads to inefficient regular expression complexity. The attack can be launched remotely. Upgrading to version 0.5.2 is able to address this issue. The name of the patch is 89797fef9abb4cab2fb76a335968266a92588816. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220639.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25103">https://nvd.nist.gov/vuln/detail/CVE-2019-25103</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816">https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2">https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2</a></li>
<li><a href="https://vuldb.com/?ctiid.220639">https://vuldb.com/?ctiid.220639</a></li>
<li><a href="https://vuldb.com/?id.220639">https://vuldb.com/?id.220639</a></li>
<li><a href="https://github.com/advisories/GHSA-gpvj-gp8c-c7p2">https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-12T15:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simple-markdown] Regular Expression Denial of Service in simple-markdown]]></title>
        <id>https://github.com/advisories/GHSA-j533-2g8v-pmpg</id>
        <link href="https://github.com/advisories/GHSA-j533-2g8v-pmpg"/>
        <updated>2023-02-14T00:57:46.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in simple-markdown 0.6.0. Affected is an unknown function of the file simple-markdown.js. The manipulation with the input &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;:/:/:/:/:/:/:/:/:/:/ leads to inefficient regular expression complexity. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.6.1 is able to address this issue. The name of the patch is 015a719bf5cdc561feea05500ecb3274ef609cd2. It is recommended to upgrade the affected component. VDB-220638 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25102">https://nvd.nist.gov/vuln/detail/CVE-2019-25102</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/pull/73">https://github.com/ariabuckles/simple-markdown/pull/73</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2">https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1">https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1</a></li>
<li><a href="https://vuldb.com/?ctiid.220638">https://vuldb.com/?ctiid.220638</a></li>
<li><a href="https://vuldb.com/?id.220638">https://vuldb.com/?id.220638</a></li>
<li><a href="https://github.com/advisories/GHSA-j533-2g8v-pmpg">https://github.com/advisories/GHSA-j533-2g8v-pmpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j533-2g8v-pmpg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-12T15:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-admin] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-admin] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor5] Cross-site scripting in CKEditor5]]></title>
        <id>https://github.com/advisories/GHSA-6p89-3p7c-qrhv</id>
        <link href="https://github.com/advisories/GHSA-6p89-3p7c-qrhv"/>
        <updated>2023-02-15T15:36:03.000Z</updated>
        <content type="html"><![CDATA[<p>CKSource CKEditor5 35.4.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the Full Featured CKEditor5 widget.</p>
<p>NOTE: the vendor's position is that this is not a vulnerability. The CKEditor 5 documentation discusses that it is the responsibility of an integrator (who is adding CKEditor 5 functionality to a website) to choose the correct security settings for their use case. Also, safe default values are established (e.g., config.htmlEmbed.showPreviews is false).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-48110">https://nvd.nist.gov/vuln/detail/CVE-2022-48110</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html">https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html</a></li>
<li><a href="https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html">https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6p89-3p7c-qrhv">https://github.com/advisories/GHSA-6p89-3p7c-qrhv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p89-3p7c-qrhv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-13T21:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[create-choo-app3] create-choo-app3 is vulnerable to Command Injection via the devInstall function]]></title>
        <id>https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</id>
        <link href="https://github.com/advisories/GHSA-rj7m-2p3g-fjxg"/>
        <updated>2023-02-13T20:51:27.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package create-choo-app3 are vulnerable to Command Injection via the devInstall function due to improper user-input sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25855">https://nvd.nist.gov/vuln/detail/CVE-2022-25855</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951">https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951</a></li>
<li><a href="https://github.com/advisories/GHSA-rj7m-2p3g-fjxg">https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-06T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froala-editor] Cross site scripting in froala-editor]]></title>
        <id>https://github.com/advisories/GHSA-97x5-cc53-cv4v</id>
        <link href="https://github.com/advisories/GHSA-97x5-cc53-cv4v"/>
        <updated>2023-02-13T18:05:45.000Z</updated>
        <content type="html"><![CDATA[<p>A cross site scripting (XSS) vulnerability in the Insert Video function of Froala WYSIWYG Editor allows attackers to execute arbitrary web scripts or HTML.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-22864">https://nvd.nist.gov/vuln/detail/CVE-2020-22864</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/issues/3880">https://github.com/froala/wysiwyg-editor/issues/3880</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/pull/3911">https://github.com/froala/wysiwyg-editor/pull/3911</a></li>
<li><a href="https://github.com/418sec/wysiwyg-editor/pull/1">https://github.com/418sec/wysiwyg-editor/pull/1</a></li>
<li><a href="https://www.youtube.com/watch?v=WE3b1iSnWJY">https://www.youtube.com/watch?v=WE3b1iSnWJY</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11">https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11</a></li>
<li><a href="https://github.com/advisories/GHSA-97x5-cc53-cv4v">https://github.com/advisories/GHSA-97x5-cc53-cv4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-97x5-cc53-cv4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-10-28T23:14:06.000Z</published>
    </entry>
</feed>