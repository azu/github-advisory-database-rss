<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-06-20T00:03:23.134Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@aws-cdk/aws-eks] AWS CDK EKS overly permissive trust policies]]></title>
        <id>https://github.com/advisories/GHSA-rx28-r23p-2qc3</id>
        <link href="https://github.com/advisories/GHSA-rx28-r23p-2qc3"/>
        <updated>2023-06-19T22:47:27.000Z</updated>
        <content type="html"><![CDATA[<p>If you are using the <code>eks.Cluster</code> or <code>eks.FargateCluster</code> construct we need you to take action. Other users are not affected and can stop reading.</p>
<h3 id="impact">Impact</h3>
<p>The AWS Cloud Development Kit (CDK) allows for the definition of Amazon Elastic Container Service for Kubernetes (EKS) clusters. <code>eks.Cluster</code> and <code>eks.FargateCluster</code> constructs create two roles that have an overly permissive trust policy. </p>
<p>The first, referred to as the <em>CreationRole</em>, is used by lambda handlers to create the cluster and deploy Kubernetes resources (e.g <code>KubernetesManifest</code>, <code>HelmChart</code>, ...) onto it. Users with CDK version higher or equal to  <a href="https://github.com/aws/aws-cdk/releases/tag/v1.62.0">1.62.0</a> (including v2 users) will be affected.</p>
<p>The second, referred to as the <em>default MastersRole</em>, is provisioned only if the <code>mastersRole</code> property isn't provided and has permissions to execute <code>kubectl</code> commands on the cluster. Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.57.0">1.57.0</a> (including v2 users) will be affected.</p>
<p>Both these roles use the account root principal in their trust policy, which allows any identity in the account with the appropriate <code>sts:AssumeRole </code>permissions to assume it. For example, this can happen if another role in your account has <code>sts:AssumeRole</code> permissions on <code>Resource: "*"</code>.</p>
<h4 id="creationrole">CreationRole</h4>
<p>Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.62.0">1.62.0</a> (including v2 users). The role in question can be located in the IAM console. It will have the following name pattern: </p>
<pre><code class="language-console">*-ClusterCreationRole-* 
</code></pre>
<h4 id="mastersrole">MastersRole</h4>
<p>Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.57.0">1.57.0</a> (including v2 users) that are not specifying the <code>mastersRole</code> property. The role in question can be located in the IAM console. It will have the following name pattern: </p>
<pre><code class="language-console">*-MastersRole-*
</code></pre>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in versions <a href="https://github.com/aws/aws-cdk/releases/tag/v1.202.0">v1.202.0</a>, <a href="https://github.com/aws/aws-cdk/releases/tag/v2.80.0">v2.80.0</a>. We recommend you upgrade to a fixed version as soon as possible. See <a href="https://docs.aws.amazon.com/cdk/v2/guide/manage-dependencies.html">Managing Dependencies</a> in the CDK Developer Guide for instructions on how to do this.  </p>
<p>The new versions no longer use the account root principal. Instead, they restrict the trust policy to the specific roles of lambda handlers that need it. This introduces some breaking changes that might require you to perform code changes. Refer to <a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a> for a detailed discussion of options. </p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="creationrole-1">CreationRole</h4>
<p>There is no workaround available for CreationRole. </p>
<h4 id="mastersrole-1">MastersRole</h4>
<p>To avoid creating the <em>default MastersRole</em>, use the <code>mastersRole</code> property to explicitly provide a role. For example: </p>
<pre><code class="language-ts">new eks.Cluster(this, 'Cluster', { 
  ... 
  mastersRole: iam.Role.fromRoleArn(this, 'Admin', 'arn:aws:iam::xxx:role/Admin') 
}); 
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a></p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-rx28-r23p-2qc3">https://github.com/aws/aws-cdk/security/advisories/GHSA-rx28-r23p-2qc3</a></li>
<li><a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a></li>
<li><a href="https://github.com/advisories/GHSA-rx28-r23p-2qc3">https://github.com/advisories/GHSA-rx28-r23p-2qc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rx28-r23p-2qc3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-19T22:47:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-cdk-lib] AWS CDK EKS overly permissive trust policies]]></title>
        <id>https://github.com/advisories/GHSA-rx28-r23p-2qc3</id>
        <link href="https://github.com/advisories/GHSA-rx28-r23p-2qc3"/>
        <updated>2023-06-19T22:47:27.000Z</updated>
        <content type="html"><![CDATA[<p>If you are using the <code>eks.Cluster</code> or <code>eks.FargateCluster</code> construct we need you to take action. Other users are not affected and can stop reading.</p>
<h3 id="impact">Impact</h3>
<p>The AWS Cloud Development Kit (CDK) allows for the definition of Amazon Elastic Container Service for Kubernetes (EKS) clusters. <code>eks.Cluster</code> and <code>eks.FargateCluster</code> constructs create two roles that have an overly permissive trust policy. </p>
<p>The first, referred to as the <em>CreationRole</em>, is used by lambda handlers to create the cluster and deploy Kubernetes resources (e.g <code>KubernetesManifest</code>, <code>HelmChart</code>, ...) onto it. Users with CDK version higher or equal to  <a href="https://github.com/aws/aws-cdk/releases/tag/v1.62.0">1.62.0</a> (including v2 users) will be affected.</p>
<p>The second, referred to as the <em>default MastersRole</em>, is provisioned only if the <code>mastersRole</code> property isn't provided and has permissions to execute <code>kubectl</code> commands on the cluster. Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.57.0">1.57.0</a> (including v2 users) will be affected.</p>
<p>Both these roles use the account root principal in their trust policy, which allows any identity in the account with the appropriate <code>sts:AssumeRole </code>permissions to assume it. For example, this can happen if another role in your account has <code>sts:AssumeRole</code> permissions on <code>Resource: "*"</code>.</p>
<h4 id="creationrole">CreationRole</h4>
<p>Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.62.0">1.62.0</a> (including v2 users). The role in question can be located in the IAM console. It will have the following name pattern: </p>
<pre><code class="language-console">*-ClusterCreationRole-* 
</code></pre>
<h4 id="mastersrole">MastersRole</h4>
<p>Users with CDK version higher or equal to <a href="https://github.com/aws/aws-cdk/releases/tag/v1.57.0">1.57.0</a> (including v2 users) that are not specifying the <code>mastersRole</code> property. The role in question can be located in the IAM console. It will have the following name pattern: </p>
<pre><code class="language-console">*-MastersRole-*
</code></pre>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in versions <a href="https://github.com/aws/aws-cdk/releases/tag/v1.202.0">v1.202.0</a>, <a href="https://github.com/aws/aws-cdk/releases/tag/v2.80.0">v2.80.0</a>. We recommend you upgrade to a fixed version as soon as possible. See <a href="https://docs.aws.amazon.com/cdk/v2/guide/manage-dependencies.html">Managing Dependencies</a> in the CDK Developer Guide for instructions on how to do this.  </p>
<p>The new versions no longer use the account root principal. Instead, they restrict the trust policy to the specific roles of lambda handlers that need it. This introduces some breaking changes that might require you to perform code changes. Refer to <a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a> for a detailed discussion of options. </p>
<h3 id="workarounds">Workarounds</h3>
<h4 id="creationrole-1">CreationRole</h4>
<p>There is no workaround available for CreationRole. </p>
<h4 id="mastersrole-1">MastersRole</h4>
<p>To avoid creating the <em>default MastersRole</em>, use the <code>mastersRole</code> property to explicitly provide a role. For example: </p>
<pre><code class="language-ts">new eks.Cluster(this, 'Cluster', { 
  ... 
  mastersRole: iam.Role.fromRoleArn(this, 'Admin', 'arn:aws:iam::xxx:role/Admin') 
}); 
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a></p>
<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/aws-cdk/security/advisories/GHSA-rx28-r23p-2qc3">https://github.com/aws/aws-cdk/security/advisories/GHSA-rx28-r23p-2qc3</a></li>
<li><a href="https://github.com/aws/aws-cdk/issues/25674">https://github.com/aws/aws-cdk/issues/25674</a></li>
<li><a href="https://github.com/advisories/GHSA-rx28-r23p-2qc3">https://github.com/advisories/GHSA-rx28-r23p-2qc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rx28-r23p-2qc3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-19T22:47:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts using MerkleProof multiproofs may allow proving arbitrary leaves for specific trees]]></title>
        <id>https://github.com/advisories/GHSA-wprv-93r4-jj2p</id>
        <link href="https://github.com/advisories/GHSA-wprv-93r4-jj2p"/>
        <updated>2023-06-19T19:46:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the <code>verifyMultiProof</code>, <code>verifyMultiProofCalldata</code>, <code>processMultiProof</code>, or <code>processMultiProofCalldata</code> functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves.</p>
<p>A contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertently for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree.</p>
<p>A contract is not vulnerable if it uses single-leaf proving (<code>verify</code>, <code>verifyCalldata</code>, <code>processProof</code>, or <code>processProofCalldata</code>), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the <a href="https://github.com/OpenZeppelin/merkle-tree">@openzeppelin/merkle-tree</a> library are safe.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the <a href="https://www.npmjs.com/package/@openzeppelin/merkle-tree">@openzeppelin/merkle-tree</a> package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34459">https://nvd.nist.gov/vuln/detail/CVE-2023-34459</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-wprv-93r4-jj2p">https://github.com/advisories/GHSA-wprv-93r4-jj2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wprv-93r4-jj2p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-19T19:46:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts using MerkleProof multiproofs may allow proving arbitrary leaves for specific trees]]></title>
        <id>https://github.com/advisories/GHSA-wprv-93r4-jj2p</id>
        <link href="https://github.com/advisories/GHSA-wprv-93r4-jj2p"/>
        <updated>2023-06-19T19:46:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When the <code>verifyMultiProof</code>, <code>verifyMultiProofCalldata</code>, <code>processMultiProof</code>, or <code>processMultiProofCalldata</code> functions are in use, it is possible to construct merkle trees that allow forging a valid multiproof for an arbitrary set of leaves.</p>
<p>A contract may be vulnerable if it uses multiproofs for verification and the merkle tree that is processed includes a node with value 0 at depth 1 (just under the root). This could happen inadvertently for balanced trees with 3 leaves or less, if the leaves are not hashed. This could happen deliberately if a malicious tree builder includes such a node in the tree.</p>
<p>A contract is not vulnerable if it uses single-leaf proving (<code>verify</code>, <code>verifyCalldata</code>, <code>processProof</code>, or <code>processProofCalldata</code>), or if it uses multiproofs with a known tree that has hashed leaves. Standard merkle trees produced or validated with the <a href="https://github.com/OpenZeppelin/merkle-tree">@openzeppelin/merkle-tree</a> library are safe.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using multiproofs: When constructing merkle trees hash the leaves and do not insert empty nodes in your trees. Using the <a href="https://www.npmjs.com/package/@openzeppelin/merkle-tree">@openzeppelin/merkle-tree</a> package eliminates this issue. Do not accept user-provided merkle roots without reconstructing at least the first level of the tree. Verify the merkle tree structure by reconstructing it from the leaves.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34459">https://nvd.nist.gov/vuln/detail/CVE-2023-34459</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/4d2383e17186be3e8ccf5a442e9686ecc7de1c55</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-wprv-93r4-jj2p">https://github.com/advisories/GHSA-wprv-93r4-jj2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wprv-93r4-jj2p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-19T19:46:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/server] @apollo/server vulnerable to unsafe application of Content Security Policy via reused nonces]]></title>
        <id>https://github.com/advisories/GHSA-68jh-rf6x-836f</id>
        <link href="https://github.com/advisories/GHSA-68jh-rf6x-836f"/>
        <updated>2023-06-16T19:40:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>Content Security Policies (CSP) are a defense-in-depth strategy against XSS attacks. Improper application of CSP isn't itself a vulnerability, but it does fail to prevent XSS in the event that there is a viable attack vector for an XSS attack.</p>
<h3 id="impact">Impact</h3>
<p>There aren't any XSS attack vectors via the Apollo Server landing pages <em>known to Apollo</em>, so to our knowledge there is no impact. However, if there are existing XSS vectors that haven't been reported and patched, then all users of Apollo Server's landing pages have a vulnerability which won't be prevented by the current CSP implemented by the landing pages.</p>
<h3 id="patches">Patches</h3>
<p>The issue is patched in the latest version of Apollo Server, v4.7.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The landing page can be disabled completely until the patch can be upgraded to.
<a href="https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/#disabling-the-landing-page">https://www.apollographql.com/docs/apollo-server/api/plugin/landing-pages/#disabling-the-landing-page</a></p>
<h3 id="references">References</h3>
<p><a href="https://content-security-policy.com/nonce/">https://content-security-policy.com/nonce/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/apollo-server/security/advisories/GHSA-68jh-rf6x-836f">https://github.com/apollographql/apollo-server/security/advisories/GHSA-68jh-rf6x-836f</a></li>
<li><a href="https://github.com/apollographql/apollo-server/commit/0adaf80d1ee51d8c7e5fd863c04478536d15eb8c">https://github.com/apollographql/apollo-server/commit/0adaf80d1ee51d8c7e5fd863c04478536d15eb8c</a></li>
<li><a href="https://github.com/advisories/GHSA-68jh-rf6x-836f">https://github.com/advisories/GHSA-68jh-rf6x-836f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68jh-rf6x-836f</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-16T19:40:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-xml-parser] fast-xml-parser regex vulnerability patch could be improved from a safety perspective]]></title>
        <id>https://github.com/advisories/GHSA-gpv5-7x3g-ghjv</id>
        <link href="https://github.com/advisories/GHSA-gpv5-7x3g-ghjv"/>
        <updated>2023-06-15T19:05:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>This is a comment on <a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw</a> and the patches fixing it.</p>
<h3 id="details">Details</h3>
<p>The code which validates a name calls the validator:
<a href="https://github.com/NaturalIntelligence/fast-xml-parser/blob/ecf6016f9b48aec1a921e673158be0773d07283e/src/xmlparser/DocTypeReader.js#L145-L153">https://github.com/NaturalIntelligence/fast-xml-parser/blob/ecf6016f9b48aec1a921e673158be0773d07283e/src/xmlparser/DocTypeReader.js#L145-L153</a>
This checks for the presence of an invalid character.  Such an approach is always risky, as it is so easy to forget to include an invalid character in the list.  A safer approach is to validate entity names against the XML specification: <a href="https://www.w3.org/TR/xml11/#sec-common-syn">https://www.w3.org/TR/xml11/#sec-common-syn</a> - an ENTITY name is a Name:</p>
<pre><code>[4]   NameStartChar ::= ":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] |
                        [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] |
                        [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
[4a]  NameChar ::= NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]
[5]   Name ::= NameStartChar (NameChar)*
</code></pre>
<p>so the safest way to validate an entity name is to build a regex to represent this expression and check whether the name given matches the regex.  (Something along the lines of <code>/^[name start char class][name char class]*$/</code>.)  There's probably a nice way to simplify the explicit list rather than typing it out verbatim using Unicode character properties, but I don't know enough to do so.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-gpv5-7x3g-ghjv">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-gpv5-7x3g-ghjv</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/9a880b887916855c3a510869fd1ee268d7fe58b1">https://github.com/NaturalIntelligence/fast-xml-parser/commit/9a880b887916855c3a510869fd1ee268d7fe58b1</a></li>
<li><a href="https://github.com/advisories/GHSA-gpv5-7x3g-ghjv">https://github.com/advisories/GHSA-gpv5-7x3g-ghjv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpv5-7x3g-ghjv</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-15T19:05:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@keystone-6/auth] @keystone-6/auth Open Redirect vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jqxr-vjvv-899m</id>
        <link href="https://github.com/advisories/GHSA-jqxr-vjvv-899m"/>
        <updated>2023-06-14T14:54:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>There is an open redirect in the <code>@keystone-6/auth</code> package, where the redirect leading <code>/</code> filter can be bypassed.</p>
<h3 id="impact">Impact</h3>
<p>Users may be redirected to domains other than the relative host, thereby it might be used by attackers to re-direct users to an unexpected location.</p>
<h3 id="mitigations">Mitigations</h3>
<ul>
<li>Don't use the <code>@keystone-6/auth</code> package</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/601.html">CWE-601: URL Redirection to Untrusted Site ('Open Redirect')</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">OWASP: Unvalidated Redirects and Forwards Cheat Sheet</a></li>
</ul>
<h4 id="similar-vulnerability-reports">Similar Vulnerability Reports</h4>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0748">CVE-2023-0748</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2252">CVE-2022-2252</a></li>
</ul>
<h4 id="credits">Credits</h4>
<p>Thanks to <a href="https://github.com/scgajge12">morioka12</a> for reporting this problem.</p>
<p>If you have any questions around this security advisory, please don't hesitate to contact us at <a href="mailto:security@keystonejs.com">security@keystonejs.com</a>, or <a href="https://github.com/keystonejs/keystone/issues/new/choose">open an issue on GitHub</a>.</p>
<p>If you have a security flaw to report for any software in this repository, please see our <a href="https://github.com/keystonejs/keystone/blob/main/SECURITY.md">SECURITY policy</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/security/advisories/GHSA-jqxr-vjvv-899m">https://github.com/keystonejs/keystone/security/advisories/GHSA-jqxr-vjvv-899m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34247">https://nvd.nist.gov/vuln/detail/CVE-2023-34247</a></li>
<li><a href="https://github.com/keystonejs/keystone/pull/8626">https://github.com/keystonejs/keystone/pull/8626</a></li>
<li><a href="https://github.com/advisories/GHSA-jqxr-vjvv-899m">https://github.com/advisories/GHSA-jqxr-vjvv-899m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqxr-vjvv-899m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-14T14:54:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[crypto-js] crypto-js uses insecure random numbers]]></title>
        <id>https://github.com/advisories/GHSA-3w3w-pxmm-2w2j</id>
        <link href="https://github.com/advisories/GHSA-3w3w-pxmm-2w2j"/>
        <updated>2023-06-16T22:12:34.000Z</updated>
        <content type="html"><![CDATA[<p>The crypto-js package before 3.2.1 for Node.js generates random numbers by concatenating the string "0." with an integer, which makes the output more predictable than necessary.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36732">https://nvd.nist.gov/vuln/detail/CVE-2020-36732</a></li>
<li><a href="https://github.com/brix/crypto-js/issues/254">https://github.com/brix/crypto-js/issues/254</a></li>
<li><a href="https://github.com/brix/crypto-js/issues/256">https://github.com/brix/crypto-js/issues/256</a></li>
<li><a href="https://github.com/brix/crypto-js/pull/257/commits/e4ac157d8b75b962d6538fc0b996e5d4d5a9466b">https://github.com/brix/crypto-js/pull/257/commits/e4ac157d8b75b962d6538fc0b996e5d4d5a9466b</a></li>
<li><a href="https://github.com/brix/crypto-js/compare/3.2.0...3.2.1">https://github.com/brix/crypto-js/compare/3.2.0...3.2.1</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-CRYPTOJS-548472">https://security.snyk.io/vuln/SNYK-JS-CRYPTOJS-548472</a></li>
<li><a href="https://github.com/brix/crypto-js/commit/e4ac157d8b75b962d6538fc0b996e5d4d5a9466b">https://github.com/brix/crypto-js/commit/e4ac157d8b75b962d6538fc0b996e5d4d5a9466b</a></li>
<li><a href="https://github.com/advisories/GHSA-3w3w-pxmm-2w2j">https://github.com/advisories/GHSA-3w3w-pxmm-2w2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3w3w-pxmm-2w2j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-12T03:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-xml-parser] fast-xml-parser vulnerable to Prototype Pollution through tag or attribute name]]></title>
        <id>https://github.com/advisories/GHSA-x3cc-x39p-42qx</id>
        <link href="https://github.com/advisories/GHSA-x3cc-x39p-42qx"/>
        <updated>2023-06-13T12:44:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>As a part of this vulnerability, user was able to se code using <code>__proto__</code> as a tag or attribute name.</p>
<pre><code class="language-js">const { XMLParser, XMLBuilder, XMLValidator} = require("fast-xml-parser");

let XMLdata = "&lt;__proto__&gt;&lt;polluted&gt;hacked&lt;/polluted&gt;&lt;/__proto__&gt;"

const parser = new XMLParser();
let jObj = parser.parse(XMLdata);

console.log(jObj.polluted) // should return hacked
</code></pre>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in v4.1.2</p>
<h3 id="workarounds">Workarounds</h3>
<p>User can check for "<strong>proto</strong>" in the XML string before parsing it to the parser.</p>
<h3 id="references">References</h3>
<p><a href="https://gist.github.com/Sudistark/a5a45bd0804d522a1392cb5023aa7ef7">https://gist.github.com/Sudistark/a5a45bd0804d522a1392cb5023aa7ef7</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-x3cc-x39p-42qx">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-x3cc-x39p-42qx</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/2b032a4f799c63d83991e4f992f1c68e4dd05804">https://github.com/NaturalIntelligence/fast-xml-parser/commit/2b032a4f799c63d83991e4f992f1c68e4dd05804</a></li>
<li><a href="https://gist.github.com/Sudistark/a5a45bd0804d522a1392cb5023aa7ef7">https://gist.github.com/Sudistark/a5a45bd0804d522a1392cb5023aa7ef7</a></li>
<li><a href="https://github.com/advisories/GHSA-x3cc-x39p-42qx">https://github.com/advisories/GHSA-x3cc-x39p-42qx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3cc-x39p-42qx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-13T12:44:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-json-patch] Starcounter-Jack JSON-Patch Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8gh8-hqwg-xf34</id>
        <link href="https://github.com/advisories/GHSA-8gh8-hqwg-xf34"/>
        <updated>2023-06-12T23:48:12.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in Starcounter-Jack JSON-Patch up to 3.1.0 and classified as problematic. This vulnerability affects unknown code. The manipulation leads to improperly controlled modification of object prototype attributes ('prototype pollution'). The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.1 can address this issue. The name of the patch is 7ad6af41eabb2d799f698740a91284d762c955c9. It is recommended to upgrade the affected component. VDB-216778 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4279">https://nvd.nist.gov/vuln/detail/CVE-2021-4279</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/pull/262">https://github.com/Starcounter-Jack/JSON-Patch/pull/262</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9">https://github.com/Starcounter-Jack/JSON-Patch/commit/7ad6af41eabb2d799f698740a91284d762c955c9</a></li>
<li><a href="https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1">https://github.com/Starcounter-Jack/JSON-Patch/releases/tag/3.1.1</a></li>
<li><a href="https://blog.effectrenan.com/pwn2win-2021-illusion-web-challenge/">https://blog.effectrenan.com/pwn2win-2021-illusion-web-challenge/</a></li>
<li><a href="https://www.huntr.dev/bounties/1-npm-fast-json-patch/">https://www.huntr.dev/bounties/1-npm-fast-json-patch/</a></li>
<li><a href="https://github.com/advisories/GHSA-8gh8-hqwg-xf34">https://github.com/advisories/GHSA-8gh8-hqwg-xf34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gh8-hqwg-xf34</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-25T21:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[progressbar.js] progressbar.js vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-89qm-hm2x-mxm3</id>
        <link href="https://github.com/advisories/GHSA-89qm-hm2x-mxm3"/>
        <updated>2023-06-12T18:53:33.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package progressbar.js are vulnerable to Prototype Pollution via the function extend() in the file utils.js.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26133">https://nvd.nist.gov/vuln/detail/CVE-2023-26133</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-PROGRESSBARJS-3184152">https://security.snyk.io/vuln/SNYK-JS-PROGRESSBARJS-3184152</a></li>
<li><a href="https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L18">https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L18</a></li>
<li><a href="https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L20">https://github.com/kimmobrunfeldt/progressbar.js/blob/74536b9eeeaaf51144706d918ed5a0a679631d96/src/utils.js#L20</a></li>
<li><a href="https://github.com/advisories/GHSA-89qm-hm2x-mxm3">https://github.com/advisories/GHSA-89qm-hm2x-mxm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-89qm-hm2x-mxm3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-12T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@keystone-6/core] @keystone-6/core's bundled cuid package known to be insecure]]></title>
        <id>https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</id>
        <link href="https://github.com/advisories/GHSA-5fp6-4xw3-xqq3"/>
        <updated>2023-06-12T18:37:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>cuid</code> package used by <code>@keystone-6/*</code> and upstream dependencies is deprecated and <a href="https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead">marked as insecure by the author</a>.</p>
<p>As reported by the author</p>
<blockquote>
<p>Cuid and other k-sortable and non-cryptographic ids (Ulid, ObjectId, KSUID, all UUIDs) are all insecure. Use @paralleldrive/cuid2 instead.</p>
</blockquote>
<h3 id="what-are-doing-about-this">What are doing about this?</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/issues/8282">We are waiting on Prisma</a> to add support for <a href="https://github.com/paralleldrive/cuid2"><code>cuid2</code></a></li>
<li>Alternatively, we might default to a random string ourselves</li>
</ul>
<h3 id="what-if-i-need-a-cuid">What if I need a <code>cuid</code>?</h3>
<p>The features marked as a security vulnerability by @paralleldrive are sometimes actually needed (<a href="https://github.com/paralleldrive/cuid#motivation">as written in the README of <code>cuid</code></a>) - the problem is the inherent risks that features like this can have.</p>
<p>You might actually want the features of a monotonically increasing (auto-increment, k-sortable), and timestamp-based id as part of your application, and keystone should support that - but you might not want them by <em>default</em>.
This is why this security advisory has been accepted by me (@dcousens), we currently use cuid identifiers by default, and that should change.</p>
<h3 id="impact">Impact</h3>
<p>I have accepted this security advisory on the basis that we don't need this kind of identifier typically, and the need for them should be driven by an application's requirements, not a convenient default.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keystonejs/keystone/security/advisories/GHSA-5fp6-4xw3-xqq3">https://github.com/keystonejs/keystone/security/advisories/GHSA-5fp6-4xw3-xqq3</a></li>
<li><a href="https://github.com/keystonejs/keystone/issues/8282#issuecomment-1586019823">https://github.com/keystonejs/keystone/issues/8282#issuecomment-1586019823</a></li>
<li><a href="https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead">https://github.com/paralleldrive/cuid#status-deprecated-due-to-security-use-cuid2-instead</a></li>
<li><a href="https://github.com/advisories/GHSA-5fp6-4xw3-xqq3">https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fp6-4xw3-xqq3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-06-12T18:37:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dottie] dottie vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-4gxf-g5gf-22h4</id>
        <link href="https://github.com/advisories/GHSA-4gxf-g5gf-22h4"/>
        <updated>2023-06-12T18:34:40.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dottie before 2.0.4 are vulnerable to Prototype Pollution due to insufficient checks, via the <code>set()</code> function and the current variable in the <code>/dottie.js</code> file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26132">https://nvd.nist.gov/vuln/detail/CVE-2023-26132</a></li>
<li><a href="https://github.com/mickhansen/dottie.js/commit/7d3aee1c9c3c842720506e131de7e181e5c8db68">https://github.com/mickhansen/dottie.js/commit/7d3aee1c9c3c842720506e131de7e181e5c8db68</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DOTTIE-3332763">https://security.snyk.io/vuln/SNYK-JS-DOTTIE-3332763</a></li>
<li><a href="https://github.com/mickhansen/dottie.js/blob/b48e22714aae4489ea6276452f22cc61980ba5a4/dottie.js#L107">https://github.com/mickhansen/dottie.js/blob/b48e22714aae4489ea6276452f22cc61980ba5a4/dottie.js#L107</a></li>
<li><a href="https://github.com/advisories/GHSA-4gxf-g5gf-22h4">https://github.com/advisories/GHSA-4gxf-g5gf-22h4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gxf-g5gf-22h4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-10T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snowflake-sdk] Snowflake NodeJS Driver vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-h53w-7qw7-vh5c</id>
        <link href="https://github.com/advisories/GHSA-h53w-7qw7-vh5c"/>
        <updated>2023-06-09T22:53:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="issue">Issue</h3>
<p>Snowflake was informed via our bug bounty program of a command injection vulnerability in the Snowflake NodeJS driver via SSO browser URL authentication.</p>
<h3 id="impacted-driver-package">Impacted driver package:</h3>
<p>snowflake-connector-nodejs</p>
<h3 id="impacted-version-range">Impacted version range:</h3>
<p>before <a href="https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes">Version 1.6.21</a> </p>
<h3 id="attack-scenario">Attack Scenario</h3>
<p>In order to exploit the potential for command injection, an attacker would need to be successful in (1) establishing a malicious resource and (2) redirecting users to utilize the resource. The attacker could set up a malicious, publicly accessible server which responds to the SSO URL with an attack payload. If the attacker then tricked a user into visiting the maliciously crafted connection URL, the user’s local machine would render the malicious payload, leading to a remote code execution. </p>
<p>This attack scenario can be mitigated through URL whitelisting as well as common anti-phishing resources.  </p>
<h3 id="solution">Solution</h3>
<p>On April 18, 2023, Snowflake merged a patch that fixed a command injection vulnerability in the Snowflake NodeJS driver via SSO browser URL authentication. The vulnerability affected the Snowflake NodeJS driver before Version 1.6.21. We strongly recommend users upgrade to Version 1.6.21 as soon as possible via the following resources: <a href="https://docs.snowflake.com/en/developer-guide/node-js/nodejs-driver">Snowflake NodeJS Driver</a></p>
<h3 id="additional-information">Additional Information</h3>
<p>If you discover a security vulnerability in one of our products or websites, please report the issue to HackerOne. For more information, please see our <a href="https://hackerone.com/snowflake?type=team">Vulnerability Disclosure Policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c">https://github.com/snowflakedb/snowflake-connector-nodejs/security/advisories/GHSA-h53w-7qw7-vh5c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34232">https://nvd.nist.gov/vuln/detail/CVE-2023-34232</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465">https://github.com/snowflakedb/snowflake-connector-nodejs/pull/465</a></li>
<li><a href="https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a">https://github.com/snowflakedb/snowflake-connector-nodejs/commit/0c9622ae12cd7d627df404b73a783b4a5f60728a</a></li>
<li><a href="https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes">https://community.snowflake.com/s/article/Node-js-Driver-Release-Notes</a></li>
<li><a href="https://github.com/advisories/GHSA-h53w-7qw7-vh5c">https://github.com/advisories/GHSA-h53w-7qw7-vh5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h53w-7qw7-vh5c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T22:53:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gatsby] Gatsby develop server has Local File Inclusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</id>
        <link href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc"/>
        <updated>2023-06-09T22:52:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Gatsby framework prior to versions 4.25.7 and 5.9.1 contain a Local File Inclusion vulnerability in the <code>__file-code-frame</code> and <code>__original-stack-frame</code> paths, exposed when running the Gatsby develop server (<code>gatsby develop</code>).</p>
<p>The following steps can be used to reproduce the vulnerability:</p>
<pre><code># Create a new Gatsby project
$ npm init gatsby
$ cd my-gatsby-site

# Start the Gatsby develop server
$ gatsby develop

# Execute the Local File Inclusion vulnerability in __file-code-frame
$ curl "http://127.0.0.1:8000/__file-code-frame?filePath=/etc/passwd&amp;lineNumber=1"

# Execute the Local File Inclusion vulnerability in __original-stack-frame
$ curl "http://127.0.0.1:8000/__original-stack-frame?moduleId=/etc/hosts&amp;lineNumber=1&amp;skipSourceMap=1"
</code></pre>
<p>It should be noted that by default <code>gatsby develop</code> is only accessible via the localhost <code>127.0.0.1</code>, and one would need to intentionally expose the server to other interfaces to exploit this vulnerability by using server options such as <code>--host 0.0.0.0</code>, <code>-H 0.0.0.0</code>, or the <code>GATSBY_HOST=0.0.0.0</code> environment variable.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced in <code>gatsby@5.9.1</code> and <code>gatsby@4.25.7</code> which mitigates the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As stated above, by default <code>gatsby develop</code> is only exposed to the localhost <code>127.0.0.1</code>.  For those using the develop server in the default configuration no risk is posed.  If other ranges are required, preventing the develop server from being exposed to untrusted interfaces or IP address ranges would mitigate the risk from this vulnerability.</p>
<p>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Maxwell Garrett of Assetnote for bringing the <code>__file-code-frame</code> issue to our attention.</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@gatsbyjs.com">security@gatsbyjs.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34238">https://nvd.nist.gov/vuln/detail/CVE-2023-34238</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c">https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7">https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7</a></li>
<li><a href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/advisories/GHSA-c6f8-8r25-c4gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T22:52:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gatsby] Gatsby develop server has Local File Inclusion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</id>
        <link href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc"/>
        <updated>2023-06-09T22:52:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Gatsby framework prior to versions 4.25.7 and 5.9.1 contain a Local File Inclusion vulnerability in the <code>__file-code-frame</code> and <code>__original-stack-frame</code> paths, exposed when running the Gatsby develop server (<code>gatsby develop</code>).</p>
<p>The following steps can be used to reproduce the vulnerability:</p>
<pre><code># Create a new Gatsby project
$ npm init gatsby
$ cd my-gatsby-site

# Start the Gatsby develop server
$ gatsby develop

# Execute the Local File Inclusion vulnerability in __file-code-frame
$ curl "http://127.0.0.1:8000/__file-code-frame?filePath=/etc/passwd&amp;lineNumber=1"

# Execute the Local File Inclusion vulnerability in __original-stack-frame
$ curl "http://127.0.0.1:8000/__original-stack-frame?moduleId=/etc/hosts&amp;lineNumber=1&amp;skipSourceMap=1"
</code></pre>
<p>It should be noted that by default <code>gatsby develop</code> is only accessible via the localhost <code>127.0.0.1</code>, and one would need to intentionally expose the server to other interfaces to exploit this vulnerability by using server options such as <code>--host 0.0.0.0</code>, <code>-H 0.0.0.0</code>, or the <code>GATSBY_HOST=0.0.0.0</code> environment variable.</p>
<h3 id="patches">Patches</h3>
<p>A patch has been introduced in <code>gatsby@5.9.1</code> and <code>gatsby@4.25.7</code> which mitigates the issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As stated above, by default <code>gatsby develop</code> is only exposed to the localhost <code>127.0.0.1</code>.  For those using the develop server in the default configuration no risk is posed.  If other ranges are required, preventing the develop server from being exposed to untrusted interfaces or IP address ranges would mitigate the risk from this vulnerability.</p>
<p>We encourage projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.</p>
<h3 id="credits">Credits</h3>
<p>We would like to thank Maxwell Garrett of Assetnote for bringing the <code>__file-code-frame</code> issue to our attention.</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@gatsbyjs.com">security@gatsbyjs.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/gatsbyjs/gatsby/security/advisories/GHSA-c6f8-8r25-c4gc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34238">https://nvd.nist.gov/vuln/detail/CVE-2023-34238</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c">https://github.com/gatsbyjs/gatsby/commit/ae5a654eb346b2e7a9d341b809b2f82d34c0f17c</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7">https://github.com/gatsbyjs/gatsby/commit/fc22f4ba3ad7ca5fb3592f38f4f0ca8ae60b4bf7</a></li>
<li><a href="https://github.com/advisories/GHSA-c6f8-8r25-c4gc">https://github.com/advisories/GHSA-c6f8-8r25-c4gc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6f8-8r25-c4gc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-09T22:52:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@udecode/plate-link] @udecode/plate-link does not sanitize URLs to prevent use of the `javascript:` scheme]]></title>
        <id>https://github.com/advisories/GHSA-4882-hxpr-hrvm</id>
        <link href="https://github.com/advisories/GHSA-4882-hxpr-hrvm"/>
        <updated>2023-06-09T22:41:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Affected versions of the link plugin and link UI component do not sanitize URLs to prevent use of the <code>javascript:</code> scheme. As a result, links with JavaScript URLs can be inserted into the Plate editor through various means, including opening or pasting malicious content.</p>
<h3 id="patches">Patches</h3>
<p><code>@udecode/plate-link</code> 20.0.0 resolves this issue by introducing an <code>allowedSchemes</code> option to the link plugin, defaulting to <code>['http', 'https', 'mailto', 'tel']</code>. URLs using a scheme that isn't in this list will not be rendered to the DOM.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are unable to update <code>@udecode/plate-link</code> to version 20.0.0, we recommend overriding the <code>LinkElement</code> and <code>PlateFloatingLink</code> components with implementations that explicitly check the URL scheme before rendering any anchor elements.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm">https://github.com/udecode/plate/security/advisories/GHSA-4882-hxpr-hrvm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34245">https://nvd.nist.gov/vuln/detail/CVE-2023-34245</a></li>
<li><a href="https://github.com/udecode/plate/pull/2240">https://github.com/udecode/plate/pull/2240</a></li>
<li><a href="https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7">https://github.com/udecode/plate/commit/93dd5712854660874900ae12e4d8e6ff28089eb7</a></li>
<li><a href="https://github.com/advisories/GHSA-4882-hxpr-hrvm">https://github.com/advisories/GHSA-4882-hxpr-hrvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4882-hxpr-hrvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-09T22:41:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning]]></title>
        <id>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</id>
        <link href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"/>
        <updated>2023-06-08T18:03:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>
<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>
<h3 id="credit">Credit</h3>
<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>
<h3 id="references">References</h3>
<p><a href="https://www.coinspect.com/openzeppelin-governor-dos/">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34234">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-08T18:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts's governor proposal creation may be blocked by frontrunning]]></title>
        <id>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</id>
        <link href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2"/>
        <updated>2023-06-08T18:03:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By frontrunning the creation of a proposal, an attacker can become the proposer and gain the ability to cancel it. The attacker can do this repeatedly to try to prevent a proposal from being proposed at all.</p>
<p>This impacts the <code>Governor</code> contract in v4.9.0 only, and the <code>GovernorCompatibilityBravo</code> contract since v4.3.0.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in 4.9.1 by introducing opt-in frontrunning protection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Submit the proposal creation transaction to an endpoint with frontrunning protection.</p>
<h3 id="credit">Credit</h3>
<p>Reported by Lior Abadi and Joaquin Pereyra from Coinspect.</p>
<h3 id="references">References</h3>
<p><a href="https://www.coinspect.com/openzeppelin-governor-dos/">https://www.coinspect.com/openzeppelin-governor-dos/</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34234">https://nvd.nist.gov/vuln/detail/CVE-2023-34234</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/d9474327a492f9f310f31bc53f38dbea56ed9a57</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1">https://github.com/OpenZeppelin/openzeppelin-contracts/releases/tag/v4.9.1</a></li>
<li><a href="https://github.com/advisories/GHSA-5h3x-9wvq-w4m2">https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h3x-9wvq-w4m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-08T18:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fast-xml-parser] fast-xml-parser vulnerable to Regex Injection via Doctype Entities]]></title>
        <id>https://github.com/advisories/GHSA-6w63-h3fj-q4vw</id>
        <link href="https://github.com/advisories/GHSA-6w63-h3fj-q4vw"/>
        <updated>2023-06-06T18:50:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>"fast-xml-parser" allows special characters in entity names, which are not escaped or sanitized. Since the entity name is used for creating a regex for searching and replacing entities in the XML body, an attacker can abuse it for DoS attacks. By crafting an entity name that results in an intentionally bad performing regex and utilizing it in the entity replacement step of the parser, this can cause the parser to stall for an indefinite amount of time.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been resolved in v4.2.4</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid using DOCTYPE parsing by <code>processEntities: false</code> option.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/NaturalIntelligence/fast-xml-parser/security/advisories/GHSA-6w63-h3fj-q4vw</a></li>
<li><a href="https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c">https://github.com/NaturalIntelligence/fast-xml-parser/commit/39b0e050bb909e8499478657f84a3076e39ce76c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34104">https://nvd.nist.gov/vuln/detail/CVE-2023-34104</a></li>
<li><a href="https://github.com/advisories/GHSA-6w63-h3fj-q4vw">https://github.com/advisories/GHSA-6w63-h3fj-q4vw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w63-h3fj-q4vw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-06T17:33:13.000Z</published>
    </entry>
</feed>