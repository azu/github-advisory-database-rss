<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2022-10-09T23:01:17.509Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[tiny-csrf] tiny-csrf has openly visible CSRF tokens]]></title>
        <id>https://github.com/advisories/GHSA-pj2c-h76w-vv6f</id>
        <link href="https://github.com/advisories/GHSA-pj2c-h76w-vv6f"/>
        <updated>2022-10-07T21:23:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Weak encryption on CSRF so tokens can be read by malicious attackers. </p>
<h3 id="patches">Patches</h3>
<p>Problems have been patched as of v1.1.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to v1.1.0</p>
<h3 id="references">References</h3>
<p><a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html</a> </p>
<h3 id="for-more-information">For more information</h3>
<p>Submit an issue at <a href="https://github.com/valexandersaulys/tiny-csrf">the github repo</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/valexandersaulys/tiny-csrf/security/advisories/GHSA-pj2c-h76w-vv6f">https://github.com/valexandersaulys/tiny-csrf/security/advisories/GHSA-pj2c-h76w-vv6f</a></li>
<li><a href="https://github.com/valexandersaulys/tiny-csrf/commit/8eead6da3b56e290512bbe8d20c2c5df3be317ba">https://github.com/valexandersaulys/tiny-csrf/commit/8eead6da3b56e290512bbe8d20c2c5df3be317ba</a></li>
<li><a href="https://github.com/advisories/GHSA-pj2c-h76w-vv6f">https://github.com/advisories/GHSA-pj2c-h76w-vv6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj2c-h76w-vv6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-07T21:23:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[v8n] v8n vulnerable to Inefficient Regular Expression Complexity]]></title>
        <id>https://github.com/advisories/GHSA-xrx9-gj26-5wx9</id>
        <link href="https://github.com/advisories/GHSA-xrx9-gj26-5wx9"/>
        <updated>2022-10-07T07:33:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Inefficient regular expression complexity of <code>lowercase()</code> and <code>uppercase()</code> regex could lead to a denial of service attack. With a formed payload <code>'a' + 'a'.repeat(i) + 'A'</code>, only 32 characters payload could take 29443 ms time execution when testing <code>lowercase()</code>. The same issue happens with <code>uppercase()</code>.</p>
<h3 id="patches">Patches</h3>
<p>v1.5.1</p>
<h3 id="references">References</h3>
<p><a href="https://huntr.dev/bounties/2d92f644-593b-43b4-bfd1-c8042ac60609">huntr.dev report</a>
<a href="https://snyk.io/blog/redos-and-catastrophic-backtracking/"><em>Regular Expression Denial of Service (ReDoS) and Catastrophic Backtracking</em></a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/imbrn/v8n">v8n issues list</a></li>
<li>Email us at <a href="mailto:brunodev02221@gmail.com">brunodev02221@gmail.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/imbrn/v8n/security/advisories/GHSA-xrx9-gj26-5wx9">https://github.com/imbrn/v8n/security/advisories/GHSA-xrx9-gj26-5wx9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-35923">https://nvd.nist.gov/vuln/detail/CVE-2022-35923</a></li>
<li><a href="https://github.com/imbrn/v8n/commit/92393862156fad190c05ec3f6e2bc73308dcd2f9">https://github.com/imbrn/v8n/commit/92393862156fad190c05ec3f6e2bc73308dcd2f9</a></li>
<li><a href="https://huntr.dev/bounties/2d92f644-593b-43b4-bfd1-c8042ac60609/">https://huntr.dev/bounties/2d92f644-593b-43b4-bfd1-c8042ac60609/</a></li>
<li><a href="https://github.com/advisories/GHSA-xrx9-gj26-5wx9">https://github.com/advisories/GHSA-xrx9-gj26-5wx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrx9-gj26-5wx9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-07T07:33:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] automattic/mongoose vulnerable to Prototype pollution via Schema.path]]></title>
        <id>https://github.com/advisories/GHSA-f825-f98c-gj3g</id>
        <link href="https://github.com/advisories/GHSA-f825-f98c-gj3g"/>
        <updated>2022-10-07T03:03:07.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The <code>Schema.path()</code> function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2564">https://nvd.nist.gov/vuln/detail/CVE-2022-2564</a></li>
<li><a href="https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8">https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8</a></li>
<li><a href="https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd">https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141">https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6">https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6</a></li>
<li><a href="https://github.com/advisories/GHSA-f825-f98c-gj3g">https://github.com/advisories/GHSA-f825-f98c-gj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f825-f98c-gj3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-29T00:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[generator-jhipster] generator-jhipster vulnerable to login check Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-8w7w-67mw-r5p7</id>
        <link href="https://github.com/advisories/GHSA-8w7w-67mw-r5p7"/>
        <updated>2022-10-06T22:56:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For applications using JWT or session-based authentication (not OIDC), users can input a login string which can cause a denial of service, as parsing it will be too complex.</p>
<p>Here is an example: <a href="https://gist.github.com/atomfrede/311f8a9c6eb74c5c5226af0481155207">https://gist.github.com/atomfrede/311f8a9c6eb74c5c5226af0481155207</a></p>
<p>The vulnerable expression was never officially released. So only when you generated an application from the master branch between 6.8.0 and 6.9.0 your generated application may be vulnerable.</p>
<h3 id="patches">Patches</h3>
<p>If you only used official releases you don't need to patch your application.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you have created an application from the master branch, you need to adapt the <code>LOGIN_REGEX</code> in <code>Constants.java</code>. If your regex is </p>
<pre><code>^[a-zA-Z0-9!#$&amp;'*+=?^_`{|}~.-]+@?[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$
</code></pre>
<p>you need to change it too </p>
<pre><code>^(?&gt;[a-zA-Z0-9!$&amp;*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)|(?&gt;[_.@A-Za-z0-9-]+)$
</code></pre>
<p>If you still have <code>^[_.@A-Za-z0-9-]*$</code> there is no need to change it, except you would like to support login with <code>+</code> sign (e.g. <code>foo+bar@example.com</code>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></li>
<li><a href="https://snyk.io/blog/redos-and-catastrophic-backtracking/">https://snyk.io/blog/redos-and-catastrophic-backtracking/</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jhipster/generator-jhipster/security/advisories/GHSA-8w7w-67mw-r5p7">https://github.com/jhipster/generator-jhipster/security/advisories/GHSA-8w7w-67mw-r5p7</a></li>
<li><a href="https://gist.github.com/atomfrede/311f8a9c6eb74c5c5226af0481155207">https://gist.github.com/atomfrede/311f8a9c6eb74c5c5226af0481155207</a></li>
<li><a href="https://www.jhipster.tech/2020/05/17/jhipster-release-6.9.0.html">https://www.jhipster.tech/2020/05/17/jhipster-release-6.9.0.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8w7w-67mw-r5p7">https://github.com/advisories/GHSA-8w7w-67mw-r5p7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8w7w-67mw-r5p7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-06T22:56:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snyk-go-plugin] Snyk CLI affected by Command Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</id>
        <link href="https://github.com/advisories/GHSA-hpqj-7cj6-hfj8"/>
        <updated>2022-10-06T18:20:47.000Z</updated>
        <content type="html"><![CDATA[<p>Snyk CLI before 1.996.0 allows arbitrary command execution, affecting Snyk IDE plugins and the snyk npm package. Exploitation could follow from the common practice of viewing untrusted files in the Visual Studio Code editor, for example. The original demonstration was with shell metacharacters in the vendor.json ignore field, affecting snyk-go-plugin before 1.19.1. This affects, for example, the Snyk TeamCity plugin (which does not update automatically) before 20220930.142957.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-40764">https://nvd.nist.gov/vuln/detail/CVE-2022-40764</a></li>
<li><a href="https://github.com/snyk/cli/releases/tag/v1.996.0">https://github.com/snyk/cli/releases/tag/v1.996.0</a></li>
<li><a href="https://github.com/snyk/snyk-go-plugin/releases/tag/v1.19.1">https://github.com/snyk/snyk-go-plugin/releases/tag/v1.19.1</a></li>
<li><a href="https://support.snyk.io/hc/en-us/articles/7015908293789-CVE-2022-40764-Command-Injection-vulnerability-affecting-Snyk-CLI-versions-prior-to-1-996-0">https://support.snyk.io/hc/en-us/articles/7015908293789-CVE-2022-40764-Command-Injection-vulnerability-affecting-Snyk-CLI-versions-prior-to-1-996-0</a></li>
<li><a href="https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/">https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/</a></li>
<li><a href="https://github.com/advisories/GHSA-hpqj-7cj6-hfj8">https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-04T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[snyk] Snyk CLI affected by Command Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</id>
        <link href="https://github.com/advisories/GHSA-hpqj-7cj6-hfj8"/>
        <updated>2022-10-06T18:20:47.000Z</updated>
        <content type="html"><![CDATA[<p>Snyk CLI before 1.996.0 allows arbitrary command execution, affecting Snyk IDE plugins and the snyk npm package. Exploitation could follow from the common practice of viewing untrusted files in the Visual Studio Code editor, for example. The original demonstration was with shell metacharacters in the vendor.json ignore field, affecting snyk-go-plugin before 1.19.1. This affects, for example, the Snyk TeamCity plugin (which does not update automatically) before 20220930.142957.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-40764">https://nvd.nist.gov/vuln/detail/CVE-2022-40764</a></li>
<li><a href="https://github.com/snyk/cli/releases/tag/v1.996.0">https://github.com/snyk/cli/releases/tag/v1.996.0</a></li>
<li><a href="https://github.com/snyk/snyk-go-plugin/releases/tag/v1.19.1">https://github.com/snyk/snyk-go-plugin/releases/tag/v1.19.1</a></li>
<li><a href="https://support.snyk.io/hc/en-us/articles/7015908293789-CVE-2022-40764-Command-Injection-vulnerability-affecting-Snyk-CLI-versions-prior-to-1-996-0">https://support.snyk.io/hc/en-us/articles/7015908293789-CVE-2022-40764-Command-Injection-vulnerability-affecting-Snyk-CLI-versions-prior-to-1-996-0</a></li>
<li><a href="https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/">https://www.imperva.com/blog/how-scanning-your-projects-for-security-issues-can-lead-to-remote-code-execution/</a></li>
<li><a href="https://github.com/advisories/GHSA-hpqj-7cj6-hfj8">https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpqj-7cj6-hfj8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-04T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[require-node] Arbitrary Code Execution in require-node]]></title>
        <id>https://github.com/advisories/GHSA-8j6j-4h2c-c65p</id>
        <link href="https://github.com/advisories/GHSA-8j6j-4h2c-c65p"/>
        <updated>2022-10-05T14:38:15.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>require-node</code> prior to 1.3.4 for 1.x and 2.0.4 for 2.x are vulnerable to Arbitrary Code Execution. The package fails to sanitize requests to the <code>require-node</code> endpoint, allowing attackers to execute arbitrary code in the server through the injection of OS commands in the request body.</p>
<h2 id="recommendation">Recommendation</h2>
<ul>
<li>If you are using 1.x, upgrade to version 1.3.4 or later.</li>
<li>If you are using 2.x, upgrade to version 2.0.4 or later.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/1015">https://www.npmjs.com/advisories/1015</a></li>
<li><a href="https://github.com/advisories/GHSA-8j6j-4h2c-c65p">https://github.com/advisories/GHSA-8j6j-4h2c-c65p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8j6j-4h2c-c65p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-03T17:02:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jquery] Denial of Service in jquery]]></title>
        <id>https://github.com/advisories/GHSA-mhpp-875w-9cpv</id>
        <link href="https://github.com/advisories/GHSA-mhpp-875w-9cpv"/>
        <updated>2022-10-05T14:29:42.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>jquery</code> use a lowercasing logic on attribute names. When given a boolean attribute with a name that contains uppercase characters, <code>jquery</code> enters into an infinite recursion loop, exceeding the call stack limit, and resulting in a denial of service condition.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 3.0.0 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10707">https://nvd.nist.gov/vuln/detail/CVE-2016-10707</a></li>
<li><a href="https://github.com/jquery/jquery/issues/3133">https://github.com/jquery/jquery/issues/3133</a></li>
<li><a href="https://github.com/advisories/GHSA-mhpp-875w-9cpv">https://github.com/advisories/GHSA-mhpp-875w-9cpv</a></li>
<li><a href="https://www.npmjs.com/advisories/330">https://www.npmjs.com/advisories/330</a></li>
<li><a href="https://github.com/jquery/jquery/pull/3134">https://github.com/jquery/jquery/pull/3134</a></li>
<li><a href="https://snyk.io/vuln/npm:jquery:20160529">https://snyk.io/vuln/npm:jquery:20160529</a></li>
<li><a href="https://github.com/jquery/jquery/issues/3133#issuecomment-358978489">https://github.com/jquery/jquery/issues/3133#issuecomment-358978489</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mhpp-875w-9cpv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-01-22T13:32:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-native-reanimated] react-native-reanimated vulnerable to ReDoS]]></title>
        <id>https://github.com/advisories/GHSA-2j79-8pqc-r7x6</id>
        <link href="https://github.com/advisories/GHSA-2j79-8pqc-r7x6"/>
        <updated>2022-10-04T21:16:38.000Z</updated>
        <content type="html"><![CDATA[<p>The package react-native-reanimated before 3.0.0-rc.1 is vulnerable to Regular Expression Denial of Service (ReDoS) due to improper usage of regular expression in the parser of Colors.js.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24373">https://nvd.nist.gov/vuln/detail/CVE-2022-24373</a></li>
<li><a href="https://github.com/software-mansion/react-native-reanimated/pull/3382">https://github.com/software-mansion/react-native-reanimated/pull/3382</a></li>
<li><a href="https://github.com/software-mansion/react-native-reanimated/pull/3382/commits/7adf06d0c59382d884a04be86a96eede3d0432fa">https://github.com/software-mansion/react-native-reanimated/pull/3382/commits/7adf06d0c59382d884a04be86a96eede3d0432fa</a></li>
<li><a href="https://github.com/software-mansion/react-native-reanimated/releases/tag/3.0.0-rc.1">https://github.com/software-mansion/react-native-reanimated/releases/tag/3.0.0-rc.1</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-REACTNATIVEREANIMATED-2949507">https://security.snyk.io/vuln/SNYK-JS-REACTNATIVEREANIMATED-2949507</a></li>
<li><a href="https://github.com/advisories/GHSA-2j79-8pqc-r7x6">https://github.com/advisories/GHSA-2j79-8pqc-r7x6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2j79-8pqc-r7x6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-01T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[css-what] css-what vulnerable to ReDoS due to use of insecure regular expression]]></title>
        <id>https://github.com/advisories/GHSA-p28h-cc7q-c4fg</id>
        <link href="https://github.com/advisories/GHSA-p28h-cc7q-c4fg"/>
        <updated>2022-10-05T13:59:32.000Z</updated>
        <content type="html"><![CDATA[<p>The package css-what before 2.1.3 is vulnerable to Regular Expression Denial of Service (ReDoS) due to the use of insecure regular expression in the <code>re_attr</code> variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21222">https://nvd.nist.gov/vuln/detail/CVE-2022-21222</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-CSSWHAT-3035488">https://security.snyk.io/vuln/SNYK-JS-CSSWHAT-3035488</a></li>
<li><a href="https://github.com/fb55/css-what/commit/dc510929790da6617e7aa93a616498b22f6a6b72">https://github.com/fb55/css-what/commit/dc510929790da6617e7aa93a616498b22f6a6b72</a></li>
<li><a href="https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js#23L12">https://github.com/fb55/css-what/blob/a38effd5a8f5506d75c7f8f13cbd8c76248a3860/index.js#23L12</a></li>
<li><a href="https://github.com/advisories/GHSA-p28h-cc7q-c4fg">https://github.com/advisories/GHSA-p28h-cc7q-c4fg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p28h-cc7q-c4fg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-01T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[isolated-vm] isolated-vm has vulnerable CachedDataOptions in API]]></title>
        <id>https://github.com/advisories/GHSA-2jjq-x548-rhpv</id>
        <link href="https://github.com/advisories/GHSA-2jjq-x548-rhpv"/>
        <updated>2022-10-06T19:30:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the untrusted v8 cached data is passed to the API through CachedDataOptions, the attackers can bypass the sandbox and run arbitrary code in the nodejs process. There are currently no known fixed versions or workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/laverdet/isolated-vm/security/advisories/GHSA-2jjq-x548-rhpv">https://github.com/laverdet/isolated-vm/security/advisories/GHSA-2jjq-x548-rhpv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39266">https://nvd.nist.gov/vuln/detail/CVE-2022-39266</a></li>
<li><a href="https://github.com/advisories/GHSA-2jjq-x548-rhpv">https://github.com/advisories/GHSA-2jjq-x548-rhpv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jjq-x548-rhpv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-30T22:59:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] matrix-js-sdk subject to user impersonation due to key/device identifier confusion in SAS verification]]></title>
        <id>https://github.com/advisories/GHSA-5w8r-8pgj-5jmf</id>
        <link href="https://github.com/advisories/GHSA-5w8r-8pgj-5jmf"/>
        <updated>2022-09-30T22:46:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>An attacker cooperating with a malicious homeserver could interfere with the verification flow between two users, injecting its own cross-signing user identity in place of one of the users’ identities, leading to the other device trusting/verifying the user identity under the control of the homeserver instead of the intended one.</p>
<p>The vulnerability is a bug in the matrix-js-sdk, caused by checking and signing user identities and devices in two separate steps, and inadequately fixing the keys to be signed between those steps.</p>
<p>Even though the attack is partly made possible due to the design decision of treating cross-signing user identities as Matrix devices on the server side (with their device ID set to the public part of the user identity key), no other examined implementations were vulnerable.</p>
<h2 id="patches">Patches</h2>
<p>The matrix-js-sdk has been modified to double check that the key signed is the one that was verified instead of just referencing the key by ID. An additional check has been made to report an error when one of the device ID matches a cross-signing key.</p>
<h2 id="workarounds">Workarounds</h2>
<p>As this attack requires coordination between a malicious homeserver and an attacker -- if you trust your homeserver no particular workaround is needed. </p>
<p>As a potential way of detecting compromise, it’s possible to review your device list or the device list of other users for devices with IDs in the form of a base64 cross-signing key (<code>5XaczGNlfz0bl8R1IX5qn+tBoue2tWJqLMh+SDUuvCk</code>) instead of classical device ID (<code>SEHACYDHMG</code>).</p>
<h2 id="references">References</h2>
<p>Blog post: <a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-5w8r-8pgj-5jmf">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-5w8r-8pgj-5jmf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39250">https://nvd.nist.gov/vuln/detail/CVE-2022-39250</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76">https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0">https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0</a></li>
<li><a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></li>
<li><a href="https://github.com/advisories/GHSA-5w8r-8pgj-5jmf">https://github.com/advisories/GHSA-5w8r-8pgj-5jmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5w8r-8pgj-5jmf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-30T22:46:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opencc] Open Chinese Convert subject to Denial of Service via Out-of-bounds Read]]></title>
        <id>https://github.com/advisories/GHSA-9qh2-6fxg-9m4g</id>
        <link href="https://github.com/advisories/GHSA-9qh2-6fxg-9m4g"/>
        <updated>2022-09-30T23:14:00.000Z</updated>
        <content type="html"><![CDATA[<p>Open Chinese Convert (OpenCC) 1.0.5 allows attackers to cause a denial of service (segmentation fault) because BinaryDict::NewFromFile in BinaryDict.cpp may have out-of-bounds keyOffset and valueOffset values via a crafted .ocd file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16982">https://nvd.nist.gov/vuln/detail/CVE-2018-16982</a></li>
<li><a href="https://github.com/BYVoid/OpenCC/issues/303">https://github.com/BYVoid/OpenCC/issues/303</a></li>
<li><a href="https://github.com/BYVoid/OpenCC/pull/309">https://github.com/BYVoid/OpenCC/pull/309</a></li>
<li><a href="https://github.com/BYVoid/OpenCC/pull/560">https://github.com/BYVoid/OpenCC/pull/560</a></li>
<li><a href="https://github.com/BYVoid/OpenCC/pull/560/commits/e1b8c7949738100e4747dd4109ef1f16e1bd99c4">https://github.com/BYVoid/OpenCC/pull/560/commits/e1b8c7949738100e4747dd4109ef1f16e1bd99c4</a></li>
<li><a href="https://github.com/advisories/GHSA-9qh2-6fxg-9m4g">https://github.com/advisories/GHSA-9qh2-6fxg-9m4g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9qh2-6fxg-9m4g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:55:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@next-auth/upstash-redis-adapter] Upstash Adapter missing token verification]]></title>
        <id>https://github.com/advisories/GHSA-4rxr-27mm-mxq9</id>
        <link href="https://github.com/advisories/GHSA-4rxr-27mm-mxq9"/>
        <updated>2022-09-30T05:31:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Applications that use <code>next-auth</code> Email Provider and <code>@next-auth/upstash-redis-adapter</code> before v3.0.2 are affected.</p>
<h3 id="description">Description</h3>
<p>The Upstash Redis adapter implementation did not check for both the identifier (email) and the token, but only checking for the identifier when verifying the token in the email callback flow. An attacker who knows about the victim's email could easily sign in as the victim, given the attacker also knows about the verification token's expired duration. </p>
<h3 id="patches">Patches</h3>
<p>The vulnerability is patched in v3.0.2.
To upgrade, run one of the following:</p>
<pre><code>npm i @next-auth/upstash-redis-adapter@latest
</code></pre>
<pre><code>yarn add @next-auth/upstash-redis-adapter@latest
</code></pre>
<pre><code>pnpm add @next-auth/upstash-redis-adapter@latest
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>Using Advanced Initialization, developers can check the requests and compare the query's token and identifier before proceeding. Below is an example of how to do this: (Upgrading is still strongly recommended)</p>
<pre><code class="language-js">import { createHash } from "crypto"
export default async function auth(req, res) {
  if (req.method === "POST" &amp;&amp; req.action === "callback") {
    const token = req.query?.token
    const identifier = req.query?.email
    function hashToken(token: string) {
      const provider = authOptions.providers.find((p) =&gt; p.id === "email")
      const secret = authOptions.secret
      return (
        createHash("sha256")
          // Prefer provider specific secret, but use default secret if none specified
          .update(`${token}${provider.secret ?? secret}`)
          .digest("hex")
      )
    }
    const hashedToken = hashToken(token)

    const invite = await authOptions.adapter.useVerificationToken?.({
      identifier,
      token: hashedToken,
    })
    if (invite.token !== hashedToken) {
      res.status(400).json({ error: "Invalid token" })
    }
  }
  return await NextAuth(req, res, authOptions)
}
</code></pre>
<h3 id="references">References</h3>
<p>EmailProvider: <a href="https://next-auth.js.org/providers/email">https://next-auth.js.org/providers/email</a>
Advanced Initialization: <a href="https://next-auth.js.org/configuration/initialization#advanced-initialization">https://next-auth.js.org/configuration/initialization#advanced-initialization</a>
Upstash Redis Adapter: <a href="https://next-auth.js.org/adapters/upstash-redis">https://next-auth.js.org/adapters/upstash-redis</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any concerns, we request responsible disclosure, outlined here: <a href="https://next-auth.js.org/security#reporting-a-vulnerability">https://next-auth.js.org/security#reporting-a-vulnerability</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nextauthjs/next-auth/security/advisories/GHSA-4rxr-27mm-mxq9">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-4rxr-27mm-mxq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39263">https://nvd.nist.gov/vuln/detail/CVE-2022-39263</a></li>
<li><a href="https://github.com/nextauthjs/next-auth/commit/d16e04848ee703cf797724194d4ad2907fe125a9">https://github.com/nextauthjs/next-auth/commit/d16e04848ee703cf797724194d4ad2907fe125a9</a></li>
<li><a href="https://github.com/advisories/GHSA-4rxr-27mm-mxq9">https://github.com/advisories/GHSA-4rxr-27mm-mxq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4rxr-27mm-mxq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-30T05:31:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/strapi] Strapi mishandles hidden attributes within admin API responses]]></title>
        <id>https://github.com/advisories/GHSA-4phg-hpqm-c3j4</id>
        <link href="https://github.com/advisories/GHSA-4phg-hpqm-c3j4"/>
        <updated>2022-10-03T19:45:16.000Z</updated>
        <content type="html"><![CDATA[<p>Strapi before 3.6.10 and 4.x before 4.1.10 mishandles hidden attributes within admin API responses.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31367">https://nvd.nist.gov/vuln/detail/CVE-2022-31367</a></li>
<li><a href="https://github.com/kos0ng/CVEs/tree/main/CVE-2022-31367">https://github.com/kos0ng/CVEs/tree/main/CVE-2022-31367</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v3.6.10">https://github.com/strapi/strapi/releases/tag/v3.6.10</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.1.10">https://github.com/strapi/strapi/releases/tag/v4.1.10</a></li>
<li><a href="https://github.com/strapi/strapi/pull/13185">https://github.com/strapi/strapi/pull/13185</a></li>
<li><a href="https://github.com/strapi/strapi/pull/13189">https://github.com/strapi/strapi/pull/13189</a></li>
<li><a href="https://github.com/advisories/GHSA-4phg-hpqm-c3j4">https://github.com/advisories/GHSA-4phg-hpqm-c3j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4phg-hpqm-c3j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-28T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[strapi] Strapi mishandles hidden attributes within admin API responses]]></title>
        <id>https://github.com/advisories/GHSA-4phg-hpqm-c3j4</id>
        <link href="https://github.com/advisories/GHSA-4phg-hpqm-c3j4"/>
        <updated>2022-10-03T19:45:16.000Z</updated>
        <content type="html"><![CDATA[<p>Strapi before 3.6.10 and 4.x before 4.1.10 mishandles hidden attributes within admin API responses.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31367">https://nvd.nist.gov/vuln/detail/CVE-2022-31367</a></li>
<li><a href="https://github.com/kos0ng/CVEs/tree/main/CVE-2022-31367">https://github.com/kos0ng/CVEs/tree/main/CVE-2022-31367</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v3.6.10">https://github.com/strapi/strapi/releases/tag/v3.6.10</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.1.10">https://github.com/strapi/strapi/releases/tag/v4.1.10</a></li>
<li><a href="https://github.com/strapi/strapi/pull/13185">https://github.com/strapi/strapi/pull/13185</a></li>
<li><a href="https://github.com/strapi/strapi/pull/13189">https://github.com/strapi/strapi/pull/13189</a></li>
<li><a href="https://github.com/advisories/GHSA-4phg-hpqm-c3j4">https://github.com/advisories/GHSA-4phg-hpqm-c3j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4phg-hpqm-c3j4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-28T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express-xss-sanitizer] express-xss-sanitizer vulnerable to Prototype Pollution via allowedTags attribute]]></title>
        <id>https://github.com/advisories/GHSA-grjp-4jmr-mjcw</id>
        <link href="https://github.com/advisories/GHSA-grjp-4jmr-mjcw"/>
        <updated>2022-09-30T04:42:56.000Z</updated>
        <content type="html"><![CDATA[<p>The package express-xss-sanitizer before 1.1.3 is vulnerable to Prototype Pollution via the <code>allowedTags</code> attribute, allowing the attacker to bypass xss sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21169">https://nvd.nist.gov/vuln/detail/CVE-2022-21169</a></li>
<li><a href="https://github.com/AhmedAdelFahim/express-xss-sanitizer/issues/4">https://github.com/AhmedAdelFahim/express-xss-sanitizer/issues/4</a></li>
<li><a href="https://github.com/AhmedAdelFahim/express-xss-sanitizer/commit/3bf8aaaf4dbb1c209dcb8d87a82711a54c1ab39a">https://github.com/AhmedAdelFahim/express-xss-sanitizer/commit/3bf8aaaf4dbb1c209dcb8d87a82711a54c1ab39a</a></li>
<li><a href="https://runkit.com/embed/w306l6zfm7tu">https://runkit.com/embed/w306l6zfm7tu</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-EXPRESSXSSSANITIZER-3027443">https://security.snyk.io/vuln/SNYK-JS-EXPRESSXSSSANITIZER-3027443</a></li>
<li><a href="https://github.com/advisories/GHSA-grjp-4jmr-mjcw">https://github.com/advisories/GHSA-grjp-4jmr-mjcw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-grjp-4jmr-mjcw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-27T00:00:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] matrix-js-sdk subject to user spoofing via Olm/Megolm protocol confusion]]></title>
        <id>https://github.com/advisories/GHSA-r48r-j8fx-mq2c</id>
        <link href="https://github.com/advisories/GHSA-r48r-j8fx-mq2c"/>
        <updated>2022-10-03T19:46:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker cooperating with a malicious homeserver can construct messages that legitimately appear to have come from another person, without any indication such as a grey shield.</p>
<p>Additionally, a sophisticated attacker cooperating with a malicious homeserver could employ this vulnerability to perform a targeted attack in order to send fake to-device messages appearing to originate from another user. This can allow, for example, to inject the key backup secret during a self-verification, to make a targeted device start using a malicious key backup spoofed by the homeserver.</p>
<p>These attacks are possible due to a protocol confusion vulnerability that accepts to-device messages encrypted with Megolm instead of Olm.</p>
<h3 id="patches">Patches</h3>
<p>matrix-js-sdk has been modified to only accept Olm-encrypted to-device messages.</p>
<p>Out of caution, several other checks have been audited or added:</p>
<ul>
<li>Cleartext <code>m.room_key</code>, <code>m.forwarded_room_key</code> and <code>m.secret.send</code> to_device messages are discarded.</li>
<li>Secrets received from untrusted devices are discarded.</li>
<li>Key backups are only usable if they have a valid signature from a trusted device (no more local trust, or trust-on-decrypt).</li>
<li>The origin of a to-device message should only be determined by observing the Olm session which managed to decrypt the message, and not by using claimed sender_key, user_id, or any other fields controllable by the homeserver.</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>As this attack requires coordination between a malicious home server and an attacker, if you trust your home server no particular workaround is needed. Notice that the backup spoofing attack is a particularly sophisticated targeted attack.</p>
<p>We are not aware of this attack being used in the wild, though specifying a false positive-free way of noticing malicious key backups key is challenging.</p>
<p>As an abundance of caution, to avoid malicious backup attacks, you should not verify your new logins using emoji/QR verifications methods until patched. Prefer verifying with your security passphrase instead.</p>
<h3 id="references">References</h3>
<p>Blog post: <a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-r48r-j8fx-mq2c">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-r48r-j8fx-mq2c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39251">https://nvd.nist.gov/vuln/detail/CVE-2022-39251</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76">https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0">https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0</a></li>
<li><a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></li>
<li><a href="https://github.com/advisories/GHSA-r48r-j8fx-mq2c">https://github.com/advisories/GHSA-r48r-j8fx-mq2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r48r-j8fx-mq2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-30T00:41:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] matrix-js-sdk subject to impersonated messages due to permissive key forwarding]]></title>
        <id>https://github.com/advisories/GHSA-6263-x97c-c4gg</id>
        <link href="https://github.com/advisories/GHSA-6263-x97c-c4gg"/>
        <updated>2022-09-30T00:40:37.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>An attacker cooperating with a malicious homeserver can construct messages appearing to have come from another person. Such messages will be marked with a grey shield on some platforms, but this may be missing in others.</p>
<p>This attack is possible due to the matrix-js-sdk implementing a too permissive <a href="https://spec.matrix.org/v1.3/client-server-api/#key-requests">key forwarding</a> strategy on the receiving end.</p>
<p>Key forwarding is a mechanism allowing clients to recover from “unable to decrypt” messages when they missed the initial key distribution, at the time the message was originally sent. Examples include accessing message history before they joined the room but also when some network/federation errors have occurred.</p>
<h2 id="patches">Patches</h2>
<p>The default policy for accepting key forwards has been made more strict in the matrix-js-sdk. matrix-js-sdk will now only accept forwarded keys in response to previously issued requests and only from own, verified devices.</p>
<p>A unique exception to this rule is with the experimental <a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3061">MSC3061</a>, that is forwarding room keys for past messages when invited in a room configured with the proper history visibility setting. Such key forwards are parked upon receipt and are only accepted if the SDK receives an invitation for that room from the inviter in a limited time window.</p>
<p>The SDK now sets a <code>trusted</code> flag on the decrypted message upon decryption, based on whether the key used to decrypt the message was received from a trusted source. Clients need to ensure that messages decrypted with a key with <code>trusted = false</code> are decorated appropriately (for example, by showing a warning for such messages).</p>
<h3 id="workarounds">Workarounds</h3>
<p>As this attack requires coordination between a malicious homeserver and an attacker, if you trust your homeserver, no particular workaround is needed.</p>
<h2 id="references">References</h2>
<p>Blog post: <a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory, e-mail us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-6263-x97c-c4gg">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-6263-x97c-c4gg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39249">https://nvd.nist.gov/vuln/detail/CVE-2022-39249</a></li>
<li><a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3061">https://github.com/matrix-org/matrix-spec-proposals/pull/3061</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76">https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0">https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0</a></li>
<li><a href="https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients">https://matrix.org/blog/2022/09/28/upgrade-now-to-address-encryption-vulns-in-matrix-sdks-and-clients</a></li>
<li><a href="https://github.com/advisories/GHSA-6263-x97c-c4gg">https://github.com/advisories/GHSA-6263-x97c-c4gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6263-x97c-c4gg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-30T00:40:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] Improper beacon events in matrix-js-sdk can result in availability issues]]></title>
        <id>https://github.com/advisories/GHSA-hvv8-5v86-r45x</id>
        <link href="https://github.com/advisories/GHSA-hvv8-5v86-r45x"/>
        <updated>2022-09-29T14:36:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improperly formed beacon events (from <a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3488">MSC3488</a>) can disrupt or impede the matrix-js-sdk from functioning properly, potentially impacting the consumer's ability to process data safely. Note that the matrix-js-sdk can appear to be operating normally but be excluding or corrupting runtime data presented to the consumer.</p>
<h3 id="patches">Patches</h3>
<p>This is patched in matrix-js-sdk v19.7.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>Redacting applicable events, waiting for the sync processor to store data, and restarting the client can often fix it. Alternatively, redacting the applicable events and clearing all storage will fix the further perceived issues.</p>
<p>Downgrading to an unaffected version, noting that such a version may be subject to other vulnerabilities, will additionally resolve the issue.</p>
<h3 id="references">References</h3>
<p>N/A - This was a logic error in the SDK.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory please email us at <a href="mailto:security@matrix.org">security at matrix.org</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-hvv8-5v86-r45x">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-hvv8-5v86-r45x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39236">https://nvd.nist.gov/vuln/detail/CVE-2022-39236</a></li>
<li><a href="https://github.com/matrix-org/matrix-spec-proposals/pull/3488">https://github.com/matrix-org/matrix-spec-proposals/pull/3488</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76">https://github.com/matrix-org/matrix-js-sdk/commit/a587d7c36026fe1fcf93dfff63588abee359be76</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0">https://github.com/matrix-org/matrix-js-sdk/releases/tag/v19.7.0</a></li>
<li><a href="https://github.com/advisories/GHSA-hvv8-5v86-r45x">https://github.com/advisories/GHSA-hvv8-5v86-r45x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hvv8-5v86-r45x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-29T14:36:38.000Z</published>
    </entry>
</feed>