<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-12-12T09:01:28.628Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Password Change Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-88j4-pcx8-q4q3</id>
        <link href="https://github.com/advisories/GHSA-88j4-pcx8-q4q3"/>
        <updated>2023-12-12T00:59:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="overview">Overview:</h2>
<p>A moderate security vulnerability has been identified in Uptime Kuma platform that poses a significant threat to the confidentiality and integrity of user accounts.<br>When a user changes their login password in Uptime Kuma, a previously logged-in user retains access without being logged out.
This behaviour persists consistently, even after system restarts or browser restarts.
This vulnerability allows unauthorized access to user accounts, compromising the security of sensitive information.</p>
<p>The same vulnerability was partially fixed in <a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g</a> but logging existing users out of their accounts was forgotten.</p>
<h2 id="impact">Impact:</h2>
<p>The impact of this vulnerability is moderate, as it enables attackers or unauthorized individuals to maintain access to user accounts even after the account password has been changed. This can lead to unauthorized data access, manipulation, or compromise of user accounts, posing a threat to the integrity and confidentiality of Uptime Kuma.
A better impact-analysis is included in <a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g</a></p>
<h2 id="poc">PoC</h2>
<ul>
<li>Change the password for a user account</li>
<li>Access the platform using the previously logged-in account without logging out</li>
<li>Note that access (read-write) remains despite the password change </li>
<li>Expected behaviour:<br> After changing the password for a user account, all previously logged-in sessions should be invalidated, requiring users to log in again with the updated credentials.</li>
<li>Actual behaviour:<br>The system retains sessions and never logs out users unless explicitly done by clicking logout.</li>
</ul>
<h2 id="remediation">Remediation:</h2>
<p>To mitigate the risks associated with this vulnerability, we made the server emit a <code>refresh</code> event (clients handle this by reloading) and then disconnecting all clients except the one initiating the password change.</p>
<p>It is recommended to Update Uptime Kuma to <code>&gt;= 1.23.9</code>. </p>
<h2 id="timeline">Timeline:</h2>
<table>
<thead>
<tr>
<th>Date</th>
<th>Event</th>
</tr>
</thead>
<tbody><tr>
<td>2023-12-07 14:35 UTC</td>
<td>@manoonabbasi discovered and posts this information as a <code>bug</code>-report in issue #4188 [^1] into our <strong>public issue tracker</strong>, which is <a href="https://github.com/louislam/uptime-kuma/security/policy"><strong>against our security policy</strong></a></td>
</tr>
<tr>
<td>2023-12-07 16:50 UTC</td>
<td>The Uptime Kuma team deleted the post in our issue tracker</td>
</tr>
<tr>
<td>2023-12-10 18:10 UTC</td>
<td>Uptime Kuma team released patch and this Advisory</td>
</tr>
</tbody></table>
<p>[^1]: deleted to prevent the spread of this vulnerability without there being a fix available</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-88j4-pcx8-q4q3</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-g9v2-wqcj-j99g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49804">https://nvd.nist.gov/vuln/detail/CVE-2023-49804</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0">https://github.com/louislam/uptime-kuma/commit/482049c72b3a650c7bc5c26c2f4d57a21c0e0aa0</a></li>
<li><a href="https://github.com/advisories/GHSA-88j4-pcx8-q4q3">https://github.com/advisories/GHSA-88j4-pcx8-q4q3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88j4-pcx8-q4q3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-12T00:59:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nuxt-api-party] SSRF & Credentials Leak ]]></title>
        <id>https://github.com/advisories/GHSA-3wfp-253j-5jxv</id>
        <link href="https://github.com/advisories/GHSA-3wfp-253j-5jxv"/>
        <updated>2023-12-12T00:49:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>nuxt-api-party</code> allows developers to proxy requests to an API without exposing credentials to the client. <a href="https://huntr.dev/bounties/4c57a3f6-0d0e-4431-9494-4a1e7b062fbf/">A previous vulnerability</a> allowed an attacker to change the baseURL of the request, potentially leading to credentials being leaked or SSRF. </p>
<p>This vulnerability is similar, and was caused by a recent change to the detection of absolute URLs, which is no longer sufficient to prevent SSRF. </p>
<h3 id="details">Details</h3>
<p><code>nuxt-api-party</code> attempts to check if the user has passed an absolute URL to prevent the aforementioned attack. This has been recently changed to <a href="https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L31">use a regular expression</a> <code>^https?://</code>.</p>
<p>This regular expression can be bypassed by an absolute URL with leading whitespace. For example <code>\nhttps://whatever.com</code> has a leading newline. </p>
<p>According to the fetch specification, before a fetch is made the URL is normalized. "To normalize a <a href="https://infra.spec.whatwg.org/#byte-sequence">byte sequence</a> potentialValue, remove any leading and trailing <a href="https://fetch.spec.whatwg.org/#http-whitespace-byte">HTTP whitespace bytes</a> from potentialValue." (<a href="https://fetch.spec.whatwg.org/">source</a>)</p>
<p>This means the final request will be normalized to <code>https://whatever.com</code>. We have bypassed the check and <code>nuxt-api-party</code> will send a request outside of the whitelist. </p>
<p>This could allow us to leak credentials or perform SSRF.</p>
<h3 id="poc">PoC</h3>
<p>POC using Node.</p>
<pre><code class="language-js">await fetch("/api/__api_party/MyEndpoint", {
    method: "POST",
    body: JSON.stringify({ path: "\nhttps://google.com" }),
    headers: { "Content-Type": "application/json" }
})
</code></pre>
<p>We can use <code>__proto__</code> as a substitute for the endpoint if it is not known. This will not leak any credentials as all attributes on <code>endpoint</code> will be undefined.</p>
<pre><code class="language-js">await fetch("/api/__api_party/__proto__", {
    method: "POST",
    body: JSON.stringify({ path: "\nhttps://google.com" }),
    headers: { "Content-Type": "application/json" }
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>Leak of sensitive API credentials. SSRF.</p>
<h3 id="fix">Fix</h3>
<p>Revert to the previous method of detecting absolute URLs.</p>
<pre><code class="language-js">  if (new URL(path, 'http://localhost').origin !== 'http://localhost') {
      // ...
  }
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/johannschopplich/nuxt-api-party/security/advisories/GHSA-3wfp-253j-5jxv">https://github.com/johannschopplich/nuxt-api-party/security/advisories/GHSA-3wfp-253j-5jxv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49799">https://nvd.nist.gov/vuln/detail/CVE-2023-49799</a></li>
<li><a href="https://github.com/johannschopplich/nuxt-api-party/commit/72762a200fc19d997a0f84bce578c28698dc5270">https://github.com/johannschopplich/nuxt-api-party/commit/72762a200fc19d997a0f84bce578c28698dc5270</a></li>
<li><a href="https://fetch.spec.whatwg.org/">https://fetch.spec.whatwg.org/</a></li>
<li><a href="https://fetch.spec.whatwg.org/#http-whitespace-byte">https://fetch.spec.whatwg.org/#http-whitespace-byte</a></li>
<li><a href="https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L31">https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L31</a></li>
<li><a href="https://infra.spec.whatwg.org/#byte-sequence">https://infra.spec.whatwg.org/#byte-sequence</a></li>
<li><a href="https://github.com/advisories/GHSA-3wfp-253j-5jxv">https://github.com/advisories/GHSA-3wfp-253j-5jxv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3wfp-253j-5jxv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-12T00:49:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts and Contracts Upgradeable duplicated execution of subcalls in v4.9.4]]></title>
        <id>https://github.com/advisories/GHSA-699g-q6qh-q4v8</id>
        <link href="https://github.com/advisories/GHSA-699g-q6qh-q4v8"/>
        <updated>2023-12-12T00:49:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>Merge conflict resolution issue when porting the v5.0.1 <code>Multicall</code> update to the v4.9 branch caused a duplicated line.</p>
<h3 id="impact">Impact</h3>
<p>Versions using <code>Multicall</code> from <code>@openzeppelin/contracts@4.9.4</code> and <code>@openzeppelin/contracts-upgradeable@4.9.4</code> will execute each subcall twice. Concretely, this exposes a user to unintentionally duplicate operations like asset transfers.</p>
<h3 id="patches">Patches</h3>
<p>The duplicated <code>delegatecall</code> was removed in 4.9.5. The 4.9.4 version is marked as deprecated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-699g-q6qh-q4v8">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-699g-q6qh-q4v8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49798">https://nvd.nist.gov/vuln/detail/CVE-2023-49798</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/31f9fb9d171f60b2271b2b9c6f62d43302bf9489">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/31f9fb9d171f60b2271b2b9c6f62d43302bf9489</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/88ac712e06832bce73b41e8166cded2729e25205">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/88ac712e06832bce73b41e8166cded2729e25205</a></li>
<li><a href="https://github.com/advisories/GHSA-699g-q6qh-q4v8">https://github.com/advisories/GHSA-699g-q6qh-q4v8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-699g-q6qh-q4v8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-12T00:49:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts and Contracts Upgradeable duplicated execution of subcalls in v4.9.4]]></title>
        <id>https://github.com/advisories/GHSA-699g-q6qh-q4v8</id>
        <link href="https://github.com/advisories/GHSA-699g-q6qh-q4v8"/>
        <updated>2023-12-12T00:49:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="context">Context</h3>
<p>Merge conflict resolution issue when porting the v5.0.1 <code>Multicall</code> update to the v4.9 branch caused a duplicated line.</p>
<h3 id="impact">Impact</h3>
<p>Versions using <code>Multicall</code> from <code>@openzeppelin/contracts@4.9.4</code> and <code>@openzeppelin/contracts-upgradeable@4.9.4</code> will execute each subcall twice. Concretely, this exposes a user to unintentionally duplicate operations like asset transfers.</p>
<h3 id="patches">Patches</h3>
<p>The duplicated <code>delegatecall</code> was removed in 4.9.5. The 4.9.4 version is marked as deprecated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-699g-q6qh-q4v8">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-699g-q6qh-q4v8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49798">https://nvd.nist.gov/vuln/detail/CVE-2023-49798</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/31f9fb9d171f60b2271b2b9c6f62d43302bf9489">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/31f9fb9d171f60b2271b2b9c6f62d43302bf9489</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/88ac712e06832bce73b41e8166cded2729e25205">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/88ac712e06832bce73b41e8166cded2729e25205</a></li>
<li><a href="https://github.com/advisories/GHSA-699g-q6qh-q4v8">https://github.com/advisories/GHSA-699g-q6qh-q4v8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-699g-q6qh-q4v8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-12T00:49:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@koa/cors] Overly permissive origin policy]]></title>
        <id>https://github.com/advisories/GHSA-qxrj-hx23-xp82</id>
        <link href="https://github.com/advisories/GHSA-qxrj-hx23-xp82"/>
        <updated>2023-12-12T00:46:36.000Z</updated>
        <content type="html"><![CDATA[<p>Currently, the middleware operates in a way that if an allowed origin is not provided, it will return an <code>Access-Control-Allow-Origin</code> header with the value of the origin from the request. This behavior completely disables one of the most crucial elements of browsers - the Same Origin Policy (SOP), this could cause a very serious security threat to the users of this middleware.</p>
<p>If such behavior is expected, for instance, when middleware is used exclusively for prototypes and not for production applications, it should be heavily emphasized in the documentation along with an indication of the risks associated with such behavior, as many users may not be aware of it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/koajs/cors/security/advisories/GHSA-qxrj-hx23-xp82">https://github.com/koajs/cors/security/advisories/GHSA-qxrj-hx23-xp82</a></li>
<li><a href="https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11">https://github.com/koajs/cors/commit/f31dac99f5355c41e7d4dd3c4a80c5f154941a11</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49803">https://nvd.nist.gov/vuln/detail/CVE-2023-49803</a></li>
<li><a href="https://github.com/advisories/GHSA-qxrj-hx23-xp82">https://github.com/advisories/GHSA-qxrj-hx23-xp82</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qxrj-hx23-xp82</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-11T21:46:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nuxt-api-party] DOS by abusing `fetchOptions.retry`. ]]></title>
        <id>https://github.com/advisories/GHSA-q6hx-3m4p-749h</id>
        <link href="https://github.com/advisories/GHSA-q6hx-3m4p-749h"/>
        <updated>2023-12-11T20:29:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>nuxt-api-party</code> allows developers to proxy requests to an API without exposing credentials to the client. <a href="https://github.com/unjs/ofetch"><code>ofetch</code></a> is used to send the requests. </p>
<p>The library allows the user to send many options directly to <code>ofetch</code>. There is no filter on which options are available. We can abuse the retry logic to cause the server to crash from a stack overflow.</p>
<h3 id="details">Details</h3>
<p><code>fetchOptions</code> <a href="https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L27">are obtained directly from the request body</a>. These are then <a href="https://github.com/johannschopplich/nuxt-api-party/blob/777462e1e3af1d9f8938aa33f230cd8cb6e0cc9a/src/runtime/server/handler.ts#L57C15-L57C15">passed directly into <code>ofetch</code>
</a>.</p>
<p>We can construct a URL we know will not fetch successfully, then set the retry attempts to a high value, this will cause a stack overflow as ofetch error handling works recursively. </p>
<h3 id="poc">PoC</h3>
<p>POC using Node.</p>
<pre><code class="language-js">await fetch("http://localhost:3000/api/__api_party/MyEndpoint", {
    method: "POST",
    body: JSON.stringify({ path: "x:x", retry: 9999999 }),
    headers: { "Content-Type": "application/json" }
})
</code></pre>
<p>We can use <code>__proto__</code> as a substitute for the endpoint if it is not known.</p>
<pre><code class="language-js">await fetch("http://localhost:3000/api/__api_party/__proto__", {
    method: "POST",
    body: JSON.stringify({ path: "x:x", retry: 9999999 }),
    headers: { "Content-Type": "application/json" }
})
</code></pre>
<p>We can build the size of the stack faster by using more complicated URIs</p>
<pre><code class="language-js">await fetch("http://localhost:3000/api/__api_party/__proto__", {
    method: "POST",
    body: JSON.stringify({ path: "data:x;base64,----", retry: 9999999 }),
    headers: { "Content-Type": "application/json" }
})
</code></pre>
<h3 id="impact">Impact</h3>
<p>Full DOS, server is unusable during attack. Requires a single request. </p>
<h3 id="fix">Fix</h3>
<p>Limit which options can be passed to <code>ofetch</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/johannschopplich/nuxt-api-party/security/advisories/GHSA-q6hx-3m4p-749h">https://github.com/johannschopplich/nuxt-api-party/security/advisories/GHSA-q6hx-3m4p-749h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49800">https://nvd.nist.gov/vuln/detail/CVE-2023-49800</a></li>
<li><a href="https://github.com/advisories/GHSA-q6hx-3m4p-749h">https://github.com/advisories/GHSA-q6hx-3m4p-749h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q6hx-3m4p-749h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-12-11T20:29:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cli] Duplicate Advisory: Node CLI Allows Arbitrary File Overwrite]]></title>
        <id>https://github.com/advisories/GHSA-3mrp-qhcj-mwv5</id>
        <link href="https://github.com/advisories/GHSA-3mrp-qhcj-mwv5"/>
        <updated>2023-12-08T21:57:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-6cpc-mj5c-m9rq. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>An issue exists in node-cli 0.1.0 through 0.11.3 due to predictable temporary file names in lock_file and log_file, which allows an attacker to overwrite files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-1000021">https://nvd.nist.gov/vuln/detail/CVE-2016-1000021</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-1000021">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2016-1000021</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10538">https://nvd.nist.gov/vuln/detail/CVE-2016-10538</a></li>
<li><a href="https://github.com/node-js-libs/cli/issues/81">https://github.com/node-js-libs/cli/issues/81</a></li>
<li><a href="https://web.archive.org/web/20190430172230/https://www.npmjs.com/advisories/95">https://web.archive.org/web/20190430172230/https://www.npmjs.com/advisories/95</a></li>
<li><a href="https://github.com/advisories/GHSA-3mrp-qhcj-mwv5">https://github.com/advisories/GHSA-3mrp-qhcj-mwv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mrp-qhcj-mwv5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T17:02:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urijs] URIjs Hostname spoofing via backslashes in URL]]></title>
        <id>https://github.com/advisories/GHSA-p6j9-7xhc-rhwp</id>
        <link href="https://github.com/advisories/GHSA-p6j9-7xhc-rhwp"/>
        <updated>2023-12-08T05:05:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If using affected versions to determine a URL's hostname, the hostname can be spoofed by using a backslash (<code>\</code>) character as part of the scheme delimiter, e.g. <code>scheme:/\hostname</code>. If the hostname is used in security decisions, the decision may be incorrect.</p>
<p>Depending on library usage and attacker intent, impacts may include allow/block list bypasses, SSRF attacks, open redirects, or other undesired behavior.</p>
<p>Example URL: <code>https:/\expected-example.com/path</code>
Escaped string: <code>https:/\\expected-example.com/path</code> (JavaScript strings must escape backslash)</p>
<p>Affected versions incorrectly return no hostname. Patched versions correctly return <code>expected-example.com</code>. Patched versions match the behavior of other parsers which implement the <a href="https://url.spec.whatwg.org/">WHATWG URL specification</a>, including web browsers and <a href="https://nodejs.org/api/url.html">Node's built-in URL class</a>.</p>
<h3 id="patches">Patches</h3>
<p>Version 1.19.6 is patched against all known payload variants.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/medialize/URI.js/releases/tag/v1.19.6">https://github.com/medialize/URI.js/releases/tag/v1.19.6</a> (fix for this particular bypass)
<a href="https://github.com/medialize/URI.js/releases/tag/v1.19.4">https://github.com/medialize/URI.js/releases/tag/v1.19.4</a> (fix for related bypass)
<a href="https://github.com/medialize/URI.js/releases/tag/v1.19.3">https://github.com/medialize/URI.js/releases/tag/v1.19.3</a> (fix for related bypass)
<a href="https://github.com/medialize/URI.js/pull/233">PR #233</a> (initial fix for backslash handling)</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, open an issue in <a href="https://github.com/medialize/URI.js">https://github.com/medialize/URI.js</a></p>
<h3 id="reporter-credit">Reporter credit</h3>
<p><a href="https://twitter.com/ynizry">Yaniv Nizry</a> from the CxSCA AppSec team at Checkmarx</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/medialize/URI.js/security/advisories/GHSA-p6j9-7xhc-rhwp">https://github.com/medialize/URI.js/security/advisories/GHSA-p6j9-7xhc-rhwp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-27516">https://nvd.nist.gov/vuln/detail/CVE-2021-27516</a></li>
<li><a href="https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839">https://github.com/medialize/URI.js/commit/a1ad8bcbc39a4d136d7e252e76e957f3ece70839</a></li>
<li><a href="https://github.com/medialize/URI.js/releases/tag/v1.19.6">https://github.com/medialize/URI.js/releases/tag/v1.19.6</a></li>
<li><a href="https://advisory.checkmarx.net/advisory/CX-2021-4305">https://advisory.checkmarx.net/advisory/CX-2021-4305</a></li>
<li><a href="https://github.com/advisories/GHSA-p6j9-7xhc-rhwp">https://github.com/advisories/GHSA-p6j9-7xhc-rhwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p6j9-7xhc-rhwp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-01T20:03:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ipfs-bitswap] Denial of Service in ipfs-bitswap]]></title>
        <id>https://github.com/advisories/GHSA-6fcr-9h9g-23fq</id>
        <link href="https://github.com/advisories/GHSA-6fcr-9h9g-23fq"/>
        <updated>2023-12-07T22:08:14.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>ipfs-bitswap</code> prior to 0.24.1 are vulnerable to Denial of Service (DoS). The package put unwanted blocks in the blockstore, which could be used to exhaust system resources in specific conditions.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 0.24.1 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ipfs/js-ipfs-bitswap/pull/194">https://github.com/ipfs/js-ipfs-bitswap/pull/194</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-IPFSBITSWAP-174847">https://snyk.io/vuln/SNYK-JS-IPFSBITSWAP-174847</a></li>
<li><a href="https://www.npmjs.com/advisories/916">https://www.npmjs.com/advisories/916</a></li>
<li><a href="https://github.com/advisories/GHSA-6fcr-9h9g-23fq">https://github.com/advisories/GHSA-6fcr-9h9g-23fq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6fcr-9h9g-23fq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-02T21:50:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[beffer-xor] Malicious Package in beffer-xor]]></title>
        <id>https://github.com/advisories/GHSA-7cvf-p83w-48q6</id>
        <link href="https://github.com/advisories/GHSA-7cvf-p83w-48q6"/>
        <updated>2023-12-07T22:07:52.000Z</updated>
        <content type="html"><![CDATA[<p>Version 2.0.2 contained malicious code. The package targeted the Ethereum cryptocurrency and performed transactions to wallets not controlled by the user.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Remove the package from your environment. Ensure no Ethereum funds were compromised.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/1229">https://www.npmjs.com/advisories/1229</a></li>
<li><a href="https://github.com/advisories/GHSA-7cvf-p83w-48q6">https://github.com/advisories/GHSA-7cvf-p83w-48q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cvf-p83w-48q6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-03T21:37:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[another-date-range-picker] Malicious Package in another-date-range-picker]]></title>
        <id>https://github.com/advisories/GHSA-8rxg-9g6f-vq9p</id>
        <link href="https://github.com/advisories/GHSA-8rxg-9g6f-vq9p"/>
        <updated>2023-12-07T22:07:29.000Z</updated>
        <content type="html"><![CDATA[<p>Version 4.1.48 of <code>another-date-range-picker</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>If version 4.1.48 of this module is found installed you will want to replace it with a version before or after 4.1.48. In addition to replacing the installed module, you will also want to evaluate your application to determine whether or not user data was compromised.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/617">https://www.npmjs.com/advisories/617</a></li>
<li><a href="https://github.com/bi-a/mydaterangepicker">https://github.com/bi-a/mydaterangepicker</a></li>
<li><a href="https://github.com/kekeh/mydaterangepicker">https://github.com/kekeh/mydaterangepicker</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ANOTHERDATERANGEPICKER-451011">https://snyk.io/vuln/SNYK-JS-ANOTHERDATERANGEPICKER-451011</a></li>
<li><a href="https://github.com/advisories/GHSA-8rxg-9g6f-vq9p">https://github.com/advisories/GHSA-8rxg-9g6f-vq9p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rxg-9g6f-vq9p</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-01T19:46:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@impala/bmap] Malicious Package in @impala/bmap]]></title>
        <id>https://github.com/advisories/GHSA-c82c-8pjw-6829</id>
        <link href="https://github.com/advisories/GHSA-c82c-8pjw-6829"/>
        <updated>2023-12-07T22:06:26.000Z</updated>
        <content type="html"><![CDATA[<p>Version 1.0.3 of <code>@impala/bmap</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>If version 1.0.3 of this module is found installed you will want to replace it with a version before or after 1.0.3. In addition to replacing the installed module, you will also want to evaluate your application to determine whether or not user data was compromised.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/613">https://www.npmjs.com/advisories/613</a></li>
<li><a href="https://github.com/advisories/GHSA-c82c-8pjw-6829">https://github.com/advisories/GHSA-c82c-8pjw-6829</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-IMPALABMAP-451019">https://snyk.io/vuln/SNYK-JS-IMPALABMAP-451019</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c82c-8pjw-6829</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-01T19:41:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ipns] Improper Key Verification in ipns]]></title>
        <id>https://github.com/advisories/GHSA-j59f-6m4q-62h6</id>
        <link href="https://github.com/advisories/GHSA-j59f-6m4q-62h6"/>
        <updated>2023-12-07T22:05:56.000Z</updated>
        <content type="html"><![CDATA[<p>Versions 0.1.1 or 0.1.2 of <code>ipns</code> are vulnerable to improper key validation. This is due to the public key verification was not being performed properly, resulting in any key being valid.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 0.1.3 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ipfs/js-ipns/commit/33684e356f1f2fdcd99b2fb85fcc5d52223769a0">https://github.com/ipfs/js-ipns/commit/33684e356f1f2fdcd99b2fb85fcc5d52223769a0</a></li>
<li><a href="https://www.npmjs.com/advisories/693">https://www.npmjs.com/advisories/693</a></li>
<li><a href="https://github.com/advisories/GHSA-j59f-6m4q-62h6">https://github.com/advisories/GHSA-j59f-6m4q-62h6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j59f-6m4q-62h6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-05-30T17:28:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Remote Memory Exposure in mongoose]]></title>
        <id>https://github.com/advisories/GHSA-r5xw-q988-826m</id>
        <link href="https://github.com/advisories/GHSA-r5xw-q988-826m"/>
        <updated>2023-12-07T22:05:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>mongoose</code> before 4.3.6, 3.8.39 are vulnerable to remote memory exposure.</p>
<p>Trying to save a number to a field of type Buffer on the affected mongoose versions allocates a chunk of uninitialized memory and stores it in the database.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 4.3.6, 3.8.39 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Automattic/mongoose/issues/3764">https://github.com/Automattic/mongoose/issues/3764</a></li>
<li><a href="https://gist.github.com/ChALkeR/440bc3dfcbd9b6da75c3">https://gist.github.com/ChALkeR/440bc3dfcbd9b6da75c3</a></li>
<li><a href="https://gist.github.com/ChALkeR/d4a8055625221b6e65f0">https://gist.github.com/ChALkeR/d4a8055625221b6e65f0</a></li>
<li><a href="https://www.npmjs.com/advisories/599">https://www.npmjs.com/advisories/599</a></li>
<li><a href="https://github.com/advisories/GHSA-r5xw-q988-826m">https://github.com/advisories/GHSA-r5xw-q988-826m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5xw-q988-826m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-01T19:39:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mongoose] Remote Memory Exposure in mongoose]]></title>
        <id>https://github.com/advisories/GHSA-r5xw-q988-826m</id>
        <link href="https://github.com/advisories/GHSA-r5xw-q988-826m"/>
        <updated>2023-12-07T22:05:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>mongoose</code> before 4.3.6, 3.8.39 are vulnerable to remote memory exposure.</p>
<p>Trying to save a number to a field of type Buffer on the affected mongoose versions allocates a chunk of uninitialized memory and stores it in the database.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 4.3.6, 3.8.39 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Automattic/mongoose/issues/3764">https://github.com/Automattic/mongoose/issues/3764</a></li>
<li><a href="https://gist.github.com/ChALkeR/440bc3dfcbd9b6da75c3">https://gist.github.com/ChALkeR/440bc3dfcbd9b6da75c3</a></li>
<li><a href="https://gist.github.com/ChALkeR/d4a8055625221b6e65f0">https://gist.github.com/ChALkeR/d4a8055625221b6e65f0</a></li>
<li><a href="https://www.npmjs.com/advisories/599">https://www.npmjs.com/advisories/599</a></li>
<li><a href="https://github.com/advisories/GHSA-r5xw-q988-826m">https://github.com/advisories/GHSA-r5xw-q988-826m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5xw-q988-826m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-01T19:39:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[markdown-it-toc-and-anchor] Denial of Service in markdown-it-toc-and-anchor]]></title>
        <id>https://github.com/advisories/GHSA-x6m6-5hrf-fh6r</id>
        <link href="https://github.com/advisories/GHSA-x6m6-5hrf-fh6r"/>
        <updated>2023-12-07T22:05:04.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>markdown-it-toc-and-anchor</code> are vulnerable to Denial of Service. Parsing markdown containing <code>**text**+\n@[toc]</code> causes the application to enter and infinite loop.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/749">https://www.npmjs.com/advisories/749</a></li>
<li><a href="https://github.com/medfreeman/markdown-it-toc-and-anchor">https://github.com/medfreeman/markdown-it-toc-and-anchor</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MARKDOWNITTOCANDANCHOR-73500">https://snyk.io/vuln/SNYK-JS-MARKDOWNITTOCANDANCHOR-73500</a></li>
<li><a href="https://github.com/advisories/GHSA-x6m6-5hrf-fh6r">https://github.com/advisories/GHSA-x6m6-5hrf-fh6r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x6m6-5hrf-fh6r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-01T21:26:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[another-date-picker] Malicious Package in another-date-picker]]></title>
        <id>https://github.com/advisories/GHSA-2p62-c4rm-mr72</id>
        <link href="https://github.com/advisories/GHSA-2p62-c4rm-mr72"/>
        <updated>2023-12-07T22:04:43.000Z</updated>
        <content type="html"><![CDATA[<p>Version 2.0.43 of <code>another-date-picker</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>If version 2.0.43 of this module is found installed you will want to replace it with a version before or after 2.0.43. In addition to replacing the installed module, you will also want to evaluate your application to determine whether or not user data was compromised.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/616">https://www.npmjs.com/advisories/616</a></li>
<li><a href="https://github.com/bi-a/mydatepicker">https://github.com/bi-a/mydatepicker</a></li>
<li><a href="https://github.com/kekeh/mydatepicker">https://github.com/kekeh/mydatepicker</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ANOTHERDATEPICKER-451013">https://snyk.io/vuln/SNYK-JS-ANOTHERDATEPICKER-451013</a></li>
<li><a href="https://github.com/advisories/GHSA-2p62-c4rm-mr72">https://github.com/advisories/GHSA-2p62-c4rm-mr72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p62-c4rm-mr72</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-01T19:44:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pubnub] pubnub Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5844-q3fc-56rh</id>
        <link href="https://github.com/advisories/GHSA-5844-q3fc-56rh"/>
        <updated>2023-12-07T23:04:34.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package pubnub before 7.4.0; all versions of the package com.pubnub:pubnub; versions of the package pubnub before 6.19.0; all versions of the package github.com/pubnub/go; versions of the package github.com/pubnub/go/v7 before 7.2.0; versions of the package pubnub before 7.3.0; versions of the package pubnub/pubnub before 6.1.0; versions of the package pubnub before 5.3.0; versions of the package pubnub before 0.4.0; versions of the package pubnub/c-core before 4.5.0; versions of the package com.pubnub:pubnub-kotlin before 7.7.0; versions of the package pubnub/swift before 6.2.0; versions of the package pubnub before 5.2.0; versions of the package pubnub before 4.3.0 are vulnerable to Insufficient Entropy via the getKey function, due to inefficient implementation of the AES-256-CBC cryptographic algorithm. The provided encrypt function is less secure when hex encoding and trimming are applied, leaving half of the bits in the key always the same for every encoded message or file.</p>
<p><strong>Note:</strong></p>
<p>In order to exploit this vulnerability, the attacker needs to invest resources in preparing the attack and brute-force the encryption.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26154">https://nvd.nist.gov/vuln/detail/CVE-2023-26154</a></li>
<li><a href="https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119">https://github.com/pubnub/javascript/commit/fb6cd0417cbb4ba87ea2d5d86a9c94774447e119</a></li>
<li><a href="https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0">https://gist.github.com/vargad/20237094fce7a0a28f0723d7ce395bb0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384">https://security.snyk.io/vuln/SNYK-COCOAPODS-PUBNUB-6098384</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372">https://security.snyk.io/vuln/SNYK-DOTNET-PUBNUB-6098372</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGO-6098373</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374">https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMPUBNUBGOV7-6098374</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098371</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380">https://security.snyk.io/vuln/SNYK-JAVA-COMPUBNUB-6098380</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690">https://security.snyk.io/vuln/SNYK-JS-PUBNUB-5840690</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376">https://security.snyk.io/vuln/SNYK-PHP-PUBNUBPUBNUB-6098376</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385">https://security.snyk.io/vuln/SNYK-PUB-PUBNUB-6098385</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375">https://security.snyk.io/vuln/SNYK-PYTHON-PUBNUB-6098375</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377">https://security.snyk.io/vuln/SNYK-RUBY-PUBNUB-6098377</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378">https://security.snyk.io/vuln/SNYK-RUST-PUBNUB-6098378</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381">https://security.snyk.io/vuln/SNYK-SWIFT-PUBNUBSWIFT-6098381</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379">https://security.snyk.io/vuln/SNYK-UNMANAGED-PUBNUBCCORE-6098379</a></li>
<li><a href="https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js#L70">https://github.com/pubnub/javascript/blob/master/src/crypto/modules/web.js#L70</a></li>
<li><a href="https://github.com/advisories/GHSA-5844-q3fc-56rh">https://github.com/advisories/GHSA-5844-q3fc-56rh</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pubnub/CVE-2023-26154.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/pubnub/CVE-2023-26154.yml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5844-q3fc-56rh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-06T06:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload]]></title>
        <id>https://github.com/advisories/GHSA-92r3-m2mg-pj97</id>
        <link href="https://github.com/advisories/GHSA-92r3-m2mg-pj97"/>
        <updated>2023-12-05T23:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type="module"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>
<h3 id="impact">Impact</h3>
<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@5.0.5">vite@5.0.5</a>, <a href="mailto:vite@4.5.1">vite@4.5.1</a>, <a href="mailto:vite@4.4.12">vite@4.4.12</a></p>
<h3 id="details">Details</h3>
<p>Suppose <code>index.html</code> contains an inline module script:</p>
<pre><code class="language-html">&lt;script type="module"&gt;
  // Inline script
&lt;/script&gt;
</code></pre>
<p>This script is transformed into a proxy script like</p>
<pre><code class="language-html">&lt;script type="module" src="/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>due to Vite's HTML plugin:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>
<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>
<p><a href="https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>
<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>
<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>
<pre><code>"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;
</code></pre>
<p>so a request to <a href="http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/?"&gt;&lt;/script&gt;&lt;script&gt;alert("boom")&lt;/script&gt;?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>which demonstrates XSS.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>
<li>"Open in New Tab"</li>
<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>
<li>Witness XSS:</li>
<li><img alt="image" src="https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png"></li>
</ul>
</li>
<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>
<li>(Same steps as above)</li>
</ul>
</li>
<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>
<li>(Same steps as above)</li>
<li>You should <em>not</em> see the alert box in this case</li>
</ul>
</li>
</ul>
<h3 id="detailed-impact">Detailed Impact</h3>
<p>This will probably predominantly affect <a href="https://vitejs.dev/guide/ssr#setting-up-the-dev-server">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>
<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>
<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>
<pre><code class="language-js">import fs from 'node:fs/promises';
import * as vite from 'vite';

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="module"&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: 'custom' });
const transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);
console.log(transformed);
await server.close();
</code></pre>
<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49293">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>
<li><a href="https://github.com/advisories/GHSA-92r3-m2mg-pj97">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92r3-m2mg-pj97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:31:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite XSS vulnerability in `server.transformIndexHtml` via URL payload]]></title>
        <id>https://github.com/advisories/GHSA-92r3-m2mg-pj97</id>
        <link href="https://github.com/advisories/GHSA-92r3-m2mg-pj97"/>
        <updated>2023-12-05T23:31:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When Vite's HTML transformation is invoked manually via <code>server.transformIndexHtml</code>, the original request URL is passed in unmodified, and the <code>html</code> being transformed contains inline module scripts (<code>&lt;script type="module"&gt;...&lt;/script&gt;</code>), it is possible to inject arbitrary HTML into the transformed output by supplying a malicious URL query string to <code>server.transformIndexHtml</code>.</p>
<h3 id="impact">Impact</h3>
<p>Only apps using <code>appType: 'custom'</code> and using the default Vite HTML middleware are affected. The HTML entry must also contain an inline script. The attack requires a user to click on a malicious URL while running the dev server. Restricted files aren't exposed to the attacker.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <a href="mailto:vite@5.0.5">vite@5.0.5</a>, <a href="mailto:vite@4.5.1">vite@4.5.1</a>, <a href="mailto:vite@4.4.12">vite@4.4.12</a></p>
<h3 id="details">Details</h3>
<p>Suppose <code>index.html</code> contains an inline module script:</p>
<pre><code class="language-html">&lt;script type="module"&gt;
  // Inline script
&lt;/script&gt;
</code></pre>
<p>This script is transformed into a proxy script like</p>
<pre><code class="language-html">&lt;script type="module" src="/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>due to Vite's HTML plugin:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/packages/vite/src/node/plugins/html.ts#L429-L465</a></p>
<p>When <code>appType: 'spa' | 'mpa'</code>, Vite serves HTML itself, and <code>htmlFallbackMiddleware</code> rewrites <code>req.url</code> to the canonical path of <code>index.html</code>,</p>
<p><a href="https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47">https://github.com/vitejs/vite/blob/73ef074b80fa7252e0c46a37a2c94ba8cba46504/packages/vite/src/node/server/middlewares/htmlFallback.ts#L44-L47</a></p>
<p>so the <code>url</code> passed to <code>server.transformIndexHtml</code> is <code>/index.html</code>.</p>
<p>However, if <code>appType: 'custom'</code>, HTML is served manually, and if <code>server.transformIndexHtml</code> is called with the unmodified request URL (as the SSR docs suggest), then the path of the transformed <code>html-proxy</code> script varies with the request URL. For example, a request with path <code>/</code> produces</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/index.html?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>It is possible to abuse this behavior by crafting a request URL to contain a malicious payload like</p>
<pre><code>"&gt;&lt;/script&gt;&lt;script&gt;alert('boom')&lt;/script&gt;
</code></pre>
<p>so a request to <a href="http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E">http://localhost:5173/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</a> produces HTML output like</p>
<pre><code class="language-html">&lt;script type="module" src="/@id/__x00__/?"&gt;&lt;/script&gt;&lt;script&gt;alert("boom")&lt;/script&gt;?html-proxy&amp;index=0.js"&gt;&lt;/script&gt;
</code></pre>
<p>which demonstrates XSS.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Example 1. Serving HTML from <code>vite dev</code> middleware with <code>appType: 'custom'</code><ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev-html</a></li>
<li>"Open in New Tab"</li>
<li>Edit URL to set query string to <code>?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E</code> and navigate</li>
<li>Witness XSS:</li>
<li><img alt="image" src="https://user-images.githubusercontent.com/2456381/287434281-13757894-7a63-4a73-b1e9-d2b024c19d14.png"></li>
</ul>
</li>
<li>Example 2. Serving HTML from SSR-style Express server (Vite dev server runs in middleware mode):<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=server</a></li>
<li>(Same steps as above)</li>
</ul>
</li>
<li>Example 3. Plain <code>vite dev</code> (this shows that vanilla <code>vite dev</code> is <em>not</em> vulnerable, provided <code>htmlFallbackMiddleware</code> is used)<ul>
<li>Go to <a href="https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev">https://stackblitz.com/edit/vitejs-vite-9xhma4?file=main.js&amp;terminal=dev</a></li>
<li>(Same steps as above)</li>
<li>You should <em>not</em> see the alert box in this case</li>
</ul>
</li>
</ul>
<h3 id="detailed-impact">Detailed Impact</h3>
<p>This will probably predominantly affect <a href="https://vitejs.dev/guide/ssr#setting-up-the-dev-server">development-mode SSR</a>, where <code>vite.transformHtml</code> is called using the original <code>req.url</code>, per the docs:</p>
<p><a href="https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126">https://github.com/vitejs/vite/blob/7fd7c6cebfcad34ae7021ebee28f97b1f28ef3f3/docs/guide/ssr.md?plain=1#L114-L126</a></p>
<p>However, since this vulnerability affects <code>server.transformIndexHtml</code>, the scope of impact may be higher to also include other ad-hoc calls to <code>server.transformIndexHtml</code> from outside of Vite's own codebase.</p>
<p>My best guess at bisecting which versions are vulnerable involves the following test script</p>
<pre><code class="language-js">import fs from 'node:fs/promises';
import * as vite from 'vite';

const html = `
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;script type="module"&gt;
      // Inline script
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`;
const server = await vite.createServer({ appType: 'custom' });
const transformed = await server.transformIndexHtml('/?%22%3E%3C/script%3E%3Cscript%3Ealert(%27boom%27)%3C/script%3E', html);
console.log(transformed);
await server.close();
</code></pre>
<p>and using it I was able to narrow down to #13581. If this is correct, then vulnerable Vite versions are 4.4.0-beta.2 and higher (which includes 4.4.0).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97">https://github.com/vitejs/vite/security/advisories/GHSA-92r3-m2mg-pj97</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49293">https://nvd.nist.gov/vuln/detail/CVE-2023-49293</a></li>
<li><a href="https://github.com/advisories/GHSA-92r3-m2mg-pj97">https://github.com/advisories/GHSA-92r3-m2mg-pj97</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92r3-m2mg-pj97</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-05T23:31:34.000Z</published>
    </entry>
</feed>