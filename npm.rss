<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-02-28T20:01:23.517Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[webui-aria2] webui-aria2 Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</id>
        <link href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w"/>
        <updated>2024-02-28T18:38:27.000Z</updated>
        <content type="html"><![CDATA[<p>webui-aria2 commit 4fe2e was discovered to contain a path traversal vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39141">https://nvd.nist.gov/vuln/detail/CVE-2023-39141</a></li>
<li><a href="https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e">https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e</a></li>
<li><a href="https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10">https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10</a></li>
<li><a href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w">https://github.com/advisories/GHSA-crv8-r5wq-gv2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-22T21:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nfid/embed] @nfid/embed has compromised private key due to @dfinity/auth-client producing insecure session keys]]></title>
        <id>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</id>
        <link href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8"/>
        <updated>2024-02-26T20:10:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>User sessions in the @nfid/embed SDK with Ed25519 keys are vulnerable due to a compromised private key <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. This exposes users to potential loss of funds on ledgers and unauthorized access to canisters they control.</p>
<h3 id="solution">Solution</h3>
<p>Using version &gt;1.0.1 of @dfinity/auth-client and @dfinity/identity packages, or @nfid/embed &gt;0.10.1-alpha.6 includes patched versions of the issue.</p>
<p>User sessions will be automatically fixed when they re-authenticate.</p>
<h3 id="why-this-happened">Why this happened</h3>
<p>The DFINITY auth client library provides a function, <code>Ed25519KeyIdentity.generate</code>, for generating an Ed25519 key pair. This function includes an optional parameter to supply a 32-byte seed value, which will be utilized as the secret key. In cases where no seed value is provided, the library is expected to generate the secret key using secure randomness. However, a recent update of DFINITY libraries has compromised this assurance by employing an insecure seed for key pair generation.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">AgentJS CVE </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8</a></li>
<li><a href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/advisories/GHSA-84c3-j8r2-mcm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-26T20:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[es5-ext] es5-ext vulnerable to Regular Expression Denial of Service in `function#copy` and `function#toStringTokens`]]></title>
        <id>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</id>
        <link href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h"/>
        <updated>2024-02-26T20:01:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Passing functions with very long names or complex default argument names into <code>function#copy</code> or<code>function#toStringTokens</code> may put script to stall</p>
<h3 id="patches">Patches</h3>
<p>Fixed with <a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a> and <a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a>
Published with v0.10.63</p>
<h3 id="workarounds">Workarounds</h3>
<p>No real workaround aside of refraining from using above utilities.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27088">https://nvd.nist.gov/vuln/detail/CVE-2024-27088</a></li>
<li><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a></li>
<li><a href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-26T20:01:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2024-02-23T05:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2024-02-23T05:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@xmldom/xmldom] Misinterpretation of malicious XML input]]></title>
        <id>https://github.com/advisories/GHSA-5fg8-2547-mr8q</id>
        <link href="https://github.com/advisories/GHSA-5fg8-2547-mr8q"/>
        <updated>2024-02-22T19:03:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>
<h3 id="patches">Patches</h3>
<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>
<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>
<h3 id="references">References</h3>
<p>Similar to this one reported on the Go standard library:</p>
<ul>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web/">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/xmldom/xmldom"><code>xmldom/xmldom</code></a></li>
<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32796">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>
<li><a href="https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>
<li><a href="https://www.npmjs.com/package/@xmldom/xmldom">https://www.npmjs.com/package/@xmldom/xmldom</a></li>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>
<li><a href="https://github.com/advisories/GHSA-5fg8-2547-mr8q">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fg8-2547-mr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-03T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmldom] Misinterpretation of malicious XML input]]></title>
        <id>https://github.com/advisories/GHSA-5fg8-2547-mr8q</id>
        <link href="https://github.com/advisories/GHSA-5fg8-2547-mr8q"/>
        <updated>2024-02-22T19:03:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>
<h3 id="patches">Patches</h3>
<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>
<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>
<h3 id="references">References</h3>
<p>Similar to this one reported on the Go standard library:</p>
<ul>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web/">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/xmldom/xmldom"><code>xmldom/xmldom</code></a></li>
<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32796">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>
<li><a href="https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>
<li><a href="https://www.npmjs.com/package/@xmldom/xmldom">https://www.npmjs.com/package/@xmldom/xmldom</a></li>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>
<li><a href="https://github.com/advisories/GHSA-5fg8-2547-mr8q">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fg8-2547-mr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-03T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mapshaper] mapshaper Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8m36-62rw-9mxw</id>
        <link href="https://github.com/advisories/GHSA-8m36-62rw-9mxw"/>
        <updated>2024-02-22T05:08:29.000Z</updated>
        <content type="html"><![CDATA[<p>Path Traversal in GitHub repository mbloch/mapshaper prior to 0.6.44.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1163">https://nvd.nist.gov/vuln/detail/CVE-2024-1163</a></li>
<li><a href="https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72">https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72</a></li>
<li><a href="https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5">https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5</a></li>
<li><a href="https://github.com/advisories/GHSA-8m36-62rw-9mxw">https://github.com/advisories/GHSA-8m36-62rw-9mxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m36-62rw-9mxw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-13T15:31:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json5] Prototype Pollution in JSON5 via Parse Method]]></title>
        <id>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</id>
        <link href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h"/>
        <updated>2024-02-22T05:08:21.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>
<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>
<h2 id="mitigation">Mitigation</h2>
<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>
<h2 id="details">Details</h2>
<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>
<pre><code class="language-js">const JSON5 = require('json5');

const doSomethingDangerous = (props) =&gt; {
  if (props.isAdmin) {
    console.log('Doing dangerous thing as admin.');
  } else {
    console.log('Doing dangerous thing as user.');
  }
};

const secCheckKeysSet = (obj, searchKeys) =&gt; {
  let searchKeyFound = false;
  Object.keys(obj).forEach((key) =&gt; {
    if (searchKeys.indexOf(key) &gt; -1) {
      searchKeyFound = true;
    }
  });
  return searchKeyFound;
};

const props = JSON5.parse('{"foo": "bar"}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as user."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "isAdmin": true}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props);
} else {
  throw new Error('Forbidden...'); // Error: Forbidden...
}
</code></pre>
<p>However, users can instead set the <code>__proto__</code> key to <code>{"isAdmin": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "__proto__": {"isAdmin": true}}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as admin."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46175">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>
<li><a href="https://github.com/json5/json5/issues/199">https://github.com/json5/json5/issues/199</a></li>
<li><a href="https://github.com/json5/json5/issues/295">https://github.com/json5/json5/issues/295</a></li>
<li><a href="https://github.com/json5/json5/pull/298">https://github.com/json5/json5/pull/298</a></li>
<li><a href="https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972">https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972</a></li>
<li><a href="https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8">https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html">https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE</a></li>
<li><a href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-29T01:51:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json5] Prototype Pollution in JSON5 via Parse Method]]></title>
        <id>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</id>
        <link href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h"/>
        <updated>2024-02-22T05:08:21.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>
<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>
<h2 id="mitigation">Mitigation</h2>
<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>
<h2 id="details">Details</h2>
<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>
<pre><code class="language-js">const JSON5 = require('json5');

const doSomethingDangerous = (props) =&gt; {
  if (props.isAdmin) {
    console.log('Doing dangerous thing as admin.');
  } else {
    console.log('Doing dangerous thing as user.');
  }
};

const secCheckKeysSet = (obj, searchKeys) =&gt; {
  let searchKeyFound = false;
  Object.keys(obj).forEach((key) =&gt; {
    if (searchKeys.indexOf(key) &gt; -1) {
      searchKeyFound = true;
    }
  });
  return searchKeyFound;
};

const props = JSON5.parse('{"foo": "bar"}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as user."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "isAdmin": true}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props);
} else {
  throw new Error('Forbidden...'); // Error: Forbidden...
}
</code></pre>
<p>However, users can instead set the <code>__proto__</code> key to <code>{"isAdmin": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "__proto__": {"isAdmin": true}}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as admin."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46175">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>
<li><a href="https://github.com/json5/json5/issues/199">https://github.com/json5/json5/issues/199</a></li>
<li><a href="https://github.com/json5/json5/issues/295">https://github.com/json5/json5/issues/295</a></li>
<li><a href="https://github.com/json5/json5/pull/298">https://github.com/json5/json5/pull/298</a></li>
<li><a href="https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972">https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972</a></li>
<li><a href="https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8">https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html">https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE</a></li>
<li><a href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-29T01:51:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@dfinity/auth-client] agent-js: Insecure Key Generation in `Ed25519KeyIdentity.generate`]]></title>
        <id>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</id>
        <link href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3"/>
        <updated>2024-02-21T18:58:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The library offers a function to generate an ed25519 key pair via <code>Ed25519KeyIdentity.generate</code> with an optional param to provide a 32 byte seed value, which will then be used as the secret key. <strong>When no seed value is provided, it is expected that the library generates the secret key using secure randomness</strong>. However, a recent change <strong>broke this guarantee</strong> and <strong>uses an insecure seed for key pair generation</strong>.</p>
<p>Since the private key of this identity (<code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds:Users to protect their assets. </p>
<h2 id="patches">Patches</h2>
<p>Patch for the vulnerability is <strong>available in v1.0.1</strong> for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately. </p>
<h2 id="workarounds">Workarounds</h2>
<h3 id="developers">Developers</h3>
<p>The recommended fix is to upgrade the package to the patched version. If that is not possible, there are couple of workarounds to handle the insecure key generation.</p>
<ol>
<li>Invoking the function as <code>Ed25519KeyIdentity.generate(null)</code> would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.</li>
<li>Passing a securely generated randomness as a seed to <code>Ed25519KeyIdentity.generate</code> would force the library to use it as the seed to generate the key pair.</li>
</ol>
<h3 id="users">Users</h3>
<h4 id="removing-a-controller-of-a-canister-if-its-the-affected-principal">Removing a controller of a canister if it's the affected principal</h4>
<p>For all canisters you control, fetch the controllers of the canisters using </p>
<pre><code class="language-sh">dfx canister info --ic &lt;CANISTER&gt;
</code></pre>
<p>If you see the principal <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code> as one of the controllers, follow the steps below </p>
<pre><code class="language-sh">dfx identity whoami # record CURRENT_IDENTITY

dfx identity new &lt;NEW_IDENTITY_NAME&gt; 
dfx identity use &lt;NEW_IDENTITY_NAME&gt; 
dfx identity get-principal &lt;NEW_IDENTITY_NAME&gt; # record NEW_IDENTITY_PRINCIPAL

dfx identity use &lt;CURRENT_IDENTITY&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --add-controller &lt;NEW_IDENTITY_PRINCIPAL&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`
</code></pre>
<p>For more details on canister management, please visit <a href="https://internetcomputer.org/docs/current/tutorials/developer-journey/level-1/1.6-managing-canisters">here</a></p>
<h4 id="checking-funds-on-wallets---ledgers">Checking funds on wallets /  ledgers</h4>
<p>If you have funds on ledgers using a browser wallet, please check if the account principal matches <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. If it does, please create a new account and transfer the funds to the new account immediately.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://github.com/dfinity/agent-js/pull/851">fix PR link</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">NPM patched version</a></li>
<li><a href="https://github.com/dfinity/agent-js">agent-js Github repo</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">agent-js docs</a></li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/dfinity/agent-js/pull/851">https://github.com/dfinity/agent-js/pull/851</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1631">https://nvd.nist.gov/vuln/detail/CVE-2024-1631</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">https://agent-js.icp.xyz/identity/index.html</a></li>
<li><a href="https://github.com/dfinity/agent-js">https://github.com/dfinity/agent-js</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">https://www.npmjs.com/package/@dfinity/identity/v/1.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T02:54:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@dfinity/identity] agent-js: Insecure Key Generation in `Ed25519KeyIdentity.generate`]]></title>
        <id>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</id>
        <link href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3"/>
        <updated>2024-02-21T18:58:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The library offers a function to generate an ed25519 key pair via <code>Ed25519KeyIdentity.generate</code> with an optional param to provide a 32 byte seed value, which will then be used as the secret key. <strong>When no seed value is provided, it is expected that the library generates the secret key using secure randomness</strong>. However, a recent change <strong>broke this guarantee</strong> and <strong>uses an insecure seed for key pair generation</strong>.</p>
<p>Since the private key of this identity (<code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds:Users to protect their assets. </p>
<h2 id="patches">Patches</h2>
<p>Patch for the vulnerability is <strong>available in v1.0.1</strong> for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately. </p>
<h2 id="workarounds">Workarounds</h2>
<h3 id="developers">Developers</h3>
<p>The recommended fix is to upgrade the package to the patched version. If that is not possible, there are couple of workarounds to handle the insecure key generation.</p>
<ol>
<li>Invoking the function as <code>Ed25519KeyIdentity.generate(null)</code> would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.</li>
<li>Passing a securely generated randomness as a seed to <code>Ed25519KeyIdentity.generate</code> would force the library to use it as the seed to generate the key pair.</li>
</ol>
<h3 id="users">Users</h3>
<h4 id="removing-a-controller-of-a-canister-if-its-the-affected-principal">Removing a controller of a canister if it's the affected principal</h4>
<p>For all canisters you control, fetch the controllers of the canisters using </p>
<pre><code class="language-sh">dfx canister info --ic &lt;CANISTER&gt;
</code></pre>
<p>If you see the principal <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code> as one of the controllers, follow the steps below </p>
<pre><code class="language-sh">dfx identity whoami # record CURRENT_IDENTITY

dfx identity new &lt;NEW_IDENTITY_NAME&gt; 
dfx identity use &lt;NEW_IDENTITY_NAME&gt; 
dfx identity get-principal &lt;NEW_IDENTITY_NAME&gt; # record NEW_IDENTITY_PRINCIPAL

dfx identity use &lt;CURRENT_IDENTITY&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --add-controller &lt;NEW_IDENTITY_PRINCIPAL&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`
</code></pre>
<p>For more details on canister management, please visit <a href="https://internetcomputer.org/docs/current/tutorials/developer-journey/level-1/1.6-managing-canisters">here</a></p>
<h4 id="checking-funds-on-wallets---ledgers">Checking funds on wallets /  ledgers</h4>
<p>If you have funds on ledgers using a browser wallet, please check if the account principal matches <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. If it does, please create a new account and transfer the funds to the new account immediately.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://github.com/dfinity/agent-js/pull/851">fix PR link</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">NPM patched version</a></li>
<li><a href="https://github.com/dfinity/agent-js">agent-js Github repo</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">agent-js docs</a></li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/dfinity/agent-js/pull/851">https://github.com/dfinity/agent-js/pull/851</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1631">https://nvd.nist.gov/vuln/detail/CVE-2024-1631</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">https://agent-js.icp.xyz/identity/index.html</a></li>
<li><a href="https://github.com/dfinity/agent-js">https://github.com/dfinity/agent-js</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">https://www.npmjs.com/package/@dfinity/identity/v/1.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T02:54:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron-pdf] Cross-site Scripting in electron-pdf]]></title>
        <id>https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</id>
        <link href="https://github.com/advisories/GHSA-3jcv-5f9p-2f2p"/>
        <updated>2024-02-21T00:16:34.000Z</updated>
        <content type="html"><![CDATA[<p>electron-pdf version 20.0.0 allows an external attacker to remotely obtain</p>
<p>arbitrary local files. This is possible because the application does not</p>
<p>validate the HTML content entered by the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1648">https://nvd.nist.gov/vuln/detail/CVE-2024-1648</a></li>
<li><a href="https://fluidattacks.com/advisories/drake">https://fluidattacks.com/advisories/drake</a></li>
<li><a href="https://github.com/advisories/GHSA-3jcv-5f9p-2f2p">https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-20T03:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[meshcentral] MeshCentral cross-site websocket hijacking (CSWSH) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cp68-qrhr-g9h8</id>
        <link href="https://github.com/advisories/GHSA-cp68-qrhr-g9h8"/>
        <updated>2024-02-21T00:10:39.000Z</updated>
        <content type="html"><![CDATA[<p>We have identified a cross-site websocket hijacking (CSWSH) vulnerability within the control.ashx endpoint of MeshCentral. This component is the primary mechanism used within MeshCentral to perform administrative actions on the server. To demonstrate the impact of the vulnerability we developed a proof-of-concept which leveraged the cross-site websocket hijacking vulnerability to read the server configuration file to leak the sessionKey variable, generating login tokens, and generating an authentication cookie.</p>
<p>The vulnerability is exploitable when an attacker is able to convince a victim end-user to click on a malicious link to a page hosting an attacker-controlled site. The attacker can then originate a cross-site websocket connection using client-side JavaScript code to connect to “control.ashx” as the victim user within MeshCentral. There are some caveats to exploiting this issue however as MeshCentral configures <code>SameSite=Lax</code> security setting on cookies which introduces some additional preconditions for exploitation which we cover in a subsequent section.</p>
<h3 id="meshcentral-version-tested">MeshCentral Version Tested</h3>
<p>We performed testing against MeshCentral version 1.1.20 which appears to be the latest supported version of the application. This appears to have been the latest version of MeshCentral available at the time we performed testing of the application in January and February 2024 (see Figure 1 and Figure 2).</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/4a24fce2-5047-47a1-ac91-ae84c44ef3f1">
Figure 1: We determined that MeshCentral version 1.1.20 was the latest version available at the time we performed testing of the application.</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/4e347e91-6296-4b1a-a1d0-bb3587a82ea3">
Figure 2: We configured our test environment on an Ubuntu server running version 1.1.20 of the MeshCentral application server.</p>
<h3 id="what-about-samesitelax-cookie-settings">What about SameSite=Lax Cookie Settings?</h3>
<p>One may make the counterpoint that the <code>SameSite=Lax</code> security setting (see Figure 4) effectively prevents cross-site websocket hijacking (CSWSH) issues as an attacker origin of attacker.com would not be within the same-site as the victim meshcentral server at say meshcentral.example.com. This means an attacker that is able to convince a user to click on a malicious link wouldn’t be able to successfully perform this attacker to the Lax setting with differing origins.</p>
<p>Unfortunately, this isn’t entirely correct as there is a core difference between same-site and same-origin policies within all modern browsers. In this case, while it’s valid to say that the attack wouldn’t work in the case of attacker.com targeting meshcentral.example.com when the SameSite setting is configured to Lax for session cookies, there are several other scenarios where an attacker could perform the attack successfully (see Figure 3).</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/b108232d-7f85-4815-9439-431db0eeed85">
Figure 3: A table from PortSwigger’s article on Bypassing SameSite Cookie Restrictions (source).</p>
<p>From our perspective, the most relevant scenario is when an attacker is able to compromise an adjacent subdomain either through a vector such as a system compromise, exploiting a subdomain takeover vulnerability, or through exploitation of a cross-site scripting vulnerability within an adjacent application running under the same domain. For example, if an attacker found a cross-site scripting issue on example.com or vulnerable.example.com they would then be able to leverage the cross-site scripting issues on those domains to target meshcentral.example.com. There are other factors which could also allow an attacker to bypass the SameSite=Lax setting to perform cross-site websocket hijacking. For a more comprehensive list please see Bypassing SameSite Cookie Restrictions from PortSwigger.</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/8310a307-273f-44e5-948a-f1a2b49cf960">
Figure 4: We observed that upon logging into MeshCentral the “xid” and “xid.sig” tokens were configured with the SameSite=Lax security settings.</p>
<h3 id="developing-an-initial-proof-of-concept-exploit">Developing an Initial Proof-of-Concept Exploit</h3>
<p>At this point we had a testing deployment of MeshCentral configured at meshcentral.example.com and simulated an attacker-compromised adjacent subdomain at evil.example.com. In this scenario, we assume the attacker exploited a subdomain takeover vulnerability to host malicious content on evil.example.com. Next, we developed a simple proof-of-concept payload which originated a cross-site websocket connection from the evil.example.com origin to meshcentral.example.com (see Figure 5).</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/725820ef-5e93-48f5-aa47-9e21b299f255">
Figure 5: An initial proof-of-concept exploit we developed which simply sent a ping-message over the websocket connection from evil.example.com targeting meshcentral.example.com. We then triggered the exploit payload as a user that was logged into the MeshCentral application as an administrator by browsing to evil.example.com with a valid session on meshcentral.example.com. We
observed a cross-site websocket connection to meshcentral.example.com with an origin header set to evil.example.com as it originated from the attacker domain (see Figure 6). The response indicated the connection was successful and we received the expected pong response to our ping message sent to the server.</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/9bcec329-4206-4ce6-bbba-a02a47c306d8">
Figure 6: We observed that when originating a websocket connection across origins the origin header was sent by the browser to the MeshCentral server indicating the origin which originated the cross-site websocket connection.</p>
<h3 id="demonstrating-impact">Demonstrating Impact</h3>
<p>After confirming the vulnerability we then developed a more comprehensive exploit payload to demonstrate the impact of the vulnerability (see Figure 7). Our new payload sent the serverconfig, authcookie, and createLoginToken actions to the administrative component. The ability to issue a new login token then provided us with persistent access to the users account. The ability to read the serverconfig file allowed us to exfiltrate the session key used to sign sessions allowing the attacker to forge valid session tokens as arbitrary users on the system. Our payload then read the response from the server and exfiltrated the sensitive data exported from the system to an attacker-controlled system for storage purposes (see Figure 8).</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/d42f8372-24c9-4786-bfaa-ed1f91915749">
Figure 7: A proof-of-concept exploit we developed for the cross-site websocket hijacking vulnerability resulting in complete compromise of the user’s account and persistent access to the MeshCentral application as the victim user.</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/3e3977e1-a8c8-4856-9d27-f0307855049c">
Figure 8: We performed the attack using the exploit code shown in Figure AA to invoked the authcookie, serverconfig, and createLoginToken endpoints on the victim MeshCentral system leveraging the cross-site websocket hijacking vulnerability from evil.example.com.</p>
<p>After performing the attack successfully we used the issued login token to authenticate to MeshCental and access the console as the NT AUTHORITY\SYSTEM user for a windows agent which connected to the victim MeshCentral instance. This provided compromise of all the nodes within the impacted MeshCentral instance (see Figure 9 and Figure 10).</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/95405b59-8073-483e-9527-e1d03b546f5a">
Figure 9: An attacker could leverage the login token created by the attacker to authenticate to MeshCentral and then leverage this access to compromise nodes managed by the impacted MeshCentral instance.</p>
<p><img alt="image" src="https://github.com/Ylianst/MeshCentral/assets/1319013/605b909e-54eb-4ad0-b397-84fa3fb9455d">
Figure 10: An attacker could leverage the cross-site websocket hijacking vulnerability to read the server configuration file of the MeshCentral system as an administrator to obtain the key used to encrypt sessions (sessionKey).</p>
<h3 id="remediation">Remediation</h3>
<p>To remediate this vulnerability we recommend inspecting the origin header when websocket connections are established to control.ashx and other websocket endpoints. Verify that the origin header sent to the server matches an allowlisted origin. This would prevent an attacker from originating a cross-site websocket connection from an untrusted site.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Ylianst/MeshCentral/security/advisories/GHSA-cp68-qrhr-g9h8">https://github.com/Ylianst/MeshCentral/security/advisories/GHSA-cp68-qrhr-g9h8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26135">https://nvd.nist.gov/vuln/detail/CVE-2024-26135</a></li>
<li><a href="https://github.com/Ylianst/MeshCentral/commit/f2e43cc6da9f5447dbff0948e6c6024c8a315af3">https://github.com/Ylianst/MeshCentral/commit/f2e43cc6da9f5447dbff0948e6c6024c8a315af3</a></li>
<li><a href="https://github.com/advisories/GHSA-cp68-qrhr-g9h8">https://github.com/advisories/GHSA-cp68-qrhr-g9h8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cp68-qrhr-g9h8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-21T00:10:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@serenity-is/corelib] Cross-site Scripting in Serenity]]></title>
        <id>https://github.com/advisories/GHSA-5jjq-8cvj-v6m9</id>
        <link href="https://github.com/advisories/GHSA-5jjq-8cvj-v6m9"/>
        <updated>2024-02-20T23:58:09.000Z</updated>
        <content type="html"><![CDATA[<p>Serenity before 6.8.0 allows XSS via an email link because LoginPage.tsx permits return URLs that do not begin with a / character.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26318">https://nvd.nist.gov/vuln/detail/CVE-2024-26318</a></li>
<li><a href="https://serenity.is/docs/release-notes/6.8.0">https://serenity.is/docs/release-notes/6.8.0</a></li>
<li><a href="https://github.com/advisories/GHSA-5jjq-8cvj-v6m9">https://github.com/advisories/GHSA-5jjq-8cvj-v6m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jjq-8cvj-v6m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-19T06:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-native-document-picker] React Native Document Picker Directory Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</id>
        <link href="https://github.com/advisories/GHSA-pmgm-h3cc-m4hj"/>
        <updated>2024-02-20T20:33:13.000Z</updated>
        <content type="html"><![CDATA[<p>Directory Traversal vulnerability in React Native Document Picker before 8.2.2 and 9.x before 9.1.1 allows a local attacker to execute arbitrary code via a crafted script to the Android library component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25466">https://nvd.nist.gov/vuln/detail/CVE-2024-25466</a></li>
<li><a href="https://github.com/FixedOctocat/CVE-2024-25466/tree/main">https://github.com/FixedOctocat/CVE-2024-25466/tree/main</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/blob/0be5a70c3b456e35c2454aaf4dc8c2d40eb2ab47/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java">https://github.com/rnmods/react-native-document-picker/blob/0be5a70c3b456e35c2454aaf4dc8c2d40eb2ab47/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/commit/1ae7cb217d23a551bff86ad10c7ae6f5e074490f">https://github.com/rnmods/react-native-document-picker/commit/1ae7cb217d23a551bff86ad10c7ae6f5e074490f</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/pull/698">https://github.com/rnmods/react-native-document-picker/pull/698</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/commit/ad0b5e58252eba56a5a3b22311a66ffa5e65cffe">https://github.com/rnmods/react-native-document-picker/commit/ad0b5e58252eba56a5a3b22311a66ffa5e65cffe</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/releases/tag/v8.2.2">https://github.com/rnmods/react-native-document-picker/releases/tag/v8.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-pmgm-h3cc-m4hj">https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-16T09:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-native-document-picker] React Native Document Picker Directory Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</id>
        <link href="https://github.com/advisories/GHSA-pmgm-h3cc-m4hj"/>
        <updated>2024-02-20T20:33:13.000Z</updated>
        <content type="html"><![CDATA[<p>Directory Traversal vulnerability in React Native Document Picker before 8.2.2 and 9.x before 9.1.1 allows a local attacker to execute arbitrary code via a crafted script to the Android library component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25466">https://nvd.nist.gov/vuln/detail/CVE-2024-25466</a></li>
<li><a href="https://github.com/FixedOctocat/CVE-2024-25466/tree/main">https://github.com/FixedOctocat/CVE-2024-25466/tree/main</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/blob/0be5a70c3b456e35c2454aaf4dc8c2d40eb2ab47/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java">https://github.com/rnmods/react-native-document-picker/blob/0be5a70c3b456e35c2454aaf4dc8c2d40eb2ab47/android/src/main/java/com/reactnativedocumentpicker/RNDocumentPickerModule.java</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/commit/1ae7cb217d23a551bff86ad10c7ae6f5e074490f">https://github.com/rnmods/react-native-document-picker/commit/1ae7cb217d23a551bff86ad10c7ae6f5e074490f</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/pull/698">https://github.com/rnmods/react-native-document-picker/pull/698</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/commit/ad0b5e58252eba56a5a3b22311a66ffa5e65cffe">https://github.com/rnmods/react-native-document-picker/commit/ad0b5e58252eba56a5a3b22311a66ffa5e65cffe</a></li>
<li><a href="https://github.com/rnmods/react-native-document-picker/releases/tag/v8.2.2">https://github.com/rnmods/react-native-document-picker/releases/tag/v8.2.2</a></li>
<li><a href="https://github.com/advisories/GHSA-pmgm-h3cc-m4hj">https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmgm-h3cc-m4hj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-16T09:30:26.000Z</published>
    </entry>
</feed>