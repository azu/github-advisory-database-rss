<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-02-14T11:01:25.623Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[simple-markdown] Regular Expression Denial of Service in simple-markdown]]></title>
        <id>https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</id>
        <link href="https://github.com/advisories/GHSA-gpvj-gp8c-c7p2"/>
        <updated>2023-02-14T01:02:09.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in simple-markdown 0.5.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file simple-markdown.js. The manipulation leads to inefficient regular expression complexity. The attack can be launched remotely. Upgrading to version 0.5.2 is able to address this issue. The name of the patch is 89797fef9abb4cab2fb76a335968266a92588816. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-220639.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25103">https://nvd.nist.gov/vuln/detail/CVE-2019-25103</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816">https://github.com/ariabuckles/simple-markdown/commit/89797fef9abb4cab2fb76a335968266a92588816</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2">https://github.com/ariabuckles/simple-markdown/releases/tag/0.5.2</a></li>
<li><a href="https://vuldb.com/?ctiid.220639">https://vuldb.com/?ctiid.220639</a></li>
<li><a href="https://vuldb.com/?id.220639">https://vuldb.com/?id.220639</a></li>
<li><a href="https://github.com/advisories/GHSA-gpvj-gp8c-c7p2">https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpvj-gp8c-c7p2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-12T15:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simple-markdown] Regular Expression Denial of Service in simple-markdown]]></title>
        <id>https://github.com/advisories/GHSA-j533-2g8v-pmpg</id>
        <link href="https://github.com/advisories/GHSA-j533-2g8v-pmpg"/>
        <updated>2023-02-14T00:57:46.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in simple-markdown 0.6.0. Affected is an unknown function of the file simple-markdown.js. The manipulation with the input &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;:/:/:/:/:/:/:/:/:/:/ leads to inefficient regular expression complexity. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.6.1 is able to address this issue. The name of the patch is 015a719bf5cdc561feea05500ecb3274ef609cd2. It is recommended to upgrade the affected component. VDB-220638 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-25102">https://nvd.nist.gov/vuln/detail/CVE-2019-25102</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/pull/73">https://github.com/ariabuckles/simple-markdown/pull/73</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2">https://github.com/ariabuckles/simple-markdown/commit/015a719bf5cdc561feea05500ecb3274ef609cd2</a></li>
<li><a href="https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1">https://github.com/ariabuckles/simple-markdown/releases/tag/0.6.1</a></li>
<li><a href="https://vuldb.com/?ctiid.220638">https://vuldb.com/?ctiid.220638</a></li>
<li><a href="https://vuldb.com/?id.220638">https://vuldb.com/?id.220638</a></li>
<li><a href="https://github.com/advisories/GHSA-j533-2g8v-pmpg">https://github.com/advisories/GHSA-j533-2g8v-pmpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j533-2g8v-pmpg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-02-12T15:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ra-ui-materialui] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-admin] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[react-admin] Cross-Site-Scripting attack on `<RichTextField>`]]></title>
        <id>https://github.com/advisories/GHSA-5jcr-82fh-339v</id>
        <link href="https://github.com/advisories/GHSA-5jcr-82fh-339v"/>
        <updated>2023-02-14T00:32:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All React applications built with react-admin and using the <code>&lt;RichTextField&gt;</code> are affected. </p>
<p><code>&lt;RichTextField&gt;</code> outputs the field value using <code>dangerouslySetInnerHTML</code> without client-side sanitization. If the data isn't sanitized server-side, this opens a possible Cross-Site-Scripting (XSS) attack. </p>
<p>Proof of concept:</p>
<pre><code class="language-jsx">import { RichTextField } from 'react-admin';

const record = {
    id: 1,
    body: `
&lt;p&gt;
&lt;strong&gt;War and Peace&lt;/strong&gt; is a novel by the Russian author
&lt;a href="https://en.wikipedia.org/wiki/Leo_Tolstoy" onclick="document.getElementById('stolendata').value='credentials';"&gt;Leo Tolstoy&lt;/a&gt;,
published serially, then in its entirety in 1869.
&lt;/p&gt;
&lt;p onmouseover="document.getElementById('stolendata').value='credentials';"&gt;
It is regarded as one of Tolstoy's finest literary achievements and remains a classic of world literature.
&lt;/p&gt;
&lt;img src="x" onerror="document.getElementById('stolendata').value='credentials';" /&gt;
`,
};

const VulnerableRichTextField = () =&gt; (
    &lt;&gt;
        &lt;RichTextField record={record} source="body" /&gt;
        &lt;hr /&gt;
        &lt;h4&gt;Stolen data:&lt;/h4&gt;
        &lt;input id="stolendata" defaultValue="none" /&gt;
    &lt;/&gt;
);
</code></pre>
<h3 id="patches">Patches</h3>
<p>Versions 3.19.12 and 4.7.6 now use <code>DOMPurify</code> to escape the HTML before outputting it with React and <code>dangerouslySetInnerHTML</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>You don't need to upgrade if you already sanitize HTML data server-side. </p>
<p>Otherwise, you'll have to replace the <code>&lt;RichTextField&gt;</code> by a custom field doing sanitization by hand:</p>
<pre><code class="language-tsx">// react-admin v4
import * as React from 'react';
import { memo } from 'react';
import PropTypes from 'prop-types';
import get from 'lodash/get';
import Typography from '@material-ui/core/Typography';
import { useRecordContext, sanitizeFieldRestProps, fieldPropTypes } from 'react-admin';
import purify from 'dompurify';

export const removeTags = (input) =&gt;
    input ? input.replace(/&lt;[^&gt;]+&gt;/gm, '') : '';

const RichTextField = memo(
    props =&gt; {
        const { className, emptyText, source, stripTags, ...rest } = props;
        const record = useRecordContext(props);
        const value = get(record, source);

        return (
            &lt;Typography
                className={className}
                variant="body2"
                component="span"
                {...sanitizeFieldRestProps(rest)}
            &gt;
                {value == null &amp;&amp; emptyText ? (
                    emptyText
                ) : stripTags ? (
                    removeTags(value)
                ) : (
                    &lt;span
                        dangerouslySetInnerHTML={{
                            __html: purify.sanitize(value),
                        }}
                    /&gt;
                )}
            &lt;/Typography&gt;
        );
    }
);

RichTextField.defaultProps = {
    addLabel: true,
    stripTags: false,
};

RichTextField.propTypes = {
    // @ts-ignore
    ...Typography.propTypes,
    ...fieldPropTypes,
    stripTags: PropTypes.bool,
};

RichTextField.displayName = 'RichTextField';

export default RichTextField;
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a>, <a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v">https://github.com/marmelab/react-admin/security/advisories/GHSA-5jcr-82fh-339v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25572">https://nvd.nist.gov/vuln/detail/CVE-2023-25572</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8644">https://github.com/marmelab/react-admin/pull/8644</a></li>
<li><a href="https://github.com/marmelab/react-admin/pull/8645">https://github.com/marmelab/react-admin/pull/8645</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v3.19.12">https://github.com/marmelab/react-admin/releases/tag/v3.19.12</a></li>
<li><a href="https://github.com/marmelab/react-admin/releases/tag/v4.7.6">https://github.com/marmelab/react-admin/releases/tag/v4.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-5jcr-82fh-339v">https://github.com/advisories/GHSA-5jcr-82fh-339v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5jcr-82fh-339v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-14T00:32:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor5] Cross-site scripting in CKEditor5]]></title>
        <id>https://github.com/advisories/GHSA-6p89-3p7c-qrhv</id>
        <link href="https://github.com/advisories/GHSA-6p89-3p7c-qrhv"/>
        <updated>2023-02-14T00:29:25.000Z</updated>
        <content type="html"><![CDATA[<p>CKSource CKEditor5 35.4.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the Full Featured CKEditor5 widget.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-48110">https://nvd.nist.gov/vuln/detail/CVE-2022-48110</a></li>
<li><a href="https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html">https://ckeditor.com/docs/ckeditor5/latest/features/html-embed.html</a></li>
<li><a href="https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html">https://packetstormsecurity.com/files/170927/CKSource-CKEditor5-35.4.0-Cross-Site-Scripting.html</a></li>
<li><a href="https://github.com/advisories/GHSA-6p89-3p7c-qrhv">https://github.com/advisories/GHSA-6p89-3p7c-qrhv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p89-3p7c-qrhv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-13T21:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[create-choo-app3] create-choo-app3 is vulnerable to Command Injection via the devInstall function]]></title>
        <id>https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</id>
        <link href="https://github.com/advisories/GHSA-rj7m-2p3g-fjxg"/>
        <updated>2023-02-13T20:51:27.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package create-choo-app3 are vulnerable to Command Injection via the devInstall function due to improper user-input sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25855">https://nvd.nist.gov/vuln/detail/CVE-2022-25855</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951">https://security.snyk.io/vuln/SNYK-JS-CREATECHOOAPP3-3157951</a></li>
<li><a href="https://github.com/advisories/GHSA-rj7m-2p3g-fjxg">https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rj7m-2p3g-fjxg</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-06T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froala-editor] Cross site scripting in froala-editor]]></title>
        <id>https://github.com/advisories/GHSA-97x5-cc53-cv4v</id>
        <link href="https://github.com/advisories/GHSA-97x5-cc53-cv4v"/>
        <updated>2023-02-13T18:05:45.000Z</updated>
        <content type="html"><![CDATA[<p>A cross site scripting (XSS) vulnerability in the Insert Video function of Froala WYSIWYG Editor allows attackers to execute arbitrary web scripts or HTML.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-22864">https://nvd.nist.gov/vuln/detail/CVE-2020-22864</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/issues/3880">https://github.com/froala/wysiwyg-editor/issues/3880</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/pull/3911">https://github.com/froala/wysiwyg-editor/pull/3911</a></li>
<li><a href="https://github.com/418sec/wysiwyg-editor/pull/1">https://github.com/418sec/wysiwyg-editor/pull/1</a></li>
<li><a href="https://www.youtube.com/watch?v=WE3b1iSnWJY">https://www.youtube.com/watch?v=WE3b1iSnWJY</a></li>
<li><a href="https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11">https://github.com/froala/wysiwyg-editor/releases/tag/v4.0.11</a></li>
<li><a href="https://github.com/advisories/GHSA-97x5-cc53-cv4v">https://github.com/advisories/GHSA-97x5-cc53-cv4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-97x5-cc53-cv4v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-10-28T23:14:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cacheable-request] Withdrawn: cacheable-request depends on http-cache-semantics, which is vulnerable to Regular Expression Denial of Service]]></title>
        <id>https://github.com/advisories/GHSA-8x6c-cv3v-vp6g</id>
        <link href="https://github.com/advisories/GHSA-8x6c-cv3v-vp6g"/>
        <updated>2023-02-14T02:40:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="this-advisory-is-withdawn">This advisory is withdawn.</h2>
<p>cacheable-request depends on http-cache-semanttics, which contains an Inefficient Regular Expression Complexity in versions prior to 4.1.1 of that package. cacheable-request has been updated to rely on the fixed version in 10.2.7. </p>
<h3 id="summary-of-http-cache-semantics-vulnerability">Summary of http-cache-semantics vulnerability</h3>
<p>http-cache semantics contains an Inefficient Regular Expression Complexity , leading to Denial of Service. This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library.</p>
<h3 id="details">Details</h3>
<p><a href="https://github.com/advisories/GHSA-rc47-6667-2j5j">https://github.com/advisories/GHSA-rc47-6667-2j5j</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jaredwray/cacheable-request/security/advisories/GHSA-8x6c-cv3v-vp6g">https://github.com/jaredwray/cacheable-request/security/advisories/GHSA-8x6c-cv3v-vp6g</a></li>
<li><a href="https://github.com/jaredwray/cacheable-request/commit/8a47777e4eb61960469873cf4b3a2823742fc15e">https://github.com/jaredwray/cacheable-request/commit/8a47777e4eb61960469873cf4b3a2823742fc15e</a></li>
<li><a href="https://github.com/advisories/GHSA-rc47-6667-2j5j">https://github.com/advisories/GHSA-rc47-6667-2j5j</a></li>
<li><a href="https://github.com/advisories/GHSA-8x6c-cv3v-vp6g">https://github.com/advisories/GHSA-8x6c-cv3v-vp6g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8x6c-cv3v-vp6g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-11T00:13:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[chrome-launcher] chrome-launcher prior to 0.13.2 is subject to OS Command Injection via the $HOME environment variable]]></title>
        <id>https://github.com/advisories/GHSA-gp2j-mg4w-2rh5</id>
        <link href="https://github.com/advisories/GHSA-gp2j-mg4w-2rh5"/>
        <updated>2023-02-10T19:46:55.000Z</updated>
        <content type="html"><![CDATA[<p>chrome-launcher prior to 0.13.2 is subject to OS Command Injection via the $HOME environment variable in Linux operating systems. This issue is patched in version 0.13.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7645">https://nvd.nist.gov/vuln/detail/CVE-2020-7645</a></li>
<li><a href="http://snyk.io/vuln/SNYK-JS-CHROMELAUNCHER-537575">http://snyk.io/vuln/SNYK-JS-CHROMELAUNCHER-537575</a></li>
<li><a href="https://github.com/GoogleChrome/chrome-launcher/pull/197">https://github.com/GoogleChrome/chrome-launcher/pull/197</a></li>
<li><a href="https://github.com/advisories/GHSA-gp2j-mg4w-2rh5">https://github.com/advisories/GHSA-gp2j-mg4w-2rh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp2j-mg4w-2rh5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:17:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[is-url] is-url Inefficient Regular Expression Complexity vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-p9w8-2mpq-49h9</id>
        <link href="https://github.com/advisories/GHSA-p9w8-2mpq-49h9"/>
        <updated>2023-02-10T00:59:16.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Segmentio is-url up to 1.2.2. It has been rated as problematic. Affected by this issue is some unknown functionality of the file index.js. The manipulation leads to inefficient regular expression complexity. The attack may be launched remotely. Upgrading to version 1.2.3 is able to address this issue. The name of the patch is 149550935c63a98c11f27f694a7c4a9479e53794. It is recommended to upgrade the affected component. VDB-220058 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25079">https://nvd.nist.gov/vuln/detail/CVE-2018-25079</a></li>
<li><a href="https://github.com/segmentio/is-url/pull/18">https://github.com/segmentio/is-url/pull/18</a></li>
<li><a href="https://github.com/segmentio/is-url/commit/149550935c63a98c11f27f694a7c4a9479e53794">https://github.com/segmentio/is-url/commit/149550935c63a98c11f27f694a7c4a9479e53794</a></li>
<li><a href="https://github.com/segmentio/is-url/releases/tag/v1.2.3">https://github.com/segmentio/is-url/releases/tag/v1.2.3</a></li>
<li><a href="https://vuldb.com/?ctiid.220058">https://vuldb.com/?ctiid.220058</a></li>
<li><a href="https://vuldb.com/?id.220058">https://vuldb.com/?id.220058</a></li>
<li><a href="https://github.com/advisories/GHSA-p9w8-2mpq-49h9">https://github.com/advisories/GHSA-p9w8-2mpq-49h9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9w8-2mpq-49h9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-04T06:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@sideway/formula] @sideway/formula contains Regular Expression Denial of Service (ReDoS) Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c2jc-4fpr-4vhg</id>
        <link href="https://github.com/advisories/GHSA-c2jc-4fpr-4vhg"/>
        <updated>2023-02-08T22:38:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>User-provided strings to formula's parser might lead to polynomial execution time.</p>
<h3 id="patches">Patches</h3>
<p>Users should upgrade to 3.0.1+.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hapijs/formula/security/advisories/GHSA-c2jc-4fpr-4vhg">https://github.com/hapijs/formula/security/advisories/GHSA-c2jc-4fpr-4vhg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25166">https://nvd.nist.gov/vuln/detail/CVE-2023-25166</a></li>
<li><a href="https://github.com/hapijs/formula/commit/9fbc20a02d75ae809c37a610a57802cd1b41b3fe">https://github.com/hapijs/formula/commit/9fbc20a02d75ae809c37a610a57802cd1b41b3fe</a></li>
<li><a href="https://github.com/advisories/GHSA-c2jc-4fpr-4vhg">https://github.com/advisories/GHSA-c2jc-4fpr-4vhg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c2jc-4fpr-4vhg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-08T22:38:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[joplin] Joplin Desktop App vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-h6c2-879r-jffh</id>
        <link href="https://github.com/advisories/GHSA-h6c2-879r-jffh"/>
        <updated>2023-02-08T21:56:38.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in Joplin Desktop App before v2.9.17 allows attacker to execute arbitrary code via improper santization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-45598">https://nvd.nist.gov/vuln/detail/CVE-2022-45598</a></li>
<li><a href="https://github.com/laurent22/joplin/commit/a2de167b95debad83a0f0c7925a88c0198db812e">https://github.com/laurent22/joplin/commit/a2de167b95debad83a0f0c7925a88c0198db812e</a></li>
<li><a href="https://github.com/laurent22/joplin/releases/tag/v2.9.17">https://github.com/laurent22/joplin/releases/tag/v2.9.17</a></li>
<li><a href="https://github.com/advisories/GHSA-h6c2-879r-jffh">https://github.com/advisories/GHSA-h6c2-879r-jffh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6c2-879r-jffh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-31T18:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mt7688-wiscan] mt7688-wiscan is vulnerable to Command Injection due to improper input sanitization]]></title>
        <id>https://github.com/advisories/GHSA-5h8c-8ccp-8gmh</id>
        <link href="https://github.com/advisories/GHSA-5h8c-8ccp-8gmh"/>
        <updated>2023-02-08T21:48:42.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package mt7688-wiscan before 0.8.3 are vulnerable to Command Injection due to improper input sanitization in the 'wiscan.scan' function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25916">https://nvd.nist.gov/vuln/detail/CVE-2022-25916</a></li>
<li><a href="https://github.com/simenkid/mt7688-wiscan/commit/ff6d6567c65b4e972916a8fbc4533212f20a2fa5">https://github.com/simenkid/mt7688-wiscan/commit/ff6d6567c65b4e972916a8fbc4533212f20a2fa5</a></li>
<li><a href="https://github.com/simenkid/mt7688-wiscan/blob/master/index.js%23L22">https://github.com/simenkid/mt7688-wiscan/blob/master/index.js%23L22</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MT7688WISCAN-3177394">https://security.snyk.io/vuln/SNYK-JS-MT7688WISCAN-3177394</a></li>
<li><a href="https://github.com/advisories/GHSA-5h8c-8ccp-8gmh">https://github.com/advisories/GHSA-5h8c-8ccp-8gmh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h8c-8ccp-8gmh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-01T06:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tinacms/cli] Sensitive Information leak via Script File in TinaCMS]]></title>
        <id>https://github.com/advisories/GHSA-pc2q-jcxq-rjrr</id>
        <link href="https://github.com/advisories/GHSA-pc2q-jcxq-rjrr"/>
        <updated>2023-02-08T22:40:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Sensitive Information leaked via script File in TinaCMS. Sites building with @tinacms/cli &gt;= 1.0.0 &amp;&amp; &lt; 1.0.9 that store sensitive values in process.env var are impacted. If you're on a version prior to 1.0.0 this vulnerability does not affect you.</p>
<p>If your Tina-enabled website has sensitive credentials stored as environment variables (eg. Algolia API keys) you should rotate those keys immediately.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been patched in @tinacms/<a href="mailto:cli@1.0.9">cli@1.0.9</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrading, and rotating secure &amp; exposed keys is required for the proper fix.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/tinacms/tinacms/pull/3584">https://github.com/tinacms/tinacms/pull/3584</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinacms/tinacms/security/advisories/GHSA-pc2q-jcxq-rjrr">https://github.com/tinacms/tinacms/security/advisories/GHSA-pc2q-jcxq-rjrr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25164">https://nvd.nist.gov/vuln/detail/CVE-2023-25164</a></li>
<li><a href="https://github.com/tinacms/tinacms/pull/3584">https://github.com/tinacms/tinacms/pull/3584</a></li>
<li><a href="https://github.com/advisories/GHSA-pc2q-jcxq-rjrr">https://github.com/advisories/GHSA-pc2q-jcxq-rjrr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pc2q-jcxq-rjrr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-08T18:18:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[semver-tags] semver-tags is vulnerable to Command Injection via the getGitTagsRemote function]]></title>
        <id>https://github.com/advisories/GHSA-8h3g-hcwp-6hxq</id>
        <link href="https://github.com/advisories/GHSA-8h3g-hcwp-6hxq"/>
        <updated>2023-02-13T20:51:30.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package semver-tags are vulnerable to Command Injection via the getGitTagsRemote function due to improper input sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25853">https://nvd.nist.gov/vuln/detail/CVE-2022-25853</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-SEMVERTAGS-3175612">https://security.snyk.io/vuln/SNYK-JS-SEMVERTAGS-3175612</a></li>
<li><a href="https://github.com/jtrussell/semver-tags/blob/db1ba680bafed0d51e1bb36bd38f2c5439fe8b00/lib/get-tags.js#L21">https://github.com/jtrussell/semver-tags/blob/db1ba680bafed0d51e1bb36bd38f2c5439fe8b00/lib/get-tags.js#L21</a></li>
<li><a href="https://github.com/jtrussell/semver-tags/blob/db1ba680bafed0d51e1bb36bd38f2c5439fe8b00/lib/get-tags.js%23L21">https://github.com/jtrussell/semver-tags/blob/db1ba680bafed0d51e1bb36bd38f2c5439fe8b00/lib/get-tags.js%23L21</a></li>
<li><a href="https://github.com/advisories/GHSA-8h3g-hcwp-6hxq">https://github.com/advisories/GHSA-8h3g-hcwp-6hxq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h3g-hcwp-6hxq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-06T06:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap-3-typeahead] Cross-site Scripting in Bootstrap-3-Typeahead]]></title>
        <id>https://github.com/advisories/GHSA-m2hm-hrr2-6p2q</id>
        <link href="https://github.com/advisories/GHSA-m2hm-hrr2-6p2q"/>
        <updated>2023-02-03T00:18:23.000Z</updated>
        <content type="html"><![CDATA[<p>Bootstrap-3-Typeahead after version 4.0.2 is vulnerable to a cross-site scripting flaw in the highlighter() function. An attacker could exploit this via user interaction to execute code in the user's browser. This issue was introduced in commit <code>dbd1af5bf</code> and has not been fixed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10215">https://nvd.nist.gov/vuln/detail/CVE-2019-10215</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:3771">https://access.redhat.com/errata/RHSA-2019:3771</a></li>
<li><a href="https://github.com/bassjobsen/Bootstrap-3-Typeahead">https://github.com/bassjobsen/Bootstrap-3-Typeahead</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00083.html">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00083.html</a></li>
<li><a href="https://github.com/bassjobsen/Bootstrap-3-Typeahead/commit/dbd1af5bfb14592213e3d88f1fa8f726b93f8a1e">https://github.com/bassjobsen/Bootstrap-3-Typeahead/commit/dbd1af5bfb14592213e3d88f1fa8f726b93f8a1e</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2019-10215">https://access.redhat.com/security/cve/CVE-2019-10215</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1735506">https://bugzilla.redhat.com/show_bug.cgi?id=1735506</a></li>
<li><a href="https://github.com/advisories/GHSA-m2hm-hrr2-6p2q">https://github.com/advisories/GHSA-m2hm-hrr2-6p2q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2hm-hrr2-6p2q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:00:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[is-http2] is-http2 vulnerable to Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-2275-rpf5-xv8h</id>
        <link href="https://github.com/advisories/GHSA-2275-rpf5-xv8h"/>
        <updated>2023-02-08T22:40:04.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package is-http2 are vulnerable to Command Injection due to missing input sanitization or other checks, and sandboxes being employed to the isH2 function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25906">https://nvd.nist.gov/vuln/detail/CVE-2022-25906</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-ISHTTP2-3153878">https://security.snyk.io/vuln/SNYK-JS-ISHTTP2-3153878</a></li>
<li><a href="https://github.com/stefanjudis/is-http2/blob/master/index.js#L23">https://github.com/stefanjudis/is-http2/blob/master/index.js#L23</a></li>
<li><a href="https://github.com/advisories/GHSA-2275-rpf5-xv8h">https://github.com/advisories/GHSA-2275-rpf5-xv8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2275-rpf5-xv8h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-02-01T06:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web-node-server] Path Traversal in web-node-server]]></title>
        <id>https://github.com/advisories/GHSA-3fwq-qv5v-2wxf</id>
        <link href="https://github.com/advisories/GHSA-3fwq-qv5v-2wxf"/>
        <updated>2023-02-02T05:06:19.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in youngerheart nodeserver and classified as critical. Affected by this vulnerability is an unknown functionality of the file nodeserver.js. The manipulation leads to path traversal. The name of the patch is c4c0f0138ab5afbac58e03915d446680421bde28. It is recommended to apply a patch to fix this issue. The identifier VDB-218461 was assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36651">https://nvd.nist.gov/vuln/detail/CVE-2020-36651</a></li>
<li><a href="https://github.com/youngerheart/nodeserver/pull/6">https://github.com/youngerheart/nodeserver/pull/6</a></li>
<li><a href="https://github.com/youngerheart/nodeserver/commit/c4c0f0138ab5afbac58e03915d446680421bde28">https://github.com/youngerheart/nodeserver/commit/c4c0f0138ab5afbac58e03915d446680421bde28</a></li>
<li><a href="https://vuldb.com/?ctiid.218461">https://vuldb.com/?ctiid.218461</a></li>
<li><a href="https://vuldb.com/?id.218461">https://vuldb.com/?id.218461</a></li>
<li><a href="https://github.com/advisories/GHSA-3fwq-qv5v-2wxf">https://github.com/advisories/GHSA-3fwq-qv5v-2wxf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fwq-qv5v-2wxf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-18T03:31:17.000Z</published>
    </entry>
</feed>