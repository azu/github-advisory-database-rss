<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-03-14T11:01:32.087Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[css-what] Denial of service in css-what]]></title>
        <id>https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</id>
        <link href="https://github.com/advisories/GHSA-q8pj-2vqx-8ggc"/>
        <updated>2023-03-13T23:38:16.000Z</updated>
        <content type="html"><![CDATA[<p>The css-what package 4.0.0 through 5.0.0 for Node.js does not ensure that attribute parsing has Linear Time Complexity relative to the size of the input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33587">https://nvd.nist.gov/vuln/detail/CVE-2021-33587</a></li>
<li><a href="https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655">https://github.com/fb55/css-what/commit/4cdaacfd0d4b6fd00614be030da0dea6c2994655</a></li>
<li><a href="https://github.com/fb55/css-what/releases/tag/v5.0.1">https://github.com/fb55/css-what/releases/tag/v5.0.1</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210706-0007/">https://security.netapp.com/advisory/ntap-20210706-0007/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html">https://lists.debian.org/debian-lts-announce/2023/03/msg00001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-q8pj-2vqx-8ggc">https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8pj-2vqx-8ggc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-07T22:11:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trim-newlines] Uncontrolled Resource Consumption in trim-newlines]]></title>
        <id>https://github.com/advisories/GHSA-7p7h-4mm5-852v</id>
        <link href="https://github.com/advisories/GHSA-7p7h-4mm5-852v"/>
        <updated>2023-03-13T23:31:28.000Z</updated>
        <content type="html"><![CDATA[<p>@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33623">https://nvd.nist.gov/vuln/detail/CVE-2021-33623</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91">https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1">https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1</a></li>
<li><a href="https://www.npmjs.com/package/trim-newlines">https://www.npmjs.com/package/trim-newlines</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210702-0007/">https://security.netapp.com/advisory/ntap-20210702-0007/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00033.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00033.html</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/commit/b10d5f4afef832b16bc56d49fc52c68cbd403869">https://github.com/sindresorhus/trim-newlines/commit/b10d5f4afef832b16bc56d49fc52c68cbd403869</a></li>
<li><a href="https://github.com/advisories/GHSA-7p7h-4mm5-852v">https://github.com/advisories/GHSA-7p7h-4mm5-852v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7p7h-4mm5-852v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-07T22:10:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[trim-newlines] Uncontrolled Resource Consumption in trim-newlines]]></title>
        <id>https://github.com/advisories/GHSA-7p7h-4mm5-852v</id>
        <link href="https://github.com/advisories/GHSA-7p7h-4mm5-852v"/>
        <updated>2023-03-13T23:31:28.000Z</updated>
        <content type="html"><![CDATA[<p>@rkesters/gnuplot is an easy to use node module to draw charts using gnuplot and ps2pdf. The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33623">https://nvd.nist.gov/vuln/detail/CVE-2021-33623</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91">https://github.com/sindresorhus/trim-newlines/commit/25246c6ce5eea1c82d448998733a6302a4350d91</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1">https://github.com/sindresorhus/trim-newlines/releases/tag/v4.0.1</a></li>
<li><a href="https://www.npmjs.com/package/trim-newlines">https://www.npmjs.com/package/trim-newlines</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210702-0007/">https://security.netapp.com/advisory/ntap-20210702-0007/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00033.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00033.html</a></li>
<li><a href="https://github.com/sindresorhus/trim-newlines/commit/b10d5f4afef832b16bc56d49fc52c68cbd403869">https://github.com/sindresorhus/trim-newlines/commit/b10d5f4afef832b16bc56d49fc52c68cbd403869</a></li>
<li><a href="https://github.com/advisories/GHSA-7p7h-4mm5-852v">https://github.com/advisories/GHSA-7p7h-4mm5-852v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7p7h-4mm5-852v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-07T22:10:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serialize-javascript] Insecure serialization leading to RCE in serialize-javascript]]></title>
        <id>https://github.com/advisories/GHSA-hxcc-f52p-wc94</id>
        <link href="https://github.com/advisories/GHSA-hxcc-f52p-wc94"/>
        <updated>2023-03-13T23:28:40.000Z</updated>
        <content type="html"><![CDATA[<p>serialize-javascript prior to 3.1.0 allows remote attackers to inject arbitrary code via the function "deleteFunctions" within "index.js". </p>
<p>An object such as <code>{"foo": /1"/, "bar": "a\"@__R-&lt;UID&gt;-0__@"}</code> was serialized as <code>{"foo": /1"/, "bar": "a\/1"/}</code>, which allows an attacker to escape the <code>bar</code> key. This requires the attacker to control the values of both <code>foo</code> and <code>bar</code> and guess the value of <code>&lt;UID&gt;</code>. The UID has a keyspace of approximately 4 billion making it a realistic network attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7660">https://nvd.nist.gov/vuln/detail/CVE-2020-7660</a></li>
<li><a href="https://github.com/yahoo/serialize-javascript/commit/f21a6fb3ace2353413761e79717b2d210ba6ccbd">https://github.com/yahoo/serialize-javascript/commit/f21a6fb3ace2353413761e79717b2d210ba6ccbd</a></li>
<li><a href="https://github.com/advisories/GHSA-hxcc-f52p-wc94">https://github.com/advisories/GHSA-hxcc-f52p-wc94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxcc-f52p-wc94</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-08-11T17:21:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket.io-parser] Insufficient validation when decoding a Socket.IO packet]]></title>
        <id>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</id>
        <link href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq"/>
        <updated>2023-03-13T23:27:28.000Z</updated>
        <content type="html"><![CDATA[<p>Due to improper type validation in the <code>socket.io-parser</code> library (which is used by the <code>socket.io</code> and <code>socket.io-client</code> packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.</p>
<p>Example:</p>
<pre><code class="language-js">const decoder = new Decoder();

decoder.on("decoded", (packet) =&gt; {
 console.log(packet.data); // prints [ 'hello', [Function: splice] ]
})

decoder.add('51-["hello",{"_placeholder":true,"num":"splice"}]');
decoder.add(Buffer.from("world"));
</code></pre>
<p>This bubbles up in the <code>socket.io</code> package:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // here, "val" could be a function instead of a buffer
 });
});
</code></pre>
<p>:warning: IMPORTANT NOTE :warning:</p>
<p>You need to make sure that the payload that you received from the client is actually a <code>Buffer</code> object:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 if (!Buffer.isBuffer(val)) {
 socket.disconnect();
 return;
 }
 // ...
 });
});
</code></pre>
<p><strong>If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).</strong></p>
<p>Example of values that could be sent by a malicious user:</p>
<ul>
<li>a number that is out of bounds</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":10}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a value that is not a number, like <code>undefined</code></li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":undefined}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Array</code>, like "push"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"push"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "push" function
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Object</code>, like "hasOwnProperty"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"hasOwnProperty"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "hasOwnProperty" function
 });
});
</code></pre>
<p>This should be fixed by:</p>
<ul>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a>, included in <code>socket.io-parser@4.2.1</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a>, included in <code>socket.io-parser@4.0.5</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a>, included in <code>socket.io-parser@3.4.2</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a>, included in <code>socket.io-parser@3.3.3</code></li>
</ul>
<h3 id="dependency-analysis-for-the-socketio-package">Dependency analysis for the <code>socket.io</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.2...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.1.3...4.5.1</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5...4.1.2</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.3.0...2.5.0</code></td>
<td><code>~3.4.0</code> (<a href="https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="dependency-analysis-for-the-socketio-client-package">Dependency analysis for the <code>socket.io-client</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io-client</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.0...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/b862924b7f1720979e5db2f0154906b305d420e3">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.3.0...4.4.1</code></td>
<td><code>~4.1.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/91b948b8607166fcc79f028a6428819277214188">ref</a>)</td>
<td>No, but the impact is very limited</td>
</tr>
<tr>
<td><code>3.1.0...4.2.0</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io-client/commit/5d9b4eb42b1f5778e6f033096694acb331b132c4">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io-client/commit/cf9fc358365cc15a41260a51dc186c881bf086ca">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.2.0...2.5.0</code></td>
<td><code>~3.3.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2421">https://nvd.nist.gov/vuln/detail/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00045">https://csirt.divd.nl/cases/DIVD-2022-00045</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-2421">https://csirt.divd.nl/cves/CVE-2022-2421</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-2421">https://csirt.divd.nl/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00045">https://csirt.divd.nl/DIVD-2022-00045</a></li>
<li><a href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq">https://github.com/advisories/GHSA-qm95-pgcg-qqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket.io-parser] Insufficient validation when decoding a Socket.IO packet]]></title>
        <id>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</id>
        <link href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq"/>
        <updated>2023-03-13T23:27:28.000Z</updated>
        <content type="html"><![CDATA[<p>Due to improper type validation in the <code>socket.io-parser</code> library (which is used by the <code>socket.io</code> and <code>socket.io-client</code> packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.</p>
<p>Example:</p>
<pre><code class="language-js">const decoder = new Decoder();

decoder.on("decoded", (packet) =&gt; {
 console.log(packet.data); // prints [ 'hello', [Function: splice] ]
})

decoder.add('51-["hello",{"_placeholder":true,"num":"splice"}]');
decoder.add(Buffer.from("world"));
</code></pre>
<p>This bubbles up in the <code>socket.io</code> package:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // here, "val" could be a function instead of a buffer
 });
});
</code></pre>
<p>:warning: IMPORTANT NOTE :warning:</p>
<p>You need to make sure that the payload that you received from the client is actually a <code>Buffer</code> object:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 if (!Buffer.isBuffer(val)) {
 socket.disconnect();
 return;
 }
 // ...
 });
});
</code></pre>
<p><strong>If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).</strong></p>
<p>Example of values that could be sent by a malicious user:</p>
<ul>
<li>a number that is out of bounds</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":10}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a value that is not a number, like <code>undefined</code></li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":undefined}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Array</code>, like "push"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"push"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "push" function
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Object</code>, like "hasOwnProperty"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"hasOwnProperty"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "hasOwnProperty" function
 });
});
</code></pre>
<p>This should be fixed by:</p>
<ul>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a>, included in <code>socket.io-parser@4.2.1</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a>, included in <code>socket.io-parser@4.0.5</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a>, included in <code>socket.io-parser@3.4.2</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a>, included in <code>socket.io-parser@3.3.3</code></li>
</ul>
<h3 id="dependency-analysis-for-the-socketio-package">Dependency analysis for the <code>socket.io</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.2...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.1.3...4.5.1</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5...4.1.2</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.3.0...2.5.0</code></td>
<td><code>~3.4.0</code> (<a href="https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="dependency-analysis-for-the-socketio-client-package">Dependency analysis for the <code>socket.io-client</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io-client</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.0...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/b862924b7f1720979e5db2f0154906b305d420e3">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.3.0...4.4.1</code></td>
<td><code>~4.1.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/91b948b8607166fcc79f028a6428819277214188">ref</a>)</td>
<td>No, but the impact is very limited</td>
</tr>
<tr>
<td><code>3.1.0...4.2.0</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io-client/commit/5d9b4eb42b1f5778e6f033096694acb331b132c4">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io-client/commit/cf9fc358365cc15a41260a51dc186c881bf086ca">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.2.0...2.5.0</code></td>
<td><code>~3.3.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2421">https://nvd.nist.gov/vuln/detail/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00045">https://csirt.divd.nl/cases/DIVD-2022-00045</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-2421">https://csirt.divd.nl/cves/CVE-2022-2421</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-2421">https://csirt.divd.nl/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00045">https://csirt.divd.nl/DIVD-2022-00045</a></li>
<li><a href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq">https://github.com/advisories/GHSA-qm95-pgcg-qqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket.io-parser] Insufficient validation when decoding a Socket.IO packet]]></title>
        <id>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</id>
        <link href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq"/>
        <updated>2023-03-13T23:27:28.000Z</updated>
        <content type="html"><![CDATA[<p>Due to improper type validation in the <code>socket.io-parser</code> library (which is used by the <code>socket.io</code> and <code>socket.io-client</code> packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.</p>
<p>Example:</p>
<pre><code class="language-js">const decoder = new Decoder();

decoder.on("decoded", (packet) =&gt; {
 console.log(packet.data); // prints [ 'hello', [Function: splice] ]
})

decoder.add('51-["hello",{"_placeholder":true,"num":"splice"}]');
decoder.add(Buffer.from("world"));
</code></pre>
<p>This bubbles up in the <code>socket.io</code> package:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // here, "val" could be a function instead of a buffer
 });
});
</code></pre>
<p>:warning: IMPORTANT NOTE :warning:</p>
<p>You need to make sure that the payload that you received from the client is actually a <code>Buffer</code> object:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 if (!Buffer.isBuffer(val)) {
 socket.disconnect();
 return;
 }
 // ...
 });
});
</code></pre>
<p><strong>If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).</strong></p>
<p>Example of values that could be sent by a malicious user:</p>
<ul>
<li>a number that is out of bounds</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":10}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a value that is not a number, like <code>undefined</code></li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":undefined}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Array</code>, like "push"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"push"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "push" function
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Object</code>, like "hasOwnProperty"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"hasOwnProperty"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "hasOwnProperty" function
 });
});
</code></pre>
<p>This should be fixed by:</p>
<ul>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a>, included in <code>socket.io-parser@4.2.1</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a>, included in <code>socket.io-parser@4.0.5</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a>, included in <code>socket.io-parser@3.4.2</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a>, included in <code>socket.io-parser@3.3.3</code></li>
</ul>
<h3 id="dependency-analysis-for-the-socketio-package">Dependency analysis for the <code>socket.io</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.2...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.1.3...4.5.1</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5...4.1.2</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.3.0...2.5.0</code></td>
<td><code>~3.4.0</code> (<a href="https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="dependency-analysis-for-the-socketio-client-package">Dependency analysis for the <code>socket.io-client</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io-client</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.0...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/b862924b7f1720979e5db2f0154906b305d420e3">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.3.0...4.4.1</code></td>
<td><code>~4.1.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/91b948b8607166fcc79f028a6428819277214188">ref</a>)</td>
<td>No, but the impact is very limited</td>
</tr>
<tr>
<td><code>3.1.0...4.2.0</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io-client/commit/5d9b4eb42b1f5778e6f033096694acb331b132c4">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io-client/commit/cf9fc358365cc15a41260a51dc186c881bf086ca">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.2.0...2.5.0</code></td>
<td><code>~3.3.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2421">https://nvd.nist.gov/vuln/detail/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00045">https://csirt.divd.nl/cases/DIVD-2022-00045</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-2421">https://csirt.divd.nl/cves/CVE-2022-2421</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-2421">https://csirt.divd.nl/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00045">https://csirt.divd.nl/DIVD-2022-00045</a></li>
<li><a href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq">https://github.com/advisories/GHSA-qm95-pgcg-qqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[socket.io-parser] Insufficient validation when decoding a Socket.IO packet]]></title>
        <id>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</id>
        <link href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq"/>
        <updated>2023-03-13T23:27:28.000Z</updated>
        <content type="html"><![CDATA[<p>Due to improper type validation in the <code>socket.io-parser</code> library (which is used by the <code>socket.io</code> and <code>socket.io-client</code> packages to encode and decode Socket.IO packets), it is possible to overwrite the _placeholder object which allows an attacker to place references to functions at arbitrary places in the resulting query object.</p>
<p>Example:</p>
<pre><code class="language-js">const decoder = new Decoder();

decoder.on("decoded", (packet) =&gt; {
 console.log(packet.data); // prints [ 'hello', [Function: splice] ]
})

decoder.add('51-["hello",{"_placeholder":true,"num":"splice"}]');
decoder.add(Buffer.from("world"));
</code></pre>
<p>This bubbles up in the <code>socket.io</code> package:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // here, "val" could be a function instead of a buffer
 });
});
</code></pre>
<p>:warning: IMPORTANT NOTE :warning:</p>
<p>You need to make sure that the payload that you received from the client is actually a <code>Buffer</code> object:</p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 if (!Buffer.isBuffer(val)) {
 socket.disconnect();
 return;
 }
 // ...
 });
});
</code></pre>
<p><strong>If that's already the case, then you are not impacted by this issue, and there is no way an attacker could make your server crash (or escalate privileges, ...).</strong></p>
<p>Example of values that could be sent by a malicious user:</p>
<ul>
<li>a number that is out of bounds</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":10}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a value that is not a number, like <code>undefined</code></li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":undefined}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is `undefined`
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Array</code>, like "push"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"push"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "push" function
 });
});
</code></pre>
<ul>
<li>a string that is part of the prototype of <code>Object</code>, like "hasOwnProperty"</li>
</ul>
<p>Sample packet: <code>451-["hello",{"_placeholder":true,"num":"hasOwnProperty"}]</code></p>
<pre><code class="language-js">io.on("connection", (socket) =&gt; {
 socket.on("hello", (val) =&gt; {
 // val is a reference to the "hasOwnProperty" function
 });
});
</code></pre>
<p>This should be fixed by:</p>
<ul>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a>, included in <code>socket.io-parser@4.2.1</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a>, included in <code>socket.io-parser@4.0.5</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a>, included in <code>socket.io-parser@3.4.2</code></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a>, included in <code>socket.io-parser@3.3.3</code></li>
</ul>
<h3 id="dependency-analysis-for-the-socketio-package">Dependency analysis for the <code>socket.io</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.2...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io/commit/9890b036cf942f6b6ad2afeb6a8361c32cd5d528">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.1.3...4.5.1</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io/commit/7c44893d7878cd5bba1eff43150c3e664f88fb57">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5...4.1.2</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io/commit/752dfe3b1e5fecda53dae899b4a39e6fed5a1a17">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io/commit/1af3267e3f5f7884214cf2ca4d5282d620092fb0">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.3.0...2.5.0</code></td>
<td><code>~3.4.0</code> (<a href="https://github.com/socketio/socket.io/commit/cf39362014f5ff13a17168b74772c43920d6e4fd">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="dependency-analysis-for-the-socketio-client-package">Dependency analysis for the <code>socket.io-client</code> package</h3>
<table>
<thead>
<tr>
<th><code>socket.io-client</code> version</th>
<th><code>socket.io-parser</code> version</th>
<th>Covered?</th>
</tr>
</thead>
<tbody><tr>
<td><code>4.5.0...latest</code></td>
<td><code>~4.2.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/b862924b7f1720979e5db2f0154906b305d420e3">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>4.3.0...4.4.1</code></td>
<td><code>~4.1.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/91b948b8607166fcc79f028a6428819277214188">ref</a>)</td>
<td>No, but the impact is very limited</td>
</tr>
<tr>
<td><code>3.1.0...4.2.0</code></td>
<td><code>~4.0.4</code> (<a href="https://github.com/socketio/socket.io-client/commit/5d9b4eb42b1f5778e6f033096694acb331b132c4">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.5</code></td>
<td><code>~4.0.3</code> (<a href="https://github.com/socketio/socket.io-client/commit/cf9fc358365cc15a41260a51dc186c881bf086ca">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>3.0.0...3.0.4</code></td>
<td><code>~4.0.1</code> (<a href="https://github.com/socketio/socket.io-client/commit/b7e07ba633ceb9c1dc94cc894c10b9bfca536c7a">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
<tr>
<td><code>2.2.0...2.5.0</code></td>
<td><code>~3.3.0</code> (<a href="https://github.com/socketio/socket.io-client/commit/06e9a4ca2621176c30c352b2ba8b34fa42b8d0ba">ref</a>)</td>
<td>Yes :heavy_check_mark:</td>
</tr>
</tbody></table>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2421">https://nvd.nist.gov/vuln/detail/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/cases/DIVD-2022-00045">https://csirt.divd.nl/cases/DIVD-2022-00045</a></li>
<li><a href="https://csirt.divd.nl/cves/CVE-2022-2421">https://csirt.divd.nl/cves/CVE-2022-2421</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4">https://github.com/socketio/socket.io-parser/commit/b559f050ee02bd90bd853b9823f8de7fa94a80d4</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050">https://github.com/socketio/socket.io-parser/commit/b5d0cb7dc56a0601a09b056beaeeb0e43b160050</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14">https://github.com/socketio/socket.io-parser/commit/04d23cecafe1b859fb03e0cbf6ba3b74dff56d14</a></li>
<li><a href="https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983">https://github.com/socketio/socket.io-parser/commit/fb21e422fc193b34347395a33e0f625bebc09983</a></li>
<li><a href="https://csirt.divd.nl/CVE-2022-2421">https://csirt.divd.nl/CVE-2022-2421</a></li>
<li><a href="https://csirt.divd.nl/DIVD-2022-00045">https://csirt.divd.nl/DIVD-2022-00045</a></li>
<li><a href="https://github.com/advisories/GHSA-qm95-pgcg-qqfq">https://github.com/advisories/GHSA-qm95-pgcg-qqfq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm95-pgcg-qqfq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T12:00:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[axios] axios Inefficient Regular Expression Complexity vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-cph5-m8f7-6c5x</id>
        <link href="https://github.com/advisories/GHSA-cph5-m8f7-6c5x"/>
        <updated>2023-03-13T23:23:20.000Z</updated>
        <content type="html"><![CDATA[<p>axios before v0.21.2 is vulnerable to Inefficient Regular Expression Complexity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3749">https://nvd.nist.gov/vuln/detail/CVE-2021-3749</a></li>
<li><a href="https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929">https://github.com/axios/axios/commit/5b457116e31db0e88fede6c428e969e87f290929</a></li>
<li><a href="https://huntr.dev/bounties/1e8f07fc-c384-4ff9-8498-0690de2e8c31">https://huntr.dev/bounties/1e8f07fc-c384-4ff9-8498-0690de2e8c31</a></li>
<li><a href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a></li>
<li><a href="https://lists.apache.org/thread.html/r075d464dce95cd13c03ff9384658edcccd5ab2983b82bfc72b62bb10@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r075d464dce95cd13c03ff9384658edcccd5ab2983b82bfc72b62bb10@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r216f0fd0a3833856d6a6a1fada488cadba45f447d87010024328ccf2@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r216f0fd0a3833856d6a6a1fada488cadba45f447d87010024328ccf2@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3ae6d2654f92c5851bdb73b35e96b0e4e3da39f28ac7a1b15ae3aab8@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r3ae6d2654f92c5851bdb73b35e96b0e4e3da39f28ac7a1b15ae3aab8@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r4bf1b32983f50be00f9752214c1b53738b621be1c2b0dbd68c7f2391@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r4bf1b32983f50be00f9752214c1b53738b621be1c2b0dbd68c7f2391@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7324ecc35b8027a51cb6ed629490fcd3b2d7cf01c424746ed5744bf1@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r7324ecc35b8027a51cb6ed629490fcd3b2d7cf01c424746ed5744bf1@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r74d0b359408fff31f87445261f0ee13bdfcac7d66f6b8e846face321@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/r74d0b359408fff31f87445261f0ee13bdfcac7d66f6b8e846face321@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra15d63c54dc6474b29f72ae4324bcb03038758545b3ab800845de7a1@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/ra15d63c54dc6474b29f72ae4324bcb03038758545b3ab800845de7a1@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc263bfc5b53afcb7e849605478d73f5556eb0c00d1f912084e407289@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/rc263bfc5b53afcb7e849605478d73f5556eb0c00d1f912084e407289@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfa094029c959da0f7c8cd7dc9c4e59d21b03457bf0cedf6c93e1bb0a@%3Cdev.druid.apache.org%3E">https://lists.apache.org/thread.html/rfa094029c959da0f7c8cd7dc9c4e59d21b03457bf0cedf6c93e1bb0a@%3Cdev.druid.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfc5c478053ff808671aef170f3d9fc9d05cc1fab8fb64431edc66103@%3Ccommits.druid.apache.org%3E">https://lists.apache.org/thread.html/rfc5c478053ff808671aef170f3d9fc9d05cc1fab8fb64431edc66103@%3Ccommits.druid.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-cph5-m8f7-6c5x">https://github.com/advisories/GHSA-cph5-m8f7-6c5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cph5-m8f7-6c5x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-09-01T18:23:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-forge] Prototype Pollution in node-forge]]></title>
        <id>https://github.com/advisories/GHSA-92xj-mqp7-vmcj</id>
        <link href="https://github.com/advisories/GHSA-92xj-mqp7-vmcj"/>
        <updated>2023-03-13T22:48:50.000Z</updated>
        <content type="html"><![CDATA[<p>The package node-forge before 0.10.0 is vulnerable to Prototype Pollution via the util.setPath function. Note: version 0.10.0 is a breaking change removing the vulnerable functions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7720">https://nvd.nist.gov/vuln/detail/CVE-2020-7720</a></li>
<li><a href="https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md">https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md#removed">https://github.com/digitalbazaar/forge/blob/master/CHANGELOG.md#removed</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-609293</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-NODEFORGE-598677">https://snyk.io/vuln/SNYK-JS-NODEFORGE-598677</a></li>
<li><a href="https://github.com/digitalbazaar/forge/commit/6a1e3ef74f6eb345bcff1b82184201d1e28b6756">https://github.com/digitalbazaar/forge/commit/6a1e3ef74f6eb345bcff1b82184201d1e28b6756</a></li>
<li><a href="https://github.com/advisories/GHSA-92xj-mqp7-vmcj">https://github.com/advisories/GHSA-92xj-mqp7-vmcj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92xj-mqp7-vmcj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-14T21:42:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[http-proxy] Denial of Service in http-proxy]]></title>
        <id>https://github.com/advisories/GHSA-6x33-pw7p-hmpq</id>
        <link href="https://github.com/advisories/GHSA-6x33-pw7p-hmpq"/>
        <updated>2023-03-13T22:18:16.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>http-proxy</code> prior to 1.18.1 are vulnerable to Denial of Service. An HTTP request with a long body triggers an <code>ERR_HTTP_HEADERS_SENT</code> unhandled exception that crashes the proxy server. This is only possible when the proxy server sets headers in the proxy request using the <code>proxyReq.setHeader</code> function.   </p>
<p>For a proxy server running on <code>http://localhost:3000</code>, the following curl request triggers the unhandled exception:<br><code>curl -XPOST http://localhost:3000 -d "$(python -c 'print("x"*1025)')"</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 1.18.1 or later</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/http-party/node-http-proxy/pull/1447/files">https://github.com/http-party/node-http-proxy/pull/1447/files</a></li>
<li><a href="https://www.npmjs.com/advisories/1486">https://www.npmjs.com/advisories/1486</a></li>
<li><a href="https://github.com/http-party/node-http-proxy/pull/1447/commits/4718119ffbe895aecd9be0d6430357d44b4c7fd3">https://github.com/http-party/node-http-proxy/pull/1447/commits/4718119ffbe895aecd9be0d6430357d44b4c7fd3</a></li>
<li><a href="https://github.com/advisories/GHSA-6x33-pw7p-hmpq">https://github.com/advisories/GHSA-6x33-pw7p-hmpq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6x33-pw7p-hmpq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-04T17:59:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[url-parse] Authorization Bypass Through User-Controlled Key in url-parse]]></title>
        <id>https://github.com/advisories/GHSA-hgjh-723h-mx2j</id>
        <link href="https://github.com/advisories/GHSA-hgjh-723h-mx2j"/>
        <updated>2023-03-13T22:00:19.000Z</updated>
        <content type="html"><![CDATA[<p>url-parse prior to version 1.5.8 is vulnerable to Authorization Bypass Through User-Controlled Key.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0686">https://nvd.nist.gov/vuln/detail/CVE-2022-0686</a></li>
<li><a href="https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5">https://github.com/unshiftio/url-parse/commit/d5c64791ef496ca5459ae7f2176a31ea53b127e5</a></li>
<li><a href="https://huntr.dev/bounties/55fd06cd-9054-4d80-83be-eb5a454be78c">https://huntr.dev/bounties/55fd06cd-9054-4d80-83be-eb5a454be78c</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220325-0006/">https://security.netapp.com/advisory/ntap-20220325-0006/</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html">https://lists.debian.org/debian-lts-announce/2023/02/msg00030.html</a></li>
<li><a href="https://github.com/advisories/GHSA-hgjh-723h-mx2j">https://github.com/advisories/GHSA-hgjh-723h-mx2j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgjh-723h-mx2j</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-02-21T00:00:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[normalize-url] ReDoS in normalize-url]]></title>
        <id>https://github.com/advisories/GHSA-px4h-xg32-q955</id>
        <link href="https://github.com/advisories/GHSA-px4h-xg32-q955"/>
        <updated>2023-03-13T21:54:45.000Z</updated>
        <content type="html"><![CDATA[<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33502">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210706-0001/">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>
<li><a href="https://github.com/advisories/GHSA-px4h-xg32-q955">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-px4h-xg32-q955</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-08T23:11:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[normalize-url] ReDoS in normalize-url]]></title>
        <id>https://github.com/advisories/GHSA-px4h-xg32-q955</id>
        <link href="https://github.com/advisories/GHSA-px4h-xg32-q955"/>
        <updated>2023-03-13T21:54:45.000Z</updated>
        <content type="html"><![CDATA[<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33502">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210706-0001/">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>
<li><a href="https://github.com/advisories/GHSA-px4h-xg32-q955">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-px4h-xg32-q955</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-08T23:11:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[normalize-url] ReDoS in normalize-url]]></title>
        <id>https://github.com/advisories/GHSA-px4h-xg32-q955</id>
        <link href="https://github.com/advisories/GHSA-px4h-xg32-q955"/>
        <updated>2023-03-13T21:54:45.000Z</updated>
        <content type="html"><![CDATA[<p>The normalize-url package before 4.5.1, 5.x before 5.3.1, and 6.x before 6.0.1 for Node.js has a ReDoS (regular expression denial of service) issue because it has exponential performance for data: URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33502">https://nvd.nist.gov/vuln/detail/CVE-2021-33502</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1">https://github.com/sindresorhus/normalize-url/releases/tag/v6.0.1</a></li>
<li><a href="https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103">https://github.com/sindresorhus/normalize-url/commit/b1fdb5120b6d27a88400d8800e67ff5a22bd2103</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210706-0001/">https://security.netapp.com/advisory/ntap-20210706-0001/</a></li>
<li><a href="https://github.com/advisories/GHSA-px4h-xg32-q955">https://github.com/advisories/GHSA-px4h-xg32-q955</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-px4h-xg32-q955</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-08T23:11:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links]]></title>
        <id>https://github.com/advisories/GHSA-9r2w-394v-53qc</id>
        <link href="https://github.com/advisories/GHSA-9r2w-394v-53qc"/>
        <updated>2023-03-13T21:51:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>
<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\</code> and <code>/</code> characters as path separators, however <code>\</code> is a valid filename character on posix systems.</p>
<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>
<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>
<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>
<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>
<h3 id="patches">Patches</h3>
<p>4.4.16 || 5.0.8 || 6.1.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>
<pre><code class="language-js">const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) =&gt; {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
</code></pre>
<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>
<h3 id="fix">Fix</h3>
<p>The problem is addressed in the following ways:</p>
<ol>
<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\</code> with <code>/</code> on Windows systems, and leaving <code>\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>
<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>
</ol>
<h4 id="caveat">Caveat</h4>
<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>
<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37701">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-5008">https://www.debian.org/security/2021/dsa-5008</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9r2w-394v-53qc">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r2w-394v-53qc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links]]></title>
        <id>https://github.com/advisories/GHSA-9r2w-394v-53qc</id>
        <link href="https://github.com/advisories/GHSA-9r2w-394v-53qc"/>
        <updated>2023-03-13T21:51:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>
<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\</code> and <code>/</code> characters as path separators, however <code>\</code> is a valid filename character on posix systems.</p>
<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>
<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>
<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>
<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>
<h3 id="patches">Patches</h3>
<p>4.4.16 || 5.0.8 || 6.1.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>
<pre><code class="language-js">const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) =&gt; {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
</code></pre>
<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>
<h3 id="fix">Fix</h3>
<p>The problem is addressed in the following ways:</p>
<ol>
<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\</code> with <code>/</code> on Windows systems, and leaving <code>\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>
<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>
</ol>
<h4 id="caveat">Caveat</h4>
<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>
<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37701">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-5008">https://www.debian.org/security/2021/dsa-5008</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9r2w-394v-53qc">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r2w-394v-53qc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite via insufficient symlink protection due to directory cache poisoning using symbolic links]]></title>
        <id>https://github.com/advisories/GHSA-9r2w-394v-53qc</id>
        <link href="https://github.com/advisories/GHSA-9r2w-394v-53qc"/>
        <updated>2023-03-13T21:51:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p><code>node-tar</code> aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created.</p>
<p>This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both <code>\</code> and <code>/</code> characters as path separators, however <code>\</code> is a valid filename character on posix systems.</p>
<p>By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite.</p>
<p>Additionally, a similar confusion could arise on case-insensitive filesystems.  If a tar archive contained a directory at <code>FOO</code>, followed by a symbolic link named <code>foo</code>, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but <em>not</em> from the internal directory cache, as it would not be treated as a cache hit.  A subsequent file entry within the <code>FOO</code> directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. </p>
<p>These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7.</p>
<p>The v3 branch of <code>node-tar</code> has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of <code>node-tar</code>. If this is not possible, a workaround is available below.</p>
<h3 id="patches">Patches</h3>
<p>4.4.16 || 5.0.8 || 6.1.7</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users may work around this vulnerability without upgrading by creating a custom filter method which prevents the extraction of symbolic links.</p>
<pre><code class="language-js">const tar = require('tar')

tar.x({
  file: 'archive.tgz',
  filter: (file, entry) =&gt; {
    if (entry.type === 'SymbolicLink') {
      return false
    } else {
      return true
    }
  }
})
</code></pre>
<p>Users are encouraged to upgrade to the latest patched versions, rather than attempt to sanitize tar input themselves.</p>
<h3 id="fix">Fix</h3>
<p>The problem is addressed in the following ways:</p>
<ol>
<li>All paths are normalized to use <code>/</code> as a path separator, replacing <code>\</code> with <code>/</code> on Windows systems, and leaving <code>\</code> intact in the path on posix systems.  This is performed in depth, at every level of the program where paths are consumed.</li>
<li>Directory cache pruning is performed case-insensitively.  This <em>may</em> result in undue cache misses on case-sensitive file systems, but the performance impact is negligible.</li>
</ol>
<h4 id="caveat">Caveat</h4>
<p>Note that this means that the <code>entry</code> objects exposed in various parts of tar's API will now always use <code>/</code> as a path separator, even on Windows systems.  This is not expected to cause problems, as <code>/</code> is a valid path separator on Windows systems, but <em>may</em> result in issues if <code>entry.path</code> is compared against a path string coming from some other API such as <code>fs.realpath()</code> or <code>path.resolve()</code>.</p>
<p>Users are encouraged to always normalize paths using a well-tested method such as <code>path.resolve()</code> before comparing paths to one another.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc">https://github.com/npm/node-tar/security/advisories/GHSA-9r2w-394v-53qc</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37701">https://nvd.nist.gov/vuln/detail/CVE-2021-37701</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-5008">https://www.debian.org/security/2021/dsa-5008</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html">https://lists.debian.org/debian-lts-announce/2022/12/msg00023.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9r2w-394v-53qc">https://github.com/advisories/GHSA-9r2w-394v-53qc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9r2w-394v-53qc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization]]></title>
        <id>https://github.com/advisories/GHSA-5955-9wpr-37jh</id>
        <link href="https://github.com/advisories/GHSA-5955-9wpr-37jh"/>
        <updated>2023-03-13T21:47:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p>node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain <code>..</code> path portions, and resolving the sanitized paths against the extraction target directory.</p>
<p>This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as <code>C:some\path</code>.  If the drive letter does not match the extraction target, for example <code>D:\extraction\dir</code>, then the result of <code>path.resolve(extractionDirectory, entryPath)</code> would resolve against the current working directory on the <code>C:</code> drive, rather than the extraction target directory.</p>
<p>Additionally, a <code>..</code> portion of the path could occur immediately after the drive letter, such as <code>C:../foo</code>, and was not properly sanitized by the logic that checked for <code>..</code> within the normalized and split portions of the path.</p>
<p>This only affects users of <code>node-tar</code> on Windows systems.</p>
<h3 id="patches">Patches</h3>
<p>4.4.18 || 5.0.10 || 6.1.9</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.</p>
<p>Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.</p>
<h3 id="fix">Fix</h3>
<p>The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not "absolute".</p>
<p>Additionally, a path starting with a drive letter and then two dots, like <code>c:../</code>, would bypass the check for <code>..</code> path portions.  This is checked properly in the patched versions.</p>
<p>Finally, a defense in depth check is added, such that if the <code>entry.absolute</code> is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh">https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37713">https://nvd.nist.gov/vuln/detail/CVE-2021-37713</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946">https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc">https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598">https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598</a></li>
<li><a href="https://github.com/advisories/GHSA-5955-9wpr-37jh">https://github.com/advisories/GHSA-5955-9wpr-37jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5955-9wpr-37jh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tar] Arbitrary File Creation/Overwrite on Windows via insufficient relative path sanitization]]></title>
        <id>https://github.com/advisories/GHSA-5955-9wpr-37jh</id>
        <link href="https://github.com/advisories/GHSA-5955-9wpr-37jh"/>
        <updated>2023-03-13T21:47:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Arbitrary File Creation, Arbitrary File Overwrite, Arbitrary Code Execution</p>
<p>node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain <code>..</code> path portions, and resolving the sanitized paths against the extraction target directory.</p>
<p>This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as <code>C:some\path</code>.  If the drive letter does not match the extraction target, for example <code>D:\extraction\dir</code>, then the result of <code>path.resolve(extractionDirectory, entryPath)</code> would resolve against the current working directory on the <code>C:</code> drive, rather than the extraction target directory.</p>
<p>Additionally, a <code>..</code> portion of the path could occur immediately after the drive letter, such as <code>C:../foo</code>, and was not properly sanitized by the logic that checked for <code>..</code> within the normalized and split portions of the path.</p>
<p>This only affects users of <code>node-tar</code> on Windows systems.</p>
<h3 id="patches">Patches</h3>
<p>4.4.18 || 5.0.10 || 6.1.9</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does.</p>
<p>Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.</p>
<h3 id="fix">Fix</h3>
<p>The fixed versions strip path roots from all paths prior to being resolved against the extraction target folder, even if such paths are not "absolute".</p>
<p>Additionally, a path starting with a drive letter and then two dots, like <code>c:../</code>, would bypass the check for <code>..</code> path portions.  This is checked properly in the patched versions.</p>
<p>Finally, a defense in depth check is added, such that if the <code>entry.absolute</code> is outside of the extraction taret, and we are not in preservePaths:true mode, a warning is raised on that entry, and it is skipped.  Currently, it is believed that this check is redundant, but it did catch some oversights in development.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh">https://github.com/npm/node-tar/security/advisories/GHSA-5955-9wpr-37jh</a></li>
<li><a href="https://www.npmjs.com/package/tar">https://www.npmjs.com/package/tar</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-37713">https://nvd.nist.gov/vuln/detail/CVE-2021-37713</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf">https://cert-portal.siemens.com/productcert/pdf/ssa-389290.pdf</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946">https://github.com/isaacs/node-tar/commit/52b09e309bcae0c741a7eb79a17ef36e7828b946</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc">https://github.com/isaacs/node-tar/commit/82eac952f7c10765969ed464e549375854b26edc</a></li>
<li><a href="https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598">https://github.com/isaacs/node-tar/commit/875a37e3ec031186fc6599f6807341f56c584598</a></li>
<li><a href="https://github.com/advisories/GHSA-5955-9wpr-37jh">https://github.com/advisories/GHSA-5955-9wpr-37jh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5955-9wpr-37jh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-08-31T16:05:05.000Z</published>
    </entry>
</feed>