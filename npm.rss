<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-08-23T14:01:30.280Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[shescape] Shescape on Windows escaping may be bypassed in threaded context]]></title>
        <id>https://github.com/advisories/GHSA-j55r-787p-m549</id>
        <link href="https://github.com/advisories/GHSA-j55r-787p-m549"/>
        <updated>2023-08-22T18:00:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This may impact users that use Shescape on Windows in a threaded context (e.g. using <a href="https://nodejs.org/api/worker_threads.html">Worker threads</a>). The vulnerability can result in Shescape escaping (or quoting) for the wrong shell, thus allowing attackers to bypass protections depending on the combination of expected and used shell.</p>
<p>This snippet demonstrates a vulnerable use of Shescape:</p>
<pre><code class="language-javascript">// vulnerable.js

import { exec } from "node:child_process";
import { Worker, isMainThread } from 'node:worker_threads';

import * as shescape from "shescape";

if (isMainThread) {
  // 1. Something like a worker thread must be used. The reason being that they
  // unexpectedly change environment variable names on Windows.
  new Worker("./vulnerable.js");
} else {
  // 2. Example configuration that's problematic. In this setup example the
  // expected default system shell is CMD. We configure the use of PowerShell.
  // Shescape will fail to look up PowerShell and default to escaping for CMD
  // instead, resulting in the vulnerability.
  const options = {
    shell: "powershell",
    interpolation: true,
  };

  // 3. Using shescape to protect against attacks, this is correct.
  const escaped = shescape.escape("&amp;&amp; ls", options);

  // 4. Invoking a command with the escaped user input, this is vulnerable in
  // this case.
  exec(`echo Hello ${escaped}`, options, (error, stdout) =&gt; {
    if (error) {
      console.error(`An error occurred: ${error}`);
    } else {
      console.log(stdout);
    }
  });
}
</code></pre>
<h3 id="patches">Patches</h3>
<p>This bug has been patched in <a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4">v1.7.4</a> which you can upgrade to now. No further changes are required.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are impacted there is no workaround possible.</p>
<h3 id="references">References</h3>
<ul>
<li>Shescape Pull Request <a href="https://github.com/ericcornelissen/shescape/pull/1142">#1142</a></li>
<li>Shescape commit <a href="https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63"><code>0b976da</code></a></li>
<li>Shescape release <a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4">v1.7.4</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<ul>
<li>Comment on Pull Request <a href="https://github.com/ericcornelissen/shescape/pull/1142">#1142</a></li>
<li>Comment on commit <a href="https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63"><code>0b976da</code></a></li>
<li>Open an issue at <a href="https://github.com/ericcornelissen/shescape/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc">https://github.com/ericcornelissen/shescape/issues</a> (New issue &gt; Question &gt; Get started)</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ericcornelissen/shescape/security/advisories/GHSA-j55r-787p-m549">https://github.com/ericcornelissen/shescape/security/advisories/GHSA-j55r-787p-m549</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/pull/1142">https://github.com/ericcornelissen/shescape/pull/1142</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63">https://github.com/ericcornelissen/shescape/commit/0b976dab645abf45ffd85e74a8c6e51ee2f42d63</a></li>
<li><a href="https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4">https://github.com/ericcornelissen/shescape/releases/tag/v1.7.4</a></li>
<li><a href="https://github.com/advisories/GHSA-j55r-787p-m549">https://github.com/advisories/GHSA-j55r-787p-m549</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j55r-787p-m549</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-22T18:00:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vue-storefront-api] Diavante vue-storefront-api and storefront-api disclose stack trace]]></title>
        <id>https://github.com/advisories/GHSA-9wxj-37p8-49ff</id>
        <link href="https://github.com/advisories/GHSA-9wxj-37p8-49ff"/>
        <updated>2023-08-22T14:21:40.000Z</updated>
        <content type="html"><![CDATA[<p>In Divante vue-storefront-api through 1.11.1 and storefront-api through 1.0-rc.1, as used in VueStorefront PWA, unexpected HTTP requests lead to an exception that discloses the error stack trace, with absolute file paths and Node.js module names.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-11883">https://nvd.nist.gov/vuln/detail/CVE-2020-11883</a></li>
<li><a href="https://github.com/DivanteLtd/storefront-api/pull/59">https://github.com/DivanteLtd/storefront-api/pull/59</a></li>
<li><a href="https://github.com/DivanteLtd/vue-storefront-api/pull/431">https://github.com/DivanteLtd/vue-storefront-api/pull/431</a></li>
<li><a href="https://github.com/vuestorefront/storefront-api/commit/9165b80c72b469c9615ce2f665499e6f6ead0a6a">https://github.com/vuestorefront/storefront-api/commit/9165b80c72b469c9615ce2f665499e6f6ead0a6a</a></li>
<li><a href="https://github.com/vuestorefront/vue-storefront-api/commit/965247f41f872e84e4662d04d8e2108eaf6119da">https://github.com/vuestorefront/vue-storefront-api/commit/965247f41f872e84e4662d04d8e2108eaf6119da</a></li>
<li><a href="https://github.com/advisories/GHSA-9wxj-37p8-49ff">https://github.com/advisories/GHSA-9wxj-37p8-49ff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wxj-37p8-49ff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:15:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[storefront-api] Diavante vue-storefront-api and storefront-api disclose stack trace]]></title>
        <id>https://github.com/advisories/GHSA-9wxj-37p8-49ff</id>
        <link href="https://github.com/advisories/GHSA-9wxj-37p8-49ff"/>
        <updated>2023-08-22T14:21:40.000Z</updated>
        <content type="html"><![CDATA[<p>In Divante vue-storefront-api through 1.11.1 and storefront-api through 1.0-rc.1, as used in VueStorefront PWA, unexpected HTTP requests lead to an exception that discloses the error stack trace, with absolute file paths and Node.js module names.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-11883">https://nvd.nist.gov/vuln/detail/CVE-2020-11883</a></li>
<li><a href="https://github.com/DivanteLtd/storefront-api/pull/59">https://github.com/DivanteLtd/storefront-api/pull/59</a></li>
<li><a href="https://github.com/DivanteLtd/vue-storefront-api/pull/431">https://github.com/DivanteLtd/vue-storefront-api/pull/431</a></li>
<li><a href="https://github.com/vuestorefront/storefront-api/commit/9165b80c72b469c9615ce2f665499e6f6ead0a6a">https://github.com/vuestorefront/storefront-api/commit/9165b80c72b469c9615ce2f665499e6f6ead0a6a</a></li>
<li><a href="https://github.com/vuestorefront/vue-storefront-api/commit/965247f41f872e84e4662d04d8e2108eaf6119da">https://github.com/vuestorefront/vue-storefront-api/commit/965247f41f872e84e4662d04d8e2108eaf6119da</a></li>
<li><a href="https://github.com/advisories/GHSA-9wxj-37p8-49ff">https://github.com/advisories/GHSA-9wxj-37p8-49ff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wxj-37p8-49ff</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:15:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@node-saml/node-saml] @node-saml/node-saml's validatePostRequestAsync does not include checkTimestampsValidityError]]></title>
        <id>https://github.com/advisories/GHSA-vx8m-6fhw-pccw</id>
        <link href="https://github.com/advisories/GHSA-vx8m-6fhw-pccw"/>
        <updated>2023-08-21T20:13:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The lack of checking of current timestamp allows a LogoutRequest XML to be reused multiple times even when the current time is past the NotOnOrAfter. </p>
<h3 id="details">Details</h3>
<p>It was noticed that in the validatePostRequestAsync() flow in saml.js, the current timestamp is never checked. This could present a vulnerability where a user who has an XML LogoutRequest could validated it if the IssueInstance and the NotOnOrAfter are valid along with valid credentials (signature, certificate etc.). </p>
<h3 id="poc">PoC</h3>
<p>I was able to validate a sample valid LogoutRequest XML multiple times through postman by sending it to my endpoint regardless if the current present time was past the NotOnOrAfter time. After some further testing, it seems that only the IssueInstance is checked against NotOnOrAfter. Not sure if this was the intended behaviour but I believe having a never expiring valid LogoutRequest could be dangerous.</p>
<h3 id="impact">Impact</h3>
<p>This could impact the user where they would be logged out from an expired LogoutRequest. In bigger contexts, if LogoutRequests are sent out in mass to different SPs, this could impact many users on a large scale.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/node-saml/node-saml/security/advisories/GHSA-vx8m-6fhw-pccw">https://github.com/node-saml/node-saml/security/advisories/GHSA-vx8m-6fhw-pccw</a></li>
<li><a href="https://github.com/node-saml/node-saml/commit/045e3b9c54211fdb95f96edf363679845b195cec">https://github.com/node-saml/node-saml/commit/045e3b9c54211fdb95f96edf363679845b195cec</a></li>
<li><a href="https://github.com/node-saml/node-saml/releases/tag/v4.0.5">https://github.com/node-saml/node-saml/releases/tag/v4.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-vx8m-6fhw-pccw">https://github.com/advisories/GHSA-vx8m-6fhw-pccw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx8m-6fhw-pccw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-21T20:13:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kerberos] DLL Injection in kerberos]]></title>
        <id>https://github.com/advisories/GHSA-m2mx-rfpw-jghv</id>
        <link href="https://github.com/advisories/GHSA-m2mx-rfpw-jghv"/>
        <updated>2023-08-21T19:57:15.000Z</updated>
        <content type="html"><![CDATA[<p>Version of <code>kerberos</code> prior to 1.0.0 are vulnerable to DLL Injection. The package loads DLLs without specifying a full path. This may allow attackers to create a file with the same name in a folder that precedes the intended file in the DLL path search. Doing so would allow attackers to execute arbitrary code in the machine.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 1.0.0 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/1514">https://www.npmjs.com/advisories/1514</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13110">https://nvd.nist.gov/vuln/detail/CVE-2020-13110</a></li>
<li><a href="https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd">https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd</a></li>
<li><a href="https://www.linkedin.com/posts/op-innovate_dll-injection-attack-in-kerberos-npm-package-activity-6667043749547253760-kVlW">https://www.linkedin.com/posts/op-innovate_dll-injection-attack-in-kerberos-npm-package-activity-6667043749547253760-kVlW</a></li>
<li><a href="https://www.op-c.net/2020/05/15/dll-injection-attack-in-kerberos-npm-package/">https://www.op-c.net/2020/05/15/dll-injection-attack-in-kerberos-npm-package/</a></li>
<li><a href="https://github.com/advisories/GHSA-m2mx-rfpw-jghv">https://github.com/advisories/GHSA-m2mx-rfpw-jghv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2mx-rfpw-jghv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-04T18:01:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kerberos] Duplicate Advisory: Kerberos for NodeJS allows DLL Injection]]></title>
        <id>https://github.com/advisories/GHSA-f478-xwv9-p93q</id>
        <link href="https://github.com/advisories/GHSA-f478-xwv9-p93q"/>
        <updated>2023-08-21T19:55:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-m2mx-rfpw-jghv. This link is maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>The kerberos package before 1.0.0 for Node.js allows arbitrary code execution and privilege escalation via injection of malicious DLLs through use of the kerberos_sspi LoadLibrary() method, because of a DLL path search.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13110">https://nvd.nist.gov/vuln/detail/CVE-2020-13110</a></li>
<li><a href="https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd">https://medium.com/@kiddo_Ha3ker/dll-injection-attack-in-kerberos-npm-package-cb4b32031cd</a></li>
<li><a href="https://www.npmjs.com/advisories/1514">https://www.npmjs.com/advisories/1514</a></li>
<li><a href="https://github.com/advisories/GHSA-f478-xwv9-p93q">https://github.com/advisories/GHSA-f478-xwv9-p93q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f478-xwv9-p93q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:18:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Remote code execution via MongoDB BSON parser through prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-prm5-8g2m-24gg</id>
        <link href="https://github.com/advisories/GHSA-prm5-8g2m-24gg"/>
        <updated>2023-08-21T18:17:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker can use this prototype pollution sink to trigger a remote code execution through the MongoDB BSON parser. </p>
<h3 id="patches">Patches</h3>
<p>Prevent prototype pollution in MongoDB database adapter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable remote code execution through the MongoDB BSON parser.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov (KTH), Cristian-Alexandru Staicu (CISPA) and Musard Balliu (KTH) working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg">https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg">https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8295">https://github.com/parse-community/parse-server/pull/8295</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8296">https://github.com/parse-community/parse-server/pull/8296</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.18">https://github.com/parse-community/parse-server/releases/tag/4.10.18</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.3.1">https://github.com/parse-community/parse-server/releases/tag/5.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39396">https://nvd.nist.gov/vuln/detail/CVE-2022-39396</a></li>
<li><a href="https://github.com/advisories/GHSA-prm5-8g2m-24gg">https://github.com/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-prm5-8g2m-24gg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-08T17:29:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Remote code execution via MongoDB BSON parser through prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-prm5-8g2m-24gg</id>
        <link href="https://github.com/advisories/GHSA-prm5-8g2m-24gg"/>
        <updated>2023-08-21T18:17:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker can use this prototype pollution sink to trigger a remote code execution through the MongoDB BSON parser. </p>
<h3 id="patches">Patches</h3>
<p>Prevent prototype pollution in MongoDB database adapter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable remote code execution through the MongoDB BSON parser.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov (KTH), Cristian-Alexandru Staicu (CISPA) and Musard Balliu (KTH) working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg">https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg">https://github.com/parse-community/parse-server/security/advisories/GHSA-prm5-8g2m-24gg</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8295">https://github.com/parse-community/parse-server/pull/8295</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8296">https://github.com/parse-community/parse-server/pull/8296</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.18">https://github.com/parse-community/parse-server/releases/tag/4.10.18</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.3.1">https://github.com/parse-community/parse-server/releases/tag/5.3.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39396">https://nvd.nist.gov/vuln/detail/CVE-2022-39396</a></li>
<li><a href="https://github.com/advisories/GHSA-prm5-8g2m-24gg">https://github.com/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-prm5-8g2m-24gg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-11-08T17:29:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to remote code execution via MongoDB BSON parser through prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-462x-c3jw-7vr6</id>
        <link href="https://github.com/advisories/GHSA-462x-c3jw-7vr6"/>
        <updated>2023-08-21T18:17:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker can use this prototype pollution sink to trigger a remote code execution through the MongoDB BSON parser.</p>
<h3 id="patches">Patches</h3>
<p>Prevent prototype pollution in MongoDB database adapter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable remote code execution through the MongoDB BSON parser.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Discovered by hir0ot working with Trend Micro Zero Day Initiative</li>
<li>Fixed by dbythy</li>
<li>Reviewed by mtrezza</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6">https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6</a></li>
<li><a href="https://github.com/advisories/GHSA-prm5-8g2m-24gg">https://github.com/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6">https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36475">https://nvd.nist.gov/vuln/detail/CVE-2023-36475</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8674">https://github.com/parse-community/parse-server/issues/8674</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8675">https://github.com/parse-community/parse-server/issues/8675</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/3dd99dd80e27e5e1d99b42844180546d90c7aa90">https://github.com/parse-community/parse-server/commit/3dd99dd80e27e5e1d99b42844180546d90c7aa90</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5fad2928fb8ee17304abcdcf259932f827d8c81f">https://github.com/parse-community/parse-server/commit/5fad2928fb8ee17304abcdcf259932f827d8c81f</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.5.2">https://github.com/parse-community/parse-server/releases/tag/5.5.2</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.2.1">https://github.com/parse-community/parse-server/releases/tag/6.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-462x-c3jw-7vr6">https://github.com/advisories/GHSA-462x-c3jw-7vr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-462x-c3jw-7vr6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-30T20:41:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to remote code execution via MongoDB BSON parser through prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-462x-c3jw-7vr6</id>
        <link href="https://github.com/advisories/GHSA-462x-c3jw-7vr6"/>
        <updated>2023-08-21T18:17:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker can use this prototype pollution sink to trigger a remote code execution through the MongoDB BSON parser.</p>
<h3 id="patches">Patches</h3>
<p>Prevent prototype pollution in MongoDB database adapter.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable remote code execution through the MongoDB BSON parser.</p>
<h3 id="credits">Credits</h3>
<ul>
<li>Discovered by hir0ot working with Trend Micro Zero Day Initiative</li>
<li>Fixed by dbythy</li>
<li>Reviewed by mtrezza</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6">https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6</a></li>
<li><a href="https://github.com/advisories/GHSA-prm5-8g2m-24gg">https://github.com/advisories/GHSA-prm5-8g2m-24gg</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6">https://github.com/parse-community/parse-server/security/advisories/GHSA-462x-c3jw-7vr6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36475">https://nvd.nist.gov/vuln/detail/CVE-2023-36475</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8674">https://github.com/parse-community/parse-server/issues/8674</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8675">https://github.com/parse-community/parse-server/issues/8675</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/3dd99dd80e27e5e1d99b42844180546d90c7aa90">https://github.com/parse-community/parse-server/commit/3dd99dd80e27e5e1d99b42844180546d90c7aa90</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/5fad2928fb8ee17304abcdcf259932f827d8c81f">https://github.com/parse-community/parse-server/commit/5fad2928fb8ee17304abcdcf259932f827d8c81f</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.5.2">https://github.com/parse-community/parse-server/releases/tag/5.5.2</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/6.2.1">https://github.com/parse-community/parse-server/releases/tag/6.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-462x-c3jw-7vr6">https://github.com/advisories/GHSA-462x-c3jw-7vr6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-462x-c3jw-7vr6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-30T20:41:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server is vulnerable to Prototype Pollution via Cloud Code Webhooks]]></title>
        <id>https://github.com/advisories/GHSA-93vw-8fm5-p2jf</id>
        <link href="https://github.com/advisories/GHSA-93vw-8fm5-p2jf"/>
        <updated>2023-08-21T18:17:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A compromised Parse Server Cloud Code Webhook target endpoint allows an attacker to use prototype pollution to bypass the Parse Server <code>requestKeywordDenylist</code> option.</p>
<h3 id="patches">Patches</h3>
<p>Improved keyword detection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8305">https://github.com/parse-community/parse-server/pull/8305</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8306">https://github.com/parse-community/parse-server/pull/8306</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/60c5a73d257e0d536056b38bdafef8b7130524d8">https://github.com/parse-community/parse-server/commit/60c5a73d257e0d536056b38bdafef8b7130524d8</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/6c63f04ba37174021082a5b5c4ba1556dcc954f4">https://github.com/parse-community/parse-server/commit/6c63f04ba37174021082a5b5c4ba1556dcc954f4</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.20">https://github.com/parse-community/parse-server/releases/tag/4.10.20</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.3.3">https://github.com/parse-community/parse-server/releases/tag/5.3.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41879">https://nvd.nist.gov/vuln/detail/CVE-2022-41879</a></li>
<li><a href="https://github.com/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/advisories/GHSA-93vw-8fm5-p2jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93vw-8fm5-p2jf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T13:02:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server is vulnerable to Prototype Pollution via Cloud Code Webhooks]]></title>
        <id>https://github.com/advisories/GHSA-93vw-8fm5-p2jf</id>
        <link href="https://github.com/advisories/GHSA-93vw-8fm5-p2jf"/>
        <updated>2023-08-21T18:17:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A compromised Parse Server Cloud Code Webhook target endpoint allows an attacker to use prototype pollution to bypass the Parse Server <code>requestKeywordDenylist</code> option.</p>
<h3 id="patches">Patches</h3>
<p>Improved keyword detection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/parse-community/parse-server/security/advisories/GHSA-93vw-8fm5-p2jf</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8305">https://github.com/parse-community/parse-server/pull/8305</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8306">https://github.com/parse-community/parse-server/pull/8306</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/60c5a73d257e0d536056b38bdafef8b7130524d8">https://github.com/parse-community/parse-server/commit/60c5a73d257e0d536056b38bdafef8b7130524d8</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/6c63f04ba37174021082a5b5c4ba1556dcc954f4">https://github.com/parse-community/parse-server/commit/6c63f04ba37174021082a5b5c4ba1556dcc954f4</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.20">https://github.com/parse-community/parse-server/releases/tag/4.10.20</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.3.3">https://github.com/parse-community/parse-server/releases/tag/5.3.3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41879">https://nvd.nist.gov/vuln/detail/CVE-2022-41879</a></li>
<li><a href="https://github.com/advisories/GHSA-93vw-8fm5-p2jf">https://github.com/advisories/GHSA-93vw-8fm5-p2jf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-93vw-8fm5-p2jf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-10T13:02:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to Prototype Pollution via Cloud Code Webhooks or Cloud Code Triggers]]></title>
        <id>https://github.com/advisories/GHSA-xprv-wvh7-qqqx</id>
        <link href="https://github.com/advisories/GHSA-xprv-wvh7-qqqx"/>
        <updated>2023-08-21T18:16:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Keywords that are specified in the Parse Server option <code>requestKeywordDenylist</code> can be injected via Cloud Code Webhooks or Triggers. This will result in the keyword being saved to the database, bypassing the <code>requestKeywordDenylist</code> option.</p>
<h3 id="patches">Patches</h3>
<p>Improved keyword detection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Configure your firewall to only allow trusted servers to make request to the Parse Server Cloud Code Webhooks API, or block the API completely if you are not using the feature.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8301">https://github.com/parse-community/parse-server/pull/8301</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8302">https://github.com/parse-community/parse-server/pull/8302</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/0a2d412e265992d53a670011afd9d2578562adc3">https://github.com/parse-community/parse-server/commit/0a2d412e265992d53a670011afd9d2578562adc3</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/6728da1e3591db1e27031d335d64d8f25546a06f">https://github.com/parse-community/parse-server/commit/6728da1e3591db1e27031d335d64d8f25546a06f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41878">https://nvd.nist.gov/vuln/detail/CVE-2022-41878</a></li>
<li><a href="https://github.com/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/advisories/GHSA-xprv-wvh7-qqqx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xprv-wvh7-qqqx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-09T20:47:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to Prototype Pollution via Cloud Code Webhooks or Cloud Code Triggers]]></title>
        <id>https://github.com/advisories/GHSA-xprv-wvh7-qqqx</id>
        <link href="https://github.com/advisories/GHSA-xprv-wvh7-qqqx"/>
        <updated>2023-08-21T18:16:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Keywords that are specified in the Parse Server option <code>requestKeywordDenylist</code> can be injected via Cloud Code Webhooks or Triggers. This will result in the keyword being saved to the database, bypassing the <code>requestKeywordDenylist</code> option.</p>
<h3 id="patches">Patches</h3>
<p>Improved keyword detection.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Configure your firewall to only allow trusted servers to make request to the Parse Server Cloud Code Webhooks API, or block the API completely if you are not using the feature.</p>
<h3 id="collaborators">Collaborators</h3>
<p>Mikhail Shcherbakov, Cristian-Alexandru Staicu and Musard Balliu working with Trend Micro Zero Day Initiative</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/parse-community/parse-server/security/advisories/GHSA-xprv-wvh7-qqqx</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8301">https://github.com/parse-community/parse-server/pull/8301</a></li>
<li><a href="https://github.com/parse-community/parse-server/pull/8302">https://github.com/parse-community/parse-server/pull/8302</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/0a2d412e265992d53a670011afd9d2578562adc3">https://github.com/parse-community/parse-server/commit/0a2d412e265992d53a670011afd9d2578562adc3</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/6728da1e3591db1e27031d335d64d8f25546a06f">https://github.com/parse-community/parse-server/commit/6728da1e3591db1e27031d335d64d8f25546a06f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41878">https://nvd.nist.gov/vuln/detail/CVE-2022-41878</a></li>
<li><a href="https://github.com/advisories/GHSA-xprv-wvh7-qqqx">https://github.com/advisories/GHSA-xprv-wvh7-qqqx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xprv-wvh7-qqqx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-09T20:47:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[samlify] Samlify vulnerable to Authentication Bypass by allowing tokens to be reused with different usernames]]></title>
        <id>https://github.com/advisories/GHSA-8jjf-w7j6-323c</id>
        <link href="https://github.com/advisories/GHSA-8jjf-w7j6-323c"/>
        <updated>2023-08-18T21:00:55.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>samlify</code> prior to 2.4.0-rc5 are vulnerable to Authentication Bypass. The package fails to prevent XML Signature Wrapping, allowing tokens to be reused with different usernames. A remote attacker can modify SAML content for a SAML service provider without invalidating the cryptographic signature, which may allow attackers to bypass primary authentication for the affected SAML service provider.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 2.4.0-rc5 or later</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000452">https://nvd.nist.gov/vuln/detail/CVE-2017-1000452</a></li>
<li><a href="https://hackerone.com/reports/356284">https://hackerone.com/reports/356284</a></li>
<li><a href="https://www.whitehats.nl/blog/xml-signature-wrapping-samlify">https://www.whitehats.nl/blog/xml-signature-wrapping-samlify</a></li>
<li><a href="https://github.com/tngan/samlify/commit/d382bbc7c6b8ea889839ae1f178730c25b09eb42">https://github.com/tngan/samlify/commit/d382bbc7c6b8ea889839ae1f178730c25b09eb42</a></li>
<li><a href="https://github.com/tngan/samlify/compare/v2.4.0-rc4...v2.4.0-rc5">https://github.com/tngan/samlify/compare/v2.4.0-rc4...v2.4.0-rc5</a></li>
<li><a href="https://github.com/tngan/samlify/releases/tag/v2.4.0-rc5">https://github.com/tngan/samlify/releases/tag/v2.4.0-rc5</a></li>
<li><a href="https://github.com/advisories/GHSA-8jjf-w7j6-323c">https://github.com/advisories/GHSA-8jjf-w7j6-323c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8jjf-w7j6-323c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-01-04T21:03:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[underscore-keypath] underscore-keypath vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-gpvc-mx6g-cchv</id>
        <link href="https://github.com/advisories/GHSA-gpvc-mx6g-cchv"/>
        <updated>2023-08-18T05:06:01.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package underscore-keypath from 0.0.11 are vulnerable to Prototype Pollution via the name argument of the <code>setProperty()</code> function. Exploiting this vulnerability is possible due to improper input sanitization which allows the usage of arguments like <code>__proto__</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26139">https://nvd.nist.gov/vuln/detail/CVE-2023-26139</a></li>
<li><a href="https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252">https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714">https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714</a></li>
<li><a href="https://github.com/advisories/GHSA-gpvc-mx6g-cchv">https://github.com/advisories/GHSA-gpvc-mx6g-cchv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpvc-mx6g-cchv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T06:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-18T05:03:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-18T05:03:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-18T05:03:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ses] SES's dynamic import and spread operator provides possible path to arbitrary exfiltration and execution]]></title>
        <id>https://github.com/advisories/GHSA-9c4h-3f7h-322r</id>
        <link href="https://github.com/advisories/GHSA-9c4h-3f7h-322r"/>
        <updated>2023-08-18T05:03:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This is a hole in the confinement of guest applications under SES that may manifest as either the ability to exfiltrate information or execute arbitrary code depending on the configuration and implementation of the surrounding host.</p>
<p>Guest program running inside a Compartment with as few as no endowments can gain access to the surrounding host’s dynamic import by using dynamic import after the spread operator, like <code>{...import(arbitraryModuleSpecifier)}</code>.</p>
<p>On the web or in web extensions, a Content-Security-Policy following ordinary best practices likely mitigates both the risk of exfiltration and execution of arbitrary code, at least limiting the modules that the attacker can import to those that are already part of the application. However, without a Content-Security-Policy, dynamic import can be used to issue HTTP requests for either communication through the URL or for the execution of code reachable from that origin.</p>
<p>Within an XS worker, an attacker can use the host’s module system to the extent that the host has been configured. This typically only allows access to module code on the host’s file system and is of limited use to an attacker.</p>
<p>Within Node.js, the attacker gains access to Node.js’s module system. Importing the powerful builtins is not useful except insofar as there are side-effects and tempered because dynamic import returns a promise. Spreading a promise into an object renders the promises useless. However, Node.js allows importing data URLs, so this is a clear path to arbitrary execution.</p>
<h3 id="patches">Patches</h3>
<p>All affected <code>0.*</code> version trains have the following patch. Running <code>npm update</code> will obtain the patch on all affected projects using <code>^0.*</code> style dependency constraints in their <code>package.json</code>.</p>
<pre><code class="language-diff">From 33469e88bfb2bf34a161c265f10f808ce354a700 Mon Sep 17 00:00:00 2001
From: Kris Kowal &lt;kris@agoric.com&gt;
Date: Thu, 27 Jul 2023 13:25:13 -0700
Subject: [PATCH] fix(fix): Censor spread import

---
 packages/ses/src/transforms.js       |  2 +-
 packages/ses/test/test-transforms.js | 22 +++++++++++++++++++++-
 2 files changed, 22 insertions(+), 2 deletions(-)

diff --git a/packages/ses/src/transforms.js b/packages/ses/src/transforms.js
index a0fc8d0ef..64a46cb53 100644
--- a/packages/ses/src/transforms.js
+++ b/packages/ses/src/transforms.js
@@ -106,7 +106,7 @@ export const evadeHtmlCommentTest = src =&gt; {
 // /////////////////////////////////////////////////////////////////////////////
 
 const importPattern = new FERAL_REG_EXP(
-  '(^|[^.])\\bimport(\\s*(?:\\(|/[/*]))',
+  '(^|[^.]|\\.\\.\\.)\\bimport(\\s*(?:\\(|/[/*]))',
   'g',
 );
 
diff --git a/packages/ses/test/test-transforms.js b/packages/ses/test/test-transforms.js
index cef0c02c1..8f6818b83 100644
--- a/packages/ses/test/test-transforms.js
+++ b/packages/ses/test/test-transforms.js
@@ -6,7 +6,7 @@ import {
 } from '../src/transforms.js';
 
 test('no-import-expression regexp', t =&gt; {
-  t.plan(9);
+  t.plan(13);
 
   // Note: we cannot define these as regular functions (and then stringify)
   // because the 'esm' module loader that we use for running the tests (i.e.
@@ -20,6 +20,7 @@ test('no-import-expression regexp', t =&gt; {
   const safe = 'const a = 1';
   const safe2 = "const a = notimport('evil')";
   const safe3 = "const a = importnot('evil')";
+  const safe4 = "const a = compartment.import('name')";
 
   const obvious = "const a = import('evil')";
   const whitespace = "const a = import ('evil')";
@@ -27,10 +28,14 @@ test('no-import-expression regexp', t =&gt; {
   const doubleSlashComment = "const a = import // hah\n('evil')";
   const newline = "const a = import\n('evil')";
   const multiline = "\nimport('a')\nimport('b')";
+  const spread = "{...import('exfil')}";
+  const spread2 = "{\n...\nimport\n('exfil')}";
+  const spread3 = "{\n...\nimport/**/\n('exfil')}";
 
   t.is(rejectImportExpressions(safe), safe, 'safe');
   t.is(rejectImportExpressions(safe2), safe2, 'safe2');
   t.is(rejectImportExpressions(safe3), safe3, 'safe3');
+  t.is(rejectImportExpressions(safe4), safe4, 'safe4');
   t.throws(
     () =&gt; rejectImportExpressions(obvious),
     { instanceOf: SyntaxError },
@@ -62,6 +67,21 @@ test('no-import-expression regexp', t =&gt; {
     'possible import expression rejected around line 2',
     'multiline',
   );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread),
+    { instanceOf: SyntaxError },
+    'spread',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread2),
+    { instanceOf: SyntaxError },
+    'spread2',
+  );
+  t.throws(
+    () =&gt; rejectImportExpressions(spread3),
+    { instanceOf: SyntaxError },
+    'spread3',
+  );
 });
 
 test('no-html-comment-expression regexp', t =&gt; {
-- 
2.40.1
</code></pre>
<h3 id="workarounds">Workarounds</h3>
<p>On the web, providing a suitably constrained Content-Security-Policy mitigates most of the threat.</p>
<p>With XS, building a binary that lacks the ability to load modules at runtime mitigates the entirety of the threat. That will look like an implementation of <code>fxFindModule</code> in a file like <code>xsPlatform.c</code> that calls <code>fxRejectModuleFile</code>.</p>
<p>We highly advise applying the above patch for Node.js as there is no known work-around and Node.js’s module specifiers are exceedingly powerful, including support for <code>data:text/javascript,</code> style module specifier URLs.</p>
<h3 id="references">References</h3>
<p>No references at this time.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r">https://github.com/endojs/endo/security/advisories/GHSA-9c4h-3f7h-322r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39532">https://nvd.nist.gov/vuln/detail/CVE-2023-39532</a></li>
<li><a href="https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041">https://github.com/endojs/endo/commit/fc90c6429604dc79ce8e3355e236ccce2bada041</a></li>
<li><a href="https://github.com/advisories/GHSA-9c4h-3f7h-322r">https://github.com/advisories/GHSA-9c4h-3f7h-322r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c4h-3f7h-322r</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-09T14:43:20.000Z</published>
    </entry>
</feed>