<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-03-01T09:01:17.221Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts-upgradeable] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@openzeppelin/contracts] OpenZeppelin Contracts base64 encoding may read from potentially dirty memory]]></title>
        <id>https://github.com/advisories/GHSA-9vx6-7xxf-x967</id>
        <link href="https://github.com/advisories/GHSA-9vx6-7xxf-x967"/>
        <updated>2024-02-29T20:10:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The <code>Base64.encode</code> function encodes a <code>bytes</code> input by iterating over it in chunks of 3 bytes. When this input is not a multiple of 3, the last iteration may read parts of the memory that are beyond the input buffer.</p>
<p>Although the <code>encode</code> function pads the output for these cases, up to 4 bits of data are kept between the encoding and padding, corrupting the output if these bits were dirty (i.e. memory after the input is not 0). These conditions are more frequent in the following scenarios:</p>
<ul>
<li>A <code>bytes memory</code> struct is allocated just after the input and the first bytes of it are non-zero.</li>
<li>The memory pointer is set to a non-empty memory location before allocating the input.</li>
</ul>
<p>Developers should evaluate whether the extra bits can be maliciously manipulated by an attacker.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 5.0.2 or 4.9.6.</p>
<h3 id="references">References</h3>
<p>This issue was reported by the Independent Security Researcher Riley Holterhus through Immunefi (@rileyholterhus on X)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967">https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-9vx6-7xxf-x967</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/2d081f24cac1a867f6f73d512f2022e1fa987854</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1">https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/commit/723f8cab09cdae1aca9ec9cc1cfa040c2d4b06c1</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/92224533b1263772b0774eec3134e132a3d7b2a6</a></li>
<li><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c">https://github.com/OpenZeppelin/openzeppelin-contracts/commit/a6286d0fded8771b3a645e5813e51993c490399c</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx6-7xxf-x967">https://github.com/advisories/GHSA-9vx6-7xxf-x967</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx6-7xxf-x967</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-29T20:09:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webui-aria2] webui-aria2 Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</id>
        <link href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w"/>
        <updated>2024-02-28T18:38:27.000Z</updated>
        <content type="html"><![CDATA[<p>webui-aria2 commit 4fe2e was discovered to contain a path traversal vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-39141">https://nvd.nist.gov/vuln/detail/CVE-2023-39141</a></li>
<li><a href="https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e">https://gist.github.com/JafarAkhondali/528fe6c548b78f454911fb866b23f66e</a></li>
<li><a href="https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10">https://github.com/ziahamza/webui-aria2/blob/109903f0e2774cf948698cd95a01f77f33d7dd2c/node-server.js#L10</a></li>
<li><a href="https://github.com/advisories/GHSA-crv8-r5wq-gv2w">https://github.com/advisories/GHSA-crv8-r5wq-gv2w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-crv8-r5wq-gv2w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-22T21:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@nfid/embed] @nfid/embed has compromised private key due to @dfinity/auth-client producing insecure session keys]]></title>
        <id>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</id>
        <link href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8"/>
        <updated>2024-02-26T20:10:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="problem">Problem</h3>
<p>User sessions in the @nfid/embed SDK with Ed25519 keys are vulnerable due to a compromised private key <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. This exposes users to potential loss of funds on ledgers and unauthorized access to canisters they control.</p>
<h3 id="solution">Solution</h3>
<p>Using version &gt;1.0.1 of @dfinity/auth-client and @dfinity/identity packages, or @nfid/embed &gt;0.10.1-alpha.6 includes patched versions of the issue.</p>
<p>User sessions will be automatically fixed when they re-authenticate.</p>
<h3 id="why-this-happened">Why this happened</h3>
<p>The DFINITY auth client library provides a function, <code>Ed25519KeyIdentity.generate</code>, for generating an Ed25519 key pair. This function includes an optional parameter to supply a 32-byte seed value, which will be utilized as the secret key. In cases where no seed value is provided, the library is expected to generate the secret key using secure randomness. However, a recent update of DFINITY libraries has compromised this assurance by employing an insecure seed for key pair generation.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">AgentJS CVE </a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/internet-identity-labs/sdk-ts/security/advisories/GHSA-84c3-j8r2-mcm8</a></li>
<li><a href="https://github.com/advisories/GHSA-84c3-j8r2-mcm8">https://github.com/advisories/GHSA-84c3-j8r2-mcm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-84c3-j8r2-mcm8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-26T20:10:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[es5-ext] es5-ext vulnerable to Regular Expression Denial of Service in `function#copy` and `function#toStringTokens`]]></title>
        <id>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</id>
        <link href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h"/>
        <updated>2024-02-26T20:01:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Passing functions with very long names or complex default argument names into <code>function#copy</code> or<code>function#toStringTokens</code> may put script to stall</p>
<h3 id="patches">Patches</h3>
<p>Fixed with <a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a> and <a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a>
Published with v0.10.63</p>
<h3 id="workarounds">Workarounds</h3>
<p>No real workaround aside of refraining from using above utilities.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/medikoo/es5-ext/security/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27088">https://nvd.nist.gov/vuln/detail/CVE-2024-27088</a></li>
<li><a href="https://github.com/medikoo/es5-ext/issues/201">https://github.com/medikoo/es5-ext/issues/201</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2">https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2</a></li>
<li><a href="https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602">https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602</a></li>
<li><a href="https://github.com/advisories/GHSA-4gmj-3p3h-gm8h">https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gmj-3p3h-gm8h</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-26T20:01:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/backend-common] `@backstage/backend-common` vulnerable to path traversal through symlinks]]></title>
        <id>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</id>
        <link href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h"/>
        <updated>2024-02-23T19:43:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Paths checks with the <code>resolveSafeChildPath</code> utility were not exhaustive enough, leading to risk of path traversal vulnerabilities if symlinks can be injected by attackers.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <code>@backstage/backend-common</code> version <code>0.21.1</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.20.2</code>.
Patched in <code>@backstage/backend-common</code> version <code>0.19.10</code>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a></li>
<li>Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/backstage/backstage/security/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
<li><a href="https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f">https://github.com/backstage/backstage/commit/1ad2b1b61ebb430051f7d804b0cc7ebfe7922b6f</a></li>
<li><a href="https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717">https://github.com/backstage/backstage/commit/78f892b3a84d63de2ba167928f171154c447b717</a></li>
<li><a href="https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871">https://github.com/backstage/backstage/commit/edf65d7d31e027599c2415f597d085ee84807871</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26150">https://nvd.nist.gov/vuln/detail/CVE-2024-26150</a></li>
<li><a href="https://github.com/advisories/GHSA-2fc9-xpp8-2g9h">https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fc9-xpp8-2g9h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-23T18:02:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2024-02-23T05:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[minimist] Prototype Pollution in minimist]]></title>
        <id>https://github.com/advisories/GHSA-xvch-5gv4-984h</id>
        <link href="https://github.com/advisories/GHSA-xvch-5gv4-984h"/>
        <updated>2024-02-23T05:08:06.000Z</updated>
        <content type="html"><![CDATA[<p>Minimist prior to 1.2.6 and 0.2.4 is vulnerable to Prototype Pollution via file <code>index.js</code>, function <code>setKey()</code> (lines 69-95).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44906">https://nvd.nist.gov/vuln/detail/CVE-2021-44906</a></li>
<li><a href="https://github.com/substack/minimist/issues/164">https://github.com/substack/minimist/issues/164</a></li>
<li><a href="https://github.com/substack/minimist/blob/master/index.js#L69">https://github.com/substack/minimist/blob/master/index.js#L69</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MINIMIST-559764">https://snyk.io/vuln/SNYK-JS-MINIMIST-559764</a></li>
<li><a href="https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068">https://stackoverflow.com/questions/8588563/adding-custom-properties-to-a-function/20278068#20278068</a></li>
<li><a href="https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip">https://github.com/Marynk/JavaScript-vulnerability-detection/blob/main/minimist%20PoC.zip</a></li>
<li><a href="https://github.com/minimistjs/minimist/issues/11">https://github.com/minimistjs/minimist/issues/11</a></li>
<li><a href="https://github.com/minimistjs/minimist/pull/24">https://github.com/minimistjs/minimist/pull/24</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703">https://github.com/minimistjs/minimist/commit/34e20b8461118608703d6485326abbb8e35e1703</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb">https://github.com/minimistjs/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d">https://github.com/minimistjs/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d</a></li>
<li><a href="https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11">https://github.com/minimistjs/minimist/commit/ef9153fc52b6cea0744b2239921c5dcae4697f11</a></li>
<li><a href="https://github.com/minimistjs/minimist/commits/v0.2.4">https://github.com/minimistjs/minimist/commits/v0.2.4</a></li>
<li><a href="https://github.com/advisories/GHSA-xvch-5gv4-984h">https://github.com/advisories/GHSA-xvch-5gv4-984h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvch-5gv4-984h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-03-18T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@xmldom/xmldom] Misinterpretation of malicious XML input]]></title>
        <id>https://github.com/advisories/GHSA-5fg8-2547-mr8q</id>
        <link href="https://github.com/advisories/GHSA-5fg8-2547-mr8q"/>
        <updated>2024-02-22T19:03:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>
<h3 id="patches">Patches</h3>
<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>
<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>
<h3 id="references">References</h3>
<p>Similar to this one reported on the Go standard library:</p>
<ul>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web/">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/xmldom/xmldom"><code>xmldom/xmldom</code></a></li>
<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32796">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>
<li><a href="https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>
<li><a href="https://www.npmjs.com/package/@xmldom/xmldom">https://www.npmjs.com/package/@xmldom/xmldom</a></li>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>
<li><a href="https://github.com/advisories/GHSA-5fg8-2547-mr8q">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fg8-2547-mr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-03T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[xmldom] Misinterpretation of malicious XML input]]></title>
        <id>https://github.com/advisories/GHSA-5fg8-2547-mr8q</id>
        <link href="https://github.com/advisories/GHSA-5fg8-2547-mr8q"/>
        <updated>2024-02-22T19:03:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>xmldom versions 0.6.0 and older do not correctly escape special characters when serializing elements removed from their ancestor. This may lead to unexpected syntactic changes during XML processing in some downstream applications.</p>
<h3 id="patches">Patches</h3>
<p>Update to one of the fixed versions of <code>@xmldom/xmldom</code> (<code>&gt;=0.7.0</code>)</p>
<p>See issue #271 for the status of publishing <code>xmldom</code> to npm or join #270 for Q&amp;A/discussion until it's resolved.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Downstream applications can validate the input and reject the maliciously crafted documents.</p>
<h3 id="references">References</h3>
<p>Similar to this one reported on the Go standard library:</p>
<ul>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities/</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web/">https://mattermost.com/blog/securing-xml-implementations-across-the-web/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/xmldom/xmldom"><code>xmldom/xmldom</code></a></li>
<li>Email us: send an email to <strong>all</strong> addresses that are shown by <code>npm owner ls @xmldom/xmldom</code></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q">https://github.com/xmldom/xmldom/security/advisories/GHSA-5fg8-2547-mr8q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32796">https://nvd.nist.gov/vuln/detail/CVE-2021-32796</a></li>
<li><a href="https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b">https://github.com/xmldom/xmldom/commit/7b4b743917a892d407356e055b296dcd6d107e8b</a></li>
<li><a href="https://www.npmjs.com/package/@xmldom/xmldom">https://www.npmjs.com/package/@xmldom/xmldom</a></li>
<li><a href="https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities">https://mattermost.com/blog/coordinated-disclosure-go-xml-vulnerabilities</a></li>
<li><a href="https://mattermost.com/blog/securing-xml-implementations-across-the-web">https://mattermost.com/blog/securing-xml-implementations-across-the-web</a></li>
<li><a href="https://github.com/advisories/GHSA-5fg8-2547-mr8q">https://github.com/advisories/GHSA-5fg8-2547-mr8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fg8-2547-mr8q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-03T16:57:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mapshaper] mapshaper Path Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8m36-62rw-9mxw</id>
        <link href="https://github.com/advisories/GHSA-8m36-62rw-9mxw"/>
        <updated>2024-02-22T05:08:29.000Z</updated>
        <content type="html"><![CDATA[<p>Path Traversal in GitHub repository mbloch/mapshaper prior to 0.6.44.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1163">https://nvd.nist.gov/vuln/detail/CVE-2024-1163</a></li>
<li><a href="https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72">https://github.com/mbloch/mapshaper/commit/7437d903c0a87802c3751fc529d2de7098094c72</a></li>
<li><a href="https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5">https://huntr.com/bounties/c1cbc18b-e4ab-4332-ad13-0033f0f976f5</a></li>
<li><a href="https://github.com/advisories/GHSA-8m36-62rw-9mxw">https://github.com/advisories/GHSA-8m36-62rw-9mxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m36-62rw-9mxw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-13T15:31:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json5] Prototype Pollution in JSON5 via Parse Method]]></title>
        <id>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</id>
        <link href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h"/>
        <updated>2024-02-22T05:08:21.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>
<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>
<h2 id="mitigation">Mitigation</h2>
<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>
<h2 id="details">Details</h2>
<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>
<pre><code class="language-js">const JSON5 = require('json5');

const doSomethingDangerous = (props) =&gt; {
  if (props.isAdmin) {
    console.log('Doing dangerous thing as admin.');
  } else {
    console.log('Doing dangerous thing as user.');
  }
};

const secCheckKeysSet = (obj, searchKeys) =&gt; {
  let searchKeyFound = false;
  Object.keys(obj).forEach((key) =&gt; {
    if (searchKeys.indexOf(key) &gt; -1) {
      searchKeyFound = true;
    }
  });
  return searchKeyFound;
};

const props = JSON5.parse('{"foo": "bar"}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as user."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "isAdmin": true}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props);
} else {
  throw new Error('Forbidden...'); // Error: Forbidden...
}
</code></pre>
<p>However, users can instead set the <code>__proto__</code> key to <code>{"isAdmin": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "__proto__": {"isAdmin": true}}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as admin."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46175">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>
<li><a href="https://github.com/json5/json5/issues/199">https://github.com/json5/json5/issues/199</a></li>
<li><a href="https://github.com/json5/json5/issues/295">https://github.com/json5/json5/issues/295</a></li>
<li><a href="https://github.com/json5/json5/pull/298">https://github.com/json5/json5/pull/298</a></li>
<li><a href="https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972">https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972</a></li>
<li><a href="https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8">https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html">https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE</a></li>
<li><a href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-29T01:51:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[json5] Prototype Pollution in JSON5 via Parse Method]]></title>
        <id>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</id>
        <link href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h"/>
        <updated>2024-02-22T05:08:21.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>parse</code> method of the JSON5 library before and including version <code>2.2.1</code> does not restrict parsing of keys named <code>__proto__</code>, allowing specially crafted strings to pollute the prototype of the resulting object.</p>
<p>This vulnerability pollutes the prototype of the object returned by <code>JSON5.parse</code> and not the global Object prototype, which is the commonly understood definition of Prototype Pollution. However, polluting the prototype of a single object can have significant security impact for an application if the object is later used in trusted operations.</p>
<h2 id="impact">Impact</h2>
<p>This vulnerability could allow an attacker to set arbitrary and unexpected keys on the object returned from <code>JSON5.parse</code>. The actual impact will depend on how applications utilize the returned object and how they filter unwanted keys, but could include denial of service, cross-site scripting, elevation of privilege, and in extreme cases, remote code execution.</p>
<h2 id="mitigation">Mitigation</h2>
<p>This vulnerability is patched in json5 v2.2.2 and later. A patch has also been backported for json5 v1 in versions v1.0.2 and later.</p>
<h2 id="details">Details</h2>
<p>Suppose a developer wants to allow users and admins to perform some risky operation, but they want to restrict what non-admins can do. To accomplish this, they accept a JSON blob from the user, parse it using <code>JSON5.parse</code>, confirm that the provided data does not set some sensitive keys, and then performs the risky operation using the validated data:</p>
<pre><code class="language-js">const JSON5 = require('json5');

const doSomethingDangerous = (props) =&gt; {
  if (props.isAdmin) {
    console.log('Doing dangerous thing as admin.');
  } else {
    console.log('Doing dangerous thing as user.');
  }
};

const secCheckKeysSet = (obj, searchKeys) =&gt; {
  let searchKeyFound = false;
  Object.keys(obj).forEach((key) =&gt; {
    if (searchKeys.indexOf(key) &gt; -1) {
      searchKeyFound = true;
    }
  });
  return searchKeyFound;
};

const props = JSON5.parse('{"foo": "bar"}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as user."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<p>If the user attempts to set the <code>isAdmin</code> key, their request will be rejected:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "isAdmin": true}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props);
} else {
  throw new Error('Forbidden...'); // Error: Forbidden...
}
</code></pre>
<p>However, users can instead set the <code>__proto__</code> key to <code>{"isAdmin": true}</code>. <code>JSON5</code> will parse this key and will set the <code>isAdmin</code> key on the prototype of the returned object, allowing the user to bypass the security check and run their request as an admin:</p>
<pre><code class="language-js">const props = JSON5.parse('{"foo": "bar", "__proto__": {"isAdmin": true}}');
if (!secCheckKeysSet(props, ['isAdmin', 'isMod'])) {
  doSomethingDangerous(props); // "Doing dangerous thing as admin."
} else {
  throw new Error('Forbidden...');
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/json5/json5/security/advisories/GHSA-9c47-m6qq-7p4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46175">https://nvd.nist.gov/vuln/detail/CVE-2022-46175</a></li>
<li><a href="https://github.com/json5/json5/issues/199">https://github.com/json5/json5/issues/199</a></li>
<li><a href="https://github.com/json5/json5/issues/295">https://github.com/json5/json5/issues/295</a></li>
<li><a href="https://github.com/json5/json5/pull/298">https://github.com/json5/json5/pull/298</a></li>
<li><a href="https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972">https://github.com/json5/json5/commit/62a65408408d40aeea14c7869ed327acead12972</a></li>
<li><a href="https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8">https://github.com/json5/json5/commit/7774c1097993bc3ce9f0ac4b722a32bf7d6871c8</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html">https://lists.debian.org/debian-lts-announce/2023/11/msg00021.html</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/3S26TLPLVFAJTUN3VIXFDEBEXDYO22CE</a></li>
<li><a href="https://github.com/advisories/GHSA-9c47-m6qq-7p4h">https://github.com/advisories/GHSA-9c47-m6qq-7p4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c47-m6qq-7p4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-29T01:51:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@dfinity/auth-client] agent-js: Insecure Key Generation in `Ed25519KeyIdentity.generate`]]></title>
        <id>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</id>
        <link href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3"/>
        <updated>2024-02-21T18:58:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The library offers a function to generate an ed25519 key pair via <code>Ed25519KeyIdentity.generate</code> with an optional param to provide a 32 byte seed value, which will then be used as the secret key. <strong>When no seed value is provided, it is expected that the library generates the secret key using secure randomness</strong>. However, a recent change <strong>broke this guarantee</strong> and <strong>uses an insecure seed for key pair generation</strong>.</p>
<p>Since the private key of this identity (<code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds:Users to protect their assets. </p>
<h2 id="patches">Patches</h2>
<p>Patch for the vulnerability is <strong>available in v1.0.1</strong> for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately. </p>
<h2 id="workarounds">Workarounds</h2>
<h3 id="developers">Developers</h3>
<p>The recommended fix is to upgrade the package to the patched version. If that is not possible, there are couple of workarounds to handle the insecure key generation.</p>
<ol>
<li>Invoking the function as <code>Ed25519KeyIdentity.generate(null)</code> would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.</li>
<li>Passing a securely generated randomness as a seed to <code>Ed25519KeyIdentity.generate</code> would force the library to use it as the seed to generate the key pair.</li>
</ol>
<h3 id="users">Users</h3>
<h4 id="removing-a-controller-of-a-canister-if-its-the-affected-principal">Removing a controller of a canister if it's the affected principal</h4>
<p>For all canisters you control, fetch the controllers of the canisters using </p>
<pre><code class="language-sh">dfx canister info --ic &lt;CANISTER&gt;
</code></pre>
<p>If you see the principal <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code> as one of the controllers, follow the steps below </p>
<pre><code class="language-sh">dfx identity whoami # record CURRENT_IDENTITY

dfx identity new &lt;NEW_IDENTITY_NAME&gt; 
dfx identity use &lt;NEW_IDENTITY_NAME&gt; 
dfx identity get-principal &lt;NEW_IDENTITY_NAME&gt; # record NEW_IDENTITY_PRINCIPAL

dfx identity use &lt;CURRENT_IDENTITY&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --add-controller &lt;NEW_IDENTITY_PRINCIPAL&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`
</code></pre>
<p>For more details on canister management, please visit <a href="https://internetcomputer.org/docs/current/tutorials/developer-journey/level-1/1.6-managing-canisters">here</a></p>
<h4 id="checking-funds-on-wallets---ledgers">Checking funds on wallets /  ledgers</h4>
<p>If you have funds on ledgers using a browser wallet, please check if the account principal matches <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. If it does, please create a new account and transfer the funds to the new account immediately.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://github.com/dfinity/agent-js/pull/851">fix PR link</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">NPM patched version</a></li>
<li><a href="https://github.com/dfinity/agent-js">agent-js Github repo</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">agent-js docs</a></li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/dfinity/agent-js/pull/851">https://github.com/dfinity/agent-js/pull/851</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1631">https://nvd.nist.gov/vuln/detail/CVE-2024-1631</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">https://agent-js.icp.xyz/identity/index.html</a></li>
<li><a href="https://github.com/dfinity/agent-js">https://github.com/dfinity/agent-js</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">https://www.npmjs.com/package/@dfinity/identity/v/1.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T02:54:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@dfinity/identity] agent-js: Insecure Key Generation in `Ed25519KeyIdentity.generate`]]></title>
        <id>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</id>
        <link href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3"/>
        <updated>2024-02-21T18:58:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The library offers a function to generate an ed25519 key pair via <code>Ed25519KeyIdentity.generate</code> with an optional param to provide a 32 byte seed value, which will then be used as the secret key. <strong>When no seed value is provided, it is expected that the library generates the secret key using secure randomness</strong>. However, a recent change <strong>broke this guarantee</strong> and <strong>uses an insecure seed for key pair generation</strong>.</p>
<p>Since the private key of this identity (<code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>) is compromised, one could lose funds associated with the principal on ledgers or lose access to a canister where this principal is the controller. Users are asked to take proactive measures mentioned below in Workarounds:Users to protect their assets. </p>
<h2 id="patches">Patches</h2>
<p>Patch for the vulnerability is <strong>available in v1.0.1</strong> for all the packages listed in the advisory. Please upgrade and deploy your canisters immediately. </p>
<h2 id="workarounds">Workarounds</h2>
<h3 id="developers">Developers</h3>
<p>The recommended fix is to upgrade the package to the patched version. If that is not possible, there are couple of workarounds to handle the insecure key generation.</p>
<ol>
<li>Invoking the function as <code>Ed25519KeyIdentity.generate(null)</code> would fix the broken conditional evaluation and force the function to generate a securely random seed. However, this is not guaranteed to work for future upgrades.</li>
<li>Passing a securely generated randomness as a seed to <code>Ed25519KeyIdentity.generate</code> would force the library to use it as the seed to generate the key pair.</li>
</ol>
<h3 id="users">Users</h3>
<h4 id="removing-a-controller-of-a-canister-if-its-the-affected-principal">Removing a controller of a canister if it's the affected principal</h4>
<p>For all canisters you control, fetch the controllers of the canisters using </p>
<pre><code class="language-sh">dfx canister info --ic &lt;CANISTER&gt;
</code></pre>
<p>If you see the principal <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code> as one of the controllers, follow the steps below </p>
<pre><code class="language-sh">dfx identity whoami # record CURRENT_IDENTITY

dfx identity new &lt;NEW_IDENTITY_NAME&gt; 
dfx identity use &lt;NEW_IDENTITY_NAME&gt; 
dfx identity get-principal &lt;NEW_IDENTITY_NAME&gt; # record NEW_IDENTITY_PRINCIPAL

dfx identity use &lt;CURRENT_IDENTITY&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --add-controller &lt;NEW_IDENTITY_PRINCIPAL&gt;
dfx canister update-settings --ic &lt;CANISTER&gt; --remove-controller `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`
</code></pre>
<p>For more details on canister management, please visit <a href="https://internetcomputer.org/docs/current/tutorials/developer-journey/level-1/1.6-managing-canisters">here</a></p>
<h4 id="checking-funds-on-wallets---ledgers">Checking funds on wallets /  ledgers</h4>
<p>If you have funds on ledgers using a browser wallet, please check if the account principal matches <code>535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe</code>. If it does, please create a new account and transfer the funds to the new account immediately.</p>
<h2 id="references">References</h2>
<ol>
<li><a href="https://github.com/dfinity/agent-js/pull/851">fix PR link</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">NPM patched version</a></li>
<li><a href="https://github.com/dfinity/agent-js">agent-js Github repo</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">agent-js docs</a></li>
</ol>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/dfinity/agent-js/security/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
<li><a href="https://github.com/dfinity/agent-js/pull/851">https://github.com/dfinity/agent-js/pull/851</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1631">https://nvd.nist.gov/vuln/detail/CVE-2024-1631</a></li>
<li><a href="https://agent-js.icp.xyz/identity/index.html">https://agent-js.icp.xyz/identity/index.html</a></li>
<li><a href="https://github.com/dfinity/agent-js">https://github.com/dfinity/agent-js</a></li>
<li><a href="https://www.npmjs.com/package/@dfinity/identity/v/1.0.1">https://www.npmjs.com/package/@dfinity/identity/v/1.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-c9vv-fhgv-cjc3">https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9vv-fhgv-cjc3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T02:54:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron-pdf] Cross-site Scripting in electron-pdf]]></title>
        <id>https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</id>
        <link href="https://github.com/advisories/GHSA-3jcv-5f9p-2f2p"/>
        <updated>2024-02-21T00:16:34.000Z</updated>
        <content type="html"><![CDATA[<p>electron-pdf version 20.0.0 allows an external attacker to remotely obtain</p>
<p>arbitrary local files. This is possible because the application does not</p>
<p>validate the HTML content entered by the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1648">https://nvd.nist.gov/vuln/detail/CVE-2024-1648</a></li>
<li><a href="https://fluidattacks.com/advisories/drake">https://fluidattacks.com/advisories/drake</a></li>
<li><a href="https://github.com/advisories/GHSA-3jcv-5f9p-2f2p">https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jcv-5f9p-2f2p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-20T03:30:57.000Z</published>
    </entry>
</feed>