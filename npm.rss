<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2022-12-12T15:01:32.381Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[mongoose] automattic/mongoose vulnerable to Prototype pollution via Schema.path]]></title>
        <id>https://github.com/advisories/GHSA-f825-f98c-gj3g</id>
        <link href="https://github.com/advisories/GHSA-f825-f98c-gj3g"/>
        <updated>2022-12-12T05:05:11.000Z</updated>
        <content type="html"><![CDATA[<p>Mongoose is a MongoDB object modeling tool designed to work in an asynchronous environment.\n\nAffected versions of this package are vulnerable to Prototype Pollution. The <code>Schema.path()</code> function is vulnerable to prototype pollution when setting the schema object. This vulnerability allows modification of the Object prototype and could be manipulated into a Denial of Service (DoS) attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-2564">https://nvd.nist.gov/vuln/detail/CVE-2022-2564</a></li>
<li><a href="https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8">https://github.com/automattic/mongoose/commit/a45cfb6b0ce0067ae9794cfa80f7917e1fb3c6f8</a></li>
<li><a href="https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd">https://huntr.dev/bounties/055be524-9296-4b2f-b68d-6d5b810d1ddd</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md">https://github.com/Automattic/mongoose/blob/master/CHANGELOG.md</a></li>
<li><a href="https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141">https://github.com/Automattic/mongoose/blob/51e758541763b6f14569744ced15cc23ab8b50c6/lib/schema.js#L88-L141</a></li>
<li><a href="https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6">https://github.com/Automattic/mongoose/compare/6.4.5...6.4.6</a></li>
<li><a href="https://github.com/advisories/GHSA-f825-f98c-gj3g">https://github.com/advisories/GHSA-f825-f98c-gj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f825-f98c-gj3g</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-07-29T00:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce] Cross-site scripting vulnerability in TinyMCE alerts]]></title>
        <id>https://github.com/advisories/GHSA-gg8r-xjwq-4w92</id>
        <link href="https://github.com/advisories/GHSA-gg8r-xjwq-4w92"/>
        <updated>2022-12-09T15:20:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A cross-site scripting (XSS) vulnerability was discovered in the alert and confirm dialogs when these dialogs were provided with malicious HTML content. This can occur in plugins that use the alert or confirm dialogs, such as in the <code>image</code> plugin, which presents these dialogs when certain errors occur. The vulnerability allowed arbitrary JavaScript execution when an alert presented in the TinyMCE UI for the current user.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in TinyMCE 5.10.7 and TinyMCE 6.3.1 by ensuring HTML sanitization was still performed after unwrapping invalid elements.</p>
<h3 id="fix">Fix</h3>
<p>To avoid this vulnerability:</p>
<ul>
<li>Upgrade to TinyMCE 5.10.7 or higher for TinyMCE 5.x.</li>
<li>Upgrade to TinyMCE 6.3.1 or higher for TinyMCE 6.x.</li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>To reduce the impact of this vulnerability:</p>
<ul>
<li>Ensure the the <code>images_upload_handler</code> returns a valid value as per the <a href="https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler">images_upload_handler</a> documentation.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes">https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes">https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:infosec@tiny.cloud">infosec@tiny.cloud</a></li>
<li>Open an issue in the <a href="https://github.com/tinymce/tinymce/issues">TinyMCE repo</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-gg8r-xjwq-4w92">https://github.com/tinymce/tinymce/security/advisories/GHSA-gg8r-xjwq-4w92</a></li>
<li><a href="https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes">https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes">https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23494">https://nvd.nist.gov/vuln/detail/CVE-2022-23494</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/6923d85eba6de3e08ebc9c5a387b5abdaa21150e">https://github.com/tinymce/tinymce/commit/6923d85eba6de3e08ebc9c5a387b5abdaa21150e</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/8bb2d2646d4e1a718fce61a775fa22e9d317b32d">https://github.com/tinymce/tinymce/commit/8bb2d2646d4e1a718fce61a775fa22e9d317b32d</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler">https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler</a></li>
<li><a href="https://github.com/advisories/GHSA-gg8r-xjwq-4w92">https://github.com/advisories/GHSA-gg8r-xjwq-4w92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gg8r-xjwq-4w92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-08T23:30:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce] Cross-site scripting vulnerability in TinyMCE alerts]]></title>
        <id>https://github.com/advisories/GHSA-gg8r-xjwq-4w92</id>
        <link href="https://github.com/advisories/GHSA-gg8r-xjwq-4w92"/>
        <updated>2022-12-09T15:20:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A cross-site scripting (XSS) vulnerability was discovered in the alert and confirm dialogs when these dialogs were provided with malicious HTML content. This can occur in plugins that use the alert or confirm dialogs, such as in the <code>image</code> plugin, which presents these dialogs when certain errors occur. The vulnerability allowed arbitrary JavaScript execution when an alert presented in the TinyMCE UI for the current user.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in TinyMCE 5.10.7 and TinyMCE 6.3.1 by ensuring HTML sanitization was still performed after unwrapping invalid elements.</p>
<h3 id="fix">Fix</h3>
<p>To avoid this vulnerability:</p>
<ul>
<li>Upgrade to TinyMCE 5.10.7 or higher for TinyMCE 5.x.</li>
<li>Upgrade to TinyMCE 6.3.1 or higher for TinyMCE 6.x.</li>
</ul>
<h3 id="workaround">Workaround</h3>
<p>To reduce the impact of this vulnerability:</p>
<ul>
<li>Ensure the the <code>images_upload_handler</code> returns a valid value as per the <a href="https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler">images_upload_handler</a> documentation.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes">https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes">https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:infosec@tiny.cloud">infosec@tiny.cloud</a></li>
<li>Open an issue in the <a href="https://github.com/tinymce/tinymce/issues">TinyMCE repo</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-gg8r-xjwq-4w92">https://github.com/tinymce/tinymce/security/advisories/GHSA-gg8r-xjwq-4w92</a></li>
<li><a href="https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes">https://www.tiny.cloud/docs/release-notes/release-notes5107/#securityfixes</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes">https://www.tiny.cloud/docs/tinymce/6/6.3-release-notes/#security-fixes</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23494">https://nvd.nist.gov/vuln/detail/CVE-2022-23494</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/6923d85eba6de3e08ebc9c5a387b5abdaa21150e">https://github.com/tinymce/tinymce/commit/6923d85eba6de3e08ebc9c5a387b5abdaa21150e</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/8bb2d2646d4e1a718fce61a775fa22e9d317b32d">https://github.com/tinymce/tinymce/commit/8bb2d2646d4e1a718fce61a775fa22e9d317b32d</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler">https://www.tiny.cloud/docs/tinymce/6/file-image-upload/#images_upload_handler</a></li>
<li><a href="https://github.com/advisories/GHSA-gg8r-xjwq-4w92">https://github.com/advisories/GHSA-gg8r-xjwq-4w92</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gg8r-xjwq-4w92</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-08T23:30:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[libp2p] libp2p DoS vulnerability from lack of resource management]]></title>
        <id>https://github.com/advisories/GHSA-f44q-634c-jvwv</id>
        <link href="https://github.com/advisories/GHSA-f44q-634c-jvwv"/>
        <updated>2022-12-07T23:24:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions older than <code>v0.38.0</code> of js-libp2p are vulnerable to targeted resource exhaustion attacks. These attacks target libp2p’s connection, stream, peer, and memory management. An attacker can cause the allocation of large amounts of memory, ultimately leading to the process getting killed by the host’s operating system. While a connection manager tasked with keeping the number of connections within manageable limits has been part of js-libp2p, this component was designed to handle the regular churn of peers, not a targeted resource exhaustion attack.</p>
<h3 id="patches-what-to-do-as-a-js-libp2p-consumer">Patches (What to do as a js-libp2p consumer:)</h3>
<p>Update your js-libp2p dependency to <code>v0.38.0</code> or greater.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no workarounds, and so we recommend to upgrade your js-libp2p version.
Some range of attacks can be mitigated using OS tools (like manually blocking malicious peers using iptables or ufw ) or making use of a load balancer in front of libp2p nodes.
You can also use the <a href="https://docs.libp2p.io/concepts/security/dos-mitigation/#deny-specific-peers-or-create-an-allow-list-of-trusted-peers">allow deny list in js-libp2p</a> to deny specific peers.</p>
<p>However these require direct action &amp; responsibility on your part and are no substitutes for upgrading js-libp2p. Therefore, we highly recommend upgrading your js-libp2p version for the way it enables tighter scoped limits and provides visibility into and easier reasoning about js-libp2p resource utilization.</p>
<h3 id="references">References</h3>
<ul>
<li>DoS Mitigation page for more information on how to incorporate mitigation strategies, monitor your application, and respond to attacks: <a href="https://docs.libp2p.io/reference/dos-mitigation/">https://docs.libp2p.io/reference/dos-mitigation/</a>. </li>
<li>Documentation on how to configure limits to prevent excessive resource consumption: <a href="https://github.com/libp2p/js-libp2p/blob/master/doc/LIMITS.md">https://github.com/libp2p/js-libp2p/blob/master/doc/LIMITS.md</a></li>
<li>Documentation on how to configure metrics: <a href="https://github.com/libp2p/js-libp2p/blob/master/doc/METRICS.md">https://github.com/libp2p/js-libp2p/blob/master/doc/METRICS.md</a></li>
</ul>
<p>Please see the related disclosure for go-libp2p: <a href="https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw">https://github.com/libp2p/go-libp2p/security/advisories/GHSA-j7qp-mfxf-8xjw</a> and rust-libp2p: <a href="https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8">https://github.com/libp2p/rust-libp2p/security/advisories/GHSA-jvgw-gccv-q5p8</a> </p>
<h4 id="for-more-information">For more information</h4>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@libp2p.io">security@libp2p.io</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv">https://github.com/libp2p/js-libp2p/security/advisories/GHSA-f44q-634c-jvwv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23487">https://nvd.nist.gov/vuln/detail/CVE-2022-23487</a></li>
<li><a href="https://github.com/advisories/GHSA-f44q-634c-jvwv">https://github.com/advisories/GHSA-f44q-634c-jvwv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f44q-634c-jvwv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-07T23:23:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simple-git] simple-git vulnerable to Remote Code Execution when enabling the ext transport protocol]]></title>
        <id>https://github.com/advisories/GHSA-9p95-fxvg-qgq2</id>
        <link href="https://github.com/advisories/GHSA-9p95-fxvg-qgq2"/>
        <updated>2022-12-07T19:19:14.000Z</updated>
        <content type="html"><![CDATA[<p>The package simple-git before 3.15.0 is vulnerable to Remote Code Execution (RCE) when enabling the <code>ext</code> transport protocol, which makes it exploitable via <code>clone()</code> method. This vulnerability exists due to an incomplete fix of <a href="https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-2434306">CVE-2022-24066</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25912">https://nvd.nist.gov/vuln/detail/CVE-2022-25912</a></li>
<li><a href="https://github.com/steveukx/git-js/commit/774648049eb3e628379e292ea172dccaba610504">https://github.com/steveukx/git-js/commit/774648049eb3e628379e292ea172dccaba610504</a></li>
<li><a href="https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md%23overriding-allowed-protocols">https://github.com/steveukx/git-js/blob/main/docs/PLUGIN-UNSAFE-ACTIONS.md%23overriding-allowed-protocols</a></li>
<li><a href="https://github.com/steveukx/git-js/releases/tag/simple-git%403.15.0">https://github.com/steveukx/git-js/releases/tag/simple-git%403.15.0</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3153532">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3153532</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-3112221">https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-3112221</a></li>
<li><a href="https://github.com/advisories/GHSA-9p95-fxvg-qgq2">https://github.com/advisories/GHSA-9p95-fxvg-qgq2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9p95-fxvg-qgq2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-12-06T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nadesiko3] Nadesiko3 OS Command Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m8r5-7wf4-63mw</id>
        <link href="https://github.com/advisories/GHSA-m8r5-7wf4-63mw"/>
        <updated>2022-12-06T22:26:31.000Z</updated>
        <content type="html"><![CDATA[<p>OS command injection vulnerability in Nadesiko3 (PC Version) v3.3.68 and earlier allows a remote attacker to execute an arbitrary OS command when processing compression and decompression on the product.</p>
<p>Release notes for versions 3.3.62 and 3.3.69 both link to patches for this particular issue. The <a href="https://jvn.jp/en/jp/JVN56968681/index.html">JPCERT/CC</a> advisory lists versions 3.3.68 and prior as vulnerable, and the most recent patch for this issue is tagged with version 3.3.69.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41642">https://nvd.nist.gov/vuln/detail/CVE-2022-41642</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1325">https://github.com/kujirahand/nadesiko3/issues/1325</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1347">https://github.com/kujirahand/nadesiko3/issues/1347</a></li>
<li><a href="https://jvn.jp/en/jp/JVN56968681/index.html">https://jvn.jp/en/jp/JVN56968681/index.html</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/commit/124871c064cfc65cdcd83205637e84fc246c76df">https://github.com/kujirahand/nadesiko3/commit/124871c064cfc65cdcd83205637e84fc246c76df</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/commit/56ccfb2f9cceaec83e6a9d3024c3ba8c54ebe1a4">https://github.com/kujirahand/nadesiko3/commit/56ccfb2f9cceaec83e6a9d3024c3ba8c54ebe1a4</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/commit/61a70792752a75b7f71df214e98a236721ea3fa6">https://github.com/kujirahand/nadesiko3/commit/61a70792752a75b7f71df214e98a236721ea3fa6</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/releases/tag/3.3.62">https://github.com/kujirahand/nadesiko3/releases/tag/3.3.62</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/releases/tag/3.3.69">https://github.com/kujirahand/nadesiko3/releases/tag/3.3.69</a></li>
<li><a href="https://github.com/advisories/GHSA-m8r5-7wf4-63mw">https://github.com/advisories/GHSA-m8r5-7wf4-63mw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8r5-7wf4-63mw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-12-05T06:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nadesiko3] nadesiko3 vulnerable to OS Command Injection]]></title>
        <id>https://github.com/advisories/GHSA-7249-8x22-4rg4</id>
        <link href="https://github.com/advisories/GHSA-7249-8x22-4rg4"/>
        <updated>2022-12-06T19:43:31.000Z</updated>
        <content type="html"><![CDATA[<p>OS command injection vulnerability in Nako3edit, editor component of nadesiko3 (PC Version) v3.3.74 and earlier allows a remote attacker to obtain appkey of the product and execute an arbitrary OS command on the product.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42496">https://nvd.nist.gov/vuln/detail/CVE-2022-42496</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1325">https://github.com/kujirahand/nadesiko3/issues/1325</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1347">https://github.com/kujirahand/nadesiko3/issues/1347</a></li>
<li><a href="https://jvn.jp/en/jp/JVN56968681/index.html">https://jvn.jp/en/jp/JVN56968681/index.html</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/releases/tag/3.3.75">https://github.com/kujirahand/nadesiko3/releases/tag/3.3.75</a></li>
<li><a href="https://github.com/advisories/GHSA-7249-8x22-4rg4">https://github.com/advisories/GHSA-7249-8x22-4rg4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7249-8x22-4rg4</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-12-05T06:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[qs] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] qs vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-hrpp-h998-j3pp</id>
        <link href="https://github.com/advisories/GHSA-hrpp-h998-j3pp"/>
        <updated>2022-12-06T14:32:47.000Z</updated>
        <content type="html"><![CDATA[<p>qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[<strong>proto</strong>]=b&amp;a[<strong>proto</strong>]&amp;a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has "deps: <a href="mailto:qs@6.9.7">qs@6.9.7</a>" in its release description, is not vulnerable).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24999">https://nvd.nist.gov/vuln/detail/CVE-2022-24999</a></li>
<li><a href="https://github.com/ljharb/qs/pull/428">https://github.com/ljharb/qs/pull/428</a></li>
<li><a href="https://github.com/expressjs/express/releases/tag/4.17.3">https://github.com/expressjs/express/releases/tag/4.17.3</a></li>
<li><a href="https://github.com/n8tz/CVE-2022-24999">https://github.com/n8tz/CVE-2022-24999</a></li>
<li><a href="https://github.com/advisories/GHSA-hrpp-h998-j3pp">https://github.com/advisories/GHSA-hrpp-h998-j3pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hrpp-h998-j3pp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-27T00:30:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nadesiko3] nadesiko3 allows remote attacker to inject invalid value to decodeURIComponent of nako3edit]]></title>
        <id>https://github.com/advisories/GHSA-x2jx-w3wm-9p3p</id>
        <link href="https://github.com/advisories/GHSA-x2jx-w3wm-9p3p"/>
        <updated>2022-12-06T18:51:46.000Z</updated>
        <content type="html"><![CDATA[<p>Nako3edit is the editor component of Nadeshiko 3, a programming language developed based on Japanese. Improper check or handling of exceptional conditions in Nako3edit v3.3.74 and earlier allows a remote attacker to inject an invalid value to decodeURIComponent of nako3edit, which may lead the server to crash.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41777">https://nvd.nist.gov/vuln/detail/CVE-2022-41777</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1325">https://github.com/kujirahand/nadesiko3/issues/1325</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/issues/1347">https://github.com/kujirahand/nadesiko3/issues/1347</a></li>
<li><a href="https://jvn.jp/en/jp/JVN56968681/index.html">https://jvn.jp/en/jp/JVN56968681/index.html</a></li>
<li><a href="https://github.com/kujirahand/nadesiko3/releases/tag/3.3.75">https://github.com/kujirahand/nadesiko3/releases/tag/3.3.75</a></li>
<li><a href="https://github.com/advisories/GHSA-x2jx-w3wm-9p3p">https://github.com/advisories/GHSA-x2jx-w3wm-9p3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2jx-w3wm-9p3p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-12-05T06:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[linux-cmdline] linux-cmdline is vulnerable to Prototype Pollution via the constructor]]></title>
        <id>https://github.com/advisories/GHSA-2c29-wc65-4cx9</id>
        <link href="https://github.com/advisories/GHSA-2c29-wc65-4cx9"/>
        <updated>2022-12-05T23:17:27.000Z</updated>
        <content type="html"><![CDATA[<p>The package linux-cmdline is a parser for Linux kernel command line arguments. Versions before 1.0.1 are vulnerable to Prototype Pollution via the constructor.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7704">https://nvd.nist.gov/vuln/detail/CVE-2020-7704</a></li>
<li><a href="https://github.com/piranna/linux-cmdline/commit/53c61a88bc47eb25d71832205056beaab95cf677">https://github.com/piranna/linux-cmdline/commit/53c61a88bc47eb25d71832205056beaab95cf677</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-LINUXCMDLINE-598674">https://snyk.io/vuln/SNYK-JS-LINUXCMDLINE-598674</a></li>
<li><a href="https://github.com/advisories/GHSA-2c29-wc65-4cx9">https://github.com/advisories/GHSA-2c29-wc65-4cx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2c29-wc65-4cx9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T17:26:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb] NodeBB vulnerable to account takeover via prototype vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rf3g-v8p5-p675</id>
        <link href="https://github.com/advisories/GHSA-rf3g-v8p5-p675"/>
        <updated>2022-12-05T23:06:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to a plain object with a prototype being used in socket.io message handling a specially crafted payload can be used to impersonate other users and takeover accounts.</p>
<h3 id="patches">Patches</h3>
<p>Patched in 2.6.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>Site maintainers can cherry-pick <a href="https://github.com/NodeBB/NodeBB/commit/48d143921753914da45926cca6370a92ed0c46b8">https://github.com/NodeBB/NodeBB/commit/48d143921753914da45926cca6370a92ed0c46b8</a> into their codebase to patch the exploit.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Discuss it on <a href="https://github.com/NodeBB/NodeBB/security/advisories/community.nodebb.org/">our community forum</a>
Email us at <a href="mailto:support@nodebb.org">support@nodebb.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/NodeBB/NodeBB/security/advisories/GHSA-rf3g-v8p5-p675">https://github.com/NodeBB/NodeBB/security/advisories/GHSA-rf3g-v8p5-p675</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-46164">https://nvd.nist.gov/vuln/detail/CVE-2022-46164</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/commit/48d143921753914da45926cca6370a92ed0c46b8">https://github.com/NodeBB/NodeBB/commit/48d143921753914da45926cca6370a92ed0c46b8</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/releases/tag/v2.6.1">https://github.com/NodeBB/NodeBB/releases/tag/v2.6.1</a></li>
<li><a href="https://github.com/advisories/GHSA-rf3g-v8p5-p675">https://github.com/advisories/GHSA-rf3g-v8p5-p675</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rf3g-v8p5-p675</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-12-05T23:06:14.000Z</published>
    </entry>
</feed>