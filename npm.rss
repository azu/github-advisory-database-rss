<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-09-11T02:19:51.848Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Session is cached for OpenID and OAuth2 if `redirect` is not used]]></title>
        <id>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</id>
        <link href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8"/>
        <updated>2024-09-10T21:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include <code>redirect</code> query string.</p>
<p>For example:</p>
<ul>
<li>Project is configured with OpenID or OAuth2</li>
<li>Project is configured with cache enabled</li>
<li>User tries to login via SSO link, but without <code>redirect</code> query string</li>
<li>After successful login, credentials are cached</li>
<li>If an unauthenticated user tries to login via SSO link, it will return the credentials of the other last user</li>
</ul>
<p>The SSO link is something like <code>https://directus.example.com/auth/login/openid/callback</code>, where <code>openid</code> is the name of the OpenID provider configured in Directus</p>
<h3 id="details">Details</h3>
<p>This happens because on that endpoint for both OpenId and Oauth2 Directus is using the <code>respond</code> middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials.
For OpenID, this can be seen here:
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a>
And for OAuth2 can be seen here
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create a new Directus project</li>
<li>Set <code>CACHE_ENABLED</code> to true</li>
<li>Set <code>CACHE_STORE</code> to <code>redis</code> for reliable results (if using memory with multiple nodes, it may only happen sometimes, due to cache being different for different nodes)</li>
<li>Configure <code>REDIS</code> with redis string or redis host, port, user, etc.</li>
<li>Set <code>AUTH_PROVIDERS</code> to <code>openid</code></li>
<li>Set <code>PUBLIC_URL</code> to the the main URL of your project . 	For example, <code>PUBLIC_URL: http://localhost:8055</code></li>
<li>Configure <code>AUTH_OPENID_CLIENT_ID</code>, <code>AUTH_OPENID_CLIENT_SECRET</code>, <code>AUTH_OPENID_ISSUER_URL</code> with proper OpenID configurations</li>
<li>Be sure that on OpenID external app you have configured Redirect URI to <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Run Directus</li>
<li>Open the SSO link like <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Do the authentication on the OpenID external webpage</li>
<li>Verify that it you got redirected to a page with a JSON including <code>access_token</code> property</li>
<li>Be sure all anonymous mode windows are closed</li>
<li>Open an anonymous window and go to the SSO Link <code>http://localhost:8055/auth/login/openid/callback</code> and see you have the same credentials, even though you don't have any session because you are in anonymous mode</li>
</ul>
<h3 id="impact">Impact</h3>
<p>All projects using OpenID or OAuth 2, that does not include <code>redirect</code> query string on loggin in users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45596">https://nvd.nist.gov/vuln/detail/CVE-2024-45596</a></li>
<li><a href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/advisories/GHSA-cff8-x7jv-4fm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-10T19:43:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Session is cached for OpenID and OAuth2 if `redirect` is not used]]></title>
        <id>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</id>
        <link href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8"/>
        <updated>2024-09-10T21:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include <code>redirect</code> query string.</p>
<p>For example:</p>
<ul>
<li>Project is configured with OpenID or OAuth2</li>
<li>Project is configured with cache enabled</li>
<li>User tries to login via SSO link, but without <code>redirect</code> query string</li>
<li>After successful login, credentials are cached</li>
<li>If an unauthenticated user tries to login via SSO link, it will return the credentials of the other last user</li>
</ul>
<p>The SSO link is something like <code>https://directus.example.com/auth/login/openid/callback</code>, where <code>openid</code> is the name of the OpenID provider configured in Directus</p>
<h3 id="details">Details</h3>
<p>This happens because on that endpoint for both OpenId and Oauth2 Directus is using the <code>respond</code> middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials.
For OpenID, this can be seen here:
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a>
And for OAuth2 can be seen here
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create a new Directus project</li>
<li>Set <code>CACHE_ENABLED</code> to true</li>
<li>Set <code>CACHE_STORE</code> to <code>redis</code> for reliable results (if using memory with multiple nodes, it may only happen sometimes, due to cache being different for different nodes)</li>
<li>Configure <code>REDIS</code> with redis string or redis host, port, user, etc.</li>
<li>Set <code>AUTH_PROVIDERS</code> to <code>openid</code></li>
<li>Set <code>PUBLIC_URL</code> to the the main URL of your project . 	For example, <code>PUBLIC_URL: http://localhost:8055</code></li>
<li>Configure <code>AUTH_OPENID_CLIENT_ID</code>, <code>AUTH_OPENID_CLIENT_SECRET</code>, <code>AUTH_OPENID_ISSUER_URL</code> with proper OpenID configurations</li>
<li>Be sure that on OpenID external app you have configured Redirect URI to <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Run Directus</li>
<li>Open the SSO link like <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Do the authentication on the OpenID external webpage</li>
<li>Verify that it you got redirected to a page with a JSON including <code>access_token</code> property</li>
<li>Be sure all anonymous mode windows are closed</li>
<li>Open an anonymous window and go to the SSO Link <code>http://localhost:8055/auth/login/openid/callback</code> and see you have the same credentials, even though you don't have any session because you are in anonymous mode</li>
</ul>
<h3 id="impact">Impact</h3>
<p>All projects using OpenID or OAuth 2, that does not include <code>redirect</code> query string on loggin in users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45596">https://nvd.nist.gov/vuln/detail/CVE-2024-45596</a></li>
<li><a href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/advisories/GHSA-cff8-x7jv-4fm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-10T19:43:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Session is cached for OpenID and OAuth2 if `redirect` is not used]]></title>
        <id>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</id>
        <link href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8"/>
        <updated>2024-09-10T21:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include <code>redirect</code> query string.</p>
<p>For example:</p>
<ul>
<li>Project is configured with OpenID or OAuth2</li>
<li>Project is configured with cache enabled</li>
<li>User tries to login via SSO link, but without <code>redirect</code> query string</li>
<li>After successful login, credentials are cached</li>
<li>If an unauthenticated user tries to login via SSO link, it will return the credentials of the other last user</li>
</ul>
<p>The SSO link is something like <code>https://directus.example.com/auth/login/openid/callback</code>, where <code>openid</code> is the name of the OpenID provider configured in Directus</p>
<h3 id="details">Details</h3>
<p>This happens because on that endpoint for both OpenId and Oauth2 Directus is using the <code>respond</code> middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials.
For OpenID, this can be seen here:
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a>
And for OAuth2 can be seen here
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create a new Directus project</li>
<li>Set <code>CACHE_ENABLED</code> to true</li>
<li>Set <code>CACHE_STORE</code> to <code>redis</code> for reliable results (if using memory with multiple nodes, it may only happen sometimes, due to cache being different for different nodes)</li>
<li>Configure <code>REDIS</code> with redis string or redis host, port, user, etc.</li>
<li>Set <code>AUTH_PROVIDERS</code> to <code>openid</code></li>
<li>Set <code>PUBLIC_URL</code> to the the main URL of your project . 	For example, <code>PUBLIC_URL: http://localhost:8055</code></li>
<li>Configure <code>AUTH_OPENID_CLIENT_ID</code>, <code>AUTH_OPENID_CLIENT_SECRET</code>, <code>AUTH_OPENID_ISSUER_URL</code> with proper OpenID configurations</li>
<li>Be sure that on OpenID external app you have configured Redirect URI to <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Run Directus</li>
<li>Open the SSO link like <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Do the authentication on the OpenID external webpage</li>
<li>Verify that it you got redirected to a page with a JSON including <code>access_token</code> property</li>
<li>Be sure all anonymous mode windows are closed</li>
<li>Open an anonymous window and go to the SSO Link <code>http://localhost:8055/auth/login/openid/callback</code> and see you have the same credentials, even though you don't have any session because you are in anonymous mode</li>
</ul>
<h3 id="impact">Impact</h3>
<p>All projects using OpenID or OAuth 2, that does not include <code>redirect</code> query string on loggin in users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45596">https://nvd.nist.gov/vuln/detail/CVE-2024-45596</a></li>
<li><a href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/advisories/GHSA-cff8-x7jv-4fm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-10T19:43:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Session is cached for OpenID and OAuth2 if `redirect` is not used]]></title>
        <id>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</id>
        <link href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8"/>
        <updated>2024-09-10T21:39:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unauthenticated user can access credentials of last authenticated user via OpenID or OAuth2 where the authentication URL did not include <code>redirect</code> query string.</p>
<p>For example:</p>
<ul>
<li>Project is configured with OpenID or OAuth2</li>
<li>Project is configured with cache enabled</li>
<li>User tries to login via SSO link, but without <code>redirect</code> query string</li>
<li>After successful login, credentials are cached</li>
<li>If an unauthenticated user tries to login via SSO link, it will return the credentials of the other last user</li>
</ul>
<p>The SSO link is something like <code>https://directus.example.com/auth/login/openid/callback</code>, where <code>openid</code> is the name of the OpenID provider configured in Directus</p>
<h3 id="details">Details</h3>
<p>This happens because on that endpoint for both OpenId and Oauth2 Directus is using the <code>respond</code> middleware, which by default will try to cache GET requests that met some conditions. Although, those conditions do not include this scenario, when an unauthenticated request returns user credentials.
For OpenID, this can be seen here:
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a>
And for OAuth2 can be seen here
<a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></p>
<h3 id="poc">PoC</h3>
<ul>
<li>Create a new Directus project</li>
<li>Set <code>CACHE_ENABLED</code> to true</li>
<li>Set <code>CACHE_STORE</code> to <code>redis</code> for reliable results (if using memory with multiple nodes, it may only happen sometimes, due to cache being different for different nodes)</li>
<li>Configure <code>REDIS</code> with redis string or redis host, port, user, etc.</li>
<li>Set <code>AUTH_PROVIDERS</code> to <code>openid</code></li>
<li>Set <code>PUBLIC_URL</code> to the the main URL of your project . 	For example, <code>PUBLIC_URL: http://localhost:8055</code></li>
<li>Configure <code>AUTH_OPENID_CLIENT_ID</code>, <code>AUTH_OPENID_CLIENT_SECRET</code>, <code>AUTH_OPENID_ISSUER_URL</code> with proper OpenID configurations</li>
<li>Be sure that on OpenID external app you have configured Redirect URI to <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Run Directus</li>
<li>Open the SSO link like <code>http://localhost:8055/auth/login/openid/callback</code></li>
<li>Do the authentication on the OpenID external webpage</li>
<li>Verify that it you got redirected to a page with a JSON including <code>access_token</code> property</li>
<li>Be sure all anonymous mode windows are closed</li>
<li>Open an anonymous window and go to the SSO Link <code>http://localhost:8055/auth/login/openid/callback</code> and see you have the same credentials, even though you don't have any session because you are in anonymous mode</li>
</ul>
<h3 id="impact">Impact</h3>
<p>All projects using OpenID or OAuth 2, that does not include <code>redirect</code> query string on loggin in users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/directus/directus/security/advisories/GHSA-cff8-x7jv-4fm8</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428">https://github.com/directus/directus/blob/main/api/src/auth/drivers/oauth2.ts#L422-L428</a></li>
<li><a href="https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459">https://github.com/directus/directus/blob/main/api/src/auth/drivers/openid.ts#L453-L459</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45596">https://nvd.nist.gov/vuln/detail/CVE-2024-45596</a></li>
<li><a href="https://github.com/advisories/GHSA-cff8-x7jv-4fm8">https://github.com/advisories/GHSA-cff8-x7jv-4fm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cff8-x7jv-4fm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-10T19:43:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[send] send vulnerable to template injection that can lead to XSS]]></title>
        <id>https://github.com/advisories/GHSA-m6fv-jmcg-4jfg</id>
        <link href="https://github.com/advisories/GHSA-m6fv-jmcg-4jfg"/>
        <updated>2024-09-10T19:42:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>passing untrusted user input - even after sanitizing it - to <code>SendStream.redirect()</code> may execute untrusted code</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in send 0.19.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist</p>
<h3 id="details">Details</h3>
<p>successful exploitation of this vector requires the following:</p>
<ol>
<li>The attacker MUST control the input to response.redirect()</li>
<li>express MUST NOT redirect before the template appears</li>
<li>the browser MUST NOT complete redirection before:</li>
<li>the user MUST click on the link in the template</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/send/security/advisories/GHSA-m6fv-jmcg-4jfg">https://github.com/pillarjs/send/security/advisories/GHSA-m6fv-jmcg-4jfg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43799">https://nvd.nist.gov/vuln/detail/CVE-2024-43799</a></li>
<li><a href="https://github.com/pillarjs/send/commit/ae4f2989491b392ae2ef3b0015a019770ae65d35">https://github.com/pillarjs/send/commit/ae4f2989491b392ae2ef3b0015a019770ae65d35</a></li>
<li><a href="https://github.com/advisories/GHSA-m6fv-jmcg-4jfg">https://github.com/advisories/GHSA-m6fv-jmcg-4jfg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m6fv-jmcg-4jfg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T19:42:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serve-static] serve-static vulnerable to template injection that can lead to XSS]]></title>
        <id>https://github.com/advisories/GHSA-cm22-4g7w-348p</id>
        <link href="https://github.com/advisories/GHSA-cm22-4g7w-348p"/>
        <updated>2024-09-10T19:42:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>passing untrusted user input - even after sanitizing it - to <code>redirect()</code> may execute untrusted code</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in serve-static 1.16.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist</p>
<h3 id="details">Details</h3>
<p>successful exploitation of this vector requires the following:</p>
<ol>
<li>The attacker MUST control the input to response.redirect()</li>
<li>express MUST NOT redirect before the template appears</li>
<li>the browser MUST NOT complete redirection before:</li>
<li>the user MUST click on the link in the template</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/serve-static/security/advisories/GHSA-cm22-4g7w-348p">https://github.com/expressjs/serve-static/security/advisories/GHSA-cm22-4g7w-348p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43800">https://nvd.nist.gov/vuln/detail/CVE-2024-43800</a></li>
<li><a href="https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b">https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b</a></li>
<li><a href="https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa">https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa</a></li>
<li><a href="https://github.com/advisories/GHSA-cm22-4g7w-348p">https://github.com/advisories/GHSA-cm22-4g7w-348p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cm22-4g7w-348p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T19:42:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[serve-static] serve-static vulnerable to template injection that can lead to XSS]]></title>
        <id>https://github.com/advisories/GHSA-cm22-4g7w-348p</id>
        <link href="https://github.com/advisories/GHSA-cm22-4g7w-348p"/>
        <updated>2024-09-10T19:42:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>passing untrusted user input - even after sanitizing it - to <code>redirect()</code> may execute untrusted code</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in serve-static 1.16.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist</p>
<h3 id="details">Details</h3>
<p>successful exploitation of this vector requires the following:</p>
<ol>
<li>The attacker MUST control the input to response.redirect()</li>
<li>express MUST NOT redirect before the template appears</li>
<li>the browser MUST NOT complete redirection before:</li>
<li>the user MUST click on the link in the template</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/serve-static/security/advisories/GHSA-cm22-4g7w-348p">https://github.com/expressjs/serve-static/security/advisories/GHSA-cm22-4g7w-348p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43800">https://nvd.nist.gov/vuln/detail/CVE-2024-43800</a></li>
<li><a href="https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b">https://github.com/expressjs/serve-static/commit/0c11fad159898cdc69fd9ab63269b72468ecaf6b</a></li>
<li><a href="https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa">https://github.com/expressjs/serve-static/commit/ce730896fddce1588111d9ef6fdf20896de5c6fa</a></li>
<li><a href="https://github.com/advisories/GHSA-cm22-4g7w-348p">https://github.com/advisories/GHSA-cm22-4g7w-348p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cm22-4g7w-348p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T19:42:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] express vulnerable to XSS via response.redirect()]]></title>
        <id>https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</id>
        <link href="https://github.com/advisories/GHSA-qw6h-vgh9-j6wx"/>
        <updated>2024-09-10T19:41:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In express &lt;4.20.0, passing untrusted user input - even after sanitizing it - to <code>response.redirect()</code> may execute untrusted code</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in express 4.20.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist</p>
<h3 id="details">Details</h3>
<p>successful exploitation of this vector requires the following:</p>
<ol>
<li>The attacker MUST control the input to response.redirect()</li>
<li>express MUST NOT redirect before the template appears</li>
<li>the browser MUST NOT complete redirection before:</li>
<li>the user MUST click on the link in the template</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-qw6h-vgh9-j6wx">https://github.com/expressjs/express/security/advisories/GHSA-qw6h-vgh9-j6wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43796">https://nvd.nist.gov/vuln/detail/CVE-2024-43796</a></li>
<li><a href="https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553">https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553</a></li>
<li><a href="https://github.com/advisories/GHSA-qw6h-vgh9-j6wx">https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T19:41:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[express] express vulnerable to XSS via response.redirect()]]></title>
        <id>https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</id>
        <link href="https://github.com/advisories/GHSA-qw6h-vgh9-j6wx"/>
        <updated>2024-09-10T19:41:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>In express &lt;4.20.0, passing untrusted user input - even after sanitizing it - to <code>response.redirect()</code> may execute untrusted code</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in express 4.20.0</p>
<h3 id="workarounds">Workarounds</h3>
<p>users are encouraged to upgrade to the patched version of express, but otherwise can workaround this issue by making sure any untrusted inputs are safe, ideally by validating them against an explicit allowlist</p>
<h3 id="details">Details</h3>
<p>successful exploitation of this vector requires the following:</p>
<ol>
<li>The attacker MUST control the input to response.redirect()</li>
<li>express MUST NOT redirect before the template appears</li>
<li>the browser MUST NOT complete redirection before:</li>
<li>the user MUST click on the link in the template</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/expressjs/express/security/advisories/GHSA-qw6h-vgh9-j6wx">https://github.com/expressjs/express/security/advisories/GHSA-qw6h-vgh9-j6wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43796">https://nvd.nist.gov/vuln/detail/CVE-2024-43796</a></li>
<li><a href="https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553">https://github.com/expressjs/express/commit/54271f69b511fea198471e6ff3400ab805d6b553</a></li>
<li><a href="https://github.com/advisories/GHSA-qw6h-vgh9-j6wx">https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw6h-vgh9-j6wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T19:41:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[node-gettext] node-gettext vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-g974-hxvm-x689</id>
        <link href="https://github.com/advisories/GHSA-g974-hxvm-x689"/>
        <updated>2024-09-10T15:52:57.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package node-gettext are vulnerable to Prototype Pollution via the addTranslations() function in gettext.js due to improper user input sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21528">https://nvd.nist.gov/vuln/detail/CVE-2024-21528</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-NODEGETTEXT-6100943">https://security.snyk.io/vuln/SNYK-JS-NODEGETTEXT-6100943</a></li>
<li><a href="https://github.com/alexanderwallin/node-gettext/blob/65d9670f691c2eeca40dce129c95bcf8b613d344/lib/gettext.js#L113">https://github.com/alexanderwallin/node-gettext/blob/65d9670f691c2eeca40dce129c95bcf8b613d344/lib/gettext.js#L113</a></li>
<li><a href="https://github.com/advisories/GHSA-g974-hxvm-x689">https://github.com/advisories/GHSA-g974-hxvm-x689</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g974-hxvm-x689</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-10T06:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[body-parser] body-parser vulnerable to denial of service when url encoding is enabled]]></title>
        <id>https://github.com/advisories/GHSA-qwcr-r2fm-qrc7</id>
        <link href="https://github.com/advisories/GHSA-qwcr-r2fm-qrc7"/>
        <updated>2024-09-10T19:01:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>body-parser &lt;1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.</p>
<h3 id="patches">Patches</h3>
<p>this issue is patched in 1.20.3</p>
<h3 id="references">References</h3>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/expressjs/body-parser/security/advisories/GHSA-qwcr-r2fm-qrc7">https://github.com/expressjs/body-parser/security/advisories/GHSA-qwcr-r2fm-qrc7</a></li>
<li><a href="https://github.com/expressjs/body-parser/commit/b2695c4450f06ba3b0ccf48d872a229bb41c9bce">https://github.com/expressjs/body-parser/commit/b2695c4450f06ba3b0ccf48d872a229bb41c9bce</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45590">https://nvd.nist.gov/vuln/detail/CVE-2024-45590</a></li>
<li><a href="https://github.com/advisories/GHSA-qwcr-r2fm-qrc7">https://github.com/advisories/GHSA-qwcr-r2fm-qrc7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwcr-r2fm-qrc7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-10T15:52:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS allows attackers to bypass common image source restrictions]]></title>
        <id>https://github.com/advisories/GHSA-m9gf-397r-hwpg</id>
        <link href="https://github.com/advisories/GHSA-m9gf-397r-hwpg"/>
        <updated>2024-09-09T20:20:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the <code>[srcset]</code> attribute in AngularJS allows attackers to bypass common image source restrictions, which can also lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> .</p>
<p>This issue affects AngularJS versions 1.3.0-rc.4 and greater.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8372">https://nvd.nist.gov/vuln/detail/CVE-2024-8372</a></li>
<li><a href="https://codepen.io/herodevs/full/xxoQRNL/0072e627abe03e9cda373bc75b4c1017">https://codepen.io/herodevs/full/xxoQRNL/0072e627abe03e9cda373bc75b4c1017</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-8372">https://www.herodevs.com/vulnerability-directory/cve-2024-8372</a></li>
<li><a href="https://github.com/advisories/GHSA-m9gf-397r-hwpg">https://github.com/advisories/GHSA-m9gf-397r-hwpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m9gf-397r-hwpg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-09T15:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-10T16:14:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>. </p>
<p>Version 0.1.10 adds backtracking protection when a custom regular expression is not provided, so it's still possible to manually create a ReDoS vulnerability if you are providing custom regular expressions.</p>
<p>Version 7.0.0 can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version 8.0.0 removes all features that can cause a ReDoS and stops exposing the regular expression directly.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-10T16:14:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>. </p>
<p>Version 0.1.10 adds backtracking protection when a custom regular expression is not provided, so it's still possible to manually create a ReDoS vulnerability if you are providing custom regular expressions.</p>
<p>Version 7.0.0 can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version 8.0.0 removes all features that can cause a ReDoS and stops exposing the regular expression directly.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[angular] AngularJS allows attackers to bypass common image source restrictions]]></title>
        <id>https://github.com/advisories/GHSA-mqm9-c95h-x2p6</id>
        <link href="https://github.com/advisories/GHSA-mqm9-c95h-x2p6"/>
        <updated>2024-09-09T20:20:05.000Z</updated>
        <content type="html"><![CDATA[<p>Improper sanitization of the value of the <code>[srcset]</code> attribute in <code>&lt;source&gt;</code> HTML elements in AngularJS allows attackers to bypass common image source restrictions, which can also lead to a form of  Content Spoofing <a href="https://owasp.org/www-community/attacks/Content_Spoofing">https://owasp.org/www-community/attacks/Content_Spoofing</a> .</p>
<p>This issue affects all versions of AngularJS.</p>
<p>Note:
The AngularJS project is End-of-Life and will not receive any updates to address this issue. For more information see  here <a href="https://docs.angularjs.org/misc/version-support-status">https://docs.angularjs.org/misc/version-support-status</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-8373">https://nvd.nist.gov/vuln/detail/CVE-2024-8373</a></li>
<li><a href="https://codepen.io/herodevs/full/bGPQgMp/8da9ce87e99403ee13a295c305ebfa0b">https://codepen.io/herodevs/full/bGPQgMp/8da9ce87e99403ee13a295c305ebfa0b</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-8373">https://www.herodevs.com/vulnerability-directory/cve-2024-8373</a></li>
<li><a href="https://github.com/advisories/GHSA-mqm9-c95h-x2p6">https://github.com/advisories/GHSA-mqm9-c95h-x2p6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqm9-c95h-x2p6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-09T15:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap] Bootstrap Cross-Site Scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</id>
        <link href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f"/>
        <updated>2024-09-06T19:07:45.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been identified in Bootstrap that exposes users to Cross-Site Scripting (XSS) attacks. The issue is present in the carousel component, where the data-slide and data-slide-to attributes can be exploited through the href attribute of an <a> tag due to inadequate sanitization. This vulnerability could potentially enable attackers to execute arbitrary JavaScript within the victim's browser.</a></p><a>
<h3 id="references">References</h3>
</a><ul><a>
</a><li><a></a><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6531">https://nvd.nist.gov/vuln/detail/CVE-2024-6531</a></li>
<li><a href="https://www.herodevs.com/vulnerability-directory/cve-2024-6531">https://www.herodevs.com/vulnerability-directory/cve-2024-6531</a></li>
<li><a href="https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml">https://github.com/rubysec/ruby-advisory-db/blob/master/gems/bootstrap/CVE-2024-6531.yml</a></li>
<li><a href="https://github.com/advisories/GHSA-vc8w-jr9v-vj7f">https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc8w-jr9v-vj7f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T18:31:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@actions/artifact] @actions/artifact has an Arbitrary File Write via artifact extraction]]></title>
        <id>https://github.com/advisories/GHSA-6q32-hq47-5qq3</id>
        <link href="https://github.com/advisories/GHSA-6q32-hq47-5qq3"/>
        <updated>2024-09-04T18:08:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Versions of <code>actions/artifact</code> before 2.1.7 are vulnerable to arbitrary file write when using <code>downloadArtifactInternal</code>, <code>downloadArtifactPublic</code>, or <code>streamExtractExternal</code> for extracting a specifically crafted artifact that contains path traversal filenames.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to version 2.1.7 or higher. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1724">https://github.com/actions/toolkit/pull/1724</a></li>
</ul>
<h3 id="cve">CVE</h3>
<p>CVE-2024-42471</p>
<h3 id="credits">Credits</h3>
<p>Justin Taft from Google</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/actions/toolkit/security/advisories/GHSA-6q32-hq47-5qq3">https://github.com/actions/toolkit/security/advisories/GHSA-6q32-hq47-5qq3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42471">https://nvd.nist.gov/vuln/detail/CVE-2024-42471</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1724">https://github.com/actions/toolkit/pull/1724</a></li>
<li><a href="https://github.com/actions/toolkit/commit/29885a805ef3e95a9862dcaa8431c30981960017">https://github.com/actions/toolkit/commit/29885a805ef3e95a9862dcaa8431c30981960017</a></li>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/actions/toolkit/pull/1602">https://github.com/actions/toolkit/pull/1602</a></li>
<li><a href="https://github.com/actions/download-artifact/blob/v3/package.json#L31">https://github.com/actions/download-artifact/blob/v3/package.json#L31</a></li>
<li><a href="https://github.com/advisories/GHSA-6q32-hq47-5qq3">https://github.com/advisories/GHSA-6q32-hq47-5qq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6q32-hq47-5qq3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-03T20:08:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-community] Prototype pollution in ag-grid-community via the _.mergeDeep function]]></title>
        <id>https://github.com/advisories/GHSA-876p-c77m-x2hc</id>
        <link href="https://github.com/advisories/GHSA-876p-c77m-x2hc"/>
        <updated>2024-09-04T16:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties. Prior versions were also found to be affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38996">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/pull/8290">https://github.com/ag-grid/ag-grid/pull/8290</a></li>
<li><a href="https://github.com/advisories/GHSA-876p-c77m-x2hc">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-876p-c77m-x2hc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T15:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-enterprise] Prototype pollution in ag-grid-community via the _.mergeDeep function]]></title>
        <id>https://github.com/advisories/GHSA-876p-c77m-x2hc</id>
        <link href="https://github.com/advisories/GHSA-876p-c77m-x2hc"/>
        <updated>2024-09-04T16:39:11.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-community v31.3.2 and ag-grid-enterprise v31.3.2 were discovered to contain a prototype pollution via the _.mergeDeep function. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties. Prior versions were also found to be affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38996">https://nvd.nist.gov/vuln/detail/CVE-2024-38996</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/pull/8290">https://github.com/ag-grid/ag-grid/pull/8290</a></li>
<li><a href="https://github.com/advisories/GHSA-876p-c77m-x2hc">https://github.com/advisories/GHSA-876p-c77m-x2hc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-876p-c77m-x2hc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T15:32:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[urlregex] ReDoS in urlregex]]></title>
        <id>https://github.com/advisories/GHSA-rw72-v6c7-hf9r</id>
        <link href="https://github.com/advisories/GHSA-rw72-v6c7-hf9r"/>
        <updated>2024-09-03T21:03:10.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in nescalante urlregex up to 0.5.0 and classified as problematic. This issue affects some unknown processing of the file index.js of the component Backtracking. The manipulation leads to inefficient regular expression complexity. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 0.5.1 is able to address this issue. The identifier of the patch is e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9. It is recommended to upgrade the affected component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36830">https://nvd.nist.gov/vuln/detail/CVE-2020-36830</a></li>
<li><a href="https://github.com/nescalante/urlregex/pull/8">https://github.com/nescalante/urlregex/pull/8</a></li>
<li><a href="https://github.com/nescalante/urlregex/commit/e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9">https://github.com/nescalante/urlregex/commit/e5a085afe6abfaea1d1a78f54c45af9ef43ca1f9</a></li>
<li><a href="https://github.com/nescalante/urlregex/releases/tag/v0.5.1">https://github.com/nescalante/urlregex/releases/tag/v0.5.1</a></li>
<li><a href="https://vuldb.com/?ctiid.276269">https://vuldb.com/?ctiid.276269</a></li>
<li><a href="https://vuldb.com/?id.276269">https://vuldb.com/?id.276269</a></li>
<li><a href="https://github.com/advisories/GHSA-rw72-v6c7-hf9r">https://github.com/advisories/GHSA-rw72-v6c7-hf9r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rw72-v6c7-hf9r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-02T18:31:24.000Z</published>
    </entry>
</feed>