<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-08-06T18:01:28.681Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[uploader-plugin] Malicious Package in uploader-plugin]]></title>
        <id>https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</id>
        <link href="https://github.com/advisories/GHSA-fx6f-fpfv-5hmc"/>
        <updated>2023-08-05T05:02:38.000Z</updated>
        <content type="html"><![CDATA[<p>Version 1.0.2 of <code>uploader-plugin</code> contained malicious code. The code when executed in the browser would enumerate password, cvc, cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>Remove the package from your environment. It's also recommended to evaluate your application to determine whether or not user data was compromised.</p>
<p>Users may consider downgrading to version 1.0.1</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/1100">https://www.npmjs.com/advisories/1100</a></li>
<li><a href="https://github.com/advisories/GHSA-fx6f-fpfv-5hmc">https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fx6f-fpfv-5hmc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-03T19:10:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[radic-util] Malicious Package in radic-util]]></title>
        <id>https://github.com/advisories/GHSA-8qh7-xw58-3ww7</id>
        <link href="https://github.com/advisories/GHSA-8qh7-xw58-3ww7"/>
        <updated>2023-08-05T05:02:07.000Z</updated>
        <content type="html"><![CDATA[<p>Version 1.0.2 of <code>radic-util</code> contained malicious code. The code when executed in the browser would enumerate password, cvc and cardnumber fields from forms and send the extracted values to <code>https://js-metrics.com/minjs.php?pl=</code></p>
<h2 id="recommendation">Recommendation</h2>
<p>Remove the package from your environment and evaluate your application to determine whether or not user data was compromised.</p>
<p>Users may consider downgrading to version 1.0.1</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.npmjs.com/advisories/942">https://www.npmjs.com/advisories/942</a></li>
<li><a href="https://github.com/advisories/GHSA-8qh7-xw58-3ww7">https://github.com/advisories/GHSA-8qh7-xw58-3ww7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8qh7-xw58-3ww7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2020-09-11T21:25:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb-plugin-markdown] NodeBB Cross-site Scripting Vulnerability in Markdown Processing]]></title>
        <id>https://github.com/advisories/GHSA-9g4f-5rpg-4948</id>
        <link href="https://github.com/advisories/GHSA-9g4f-5rpg-4948"/>
        <updated>2023-08-04T23:16:46.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3296">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/04/10/10">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/issues/2273">https://github.com/NodeBB/NodeBB/issues/2273</a></li>
<li><a href="https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>
<li><a href="https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>
<li><a href="https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>
<li><a href="https://github.com/advisories/GHSA-9g4f-5rpg-4948">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9g4f-5rpg-4948</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T00:47:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb] NodeBB Cross-site Scripting Vulnerability in Markdown Processing]]></title>
        <id>https://github.com/advisories/GHSA-9g4f-5rpg-4948</id>
        <link href="https://github.com/advisories/GHSA-9g4f-5rpg-4948"/>
        <updated>2023-08-04T23:16:46.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple cross-site scripting (XSS) vulnerabilities in NodeBB before 0.7 allow remote attackers to inject arbitrary web script or HTML via vectors related to (1) javascript: or (2) data: URLs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3296">https://nvd.nist.gov/vuln/detail/CVE-2015-3296</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/04/10/10">http://www.openwall.com/lists/oss-security/2015/04/10/10</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/issues/2273">https://github.com/NodeBB/NodeBB/issues/2273</a></li>
<li><a href="https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3">https://github.com/NodeBB/nodebb-plugin-markdown/commit/ab7f2684750882f7baefbfa31db8d5aac71e6ec3</a></li>
<li><a href="https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3">https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3</a></li>
<li><a href="https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824">https://web.archive.org/web/20200228230630/http://www.securityfocus.com/bid/71824</a></li>
<li><a href="https://github.com/advisories/GHSA-9g4f-5rpg-4948">https://github.com/advisories/GHSA-9g4f-5rpg-4948</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9g4f-5rpg-4948</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T00:47:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-appservice-irc] matrix-appservice-irc IRC command injection via admin commands containing newlines ]]></title>
        <id>https://github.com/advisories/GHSA-3pmj-jqqp-2mj3</id>
        <link href="https://github.com/advisories/GHSA-3pmj-jqqp-2mj3"/>
        <updated>2023-08-04T18:41:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It is possible to craft a command with newlines which would not be properly parsed. This would mean you could pass a string of commands as a channel name, which would then be run by the IRC bridge bot. </p>
<h3 id="patches">Patches</h3>
<p>Versions 1.0.1 and above are patched.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no robust workarounds to the bug. You can disable dynamic channels in the config to disable the most common execution method but others may exist. It is highly recommended to upgrade the bridge.</p>
<h3 id="credits">Credits</h3>
<p>Discovered and reported by <a href="https://valentin-lorentz.fr/">Val Lorentz</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-3pmj-jqqp-2mj3</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3">https://github.com/matrix-org/matrix-appservice-irc/commit/0afb064635d37e039067b5b3d6423448b93026d3</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1">https://github.com/matrix-org/matrix-appservice-irc/releases/tag/1.0.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38690">https://nvd.nist.gov/vuln/detail/CVE-2023-38690</a></li>
<li><a href="https://github.com/advisories/GHSA-3pmj-jqqp-2mj3">https://github.com/advisories/GHSA-3pmj-jqqp-2mj3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3pmj-jqqp-2mj3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-04T17:26:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-appservice-bridge] matrix-appservice-bridge doesn't verify the sub parameter of an openId token exhange, allowing unauthorized access to provisioning APIs]]></title>
        <id>https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</id>
        <link href="https://github.com/advisories/GHSA-vc7j-h8xg-fv5x"/>
        <updated>2023-08-04T18:41:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious Matrix server can use a foreign user's MXID in an OpenID exchange, allowing a bad actor to impersonate users when using the provisioning API.</p>
<h3 id="details">Details</h3>
<p>The library does not check that the servername part of the <code>sub</code> parameter (containing the user's <em>claimed</em> MXID) is the same as the servername we are talking to. A malicious actor could spin up a server on any given domain, respond with a <code>sub</code> parameter according to the user they want to act as and use the resulting token to perform provisioning requests.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable the provisioning API. If the bridge does not use the provisioning API, you are not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x">https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552">https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38691">https://nvd.nist.gov/vuln/detail/CVE-2023-38691</a></li>
<li><a href="https://github.com/advisories/GHSA-vc7j-h8xg-fv5x">https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-04T17:26:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-appservice-bridge] matrix-appservice-bridge doesn't verify the sub parameter of an openId token exhange, allowing unauthorized access to provisioning APIs]]></title>
        <id>https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</id>
        <link href="https://github.com/advisories/GHSA-vc7j-h8xg-fv5x"/>
        <updated>2023-08-04T18:41:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious Matrix server can use a foreign user's MXID in an OpenID exchange, allowing a bad actor to impersonate users when using the provisioning API.</p>
<h3 id="details">Details</h3>
<p>The library does not check that the servername part of the <code>sub</code> parameter (containing the user's <em>claimed</em> MXID) is the same as the servername we are talking to. A malicious actor could spin up a server on any given domain, respond with a <code>sub</code> parameter according to the user they want to act as and use the resulting token to perform provisioning requests.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable the provisioning API. If the bridge does not use the provisioning API, you are not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x">https://github.com/matrix-org/matrix-appservice-bridge/security/advisories/GHSA-vc7j-h8xg-fv5x</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552">https://github.com/matrix-org/matrix-appservice-bridge/commit/4c6723a5e7beda65cdf1ae5dbb882e8beaac8552</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38691">https://nvd.nist.gov/vuln/detail/CVE-2023-38691</a></li>
<li><a href="https://github.com/advisories/GHSA-vc7j-h8xg-fv5x">https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vc7j-h8xg-fv5x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-04T17:26:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-appservice-irc] matrix-appservice-irc events can be crafted to leak parts of targeted messages from other bridged rooms]]></title>
        <id>https://github.com/advisories/GHSA-c7hh-3v6c-fj4q</id>
        <link href="https://github.com/advisories/GHSA-c7hh-3v6c-fj4q"/>
        <updated>2023-08-04T17:26:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It was possible to craft an event such that it would leak part of a targeted message event from another bridged room. This required knowing an event ID to target.</p>
<h3 id="patches">Patches</h3>
<p>Please upgrade to 1.0.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>You can set the <code>matrixHandler.eventCacheSize</code> config value to <code>0</code> to workaround this bug. However, this may impact performance.</p>
<h3 id="credits">Credits</h3>
<p>Discovered and reported by <a href="https://valentin-lorentz.fr/">Val Lorentz</a>.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory email us at <a href="mailto:security@matrix.org">security@matrix.org</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-c7hh-3v6c-fj4q">https://github.com/matrix-org/matrix-appservice-irc/security/advisories/GHSA-c7hh-3v6c-fj4q</a></li>
<li><a href="https://github.com/matrix-org/matrix-appservice-irc/commit/8bbd2b69a16cbcbeffdd9b5c973fd89d61498d75">https://github.com/matrix-org/matrix-appservice-irc/commit/8bbd2b69a16cbcbeffdd9b5c973fd89d61498d75</a></li>
<li><a href="https://github.com/advisories/GHSA-c7hh-3v6c-fj4q">https://github.com/advisories/GHSA-c7hh-3v6c-fj4q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c7hh-3v6c-fj4q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-08-04T17:26:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@soketi/soketi] Soketi was exposed to Sandbox Escape vulnerability via vm2]]></title>
        <id>https://github.com/advisories/GHSA-g6w6-h933-4rc5</id>
        <link href="https://github.com/advisories/GHSA-g6w6-h933-4rc5"/>
        <updated>2023-08-03T19:44:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em>
Anyone who might have used Soketi with the <code>cluster</code> driver (or through PM2).</p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em>
Get the latest version of Soketi.</p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em>
None. It's advised to upgrade to the latest version.</p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<ul>
<li><a href="https://github.com/advisories/GHSA-cchq-frgv-rjh5">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>
<li><a href="https://github.com/patriksimek/vm2/issues/533">https://github.com/patriksimek/vm2/issues/533</a></li>
<li><a href="https://github.com/Unitech/pm2/issues/5643">https://github.com/Unitech/pm2/issues/5643</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5">https://github.com/soketi/soketi/security/advisories/GHSA-g6w6-h933-4rc5</a></li>
<li><a href="https://github.com/Unitech/pm2/issues/5643">https://github.com/Unitech/pm2/issues/5643</a></li>
<li><a href="https://github.com/patriksimek/vm2/issues/533">https://github.com/patriksimek/vm2/issues/533</a></li>
<li><a href="https://github.com/soketi/soketi/pull/927">https://github.com/soketi/soketi/pull/927</a></li>
<li><a href="https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a">https://github.com/soketi/soketi/commit/de12bff706c0d62e6a57dc1c7be3c4f014d0093a</a></li>
<li><a href="https://github.com/advisories/GHSA-cchq-frgv-rjh5">https://github.com/advisories/GHSA-cchq-frgv-rjh5</a></li>
<li><a href="https://github.com/soketi/soketi/releases/tag/1.6.0">https://github.com/soketi/soketi/releases/tag/1.6.0</a></li>
<li><a href="https://github.com/advisories/GHSA-g6w6-h933-4rc5">https://github.com/advisories/GHSA-g6w6-h933-4rc5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6w6-h933-4rc5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:44:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@budibase/bbui] Budibase Improper Access Control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x92g-49gh-63qm</id>
        <link href="https://github.com/advisories/GHSA-x92g-49gh-63qm"/>
        <updated>2023-08-03T16:41:40.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3225">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>
<li><a href="https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>
<li><a href="https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>
<li><a href="https://github.com/Budibase/budibase/releases/tag/v1.3.20">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>
<li><a href="https://github.com/advisories/GHSA-x92g-49gh-63qm">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x92g-49gh-63qm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-17T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@budibase/builder] Budibase Improper Access Control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x92g-49gh-63qm</id>
        <link href="https://github.com/advisories/GHSA-x92g-49gh-63qm"/>
        <updated>2023-08-03T16:41:40.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3225">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>
<li><a href="https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>
<li><a href="https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>
<li><a href="https://github.com/Budibase/budibase/releases/tag/v1.3.20">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>
<li><a href="https://github.com/advisories/GHSA-x92g-49gh-63qm">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x92g-49gh-63qm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-17T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@budibase/worker] Budibase Improper Access Control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x92g-49gh-63qm</id>
        <link href="https://github.com/advisories/GHSA-x92g-49gh-63qm"/>
        <updated>2023-08-03T16:41:40.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Access Control in GitHub repository budibase/budibase prior to 1.3.20.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3225">https://nvd.nist.gov/vuln/detail/CVE-2022-3225</a></li>
<li><a href="https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df">https://github.com/budibase/budibase/commit/d35864be0854216693a01307f81ffcabf6d549df</a></li>
<li><a href="https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245">https://huntr.dev/bounties/a13a56b7-04da-4560-b8ec-0d637d12a245</a></li>
<li><a href="https://github.com/Budibase/budibase/releases/tag/v1.3.20">https://github.com/Budibase/budibase/releases/tag/v1.3.20</a></li>
<li><a href="https://github.com/advisories/GHSA-x92g-49gh-63qm">https://github.com/advisories/GHSA-x92g-49gh-63qm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x92g-49gh-63qm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-17T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wrangler] Cloudflare Wrangler directory traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8c93-4hch-xgxp</id>
        <link href="https://github.com/advisories/GHSA-8c93-4hch-xgxp"/>
        <updated>2023-08-03T19:39:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Wrangler command line tool (&lt;=<a href="mailto:wrangler@3.1.0">wrangler@3.1.0</a>) was affected by a directory traversal vulnerability when running a local development server for Pages (wrangler pages dev command). This vulnerability enabled an attacker in the same network as the victim to connect to the local development server and access the victim's files present outside of the directory for the development server.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to <a href="mailto:wrangler@3.1.1">wrangler@3.1.1</a> or higher.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/cloudflare/workers-sdk">Workers SDK on Github</a>
<a href="https://developers.cloudflare.com/workers/wrangler/">Wrangler docs</a>
<a href="https://www.cve.org/CVERecord?id=CVE-2023-3348">CVE-2023-3348</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cloudflare/workers-sdk/security/advisories/GHSA-8c93-4hch-xgxp">https://github.com/cloudflare/workers-sdk/security/advisories/GHSA-8c93-4hch-xgxp</a></li>
<li><a href="https://github.com/cloudflare/workers-sdk/pull/3498">https://github.com/cloudflare/workers-sdk/pull/3498</a></li>
<li><a href="https://github.com/cloudflare/workers-sdk/commit/fddffdf0c23d2ca56f2139a2c6bc278052594cba">https://github.com/cloudflare/workers-sdk/commit/fddffdf0c23d2ca56f2139a2c6bc278052594cba</a></li>
<li><a href="https://github.com/cloudflare/workers-sdk/releases/tag/wrangler%403.1.1">https://github.com/cloudflare/workers-sdk/releases/tag/wrangler%403.1.1</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3348">https://nvd.nist.gov/vuln/detail/CVE-2023-3348</a></li>
<li><a href="https://developers.cloudflare.com/workers/wrangler/">https://developers.cloudflare.com/workers/wrangler/</a></li>
<li><a href="https://github.com/advisories/GHSA-8c93-4hch-xgxp">https://github.com/advisories/GHSA-8c93-4hch-xgxp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8c93-4hch-xgxp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-03T16:34:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@cypress/request] Server-Side Request Forgery in Request]]></title>
        <id>https://github.com/advisories/GHSA-p8p7-x288-28g6</id>
        <link href="https://github.com/advisories/GHSA-p8p7-x288-28g6"/>
        <updated>2023-08-02T23:08:48.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>request</code> package through 2.88.2 for Node.js and the <code>@cypress/request</code> package through 2.88.12 allow a bypass of SSRF mitigations via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP).</p>
<p>NOTE: The <code>request</code> package is no longer supported by the maintainer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28155">https://nvd.nist.gov/vuln/detail/CVE-2023-28155</a></li>
<li><a href="https://github.com/request/request/issues/3442">https://github.com/request/request/issues/3442</a></li>
<li><a href="https://github.com/request/request/pull/3444">https://github.com/request/request/pull/3444</a></li>
<li><a href="https://doyensec.com/resources/Doyensec_Advisory_RequestSSRF_Q12023.pdf">https://doyensec.com/resources/Doyensec_Advisory_RequestSSRF_Q12023.pdf</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20230413-0007/">https://security.netapp.com/advisory/ntap-20230413-0007/</a></li>
<li><a href="https://github.com/github/advisory-database/pull/2500">https://github.com/github/advisory-database/pull/2500</a></li>
<li><a href="https://github.com/cypress-io/request/blob/master/lib/redirect.js#L116">https://github.com/cypress-io/request/blob/master/lib/redirect.js#L116</a></li>
<li><a href="https://github.com/request/request/blob/master/lib/redirect.js#L111">https://github.com/request/request/blob/master/lib/redirect.js#L111</a></li>
<li><a href="https://github.com/advisories/GHSA-p8p7-x288-28g6">https://github.com/advisories/GHSA-p8p7-x288-28g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p8p7-x288-28g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-16T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ensdomains/ens-contracts] .eth registrar controller can shorten the duration of registered names]]></title>
        <id>https://github.com/advisories/GHSA-rrxv-q8m4-wch3</id>
        <link href="https://github.com/advisories/GHSA-rrxv-q8m4-wch3"/>
        <updated>2023-08-04T18:42:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>According to the documentation, controllers are allowed to register new domains and extend the expiry of existing domains, but they cannot change the ownership or reduce the expiration time of existing domains. However, a preliminary analysis suggests that an attacker-controlled controller may be able to reduce the expiration time of existing domains due to an integer overflow in the renew function.</p>
<p>The vulnerability resides in the following GitHub repository: <a href="https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a> </p>
<p>The vulnerable line of code is:</p>
<pre><code>require(
            expiries[id] + duration + GRACE_PERIOD &gt; duration + GRACE_PERIOD
        ); // Prevent future overflow
</code></pre>
<p>In this code snippet, the <code>duration</code> variable is user-supplied, making it possible to provide a value that would cause an overflow on both sides of the '&gt;' expression, ultimately rendering the condition true. Specifically, when the duration is set to <code>2^256 - GRACE_PERIOD</code>, the subsequent line <code>expiries[id] += duration;</code> also experiences an overflow, as <code>expiries[id]</code> is greater than <code>GRACE_PERIOD</code>. This results in the reduction of <code>expiries[id]</code> by <code>GRACE_PERIOD</code>. By repeatedly calling the renew function, an attacker could potentially force the expiration of an ENS record.</p>
<p>You can find the PoC included in the attached document. To execute the test, please use the following command:</p>
<pre><code>forge test -vvv --match-contract RegistrarExploit --fork-url &lt;alchemy_url&gt;
</code></pre>
<p>Replace <code>&lt;alchemy_url&gt;</code> with your Alchemy API URL. This command will run the Foundry test file and demonstrate the potential vulnerability.</p>
<h3 id="impact">Impact</h3>
<p>If successfully exploited, this vulnerability would enable attackers to force the expiration of any ENS record, ultimately allowing them to claim the affected domains for themselves.</p>
<p>Currently, it would require a malicious DAO to exploit it. Nevertheless, any vulnerability present in the controllers could potentially render this issue exploitable in the future.</p>
<p>An additional concern is the possibility of renewal discounts. Should ENS decide to implement a system that offers unlimited .eth domains for a fixed fee in the future, the vulnerability could become exploitable by any user due to the reduced attack cost.</p>
<h3 id="patches">Patches</h3>
<p>A mitigation is being developed.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As long as registration cost remains linear or superlinear based on registration duration, or limited to a reasonable maximum (eg, 1 million years), this vulnerability could only be exploited by a malicious DAO. The interim workaround is thus to take no action.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3">https://github.com/ensdomains/ens-contracts/security/advisories/GHSA-rrxv-q8m4-wch3</a></li>
<li><a href="https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca">https://github.com/ensdomains/ens-contracts/commit/e6b136e979084de3761c125142620304173990ca</a></li>
<li><a href="https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171">https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/BaseRegistrarImplementation.sol#L171</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38698">https://nvd.nist.gov/vuln/detail/CVE-2023-38698</a></li>
<li><a href="https://github.com/advisories/GHSA-rrxv-q8m4-wch3">https://github.com/advisories/GHSA-rrxv-q8m4-wch3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrxv-q8m4-wch3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-01T19:48:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[underscore-keypath] underscore-keypath vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-gpvc-mx6g-cchv</id>
        <link href="https://github.com/advisories/GHSA-gpvc-mx6g-cchv"/>
        <updated>2023-08-01T19:47:11.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package underscore-keypath from 0.0.11 are vulnerable to Prototype Pollution via the name argument of the <code>setProperty()</code> function. Exploiting this vulnerability is possible due to improper input sanitization which allows the usage of arguments like <code>__proto__</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26139">https://nvd.nist.gov/vuln/detail/CVE-2023-26139</a></li>
<li><a href="https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252">https://gist.github.com/lelecolacola123/cc0d1e73780127aea9482c05f2ff3252</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714">https://security.snyk.io/vuln/SNYK-JS-UNDERSCOREKEYPATH-5416714</a></li>
<li><a href="https://github.com/advisories/GHSA-gpvc-mx6g-cchv">https://github.com/advisories/GHSA-gpvc-mx6g-cchv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpvc-mx6g-cchv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T06:30:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[is-svg] Regular Expression Denial of Service (ReDoS)]]></title>
        <id>https://github.com/advisories/GHSA-7r28-3m3f-r2pr</id>
        <link href="https://github.com/advisories/GHSA-7r28-3m3f-r2pr"/>
        <updated>2023-08-01T19:25:13.000Z</updated>
        <content type="html"><![CDATA[<p>The is-svg package 2.1.0 through 4.2.1 for Node.js uses a regular expression that is vulnerable to Regular Expression Denial of Service (ReDoS). If an attacker provides a malicious string, is-svg will get stuck processing the input for a very long time.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-28092">https://nvd.nist.gov/vuln/detail/CVE-2021-28092</a></li>
<li><a href="https://github.com/sindresorhus/is-svg/commit/01f8a087fab8a69c3ac9085fbb16035907ab6a5b">https://github.com/sindresorhus/is-svg/commit/01f8a087fab8a69c3ac9085fbb16035907ab6a5b</a></li>
<li><a href="https://github.com/sindresorhus/is-svg/releases">https://github.com/sindresorhus/is-svg/releases</a></li>
<li><a href="https://github.com/sindresorhus/is-svg/releases/tag/v4.2.2">https://github.com/sindresorhus/is-svg/releases/tag/v4.2.2</a></li>
<li><a href="https://www.npmjs.com/package/is-svg">https://www.npmjs.com/package/is-svg</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0008/">https://security.netapp.com/advisory/ntap-20210513-0008/</a></li>
<li><a href="https://github.com/advisories/GHSA-7r28-3m3f-r2pr">https://github.com/advisories/GHSA-7r28-3m3f-r2pr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7r28-3m3f-r2pr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-03-19T21:25:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/win-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
</feed>