<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-09-17T00:04:03.503Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMPurify allows tampering by prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-mmhx-hmjr-r674</id>
        <link href="https://github.com/advisories/GHSA-mmhx-hmjr-r674"/>
        <updated>2024-09-16T22:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that malicious HTML using special nesting techniques can bypass the depth checking added to DOMPurify in recent releases. It was also possible to use Prototype Pollution to weaken the depth check.</p>
<p>This renders dompurify unable to avoid XSS attack.</p>
<p>Fixed by <a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a> (3.x branch) and <a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a> (2.x branch).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45801">https://nvd.nist.gov/vuln/detail/CVE-2024-45801</a></li>
<li><a href="https://github.com/advisories/GHSA-mmhx-hmjr-r674">https://github.com/advisories/GHSA-mmhx-hmjr-r674</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmhx-hmjr-r674</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-16T20:34:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dompurify] DOMPurify allows tampering by prototype pollution]]></title>
        <id>https://github.com/advisories/GHSA-mmhx-hmjr-r674</id>
        <link href="https://github.com/advisories/GHSA-mmhx-hmjr-r674"/>
        <updated>2024-09-16T22:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that malicious HTML using special nesting techniques can bypass the depth checking added to DOMPurify in recent releases. It was also possible to use Prototype Pollution to weaken the depth check.</p>
<p>This renders dompurify unable to avoid XSS attack.</p>
<p>Fixed by <a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a> (3.x branch) and <a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a> (2.x branch).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674">https://github.com/cure53/DOMPurify/security/advisories/GHSA-mmhx-hmjr-r674</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21">https://github.com/cure53/DOMPurify/commit/1e520262bf4c66b5efda49e2316d6d1246ca7b21</a></li>
<li><a href="https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc">https://github.com/cure53/DOMPurify/commit/26e1d69ca7f769f5c558619d644d90dd8bf26ebc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45801">https://nvd.nist.gov/vuln/detail/CVE-2024-45801</a></li>
<li><a href="https://github.com/advisories/GHSA-mmhx-hmjr-r674">https://github.com/advisories/GHSA-mmhx-hmjr-r674</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmhx-hmjr-r674</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-16T20:34:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App fails to sufficiently configure Electron Fuses]]></title>
        <id>https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</id>
        <link href="https://github.com/advisories/GHSA-xgq9-7gw6-jr5r"/>
        <updated>2024-09-16T20:21:00.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to sufficiently configure Electron Fuses which allows an attacker to gather Chromium cookies or abuse other misconfigurations via remote/local access.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45835">https://nvd.nist.gov/vuln/detail/CVE-2024-45835</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-xgq9-7gw6-jr5r">https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xgq9-7gw6-jr5r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T15:32:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App fails to safeguard screen capture functionality]]></title>
        <id>https://github.com/advisories/GHSA-5777-rcjj-9p22</id>
        <link href="https://github.com/advisories/GHSA-5777-rcjj-9p22"/>
        <updated>2024-09-16T20:20:50.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to safeguard screen capture functionality which allows an attacker to silently capture high-quality screenshots via JavaScript APIs.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39772">https://nvd.nist.gov/vuln/detail/CVE-2024-39772</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://github.com/advisories/GHSA-5777-rcjj-9p22">https://github.com/advisories/GHSA-5777-rcjj-9p22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5777-rcjj-9p22</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-09-16T15:32:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mattermost-desktop] Mattermost Desktop App Uncontrolled Search Path Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</id>
        <link href="https://github.com/advisories/GHSA-wj4j-qc2m-fgh7"/>
        <updated>2024-09-16T20:14:54.000Z</updated>
        <content type="html"><![CDATA[<p>Mattermost Desktop App versions &lt;=5.8.0 fail to&nbsp;specify an absolute path when searching the cmd.exe file, which allows a local attacker who is able to put an cmd.exe file in the Downloads folder of a user's machine to cause remote code execution on that machine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39613">https://nvd.nist.gov/vuln/detail/CVE-2024-39613</a></li>
<li><a href="https://mattermost.com/security-updates">https://mattermost.com/security-updates</a></li>
<li><a href="https://docs.mattermost.com/about/desktop-app-changelog.html">https://docs.mattermost.com/about/desktop-app-changelog.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wj4j-qc2m-fgh7">https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj4j-qc2m-fgh7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-16T14:37:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9jmp-j63g-8x6m</id>
        <link href="https://github.com/advisories/GHSA-9jmp-j63g-8x6m"/>
        <updated>2024-09-13T19:34:17.000Z</updated>
        <content type="html"><![CDATA[<p>An information disclosure vulnerability exists in the lunary-ai/lunary, specifically in the <code>runs/{run_id}/related</code> endpoint. This endpoint does not verify that the user has the necessary access rights to the run(s) they are accessing. As a result, it returns not only the specified run but also all runs that have the <code>run_id</code> listed as their parent run. This issue affects the main branch, commit a761d833. The vulnerability allows unauthorized users to obtain information about non-public runs and their related runs, given the <code>run_id</code> of a public or non-public run.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6867">https://nvd.nist.gov/vuln/detail/CVE-2024-6867</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/35afd4439464571eb016318cd7b6f85a162225ca">https://github.com/lunary-ai/lunary/commit/35afd4439464571eb016318cd7b6f85a162225ca</a></li>
<li><a href="https://huntr.com/bounties/460df515-164c-4435-954b-0233a181545f">https://huntr.com/bounties/460df515-164c-4435-954b-0233a181545f</a></li>
<li><a href="https://github.com/advisories/GHSA-9jmp-j63g-8x6m">https://github.com/advisories/GHSA-9jmp-j63g-8x6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jmp-j63g-8x6m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary Cross-Site Request Forgery (CSRF) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</id>
        <link href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9"/>
        <updated>2024-09-13T19:34:11.000Z</updated>
        <content type="html"><![CDATA[<p>A Cross-Site Request Forgery (CSRF) vulnerability exists in lunary-ai/lunary version 1.2.34 due to overly permissive CORS settings. This vulnerability allows an attacker to sign up for and create projects or use the instance as if they were a user with local access. The main attack vector is for instances hosted locally on personal machines, which are not publicly accessible. The CORS settings in the backend permit all origins, exposing unauthenticated endpoints to CSRF attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6862">https://nvd.nist.gov/vuln/detail/CVE-2024-6862</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54">https://github.com/lunary-ai/lunary/commit/3451fcd7b9d95e9091d62c515752f39f2faa6e54</a></li>
<li><a href="https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f">https://huntr.com/bounties/0b1d851e-3455-480c-ad5a-23565894976f</a></li>
<li><a href="https://github.com/advisories/GHSA-v6x6-4v4x-2fx9">https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6x6-4v4x-2fx9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary Improper Authentication vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-w73r-8mm4-cfvf</id>
        <link href="https://github.com/advisories/GHSA-w73r-8mm4-cfvf"/>
        <updated>2024-09-13T19:29:16.000Z</updated>
        <content type="html"><![CDATA[<p>A broken access control vulnerability exists prior to commit 1f043d8798ad87346dfe378eea723bff78ad7433 of lunary-ai/lunary. The <code>saml.ts</code> file allows a user from one organization to update the Identity Provider (IDP) settings and view the SSO metadata of another organization. This vulnerability can lead to unauthorized access and potential account takeover if the email of a user in the target organization is known.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6582">https://nvd.nist.gov/vuln/detail/CVE-2024-6582</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433">https://github.com/lunary-ai/lunary/commit/1f043d8798ad87346dfe378eea723bff78ad7433</a></li>
<li><a href="https://huntr.com/bounties/251d138c-3911-4a81-96e5-5a4ab59a0b59">https://huntr.com/bounties/251d138c-3911-4a81-96e5-5a4ab59a0b59</a></li>
<li><a href="https://github.com/advisories/GHSA-w73r-8mm4-cfvf">https://github.com/advisories/GHSA-w73r-8mm4-cfvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w73r-8mm4-cfvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] Lunary improper access control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</id>
        <link href="https://github.com/advisories/GHSA-6p2q-8qfq-wq7x"/>
        <updated>2024-09-13T19:29:13.000Z</updated>
        <content type="html"><![CDATA[<p>An improper access control vulnerability exists in lunary-ai/lunary prior to commit 844e8855c7a713dc7371766dba4125de4007b1cf on the main branch. The vulnerability allows an attacker to use the auth tokens issued by the 'invite user' functionality to obtain valid JWT tokens. These tokens can be used to compromise target users upon registration for their own arbitrary organizations. The attacker can invite a target email, obtain a one-time use token, retract the invite, and later use the token to reset the password of the target user, leading to full account takeover.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6087">https://nvd.nist.gov/vuln/detail/CVE-2024-6087</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf">https://github.com/lunary-ai/lunary/commit/844e8855c7a713dc7371766dba4125de4007b1cf</a></li>
<li><a href="https://huntr.com/bounties/bd9f2301-11c7-4cbd-8d77-3e9225bd67e8">https://huntr.com/bounties/bd9f2301-11c7-4cbd-8d77-3e9225bd67e8</a></li>
<li><a href="https://github.com/advisories/GHSA-6p2q-8qfq-wq7x">https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p2q-8qfq-wq7x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-13T18:31:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[whatsapp-api-js] whatsapp-api-js fails to validate message's signature]]></title>
        <id>https://github.com/advisories/GHSA-mwhf-vhr5-7j23</id>
        <link href="https://github.com/advisories/GHSA-mwhf-vhr5-7j23"/>
        <updated>2024-09-12T21:39:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Incorrect Access Control, anyone using the post or verifyRequestSignature methods to handle messages is impacted.</p>
<h3 id="patches">Patches</h3>
<p>Patched in version 4.0.3.</p>
<h3 id="workarounds">Workarounds</h3>
<p>It's possible to check the payload validation using the WhatsAppAPI.verifyRequestSignature and expect false when the signature is valid.</p>
<pre><code class="language-ts">function doPost(payload, header_signature) {
    if (whatsapp.verifyRequestSignature(payload.toString(), header_signature) {
        throw 403;
    }
    
    // Now the payload is correctly verified
    whatsapp.post(payload);
}
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/Secreto31126/whatsapp-api-js/pull/371">https://github.com/Secreto31126/whatsapp-api-js/pull/371</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/security/advisories/GHSA-mwhf-vhr5-7j23">https://github.com/Secreto31126/whatsapp-api-js/security/advisories/GHSA-mwhf-vhr5-7j23</a></li>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/pull/371">https://github.com/Secreto31126/whatsapp-api-js/pull/371</a></li>
<li><a href="https://github.com/Secreto31126/whatsapp-api-js/commit/56620c65126427496a94d176082fbd8393a95b6d">https://github.com/Secreto31126/whatsapp-api-js/commit/56620c65126427496a94d176082fbd8393a95b6d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45607">https://nvd.nist.gov/vuln/detail/CVE-2024-45607</a></li>
<li><a href="https://github.com/advisories/GHSA-mwhf-vhr5-7j23">https://github.com/advisories/GHSA-mwhf-vhr5-7j23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mwhf-vhr5-7j23</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-12T21:29:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-iot-device-sdk-v2] Improper certificate management in AWS IoT Device SDK v2]]></title>
        <id>https://github.com/advisories/GHSA-94jq-q5v2-76wj</id>
        <link href="https://github.com/advisories/GHSA-94jq-q5v2-76wj"/>
        <updated>2024-09-12T21:14:09.000Z</updated>
        <content type="html"><![CDATA[<p>Connections initialized by the AWS IoT Device SDK v2 for Java (versions prior to 1.3.3), Python (versions prior to 1.5.18), C++ (versions prior to 1.12.7) and Node.js (versions prior to 1.5.1) did not verify server certificate hostname during TLS handshake when overriding Certificate Authorities (CA) in their trust stores on Windows. This issue has been addressed in aws-c-io submodule versions 0.9.13 onward. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.3.3 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.5.18 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Microsoft Windows. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Microsoft Windows.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40828">https://nvd.nist.gov/vuln/detail/CVE-2021-40828</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2/commit/67950ad2a02f2f9355c310b69dc9226b017f32f2">https://github.com/aws/aws-iot-device-sdk-java-v2/commit/67950ad2a02f2f9355c310b69dc9226b017f32f2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2/commit/4be41394f1aee979e6f4b012fcb01eecabd0c08d">https://github.com/aws/aws-iot-device-sdk-js-v2/commit/4be41394f1aee979e6f4b012fcb01eecabd0c08d</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fd4c0ba04b35eab9e20c635af5548fcc5a92d8be">https://github.com/aws/aws-iot-device-sdk-python-v2/commit/fd4c0ba04b35eab9e20c635af5548fcc5a92d8be</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-cpp-v2">https://github.com/aws/aws-iot-device-sdk-cpp-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2">https://github.com/aws/aws-iot-device-sdk-java-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2">https://github.com/aws/aws-iot-device-sdk-js-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2">https://github.com/aws/aws-iot-device-sdk-python-v2</a></li>
<li><a href="https://github.com/advisories/GHSA-94jq-q5v2-76wj">https://github.com/advisories/GHSA-94jq-q5v2-76wj</a></li>
<li><a href="https://github.com/awslabs/aws-c-io">https://github.com/awslabs/aws-c-io</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-861.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-861.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-94jq-q5v2-76wj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-24T21:02:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-iot-device-sdk-v2] Improper certificate management in AWS IoT Device SDK v2]]></title>
        <id>https://github.com/advisories/GHSA-c4rh-4376-gff4</id>
        <link href="https://github.com/advisories/GHSA-c4rh-4376-gff4"/>
        <updated>2024-09-12T20:53:26.000Z</updated>
        <content type="html"><![CDATA[<p>The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on Unix systems. TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system’s default trust-store. Attackers with access to a host’s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The 'aws_tls_ctx_options_override_default_trust_store_*' function within the aws-c-io submodule has been updated to override the default trust store. This corrects this issue. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.6.1 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on Linux/Unix. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on Linux/Unix. Amazon Web Services AWS-C-IO 0.10.4 on Linux/Unix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40830">https://nvd.nist.gov/vuln/detail/CVE-2021-40830</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2/commit/67950ad2a02f2f9355c310b69dc9226b017f32f2">https://github.com/aws/aws-iot-device-sdk-java-v2/commit/67950ad2a02f2f9355c310b69dc9226b017f32f2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2/commit/53a36e3ac203291494120604d416b6de59177cac">https://github.com/aws/aws-iot-device-sdk-js-v2/commit/53a36e3ac203291494120604d416b6de59177cac</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a">https://github.com/aws/aws-iot-device-sdk-python-v2/commit/0450ce68add7e3d05c6d781ecdac953c299c053a</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-cpp-v2">https://github.com/aws/aws-iot-device-sdk-cpp-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2">https://github.com/aws/aws-iot-device-sdk-java-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2">https://github.com/aws/aws-iot-device-sdk-js-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2">https://github.com/aws/aws-iot-device-sdk-python-v2</a></li>
<li><a href="https://github.com/advisories/GHSA-c4rh-4376-gff4">https://github.com/advisories/GHSA-c4rh-4376-gff4</a></li>
<li><a href="https://github.com/awslabs/aws-c-io">https://github.com/awslabs/aws-c-io</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-863.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-863.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c4rh-4376-gff4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-24T21:12:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-iot-device-sdk-v2] Improper certificate management in AWS IoT Device SDK v2]]></title>
        <id>https://github.com/advisories/GHSA-j3f7-7rmc-6wqj</id>
        <link href="https://github.com/advisories/GHSA-j3f7-7rmc-6wqj"/>
        <updated>2024-09-12T20:52:09.000Z</updated>
        <content type="html"><![CDATA[<p>The AWS IoT Device SDK v2 for Java, Python, C++ and Node.js appends a user supplied Certificate Authority (CA) to the root CAs instead of overriding it on macOS systems. Additionally, SNI validation is also not enabled when the CA has been "overridden". TLS handshakes will thus succeed if the peer can be verified either from the user-supplied CA or the system’s default trust-store. Attackers with access to a host’s trust stores or are able to compromise a certificate authority already in the host's trust store (note: the attacker must also be able to spoof DNS in this case) may be able to use this issue to bypass CA pinning. An attacker could then spoof the MQTT broker, and either drop traffic and/or respond with the attacker's data, but they would not be able to forward this data on to the MQTT broker because the attacker would still need the user's private keys to authenticate against the MQTT broker. The <code>aws_tls_ctx_options_override_default_trust_store_*</code> function within the aws-c-io submodule has been updated to address this behavior. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.5.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.7.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.14.0 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.6.0 on macOS. Amazon Web Services AWS-C-IO 0.10.7 on macOS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40831">https://nvd.nist.gov/vuln/detail/CVE-2021-40831</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2/commit/46375e9b1bfb34109b9ff3b1eff9c770f9daa186">https://github.com/aws/aws-iot-device-sdk-java-v2/commit/46375e9b1bfb34109b9ff3b1eff9c770f9daa186</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2/commit/22f1989f5bdb0bdd9c912a5a2d255ee6c0854f68">https://github.com/aws/aws-iot-device-sdk-js-v2/commit/22f1989f5bdb0bdd9c912a5a2d255ee6c0854f68</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d">https://github.com/aws/aws-iot-device-sdk-python-v2/commit/5aef82573202309063eb540b72cee0e565f85a2d</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-cpp-v2">https://github.com/aws/aws-iot-device-sdk-cpp-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2">https://github.com/aws/aws-iot-device-sdk-java-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2">https://github.com/aws/aws-iot-device-sdk-js-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2">https://github.com/aws/aws-iot-device-sdk-python-v2</a></li>
<li><a href="https://github.com/advisories/GHSA-j3f7-7rmc-6wqj">https://github.com/advisories/GHSA-j3f7-7rmc-6wqj</a></li>
<li><a href="https://github.com/awslabs/aws-c-io">https://github.com/awslabs/aws-c-io</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-864.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-864.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3f7-7rmc-6wqj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-24T20:35:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[aws-iot-device-sdk-v2] Improper certificate management in AWS IoT Device SDK v2]]></title>
        <id>https://github.com/advisories/GHSA-743r-5g92-5vgf</id>
        <link href="https://github.com/advisories/GHSA-743r-5g92-5vgf"/>
        <updated>2024-09-12T20:48:36.000Z</updated>
        <content type="html"><![CDATA[<p>Connections initialized by the AWS IoT Device SDK v2 for Java (versions prior to 1.4.2), Python (versions prior to 1.6.1), C++ (versions prior to 1.12.7) and Node.js (versions prior to 1.5.3) did not verify server certificate hostname during TLS handshake when overriding Certificate Authorities (CA) in their trust stores on MacOS. This issue has been addressed in aws-c-io submodule versions 0.10.5 onward. This issue affects: Amazon Web Services AWS IoT Device SDK v2 for Java versions prior to 1.4.2 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Python versions prior to 1.6.1 on macOS. Amazon Web Services AWS IoT Device SDK v2 for C++ versions prior to 1.12.7 on macOS. Amazon Web Services AWS IoT Device SDK v2 for Node.js versions prior to 1.5.3 on macOS. Amazon Web Services AWS-C-IO 0.10.4 on macOS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40829">https://nvd.nist.gov/vuln/detail/CVE-2021-40829</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2/commits/v1.4.2">https://github.com/aws/aws-iot-device-sdk-java-v2/commits/v1.4.2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-cpp-v2">https://github.com/aws/aws-iot-device-sdk-cpp-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-java-v2">https://github.com/aws/aws-iot-device-sdk-java-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-js-v2">https://github.com/aws/aws-iot-device-sdk-js-v2</a></li>
<li><a href="https://github.com/aws/aws-iot-device-sdk-python-v2">https://github.com/aws/aws-iot-device-sdk-python-v2</a></li>
<li><a href="https://github.com/advisories/GHSA-743r-5g92-5vgf">https://github.com/advisories/GHSA-743r-5g92-5vgf</a></li>
<li><a href="https://github.com/awslabs/aws-c-io">https://github.com/awslabs/aws-c-io</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-862.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/awsiotsdk/PYSEC-2021-862.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-743r-5g92-5vgf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-11-24T21:11:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-12T17:09:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>.</p>
<p>These versions add backtrack protection when a custom regex pattern is not provided:</p>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10">0.1.10</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0">1.9.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0">3.3.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">6.3.0</a></li>
</ul>
<p>They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0">7.1.0</a> can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0">8.0.0</a> removes the features that can cause a ReDoS.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485">https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef">https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894">https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-12T17:09:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>.</p>
<p>These versions add backtrack protection when a custom regex pattern is not provided:</p>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10">0.1.10</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0">1.9.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0">3.3.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">6.3.0</a></li>
</ul>
<p>They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0">7.1.0</a> can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0">8.0.0</a> removes the features that can cause a ReDoS.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485">https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef">https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894">https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dset] dset Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-f6v4-cf5j-vf3w</id>
        <link href="https://github.com/advisories/GHSA-f6v4-cf5j-vf3w"/>
        <updated>2024-09-11T23:11:36.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package dset before 3.1.4 are vulnerable to Prototype Pollution via the dset function due improper user input sanitization. This vulnerability allows the attacker to inject malicious object property using the built-in Object property <strong>proto</strong>, which is recursively assigned to all the objects in the program.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-21529">https://nvd.nist.gov/vuln/detail/CVE-2024-21529</a></li>
<li><a href="https://github.com/lukeed/dset/commit/16d6154e085bef01e99f01330e5a421a7f098afa">https://github.com/lukeed/dset/commit/16d6154e085bef01e99f01330e5a421a7f098afa</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-DSET-7116691">https://security.snyk.io/vuln/SNYK-JS-DSET-7116691</a></li>
<li><a href="https://github.com/advisories/GHSA-f6v4-cf5j-vf3w">https://github.com/advisories/GHSA-f6v4-cf5j-vf3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f6v4-cf5j-vf3w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-11T06:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lunary] lunary-ai/lunary Access Control Vulnerability in Prompt Variation Management]]></title>
        <id>https://github.com/advisories/GHSA-3mwc-2cj7-gx8c</id>
        <link href="https://github.com/advisories/GHSA-3mwc-2cj7-gx8c"/>
        <updated>2024-09-11T18:23:16.000Z</updated>
        <content type="html"><![CDATA[<p>In lunary-ai/lunary version 1.2.13, an insufficient granularity of access control vulnerability allows users to create, update, get, and delete prompt variations for datasets not owned by their organization. This issue arises due to the application not properly validating the ownership of dataset prompts and their variations against the organization or project of the requesting user. As a result, unauthorized modifications to dataset prompts can occur, leading to altered or removed dataset prompts without proper authorization. This vulnerability impacts the integrity and consistency of dataset information, potentially affecting the results of experiments.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-5389">https://nvd.nist.gov/vuln/detail/CVE-2024-5389</a></li>
<li><a href="https://huntr.com/bounties/3ca5309f-5615-4d5b-8043-968af220d7a2">https://huntr.com/bounties/3ca5309f-5615-4d5b-8043-968af220d7a2</a></li>
<li><a href="https://github.com/lunary-ai/lunary/commit/35dd4af0001a54ccb14276a1546eb977f82c0c5e">https://github.com/lunary-ai/lunary/commit/35dd4af0001a54ccb14276a1546eb977f82c0c5e</a></li>
<li><a href="https://github.com/advisories/GHSA-3mwc-2cj7-gx8c">https://github.com/advisories/GHSA-3mwc-2cj7-gx8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3mwc-2cj7-gx8c</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-10T00:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-12T17:09:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>.</p>
<p>These versions add backtrack protection when a custom regex pattern is not provided:</p>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10">0.1.10</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0">1.9.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0">3.3.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">6.3.0</a></li>
</ul>
<p>They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0">7.1.0</a> can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0">8.0.0</a> removes the features that can cause a ReDoS.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485">https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef">https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894">https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[path-to-regexp] path-to-regexp outputs backtracking regular expressions]]></title>
        <id>https://github.com/advisories/GHSA-9wv6-86v2-598j</id>
        <link href="https://github.com/advisories/GHSA-9wv6-86v2-598j"/>
        <updated>2024-09-12T17:09:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, separated by something that is not a period (<code>.</code>). For example, <code>/:a-:b</code>.</p>
<h3 id="patches">Patches</h3>
<p>For users of 0.1, upgrade to <code>0.1.10</code>. All other users should upgrade to <code>8.0.0</code>.</p>
<p>These versions add backtrack protection when a custom regex pattern is not provided:</p>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v0.1.10">0.1.10</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v1.9.0">1.9.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v3.3.0">3.3.0</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">6.3.0</a></li>
</ul>
<p>They do not protect against vulnerable user supplied capture groups. Protecting against explicit user patterns is out of scope for old versions and not considered a vulnerability.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v7.1.0">7.1.0</a> can enable <code>strict: true</code> and get an error when the regular expression might be bad.</p>
<p>Version <a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v8.0.0">8.0.0</a> removes the features that can cause a ReDoS.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All versions can be patched by providing a custom regular expression for parameters after the first in a single segment. As long as the custom regular expression does not match the text before the parameter, you will be safe. For example, change <code>/:a-:b</code> to <code>/:a-:b([^-/]+)</code>.</p>
<p>If paths cannot be rewritten and versions cannot be upgraded, another alternative is to limit the URL length. For example, halving the attack string improves performance by 4x faster.</p>
<h3 id="details">Details</h3>
<p>Using <code>/:a-:b</code> will produce the regular expression <code>/^\/([^\/]+?)-([^\/]+?)\/?$/</code>. This can be exploited by a path such as <code>/a${'-a'.repeat(8_000)}/a</code>. <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a> has a good example of why this occurs, but the TL;DR is the <code>/a</code> at the end ensures this route would never match but due to naive backtracking it will still attempt every combination of the <code>:a-:b</code> on the repeated 8,000 <code>-a</code>.</p>
<p>Because JavaScript is single threaded and regex matching runs on the main thread, poor performance will block the event loop and can lead to a DoS. In local benchmarks, exploiting the unsafe regex will result in performance that is over 1000x worse than the safe regex. In a more realistic environment using Express v4 and 10 concurrent connections, this translated to average latency of ~600ms vs 1ms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">OWASP</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j">https://github.com/pillarjs/path-to-regexp/security/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f">https://github.com/pillarjs/path-to-regexp/commit/29b96b4a1de52824e1ca0f49a701183cc4ed476f</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6">https://github.com/pillarjs/path-to-regexp/commit/60f2121e9b66b7b622cc01080df0aabda9eedee6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45296">https://nvd.nist.gov/vuln/detail/CVE-2024-45296</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485">https://github.com/pillarjs/path-to-regexp/commit/925ac8e3c5780b02f58cbd4e52f95da8ad2ac485</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef">https://github.com/pillarjs/path-to-regexp/commit/d31670ae8f6e69cbfd56e835742195b7d10942ef</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894">https://github.com/pillarjs/path-to-regexp/commit/f1253b47b347dcb909e3e80b0eb2649109e59894</a></li>
<li><a href="https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0">https://github.com/pillarjs/path-to-regexp/releases/tag/v6.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9wv6-86v2-598j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-09T20:19:15.000Z</published>
    </entry>
</feed>