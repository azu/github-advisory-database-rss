<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-08-27T19:01:09.671Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@apollo/gateway] Apollo Query Planner and Apollo Gateway may infinitely loop on sufficiently complex queries]]></title>
        <id>https://github.com/advisories/GHSA-fmj9-77q8-g6c4</id>
        <link href="https://github.com/advisories/GHSA-fmj9-77q8-g6c4"/>
        <updated>2024-08-27T18:14:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Instances of @apollo/query-planner &gt;=2.0.0 and &lt;2.8.5 are impacted by a denial-of-service vulnerability. @apollo/gateway versions &gt;=2.0.0 and &lt; 2.8.5 and Apollo Router &lt;1.52.1 are also impacted through their use of @apollo/query-planner. </p>
<p>If @apollo/query-planner is asked to plan a sufficiently complex query, it may loop infinitely and never complete. This results in unbounded memory consumption and either a crash or out-of-memory (OOM) termination.</p>
<p>This issue can be triggered if you have at least one non-<code>@key</code> field that can be resolved by multiple subgraphs. To identify these shared fields, the schema for each subgraph must be reviewed. The mechanism to identify shared fields varies based on the version of Federation your subgraphs are using.</p>
<p>You can check if your subgraphs are using Federation 1 or Federation 2 by reviewing their schemas. Federation 2 subgraph schemas will contain a <code>@link</code> directive referencing the version of Federation being used while Federation 1 subgraphs will not. For example, in a Federation 2 subgraph, you will find a line like <code>@link(url: "https://specs.apollo.dev/federation/v2.0")</code>. If a similar <code>@link</code> directive is not present in your subgraph schema, it is using Federation 1. Note that a supergraph can contain a mix of Federation 1 and Federation 2 subgraphs.</p>
<p><strong>To review Federation 1 subgraphs for impact:</strong></p>
<p>In Federation 1 subgraphs, fields are implicitly shareable across subgraphs. To review for impact, you will need to review for cases where multiple subgraphs can resolve the same field. For example: </p>
<pre><code class="language-graphql"># Subgraph 1
type Query {
  field: Int
}

# Subgraph 2
type Query {
  field: Int
}
</code></pre>
<p><strong>To review Federation 2 subgraphs for impact:</strong></p>
<p>In Federation 2 subgraphs, fields must be explicitly defined as shareable across subgraphs. This is done via the <code>@shareable</code> directive. For example:</p>
<pre><code class="language-graphql"># Subgraph 1
@link(url: "https://specs.apollo.dev/federation/v2.0")
type Query {
  field: Int @shareable
}

# Subgraph 2
@link(url: "https://specs.apollo.dev/federation/v2.0")
type Query {
  field: Int @shareable
}
</code></pre>
<h3 id="impact-detail">Impact Detail</h3>
<p>This issue results from the Apollo query planner attempting to use a <code>Number</code> exceeding Javascript’s <code>Number.MAX_VALUE</code> in some cases. In Javascript, <code>Number.MAX_VALUE</code> is (2^1024 - 2^971).</p>
<p>When the query planner receives an inbound graphql request, it breaks the query into pieces and for each piece, generates a list of potential execution steps to solve the piece. These candidates represent the steps that the query planner will take to satisfy the pieces of the larger query. As part of normal operations, the query planner requires and calculates the number of possible query plans for the total query. That is, it needs the product of the number of query plan candidates for each piece of the query. Under normal circumstances, after generating all query plan candidates and calculating the number of all permutations, the query planner moves on to stack rank candidates and prune less-than-optimal options. </p>
<p>In particularly complex queries, especially those where fields can be solved through multiple subgraphs, this can cause the number of all query plan permutations to balloon. In worst-case scenarios, this can end up being a number larger than <code>Number.MAX_VALUE</code>. In Javascript, if <code>Number.MAX_VALUE</code> is exceeded, Javascript represents the value as “infinity”. If the count of candidates is evaluated as infinity, the component of the query planner responsible for pruning less-than-optimal query plans does not actually prune candidates, causing the query planner to evaluate many orders of magnitude more query plan candidates than necessary.</p>
<p>A given graph’s exposure to this issue varies based on its complexity. Consider the following Federation 2 subgraphs: </p>
<pre><code class="language-graphql"># Subgraph 1
type Query {
  field: Int @shareable
}

# Subgraph 2
type Query {
  field: Int @shareable
}
</code></pre>
<p>The query planner can solve requests for <code>Query.field</code> in one of two ways - either by querying subgraph 1 or subgraph 2. </p>
<p>The following query with 1024 aliased fields would trigger this issue because 2^1024 &gt; <code>Number.MAX_VALUE</code>:  </p>
<pre><code class="language-graphql">query {
  field_1: field
  field_2: field
  # ...
  field_1023: field
  field_1024: field
}
</code></pre>
<p>However, in a graph that provided 5 options to solve a given field, the bug could be encountered in a query that aliased the field approximately 440 times.</p>
<h3 id="patches">Patches</h3>
<p>@apollo/query-planner 2.8.5
@apollo/gateway 2.8.5
Apollo Router 1.52.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue can be avoided by ensuring there are no fields resolvable from multiple subgraphs. If all subgraphs are using Federation 2, you can confirm that you are not impacted by ensuring that none of your subgraph schemas use the <code>@shareable</code> directive. If you are using Federation 1 subgraphs, you will need to validate that there are no fields resolvable by multiple subgraphs. </p>
<p>Note that a supergraph can contain a mix of Federation 1 and Federation 2 subgraphs. </p>
<p>If you do have fields resolvable by multiple subgraphs, changing this behavior in response to this issue may be risky to the operation of your supergraph. We recommend that you update to a patched version of either Apollo Router or Apollo Gateway.</p>
<p>Apollo customers with an enterprise entitlement using the Apollo Router can also mitigate much of the risk from this issue by implementing <a href="https://www.apollographql.com/docs/router/configuration/persisted-queries">Apollo’s Persisted Queries (PQ) feature</a>. With PQ enabled, the Apollo Router will only execute safelisted queries. While customers would need to ensure that queries that induce this issue are not added to the safelist, PQs would mitigate the risk of clients submitting ad hoc queries that exploit this issue.</p>
<h3 id="references">References</h3>
<p><a href="https://www.apollographql.com/docs/federation/query-plans/">Additional information on Query Plans</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4">https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4</a></li>
<li><a href="https://github.com/apollographql/router/commit/e309c9bb5a48c1304ff69c88b7eabdd08c26bf45">https://github.com/apollographql/router/commit/e309c9bb5a48c1304ff69c88b7eabdd08c26bf45</a></li>
<li><a href="https://www.apollographql.com/docs/federation/query-plans">https://www.apollographql.com/docs/federation/query-plans</a></li>
<li><a href="https://www.apollographql.com/docs/router/configuration/persisted-queries">https://www.apollographql.com/docs/router/configuration/persisted-queries</a></li>
<li><a href="https://github.com/advisories/GHSA-fmj9-77q8-g6c4">https://github.com/advisories/GHSA-fmj9-77q8-g6c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fmj9-77q8-g6c4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-27T18:14:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@apollo/query-planner] Apollo Query Planner and Apollo Gateway may infinitely loop on sufficiently complex queries]]></title>
        <id>https://github.com/advisories/GHSA-fmj9-77q8-g6c4</id>
        <link href="https://github.com/advisories/GHSA-fmj9-77q8-g6c4"/>
        <updated>2024-08-27T18:14:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Instances of @apollo/query-planner &gt;=2.0.0 and &lt;2.8.5 are impacted by a denial-of-service vulnerability. @apollo/gateway versions &gt;=2.0.0 and &lt; 2.8.5 and Apollo Router &lt;1.52.1 are also impacted through their use of @apollo/query-planner. </p>
<p>If @apollo/query-planner is asked to plan a sufficiently complex query, it may loop infinitely and never complete. This results in unbounded memory consumption and either a crash or out-of-memory (OOM) termination.</p>
<p>This issue can be triggered if you have at least one non-<code>@key</code> field that can be resolved by multiple subgraphs. To identify these shared fields, the schema for each subgraph must be reviewed. The mechanism to identify shared fields varies based on the version of Federation your subgraphs are using.</p>
<p>You can check if your subgraphs are using Federation 1 or Federation 2 by reviewing their schemas. Federation 2 subgraph schemas will contain a <code>@link</code> directive referencing the version of Federation being used while Federation 1 subgraphs will not. For example, in a Federation 2 subgraph, you will find a line like <code>@link(url: "https://specs.apollo.dev/federation/v2.0")</code>. If a similar <code>@link</code> directive is not present in your subgraph schema, it is using Federation 1. Note that a supergraph can contain a mix of Federation 1 and Federation 2 subgraphs.</p>
<p><strong>To review Federation 1 subgraphs for impact:</strong></p>
<p>In Federation 1 subgraphs, fields are implicitly shareable across subgraphs. To review for impact, you will need to review for cases where multiple subgraphs can resolve the same field. For example: </p>
<pre><code class="language-graphql"># Subgraph 1
type Query {
  field: Int
}

# Subgraph 2
type Query {
  field: Int
}
</code></pre>
<p><strong>To review Federation 2 subgraphs for impact:</strong></p>
<p>In Federation 2 subgraphs, fields must be explicitly defined as shareable across subgraphs. This is done via the <code>@shareable</code> directive. For example:</p>
<pre><code class="language-graphql"># Subgraph 1
@link(url: "https://specs.apollo.dev/federation/v2.0")
type Query {
  field: Int @shareable
}

# Subgraph 2
@link(url: "https://specs.apollo.dev/federation/v2.0")
type Query {
  field: Int @shareable
}
</code></pre>
<h3 id="impact-detail">Impact Detail</h3>
<p>This issue results from the Apollo query planner attempting to use a <code>Number</code> exceeding Javascript’s <code>Number.MAX_VALUE</code> in some cases. In Javascript, <code>Number.MAX_VALUE</code> is (2^1024 - 2^971).</p>
<p>When the query planner receives an inbound graphql request, it breaks the query into pieces and for each piece, generates a list of potential execution steps to solve the piece. These candidates represent the steps that the query planner will take to satisfy the pieces of the larger query. As part of normal operations, the query planner requires and calculates the number of possible query plans for the total query. That is, it needs the product of the number of query plan candidates for each piece of the query. Under normal circumstances, after generating all query plan candidates and calculating the number of all permutations, the query planner moves on to stack rank candidates and prune less-than-optimal options. </p>
<p>In particularly complex queries, especially those where fields can be solved through multiple subgraphs, this can cause the number of all query plan permutations to balloon. In worst-case scenarios, this can end up being a number larger than <code>Number.MAX_VALUE</code>. In Javascript, if <code>Number.MAX_VALUE</code> is exceeded, Javascript represents the value as “infinity”. If the count of candidates is evaluated as infinity, the component of the query planner responsible for pruning less-than-optimal query plans does not actually prune candidates, causing the query planner to evaluate many orders of magnitude more query plan candidates than necessary.</p>
<p>A given graph’s exposure to this issue varies based on its complexity. Consider the following Federation 2 subgraphs: </p>
<pre><code class="language-graphql"># Subgraph 1
type Query {
  field: Int @shareable
}

# Subgraph 2
type Query {
  field: Int @shareable
}
</code></pre>
<p>The query planner can solve requests for <code>Query.field</code> in one of two ways - either by querying subgraph 1 or subgraph 2. </p>
<p>The following query with 1024 aliased fields would trigger this issue because 2^1024 &gt; <code>Number.MAX_VALUE</code>:  </p>
<pre><code class="language-graphql">query {
  field_1: field
  field_2: field
  # ...
  field_1023: field
  field_1024: field
}
</code></pre>
<p>However, in a graph that provided 5 options to solve a given field, the bug could be encountered in a query that aliased the field approximately 440 times.</p>
<h3 id="patches">Patches</h3>
<p>@apollo/query-planner 2.8.5
@apollo/gateway 2.8.5
Apollo Router 1.52.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue can be avoided by ensuring there are no fields resolvable from multiple subgraphs. If all subgraphs are using Federation 2, you can confirm that you are not impacted by ensuring that none of your subgraph schemas use the <code>@shareable</code> directive. If you are using Federation 1 subgraphs, you will need to validate that there are no fields resolvable by multiple subgraphs. </p>
<p>Note that a supergraph can contain a mix of Federation 1 and Federation 2 subgraphs. </p>
<p>If you do have fields resolvable by multiple subgraphs, changing this behavior in response to this issue may be risky to the operation of your supergraph. We recommend that you update to a patched version of either Apollo Router or Apollo Gateway.</p>
<p>Apollo customers with an enterprise entitlement using the Apollo Router can also mitigate much of the risk from this issue by implementing <a href="https://www.apollographql.com/docs/router/configuration/persisted-queries">Apollo’s Persisted Queries (PQ) feature</a>. With PQ enabled, the Apollo Router will only execute safelisted queries. While customers would need to ensure that queries that induce this issue are not added to the safelist, PQs would mitigate the risk of clients submitting ad hoc queries that exploit this issue.</p>
<h3 id="references">References</h3>
<p><a href="https://www.apollographql.com/docs/federation/query-plans/">Additional information on Query Plans</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4">https://github.com/apollographql/federation/security/advisories/GHSA-fmj9-77q8-g6c4</a></li>
<li><a href="https://github.com/apollographql/router/commit/e309c9bb5a48c1304ff69c88b7eabdd08c26bf45">https://github.com/apollographql/router/commit/e309c9bb5a48c1304ff69c88b7eabdd08c26bf45</a></li>
<li><a href="https://www.apollographql.com/docs/federation/query-plans">https://www.apollographql.com/docs/federation/query-plans</a></li>
<li><a href="https://www.apollographql.com/docs/router/configuration/persisted-queries">https://www.apollographql.com/docs/router/configuration/persisted-queries</a></li>
<li><a href="https://github.com/advisories/GHSA-fmj9-77q8-g6c4">https://github.com/advisories/GHSA-fmj9-77q8-g6c4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fmj9-77q8-g6c4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-27T18:14:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[swagger-ui] Cross-site scripting in Swagger-UI]]></title>
        <id>https://github.com/advisories/GHSA-c427-hjc3-wrfw</id>
        <link href="https://github.com/advisories/GHSA-c427-hjc3-wrfw"/>
        <updated>2024-08-26T15:52:59.000Z</updated>
        <content type="html"><![CDATA[<p>A Cascading Style Sheets (CSS) injection vulnerability in Swagger UI before 3.23.11 allows attackers to use the Relative Path Overwrite (RPO) technique to perform CSS-based input field value exfiltration, such as exfiltration of a CSRF token value. In other words, this product intentionally allows the embedding of untrusted JSON data from remote servers, but it was not previously known that </p>]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c427-hjc3-wrfw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2019-10-15T19:27:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[unzip-stream] unzip-stream allows Arbitrary File Write via artifact extraction]]></title>
        <id>https://github.com/advisories/GHSA-6jrj-vc65-c983</id>
        <link href="https://github.com/advisories/GHSA-6jrj-vc65-c983"/>
        <updated>2024-08-26T15:17:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using the <code>Extract()</code> method of unzip-stream, malicious zip files were able to write to paths they shouldn't be allowed to.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in 0.3.2</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/mhr3/unzip-stream/compare/v0.3.1...v0.3.2">https://github.com/mhr3/unzip-stream/compare/v0.3.1...v0.3.2</a></li>
</ul>
<h3 id="credits">Credits</h3>
<p>Justin Taft from Google</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mhr3/unzip-stream/security/advisories/GHSA-6jrj-vc65-c983">https://github.com/mhr3/unzip-stream/security/advisories/GHSA-6jrj-vc65-c983</a></li>
<li><a href="https://github.com/mhr3/unzip-stream/commit/ab67989719abb4dcc774d02de266151905b8d45a">https://github.com/mhr3/unzip-stream/commit/ab67989719abb4dcc774d02de266151905b8d45a</a></li>
<li><a href="https://github.com/mhr3/unzip-stream/compare/v0.3.1...v0.3.2">https://github.com/mhr3/unzip-stream/compare/v0.3.1...v0.3.2</a></li>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-6jrj-vc65-c983">https://github.com/advisories/GHSA-6jrj-vc65-c983</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6jrj-vc65-c983</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-26T15:17:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-enterprise] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-community] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ag-grid-enterprise/charts] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-enterprise] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ag-grid-community] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@ag-grid-enterprise/charts] ag-grid packages vulnerable to Prototype Pollution]]></title>
        <id>https://github.com/advisories/GHSA-328p-362g-r48j</id>
        <link href="https://github.com/advisories/GHSA-328p-362g-r48j"/>
        <updated>2024-08-26T13:51:20.000Z</updated>
        <content type="html"><![CDATA[<p>ag-grid-enterprise v31.3.2 was discovered to contain a prototype pollution via the component _ModuleSupport.jsonApply. This vulnerability allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via injecting arbitrary properties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39001">https://nvd.nist.gov/vuln/detail/CVE-2024-39001</a></li>
<li><a href="https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa">https://gist.github.com/mestrtee/18e8c27f3a6376e7cf082cfe1ca766fa</a></li>
<li><a href="https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b">https://gist.github.com/mestrtee/c1590660750744f25e86ba1bf240844b</a></li>
<li><a href="https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b">https://gist.github.com/mestrtee/f8037d492dab0d77bca719e05d31c08b</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/issues/8261">https://github.com/ag-grid/ag-grid/issues/8261</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522">https://github.com/ag-grid/ag-grid/commit/78fb47f6c996f22c0b7184afb29620ab8c240522</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=32.0.1">https://www.ag-grid.com/changelog/?fixVersion=32.0.1</a></li>
<li><a href="https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c">https://github.com/ag-grid/ag-grid/commit/ff731699453f2632d4852b3a3c34b479c406068c</a></li>
<li><a href="https://www.ag-grid.com/changelog/?fixVersion=31.3.4">https://www.ag-grid.com/changelog/?fixVersion=31.3.4</a></li>
<li><a href="https://github.com/advisories/GHSA-328p-362g-r48j">https://github.com/advisories/GHSA-328p-362g-r48j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-328p-362g-r48j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T15:32:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[micromatch] Regular Expression Denial of Service (ReDoS) in micromatch]]></title>
        <id>https://github.com/advisories/GHSA-952p-6rrq-rcjv</id>
        <link href="https://github.com/advisories/GHSA-952p-6rrq-rcjv"/>
        <updated>2024-08-23T17:27:31.000Z</updated>
        <content type="html"><![CDATA[<p>The NPM package <code>micromatch</code> is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in <code>micromatch.braces()</code> in <code>index.js</code> because the pattern <code>.*</code> will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persists. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4067">https://nvd.nist.gov/vuln/detail/CVE-2024-4067</a></li>
<li><a href="https://github.com/micromatch/micromatch/issues/243">https://github.com/micromatch/micromatch/issues/243</a></li>
<li><a href="https://github.com/micromatch/micromatch/pull/247">https://github.com/micromatch/micromatch/pull/247</a></li>
<li><a href="https://devhub.checkmarx.com/cve-details/CVE-2024-4067">https://devhub.checkmarx.com/cve-details/CVE-2024-4067</a></li>
<li><a href="https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448">https://github.com/micromatch/micromatch/blob/2c56a8604b68c1099e7bc0f807ce0865a339747a/index.js#L448</a></li>
<li><a href="https://github.com/micromatch/micromatch/commit/500d5d6f42f0e8dfa1cb5464c6cb420b1b6aaaa0">https://github.com/micromatch/micromatch/commit/500d5d6f42f0e8dfa1cb5464c6cb420b1b6aaaa0</a></li>
<li><a href="https://github.com/advisories/GHSA-952p-6rrq-rcjv">https://github.com/advisories/GHSA-952p-6rrq-rcjv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-952p-6rrq-rcjv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-14T18:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hono] Hono CSRF middleware can be bypassed using crafted Content-Type header]]></title>
        <id>https://github.com/advisories/GHSA-rpfr-3m35-5vx5</id>
        <link href="https://github.com/advisories/GHSA-rpfr-3m35-5vx5"/>
        <updated>2024-08-22T16:41:09.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Hono CSRF middleware can be bypassed using crafted Content-Type header.</p>
<h3 id="details">Details</h3>
<p>MIME types are case insensitive, but <code>isRequestedByFormElementRe</code> only matches lower-case.</p>
<p><a href="https://github.com/honojs/hono/blob/b0af71fbcc6dbe44140ea76f16d68dfdb32a99a0/src/middleware/csrf/index.ts#L16-L17">https://github.com/honojs/hono/blob/b0af71fbcc6dbe44140ea76f16d68dfdb32a99a0/src/middleware/csrf/index.ts#L16-L17</a></p>
<p>As a result, attacker can bypass csrf middleware using upper-case form-like MIME type, such as "Application/x-www-form-urlencoded".</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-html">&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;CSRF Test&lt;/title&gt;
    &lt;script defer&gt;
      document.addEventListener("DOMContentLoaded", () =&gt; {
        document.getElementById("btn").addEventListener("click", async () =&gt; {
          const res = await fetch("http://victim.example.com/test", {
            method: "POST",
            credentials: "include",
            headers: {
              "Content-Type": "Application/x-www-form-urlencoded",
            },
          });
        });
      });
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;CSRF Test&lt;/h1&gt;
    &lt;button id="btn"&gt;Click me!&lt;/button&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>Bypass csrf protection implemented with hono csrf middleware.</p>
<h3 id="discussion">Discussion</h3>
<p>I'm not sure that omitting csrf checks for Simple POST request is a good idea.
CSRF prevention and CORS are different concepts even though CORS can prevent CSRF in some cases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/honojs/hono/security/advisories/GHSA-rpfr-3m35-5vx5">https://github.com/honojs/hono/security/advisories/GHSA-rpfr-3m35-5vx5</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43787">https://nvd.nist.gov/vuln/detail/CVE-2024-43787</a></li>
<li><a href="https://github.com/honojs/hono/commit/41ce840379516410dee60c783142e05bb5a22449">https://github.com/honojs/hono/commit/41ce840379516410dee60c783142e05bb5a22449</a></li>
<li><a href="https://github.com/honojs/hono/blob/b0af71fbcc6dbe44140ea76f16d68dfdb32a99a0/src/middleware/csrf/index.ts#L16-L17">https://github.com/honojs/hono/blob/b0af71fbcc6dbe44140ea76f16d68dfdb32a99a0/src/middleware/csrf/index.ts#L16-L17</a></li>
<li><a href="https://github.com/advisories/GHSA-rpfr-3m35-5vx5">https://github.com/advisories/GHSA-rpfr-3m35-5vx5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rpfr-3m35-5vx5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-22T16:41:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[squirrelly] squirrelly Code Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-w5pw-gmcw-rfc8</id>
        <link href="https://github.com/advisories/GHSA-w5pw-gmcw-rfc8"/>
        <updated>2024-08-21T20:09:16.000Z</updated>
        <content type="html"><![CDATA[<p>squirrellyjs squirrelly v9.0.0 was discovered to contain a code injection vulnerability via the component <code>options.varName</code>. The issue was fixed in version 9.1.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40453">https://nvd.nist.gov/vuln/detail/CVE-2024-40453</a></li>
<li><a href="https://github.com/squirrellyjs/squirrelly/pull/262">https://github.com/squirrellyjs/squirrelly/pull/262</a></li>
<li><a href="https://samuzora.com/posts/cve-2024-40453">https://samuzora.com/posts/cve-2024-40453</a></li>
<li><a href="https://github.com/squirrellyjs/squirrelly/commit/426f930e5ca1501404cd887071e734ec5feb0bcf">https://github.com/squirrellyjs/squirrelly/commit/426f930e5ca1501404cd887071e734ec5feb0bcf</a></li>
<li><a href="https://github.com/advisories/GHSA-w5pw-gmcw-rfc8">https://github.com/advisories/GHSA-w5pw-gmcw-rfc8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w5pw-gmcw-rfc8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-08-21T18:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor4] CKEditor4 low-risk cross-site scripting (XSS) vulnerability linked to potential domain takeover]]></title>
        <id>https://github.com/advisories/GHSA-6v96-m24v-f58j</id>
        <link href="https://github.com/advisories/GHSA-6v96-m24v-f58j"/>
        <updated>2024-08-21T18:59:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="affected-packages">Affected Packages</h3>
<p>The issue impacts only editor instances with enabled <a href="https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_config.html#cfg-versionCheck">version notifications</a>.</p>
<p>Please note that this feature is disabled by default in all CKEditor 4 LTS versions. Therefore, if you use CKEditor 4 LTS, it is highly unlikely that you are affected by this vulnerability. If you are unsure, please <a href="mailto:security@cksource.com">contact us</a>.</p>
<h3 id="impact">Impact</h3>
<p>A theoretical vulnerability has been identified in CKEditor 4.22 (and above). In a highly unlikely scenario where an attacker gains control over the <a href="https://cke4.ckeditor.com">https://cke4.ckeditor.com</a> domain, they could potentially execute an attack on CKEditor 4 instances. Although the vulnerability is purely hypothetical, we have addressed it in CKEditor 4.25.0-lts to ensure compliance with security best practices.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been recognized and patched. The fix is available in version 4.25.0-lts.</p>
<h3 id="for-more-information">For More Information</h3>
<p>If you have any questions or comments about this advisory, please email us at <a href="mailto:security@cksource.com">security@cksource.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor4/security/advisories/GHSA-6v96-m24v-f58j">https://github.com/ckeditor/ckeditor4/security/advisories/GHSA-6v96-m24v-f58j</a></li>
<li><a href="https://github.com/ckeditor/ckeditor4/commit/b5069c9cb769ea22eae1cbd7200f22b1cf2e3a7f">https://github.com/ckeditor/ckeditor4/commit/b5069c9cb769ea22eae1cbd7200f22b1cf2e3a7f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43411">https://nvd.nist.gov/vuln/detail/CVE-2024-43411</a></li>
<li><a href="https://github.com/advisories/GHSA-6v96-m24v-f58j">https://github.com/advisories/GHSA-6v96-m24v-f58j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6v96-m24v-f58j</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-08-21T18:31:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ckeditor4] Code Snippet GeSHi plugin has reflected cross-site scripting (XSS) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7r32-vfj5-c2jv</id>
        <link href="https://github.com/advisories/GHSA-7r32-vfj5-c2jv"/>
        <updated>2024-08-21T18:30:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="affected-packages">Affected packages</h3>
<p>The vulnerability has been discovered in <a href="https://ckeditor.com/cke4/addon/codesnippetgeshi">Code Snippet GeSHi</a> plugin. All integrators that use <a href="https://github.com/GeSHi/geshi-1.0">GeSHi syntax highlighter</a> on the backend side can be affected.</p>
<h3 id="impact">Impact</h3>
<p>A potential vulnerability has been discovered in CKEditor 4 <a href="https://ckeditor.com/cke4/addon/codesnippetgeshi">Code Snippet GeSHi</a> plugin. The vulnerability allowed a reflected XSS attack by exploiting a flaw in the <a href="https://github.com/GeSHi/geshi-1.0">GeSHi syntax highlighter library</a> hosted by the victim.</p>
<p>The GeSHi library was included as a vendor dependency in CKEditor 4 source files. In a specific scenario, an attacker could craft a malicious script that could be executed by sending a request to the GeSHi library hosted on a PHP web server.</p>
<h3 id="patches">Patches</h3>
<p>The <a href="https://github.com/GeSHi/geshi-1.0">GeSHi library</a> is no longer actively maintained. Due to the lack of ongoing support and updates, potential security vulnerabilities have been identified with its continued use. To mitigate these risks and enhance the overall security of the CKEditor 4, we have decided to completely remove the GeSHi library as a dependency. This change aims to maintain a secure environment and reduce the risk of any security incidents related to outdated or unsupported software.</p>
<p>To integrators who still want to use the GeSHi syntax highlighter, we recommend manually adding the <a href="https://github.com/GeSHi/geshi-1.0">GeSHi library</a> . Please be aware of and understand the potential security vulnerabilities associated with its use.</p>
<p>The fix is be available in version 4.25.0-lts.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>The CKEditor 4 team would like to thank <a href="https://github.com/Hebing123">Jiasheng He</a> from Qihoo 360 for recognizing and reporting this vulnerability.</p>
<h3 id="for-more-information">For more information</h3>
<p>Email us at <a href="mailto:security@cksource.com">security@cksource.com</a> if you have any questions or comments about this advisory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ckeditor/ckeditor4/security/advisories/GHSA-7r32-vfj5-c2jv">https://github.com/ckeditor/ckeditor4/security/advisories/GHSA-7r32-vfj5-c2jv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43407">https://nvd.nist.gov/vuln/detail/CVE-2024-43407</a></li>
<li><a href="https://github.com/ckeditor/ckeditor4/commit/71072c9f7f263329841bd38e7e5309074c82ef94">https://github.com/ckeditor/ckeditor4/commit/71072c9f7f263329841bd38e7e5309074c82ef94</a></li>
<li><a href="https://github.com/ckeditor/ckeditor4/commit/951e7d75fcbcaa2590b0719fb0bb0dd0539ca6fa">https://github.com/ckeditor/ckeditor4/commit/951e7d75fcbcaa2590b0719fb0bb0dd0539ca6fa</a></li>
<li><a href="https://github.com/advisories/GHSA-7r32-vfj5-c2jv">https://github.com/advisories/GHSA-7r32-vfj5-c2jv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7r32-vfj5-c2jv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-21T18:29:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@tryghost/portal] Ghost's improper authentication allows access to member information and actions]]></title>
        <id>https://github.com/advisories/GHSA-78x2-cwp9-5j42</id>
        <link href="https://github.com/advisories/GHSA-78x2-cwp9-5j42"/>
        <updated>2024-08-26T21:25:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper authentication on some endpoints used for member actions would allow an attacker to perform member-only actions, and read member information.</p>
<h3 id="vulnerable-versions">Vulnerable versions</h3>
<p>This security vulnerability is present in Ghost v4.46.0-v5.89.5.</p>
<h3 id="patches">Patches</h3>
<p>v5.89.5 contains a fix for this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@ghost.org">security@ghost.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TryGhost/Ghost/security/advisories/GHSA-78x2-cwp9-5j42">https://github.com/TryGhost/Ghost/security/advisories/GHSA-78x2-cwp9-5j42</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43409">https://nvd.nist.gov/vuln/detail/CVE-2024-43409</a></li>
<li><a href="https://github.com/TryGhost/Ghost/commit/dac25612520b571f58679764ecc27109e641d1db">https://github.com/TryGhost/Ghost/commit/dac25612520b571f58679764ecc27109e641d1db</a></li>
<li><a href="https://github.com/advisories/GHSA-78x2-cwp9-5j42">https://github.com/advisories/GHSA-78x2-cwp9-5j42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78x2-cwp9-5j42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-20T20:04:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ghost] Ghost's improper authentication allows access to member information and actions]]></title>
        <id>https://github.com/advisories/GHSA-78x2-cwp9-5j42</id>
        <link href="https://github.com/advisories/GHSA-78x2-cwp9-5j42"/>
        <updated>2024-08-26T21:25:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper authentication on some endpoints used for member actions would allow an attacker to perform member-only actions, and read member information.</p>
<h3 id="vulnerable-versions">Vulnerable versions</h3>
<p>This security vulnerability is present in Ghost v4.46.0-v5.89.5.</p>
<h3 id="patches">Patches</h3>
<p>v5.89.5 contains a fix for this issue.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@ghost.org">security@ghost.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TryGhost/Ghost/security/advisories/GHSA-78x2-cwp9-5j42">https://github.com/TryGhost/Ghost/security/advisories/GHSA-78x2-cwp9-5j42</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-43409">https://nvd.nist.gov/vuln/detail/CVE-2024-43409</a></li>
<li><a href="https://github.com/TryGhost/Ghost/commit/dac25612520b571f58679764ecc27109e641d1db">https://github.com/TryGhost/Ghost/commit/dac25612520b571f58679764ecc27109e641d1db</a></li>
<li><a href="https://github.com/advisories/GHSA-78x2-cwp9-5j42">https://github.com/advisories/GHSA-78x2-cwp9-5j42</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78x2-cwp9-5j42</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-20T20:04:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matrix-js-sdk] matrix-js-sdk will freeze when a user sets a room with itself as a its predecessor]]></title>
        <id>https://github.com/advisories/GHSA-vhr5-g3pm-49fm</id>
        <link href="https://github.com/advisories/GHSA-vhr5-g3pm-49fm"/>
        <updated>2024-08-20T18:35:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious homeserver can craft a room or room structure such that the predecessors form a cycle. The matrix-js-sdk's <code>getRoomUpgradeHistory</code> function will infinitely recurse in this case, causing the code to hang. This method is public but also called by the 'leaveRoomChain()' method, so leaving a room will also trigger the bug.</p>
<p>Even if the CVSS score would be 4.1 (<a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:N/A:L&amp;version=3.1">AV:N/AC:L/PR:L/UI:R/S:C/C:N/I:N/A:L</a>) we classify this as High severity issue.</p>
<h3 id="patches">Patches</h3>
<p>This was patched in matrix-js-sdk 34.3.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanity check rooms before passing them to the matrix-js-sdk or avoid calling either <code>getRoomUpgradeHistory</code> or <code>leaveRoomChain</code>.</p>
<h3 id="references">References</h3>
<p>N/A.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-vhr5-g3pm-49fm">https://github.com/matrix-org/matrix-js-sdk/security/advisories/GHSA-vhr5-g3pm-49fm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-42369">https://nvd.nist.gov/vuln/detail/CVE-2024-42369</a></li>
<li><a href="https://github.com/matrix-org/matrix-js-sdk/commit/a0efed8b881b3db6c9f2c71d6a6e74c2828978c6">https://github.com/matrix-org/matrix-js-sdk/commit/a0efed8b881b3db6c9f2c71d6a6e74c2828978c6</a></li>
<li><a href="https://github.com/advisories/GHSA-vhr5-g3pm-49fm">https://github.com/advisories/GHSA-vhr5-g3pm-49fm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vhr5-g3pm-49fm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-20T18:35:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Improper access control in Directus]]></title>
        <id>https://github.com/advisories/GHSA-q83v-hq3j-4pq3</id>
        <link href="https://github.com/advisories/GHSA-q83v-hq3j-4pq3"/>
        <updated>2024-08-19T21:03:40.000Z</updated>
        <content type="html"><![CDATA[<p>Directus v10.13.0 allows an authenticated external attacker to modify presets created by the same user to assign them to another user. This is possible because the application only validates the user parameter in the 'POST /presets'&nbsp;request but not in the PATCH request. When chained with CVE-2024-6533, it could result in account takeover.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6534">https://nvd.nist.gov/vuln/detail/CVE-2024-6534</a></li>
<li><a href="https://directus.io">https://directus.io</a></li>
<li><a href="https://fluidattacks.com/advisories/capaldi">https://fluidattacks.com/advisories/capaldi</a></li>
<li><a href="https://github.com/advisories/GHSA-q83v-hq3j-4pq3">https://github.com/advisories/GHSA-q83v-hq3j-4pq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q83v-hq3j-4pq3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-15T06:32:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Code injection in Directus]]></title>
        <id>https://github.com/advisories/GHSA-qf6h-p3mr-vmh5</id>
        <link href="https://github.com/advisories/GHSA-qf6h-p3mr-vmh5"/>
        <updated>2024-08-19T21:03:11.000Z</updated>
        <content type="html"><![CDATA[<p>Directus v10.13.0 allows an authenticated external attacker to execute arbitrary JavaScript on the client. This is possible because the application injects an attacker-controlled parameter that will be stored in the server and used by the client into an unsanitized DOM element. When chained with CVE-2024-6534, it could result in account takeover.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6533">https://nvd.nist.gov/vuln/detail/CVE-2024-6533</a></li>
<li><a href="https://directus.io">https://directus.io</a></li>
<li><a href="https://fluidattacks.com/advisories/bocelli">https://fluidattacks.com/advisories/bocelli</a></li>
<li><a href="https://github.com/advisories/GHSA-qf6h-p3mr-vmh5">https://github.com/advisories/GHSA-qf6h-p3mr-vmh5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qf6h-p3mr-vmh5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-15T03:30:28.000Z</published>
    </entry>
</feed>