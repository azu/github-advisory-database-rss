<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2022-09-17T10:01:36.375Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[parse-url] parse-url parses http URLs incorrectly, making it vulnerable to host name spoofing]]></title>
        <id>https://github.com/advisories/GHSA-pqw5-jmp5-px4v</id>
        <link href="https://github.com/advisories/GHSA-pqw5-jmp5-px4v"/>
        <updated>2022-09-16T21:21:21.000Z</updated>
        <content type="html"><![CDATA[<p>parse-url prior to 8.1.0 is vulnerable to Misinterpretation of Input. parse-url parses certain http or https URLs incorrectly, identifying the URL's protocol as ssh. It may also parse the host name incorrectly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-3224">https://nvd.nist.gov/vuln/detail/CVE-2022-3224</a></li>
<li><a href="https://github.com/ionicabizau/parse-url/commit/9cacf38de02db0fb1358bd6ec04543e523cd6a8e">https://github.com/ionicabizau/parse-url/commit/9cacf38de02db0fb1358bd6ec04543e523cd6a8e</a></li>
<li><a href="https://huntr.dev/bounties/3587a567-7fcd-4702-b7c9-d9ca565e3c62">https://huntr.dev/bounties/3587a567-7fcd-4702-b7c9-d9ca565e3c62</a></li>
<li><a href="https://github.com/advisories/GHSA-pqw5-jmp5-px4v">https://github.com/advisories/GHSA-pqw5-jmp5-px4v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqw5-jmp5-px4v</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T00:00:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to brute force guessing of user sensitive data via search patterns]]></title>
        <id>https://github.com/advisories/GHSA-2m6g-crv8-p3c6</id>
        <link href="https://github.com/advisories/GHSA-2m6g-crv8-p3c6"/>
        <updated>2022-09-16T21:17:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Internal fields (keys used internally by Parse Server, prefixed by <code>_</code>) and protected fields (user defined) can be used as query constraints. Internal and protected fields are removed by Parse Server from query results and are only returned to the client using a valid master key. However, using query constraints, these fields can be guessed by enumerating until Parse Server returns a response object.</p>
<h3 id="patches">Patches</h3>
<p>The patch requires the maser key to use internal and protected fields as query constraints.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Implement a Parse Cloud Trigger <code>beforeFind</code> and manually remove the query constraints, such as:</p>
<pre><code class="language-js">Parse.Cloud.beforeFind('TestObject', ({ query }) =&gt; {
  for (const key in query._where || []) {
    // Repeat logic for protected fields
    if (key.charAt(0) === '_') {
      delete query._where[key];
    }
  }
});
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36079">https://nvd.nist.gov/vuln/detail/CVE-2022-36079</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8143">https://github.com/parse-community/parse-server/issues/8143</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8144">https://github.com/parse-community/parse-server/issues/8144</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec">https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4">https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.14">https://github.com/parse-community/parse-server/releases/tag/4.10.14</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.2.5">https://github.com/parse-community/parse-server/releases/tag/5.2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/advisories/GHSA-2m6g-crv8-p3c6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m6g-crv8-p3c6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T21:17:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[parse-server] Parse Server vulnerable to brute force guessing of user sensitive data via search patterns]]></title>
        <id>https://github.com/advisories/GHSA-2m6g-crv8-p3c6</id>
        <link href="https://github.com/advisories/GHSA-2m6g-crv8-p3c6"/>
        <updated>2022-09-16T21:17:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Internal fields (keys used internally by Parse Server, prefixed by <code>_</code>) and protected fields (user defined) can be used as query constraints. Internal and protected fields are removed by Parse Server from query results and are only returned to the client using a valid master key. However, using query constraints, these fields can be guessed by enumerating until Parse Server returns a response object.</p>
<h3 id="patches">Patches</h3>
<p>The patch requires the maser key to use internal and protected fields as query constraints.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Implement a Parse Cloud Trigger <code>beforeFind</code> and manually remove the query constraints, such as:</p>
<pre><code class="language-js">Parse.Cloud.beforeFind('TestObject', ({ query }) =&gt; {
  for (const key in query._where || []) {
    // Repeat logic for protected fields
    if (key.charAt(0) === '_') {
      delete query._where[key];
    }
  }
});
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/parse-community/parse-server/security/advisories/GHSA-2m6g-crv8-p3c6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36079">https://nvd.nist.gov/vuln/detail/CVE-2022-36079</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8143">https://github.com/parse-community/parse-server/issues/8143</a></li>
<li><a href="https://github.com/parse-community/parse-server/issues/8144">https://github.com/parse-community/parse-server/issues/8144</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec">https://github.com/parse-community/parse-server/commit/634c44acd18f6ee6ec60fac89a2b602d92799bec</a></li>
<li><a href="https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4">https://github.com/parse-community/parse-server/commit/e39d51bd329cd978589983bd659db46e1d45aad4</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/4.10.14">https://github.com/parse-community/parse-server/releases/tag/4.10.14</a></li>
<li><a href="https://github.com/parse-community/parse-server/releases/tag/5.2.5">https://github.com/parse-community/parse-server/releases/tag/5.2.5</a></li>
<li><a href="https://github.com/advisories/GHSA-2m6g-crv8-p3c6">https://github.com/advisories/GHSA-2m6g-crv8-p3c6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2m6g-crv8-p3c6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T21:17:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[morgan-json] morgan-json vulnerable to Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-fwv4-6mxc-x5h3</id>
        <link href="https://github.com/advisories/GHSA-fwv4-6mxc-x5h3"/>
        <updated>2022-09-16T19:37:55.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package morgan-json are vulnerable to Arbitrary Code Execution due to missing sanitization of input passed to the <code>Function</code> constructor.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25921">https://nvd.nist.gov/vuln/detail/CVE-2022-25921</a></li>
<li><a href="https://github.com/indexzero/morgan-json/blob/3a76010215a4256d41687d082cd66c4f00ea5717/index.js%23L46">https://github.com/indexzero/morgan-json/blob/3a76010215a4256d41687d082cd66c4f00ea5717/index.js%23L46</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-MORGANJSON-2976193">https://security.snyk.io/vuln/SNYK-JS-MORGANJSON-2976193</a></li>
<li><a href="https://github.com/advisories/GHSA-fwv4-6mxc-x5h3">https://github.com/advisories/GHSA-fwv4-6mxc-x5h3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fwv4-6mxc-x5h3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-29T20:06:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oauth2-server] oauth2-server through 3.1.1 vulnerable to Open Redirect]]></title>
        <id>https://github.com/advisories/GHSA-4rg6-fm25-gc34</id>
        <link href="https://github.com/advisories/GHSA-4rg6-fm25-gc34"/>
        <updated>2022-09-16T19:36:16.000Z</updated>
        <content type="html"><![CDATA[<p>In oauth2-server (aka node-oauth2-server) through 3.1.1, the value of the <code>redirect_uri</code> parameter received during the authorization and token request is checked against an incorrect URI pattern (<code>[a-zA-Z][a-zA-Z0-9+.-]+:</code>) before making a redirection. This allows a malicious client to pass an XSS payload through the redirect_uri parameter while making an authorization request. NOTE: this vulnerability is similar to CVE-2020-7741.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26938">https://nvd.nist.gov/vuln/detail/CVE-2020-26938</a></li>
<li><a href="https://github.com/oauthjs/node-oauth2-server/issues/637">https://github.com/oauthjs/node-oauth2-server/issues/637</a></li>
<li><a href="https://github.com/oauthjs/node-oauth2-server/blob/91d2cbe70a0eddc53d72def96864e2de0fd41703/lib/grant-types/authorization-code-grant-type.js#L143">https://github.com/oauthjs/node-oauth2-server/blob/91d2cbe70a0eddc53d72def96864e2de0fd41703/lib/grant-types/authorization-code-grant-type.js#L143</a></li>
<li><a href="https://github.com/oauthjs/node-oauth2-server/blob/91d2cbe70a0eddc53d72def96864e2de0fd41703/lib/validator/is.js#L12">https://github.com/oauthjs/node-oauth2-server/blob/91d2cbe70a0eddc53d72def96864e2de0fd41703/lib/validator/is.js#L12</a></li>
<li><a href="https://tools.ietf.org/html/rfc3986#section-3">https://tools.ietf.org/html/rfc3986#section-3</a></li>
<li><a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">https://tools.ietf.org/html/rfc6749#section-3.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-4rg6-fm25-gc34">https://github.com/advisories/GHSA-4rg6-fm25-gc34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4rg6-fm25-gc34</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-08-30T00:00:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pendo324/get-process-by-name] @pendo324/get-process-by-name are vulnerable to Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-qhxv-296x-hjv7</id>
        <link href="https://github.com/advisories/GHSA-qhxv-296x-hjv7"/>
        <updated>2022-09-16T19:35:05.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package @pendo324/get-process-by-name are vulnerable to Arbitrary Code Execution due to improper sanitization of getProcessByName function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25644">https://nvd.nist.gov/vuln/detail/CVE-2022-25644</a></li>
<li><a href="https://github.com/pendo324/get-process-by-name-js/blob/34e8a279a94fa23acb13e302e9516ab1ea8d8731/index.js%23L27-L28">https://github.com/pendo324/get-process-by-name-js/blob/34e8a279a94fa23acb13e302e9516ab1ea8d8731/index.js%23L27-L28</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-PENDO324GETPROCESSBYNAME-2419094">https://security.snyk.io/vuln/SNYK-JS-PENDO324GETPROCESSBYNAME-2419094</a></li>
<li><a href="https://github.com/advisories/GHSA-qhxv-296x-hjv7">https://github.com/advisories/GHSA-qhxv-296x-hjv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qhxv-296x-hjv7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-08-29T20:06:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[x-data-spreadsheet] x-data-spreadsheet through 1.1.9 vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-x5cw-843f-r366</id>
        <link href="https://github.com/advisories/GHSA-x5cw-843f-r366"/>
        <updated>2022-09-16T19:27:37.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of package x-data-spreadsheet are vulnerable to Cross-site Scripting (XSS) due to missing sanitization of values inserted into the cells.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25646">https://nvd.nist.gov/vuln/detail/CVE-2022-25646</a></li>
<li><a href="https://github.com/myliang/x-spreadsheet/issues/580">https://github.com/myliang/x-spreadsheet/issues/580</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-XDATASPREADSHEET-2430381">https://security.snyk.io/vuln/SNYK-JS-XDATASPREADSHEET-2430381</a></li>
<li><a href="https://youtu.be/Ij-8VVKNh7U">https://youtu.be/Ij-8VVKNh7U</a></li>
<li><a href="https://github.com/advisories/GHSA-x5cw-843f-r366">https://github.com/advisories/GHSA-x5cw-843f-r366</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5cw-843f-r366</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-31T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nodebb] NodeBB account takeover via SSO plugins]]></title>
        <id>https://github.com/advisories/GHSA-xmgg-fx9p-prq6</id>
        <link href="https://github.com/advisories/GHSA-xmgg-fx9p-prq6"/>
        <updated>2022-09-16T18:38:46.000Z</updated>
        <content type="html"><![CDATA[<p><em>This is a historical security advisory, pertaining to a vulnerability that was reported, patched, and published in 2021. It is listed here for completeness and for CVE tracking purposes.</em></p>
<h3 id="impact">Impact</h3>
<p>Due to an unnecessarily strict conditional in the code handling the first step of the SSO process, the pre-existing logic that added (and later checked) a nonce was inadvertently rendered opt-in instead of opt-out.</p>
<p>This re-exposed a vulnerability in that a specially crafted MITM attack could theoretically take over another user account during the single sign-on process.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been fully patched as of v1.17.2.</p>
<p>The patch commit can be found at <a href="https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4">https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Site maintainers can cherry-pick <a href="https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4">https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4</a> into their codebase to patch the exploit.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://blogs.opera.com/security/2022/03/bug-bounty-adventures-a-nodebb-0-day/">https://blogs.opera.com/security/2022/03/bug-bounty-adventures-a-nodebb-0-day/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Discuss it on <a href="community.nodebb.org/">our community forum</a></li>
<li>Email us at <a href="mailto:support@nodebb.org">support@nodebb.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/NodeBB/NodeBB/security/advisories/GHSA-xmgg-fx9p-prq6">https://github.com/NodeBB/NodeBB/security/advisories/GHSA-xmgg-fx9p-prq6</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36076">https://nvd.nist.gov/vuln/detail/CVE-2022-36076</a></li>
<li><a href="https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4">https://github.com/NodeBB/NodeBB/commit/a2400f6baff44cb2996487bcd0cc6e2acc74b3d4</a></li>
<li><a href="https://blogs.opera.com/security/2022/03/bug-bounty-adventures-a-nodebb-0-day/">https://blogs.opera.com/security/2022/03/bug-bounty-adventures-a-nodebb-0-day/</a></li>
<li><a href="https://github.com/advisories/GHSA-xmgg-fx9p-prq6">https://github.com/advisories/GHSA-xmgg-fx9p-prq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xmgg-fx9p-prq6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-16T18:38:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-esm-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-cjs-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-browser-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-esm-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-node-cjs-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose-browser-runtime] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jose] JOSE vulnerable to resource exhaustion via specifically crafted JWE]]></title>
        <id>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</id>
        <link href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9"/>
        <updated>2022-09-16T17:44:44.000Z</updated>
        <content type="html"><![CDATA[<p>The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named <code>p2c</code> (<a href="https://www.rfc-editor.org/rfc/rfc7518.html#section-4.8.1.2">PBES2 Count</a>), which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive.</p>
<p>This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish.</p>
<h3 id="impact">Impact</h3>
<p>Under certain conditions (see below) it is possible to have the user's environment consume unreasonable amount of CPU time.</p>
<h3 id="affected-users">Affected users</h3>
<p>The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (<code>alg</code> Header Parameter) using the <code>keyManagementAlgorithms</code> (or <code>algorithms</code> in v1.x) decryption option or through other means.</p>
<p>The PBKDF2-based JWE Key Management Algorithm Identifiers are</p>
<ul>
<li><code>PBES2-HS256+A128KW</code></li>
<li><code>PBES2-HS384+A192KW</code></li>
<li><code>PBES2-HS512+A256KW</code></li>
</ul>
<p>e.g.</p>
<pre><code class="language-js">const secret = new Uint8Array(16)
const jwe = '...' // JWE from an untrusted party

await jose.compactDecrypt(jwe, secret)
</code></pre>
<p>You are NOT affected if any of the following applies to you</p>
<ul>
<li>Your code does not use the JWE APIs</li>
<li>Your code only produces JWE tokens</li>
<li>Your code only decrypts JWEs using an asymmetric JWE Key Management Algorithm (this means you're providing an asymmetric key object to the JWE decryption API)</li>
<li>Your code only accepts JWEs produced by trusted sources</li>
<li>Your code limits the accepted JWE Key Management Algorithms using the <code>keyManagementAlgorithms</code> decryption option not including any of the PBKDF2-based JWE key management algorithms</li>
</ul>
<h3 id="patches">Patches</h3>
<p><code>v1.28.2</code>, <code>v2.0.6</code>, <code>v3.20.4</code>, and <code>v4.9.2</code> releases limit the maximum PBKDF2 iteration count to <code>10000</code> by default. It is possible to adjust this limit with a newly introduced <code>maxPBES2Count</code> decryption option.</p>
<h3 id="workarounds">Workarounds</h3>
<p>All users should be able to upgrade given all stable semver major release lines have had new a patch release introduced which limits the PBKDF2 iteration count to <code>10000</code> by default. This removes the ability to craft JWEs that would consume unreasonable amount of CPU time.</p>
<p>If users are unable to upgrade their required library version they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms.</p>
<ul>
<li>they can use the <code>keyManagementAlgorithms</code> decryption option to disable accepting PBKDF2 altogether</li>
<li>they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (<code>p2c</code> Header Parameter)</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an discussion in the project's <a href="https://github.com/panva/jose/discussions/new?category=q-a&amp;title=GHSA-jv3g-j58f-9mq9%20advisory%20question">repository</a></li>
<li>Email me at <a href="mailto:panva.ip@gmail.com">panva.ip@gmail.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/panva/jose/security/advisories/GHSA-jv3g-j58f-9mq9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36083">https://nvd.nist.gov/vuln/detail/CVE-2022-36083</a></li>
<li><a href="https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d">https://github.com/panva/jose/commit/03d6d013bf6e070e85adfe5731f526978e3e8e4d</a></li>
<li><a href="https://github.com/panva/jose/releases/tag/v4.9.2">https://github.com/panva/jose/releases/tag/v4.9.2</a></li>
<li><a href="https://github.com/advisories/GHSA-jv3g-j58f-9mq9">https://github.com/advisories/GHSA-jv3g-j58f-9mq9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv3g-j58f-9mq9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-09-16T17:44:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cruddl] cruddl vulnerable to ArangoDB Query Language (AQL) injection through flexSearch]]></title>
        <id>https://github.com/advisories/GHSA-qm4w-4995-vg7f</id>
        <link href="https://github.com/advisories/GHSA-qm4w-4995-vg7f"/>
        <updated>2022-09-16T17:43:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a vunerable version of cruddl is used to generate a schema that uses <code>@flexSearchFulltext</code>, users of that schema may be able to inject arbitrary AQL queries that will be forwarded to and executed by ArangoDB.</p>
<p>Schemas that do not use <code>@flexSearchFulltext</code> are not affected.</p>
<p>The attacker needs to have <code>READ</code> permission to at least one root entity type that has <code>@flexSearchFulltext</code> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in version 3.0.2 and in version 2.7.0 of cruddl.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can temporarily remove <code>@flexSearchFulltext</code> from their schemas before they can update cruddl.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/AEB-labs/cruddl">cruddl</a></li>
<li>Email us at <a href="mailto:security@aeb.com">security@aeb.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AEB-labs/cruddl/security/advisories/GHSA-qm4w-4995-vg7f">https://github.com/AEB-labs/cruddl/security/advisories/GHSA-qm4w-4995-vg7f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36084">https://nvd.nist.gov/vuln/detail/CVE-2022-36084</a></li>
<li><a href="https://github.com/AEB-labs/cruddl/pull/253">https://github.com/AEB-labs/cruddl/pull/253</a></li>
<li><a href="https://github.com/AEB-labs/cruddl/commit/13b9233733ed6fc822718a07bc90a80cd3492698">https://github.com/AEB-labs/cruddl/commit/13b9233733ed6fc822718a07bc90a80cd3492698</a></li>
<li><a href="https://github.com/advisories/GHSA-qm4w-4995-vg7f">https://github.com/advisories/GHSA-qm4w-4995-vg7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm4w-4995-vg7f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-16T17:43:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cruddl] cruddl vulnerable to ArangoDB Query Language (AQL) injection through flexSearch]]></title>
        <id>https://github.com/advisories/GHSA-qm4w-4995-vg7f</id>
        <link href="https://github.com/advisories/GHSA-qm4w-4995-vg7f"/>
        <updated>2022-09-16T17:43:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If a vunerable version of cruddl is used to generate a schema that uses <code>@flexSearchFulltext</code>, users of that schema may be able to inject arbitrary AQL queries that will be forwarded to and executed by ArangoDB.</p>
<p>Schemas that do not use <code>@flexSearchFulltext</code> are not affected.</p>
<p>The attacker needs to have <code>READ</code> permission to at least one root entity type that has <code>@flexSearchFulltext</code> enabled.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been fixed in version 3.0.2 and in version 2.7.0 of cruddl.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users can temporarily remove <code>@flexSearchFulltext</code> from their schemas before they can update cruddl.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/AEB-labs/cruddl">cruddl</a></li>
<li>Email us at <a href="mailto:security@aeb.com">security@aeb.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/AEB-labs/cruddl/security/advisories/GHSA-qm4w-4995-vg7f">https://github.com/AEB-labs/cruddl/security/advisories/GHSA-qm4w-4995-vg7f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-36084">https://nvd.nist.gov/vuln/detail/CVE-2022-36084</a></li>
<li><a href="https://github.com/AEB-labs/cruddl/pull/253">https://github.com/AEB-labs/cruddl/pull/253</a></li>
<li><a href="https://github.com/AEB-labs/cruddl/commit/13b9233733ed6fc822718a07bc90a80cd3492698">https://github.com/AEB-labs/cruddl/commit/13b9233733ed6fc822718a07bc90a80cd3492698</a></li>
<li><a href="https://github.com/advisories/GHSA-qm4w-4995-vg7f">https://github.com/advisories/GHSA-qm4w-4995-vg7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qm4w-4995-vg7f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-16T17:43:10.000Z</published>
    </entry>
</feed>