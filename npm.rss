<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-09-06T20:01:26.060Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[closure-compiler-stream] OS Command Injection in closure-compiler-stream]]></title>
        <id>https://github.com/advisories/GHSA-m647-5wf9-3jp3</id>
        <link href="https://github.com/advisories/GHSA-m647-5wf9-3jp3"/>
        <updated>2023-09-06T19:55:23.000Z</updated>
        <content type="html"><![CDATA[<p>closure-compiler-stream through 0.1.15 allows execution of arbitrary commands. The argument <code>options</code> of the exports function in <code>index.js</code> can be controlled by users without any sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7603">https://nvd.nist.gov/vuln/detail/CVE-2020-7603</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-CLOSURECOMPILERSTREAM-560123">https://snyk.io/vuln/SNYK-JS-CLOSURECOMPILERSTREAM-560123</a></li>
<li><a href="https://github.com/advisories/GHSA-m647-5wf9-3jp3">https://github.com/advisories/GHSA-m647-5wf9-3jp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m647-5wf9-3jp3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-07T16:16:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron vulnerable to out-of-package code execution when launched with arbitrary cwd]]></title>
        <id>https://github.com/advisories/GHSA-7x97-j373-85x5</id>
        <link href="https://github.com/advisories/GHSA-7x97-j373-85x5"/>
        <updated>2023-09-06T19:51:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps that are launched as command line executables are impacted.  E.g. if your app exposes itself in the path as <code>myapp --help</code></p>
<p>Specifically this issue can only be exploited if the following conditions are met:</p>
<ul>
<li>Your app is launched with an attacker-controlled working directory</li>
<li>The attacker has the ability to write files to that working directory</li>
</ul>
<p>This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude <a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5#:~:text=Physically%20Local%20Attacks">Physically Local Attacks</a> but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  Please bear this in mind when reporting similar issues in the future.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>26.0.0-beta.13</code></li>
<li><code>25.5.0</code></li>
<li><code>24.7.1</code></li>
<li><code>23.3.13</code></li>
<li><code>22.3.19</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5">https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5</a></li>
<li><a href="https://github.com/advisories/GHSA-7x97-j373-85x5">https://github.com/advisories/GHSA-7x97-j373-85x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x97-j373-85x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:51:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron vulnerable to out-of-package code execution when launched with arbitrary cwd]]></title>
        <id>https://github.com/advisories/GHSA-7x97-j373-85x5</id>
        <link href="https://github.com/advisories/GHSA-7x97-j373-85x5"/>
        <updated>2023-09-06T19:51:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps that are launched as command line executables are impacted.  E.g. if your app exposes itself in the path as <code>myapp --help</code></p>
<p>Specifically this issue can only be exploited if the following conditions are met:</p>
<ul>
<li>Your app is launched with an attacker-controlled working directory</li>
<li>The attacker has the ability to write files to that working directory</li>
</ul>
<p>This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude <a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5#:~:text=Physically%20Local%20Attacks">Physically Local Attacks</a> but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  Please bear this in mind when reporting similar issues in the future.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>26.0.0-beta.13</code></li>
<li><code>25.5.0</code></li>
<li><code>24.7.1</code></li>
<li><code>23.3.13</code></li>
<li><code>22.3.19</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5">https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5</a></li>
<li><a href="https://github.com/advisories/GHSA-7x97-j373-85x5">https://github.com/advisories/GHSA-7x97-j373-85x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x97-j373-85x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:51:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron vulnerable to out-of-package code execution when launched with arbitrary cwd]]></title>
        <id>https://github.com/advisories/GHSA-7x97-j373-85x5</id>
        <link href="https://github.com/advisories/GHSA-7x97-j373-85x5"/>
        <updated>2023-09-06T19:51:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps that are launched as command line executables are impacted.  E.g. if your app exposes itself in the path as <code>myapp --help</code></p>
<p>Specifically this issue can only be exploited if the following conditions are met:</p>
<ul>
<li>Your app is launched with an attacker-controlled working directory</li>
<li>The attacker has the ability to write files to that working directory</li>
</ul>
<p>This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude <a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5#:~:text=Physically%20Local%20Attacks">Physically Local Attacks</a> but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  Please bear this in mind when reporting similar issues in the future.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>26.0.0-beta.13</code></li>
<li><code>25.5.0</code></li>
<li><code>24.7.1</code></li>
<li><code>23.3.13</code></li>
<li><code>22.3.19</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5">https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5</a></li>
<li><a href="https://github.com/advisories/GHSA-7x97-j373-85x5">https://github.com/advisories/GHSA-7x97-j373-85x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x97-j373-85x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:51:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron vulnerable to out-of-package code execution when launched with arbitrary cwd]]></title>
        <id>https://github.com/advisories/GHSA-7x97-j373-85x5</id>
        <link href="https://github.com/advisories/GHSA-7x97-j373-85x5"/>
        <updated>2023-09-06T19:51:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps that are launched as command line executables are impacted.  E.g. if your app exposes itself in the path as <code>myapp --help</code></p>
<p>Specifically this issue can only be exploited if the following conditions are met:</p>
<ul>
<li>Your app is launched with an attacker-controlled working directory</li>
<li>The attacker has the ability to write files to that working directory</li>
</ul>
<p>This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude <a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5#:~:text=Physically%20Local%20Attacks">Physically Local Attacks</a> but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  Please bear this in mind when reporting similar issues in the future.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>26.0.0-beta.13</code></li>
<li><code>25.5.0</code></li>
<li><code>24.7.1</code></li>
<li><code>23.3.13</code></li>
<li><code>22.3.19</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5">https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5</a></li>
<li><a href="https://github.com/advisories/GHSA-7x97-j373-85x5">https://github.com/advisories/GHSA-7x97-j373-85x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x97-j373-85x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:51:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron vulnerable to out-of-package code execution when launched with arbitrary cwd]]></title>
        <id>https://github.com/advisories/GHSA-7x97-j373-85x5</id>
        <link href="https://github.com/advisories/GHSA-7x97-j373-85x5"/>
        <updated>2023-09-06T19:51:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps that are launched as command line executables are impacted.  E.g. if your app exposes itself in the path as <code>myapp --help</code></p>
<p>Specifically this issue can only be exploited if the following conditions are met:</p>
<ul>
<li>Your app is launched with an attacker-controlled working directory</li>
<li>The attacker has the ability to write files to that working directory</li>
</ul>
<p>This makes the risk quite low, in fact normally issues of this kind are considered outside of our threat model as similar to Chromium we exclude <a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5#:~:text=Physically%20Local%20Attacks">Physically Local Attacks</a> but given the ability for this issue to bypass certain protections like ASAR Integrity it is being treated with higher importance.  Please bear this in mind when reporting similar issues in the future.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no app side workarounds, you must update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>26.0.0-beta.13</code></li>
<li><code>25.5.0</code></li>
<li><code>24.7.1</code></li>
<li><code>23.3.13</code></li>
<li><code>22.3.19</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5">https://github.com/electron/electron/security/advisories/GHSA-7x97-j373-85x5</a></li>
<li><a href="https://github.com/advisories/GHSA-7x97-j373-85x5">https://github.com/advisories/GHSA-7x97-j373-85x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7x97-j373-85x5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:51:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron context isolation bypass via nested unserializable return value]]></title>
        <id>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</id>
        <link href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7"/>
        <updated>2023-09-06T19:50:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps using <code>contextIsolation</code> and <code>contextBridge</code> are affected.</p>
<p>This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue is exploitable under either of two conditions:</p>
<ul>
<li>If an API exposed to the main world via <code>contextBridge</code> can return an object or array that contains a JS object which cannot be serialized, for instance, a canvas rendering context. This would normally result in an exception being thrown <code>Error: object could not be cloned</code>.</li>
<li>If an API exposed to the main world via <code>contextBridge</code> has a return value that throws a user-generated exception while being sent over the bridge, for instance a dynamic getter property on an object that throws an error when being computed.</li>
</ul>
<p>The app side workaround is to ensure that such a case is not possible. Ensure all values returned from a function exposed over the context bridge are <a href="https://www.electronjs.org/docs/latest/api/context-bridge#parameter--error--return-type-support">supported</a> and that any objects returned from functions do not have dynamic getters that can throw exceptions.</p>
<p>Auditing your exposed API is likely to be quite difficult so we strongly recommend you update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>25.0.0-alpha.2</code></li>
<li><code>24.0.1</code></li>
<li><code>23.2.3</code></li>
<li><code>22.3.6</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
<li><a href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:50:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron context isolation bypass via nested unserializable return value]]></title>
        <id>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</id>
        <link href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7"/>
        <updated>2023-09-06T19:50:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps using <code>contextIsolation</code> and <code>contextBridge</code> are affected.</p>
<p>This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue is exploitable under either of two conditions:</p>
<ul>
<li>If an API exposed to the main world via <code>contextBridge</code> can return an object or array that contains a JS object which cannot be serialized, for instance, a canvas rendering context. This would normally result in an exception being thrown <code>Error: object could not be cloned</code>.</li>
<li>If an API exposed to the main world via <code>contextBridge</code> has a return value that throws a user-generated exception while being sent over the bridge, for instance a dynamic getter property on an object that throws an error when being computed.</li>
</ul>
<p>The app side workaround is to ensure that such a case is not possible. Ensure all values returned from a function exposed over the context bridge are <a href="https://www.electronjs.org/docs/latest/api/context-bridge#parameter--error--return-type-support">supported</a> and that any objects returned from functions do not have dynamic getters that can throw exceptions.</p>
<p>Auditing your exposed API is likely to be quite difficult so we strongly recommend you update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>25.0.0-alpha.2</code></li>
<li><code>24.0.1</code></li>
<li><code>23.2.3</code></li>
<li><code>22.3.6</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
<li><a href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:50:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron context isolation bypass via nested unserializable return value]]></title>
        <id>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</id>
        <link href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7"/>
        <updated>2023-09-06T19:50:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps using <code>contextIsolation</code> and <code>contextBridge</code> are affected.</p>
<p>This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue is exploitable under either of two conditions:</p>
<ul>
<li>If an API exposed to the main world via <code>contextBridge</code> can return an object or array that contains a JS object which cannot be serialized, for instance, a canvas rendering context. This would normally result in an exception being thrown <code>Error: object could not be cloned</code>.</li>
<li>If an API exposed to the main world via <code>contextBridge</code> has a return value that throws a user-generated exception while being sent over the bridge, for instance a dynamic getter property on an object that throws an error when being computed.</li>
</ul>
<p>The app side workaround is to ensure that such a case is not possible. Ensure all values returned from a function exposed over the context bridge are <a href="https://www.electronjs.org/docs/latest/api/context-bridge#parameter--error--return-type-support">supported</a> and that any objects returned from functions do not have dynamic getters that can throw exceptions.</p>
<p>Auditing your exposed API is likely to be quite difficult so we strongly recommend you update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>25.0.0-alpha.2</code></li>
<li><code>24.0.1</code></li>
<li><code>23.2.3</code></li>
<li><code>22.3.6</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
<li><a href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:50:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron context isolation bypass via nested unserializable return value]]></title>
        <id>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</id>
        <link href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7"/>
        <updated>2023-09-06T19:50:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Apps using <code>contextIsolation</code> and <code>contextBridge</code> are affected.</p>
<p>This is a context isolation bypass, meaning that code running in the main world context in the renderer can reach into the isolated Electron context and perform privileged actions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>This issue is exploitable under either of two conditions:</p>
<ul>
<li>If an API exposed to the main world via <code>contextBridge</code> can return an object or array that contains a JS object which cannot be serialized, for instance, a canvas rendering context. This would normally result in an exception being thrown <code>Error: object could not be cloned</code>.</li>
<li>If an API exposed to the main world via <code>contextBridge</code> has a return value that throws a user-generated exception while being sent over the bridge, for instance a dynamic getter property on an object that throws an error when being computed.</li>
</ul>
<p>The app side workaround is to ensure that such a case is not possible. Ensure all values returned from a function exposed over the context bridge are <a href="https://www.electronjs.org/docs/latest/api/context-bridge#parameter--error--return-type-support">supported</a> and that any objects returned from functions do not have dynamic getters that can throw exceptions.</p>
<p>Auditing your exposed API is likely to be quite difficult so we strongly recommend you update to a patched version of Electron.</p>
<h3 id="fixed-versions">Fixed Versions</h3>
<ul>
<li><code>25.0.0-alpha.2</code></li>
<li><code>24.0.1</code></li>
<li><code>23.2.3</code></li>
<li><code>22.3.6</code></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/electron/electron/security/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
<li><a href="https://github.com/advisories/GHSA-p7v2-p9m8-qqg7">https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p7v2-p9m8-qqg7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-06T19:50:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@saltcorn/cli] Unsafe plugins can be installed via pack import by tenant admins]]></title>
        <id>https://github.com/advisories/GHSA-wxf3-4fvj-vqqx</id>
        <link href="https://github.com/advisories/GHSA-wxf3-4fvj-vqqx"/>
        <updated>2023-09-06T19:20:44.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Unsafe plugins (for instance <code>sql-list</code>) can be installed in subdomain tenants via pack import even if unsafe plugin installation for tenants is disables</p>
<h3 id="details">Details</h3>
<p>I have an example
<a href="https://bot20230704.saltcorn.com/view/all_plugins">https://bot20230704.saltcorn.com/view/all_plugins</a>
It's publicly accessible (but has not so secure values except list of tenants).
But using this mech one can read <strong>any</strong> data from other tenants.</p>
<h3 id="impact">Impact</h3>
<p>All tenants of installation (i.e. <code>saltcorn.com</code>), can be compromised from tenant user has admin access. If an untrusted user has admin rights to a tenant instance, they will be able to install a plug-in that can access information from other tenants</p>
<h3 id="revived-after-087">Revived after 0.8.7</h3>
<p>After patch in 0.8.7 this is not fixed completely.</p>
<p>Here are steps to reproduce:</p>
<ol>
<li>Publish to NPM plugin that was not approved by admin (in case of saltcorn.com) by @glutamate. I've just published this one: <a href="https://www.npmjs.com/package/saltcorn-qrcode">https://www.npmjs.com/package/saltcorn-qrcode</a></li>
<li>Publish somewhere plugin store that includes plugin from previous step: <a href="https://gist.github.com/pyhedgehog/f1fd7cb13f4d0a7ccf6a965748d19bd2">https://gist.github.com/pyhedgehog/f1fd7cb13f4d0a7ccf6a965748d19bd2</a></li>
<li>Add plugin store link to tenant store.</li>
<li>Install plugin.</li>
<li>Use it in tenant: <a href="https://bot20230704.saltcorn.com/view/testqr_show/1">https://bot20230704.saltcorn.com/view/testqr_show/1</a></li>
</ol>
<p>Here are logic:
Unsafe plugins checked against this list:
<a href="https://github.com/saltcorn/saltcorn/blob/99fe277e497fd193bb070acd8c663aa254a9907c/packages/server/load_plugins.js#L191">https://github.com/saltcorn/saltcorn/blob/99fe277e497fd193bb070acd8c663aa254a9907c/packages/server/load_plugins.js#L191</a>
But it's under control of tenant admin, not server admin.
Proposed login:</p>
<pre><code class="language-javascript">const safes = getRootState().getConfig("available_plugins",[]).filter(p=&gt;!p.unsafe).map(p=&gt;p.location);
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/saltcorn/saltcorn/security/advisories/GHSA-wxf3-4fvj-vqqx">https://github.com/saltcorn/saltcorn/security/advisories/GHSA-wxf3-4fvj-vqqx</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/pull/1973">https://github.com/saltcorn/saltcorn/pull/1973</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/commit/0f32a51277a635c814a634bda9b6d358fb8c04ab">https://github.com/saltcorn/saltcorn/commit/0f32a51277a635c814a634bda9b6d358fb8c04ab</a></li>
<li><a href="https://github.com/saltcorn/saltcorn/blob/99fe277e497fd193bb070acd8c663aa254a9907c/packages/server/load_plugins.js#L191">https://github.com/saltcorn/saltcorn/blob/99fe277e497fd193bb070acd8c663aa254a9907c/packages/server/load_plugins.js#L191</a></li>
<li><a href="https://github.com/advisories/GHSA-wxf3-4fvj-vqqx">https://github.com/advisories/GHSA-wxf3-4fvj-vqqx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wxf3-4fvj-vqqx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-27T19:28:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron's Content-Secrity-Policy disabling eval not applied consistently in renderers with sandbox disabled]]></title>
        <id>https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</id>
        <link href="https://github.com/advisories/GHSA-gxh7-wv9q-fwfr"/>
        <updated>2023-09-06T18:42:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Content-Security-Policy that disables eval, specifically setting a <code>script-src</code> directive and <em>not</em> providing <code>unsafe-eval</code> in that directive, is not respected in renderers that have sandbox and contextIsolation disabled.  i.e. <code>sandbox: false</code> and <code>contextIsolation: false</code> in the <code>webPreferences</code> object.</p>
<p>This resulted in incorrectly allowing usage of methods like <code>eval()</code> and <code>new Function</code>, which can result in an expanded attack surface.</p>
<h3 id="patches">Patches</h3>
<p>This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes:</p>
<ul>
<li>22.0.1</li>
<li>23.0.0-alpha.2</li>
</ul>
<p>We recommend all apps upgrade to the latest stable version of Electron, especially if they use <code>sandbox: false</code> or <code>contextIsolation: false</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrading isn't possible, this issue can be addressed without upgrading by enabling at least one of <code>sandbox: true</code> or <code>contextIsolation: true</code> on all renderers.</p>
<pre><code class="language-js">const mainWindow = new BrowserWindow({
  webPreferences: {
    sandbox: true,
  }
});
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a>.</p>
<h3 id="credit">Credit</h3>
<p>Thanks to user @andreasdj for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-gxh7-wv9q-fwfr">https://github.com/electron/electron/security/advisories/GHSA-gxh7-wv9q-fwfr</a></li>
<li><a href="https://github.com/electron/electron/pull/36667">https://github.com/electron/electron/pull/36667</a></li>
<li><a href="https://github.com/electron/electron/pull/36668">https://github.com/electron/electron/pull/36668</a></li>
<li><a href="https://github.com/electron/electron/commit/9e7fbc7021d8d716c43782249a552e55289c35db">https://github.com/electron/electron/commit/9e7fbc7021d8d716c43782249a552e55289c35db</a></li>
<li><a href="https://github.com/electron/electron/releases/tag/v22.0.1">https://github.com/electron/electron/releases/tag/v22.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-gxh7-wv9q-fwfr">https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-06T18:42:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[electron] Electron's Content-Secrity-Policy disabling eval not applied consistently in renderers with sandbox disabled]]></title>
        <id>https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</id>
        <link href="https://github.com/advisories/GHSA-gxh7-wv9q-fwfr"/>
        <updated>2023-09-06T18:42:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A Content-Security-Policy that disables eval, specifically setting a <code>script-src</code> directive and <em>not</em> providing <code>unsafe-eval</code> in that directive, is not respected in renderers that have sandbox and contextIsolation disabled.  i.e. <code>sandbox: false</code> and <code>contextIsolation: false</code> in the <code>webPreferences</code> object.</p>
<p>This resulted in incorrectly allowing usage of methods like <code>eval()</code> and <code>new Function</code>, which can result in an expanded attack surface.</p>
<h3 id="patches">Patches</h3>
<p>This issue only ever affected the 22 and 23 major versions of Electron and has been fixed in the latest versions of those release lines. Specifically, these versions contain the fixes:</p>
<ul>
<li>22.0.1</li>
<li>23.0.0-alpha.2</li>
</ul>
<p>We recommend all apps upgrade to the latest stable version of Electron, especially if they use <code>sandbox: false</code> or <code>contextIsolation: false</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If upgrading isn't possible, this issue can be addressed without upgrading by enabling at least one of <code>sandbox: true</code> or <code>contextIsolation: true</code> on all renderers.</p>
<pre><code class="language-js">const mainWindow = new BrowserWindow({
  webPreferences: {
    sandbox: true,
  }
});
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, email us at <a href="mailto:security@electronjs.org">security@electronjs.org</a>.</p>
<h3 id="credit">Credit</h3>
<p>Thanks to user @andreasdj for reporting this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/electron/electron/security/advisories/GHSA-gxh7-wv9q-fwfr">https://github.com/electron/electron/security/advisories/GHSA-gxh7-wv9q-fwfr</a></li>
<li><a href="https://github.com/electron/electron/pull/36667">https://github.com/electron/electron/pull/36667</a></li>
<li><a href="https://github.com/electron/electron/pull/36668">https://github.com/electron/electron/pull/36668</a></li>
<li><a href="https://github.com/electron/electron/commit/9e7fbc7021d8d716c43782249a552e55289c35db">https://github.com/electron/electron/commit/9e7fbc7021d8d716c43782249a552e55289c35db</a></li>
<li><a href="https://github.com/electron/electron/releases/tag/v22.0.1">https://github.com/electron/electron/releases/tag/v22.0.1</a></li>
<li><a href="https://github.com/advisories/GHSA-gxh7-wv9q-fwfr">https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gxh7-wv9q-fwfr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-06T18:42:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pulverizr] OS Command Injection in pulverizr]]></title>
        <id>https://github.com/advisories/GHSA-fmf5-j5j9-99pp</id>
        <link href="https://github.com/advisories/GHSA-fmf5-j5j9-99pp"/>
        <updated>2023-09-06T18:31:19.000Z</updated>
        <content type="html"><![CDATA[<p>pulverizr through 0.7.0 allows execution of arbitrary commands. Within <code>lib/job.js</code>, the variable <code>filename</code> can be controlled by the attacker. This function uses the variable "filename" to construct the argument of the exec call without any sanitization. In order to successfully exploit this vulnerability, an attacker will need to create a new file with the same name as the attack command.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7604">https://nvd.nist.gov/vuln/detail/CVE-2020-7604</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-PULVERIZR-560122">https://snyk.io/vuln/SNYK-JS-PULVERIZR-560122</a></li>
<li><a href="https://github.com/bentruyman/pulverizr/blob/master/lib/job.js#L73">https://github.com/bentruyman/pulverizr/blob/master/lib/job.js#L73</a></li>
<li><a href="https://github.com/advisories/GHSA-fmf5-j5j9-99pp">https://github.com/advisories/GHSA-fmf5-j5j9-99pp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fmf5-j5j9-99pp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-07T16:20:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jquey] jquey is malware]]></title>
        <id>https://github.com/advisories/GHSA-6fjr-m7v6-fpg9</id>
        <link href="https://github.com/advisories/GHSA-6fjr-m7v6-fpg9"/>
        <updated>2023-09-06T18:29:28.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>jquey</code> package is malware that attempts to discover and exfiltrate sensitive data such as a user's private SSH key and bash history, sending them to attacker controlled locations. </p>
<p>All versions have been unpublished from the npm registry.</p>
<h2 id="recommendation">Recommendation</h2>
<p>If you have found <code>jquey</code> installed in your environment, you should:</p>
<ol>
<li>Delete the package</li>
<li>Clear your npm cache</li>
<li>Ensure it is not present in any other package.json files on your system</li>
<li>Regenerate your SSH keys, registry credentials, tokens, and any other sensitive credentials that may have been present in your bash history.</li>
</ol>
<p>Additionally, any service which may have been exposed via credentials in your bash history or accessible via your ssh keys, such as a database, should be reviewed for indicators of compromise as well.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16204">https://nvd.nist.gov/vuln/detail/CVE-2017-16204</a></li>
<li><a href="https://github.com/advisories/GHSA-6fjr-m7v6-fpg9">https://github.com/advisories/GHSA-6fjr-m7v6-fpg9</a></li>
<li><a href="https://www.npmjs.com/advisories/544">https://www.npmjs.com/advisories/544</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6fjr-m7v6-fpg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-08-06T21:41:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ikst] ikst Downloads Resources over HTTP]]></title>
        <id>https://github.com/advisories/GHSA-w23f-f3c5-r9qh</id>
        <link href="https://github.com/advisories/GHSA-w23f-f3c5-r9qh"/>
        <updated>2023-09-05T23:34:59.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>ikst</code> insecurely download resources over HTTP. </p>
<p>In scenarios where an attacker has a privileged network position, they can modify or read such resources at will. While the exact severity of impact for a vulnerability like this is highly variable and depends on the behavior of the package itself, it ranges from being able to read sensitive information all the way up to and including remote code execution.</p>
<h2 id="recommendation">Recommendation</h2>
<p>Upgrade to version 1.1.2 or greater.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16041">https://nvd.nist.gov/vuln/detail/CVE-2017-16041</a></li>
<li><a href="https://github.com/advisories/GHSA-w23f-f3c5-r9qh">https://github.com/advisories/GHSA-w23f-f3c5-r9qh</a></li>
<li><a href="https://www.npmjs.com/advisories/249">https://www.npmjs.com/advisories/249</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w23f-f3c5-r9qh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-07-24T15:56:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[picard] Directory Traversal in picard]]></title>
        <id>https://github.com/advisories/GHSA-x5x2-mfc7-r22f</id>
        <link href="https://github.com/advisories/GHSA-x5x2-mfc7-r22f"/>
        <updated>2023-09-05T23:33:33.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>picard</code> resolve relative file paths, resulting in a directory traversal vulnerability. A malicious actor can use this vulnerability to access files outside of the intended directory root, which may result in the disclosure of private files on the vulnerable system.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host:foo
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16194">https://nvd.nist.gov/vuln/detail/CVE-2017-16194</a></li>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/picard">https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/picard</a></li>
<li><a href="https://github.com/advisories/GHSA-x5x2-mfc7-r22f">https://github.com/advisories/GHSA-x5x2-mfc7-r22f</a></li>
<li><a href="https://www.npmjs.com/advisories/436">https://www.npmjs.com/advisories/436</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5x2-mfc7-r22f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-07-23T20:40:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[marscode] Path Traversal in marscode]]></title>
        <id>https://github.com/advisories/GHSA-8pww-pp5r-rff8</id>
        <link href="https://github.com/advisories/GHSA-8pww-pp5r-rff8"/>
        <updated>2023-09-05T23:32:19.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versionsup to and including version 1.0.1-0 of package marscode. There is no path sanitization in the path provided at <code>fs.readFile</code> in <code>index.js</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7681">https://nvd.nist.gov/vuln/detail/CVE-2020-7681</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-MARSCODE-590122">https://snyk.io/vuln/SNYK-JS-MARSCODE-590122</a></li>
<li><a href="https://github.com/advisories/GHSA-8pww-pp5r-rff8">https://github.com/advisories/GHSA-8pww-pp5r-rff8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8pww-pp5r-rff8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-05-07T16:06:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[rollup-plugin-server] Directory traversal in rollup-plugin-server]]></title>
        <id>https://github.com/advisories/GHSA-vr98-27qj-3c8q</id>
        <link href="https://github.com/advisories/GHSA-vr98-27qj-3c8q"/>
        <updated>2023-09-05T23:31:53.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package rollup-plugin-dev-server. There is no path sanitization in <code>readFile</code> operation inside the <code>readFileFromContentBase</code> function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7686">https://nvd.nist.gov/vuln/detail/CVE-2020-7686</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-ROLLUPPLUGINDEVSERVER-590124">https://snyk.io/vuln/SNYK-JS-ROLLUPPLUGINDEVSERVER-590124</a></li>
<li><a href="https://github.com/advisories/GHSA-vr98-27qj-3c8q">https://github.com/advisories/GHSA-vr98-27qj-3c8q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vr98-27qj-3c8q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-07-29T18:07:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[liuyaserver] Directory Traversal in liuyaserver]]></title>
        <id>https://github.com/advisories/GHSA-xj6q-9hx8-mm7f</id>
        <link href="https://github.com/advisories/GHSA-xj6q-9hx8-mm7f"/>
        <updated>2023-09-05T23:31:00.000Z</updated>
        <content type="html"><![CDATA[<p>Affected versions of <code>liuyaserver</code> resolve relative file paths, resulting in a directory traversal vulnerability. A malicious actor can use this vulnerability to access files outside of the intended directory root, which may result in the disclosure of private files on the vulnerable system.</p>
<p><strong>Example request:</strong></p>
<pre><code class="language-http">GET /../../../../../../../../../../etc/passwd HTTP/1.1
host:foo
</code></pre>
<h2 id="recommendation">Recommendation</h2>
<p>No patch is available for this vulnerability.</p>
<p>It is recommended that the package is only used for local development, and if the functionality is needed for production, a different package is used instead.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/liuyaserver">https://github.com/JacksonGL/NPM-Vuln-PoC/blob/master/directory-traversal/liuyaserver</a></li>
<li><a href="https://www.npmjs.com/advisories/413">https://www.npmjs.com/advisories/413</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-16170">https://nvd.nist.gov/vuln/detail/CVE-2017-16170</a></li>
<li><a href="https://github.com/advisories/GHSA-xj6q-9hx8-mm7f">https://github.com/advisories/GHSA-xj6q-9hx8-mm7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xj6q-9hx8-mm7f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-01T17:34:34.000Z</published>
    </entry>
</feed>