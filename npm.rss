<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2022-05-29T00:21:32.185Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[swagger-ui-react] Server side request forgery in SwaggerUI]]></title>
        <id>https://github.com/advisories/GHSA-qrmm-w75w-3wpx</id>
        <link href="https://github.com/advisories/GHSA-qrmm-w75w-3wpx"/>
        <updated>2022-05-26T20:08:35.000Z</updated>
        <content type="html"><![CDATA[<p>SwaggerUI supports displaying remote OpenAPI definitions through the <code>?url</code> parameter. This enables robust demonstration capabilities on sites like <code>petstore.swagger.io</code>, <code>editor.swagger.io</code>, and similar sites, where users often want to see what their OpenAPI definitions would look like rendered.</p>
<p>However, this functionality may pose a risk for users who host their own SwaggerUI instances. In particular, including remote OpenAPI definitions opens a vector for phishing attacks by abusing the trusted names/domains of self-hosted instances.</p>
<p>An example scenario abusing this functionality could take the following form:</p>
<ul>
<li><code>https://example.com/api-docs</code> hosts a version of SwaggerUI with <code>?url=</code> query parameter enabled.</li>
<li>Users will trust the domain <code>https://example.com</code> and the contents of the OpenAPI definition.</li>
<li>A malicious actor may craft a similar OpenAPI definition and service that responds to the defined APIs at <code>https://evildomain</code>.</li>
<li>Users mistakenly click a phishing URL like <code>https://example.com/api-docs?url=https://evildomain/fakeapi.yaml</code> and enters sensitive data via the "Try-it-out" feature.</li>
</ul>
<p>We do want to stress that this attack vector is limited to scenarios that actively trick users into divulging sensitive information. The ease of this is highly contextual and, therefore, the threat model may be different for individual users and organizations. It is <em>not</em> possible to perform non-interactive attacks (e.g., cross-site scripting or code injection) through this mechanism.</p>
<h3 id="resolution">Resolution</h3>
<p>We've made the decision to <a href="https://github.com/swagger-api/swagger-ui/issues/4872">disable query parameters (#4872)</a> by default starting with SwaggerUI version <code>4.1.3</code>. Please update to this version when it becomes available (<strong>ETA: 2021 December</strong>). Users will still be able to be re-enable the options at their discretion. We'll continue to enable query parameters on the Swagger demo sites.</p>
<h3 id="workaround">Workaround</h3>
<p>If you host a version of SwaggerUI and wish to mitigate this issue immediately, you are encouraged to add the following custom plugin code:</p>
<pre><code class="language-js">SwaggerUI({
  //  ...other configuration options,
  plugins: [function UrlParamDisablePlugin() {
    return {
      statePlugins: {
        spec: {
          wrapActions: {
            // Remove the ?url parameter from loading an external OpenAPI definition.
            updateUrl: (oriAction) =&gt; (payload) =&gt; {
              const url = new URL(window.location.href)
              if (url.searchParams.has('url')) {
                url.searchParams.delete('url')
                window.location.replace(url.toString())
              }
              return oriAction(payload)
            }
          }
        }
      }
    }
  }],
})
</code></pre>
<h3 id="future-ux-work">Future UX work</h3>
<p>Through the exploration of this issue, it became apparent that users may not be aware to which web server the Try-it-out function will send requests. While this information is currently presented at the top of the page, understanding may improve by displaying it closer to the "Execute" button where requests are actually made. We'll be exploring these UX improvements over the coming months and welcome community input. Please create a Feature Request under the GitHub Issue tab to start a conversation with us and the community.</p>
<h2 id="reflected-xss-attack">Reflected XSS attack</h2>
<p><strong>Warning</strong> in versions &lt; 3.38.0, it is possible to combine the URL options (as mentioned above) with a vulnerability in DOMPurify (<a href="https://www.cvedetails.com/cve/CVE-2020-26870/">https://www.cvedetails.com/cve/CVE-2020-26870/</a>) to create a reflected XSS vector. If your version of Swagger UI is older than 3.38.0, we suggest you upgrade or implement the workaround as mentioned above.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/swagger-api/swagger-ui/security/advisories/GHSA-qrmm-w75w-3wpx">https://github.com/swagger-api/swagger-ui/security/advisories/GHSA-qrmm-w75w-3wpx</a></li>
<li><a href="https://github.com/swagger-api/swagger-ui/issues/4872">https://github.com/swagger-api/swagger-ui/issues/4872</a></li>
<li><a href="https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76">https://github.com/swagger-api/swagger-ui/commit/01a3e55960f864a0acf6a8d06e5ddaf6776a7f76</a></li>
<li><a href="https://github.com/advisories/GHSA-qrmm-w75w-3wpx">https://github.com/advisories/GHSA-qrmm-w75w-3wpx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qrmm-w75w-3wpx</uri>
        </author>
        <published>2021-12-09T19:08:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[convict] Prototype Pollution in convict]]></title>
        <id>https://github.com/advisories/GHSA-x2w5-725j-gf2g</id>
        <link href="https://github.com/advisories/GHSA-x2w5-725j-gf2g"/>
        <updated>2022-05-26T19:43:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<ul>
<li>An attacker can inject attributes that are used in other components</li>
<li>An attacker can override existing attributes with ones that have incompatible type, which may lead to a crash.</li>
</ul>
<p>The main use case of Convict is for handling server-side configurations written by the admins owning the servers, and not random users. So it's unlikely that an admin would deliberately sabotage their own server. Still a situation can happen where an admin not knowledgeable about JavaScript could be tricked by an attacker into writing the malicious JavaScript code into some config files.</p>
<h3 id="patches">Patches</h3>
<p>The problem is patched in <code>convict@6.2.3</code>. Users should upgrade to <code>convict@6.2.3</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No way for users to fix or remediate the vulnerability without upgrading</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.huntr.dev/bounties/1-npm-convict/">https://www.huntr.dev/bounties/1-npm-convict/</a></li>
<li>#384</li>
<li>3b86be087d8f14681a9c889d45da7fe3ad9cd880</li>
<li>1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75</li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory: 
add your question as a comment in #384 </p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mozilla/node-convict/security/advisories/GHSA-x2w5-725j-gf2g">https://github.com/mozilla/node-convict/security/advisories/GHSA-x2w5-725j-gf2g</a></li>
<li><a href="https://github.com/mozilla/node-convict/pull/384">https://github.com/mozilla/node-convict/pull/384</a></li>
<li><a href="https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880">https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880</a></li>
<li><a href="https://github.com/mozilla/node-convict/releases/tag/v6.2.2">https://github.com/mozilla/node-convict/releases/tag/v6.2.2</a></li>
<li><a href="https://www.huntr.dev/bounties/1-npm-convict/">https://www.huntr.dev/bounties/1-npm-convict/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-22143">https://nvd.nist.gov/vuln/detail/CVE-2022-22143</a></li>
<li><a href="https://github.com/mozilla/node-convict/blob/5eb1314f85346760a3c31cb14510f2f0af11d0d3/packages/convict/src/main.js%23L569">https://github.com/mozilla/node-convict/blob/5eb1314f85346760a3c31cb14510f2f0af11d0d3/packages/convict/src/main.js%23L569</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-CONVICT-2340604">https://snyk.io/vuln/SNYK-JS-CONVICT-2340604</a></li>
<li><a href="https://github.com/advisories/GHSA-x2w5-725j-gf2g">https://github.com/advisories/GHSA-x2w5-725j-gf2g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2w5-725j-gf2g</uri>
        </author>
        <published>2022-04-20T16:21:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[convict] Prototype Pollution in convict]]></title>
        <id>https://github.com/advisories/GHSA-jjf5-wx3j-3fv7</id>
        <link href="https://github.com/advisories/GHSA-jjf5-wx3j-3fv7"/>
        <updated>2022-05-25T22:54:52.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package convict before 6.2.3. This is a bypass of <a href="https://security.snyk.io/vuln/SNYK-JS-CONVICT-2340604">CVE-2022-22143</a>. The <a href="https://github.com/mozilla/node-convict/commit/3b86be087d8f14681a9c889d45da7fe3ad9cd880">fix</a> introduced, relies on the startsWith method and does not prevent the vulnerability: before splitting the path, it checks if it starts with <strong>proto</strong> or this.constructor.prototype. To bypass this check it's possible to prepend the dangerous paths with any string value followed by a dot, like for example foo.<strong>proto</strong> or foo.this.constructor.prototype.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21190">https://nvd.nist.gov/vuln/detail/CVE-2022-21190</a></li>
<li><a href="https://github.com/mozilla/node-convict/commit/1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75">https://github.com/mozilla/node-convict/commit/1ea0ab19c5208f66509e1c43b0d0f21c1fd29b75</a></li>
<li><a href="https://gist.github.com/dellalibera/cebce20e51410acebff1f46afdc89808">https://gist.github.com/dellalibera/cebce20e51410acebff1f46afdc89808</a></li>
<li><a href="https://github.com/mozilla/node-convict/blob/3b86be087d8f14681a9c889d45da7fe3ad9cd880/packages/convict/src/main.js%23L571">https://github.com/mozilla/node-convict/blob/3b86be087d8f14681a9c889d45da7fe3ad9cd880/packages/convict/src/main.js%23L571</a></li>
<li><a href="https://github.com/mozilla/node-convict/blob/master/CHANGELOG.md%23623---2022-05-07">https://github.com/mozilla/node-convict/blob/master/CHANGELOG.md%23623---2022-05-07</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-CONVICT-2774757">https://snyk.io/vuln/SNYK-JS-CONVICT-2774757</a></li>
<li><a href="https://github.com/advisories/GHSA-jjf5-wx3j-3fv7">https://github.com/advisories/GHSA-jjf5-wx3j-3fv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjf5-wx3j-3fv7</uri>
        </author>
        <published>2022-05-14T00:01:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sds] Prototype Pollution in sds]]></title>
        <id>https://github.com/advisories/GHSA-ph28-wwfj-fv7f</id>
        <link href="https://github.com/advisories/GHSA-ph28-wwfj-fv7f"/>
        <updated>2022-05-25T22:53:57.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package sds from 0.0.0. The library could be tricked into adding or modifying properties of the Object.prototype by abusing the set function located in js/set.js. <strong>Note:</strong> This vulnerability derives from an incomplete fix to CVE-2020-7618</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25862">https://nvd.nist.gov/vuln/detail/CVE-2022-25862</a></li>
<li><a href="https://github.com/monsterkodi/sds/blob/master/js/set.js">https://github.com/monsterkodi/sds/blob/master/js/set.js</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-SDS-2385944">https://snyk.io/vuln/SNYK-JS-SDS-2385944</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7618">https://nvd.nist.gov/vuln/detail/CVE-2020-7618</a></li>
<li><a href="https://github.com/advisories/GHSA-ph28-wwfj-fv7f">https://github.com/advisories/GHSA-ph28-wwfj-fv7f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ph28-wwfj-fv7f</uri>
        </author>
        <published>2022-05-14T00:01:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dicer] Crash in HeaderParser in dicer]]></title>
        <id>https://github.com/advisories/GHSA-wm7h-9275-46v2</id>
        <link href="https://github.com/advisories/GHSA-wm7h-9275-46v2"/>
        <updated>2022-05-25T20:23:49.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. A complete denial of service can be achived by sending the malicious form in a loop.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24434">https://nvd.nist.gov/vuln/detail/CVE-2022-24434</a></li>
<li><a href="https://github.com/mscdex/busboy/issues/250">https://github.com/mscdex/busboy/issues/250</a></li>
<li><a href="https://github.com/mscdex/dicer/pull/22">https://github.com/mscdex/dicer/pull/22</a></li>
<li><a href="https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac">https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-DICER-2311764">https://snyk.io/vuln/SNYK-JS-DICER-2311764</a></li>
<li><a href="https://github.com/advisories/GHSA-wm7h-9275-46v2">https://github.com/advisories/GHSA-wm7h-9275-46v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm7h-9275-46v2</uri>
        </author>
        <published>2022-05-21T00:00:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tiddlywiki] Code execution via SVG file upload in tiddlywiki]]></title>
        <id>https://github.com/advisories/GHSA-cr9c-rhq6-vh53</id>
        <link href="https://github.com/advisories/GHSA-cr9c-rhq6-vh53"/>
        <updated>2022-05-25T20:13:42.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the file upload module of Tiddlywiki5 v5.2.2 allows attackers to execute arbitrary code via a crafted SVG file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29351">https://nvd.nist.gov/vuln/detail/CVE-2022-29351</a></li>
<li><a href="https://github.com/Jermolene/TiddlyWiki5">https://github.com/Jermolene/TiddlyWiki5</a></li>
<li><a href="https://github.com/jimcola99/corruptsvgfile">https://github.com/jimcola99/corruptsvgfile</a></li>
<li><a href="https://www.youtube.com/watch?v=F_DBx4psWns">https://www.youtube.com/watch?v=F_DBx4psWns</a></li>
<li><a href="http://tiddlywiki5.com">http://tiddlywiki5.com</a></li>
<li><a href="https://github.com/advisories/GHSA-cr9c-rhq6-vh53">https://github.com/advisories/GHSA-cr9c-rhq6-vh53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cr9c-rhq6-vh53</uri>
        </author>
        <published>2022-05-17T00:01:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[workspace-tools] Command injection in workspace-tools]]></title>
        <id>https://github.com/advisories/GHSA-5875-m6jq-vf78</id>
        <link href="https://github.com/advisories/GHSA-5875-m6jq-vf78"/>
        <updated>2022-05-25T20:12:47.000Z</updated>
        <content type="html"><![CDATA[<p>The package workspace-tools before 0.18.4 is vulnerable to Command Injection via git argument injection. When calling the fetchRemoteBranch(remote: string, remoteBranch: string, cwd: string) function, both the remote and remoteBranch parameters are passed to the git fetch subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25865">https://nvd.nist.gov/vuln/detail/CVE-2022-25865</a></li>
<li><a href="https://github.com/microsoft/workspace-tools/pull/103">https://github.com/microsoft/workspace-tools/pull/103</a></li>
<li><a href="https://github.com/microsoft/workspace-tools/commit/9bc7e65ce497f87e1f363fd47b8f802f3d3cd978">https://github.com/microsoft/workspace-tools/commit/9bc7e65ce497f87e1f363fd47b8f802f3d3cd978</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-WORKSPACETOOLS-2421201">https://snyk.io/vuln/SNYK-JS-WORKSPACETOOLS-2421201</a></li>
<li><a href="https://github.com/advisories/GHSA-5875-m6jq-vf78">https://github.com/advisories/GHSA-5875-m6jq-vf78</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5875-m6jq-vf78</uri>
        </author>
        <published>2022-05-14T00:01:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cassproject] Missing Cryptographic Step in cassproject]]></title>
        <id>https://github.com/advisories/GHSA-7qcx-4p32-qcmx</id>
        <link href="https://github.com/advisories/GHSA-7qcx-4p32-qcmx"/>
        <updated>2022-05-25T19:34:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>CaSS Library, (npm:cassproject) has a missing cryptographic step when storing cryptographic keys that can allow a server administrator access to an account’s cryptographic keys. This affects CaSS servers using standalone username/password authentication, which uses a method that expects e2e cryptographic security of authorization credentials.</p>
<h3 id="patches">Patches</h3>
<p>The issue has been patched in 1.5.8, however, the vulnerable accounts are only resecured when the user next logs in using standalone authentication, as the data required to resecure the account is not available to the server.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The issue may be mitigated by using SSO or client side certificates to log in. Please note that SSO and client side certificate authentication does not have this expectation of no-knowledge credential access, and cryptographic keys are available to the server administrator.</p>
<h3 id="references">References</h3>
<p>There are no references at this time.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/cassproject/CASS/issues">the CaSS Project Github</a></li>
<li>Email us at <a href="mailto:cass@eduworks.com">the CaSS Project</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/cassproject/CASS/security/advisories/GHSA-7qcx-4p32-qcmx">https://github.com/cassproject/CASS/security/advisories/GHSA-7qcx-4p32-qcmx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29229">https://nvd.nist.gov/vuln/detail/CVE-2022-29229</a></li>
<li><a href="https://github.com/cassproject/CASS/releases/tag/1.5.8">https://github.com/cassproject/CASS/releases/tag/1.5.8</a></li>
<li><a href="https://github.com/advisories/GHSA-7qcx-4p32-qcmx">https://github.com/advisories/GHSA-7qcx-4p32-qcmx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7qcx-4p32-qcmx</uri>
        </author>
        <published>2022-05-25T19:34:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bootstrap-table] Cross-site Scripting in bootstrap-table]]></title>
        <id>https://github.com/advisories/GHSA-grw5-g9h2-wpg8</id>
        <link href="https://github.com/advisories/GHSA-grw5-g9h2-wpg8"/>
        <updated>2022-05-25T19:32:52.000Z</updated>
        <content type="html"><![CDATA[<p>Bootstrap Tables XSS vulnerability with Table Export plug-in when exportOptions: htmlContent is true in GitHub repository wenzhixin/bootstrap-table prior to 1.20.2. Disclosing session cookies, disclosing secure session data, exfiltrating data to third-parties.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1726">https://nvd.nist.gov/vuln/detail/CVE-2022-1726</a></li>
<li><a href="https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9">https://github.com/wenzhixin/bootstrap-table/commit/b4a1e5dd332be652e0bc376fd9256886cf4bbde9</a></li>
<li><a href="https://huntr.dev/bounties/9b85cc33-0395-4c31-8a42-3a94beb2efea">https://huntr.dev/bounties/9b85cc33-0395-4c31-8a42-3a94beb2efea</a></li>
<li><a href="https://github.com/advisories/GHSA-grw5-g9h2-wpg8">https://github.com/advisories/GHSA-grw5-g9h2-wpg8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-grw5-g9h2-wpg8</uri>
        </author>
        <published>2022-05-17T00:01:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[grunt] Race Condition in Grunt]]></title>
        <id>https://github.com/advisories/GHSA-rm36-94g8-835r</id>
        <link href="https://github.com/advisories/GHSA-rm36-94g8-835r"/>
        <updated>2022-05-25T19:30:12.000Z</updated>
        <content type="html"><![CDATA[<p>file.copy operations in GruntJS are vulnerable to a TOCTOU race condition leading to arbitrary file write in GitHub repository gruntjs/grunt prior to 1.5.3. This vulnerability is capable of arbitrary file writes which can lead to local privilege escalation to the GruntJS user if a lower-privileged user has write access to both source and destination directories as the lower-privileged user can create a symlink to the GruntJS user's .bashrc file or replace /etc/shadow file if the GruntJS user is root.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1537">https://nvd.nist.gov/vuln/detail/CVE-2022-1537</a></li>
<li><a href="https://github.com/gruntjs/grunt/commit/58016ffac5ed9338b63ecc2a63710f5027362bae">https://github.com/gruntjs/grunt/commit/58016ffac5ed9338b63ecc2a63710f5027362bae</a></li>
<li><a href="https://huntr.dev/bounties/0179c3e5-bc02-4fc9-8491-a1a319b51b4d">https://huntr.dev/bounties/0179c3e5-bc02-4fc9-8491-a1a319b51b4d</a></li>
<li><a href="https://github.com/advisories/GHSA-rm36-94g8-835r">https://github.com/advisories/GHSA-rm36-94g8-835r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rm36-94g8-835r</uri>
        </author>
        <published>2022-05-11T00:01:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[eventsource] Exposure of Sensitive Information in eventsource]]></title>
        <id>https://github.com/advisories/GHSA-6h5x-7c5m-7cr7</id>
        <link href="https://github.com/advisories/GHSA-6h5x-7c5m-7cr7"/>
        <updated>2022-05-25T19:28:44.000Z</updated>
        <content type="html"><![CDATA[<p>When fetching an url with a link to an external site (Redirect), the users Cookies &amp; Autorisation headers are leaked to the third party application. According to the same-origin-policy, the header should be "sanitized."</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1650">https://nvd.nist.gov/vuln/detail/CVE-2022-1650</a></li>
<li><a href="https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4">https://github.com/eventsource/eventsource/commit/10ee0c4881a6ba2fe65ec18ed195ac35889583c4</a></li>
<li><a href="https://huntr.dev/bounties/dc9e467f-be5d-4945-867d-1044d27e9b8e">https://huntr.dev/bounties/dc9e467f-be5d-4945-867d-1044d27e9b8e</a></li>
<li><a href="https://github.com/advisories/GHSA-6h5x-7c5m-7cr7">https://github.com/advisories/GHSA-6h5x-7c5m-7cr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6h5x-7c5m-7cr7</uri>
        </author>
        <published>2022-05-13T00:01:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froala-editor] DOM-based cross-site scripting in Froala Editor]]></title>
        <id>https://github.com/advisories/GHSA-h236-g5gh-vq6c</id>
        <link href="https://github.com/advisories/GHSA-h236-g5gh-vq6c"/>
        <updated>2022-05-25T15:10:55.000Z</updated>
        <content type="html"><![CDATA[<p>Froala WYSIWYG HTML Editor is a lightweight WYSIWYG HTML Editor written in JavaScript that enables rich text editing capabilities for web applications. A DOM-based cross-site scripting (XSS) vulnerability exists in versions before 3.2.3 because HTML code in the editor is not correctly sanitized when inserted into the DOM. This allows an attacker that can control the editor content to execute arbitrary JavaScript in the context of the victim’s session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-19935">https://nvd.nist.gov/vuln/detail/CVE-2019-19935</a></li>
<li><a href="https://blog.compass-security.com/2020/07/yet-another-froala-0-day-xss/">https://blog.compass-security.com/2020/07/yet-another-froala-0-day-xss/</a></li>
<li><a href="https://compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2020-004_DOM_XSS_in_Froala_WYSIWYG_HTML_Editor.txt">https://compass-security.com/fileadmin/Datein/Research/Advisories/CSNC-2020-004_DOM_XSS_in_Froala_WYSIWYG_HTML_Editor.txt</a></li>
<li><a href="https://snyk.io/vuln/npm:froala-editor">https://snyk.io/vuln/npm:froala-editor</a></li>
<li><a href="http://packetstormsecurity.com/files/158300/Froala-WYSIWYG-HTML-Editor-3.1.1-Cross-Site-Scripting.html">http://packetstormsecurity.com/files/158300/Froala-WYSIWYG-HTML-Editor-3.1.1-Cross-Site-Scripting.html</a></li>
<li><a href="https://froala.com/wysiwyg-editor/changelog/#3.2.3">https://froala.com/wysiwyg-editor/changelog/#3.2.3</a></li>
<li><a href="https://github.com/advisories/GHSA-h236-g5gh-vq6c">https://github.com/advisories/GHSA-h236-g5gh-vq6c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h236-g5gh-vq6c</uri>
        </author>
        <published>2022-02-10T23:32:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@chainsafe/lodestar] AttesterSlashing number overflow]]></title>
        <id>https://github.com/advisories/GHSA-cvj7-5f3c-9vg9</id>
        <link href="https://github.com/advisories/GHSA-cvj7-5f3c-9vg9"/>
        <updated>2022-05-26T20:47:13.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Possible consensus split given maliciously-crafted <code>AttesterSlashing</code> or <code>ProposerSlashing</code> being included on-chain.</p>
<p>Since we represent <code>uint64</code> values as native javascript <code>number</code>s, there is an issue when those variables with large (greater than 2^53) <code>uint64</code> values are included on chain. In those cases, Lodestar may view <em>valid</em> <code>AttesterSlashing</code> or <code>ProposerSlashing</code> as <em>invalid</em>, due to rounding errors in large <code>number</code> values. This causes a consensus split, where Lodestar nodes are forked away from the main network.</p>
<p>Similarly Lodestar may consider <em>invalid</em> <code>ProposerSlashing</code> as <em>valid</em>, thus including in proposed blocks that will be considered invalid by the network.</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/ChainSafe/lodestar/pull/3977">https://github.com/ChainSafe/lodestar/pull/3977</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Use <code>BigInt</code> to represent <code>Slot</code> and <code>Epoch</code> values in <code>AttesterSlashing</code> and <code>ProposerSlashing</code> objects. <code>BigInt</code> is too slow to be used in all <code>Slot</code> and <code>Epoch</code> cases, so we will carefully use <code>BigInt</code> just where necessary for consensus.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ChainSafe/lodestar/security/advisories/GHSA-cvj7-5f3c-9vg9">https://github.com/ChainSafe/lodestar/security/advisories/GHSA-cvj7-5f3c-9vg9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29219">https://nvd.nist.gov/vuln/detail/CVE-2022-29219</a></li>
<li><a href="https://github.com/ChainSafe/lodestar/pull/3977">https://github.com/ChainSafe/lodestar/pull/3977</a></li>
<li><a href="https://github.com/ChainSafe/lodestar/releases/tag/v0.36.0">https://github.com/ChainSafe/lodestar/releases/tag/v0.36.0</a></li>
<li><a href="https://github.com/advisories/GHSA-cvj7-5f3c-9vg9">https://github.com/advisories/GHSA-cvj7-5f3c-9vg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cvj7-5f3c-9vg9</uri>
        </author>
        <published>2022-05-24T22:21:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[code-server] Cross site scripting in code-server]]></title>
        <id>https://github.com/advisories/GHSA-2gp3-6c9p-jp7w</id>
        <link href="https://github.com/advisories/GHSA-2gp3-6c9p-jp7w"/>
        <updated>2022-05-24T22:18:10.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability exists in Coder Code-Server before 3.12.0, allows attackers to execute arbitrary code via crafted URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-42648">https://nvd.nist.gov/vuln/detail/CVE-2021-42648</a></li>
<li><a href="https://github.com/cdr/code-server/issues/4355">https://github.com/cdr/code-server/issues/4355</a></li>
<li><a href="https://github.com/coder/code-server/pull/4430">https://github.com/coder/code-server/pull/4430</a></li>
<li><a href="https://github.com/advisories/GHSA-2gp3-6c9p-jp7w">https://github.com/advisories/GHSA-2gp3-6c9p-jp7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2gp3-6c9p-jp7w</uri>
        </author>
        <published>2022-05-12T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next-auth] URL Redirection to Untrusted Site ('Open Redirect') in next-auth]]></title>
        <id>https://github.com/advisories/GHSA-q2mx-j4x2-2h74</id>
        <link href="https://github.com/advisories/GHSA-q2mx-j4x2-2h74"/>
        <updated>2022-05-24T22:03:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We found that this vulnerability is present when the developer is implementing an OAuth 1 provider (by extension, it means Twitter, which is the only built-in provider using OAuth 1), but <strong>upgrading</strong> is <strong>still recommended</strong>.</p>
<p><code>next-auth</code> v3 users before version 3.29.3 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. See our <a href="https://next-auth.js.org/getting-started/upgrade-v4">migration guide</a>)</p>
<p><code>next-auth</code> v4 users before version 4.3.3 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>We've released patches for this vulnerability in:</p>
<ul>
<li>v3 - <code>3.29.3</code></li>
<li>v4 - <code>4.3.3</code></li>
</ul>
<p>You can do:</p>
<pre><code class="language-sh">npm i next-auth@latest
</code></pre>
<p>or</p>
<pre><code class="language-sh">yarn add next-auth@latest
</code></pre>
<p>or</p>
<pre><code class="language-sh">pnpm add next-auth@latest
</code></pre>
<p>(This will update to the latest v4 version, but you can change  <code>latest</code> to <code>3</code> if you want to stay on v3.)</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are not able to upgrade for any reason, you can add the following configuration to your <code>callbacks</code> option:</p>
<pre><code class="language-ts">// async redirect(url, baseUrl) { // v3
async redirect({ url, baseUrl }) { // v4
    // Allows relative callback URLs
    if (url.startsWith("/")) return `${baseUrl}${url}`
    // Allows callback URLs on the same origin
    else if (new URL(url).origin === baseUrl) return url
    return baseUrl
}
</code></pre>
<h3 id="references">References</h3>
<p>This vulnerability was discovered right after <a href="https://github.com/nextauthjs/next-auth/security/advisories/GHSA-f9wg-5f46-cjmw">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-f9wg-5f46-cjmw</a> was published and is very similar in nature.</p>
<p>Read more about the <code>callbacks.redirect</code> option in the documentation: <a href="https://next-auth.js.org/configuration/callbacks#redirect-callback">https://next-auth.js.org/configuration/callbacks#redirect-callback</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any concerns, we request responsible disclosure, outlined here: <a href="https://next-auth.js.org/security#reporting-a-vulnerability">https://next-auth.js.org/security#reporting-a-vulnerability</a></p>
<h3 id="timeline">Timeline</h3>
<p>The issue was reported 2022 April 20th, a response was sent out to the reporter 8 minutes after, and a patch was produced within a few days.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nextauthjs/next-auth/security/advisories/GHSA-q2mx-j4x2-2h74">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-q2mx-j4x2-2h74</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29214">https://nvd.nist.gov/vuln/detail/CVE-2022-29214</a></li>
<li><a href="https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.3.3">https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.3.3</a></li>
<li><a href="https://github.com/advisories/GHSA-q2mx-j4x2-2h74">https://github.com/advisories/GHSA-q2mx-j4x2-2h74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2mx-j4x2-2h74</uri>
        </author>
        <published>2022-05-24T22:03:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[next-auth] URL Redirection to Untrusted Site ('Open Redirect') in next-auth]]></title>
        <id>https://github.com/advisories/GHSA-q2mx-j4x2-2h74</id>
        <link href="https://github.com/advisories/GHSA-q2mx-j4x2-2h74"/>
        <updated>2022-05-24T22:03:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>We found that this vulnerability is present when the developer is implementing an OAuth 1 provider (by extension, it means Twitter, which is the only built-in provider using OAuth 1), but <strong>upgrading</strong> is <strong>still recommended</strong>.</p>
<p><code>next-auth</code> v3 users before version 3.29.3 are impacted. (We recommend upgrading to v4, as v3 is considered unmaintained. See our <a href="https://next-auth.js.org/getting-started/upgrade-v4">migration guide</a>)</p>
<p><code>next-auth</code> v4 users before version 4.3.3 are impacted.</p>
<h3 id="patches">Patches</h3>
<p>We've released patches for this vulnerability in:</p>
<ul>
<li>v3 - <code>3.29.3</code></li>
<li>v4 - <code>4.3.3</code></li>
</ul>
<p>You can do:</p>
<pre><code class="language-sh">npm i next-auth@latest
</code></pre>
<p>or</p>
<pre><code class="language-sh">yarn add next-auth@latest
</code></pre>
<p>or</p>
<pre><code class="language-sh">pnpm add next-auth@latest
</code></pre>
<p>(This will update to the latest v4 version, but you can change  <code>latest</code> to <code>3</code> if you want to stay on v3.)</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are not able to upgrade for any reason, you can add the following configuration to your <code>callbacks</code> option:</p>
<pre><code class="language-ts">// async redirect(url, baseUrl) { // v3
async redirect({ url, baseUrl }) { // v4
    // Allows relative callback URLs
    if (url.startsWith("/")) return `${baseUrl}${url}`
    // Allows callback URLs on the same origin
    else if (new URL(url).origin === baseUrl) return url
    return baseUrl
}
</code></pre>
<h3 id="references">References</h3>
<p>This vulnerability was discovered right after <a href="https://github.com/nextauthjs/next-auth/security/advisories/GHSA-f9wg-5f46-cjmw">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-f9wg-5f46-cjmw</a> was published and is very similar in nature.</p>
<p>Read more about the <code>callbacks.redirect</code> option in the documentation: <a href="https://next-auth.js.org/configuration/callbacks#redirect-callback">https://next-auth.js.org/configuration/callbacks#redirect-callback</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any concerns, we request responsible disclosure, outlined here: <a href="https://next-auth.js.org/security#reporting-a-vulnerability">https://next-auth.js.org/security#reporting-a-vulnerability</a></p>
<h3 id="timeline">Timeline</h3>
<p>The issue was reported 2022 April 20th, a response was sent out to the reporter 8 minutes after, and a patch was produced within a few days.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nextauthjs/next-auth/security/advisories/GHSA-q2mx-j4x2-2h74">https://github.com/nextauthjs/next-auth/security/advisories/GHSA-q2mx-j4x2-2h74</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29214">https://nvd.nist.gov/vuln/detail/CVE-2022-29214</a></li>
<li><a href="https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.3.3">https://github.com/nextauthjs/next-auth/releases/tag/next-auth%40v4.3.3</a></li>
<li><a href="https://github.com/advisories/GHSA-q2mx-j4x2-2h74">https://github.com/advisories/GHSA-q2mx-j4x2-2h74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2mx-j4x2-2h74</uri>
        </author>
        <published>2022-05-24T22:03:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bignum] Uncaught Exception in bignum]]></title>
        <id>https://github.com/advisories/GHSA-6429-3g3w-6mw5</id>
        <link href="https://github.com/advisories/GHSA-6429-3g3w-6mw5"/>
        <updated>2022-05-24T20:58:05.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the npm package bignum are vulnerable to Denial of Service (DoS) due to a type-check exception in V8. When verifying the type of the second argument to the .powm function, V8 will crash regardless of Node try/catch blocks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25324">https://nvd.nist.gov/vuln/detail/CVE-2022-25324</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-BIGNUM-2388581">https://snyk.io/vuln/SNYK-JS-BIGNUM-2388581</a></li>
<li><a href="https://github.com/justmoon/node-bignum/blob/ef2e02533e598d6df8421000033c4753cde89ee2/index.js#L111">https://github.com/justmoon/node-bignum/blob/ef2e02533e598d6df8421000033c4753cde89ee2/index.js#L111</a></li>
<li><a href="https://github.com/advisories/GHSA-6429-3g3w-6mw5">https://github.com/advisories/GHSA-6429-3g3w-6mw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6429-3g3w-6mw5</uri>
        </author>
        <published>2022-05-07T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[auth0-lock] Cross-site Scripting in Auth0 Lock]]></title>
        <id>https://github.com/advisories/GHSA-7ww6-75fj-jcj7</id>
        <link href="https://github.com/advisories/GHSA-7ww6-75fj-jcj7"/>
        <updated>2022-05-24T20:49:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="overview">Overview</h3>
<p>In versions before and including <code>11.32.2</code>, when the “additional signup fields” feature <a href="https://github.com/auth0/lock#additional-sign-up-fields">is configured</a>, a malicious actor can inject invalidated HTML code into these additional fields, which is then stored in the service <code>user_metdata</code> payload (using the <code>name</code> property).</p>
<p>Verification emails, when applicable, are generated using this metadata. It is therefor possible for an actor to craft a malicious link by injecting HTML, which is then rendered as the recipient's name within the delivered email template.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<p>You are impacted by this vulnerability if you are using <code>auth0-lock</code> version <code>11.32.2</code> or lower and are using the “additional signup fields” feature in your application.</p>
<h3 id="how-to-fix-that">How to fix that?</h3>
<p>Upgrade to version <code>11.33.0</code>.</p>
<h3 id="will-this-update-impact-my-users">Will this update impact my users?</h3>
<p>Additional signup fields that have been added to the signup tab on Lock will have HTML tags stripped from user input from version <code>11.33.0</code> onwards. The user will not receive any validation warning or feedback, but backend data will no longer include HTML.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/lock/security/advisories/GHSA-7ww6-75fj-jcj7">https://github.com/auth0/lock/security/advisories/GHSA-7ww6-75fj-jcj7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29172">https://nvd.nist.gov/vuln/detail/CVE-2022-29172</a></li>
<li><a href="https://github.com/auth0/lock/commit/79ae557d331274b114848150f19832ae341771b1">https://github.com/auth0/lock/commit/79ae557d331274b114848150f19832ae341771b1</a></li>
<li><a href="https://github.com/advisories/GHSA-7ww6-75fj-jcj7">https://github.com/advisories/GHSA-7ww6-75fj-jcj7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7ww6-75fj-jcj7</uri>
        </author>
        <published>2022-05-24T20:49:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[jquery.json-viewer] Cross-site Scripting in jquery.json-viewer]]></title>
        <id>https://github.com/advisories/GHSA-qp2q-6h9j-jg2r</id>
        <link href="https://github.com/advisories/GHSA-qp2q-6h9j-jg2r"/>
        <updated>2022-05-23T21:18:25.000Z</updated>
        <content type="html"><![CDATA[<p>The jquery.json-viewer library before version 1.5.0 for Node.js does not properly escape characters such as &lt; in a JSON object, as demonstrated by a SCRIPT element.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-30241">https://nvd.nist.gov/vuln/detail/CVE-2022-30241</a></li>
<li><a href="https://github.com/abodelot/jquery.json-viewer/pull/26">https://github.com/abodelot/jquery.json-viewer/pull/26</a></li>
<li><a href="https://www.npmjs.com/package/jquery.json-viewer">https://www.npmjs.com/package/jquery.json-viewer</a></li>
<li><a href="https://github.com/abodelot/jquery.json-viewer/releases/tag/v1.5.0">https://github.com/abodelot/jquery.json-viewer/releases/tag/v1.5.0</a></li>
<li><a href="https://github.com/advisories/GHSA-qp2q-6h9j-jg2r">https://github.com/advisories/GHSA-qp2q-6h9j-jg2r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qp2q-6h9j-jg2r</uri>
        </author>
        <published>2022-05-05T00:00:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[hawk] Uncontrolled Resource Consumption in Hawk]]></title>
        <id>https://github.com/advisories/GHSA-44pw-h2cw-w3vq</id>
        <link href="https://github.com/advisories/GHSA-44pw-h2cw-w3vq"/>
        <updated>2022-05-23T20:18:15.000Z</updated>
        <content type="html"><![CDATA[<p>Hawk is an HTTP authentication scheme providing mechanisms for making authenticated HTTP requests with partial cryptographic verification of the request and response, covering the HTTP method, request URI, host, and optionally the request payload. Hawk used a regular expression to parse <code>Host</code> HTTP header (<code>Hawk.utils.parseHost()</code>), which was subject to regular expression DoS attack - meaning each added character in the attacker's input increases the computation time exponentially. <code>parseHost()</code> was patched in <code>9.0.1</code> to use built-in <code>URL</code> class to parse hostname instead.<code>Hawk.authenticate()</code> accepts <code>options</code> argument. If that contains <code>host</code> and <code>port</code>, those would be used instead of a call to <code>utils.parseHost()</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mozilla/hawk/security/advisories/GHSA-44pw-h2cw-w3vq">https://github.com/mozilla/hawk/security/advisories/GHSA-44pw-h2cw-w3vq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29167">https://nvd.nist.gov/vuln/detail/CVE-2022-29167</a></li>
<li><a href="https://github.com/mozilla/hawk/pull/286">https://github.com/mozilla/hawk/pull/286</a></li>
<li><a href="https://github.com/advisories/GHSA-44pw-h2cw-w3vq">https://github.com/advisories/GHSA-44pw-h2cw-w3vq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-44pw-h2cw-w3vq</uri>
        </author>
        <published>2022-05-23T20:18:14.000Z</published>
    </entry>
</feed>