<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/npm.rss</id>
    <title>Security Advisory for JavaScript packages hosted at npmjs.com</title>
    <updated>2023-08-01T18:01:41.586Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Anpm"/>
    <subtitle>Security Advisory for JavaScript packages hosted at npmjs.com on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[@pnpm/win-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linuxstatic-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linux-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linux-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/exe] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pnpm] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/cafs] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/win-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/macos-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linuxstatic-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linux-x64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/linux-arm64] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@pnpm/exe] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pnpm] pnpm incorrectly parses tar archives relative to specification]]></title>
        <id>https://github.com/advisories/GHSA-5r98-f33j-g8h7</id>
        <link href="https://github.com/advisories/GHSA-5r98-f33j-g8h7"/>
        <updated>2023-08-01T17:00:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It is possible to construct a tarball that, when installed via npm or parsed by the registry is safe, but when installed via pnpm is malicious, due to how pnpm parses tar archives.</p>
<h3 id="details">Details</h3>
<p>The TAR format is an append-only archive format, and as such, the specification for how to update a file is to add a new record to the end with the updated version of the file. This means that it is completely valid for an archive to contain multiple copies of, say, <code>package.json</code>, and the expected behavior when extracting is that all versions other than the last get ignored.</p>
<p>This is further complicated by that during tarball extraction, all package managers are configured to drop the first path component, so collisions can be created simply by using multiple root folders in the archive, even without performing updates.</p>
<p>When pnpm extracts a tar archive via tar-stream, it appears to extract only the <em>first</em> file of a given name and discards all subsequent files with the same name.</p>
<h3 id="poc">PoC</h3>
<p>Create a root folder with the following layout:</p>
<ul>
<li><code>a/package.json</code></li>
<li><code>package/package.json</code></li>
<li><code>z/package.json</code></li>
</ul>
<p>File contents:</p>
<h4 id="apackagejson">a/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^15"
    }
}
</code></pre>
<h4 id="packagepackagejson">package/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is a bad version of a test package",
    "dependencies": {
        "react": "^16"
    }
}
</code></pre>
<h4 id="zpackagejson">z/package.json</h4>
<pre><code class="language-json">{
    "name": "test-package",
    "version": "0.1.0",
    "description": "This is the good version of a test package",
    "dependencies": {
        "react": "^17"
    }
}
</code></pre>
<p>Then use the tar binary to produce a tarball (working directory is the root folder):
<code>tar -c -z --format ustar -f package.tgz a package z</code>
The order of the folders at the end matters; whichever one is last will end up being the package.json that wins when extracted by npm; the one that is first will be the one that wins when extracted by pnpm.</p>
<p>Install the tarball via the <code>file:</code> protocol.</p>
<p>Observe that with npm, the lockfile has <code>react@17</code>, while with pnpm it has <code>react@15</code>.</p>
<h3 id="impact">Impact</h3>
<p>This can result in a package that appears safe on the npm registry or when installed via npm being replaced with a compromised or malicious version when installed via pnpm.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7">https://github.com/pnpm/pnpm/security/advisories/GHSA-5r98-f33j-g8h7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37478">https://nvd.nist.gov/vuln/detail/CVE-2023-37478</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v7.33.4">https://github.com/pnpm/pnpm/releases/tag/v7.33.4</a></li>
<li><a href="https://github.com/pnpm/pnpm/releases/tag/v8.6.8">https://github.com/pnpm/pnpm/releases/tag/v8.6.8</a></li>
<li><a href="https://github.com/advisories/GHSA-5r98-f33j-g8h7">https://github.com/advisories/GHSA-5r98-f33j-g8h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5r98-f33j-g8h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-01T17:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[@simonsmith/cypress-image-snapshot] @simonsmith/cypress-image-snapshothas fix for insecure snapshot file names]]></title>
        <id>https://github.com/advisories/GHSA-vxjg-hchx-cc4g</id>
        <link href="https://github.com/advisories/GHSA-vxjg-hchx-cc4g"/>
        <updated>2023-08-01T16:59:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>It's possible for a user to pass a relative file path for the snapshot name and reach outside of the project directory into the machine running the test. Example:</p>
<pre><code class="language-js">  cy.get('h1').matchImageSnapshot('../../../ignore-relative-dirs')
</code></pre>
<p>The above will create an <code>ignore-relative-dirs.png</code> three levels up</p>
<h3 id="patches">Patches</h3>
<p>Fixed in <code>8.0.2</code></p>
<h3 id="workarounds">Workarounds</h3>
<p>Validate all the existing uses of <code>matchImageSnapshot</code> to ensure correct use of the filename argument. Example:</p>
<pre><code class="language-js">    // snapshot name will be the test title
    cy.matchImageSnapshot();

    // snapshot name will be the name passed in
    cy.matchImageSnapshot('login');
</code></pre>
<h3 id="references">References</h3>
<p><a href="https://github.com/simonsmith/cypress-image-snapshot/issues/15">https://github.com/simonsmith/cypress-image-snapshot/issues/15</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/simonsmith/cypress-image-snapshot/security/advisories/GHSA-vxjg-hchx-cc4g">https://github.com/simonsmith/cypress-image-snapshot/security/advisories/GHSA-vxjg-hchx-cc4g</a></li>
<li><a href="https://github.com/simonsmith/cypress-image-snapshot/issues/15">https://github.com/simonsmith/cypress-image-snapshot/issues/15</a></li>
<li><a href="https://github.com/simonsmith/cypress-image-snapshot/commit/ef49519795daf5183f4fac6f3136e194f20f39f4">https://github.com/simonsmith/cypress-image-snapshot/commit/ef49519795daf5183f4fac6f3136e194f20f39f4</a></li>
<li><a href="https://github.com/simonsmith/cypress-image-snapshot/releases/tag/8.0.2">https://github.com/simonsmith/cypress-image-snapshot/releases/tag/8.0.2</a></li>
<li><a href="https://github.com/advisories/GHSA-vxjg-hchx-cc4g">https://github.com/advisories/GHSA-vxjg-hchx-cc4g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxjg-hchx-cc4g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-01T16:59:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fs-git] fs-git command injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wp3j-gv53-4pg8</id>
        <link href="https://github.com/advisories/GHSA-wp3j-gv53-4pg8"/>
        <updated>2023-07-31T22:09:52.000Z</updated>
        <content type="html"><![CDATA[<p>fs-git is a file system like api for git repository. The fs-git version 1.0.1 module relies on child_process.exec, however, the buildCommand method used to construct exec strings does not properly sanitize data and is vulnerable to command injection across all methods that use it and call exec.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000451">https://nvd.nist.gov/vuln/detail/CVE-2017-1000451</a></li>
<li><a href="https://nodesecurity.io/advisories/360">https://nodesecurity.io/advisories/360</a></li>
<li><a href="https://github.com/vvakame/fs-git/commit/eb5f70efa5cfbff1ab299fa7daaa5de549243998">https://github.com/vvakame/fs-git/commit/eb5f70efa5cfbff1ab299fa7daaa5de549243998</a></li>
<li><a href="https://github.com/advisories/GHSA-wp3j-gv53-4pg8">https://github.com/advisories/GHSA-wp3j-gv53-4pg8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wp3j-gv53-4pg8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:41:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gethue] Cloudera HUE Account Enumeration]]></title>
        <id>https://github.com/advisories/GHSA-rxfp-8jmr-xc95</id>
        <link href="https://github.com/advisories/GHSA-rxfp-8jmr-xc95"/>
        <updated>2023-07-31T21:10:09.000Z</updated>
        <content type="html"><![CDATA[<p>Cloudera HUE 3.9.0 and earlier allows remote attackers to enumerate user accounts via a request to <code>desktop/api/users/autocomplete</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-4947">https://nvd.nist.gov/vuln/detail/CVE-2016-4947</a></li>
<li><a href="http://2016.hack.lu/archive/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf">http://2016.hack.lu/archive/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf</a></li>
<li><a href="https://web.archive.org/web/20210123183622/http://www.securityfocus.com/bid/93880">https://web.archive.org/web/20210123183622/http://www.securityfocus.com/bid/93880</a></li>
<li><a href="https://github.com/advisories/GHSA-rxfp-8jmr-xc95">https://github.com/advisories/GHSA-rxfp-8jmr-xc95</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rxfp-8jmr-xc95</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T02:56:17.000Z</published>
    </entry>
</feed>