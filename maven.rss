<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-03-17T00:03:40.066Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[cn.hippo4j:hippo4j-core] Exposure of Sensitive Information in OpenGoofy Hippo4j]]></title>
        <id>https://github.com/advisories/GHSA-xg89-vvwp-9c27</id>
        <link href="https://github.com/advisories/GHSA-xg89-vvwp-9c27"/>
        <updated>2023-03-16T18:36:09.000Z</updated>
        <content type="html"><![CDATA[<p>Insecure Permissions vulnerability found in OpenGoofy Hippo4j v.1.4.3 allows attacker toescalate privileges via the AddUser method of the UserController function in Tenant Management module.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27095">https://nvd.nist.gov/vuln/detail/CVE-2023-27095</a></li>
<li><a href="https://github.com/opengoofy/hippo4j/issues/1061">https://github.com/opengoofy/hippo4j/issues/1061</a></li>
<li><a href="https://github.com/advisories/GHSA-xg89-vvwp-9c27">https://github.com/advisories/GHSA-xg89-vvwp-9c27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg89-vvwp-9c27</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-16T03:30:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.fasterxml.jackson.core:jackson-databind] Uncontrolled Resource Consumption in Jackson-databind]]></title>
        <id>https://github.com/advisories/GHSA-jjjh-jjxp-wpff</id>
        <link href="https://github.com/advisories/GHSA-jjjh-jjxp-wpff"/>
        <updated>2023-03-16T16:40:56.000Z</updated>
        <content type="html"><![CDATA[<p>In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4.1 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.1, and 2.14.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42003">https://nvd.nist.gov/vuln/detail/CVE-2022-42003</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/3590">https://github.com/FasterXML/jackson-databind/issues/3590</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33">https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/blob/2.13/release-notes/VERSION-2.x">https://github.com/FasterXML/jackson-databind/blob/2.13/release-notes/VERSION-2.x</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-21">https://security.gentoo.org/glsa/202210-21</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/3627">https://github.com/FasterXML/jackson-databind/issues/3627</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea">https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5283">https://www.debian.org/security/2022/dsa-5283</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html">https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221124-0004/">https://security.netapp.com/advisory/ntap-20221124-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-jjjh-jjxp-wpff">https://github.com/advisories/GHSA-jjjh-jjxp-wpff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjjh-jjxp-wpff</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-03T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.fasterxml.jackson.core:jackson-databind] Uncontrolled Resource Consumption in Jackson-databind]]></title>
        <id>https://github.com/advisories/GHSA-jjjh-jjxp-wpff</id>
        <link href="https://github.com/advisories/GHSA-jjjh-jjxp-wpff"/>
        <updated>2023-03-16T16:40:56.000Z</updated>
        <content type="html"><![CDATA[<p>In FasterXML jackson-databind before 2.12.7.1 and in 2.13.x before 2.13.4.1 resource exhaustion can occur because of a lack of a check in primitive value deserializers to avoid deep wrapper array nesting, when the UNWRAP_SINGLE_VALUE_ARRAYS feature is enabled. This was patched in 2.12.7.1, 2.13.4.1, and 2.14.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42003">https://nvd.nist.gov/vuln/detail/CVE-2022-42003</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/3590">https://github.com/FasterXML/jackson-databind/issues/3590</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33">https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33</a></li>
<li><a href="https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/blob/2.13/release-notes/VERSION-2.x">https://github.com/FasterXML/jackson-databind/blob/2.13/release-notes/VERSION-2.x</a></li>
<li><a href="https://security.gentoo.org/glsa/202210-21">https://security.gentoo.org/glsa/202210-21</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/issues/3627">https://github.com/FasterXML/jackson-databind/issues/3627</a></li>
<li><a href="https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea">https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5283">https://www.debian.org/security/2022/dsa-5283</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html">https://lists.debian.org/debian-lts-announce/2022/11/msg00035.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221124-0004/">https://security.netapp.com/advisory/ntap-20221124-0004/</a></li>
<li><a href="https://github.com/advisories/GHSA-jjjh-jjxp-wpff">https://github.com/advisories/GHSA-jjjh-jjxp-wpff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjjh-jjxp-wpff</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-03T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core]  Information disclosure through error stack traces related to agents ]]></title>
        <id>https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</id>
        <link href="https://github.com/advisories/GHSA-rrgp-c2w8-6vg6"/>
        <updated>2023-03-16T16:02:11.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.393 and earlier, LTS 2.375.3 and earlier prints an error stack trace on agent-related pages when agent connections are broken, potentially revealing information about Jenkins configuration that is otherwise inaccessible to attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27904">https://nvd.nist.gov/vuln/detail/CVE-2023-27904</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-2120">https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-2120</a></li>
<li><a href="https://github.com/advisories/GHSA-rrgp-c2w8-6vg6">https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-10T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core]  Information disclosure through error stack traces related to agents ]]></title>
        <id>https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</id>
        <link href="https://github.com/advisories/GHSA-rrgp-c2w8-6vg6"/>
        <updated>2023-03-16T16:02:11.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.393 and earlier, LTS 2.375.3 and earlier prints an error stack trace on agent-related pages when agent connections are broken, potentially revealing information about Jenkins configuration that is otherwise inaccessible to attackers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27904">https://nvd.nist.gov/vuln/detail/CVE-2023-27904</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-2120">https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-2120</a></li>
<li><a href="https://github.com/advisories/GHSA-rrgp-c2w8-6vg6">https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrgp-c2w8-6vg6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-10T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Incorrect Authorization in Jenkins Core]]></title>
        <id>https://github.com/advisories/GHSA-584m-7r4m-8j6v</id>
        <link href="https://github.com/advisories/GHSA-584m-7r4m-8j6v"/>
        <updated>2023-03-16T16:01:01.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.393 and earlier, LTS 2.375.3 and earlier creates a temporary file in the default temporary directory with the default permissions for newly created files when uploading a file parameter through the CLI, potentially allowing attackers with access to the Jenkins controller file system to read and write the file before it is used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27903">https://nvd.nist.gov/vuln/detail/CVE-2023-27903</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3058">https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3058</a></li>
<li><a href="https://github.com/advisories/GHSA-584m-7r4m-8j6v">https://github.com/advisories/GHSA-584m-7r4m-8j6v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-584m-7r4m-8j6v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-10T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Incorrect Authorization in Jenkins Core]]></title>
        <id>https://github.com/advisories/GHSA-584m-7r4m-8j6v</id>
        <link href="https://github.com/advisories/GHSA-584m-7r4m-8j6v"/>
        <updated>2023-03-16T16:01:01.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.393 and earlier, LTS 2.375.3 and earlier creates a temporary file in the default temporary directory with the default permissions for newly created files when uploading a file parameter through the CLI, potentially allowing attackers with access to the Jenkins controller file system to read and write the file before it is used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27903">https://nvd.nist.gov/vuln/detail/CVE-2023-27903</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3058">https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3058</a></li>
<li><a href="https://github.com/advisories/GHSA-584m-7r4m-8j6v">https://github.com/advisories/GHSA-584m-7r4m-8j6v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-584m-7r4m-8j6v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-03-10T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci:update-center2] Cross site scripting vulnerability in update-center2 ]]></title>
        <id>https://github.com/advisories/GHSA-pqg3-xfx2-fmqp</id>
        <link href="https://github.com/advisories/GHSA-pqg3-xfx2-fmqp"/>
        <updated>2023-03-16T16:00:46.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins update-center2 3.13 and 3.14 renders the required Jenkins core version on plugin download index pages without sanitization, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers able to provide a plugin for hosting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-27905">https://nvd.nist.gov/vuln/detail/CVE-2023-27905</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3063">https://www.jenkins.io/security/advisory/2023-03-08/#SECURITY-3063</a></li>
<li><a href="https://github.com/advisories/GHSA-pqg3-xfx2-fmqp">https://github.com/advisories/GHSA-pqg3-xfx2-fmqp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pqg3-xfx2-fmqp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-10T21:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.eclipse.birt:org.eclipse.birt.report.viewer] Improper Input Validation In Eclipse BIRT]]></title>
        <id>https://github.com/advisories/GHSA-4grc-q4fj-45p8</id>
        <link href="https://github.com/advisories/GHSA-4grc-q4fj-45p8"/>
        <updated>2023-03-16T13:26:42.000Z</updated>
        <content type="html"><![CDATA[<p>In Eclipse BIRT, starting from version 2.6.2, the default configuration allowed to retrieve a report from the same host using an absolute HTTP path for the report parameter (e.g. __report=<a href="http://xyz.com/report.rptdesign">http://xyz.com/report.rptdesign</a>). If the host indicated in the __report parameter matched the HTTP Host header value, the report would be retrieved. However, the Host header can be tampered with on some configurations where no virtual hosts are put in place (e.g. in the default configuration of Apache Tomcat) or when the default host points to the BIRT server. This vulnerability was patched on Eclipse BIRT 4.13.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0100">https://nvd.nist.gov/vuln/detail/CVE-2023-0100</a></li>
<li><a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=580391">https://bugs.eclipse.org/bugs/show_bug.cgi?id=580391</a></li>
<li><a href="https://github.com/eclipse/birt/pull/1165">https://github.com/eclipse/birt/pull/1165</a></li>
<li><a href="https://github.com/advisories/GHSA-4grc-q4fj-45p8">https://github.com/advisories/GHSA-4grc-q4fj-45p8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4grc-q4fj-45p8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-15T15:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.logging.log4j:log4j-core] Apache Log4j 1.x (EOL) allows Denial of Service (DoS)]]></title>
        <id>https://github.com/advisories/GHSA-vp98-w2p3-mv35</id>
        <link href="https://github.com/advisories/GHSA-vp98-w2p3-mv35"/>
        <updated>2023-03-15T19:17:07.000Z</updated>
        <content type="html"><![CDATA[<p>** UNSUPPORTED WHEN ASSIGNED ** When using the Chainsaw or SocketAppender components with Log4j 1.x on JRE less than 1.7, an attacker that manages to cause a logging entry involving a specially-crafted (ie, deeply nested) hashmap or hashtable (depending on which logging component is in use) to be processed could exhaust the available memory in the virtual machine and achieve Denial of Service when the object is deserialized. This issue affects Apache Log4j before 2. Affected users are recommended to update to Log4j 2.x. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-26464">https://nvd.nist.gov/vuln/detail/CVE-2023-26464</a></li>
<li><a href="https://lists.apache.org/thread/wkx6grrcjkh86crr49p4blc1v1nflj3t">https://lists.apache.org/thread/wkx6grrcjkh86crr49p4blc1v1nflj3t</a></li>
<li><a href="https://github.com/advisories/GHSA-vp98-w2p3-mv35">https://github.com/advisories/GHSA-vp98-w2p3-mv35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vp98-w2p3-mv35</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-03-10T15:30:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.geode:geode-core] Apache Geode vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</id>
        <link href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg"/>
        <updated>2023-03-10T23:21:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Geode versions up to 1.12.5, 1.13.4 and 1.14.0 are vulnerable to a deserialization of untrusted data flaw when using JMX over RMI on Java 8. Any user still on Java 8 who wishes to protect against deserialization attacks involving JMX or RMI should upgrade to Apache Geode 1.15 and Java 11. If upgrading to Java 11 is not possible, then upgrade to Apache Geode 1.15 and specify "--J=-Dgeode.enableGlobalSerialFilter=true" when starting any Locators or Servers. Follow the documentation for details on specifying any user classes that may be serialized/deserialized with the "serializable-object-filter" configuration option. Using a global serial filter will impact performance.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-37021">https://nvd.nist.gov/vuln/detail/CVE-2022-37021</a></li>
<li><a href="https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr">https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr</a></li>
<li><a href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg">https://github.com/advisories/GHSA-q4q3-r45f-7gwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-01T00:00:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.geode:geode-core] Apache Geode vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</id>
        <link href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg"/>
        <updated>2023-03-10T23:21:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Geode versions up to 1.12.5, 1.13.4 and 1.14.0 are vulnerable to a deserialization of untrusted data flaw when using JMX over RMI on Java 8. Any user still on Java 8 who wishes to protect against deserialization attacks involving JMX or RMI should upgrade to Apache Geode 1.15 and Java 11. If upgrading to Java 11 is not possible, then upgrade to Apache Geode 1.15 and specify "--J=-Dgeode.enableGlobalSerialFilter=true" when starting any Locators or Servers. Follow the documentation for details on specifying any user classes that may be serialized/deserialized with the "serializable-object-filter" configuration option. Using a global serial filter will impact performance.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-37021">https://nvd.nist.gov/vuln/detail/CVE-2022-37021</a></li>
<li><a href="https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr">https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr</a></li>
<li><a href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg">https://github.com/advisories/GHSA-q4q3-r45f-7gwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-01T00:00:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.geode:geode-core] Apache Geode vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</id>
        <link href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg"/>
        <updated>2023-03-10T23:21:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Geode versions up to 1.12.5, 1.13.4 and 1.14.0 are vulnerable to a deserialization of untrusted data flaw when using JMX over RMI on Java 8. Any user still on Java 8 who wishes to protect against deserialization attacks involving JMX or RMI should upgrade to Apache Geode 1.15 and Java 11. If upgrading to Java 11 is not possible, then upgrade to Apache Geode 1.15 and specify "--J=-Dgeode.enableGlobalSerialFilter=true" when starting any Locators or Servers. Follow the documentation for details on specifying any user classes that may be serialized/deserialized with the "serializable-object-filter" configuration option. Using a global serial filter will impact performance.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-37021">https://nvd.nist.gov/vuln/detail/CVE-2022-37021</a></li>
<li><a href="https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr">https://lists.apache.org/thread/qrvhmytsshsk5xcb68pwccw3y6m8o8nr</a></li>
<li><a href="https://github.com/advisories/GHSA-q4q3-r45f-7gwg">https://github.com/advisories/GHSA-q4q3-r45f-7gwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4q3-r45f-7gwg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-09-01T00:00:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.validation] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.utilities] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r5] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r4b] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.convertors] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.core] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-03-16T16:23:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jruby:jruby-stdlib] RubyGems Deserialization of Untrusted Data vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qj2w-mw2r-pv39</id>
        <link href="https://github.com/advisories/GHSA-qj2w-mw2r-pv39"/>
        <updated>2023-03-10T02:36:47.000Z</updated>
        <content type="html"><![CDATA[<p>RubyGems version Ruby 2.2 series: 2.2.9 and earlier, Ruby 2.3 series: 2.3.6 and earlier, Ruby 2.4 series: 2.4.3 and earlier, Ruby 2.5 series: 2.5.0 and earlier, prior to trunk revision 62422 contains a Deserialization of Untrusted Data vulnerability in owner command that can result in code execution. This attack requires the victim to run the <code>gem owner</code> command on a gem with a specially crafted YAML file. This vulnerability is fixed in 2.7.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1000074">https://nvd.nist.gov/vuln/detail/CVE-2018-1000074</a></li>
<li><a href="https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d">https://github.com/rubygems/rubygems/commit/254e3d0ee873c008c0b74e8b8abcbdab4caa0a6d</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3729">https://access.redhat.com/errata/RHSA-2018:3729</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3730">https://access.redhat.com/errata/RHSA-2018:3730</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3731">https://access.redhat.com/errata/RHSA-2018:3731</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2028">https://access.redhat.com/errata/RHSA-2019:2028</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0542">https://access.redhat.com/errata/RHSA-2020:0542</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0591">https://access.redhat.com/errata/RHSA-2020:0591</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2020:0663">https://access.redhat.com/errata/RHSA-2020:0663</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2018/04/msg00017.html">https://lists.debian.org/debian-lts-announce/2018/04/msg00017.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2018/08/msg00028.html">https://lists.debian.org/debian-lts-announce/2018/08/msg00028.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/05/msg00028.html">https://lists.debian.org/debian-lts-announce/2019/05/msg00028.html</a></li>
<li><a href="https://usn.ubuntu.com/3621-1/">https://usn.ubuntu.com/3621-1/</a></li>
<li><a href="https://usn.ubuntu.com/3621-2/">https://usn.ubuntu.com/3621-2/</a></li>
<li><a href="https://usn.ubuntu.com/3685-1/">https://usn.ubuntu.com/3685-1/</a></li>
<li><a href="https://www.debian.org/security/2018/dsa-4219">https://www.debian.org/security/2018/dsa-4219</a></li>
<li><a href="https://www.debian.org/security/2018/dsa-4259">https://www.debian.org/security/2018/dsa-4259</a></li>
<li><a href="http://blog.rubygems.org/2018/02/15/2.7.6-released.html">http://blog.rubygems.org/2018/02/15/2.7.6-released.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00036.html">http://lists.opensuse.org/opensuse-security-announce/2019-07/msg00036.html</a></li>
<li><a href="https://github.com/jruby/jruby/commit/0b06b48ab4432237ce5fc1bef47f2c6bcf7843f7">https://github.com/jruby/jruby/commit/0b06b48ab4432237ce5fc1bef47f2c6bcf7843f7</a></li>
<li><a href="https://github.com/rubygems/rubygems/commit/5971b486d4dbb2bad5d3445b3801c456eb0ce183">https://github.com/rubygems/rubygems/commit/5971b486d4dbb2bad5d3445b3801c456eb0ce183</a></li>
<li><a href="https://github.com/advisories/GHSA-qj2w-mw2r-pv39">https://github.com/advisories/GHSA-qj2w-mw2r-pv39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qj2w-mw2r-pv39</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T01:01:12.000Z</published>
    </entry>
</feed>