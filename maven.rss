<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-01-25T19:01:21.784Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.expressme:JOpenId] Observable timing discrepancy in JOpenId]]></title>
        <id>https://github.com/advisories/GHSA-m4f8-p58g-j8mj</id>
        <link href="https://github.com/advisories/GHSA-m4f8-p58g-j8mj"/>
        <updated>2023-01-25T02:56:53.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in michaelliao jopenid. Affected is the function getAuthentication of the file JOpenId/src/org/expressme/openid/OpenIdManager.java. The manipulation leads to observable timing discrepancy. Upgrading to version 1.08 is able to address this issue. The name of the patch is c9baaa976b684637f0d5a50268e91846a7a719ab. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218460.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2010-10006">https://nvd.nist.gov/vuln/detail/CVE-2010-10006</a></li>
<li><a href="https://github.com/michaelliao/jopenid/commit/c9baaa976b684637f0d5a50268e91846a7a719ab">https://github.com/michaelliao/jopenid/commit/c9baaa976b684637f0d5a50268e91846a7a719ab</a></li>
<li><a href="https://github.com/michaelliao/jopenid/releases/tag/JOpenId-1.08">https://github.com/michaelliao/jopenid/releases/tag/JOpenId-1.08</a></li>
<li><a href="https://vuldb.com/?ctiid.218460">https://vuldb.com/?ctiid.218460</a></li>
<li><a href="https://vuldb.com/?id.218460">https://vuldb.com/?id.218460</a></li>
<li><a href="https://github.com/advisories/GHSA-m4f8-p58g-j8mj">https://github.com/advisories/GHSA-m4f8-p58g-j8mj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4f8-p58g-j8mj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-18T00:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opensearch:opensearch] Field-level security issue with .keyword fields in OpenSearch]]></title>
        <id>https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</id>
        <link href="https://github.com/advisories/GHSA-v3cg-7r9h-r2g6"/>
        <updated>2023-01-24T20:54:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="advisory-title-field-level-security-issue-with-keyword-fields">Advisory title: Field-level security issue with .keyword fields</h3>
<h3 id="affected-versions">Affected versions:</h3>
<p>OpenSearch 1.0.0-1.3.7 and 2.0.0-2.4.1</p>
<h3 id="patched-versions">Patched versions:</h3>
<p>OpenSearch 1.3.8 and 2.5.0</p>
<h3 id="impact">Impact:</h3>
<p>There is an issue in the implementation of field-level security (FLS) and field masking where rules written to explicitly exclude fields are not correctly applied for certain queries that rely on their auto-generated .keyword fields.</p>
<p>This issue is only present for authenticated users with read access to the indexes containing the restricted fields.</p>
<h3 id="workaround">Workaround:</h3>
<p>FLS rules that use explicit exclusions can be written to grant explicit access instead. Policies authored in this way are not subject to this issue.</p>
<h3 id="patches">Patches:</h3>
<p>OpenSearch versions 1.3.8 and 2.5.0 contain a fix for this issue.</p>
<h3 id="for-more-information">For more information:</h3>
<p>If you have any questions or comments about this advisory, please contact AWS/Amazon Security via our issue reporting page (<a href="https://aws.amazon.com/security/vulnerability-reporting/">https://aws.amazon.com/security/vulnerability-reporting/</a>) or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opensearch-project/security/security/advisories/GHSA-v3cg-7r9h-r2g6">https://github.com/opensearch-project/security/security/advisories/GHSA-v3cg-7r9h-r2g6</a></li>
<li><a href="https://github.com/advisories/GHSA-v3cg-7r9h-r2g6">https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-24T20:54:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opensearch:opensearch] Field-level security issue with .keyword fields in OpenSearch]]></title>
        <id>https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</id>
        <link href="https://github.com/advisories/GHSA-v3cg-7r9h-r2g6"/>
        <updated>2023-01-24T20:54:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="advisory-title-field-level-security-issue-with-keyword-fields">Advisory title: Field-level security issue with .keyword fields</h3>
<h3 id="affected-versions">Affected versions:</h3>
<p>OpenSearch 1.0.0-1.3.7 and 2.0.0-2.4.1</p>
<h3 id="patched-versions">Patched versions:</h3>
<p>OpenSearch 1.3.8 and 2.5.0</p>
<h3 id="impact">Impact:</h3>
<p>There is an issue in the implementation of field-level security (FLS) and field masking where rules written to explicitly exclude fields are not correctly applied for certain queries that rely on their auto-generated .keyword fields.</p>
<p>This issue is only present for authenticated users with read access to the indexes containing the restricted fields.</p>
<h3 id="workaround">Workaround:</h3>
<p>FLS rules that use explicit exclusions can be written to grant explicit access instead. Policies authored in this way are not subject to this issue.</p>
<h3 id="patches">Patches:</h3>
<p>OpenSearch versions 1.3.8 and 2.5.0 contain a fix for this issue.</p>
<h3 id="for-more-information">For more information:</h3>
<p>If you have any questions or comments about this advisory, please contact AWS/Amazon Security via our issue reporting page (<a href="https://aws.amazon.com/security/vulnerability-reporting/">https://aws.amazon.com/security/vulnerability-reporting/</a>) or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opensearch-project/security/security/advisories/GHSA-v3cg-7r9h-r2g6">https://github.com/opensearch-project/security/security/advisories/GHSA-v3cg-7r9h-r2g6</a></li>
<li><a href="https://github.com/advisories/GHSA-v3cg-7r9h-r2g6">https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3cg-7r9h-r2g6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-24T20:54:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opensearch:opensearch] Issue with whitespace in JWT roles in OpenSearch]]></title>
        <id>https://github.com/advisories/GHSA-864v-6qj7-62qj</id>
        <link href="https://github.com/advisories/GHSA-864v-6qj7-62qj"/>
        <updated>2023-01-24T20:47:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="advisory-title-issue-with-whitespace-in-jwt-roles">Advisory title: Issue with whitespace in JWT roles</h3>
<h3 id="affected-versions">Affected versions:</h3>
<p>OpenSearch 1.0.0-1.3.7 and 2.0.0-2.4.1</p>
<h3 id="patched-versions">Patched versions:</h3>
<p>OpenSearch 1.3.8 and 2.5.0</p>
<h3 id="impact">Impact:</h3>
<p>OpenSearch uses JWTs to store role claims obtained from the Identity Provider (IdP) when the authentication backend is SAML or OpenID Connect. There is an issue in how those claims are processed from the JWTs where the leading and trailing whitespace is trimmed, allowing users to potentially claim roles they are not assigned to if any role matches the whitespace-stripped version of the roles they are a member of.</p>
<p>This issue is only present for authenticated users, and it requires either the existence of roles that match, not considering leading/trailing whitespace, or the ability for users to create said matching roles. In addition, the Identity Provider must allow leading and trailing spaces in role names.</p>
<h3 id="patches">Patches:</h3>
<p>OpenSearch versions 1.3.8 and 2.5.0 contain a fix for this issue.</p>
<h3 id="for-more-information">For more information:</h3>
<p>If you have any questions or comments about this advisory, please contact AWS/Amazon Security via our issue reporting page (<a href="https://aws.amazon.com/security/vulnerability-reporting/">https://aws.amazon.com/security/vulnerability-reporting/</a>) or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opensearch-project/security/security/advisories/GHSA-864v-6qj7-62qj">https://github.com/opensearch-project/security/security/advisories/GHSA-864v-6qj7-62qj</a></li>
<li><a href="https://github.com/advisories/GHSA-864v-6qj7-62qj">https://github.com/advisories/GHSA-864v-6qj7-62qj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-864v-6qj7-62qj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-24T20:47:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opensearch:opensearch] Issue with whitespace in JWT roles in OpenSearch]]></title>
        <id>https://github.com/advisories/GHSA-864v-6qj7-62qj</id>
        <link href="https://github.com/advisories/GHSA-864v-6qj7-62qj"/>
        <updated>2023-01-24T20:47:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="advisory-title-issue-with-whitespace-in-jwt-roles">Advisory title: Issue with whitespace in JWT roles</h3>
<h3 id="affected-versions">Affected versions:</h3>
<p>OpenSearch 1.0.0-1.3.7 and 2.0.0-2.4.1</p>
<h3 id="patched-versions">Patched versions:</h3>
<p>OpenSearch 1.3.8 and 2.5.0</p>
<h3 id="impact">Impact:</h3>
<p>OpenSearch uses JWTs to store role claims obtained from the Identity Provider (IdP) when the authentication backend is SAML or OpenID Connect. There is an issue in how those claims are processed from the JWTs where the leading and trailing whitespace is trimmed, allowing users to potentially claim roles they are not assigned to if any role matches the whitespace-stripped version of the roles they are a member of.</p>
<p>This issue is only present for authenticated users, and it requires either the existence of roles that match, not considering leading/trailing whitespace, or the ability for users to create said matching roles. In addition, the Identity Provider must allow leading and trailing spaces in role names.</p>
<h3 id="patches">Patches:</h3>
<p>OpenSearch versions 1.3.8 and 2.5.0 contain a fix for this issue.</p>
<h3 id="for-more-information">For more information:</h3>
<p>If you have any questions or comments about this advisory, please contact AWS/Amazon Security via our issue reporting page (<a href="https://aws.amazon.com/security/vulnerability-reporting/">https://aws.amazon.com/security/vulnerability-reporting/</a>) or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/opensearch-project/security/security/advisories/GHSA-864v-6qj7-62qj">https://github.com/opensearch-project/security/security/advisories/GHSA-864v-6qj7-62qj</a></li>
<li><a href="https://github.com/advisories/GHSA-864v-6qj7-62qj">https://github.com/advisories/GHSA-864v-6qj7-62qj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-864v-6qj7-62qj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-24T20:47:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.core]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-01-23T22:05:30.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hl7.fhir.publisher:org.hl7.fhir.publisher]  MITM based Zip Slip in `org.hl7.fhir.publisher:org.hl7.fhir.publisher`]]></title>
        <id>https://github.com/advisories/GHSA-xr8x-pxm6-prjg</id>
        <link href="https://github.com/advisories/GHSA-xr8x-pxm6-prjg"/>
        <updated>2023-01-23T22:04:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-publisherjava">Vulnerability 1: <code>Publisher.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.</p>
<p><a href="https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/Publisher.java#L3598-L3610">https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/Publisher.java#L3598-L3610</a></p>
<h4 id="vulnerability-2-websourceproviderjava">Vulnerability 2: <code>WebSourceProvider.java</code></h4>
<p>There is a check for malicious zip entries here, but it is not covered by test cases and could potentially be reverted in future changes.</p>
<p><a href="https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/web/WebSourceProvider.java#L104-L112">https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/web/WebSourceProvider.java#L104-L112</a></p>
<h4 id="vulnerability-3-zipfetcherjava">Vulnerability 3: <code>ZipFetcher.java</code></h4>
<p>This retains the path for Zip files in FetchedFile entries, which could later be used to output malicious entries to another compressed file or file system.</p>
<p><a href="https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/ZipFetcher.java#L57-L106">https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/ZipFetcher.java#L57-L106</a></p>
<h4 id="vulnerability-4-igpack2npmconvertorjava">Vulnerability 4: <code>IGPack2NpmConvertor.java</code></h4>
<p>The loadZip method retains the path for entries in the zip file, which could later be used to output malicious entries to another compressed file or file system.</p>
<p><a href="https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/IGPack2NpmConvertor.java#L442-L463">https://github.com/HL7/fhir-ig-publisher/blob/87313e92de6dd6cea816449e0edd225e054a7891/org.hl7.fhir.publisher.core/src/main/java/org/hl7/fhir/igtools/publisher/IGPack2NpmConvertor.java#L442-L463</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://github.com/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/advisories/GHSA-xr8x-pxm6-prjg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xr8x-pxm6-prjg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:04:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.webjars.npm:cookiejar] cookiejar Regular Expression Denial of Service via Cookie.parse function]]></title>
        <id>https://github.com/advisories/GHSA-h452-7996-h45h</id>
        <link href="https://github.com/advisories/GHSA-h452-7996-h45h"/>
        <updated>2023-01-23T16:59:53.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package cookiejar before 2.1.4 are vulnerable to Regular Expression Denial of Service (ReDoS) via the <code>Cookie.parse</code> function and other aspects of the API, which use an insecure regular expression for parsing cookie values. Applications could be stalled for extended periods of time if untrusted input is passed to cookie values or attempted to parse from request headers.</p>
<p>Proof of concept:</p>
<pre><code>ts\nconst { CookieJar } = require("cookiejar");

const jar = new CookieJar();

const start = performance.now();

const attack = "a" + "t".repeat(50_000);
jar.setCookie(attack);

console.log(`CookieJar.setCookie(): ${performance.now() - start}ms`);
</code></pre>
<pre><code>CookieJar.setCookie(): 2963.214399999939ms
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25901">https://nvd.nist.gov/vuln/detail/CVE-2022-25901</a></li>
<li><a href="https://github.com/bmeck/node-cookiejar/pull/39">https://github.com/bmeck/node-cookiejar/pull/39</a></li>
<li><a href="https://github.com/bmeck/node-cookiejar/pull/39/commits/eaa00021caf6ae09449dde826108153b578348e5">https://github.com/bmeck/node-cookiejar/pull/39/commits/eaa00021caf6ae09449dde826108153b578348e5</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3176681">https://security.snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-3176681</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JS-COOKIEJAR-3149984">https://security.snyk.io/vuln/SNYK-JS-COOKIEJAR-3149984</a></li>
<li><a href="https://github.com/bmeck/node-cookiejar/blob/master/cookiejar.js#23L73">https://github.com/bmeck/node-cookiejar/blob/master/cookiejar.js#23L73</a></li>
<li><a href="https://github.com/advisories/GHSA-h452-7996-h45h">https://github.com/advisories/GHSA-h452-7996-h45h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h452-7996-h45h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-18T06:31:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:p4] Missing permission checks in Jenkins P4 Plugin]]></title>
        <id>https://github.com/advisories/GHSA-f9v6-p7hp-c3qx</id>
        <link href="https://github.com/advisories/GHSA-f9v6-p7hp-c3qx"/>
        <updated>2023-01-22T05:05:34.000Z</updated>
        <content type="html"><![CDATA[<p>A missing permission check in Jenkins P4 Plugin 1.10.10 and earlier allows attackers with Overall/Read permission to trigger builds or add labels in the Perforce repository.</p>
<p>P4 Plugin 1.10.11 appropriate user permissions for the affected HTTP endpoints.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2142">https://nvd.nist.gov/vuln/detail/CVE-2020-2142</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-03-09/#SECURITY-1765">https://jenkins.io/security/advisory/2020-03-09/#SECURITY-1765</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/03/09/1">http://www.openwall.com/lists/oss-security/2020/03/09/1</a></li>
<li><a href="https://github.com/advisories/GHSA-f9v6-p7hp-c3qx">https://github.com/advisories/GHSA-f9v6-p7hp-c3qx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f9v6-p7hp-c3qx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:10:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jeecgframework.boot:jeecg-module-system] Jeecg-boot is vulnerable to SQL injection ]]></title>
        <id>https://github.com/advisories/GHSA-6w89-c65w-jx2c</id>
        <link href="https://github.com/advisories/GHSA-6w89-c65w-jx2c"/>
        <updated>2023-01-20T23:08:24.000Z</updated>
        <content type="html"><![CDATA[<p>Jeecg-boot v3.4.4 was discovered to contain a SQL injection vulnerability via the component <code>/sys/dict/queryTableData</code>. A patch was released in commit 0fc374.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-47105">https://nvd.nist.gov/vuln/detail/CVE-2022-47105</a></li>
<li><a href="https://github.com/jeecgboot/jeecg-boot/issues/4393">https://github.com/jeecgboot/jeecg-boot/issues/4393</a></li>
<li><a href="https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a">https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a</a></li>
<li><a href="https://github.com/advisories/GHSA-6w89-c65w-jx2c">https://github.com/advisories/GHSA-6w89-c65w-jx2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w89-c65w-jx2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-19T18:30:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jeecgframework.boot:jeecg-boot-base-core] Jeecg-boot is vulnerable to SQL injection ]]></title>
        <id>https://github.com/advisories/GHSA-6w89-c65w-jx2c</id>
        <link href="https://github.com/advisories/GHSA-6w89-c65w-jx2c"/>
        <updated>2023-01-20T23:08:24.000Z</updated>
        <content type="html"><![CDATA[<p>Jeecg-boot v3.4.4 was discovered to contain a SQL injection vulnerability via the component <code>/sys/dict/queryTableData</code>. A patch was released in commit 0fc374.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-47105">https://nvd.nist.gov/vuln/detail/CVE-2022-47105</a></li>
<li><a href="https://github.com/jeecgboot/jeecg-boot/issues/4393">https://github.com/jeecgboot/jeecg-boot/issues/4393</a></li>
<li><a href="https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a">https://github.com/jeecgboot/jeecg-boot/commit/0fc374de4745eac52620eeb8caf6a7b76127529a</a></li>
<li><a href="https://github.com/advisories/GHSA-6w89-c65w-jx2c">https://github.com/advisories/GHSA-6w89-c65w-jx2c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6w89-c65w-jx2c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-01-19T18:30:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.shiro:shiro-root] Apache Shiro Interpretation Conflict vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7cxr-h8wm-fg4c</id>
        <link href="https://github.com/advisories/GHSA-7cxr-h8wm-fg4c"/>
        <updated>2023-01-20T21:50:27.000Z</updated>
        <content type="html"><![CDATA[<p>When using Apache Shiro before 1.11.0 together with Spring Boot 2.6+, a specially crafted HTTP request may cause an authentication bypass. The authentication bypass occurs when Shiro and Spring Boot are using different pattern-matching techniques. Both Shiro and Spring Boot &lt; 2.6 default to Ant style pattern matching. Mitigation: Update to Apache Shiro 1.11.0, or set the following Spring Boot configuration value: <code>spring.mvc.pathmatch.matching-strategy = ant_path_matcher</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-22602">https://nvd.nist.gov/vuln/detail/CVE-2023-22602</a></li>
<li><a href="https://lists.apache.org/thread/dzj0k2smpzzgj6g666hrbrgsrlf9yhkl">https://lists.apache.org/thread/dzj0k2smpzzgj6g666hrbrgsrlf9yhkl</a></li>
<li><a href="https://github.com/advisories/GHSA-7cxr-h8wm-fg4c">https://github.com/advisories/GHSA-7cxr-h8wm-fg4c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cxr-h8wm-fg4c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-01-14T12:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.testng:testng] TestNG is vulnerable to Path Traversal]]></title>
        <id>https://github.com/advisories/GHSA-rc2q-x9mf-w3vf</id>
        <link href="https://github.com/advisories/GHSA-rc2q-x9mf-w3vf"/>
        <updated>2023-01-18T18:47:00.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in cbeust testng. It has been declared as critical. Affected by this vulnerability is the function <code>testngXmlExistsInJar</code> of the file <code>testng-core/src/main/java/org/testng/JarFileUtils.java</code> of the component <code>XML File Parser</code>. The manipulation leads to path traversal. The attack can be launched remotely. A patch is available in <a href="https://github.com/cbeust/testng/releases/tag/7.7.0">version 7.7.0</a> at commit 9150736cd2c123a6a3b60e6193630859f9f0422b. It is recommended to apply a patch to fix this issue. The patch was pushed into the master branch but no releases have yet been made with the patch included.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-4065">https://nvd.nist.gov/vuln/detail/CVE-2022-4065</a></li>
<li><a href="https://github.com/cbeust/testng/pull/2806">https://github.com/cbeust/testng/pull/2806</a></li>
<li><a href="https://github.com/cbeust/testng/commit/9150736cd2c123a6a3b60e6193630859f9f0422b">https://github.com/cbeust/testng/commit/9150736cd2c123a6a3b60e6193630859f9f0422b</a></li>
<li><a href="https://vuldb.com/?id.214027">https://vuldb.com/?id.214027</a></li>
<li><a href="https://github.com/cbeust/testng/releases/tag/7.7.0">https://github.com/cbeust/testng/releases/tag/7.7.0</a></li>
<li><a href="https://github.com/advisories/GHSA-rc2q-x9mf-w3vf">https://github.com/advisories/GHSA-rc2q-x9mf-w3vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rc2q-x9mf-w3vf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-19T21:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ru.yandex.jenkins.plugins.debuilder:debian-package-builder] Credentials stored in plain text by debian-package-builder Plugin]]></title>
        <id>https://github.com/advisories/GHSA-64jr-ggw8-h9jc</id>
        <link href="https://github.com/advisories/GHSA-64jr-ggw8-h9jc"/>
        <updated>2023-01-14T05:28:51.000Z</updated>
        <content type="html"><![CDATA[<p>debian-package-builder Plugin 1.6.11 and earlier stores a GPG passphrase unencrypted in its global configuration file <code>ru.yandex.jenkins.plugins.debuilder.DebianPackageBuilder.xml</code> on the Jenkins controller. This credential can be viewed by users with access to the Jenkins controller file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2125">https://nvd.nist.gov/vuln/detail/CVE-2020-2125</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1558">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1558</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-64jr-ggw8-h9jc">https://github.com/advisories/GHSA-64jr-ggw8-h9jc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-64jr-ggw8-h9jc</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.moded.extendedchoiceparameter:dynamic_extended_choice_parameter] Password stored in plain text by Dynamic Extended Choice Parameter Plugin]]></title>
        <id>https://github.com/advisories/GHSA-h6pp-v4j6-w76c</id>
        <link href="https://github.com/advisories/GHSA-h6pp-v4j6-w76c"/>
        <updated>2023-01-14T05:28:08.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Dynamic Extended Choice Parameter Plugin 1.0.1 and earlier stores a password unencrypted in job config.xml files on the Jenkins master where it can be viewed by users with Extended Read permission, or access to the master file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2124">https://nvd.nist.gov/vuln/detail/CVE-2020-2124</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1560">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1560</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-h6pp-v4j6-w76c">https://github.com/advisories/GHSA-h6pp-v4j6-w76c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6pp-v4j6-w76c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:radargun] RCE vulnerability in RadarGun Plugin]]></title>
        <id>https://github.com/advisories/GHSA-723p-9rcj-xv8j</id>
        <link href="https://github.com/advisories/GHSA-723p-9rcj-xv8j"/>
        <updated>2023-01-14T05:27:56.000Z</updated>
        <content type="html"><![CDATA[<p>RadarGun Plugin 1.7 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types. This results in a remote code execution vulnerability exploitable by users able to configure RadarGun Plugin’s build step.</p>
<p>RadarGun Plugin 1.8 configures its YAML parser to only instantiate safe types.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2123">https://nvd.nist.gov/vuln/detail/CVE-2020-2123</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1733">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1733</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-723p-9rcj-xv8j">https://github.com/advisories/GHSA-723p-9rcj-xv8j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-723p-9rcj-xv8j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:brakeman] Stored XSS vulnerability in Jenkins brakeman Plugin]]></title>
        <id>https://github.com/advisories/GHSA-7q9r-vhg2-789w</id>
        <link href="https://github.com/advisories/GHSA-7q9r-vhg2-789w"/>
        <updated>2023-01-14T05:27:44.000Z</updated>
        <content type="html"><![CDATA[<p>brakeman Plugin 0.12 and earlier did not escape values received from parsed JSON files when rendering them, resulting in a stored cross-site scripting vulnerability.</p>
<p>This vulnerability can be exploited by users able to control the Brakeman post-build step input data.\n\nbrakeman Plugin 0.13 escape affected values from the parsed file as they are recorded.</p>
<p>This fix is only applied to newly recorded data after a fixed version of the plugin is installed; historical data may still contain unsafe values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2122">https://nvd.nist.gov/vuln/detail/CVE-2020-2122</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1644">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1644</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-7q9r-vhg2-789w">https://github.com/advisories/GHSA-7q9r-vhg2-789w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7q9r-vhg2-789w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:google-kubernetes-engine] RCE vulnerability in Google Kubernetes Engine Plugin]]></title>
        <id>https://github.com/advisories/GHSA-wf76-qgqq-gcfj</id>
        <link href="https://github.com/advisories/GHSA-wf76-qgqq-gcfj"/>
        <updated>2023-01-14T05:27:31.000Z</updated>
        <content type="html"><![CDATA[<p>Google Kubernetes Engine Plugin 0.8.0 and earlier does not configure its YAML parser to prevent the instantiation of arbitrary types. This results in a remote code execution vulnerability exploitable by users able to provide YAML input files to Google Kubernetes Engine Plugin’s build step.</p>
<p>Google Kubernetes Engine Plugin 0.8.1 configures its YAML parser to only instantiate safe types.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2121">https://nvd.nist.gov/vuln/detail/CVE-2020-2121</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1731">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1731</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-wf76-qgqq-gcfj">https://github.com/advisories/GHSA-wf76-qgqq-gcfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wf76-qgqq-gcfj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:fitnesse] XXE vulnerability in FitNesse Plugin]]></title>
        <id>https://github.com/advisories/GHSA-c3cg-mv5w-cvw8</id>
        <link href="https://github.com/advisories/GHSA-c3cg-mv5w-cvw8"/>
        <updated>2023-01-14T05:27:21.000Z</updated>
        <content type="html"><![CDATA[<p>FitNesse Plugin 1.30 and earlier does not configure the XML parser to prevent XML external entity (XXE) attacks.</p>
<p>This allows a user able to control the input files for its post-build step to have Jenkins parse a crafted file that uses external entities for extraction of secrets from the Jenkins controller, server-side request forgery, or denial-of-service attacks.</p>
<p>FitNesse Plugin 1.31 disables external entity processing for its XML parser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2120">https://nvd.nist.gov/vuln/detail/CVE-2020-2120</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1751">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1751</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-c3cg-mv5w-cvw8">https://github.com/advisories/GHSA-c3cg-mv5w-cvw8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c3cg-mv5w-cvw8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:08:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:azure-ad] Client secret transmitted in plain text by Azure AD Plugin]]></title>
        <id>https://github.com/advisories/GHSA-vvg2-hg3c-mqj3</id>
        <link href="https://github.com/advisories/GHSA-vvg2-hg3c-mqj3"/>
        <updated>2023-01-14T05:27:08.000Z</updated>
        <content type="html"><![CDATA[<p>Azure AD Plugin stores a client secret in its global configuration.</p>
<p>While the credential is stored encrypted on disk, it is transmitted in plain text as part of the configuration form by Azure AD Plugin 1.1.2 and earlier. This can result in exposure of the credential through browser extensions, cross-site scripting vulnerabilities, and similar situations.</p>
<p>Azure AD Plugin 1.2.0 transmits the client secret in its global configuration encrypted.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2119">https://nvd.nist.gov/vuln/detail/CVE-2020-2119</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1717">https://jenkins.io/security/advisory/2020-02-12/#SECURITY-1717</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/02/12/3">http://www.openwall.com/lists/oss-security/2020/02/12/3</a></li>
<li><a href="https://github.com/advisories/GHSA-vvg2-hg3c-mqj3">https://github.com/advisories/GHSA-vvg2-hg3c-mqj3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvg2-hg3c-mqj3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T17:08:46.000Z</published>
    </entry>
</feed>