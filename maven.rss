<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2022-01-22T01:04:34.551Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[io.github.skylot:jadx-core] Improper Restriction of XML External Entity Reference in Skylot jadx]]></title>
        <id>https://github.com/advisories/GHSA-r8j4-96mx-rjcc</id>
        <link href="https://github.com/advisories/GHSA-r8j4-96mx-rjcc"/>
        <updated>2022-01-21T18:13:42.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Restriction of XML External Entity Reference in GitHub repository skylot/jadx prior to 1.3.2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0219">https://nvd.nist.gov/vuln/detail/CVE-2022-0219</a></li>
<li><a href="https://github.com/skylot/jadx/commit/d22db30166e7cb369d72be41382bb63ac8b81c52">https://github.com/skylot/jadx/commit/d22db30166e7cb369d72be41382bb63ac8b81c52</a></li>
<li><a href="https://huntr.dev/bounties/0d093863-29e8-4dd7-a885-64f76d50bf5e">https://huntr.dev/bounties/0d093863-29e8-4dd7-a885-64f76d50bf5e</a></li>
<li><a href="https://github.com/advisories/GHSA-r8j4-96mx-rjcc">https://github.com/advisories/GHSA-r8j4-96mx-rjcc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8j4-96mx-rjcc</uri>
        </author>
        <published>2022-01-21T18:13:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Cross-Site Request Forgery in Jenkins]]></title>
        <id>https://github.com/advisories/GHSA-p92q-7fhh-mq35</id>
        <link href="https://github.com/advisories/GHSA-p92q-7fhh-mq35"/>
        <updated>2022-01-21T23:37:57.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site request forgery (CSRF) vulnerability in Jenkins 2.329 and earlier, LTS 2.319.1 and earlier allows attackers to trigger build of job without parameters when no security realm is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-20612">https://nvd.nist.gov/vuln/detail/CVE-2022-20612</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2558">https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2558</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/12/6">http://www.openwall.com/lists/oss-security/2022/01/12/6</a></li>
<li><a href="https://www.jenkins.io/changelog-stable/#v2.319.2">https://www.jenkins.io/changelog-stable/#v2.319.2</a></li>
<li><a href="https://www.jenkins.io/changelog/#v2.330">https://www.jenkins.io/changelog/#v2.330</a></li>
<li><a href="https://github.com/advisories/GHSA-p92q-7fhh-mq35">https://github.com/advisories/GHSA-p92q-7fhh-mq35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p92q-7fhh-mq35</uri>
        </author>
        <published>2022-01-21T23:37:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.h2database:h2] Arbitrary code execution in H2 Console]]></title>
        <id>https://github.com/advisories/GHSA-45hx-wfhj-473x</id>
        <link href="https://github.com/advisories/GHSA-45hx-wfhj-473x"/>
        <updated>2022-01-21T23:07:39.000Z</updated>
        <content type="html"><![CDATA[<p>H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23221">https://nvd.nist.gov/vuln/detail/CVE-2022-23221</a></li>
<li><a href="https://github.com/h2database/h2database/releases/tag/version-2.1.210">https://github.com/h2database/h2database/releases/tag/version-2.1.210</a></li>
<li><a href="https://github.com/h2database/h2database/security/advisories">https://github.com/h2database/h2database/security/advisories</a></li>
<li><a href="https://twitter.com/d0nkey_man/status/1483824727936450564">https://twitter.com/d0nkey_man/status/1483824727936450564</a></li>
<li><a href="https://github.com/advisories/GHSA-45hx-wfhj-473x">https://github.com/advisories/GHSA-45hx-wfhj-473x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45hx-wfhj-473x</uri>
        </author>
        <published>2022-01-21T23:07:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.jenkins.plugins:warnings-ng] Path Traversal in Jenkins Warnings Next Generation Plugin]]></title>
        <id>https://github.com/advisories/GHSA-rvh4-g2rj-hr9c</id>
        <link href="https://github.com/advisories/GHSA-rvh4-g2rj-hr9c"/>
        <updated>2022-01-21T23:38:05.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Warnings Next Generation Plugin 9.10.2 and earlier does not restrict the name of a file when configuring custom ID, allowing attackers with Item/Configure permission to write and read specific files with a hard-coded suffix on the Jenkins controller file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23107">https://nvd.nist.gov/vuln/detail/CVE-2022-23107</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2090">https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2090</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/12/6">http://www.openwall.com/lists/oss-security/2022/01/12/6</a></li>
<li><a href="https://github.com/jenkinsci/warnings-ng-plugin/releases/tag/v9.10.3">https://github.com/jenkinsci/warnings-ng-plugin/releases/tag/v9.10.3</a></li>
<li><a href="https://github.com/advisories/GHSA-rvh4-g2rj-hr9c">https://github.com/advisories/GHSA-rvh4-g2rj-hr9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rvh4-g2rj-hr9c</uri>
        </author>
        <published>2022-01-21T23:38:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Cross-Site Request Forgery in Jenkins]]></title>
        <id>https://github.com/advisories/GHSA-p92q-7fhh-mq35</id>
        <link href="https://github.com/advisories/GHSA-p92q-7fhh-mq35"/>
        <updated>2022-01-21T23:37:57.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site request forgery (CSRF) vulnerability in Jenkins 2.329 and earlier, LTS 2.319.1 and earlier allows attackers to trigger build of job without parameters when no security realm is set.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-20612">https://nvd.nist.gov/vuln/detail/CVE-2022-20612</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2558">https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2558</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/12/6">http://www.openwall.com/lists/oss-security/2022/01/12/6</a></li>
<li><a href="https://www.jenkins.io/changelog-stable/#v2.319.2">https://www.jenkins.io/changelog-stable/#v2.319.2</a></li>
<li><a href="https://www.jenkins.io/changelog/#v2.330">https://www.jenkins.io/changelog/#v2.330</a></li>
<li><a href="https://github.com/advisories/GHSA-p92q-7fhh-mq35">https://github.com/advisories/GHSA-p92q-7fhh-mq35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p92q-7fhh-mq35</uri>
        </author>
        <published>2022-01-21T23:37:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.jenkins:configuration-as-code] Observable Discrepancy and Observable Timing Discrepancy in Jenkins Configuration as Code Plugin]]></title>
        <id>https://github.com/advisories/GHSA-fpj7-9xm6-8hgr</id>
        <link href="https://github.com/advisories/GHSA-fpj7-9xm6-8hgr"/>
        <updated>2022-01-21T23:38:30.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Configuration as Code Plugin 1.55 and earlier used a non-constant time comparison function when validating an authentication token allowing attackers to use statistical methods to obtain a valid authentication token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23106">https://nvd.nist.gov/vuln/detail/CVE-2022-23106</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2141">https://www.jenkins.io/security/advisory/2022-01-12/#SECURITY-2141</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/12/6">http://www.openwall.com/lists/oss-security/2022/01/12/6</a></li>
<li><a href="https://github.com/advisories/GHSA-fpj7-9xm6-8hgr">https://github.com/advisories/GHSA-fpj7-9xm6-8hgr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fpj7-9xm6-8hgr</uri>
        </author>
        <published>2022-01-21T23:38:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[log4j:log4j] SQL Injection in Log4j 1.2.x]]></title>
        <id>https://github.com/advisories/GHSA-65fg-84f6-3jq3</id>
        <link href="https://github.com/advisories/GHSA-65fg-84f6-3jq3"/>
        <updated>2022-01-21T23:26:47.000Z</updated>
        <content type="html"><![CDATA[<p>By design, the JDBCAppender in Log4j 1.2.x accepts an SQL statement as a configuration parameter where the values to be inserted are converters from PatternLayout. The message converter, %m, is likely to always be included. This allows attackers to manipulate the SQL by entering crafted strings into input fields or headers of an application that are logged allowing unintended SQL queries to be executed. Note this issue only affects Log4j 1.x when specifically configured to use the JDBCAppender, which is not the default. Beginning in version 2.0-beta8, the JDBCAppender was re-introduced with proper support for parameterized SQL queries and further customization over the columns written to in logs. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23305">https://nvd.nist.gov/vuln/detail/CVE-2022-23305</a></li>
<li><a href="https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y">https://lists.apache.org/thread/pt6lh3pbsvxqlwlp4c5l798dv2hkc85y</a></li>
<li><a href="https://logging.apache.org/log4j/1.2/index.html">https://logging.apache.org/log4j/1.2/index.html</a></li>
<li><a href="https://github.com/advisories/GHSA-65fg-84f6-3jq3">https://github.com/advisories/GHSA-65fg-84f6-3jq3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-65fg-84f6-3jq3</uri>
        </author>
        <published>2022-01-21T23:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[log4j:log4j] Deserialization of Untrusted Data in Log4j 1.x]]></title>
        <id>https://github.com/advisories/GHSA-w9p3-5cr8-m3jj</id>
        <link href="https://github.com/advisories/GHSA-w9p3-5cr8-m3jj"/>
        <updated>2022-01-21T23:27:14.000Z</updated>
        <content type="html"><![CDATA[<p>JMSSink in all versions of Log4j 1.x is vulnerable to deserialization of untrusted data when the attacker has write access to the Log4j configuration or if the configuration references an LDAP service the attacker has access to. The attacker can provide a TopicConnectionFactoryBindingName configuration causing JMSSink to perform JNDI requests that result in remote code execution in a similar fashion to CVE-2021-4104. Note this issue only affects Log4j 1.x when specifically configured to use JMSSink, which is not the default. Apache Log4j 1.2 reached end of life in August 2015. Users should upgrade to Log4j 2 as it addresses numerous other issues from the previous versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23302">https://nvd.nist.gov/vuln/detail/CVE-2022-23302</a></li>
<li><a href="https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w">https://lists.apache.org/thread/bsr3l5qz4g0myrjhy9h67bcxodpkwj4w</a></li>
<li><a href="https://logging.apache.org/log4j/1.2/index.html">https://logging.apache.org/log4j/1.2/index.html</a></li>
<li><a href="https://github.com/advisories/GHSA-w9p3-5cr8-m3jj">https://github.com/advisories/GHSA-w9p3-5cr8-m3jj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9p3-5cr8-m3jj</uri>
        </author>
        <published>2022-01-21T23:27:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.micronaut:micronaut-http] Memory leak in micronaut-core]]></title>
        <id>https://github.com/advisories/GHSA-2457-2263-mm9f</id>
        <link href="https://github.com/advisories/GHSA-2457-2263-mm9f"/>
        <updated>2022-01-21T23:19:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Sending an invalid Content Type header leads to memory leak in <code>DefaultArgumentConversionContext</code> as this type is erroneously used in static state.</p>
<h3 id="patches">Patches</h3>
<p>The problem is patched in Micronaut 3.2.7 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The default content type binder can be replaced in an existing Micronaut application to mitigate the issue:</p>
<pre><code class="language-java">package example;

import java.util.List;
import io.micronaut.context.annotation.Replaces;
import io.micronaut.core.convert.ConversionService;
import io.micronaut.http.MediaType;
import io.micronaut.http.bind.DefaultRequestBinderRegistry;
import io.micronaut.http.bind.binders.RequestArgumentBinder;
import jakarta.inject.Singleton;

@Singleton
@Replaces(DefaultRequestBinderRegistry.class)
class FixedRequestBinderRegistry extends DefaultRequestBinderRegistry {

    public FixedRequestBinderRegistry(ConversionService conversionService,
                                      List&lt;RequestArgumentBinder&gt; binders) {
        super(conversionService, binders);
    }

    @Override
    protected void registerDefaultConverters(ConversionService&lt;?&gt; conversionService) {
        super.registerDefaultConverters(conversionService);
        conversionService.addConverter(CharSequence.class, MediaType.class, charSequence -&gt; {
            try {
                return MediaType.of(charSequence);
            } catch (IllegalArgumentException e) {
                return null;
            }
        });
    }
}
</code></pre>
<h3 id="references">References</h3>
<p>Commit that introduced the vulnerability <a href="https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3">https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/micronaut-projects/micronaut-core/issues">Micronaut Core</a></li>
<li>Email us at <a href="mailto:info@micronaut.io">info@micronaut.io</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/micronaut-projects/micronaut-core/security/advisories/GHSA-2457-2263-mm9f">https://github.com/micronaut-projects/micronaut-core/security/advisories/GHSA-2457-2263-mm9f</a></li>
<li><a href="https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3">https://github.com/micronaut-projects/micronaut-core/commit/b8ec32c311689667c69ae7d9f9c3b3a8abc96fe3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-21700">https://nvd.nist.gov/vuln/detail/CVE-2022-21700</a></li>
<li><a href="https://github.com/advisories/GHSA-2457-2263-mm9f">https://github.com/advisories/GHSA-2457-2263-mm9f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2457-2263-mm9f</uri>
        </author>
        <published>2022-01-21T23:19:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.upokecenter:cbor] Denial of service in CBOR library]]></title>
        <id>https://github.com/advisories/GHSA-fj2w-wfgv-mwq6</id>
        <link href="https://github.com/advisories/GHSA-fj2w-wfgv-mwq6"/>
        <updated>2022-01-21T23:21:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to this library's use of an inefficient algorithm, it is vulnerable to a denial of service attack when a maliciously crafted input is passed to <code>DecodeFromBytes</code> or other CBOR decoding mechanisms in this library.  </p>
<p>Affected versions <em>include</em> versions 4.0.0 through 4.5.0.</p>
<p>This vulnerability was privately reported to me.</p>
<h3 id="patches">Patches</h3>
<p>This issue has been fixed in version 4.5.1.  Users should use the latest version of this library.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Again, users should use the latest version of this library.</p>
<p>In the meantime, note that the inputs affected by this issue are all CBOR maps or contain CBOR maps.  An input that decodes to a single CBOR object is not capable of containing a CBOR map if—</p>
<ul>
<li>it begins with a byte other than 0x80 through 0xDF, or</li>
<li>it does not contain a byte in the range 0xa0 through 0xBF.</li>
</ul>
<p>Such an input is not affected by this vulnerability and an application can choose to perform this check before passing it to a CBOR decoding mechanism.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/peteroupc/CBOR-Java">the CBOR repository</a>.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/peteroupc/CBOR-Java/security/advisories/GHSA-fj2w-wfgv-mwq6">https://github.com/peteroupc/CBOR-Java/security/advisories/GHSA-fj2w-wfgv-mwq6</a></li>
<li><a href="https://github.com/advisories/GHSA-fj2w-wfgv-mwq6">https://github.com/advisories/GHSA-fj2w-wfgv-mwq6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fj2w-wfgv-mwq6</uri>
        </author>
        <published>2022-01-21T23:21:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.hazelcast:hazelcast] Security Advisory for "Log4Shell"]]></title>
        <id>https://github.com/advisories/GHSA-v57x-gxfj-484q</id>
        <link href="https://github.com/advisories/GHSA-v57x-gxfj-484q"/>
        <updated>2022-01-21T23:25:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.</p>
<p>This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). </p>
<p>This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.</p>
<p>Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.</p>
<p>Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.</p>
<p>However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.</p>
<h3 id="patches">Patches</h3>
<p>CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.</p>
<p>As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.</p>
<p>As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. </p>
<p>Hazelcast recommends upgrading to the latest versions available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that an upgrade is not an option, below mitigations can be applied.</p>
<h4 id="disabling-lookups-via-environment-variable">Disabling lookups via Environment Variable</h4>
<p>Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.</p>
<h4 id="disabling-lookups-in-log4j2-configuration">Disabling lookups in log4j2 configuration</h4>
<p>Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:</p>
<p>Users of Log4j 2.10 or greater may add <code>-Dlog4j2.formatMsgNoLookups=true </code>as a command line option or add <code>-Dlog4j2.formatMsgNoLookups=true</code> in a <code>log4j2.component.properties</code> file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify <code>%m{nolookups}</code> in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:</p>
<p><code>helm upgrade &lt;release-name&gt; hazelcast/hazelcast --set mancenter.javaOpts="&lt;javaOpts&gt; -Dlog4j2.formatMsgNoLookups=true"</code></p>
<p>Where  is the release name and  is existing java options user has added previously.</p>
<h4 id="removing-the-jndilookup-from-classpath">Removing the JndiLookup from classpath</h4>
<p>Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">https://nvd.nist.gov/vuln/detail/CVE-2021-45046</a>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44832">https://nvd.nist.gov/vuln/detail/CVE-2021-44832</a>
<a href="https://logging.apache.org/log4j/2.x/index.html">https://logging.apache.org/log4j/2.x/index.html</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/hazelcast/hazelcast">our repo</a></li>
<li>Slack us at <a href="https://slack.hazelcast.com/">Hazelcast Community Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q">https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q</a></li>
<li><a href="https://github.com/advisories/GHSA-v57x-gxfj-484q">https://github.com/advisories/GHSA-v57x-gxfj-484q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57x-gxfj-484q</uri>
        </author>
        <published>2022-01-21T23:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.hazelcast:hazelcast] Security Advisory for "Log4Shell"]]></title>
        <id>https://github.com/advisories/GHSA-v57x-gxfj-484q</id>
        <link href="https://github.com/advisories/GHSA-v57x-gxfj-484q"/>
        <updated>2022-01-21T23:25:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.</p>
<p>This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). </p>
<p>This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.</p>
<p>Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.</p>
<p>Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.</p>
<p>However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.</p>
<h3 id="patches">Patches</h3>
<p>CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.</p>
<p>As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.</p>
<p>As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. </p>
<p>Hazelcast recommends upgrading to the latest versions available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that an upgrade is not an option, below mitigations can be applied.</p>
<h4 id="disabling-lookups-via-environment-variable">Disabling lookups via Environment Variable</h4>
<p>Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.</p>
<h4 id="disabling-lookups-in-log4j2-configuration">Disabling lookups in log4j2 configuration</h4>
<p>Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:</p>
<p>Users of Log4j 2.10 or greater may add <code>-Dlog4j2.formatMsgNoLookups=true </code>as a command line option or add <code>-Dlog4j2.formatMsgNoLookups=true</code> in a <code>log4j2.component.properties</code> file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify <code>%m{nolookups}</code> in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:</p>
<p><code>helm upgrade &lt;release-name&gt; hazelcast/hazelcast --set mancenter.javaOpts="&lt;javaOpts&gt; -Dlog4j2.formatMsgNoLookups=true"</code></p>
<p>Where  is the release name and  is existing java options user has added previously.</p>
<h4 id="removing-the-jndilookup-from-classpath">Removing the JndiLookup from classpath</h4>
<p>Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">https://nvd.nist.gov/vuln/detail/CVE-2021-45046</a>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44832">https://nvd.nist.gov/vuln/detail/CVE-2021-44832</a>
<a href="https://logging.apache.org/log4j/2.x/index.html">https://logging.apache.org/log4j/2.x/index.html</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/hazelcast/hazelcast">our repo</a></li>
<li>Slack us at <a href="https://slack.hazelcast.com/">Hazelcast Community Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q">https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q</a></li>
<li><a href="https://github.com/advisories/GHSA-v57x-gxfj-484q">https://github.com/advisories/GHSA-v57x-gxfj-484q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57x-gxfj-484q</uri>
        </author>
        <published>2022-01-21T23:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.hazelcast:hazelcast] Security Advisory for "Log4Shell"]]></title>
        <id>https://github.com/advisories/GHSA-v57x-gxfj-484q</id>
        <link href="https://github.com/advisories/GHSA-v57x-gxfj-484q"/>
        <updated>2022-01-21T23:25:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.</p>
<p>This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). </p>
<p>This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.</p>
<p>Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.</p>
<p>Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.</p>
<p>However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.</p>
<h3 id="patches">Patches</h3>
<p>CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.</p>
<p>As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.</p>
<p>As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. </p>
<p>Hazelcast recommends upgrading to the latest versions available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that an upgrade is not an option, below mitigations can be applied.</p>
<h4 id="disabling-lookups-via-environment-variable">Disabling lookups via Environment Variable</h4>
<p>Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.</p>
<h4 id="disabling-lookups-in-log4j2-configuration">Disabling lookups in log4j2 configuration</h4>
<p>Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:</p>
<p>Users of Log4j 2.10 or greater may add <code>-Dlog4j2.formatMsgNoLookups=true </code>as a command line option or add <code>-Dlog4j2.formatMsgNoLookups=true</code> in a <code>log4j2.component.properties</code> file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify <code>%m{nolookups}</code> in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:</p>
<p><code>helm upgrade &lt;release-name&gt; hazelcast/hazelcast --set mancenter.javaOpts="&lt;javaOpts&gt; -Dlog4j2.formatMsgNoLookups=true"</code></p>
<p>Where  is the release name and  is existing java options user has added previously.</p>
<h4 id="removing-the-jndilookup-from-classpath">Removing the JndiLookup from classpath</h4>
<p>Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">https://nvd.nist.gov/vuln/detail/CVE-2021-45046</a>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44832">https://nvd.nist.gov/vuln/detail/CVE-2021-44832</a>
<a href="https://logging.apache.org/log4j/2.x/index.html">https://logging.apache.org/log4j/2.x/index.html</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/hazelcast/hazelcast">our repo</a></li>
<li>Slack us at <a href="https://slack.hazelcast.com/">Hazelcast Community Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q">https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q</a></li>
<li><a href="https://github.com/advisories/GHSA-v57x-gxfj-484q">https://github.com/advisories/GHSA-v57x-gxfj-484q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57x-gxfj-484q</uri>
        </author>
        <published>2022-01-21T23:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.hazelcast:hazelcast] Security Advisory for "Log4Shell"]]></title>
        <id>https://github.com/advisories/GHSA-v57x-gxfj-484q</id>
        <link href="https://github.com/advisories/GHSA-v57x-gxfj-484q"/>
        <updated>2022-01-21T23:25:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.</p>
<p>This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). </p>
<p>This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.</p>
<p>Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.</p>
<p>Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.</p>
<p>However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.</p>
<h3 id="patches">Patches</h3>
<p>CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.</p>
<p>As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.</p>
<p>As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. </p>
<p>Hazelcast recommends upgrading to the latest versions available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that an upgrade is not an option, below mitigations can be applied.</p>
<h4 id="disabling-lookups-via-environment-variable">Disabling lookups via Environment Variable</h4>
<p>Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.</p>
<h4 id="disabling-lookups-in-log4j2-configuration">Disabling lookups in log4j2 configuration</h4>
<p>Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:</p>
<p>Users of Log4j 2.10 or greater may add <code>-Dlog4j2.formatMsgNoLookups=true </code>as a command line option or add <code>-Dlog4j2.formatMsgNoLookups=true</code> in a <code>log4j2.component.properties</code> file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify <code>%m{nolookups}</code> in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:</p>
<p><code>helm upgrade &lt;release-name&gt; hazelcast/hazelcast --set mancenter.javaOpts="&lt;javaOpts&gt; -Dlog4j2.formatMsgNoLookups=true"</code></p>
<p>Where  is the release name and  is existing java options user has added previously.</p>
<h4 id="removing-the-jndilookup-from-classpath">Removing the JndiLookup from classpath</h4>
<p>Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">https://nvd.nist.gov/vuln/detail/CVE-2021-45046</a>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44832">https://nvd.nist.gov/vuln/detail/CVE-2021-44832</a>
<a href="https://logging.apache.org/log4j/2.x/index.html">https://logging.apache.org/log4j/2.x/index.html</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/hazelcast/hazelcast">our repo</a></li>
<li>Slack us at <a href="https://slack.hazelcast.com/">Hazelcast Community Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q">https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q</a></li>
<li><a href="https://github.com/advisories/GHSA-v57x-gxfj-484q">https://github.com/advisories/GHSA-v57x-gxfj-484q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57x-gxfj-484q</uri>
        </author>
        <published>2022-01-21T23:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.hazelcast.jet:hazelcast-jet] Security Advisory for "Log4Shell"]]></title>
        <id>https://github.com/advisories/GHSA-v57x-gxfj-484q</id>
        <link href="https://github.com/advisories/GHSA-v57x-gxfj-484q"/>
        <updated>2022-01-21T23:25:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A highly critical 0-day exploit (CVE-2021-44228) is found in Apache log4j 2 library on December 9, 2021.</p>
<p>This affects Apache log4j versions from 2.0-beta9 to 2.14.1 (inclusive). </p>
<p>This vulnerability allows a remote attacker to execute code on the server if the system logs an attacker-controlled string value with the attacker's JNDI LDAP server lookup.</p>
<p>Another vulnerability related to the same library, which was discovered on 12/14/2021 (CVE-2021-45046) and revealed another Remote Code Execution vulnerability, has been investigated by Hazelcast team as well and it is found that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-45105 on 12/14/2021, which can cause a Denial of Service attack, was investigated by Hazelcast team and it is confirmed that it does not affect Hazelcast Products under default configurations. </p>
<p>The finding of CVE-2021-44832 on 12/28/2021, which is a medium vulnerability, is investigated by our security team as well, and not considered to be as critical. It requires attacker to be able to modify logging configuration, which means attacker can modify the filesystem and/or can already execute arbitrary code which is more of a general security breach rather than something log4j specific.</p>
<p>Note that Hazelcast IMDG and IMDG Enterprise itself is not affected.</p>
<p>However, given version distributions are considered to be vulnerable since related ZIP and TGZ distributions contain a vulnerable Hazelcast Management Center version.</p>
<h3 id="patches">Patches</h3>
<p>CVE-2021-44228 is fixed in log4j 2.15.0.
CVE-2021-45046 is fixed in log4j 2.16.0.
CVE-2021-45105 is fixed in log4j 2.17.0.
CVE-2021-44832 is fixed in log4j 2.17.1.</p>
<p>As of 12/21/2021, Hazelcast team has released a new version of all affected products that upgrades log4j to 2.17.0 as listed below: 
Hazelcast Management Center 4.2021.12-1, Hazelcast Management Center 5.0.4.
Hazelcast IMDG and IMDG Enterprise 4.0.5, 4.1.8 and 4.2.4.
Hazelcast Jet 4.5.3.
Hazelcast Platform 5.0.2.</p>
<p>As of 01/06/2022, Hazelcast Management Center 4.2022.01 with the updated log4j 2.17.1 is released. log4j2.17.1 will be included in Management Center 5.1 that is expected to be released in February. </p>
<p>Hazelcast recommends upgrading to the latest versions available.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For users that an upgrade is not an option, below mitigations can be applied.</p>
<h4 id="disabling-lookups-via-environment-variable">Disabling lookups via Environment Variable</h4>
<p>Setting the environment variable LOG4J_FORMAT_MSG_NO_LOOKUPS=true .
This option is the easiest to apply for containerized environments.</p>
<h4 id="disabling-lookups-in-log4j2-configuration">Disabling lookups in log4j2 configuration</h4>
<p>Another good option since there is no need to replace JARs or no need to modify logging configuration file, users who cannot upgrade to 2.17.0 can mitigate the exposure by:</p>
<p>Users of Log4j 2.10 or greater may add <code>-Dlog4j2.formatMsgNoLookups=true </code>as a command line option or add <code>-Dlog4j2.formatMsgNoLookups=true</code> in a <code>log4j2.component.properties</code> file on the classpath to prevent lookups in log event messages.
Users since Log4j 2.7 may specify <code>%m{nolookups}</code> in the PatternLayout configuration to prevent lookups in log event messages.
As an example; users deploying Hazelcast Management Center via helm charts can do the following to disable lookups and restart in one command:</p>
<p><code>helm upgrade &lt;release-name&gt; hazelcast/hazelcast --set mancenter.javaOpts="&lt;javaOpts&gt; -Dlog4j2.formatMsgNoLookups=true"</code></p>
<p>Where  is the release name and  is existing java options user has added previously.</p>
<h4 id="removing-the-jndilookup-from-classpath">Removing the JndiLookup from classpath</h4>
<p>Remove the JndiLookup and JndiManager classes from the log4j-core jar. Note that removal of the JndiManager will cause the JndiContextSelector and JMSAppender to no longer function.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44228">https://nvd.nist.gov/vuln/detail/CVE-2021-44228</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-45046">https://nvd.nist.gov/vuln/detail/CVE-2021-45046</a>
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-45105</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44832">https://nvd.nist.gov/vuln/detail/CVE-2021-44832</a>
<a href="https://logging.apache.org/log4j/2.x/index.html">https://logging.apache.org/log4j/2.x/index.html</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/hazelcast/hazelcast">our repo</a></li>
<li>Slack us at <a href="https://slack.hazelcast.com/">Hazelcast Community Slack</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q">https://github.com/hazelcast/hazelcast/security/advisories/GHSA-v57x-gxfj-484q</a></li>
<li><a href="https://github.com/advisories/GHSA-v57x-gxfj-484q">https://github.com/advisories/GHSA-v57x-gxfj-484q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v57x-gxfj-484q</uri>
        </author>
        <published>2022-01-21T23:25:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[edu.stanford.nlp:stanford-corenlp] corenlp is vulnerable to Improper Restriction of XML External Entity Reference]]></title>
        <id>https://github.com/advisories/GHSA-75vw-3m5v-fprh</id>
        <link href="https://github.com/advisories/GHSA-75vw-3m5v-fprh"/>
        <updated>2022-01-21T23:43:11.000Z</updated>
        <content type="html"><![CDATA[<p>corenlp is vulnerable to Improper Restriction of XML External Entity Reference</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0239">https://nvd.nist.gov/vuln/detail/CVE-2022-0239</a></li>
<li><a href="https://github.com/stanfordnlp/corenlp/commit/1940ffb938dc4f3f5bc5f2a2fd8b35aabbbae3dd">https://github.com/stanfordnlp/corenlp/commit/1940ffb938dc4f3f5bc5f2a2fd8b35aabbbae3dd</a></li>
<li><a href="https://huntr.dev/bounties/a717aec2-5646-4a5f-ade0-dadc25736ae3">https://huntr.dev/bounties/a717aec2-5646-4a5f-ade0-dadc25736ae3</a></li>
<li><a href="https://github.com/advisories/GHSA-75vw-3m5v-fprh">https://github.com/advisories/GHSA-75vw-3m5v-fprh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-75vw-3m5v-fprh</uri>
        </author>
        <published>2022-01-21T23:43:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.knox:gateway-service-knoxsso] Cross-site Scripting in Apache Knox SSO]]></title>
        <id>https://github.com/advisories/GHSA-vv38-4xcj-q4rw</id>
        <link href="https://github.com/advisories/GHSA-vv38-4xcj-q4rw"/>
        <updated>2022-01-21T23:52:00.000Z</updated>
        <content type="html"><![CDATA[<p>When using Apache Knox SSO prior to 1.6.1, a request could be crafted to redirect a user to a malicious page due to improper URL parsing. A request that included a specially crafted request parameter could be used to redirect the user to a page controlled by an attacker. This URL would need to be presented to the user outside the normal request flow through a XSS or phishing campaign.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-42357">https://nvd.nist.gov/vuln/detail/CVE-2021-42357</a></li>
<li><a href="https://lists.apache.org/thread/b7v5dkpyqb51nw0lvz4cybhgrfhk1g7j">https://lists.apache.org/thread/b7v5dkpyqb51nw0lvz4cybhgrfhk1g7j</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/17/2">http://www.openwall.com/lists/oss-security/2022/01/17/2</a></li>
<li><a href="https://github.com/advisories/GHSA-vv38-4xcj-q4rw">https://github.com/advisories/GHSA-vv38-4xcj-q4rw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv38-4xcj-q4rw</uri>
        </author>
        <published>2022-01-21T23:52:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[de.tum.in.ase:artemis-java-test-sandbox] Trust Boundary Violation due to Incomplete Blacklist in Test Failure Processing in Ares]]></title>
        <id>https://github.com/advisories/GHSA-883x-6fch-6wjx</id>
        <link href="https://github.com/advisories/GHSA-883x-6fch-6wjx"/>
        <updated>2022-01-21T23:39:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This allows an attacker to create special subclasses of <code>InvocationTargetException</code> that escape the exception sanitization because JUnit extracts the cause in a trusted context before the exception reaches Ares. This means that arbitrary student code can be executed in a trusted context, and that in turn allows disabling Ares and having full control over the system.</p>
<h3 id="patches">Patches</h3>
<p>Update to version <code>1.7.6</code> or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Forbid student classes in trusted packages like, e.g., described in <a href="https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371">https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371</a></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em>
Not that I know of.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/ls1intum/Ares/issues">https://github.com/ls1intum/Ares/issues</a></li>
<li>Email us, see <a href="https://github.com/ls1intum/Ares/security/policy">https://github.com/ls1intum/Ares/security/policy</a></li>
</ul>
<h3 id="detailed-description">Detailed description</h3>
<p>Using generics, it is possible to throw checked exceptions without a <code>throws</code> clause:</p>
<details>
<summary>ThrowWithoutThrowsHelper</summary>

<pre><code class="language-java">public class ThrowWithoutThrowsHelper&lt;X extends Throwable&gt;
{
    private final X throwable;

    private ThrowWithoutThrowsHelper(X throwable)
    {
        this.throwable = throwable;
    }

    private &lt;R&gt; R throwWithThrows() throws X
    {
        throw throwable;
    }

    public static &lt;R&gt; R throwWithoutThrows(Throwable throwable)
    {
        ThrowWithoutThrowsHelper&lt;?&gt; helper = new ThrowWithoutThrowsHelper&lt;Throwable&gt;(throwable);
        @SuppressWarnings("unchecked")
        ThrowWithoutThrowsHelper&lt;RuntimeException&gt; helperCasted = (ThrowWithoutThrowsHelper&lt;RuntimeException&gt;) helper;
        return helperCasted.throwWithThrows();
    }
}
</code></pre>
</details>

<p>Using this, it is possible for a malicious testee to throw an instance of a malicious subclass of <code>InvocationTargetException</code> (let's call it <code>EvilInvocationTargetException</code>).</p>
<p>This exception is catched by <code>org.junit.platform.commons.util.ReflectionUtils::invokeMethod</code>, which looks like this:</p>
<details>
<summary>ReflectionUtils::invokeMethod</summary>

<pre><code class="language-java">    public static Object invokeMethod(Method method, Object target, Object... args) {
        Preconditions.notNull(method, "Method must not be null");
        Preconditions.condition((target != null || isStatic(method)),
            () -&gt; String.format("Cannot invoke non-static method [%s] on a null target.", method.toGenericString()));

        try {
            return makeAccessible(method).invoke(target, args);
        }
        catch (Throwable t) {
            throw ExceptionUtils.throwAsUncheckedException(getUnderlyingCause(t));
        }
    }
</code></pre>
</details>

<p>This method calls <code>getUnderlyingCause</code> (of the same class), passing to it the catched, malicious exception as an argument.</p>
<details>
<summary>ReflectionUtils::getUnderlyingCause</summary>

<pre><code class="language-java">    private static Throwable getUnderlyingCause(Throwable t) {
        if (t instanceof InvocationTargetException) {
            return getUnderlyingCause(((InvocationTargetException) t).getTargetException());
        }
        return t;
    }
</code></pre>
</details>

<p><code>getUnderlyingCause</code> in turn checks if the passed exception is <code>instanceof InvocationTargetException</code>, and if so, calls <code>getTargetException</code> on it. <code>getTargetException</code> can be overridden by subclasses of <code>InvocationTargetException</code>, like the <code>EvilInvocationTargetException</code>.
If <code>EvilInvocationTargetException</code> is in a whitelisted package (for example <code>de.tum.in.test.api.security.notsealedsubpackage</code>), <code>getTargetException</code> will be called with the entire stack containing only whitelisted frames.
This allows the attacker to uninstall the <code>ArtemisSecurityManager</code> in <code>EvilInvocationTargetException::getTargetException</code>:</p>
<details>
<summary>Uninstalling ArtemisSecurityManager</summary>

<pre><code class="language-java">
SecurityManager secman = System.getSecurityManager();
Class&lt;?&gt; aresSecmanClass = secman.getClass();
Field isPartlyDisabledF = aresSecmanClass.getDeclaredField("isPartlyDisabled");
isPartlyDisabledF.setAccessible(true);
isPartlyDisabledF.set(secman, true);
System.setSecurityManager(null);
</code></pre>
</details>

<p>After uninstalling <code>ArtemisSecurityManager</code>, the attacker is free to do anything expressible in Java; including reading and writing any files, opening network connections, and executing arbitrary shell commands.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/ls1intum/Ares/security/advisories/GHSA-883x-6fch-6wjx">https://github.com/ls1intum/Ares/security/advisories/GHSA-883x-6fch-6wjx</a></li>
<li><a href="https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371">https://github.com/ls1intum/Ares/issues/15#issuecomment-996449371</a></li>
<li><a href="https://github.com/ls1intum/Ares/commit/af4f28a56e2fe600d8750b3b415352a0a3217392">https://github.com/ls1intum/Ares/commit/af4f28a56e2fe600d8750b3b415352a0a3217392</a></li>
<li><a href="https://github.com/ls1intum/Ares/releases/tag/1.7.6">https://github.com/ls1intum/Ares/releases/tag/1.7.6</a></li>
<li><a href="https://github.com/advisories/GHSA-883x-6fch-6wjx">https://github.com/advisories/GHSA-883x-6fch-6wjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-883x-6fch-6wjx</uri>
        </author>
        <published>2022-01-21T23:39:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[edu.stanford.nlp:stanford-corenlp] XML External Entity Reference in edu.stanford.nlp:stanford-corenlp]]></title>
        <id>https://github.com/advisories/GHSA-mh83-jcw5-rjh8</id>
        <link href="https://github.com/advisories/GHSA-mh83-jcw5-rjh8"/>
        <updated>2022-01-20T15:33:36.000Z</updated>
        <content type="html"><![CDATA[<p>The TransformXML() function makes use of SAXParser generated from a SAXParserFactory with no FEATURE_SECURE_PROCESSING set, allowing for XXE attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0198">https://nvd.nist.gov/vuln/detail/CVE-2022-0198</a></li>
<li><a href="https://github.com/stanfordnlp/corenlp/commit/1f52136321cfca68b991bd7870563d06cf96624d">https://github.com/stanfordnlp/corenlp/commit/1f52136321cfca68b991bd7870563d06cf96624d</a></li>
<li><a href="https://huntr.dev/bounties/3d7e70fe-dddd-4b79-af62-8e058c4d5763">https://huntr.dev/bounties/3d7e70fe-dddd-4b79-af62-8e058c4d5763</a></li>
<li><a href="https://github.com/advisories/GHSA-mh83-jcw5-rjh8">https://github.com/advisories/GHSA-mh83-jcw5-rjh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh83-jcw5-rjh8</uri>
        </author>
        <published>2022-01-14T21:07:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.james:james-server] Path traversal in Apache James]]></title>
        <id>https://github.com/advisories/GHSA-c38m-7h53-g9v4</id>
        <link href="https://github.com/advisories/GHSA-c38m-7h53-g9v4"/>
        <updated>2022-01-21T23:36:47.000Z</updated>
        <content type="html"><![CDATA[<p>Apache James ManagedSieve implementation alongside with the file storage for sieve scripts is vulnerable to path traversal, allowing reading and writing any file. This vulnerability had been patched in Apache James 3.6.1 and higher. We recommend the upgrade. Distributed and Cassandra based products are also not impacted.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40525">https://nvd.nist.gov/vuln/detail/CVE-2021-40525</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2022/01/04/4">https://www.openwall.com/lists/oss-security/2022/01/04/4</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/04/4">http://www.openwall.com/lists/oss-security/2022/01/04/4</a></li>
<li><a href="https://github.com/advisories/GHSA-c38m-7h53-g9v4">https://github.com/advisories/GHSA-c38m-7h53-g9v4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c38m-7h53-g9v4</uri>
        </author>
        <published>2022-01-21T23:36:47.000Z</published>
    </entry>
</feed>