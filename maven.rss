<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2022-11-01T22:02:32.165Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[edu.internet2.middleware:shibboleth-identityprovider] Improper Certificate Validation in vt-ldap]]></title>
        <id>https://github.com/advisories/GHSA-273v-g3x4-r3rc</id>
        <link href="https://github.com/advisories/GHSA-273v-g3x4-r3rc"/>
        <updated>2022-11-01T22:01:43.000Z</updated>
        <content type="html"><![CDATA[<p>DefaultHostnameVerifier in Ldaptive (formerly vt-ldap) does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-3607">https://nvd.nist.gov/vuln/detail/CVE-2014-3607</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1140438">https://bugzilla.redhat.com/show_bug.cgi?id=1140438</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/226">https://code.google.com/archive/p/vt-middleware/issues/226</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/227">https://code.google.com/archive/p/vt-middleware/issues/227</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/228">https://code.google.com/archive/p/vt-middleware/issues/228</a></li>
<li><a href="http://shibboleth.net/community/advisories/secadv_20140919.txt">http://shibboleth.net/community/advisories/secadv_20140919.txt</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/source/default/commits">https://code.google.com/archive/p/vt-middleware/source/default/commits</a></li>
<li><a href="https://code.google.com/p/vt-middleware/source/detail?r=3046">https://code.google.com/p/vt-middleware/source/detail?r=3046</a></li>
<li><a href="https://github.com/advisories/GHSA-273v-g3x4-r3rc">https://github.com/advisories/GHSA-273v-g3x4-r3rc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-273v-g3x4-r3rc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T03:47:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[edu.vt.middleware:vt-ldap] Improper Certificate Validation in vt-ldap]]></title>
        <id>https://github.com/advisories/GHSA-273v-g3x4-r3rc</id>
        <link href="https://github.com/advisories/GHSA-273v-g3x4-r3rc"/>
        <updated>2022-11-01T22:01:43.000Z</updated>
        <content type="html"><![CDATA[<p>DefaultHostnameVerifier in Ldaptive (formerly vt-ldap) does not properly verify that the server hostname matches a domain name in the subject's Common Name (CN) field of the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-3607">https://nvd.nist.gov/vuln/detail/CVE-2014-3607</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1140438">https://bugzilla.redhat.com/show_bug.cgi?id=1140438</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/226">https://code.google.com/archive/p/vt-middleware/issues/226</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/227">https://code.google.com/archive/p/vt-middleware/issues/227</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/issues/228">https://code.google.com/archive/p/vt-middleware/issues/228</a></li>
<li><a href="http://shibboleth.net/community/advisories/secadv_20140919.txt">http://shibboleth.net/community/advisories/secadv_20140919.txt</a></li>
<li><a href="https://code.google.com/archive/p/vt-middleware/source/default/commits">https://code.google.com/archive/p/vt-middleware/source/default/commits</a></li>
<li><a href="https://code.google.com/p/vt-middleware/source/detail?r=3046">https://code.google.com/p/vt-middleware/source/detail?r=3046</a></li>
<li><a href="https://github.com/advisories/GHSA-273v-g3x4-r3rc">https://github.com/advisories/GHSA-273v-g3x4-r3rc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-273v-g3x4-r3rc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T03:47:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.nifi:nifi] Apache NiFi host header poisoning issue]]></title>
        <id>https://github.com/advisories/GHSA-w4x6-j349-9r57</id>
        <link href="https://github.com/advisories/GHSA-w4x6-j349-9r57"/>
        <updated>2022-11-01T21:58:51.000Z</updated>
        <content type="html"><![CDATA[<p>A malicious host header in an incoming HTTP request could cause NiFi to load resources from an external server. The fix to sanitize host headers and compare to a controlled whitelist was applied on the Apache NiFi 1.5.0 release. Users running a prior 1.x release should upgrade to the appropriate release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-12632">https://nvd.nist.gov/vuln/detail/CVE-2017-12632</a></li>
<li><a href="https://nifi.apache.org/security.html#CVE-2017-12632">https://nifi.apache.org/security.html#CVE-2017-12632</a></li>
<li><a href="https://github.com/advisories/GHSA-w4x6-j349-9r57">https://github.com/advisories/GHSA-w4x6-j349-9r57</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w4x6-j349-9r57</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T03:45:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.dolphinscheduler:dolphinscheduler] Apache DolphinScheduler vulnerable to Path Traversal]]></title>
        <id>https://github.com/advisories/GHSA-fp35-xrrr-3gph</id>
        <link href="https://github.com/advisories/GHSA-fp35-xrrr-3gph"/>
        <updated>2022-11-01T21:04:39.000Z</updated>
        <content type="html"><![CDATA[<p>When users add resources to the resource center with a relation path, this vulnerability will cause path traversal issues for logged-in users. Users should upgrade to version 3.0.0 to avoid this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-34662">https://nvd.nist.gov/vuln/detail/CVE-2022-34662</a></li>
<li><a href="https://lists.apache.org/thread/pbdzqf9ntxyvs4cr0x2dgk9zlf43btz8">https://lists.apache.org/thread/pbdzqf9ntxyvs4cr0x2dgk9zlf43btz8</a></li>
<li><a href="https://github.com/advisories/GHSA-fp35-xrrr-3gph">https://github.com/advisories/GHSA-fp35-xrrr-3gph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fp35-xrrr-3gph</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-01T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.spark:spark-core] Apache Spark vulnerable to Injection]]></title>
        <id>https://github.com/advisories/GHSA-43xg-8wmj-cw8h</id>
        <link href="https://github.com/advisories/GHSA-43xg-8wmj-cw8h"/>
        <updated>2022-11-01T21:03:47.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting (XSS) vulnerability in Apache Spark 3.2.1 and earlier, and 3.3.0, allows remote attackers to execute arbitrary JavaScript in the web browser of a user, by including a malicious payload into the logs which would be returned in logs rendered in the UI.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31777">https://nvd.nist.gov/vuln/detail/CVE-2022-31777</a></li>
<li><a href="https://lists.apache.org/thread/60mgbswq2lsmrxykfxpqq13ztkm2ht6q">https://lists.apache.org/thread/60mgbswq2lsmrxykfxpqq13ztkm2ht6q</a></li>
<li><a href="https://github.com/advisories/GHSA-43xg-8wmj-cw8h">https://github.com/advisories/GHSA-43xg-8wmj-cw8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43xg-8wmj-cw8h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.spark:spark-core] Apache Spark vulnerable to Injection]]></title>
        <id>https://github.com/advisories/GHSA-43xg-8wmj-cw8h</id>
        <link href="https://github.com/advisories/GHSA-43xg-8wmj-cw8h"/>
        <updated>2022-11-01T21:03:47.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting (XSS) vulnerability in Apache Spark 3.2.1 and earlier, and 3.3.0, allows remote attackers to execute arbitrary JavaScript in the web browser of a user, by including a malicious payload into the logs which would be returned in logs rendered in the UI.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31777">https://nvd.nist.gov/vuln/detail/CVE-2022-31777</a></li>
<li><a href="https://lists.apache.org/thread/60mgbswq2lsmrxykfxpqq13ztkm2ht6q">https://lists.apache.org/thread/60mgbswq2lsmrxykfxpqq13ztkm2ht6q</a></li>
<li><a href="https://github.com/advisories/GHSA-43xg-8wmj-cw8h">https://github.com/advisories/GHSA-43xg-8wmj-cw8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43xg-8wmj-cw8h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-core] Spring Security authorization rules can be bypassed via forward or include dispatcher types]]></title>
        <id>https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</id>
        <link href="https://github.com/advisories/GHSA-mmmh-wcxm-2wr4"/>
        <updated>2022-11-01T19:01:04.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security, versions 5.7 prior to 5.7.5 and 5.6 prior to 5.6.9 could be susceptible to authorization rules bypass via forward or include dispatcher types. Specifically, an application is vulnerable when all of the following are true: The application expects that Spring Security applies security to forward and include dispatcher types. The application uses the AuthorizationFilter either manually or via the authorizeHttpRequests() method. The application configures the FilterChainProxy to apply to forward and/or include requests (e.g. spring.security.filter.dispatcher-types = request, error, async, forward, include). The application may forward or include the request to a higher privilege-secured endpoint.The application configures Spring Security to apply to every dispatcher type via authorizeHttpRequests().shouldFilterAllDispatcherTypes(true)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31692">https://nvd.nist.gov/vuln/detail/CVE-2022-31692</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2022-31692">https://tanzu.vmware.com/security/cve-2022-31692</a></li>
<li><a href="https://github.com/advisories/GHSA-mmmh-wcxm-2wr4">https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T12:00:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-core] Spring Security authorization rules can be bypassed via forward or include dispatcher types]]></title>
        <id>https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</id>
        <link href="https://github.com/advisories/GHSA-mmmh-wcxm-2wr4"/>
        <updated>2022-11-01T19:01:04.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security, versions 5.7 prior to 5.7.5 and 5.6 prior to 5.6.9 could be susceptible to authorization rules bypass via forward or include dispatcher types. Specifically, an application is vulnerable when all of the following are true: The application expects that Spring Security applies security to forward and include dispatcher types. The application uses the AuthorizationFilter either manually or via the authorizeHttpRequests() method. The application configures the FilterChainProxy to apply to forward and/or include requests (e.g. spring.security.filter.dispatcher-types = request, error, async, forward, include). The application may forward or include the request to a higher privilege-secured endpoint.The application configures Spring Security to apply to every dispatcher type via authorizeHttpRequests().shouldFilterAllDispatcherTypes(true)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31692">https://nvd.nist.gov/vuln/detail/CVE-2022-31692</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2022-31692">https://tanzu.vmware.com/security/cve-2022-31692</a></li>
<li><a href="https://github.com/advisories/GHSA-mmmh-wcxm-2wr4">https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmmh-wcxm-2wr4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T12:00:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat may reject request containing invalid Content-Length header]]></title>
        <id>https://github.com/advisories/GHSA-p22x-g9px-3945</id>
        <link href="https://github.com/advisories/GHSA-p22x-g9px-3945"/>
        <updated>2022-11-01T18:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>If Apache Tomcat 8.5.0 to 8.5.52, 9.0.0-M1 to 9.0.67, 10.0.0-M1 to 10.0.26 or 10.1.0-M1 to 10.1.0 was configured to ignore invalid HTTP headers via setting rejectIllegalHeader to false (the default for 8.5.x only), Tomcat did not reject a request containing an invalid Content-Length header making a request smuggling attack possible if Tomcat was located behind a reverse proxy that also failed to reject the request with the invalid header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42252">https://nvd.nist.gov/vuln/detail/CVE-2022-42252</a></li>
<li><a href="https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq">https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq</a></li>
<li><a href="https://github.com/advisories/GHSA-p22x-g9px-3945">https://github.com/advisories/GHSA-p22x-g9px-3945</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p22x-g9px-3945</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-01T12:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat may reject request containing invalid Content-Length header]]></title>
        <id>https://github.com/advisories/GHSA-p22x-g9px-3945</id>
        <link href="https://github.com/advisories/GHSA-p22x-g9px-3945"/>
        <updated>2022-11-01T18:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>If Apache Tomcat 8.5.0 to 8.5.52, 9.0.0-M1 to 9.0.67, 10.0.0-M1 to 10.0.26 or 10.1.0-M1 to 10.1.0 was configured to ignore invalid HTTP headers via setting rejectIllegalHeader to false (the default for 8.5.x only), Tomcat did not reject a request containing an invalid Content-Length header making a request smuggling attack possible if Tomcat was located behind a reverse proxy that also failed to reject the request with the invalid header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42252">https://nvd.nist.gov/vuln/detail/CVE-2022-42252</a></li>
<li><a href="https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq">https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq</a></li>
<li><a href="https://github.com/advisories/GHSA-p22x-g9px-3945">https://github.com/advisories/GHSA-p22x-g9px-3945</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p22x-g9px-3945</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-01T12:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat may reject request containing invalid Content-Length header]]></title>
        <id>https://github.com/advisories/GHSA-p22x-g9px-3945</id>
        <link href="https://github.com/advisories/GHSA-p22x-g9px-3945"/>
        <updated>2022-11-01T18:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>If Apache Tomcat 8.5.0 to 8.5.52, 9.0.0-M1 to 9.0.67, 10.0.0-M1 to 10.0.26 or 10.1.0-M1 to 10.1.0 was configured to ignore invalid HTTP headers via setting rejectIllegalHeader to false (the default for 8.5.x only), Tomcat did not reject a request containing an invalid Content-Length header making a request smuggling attack possible if Tomcat was located behind a reverse proxy that also failed to reject the request with the invalid header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42252">https://nvd.nist.gov/vuln/detail/CVE-2022-42252</a></li>
<li><a href="https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq">https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq</a></li>
<li><a href="https://github.com/advisories/GHSA-p22x-g9px-3945">https://github.com/advisories/GHSA-p22x-g9px-3945</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p22x-g9px-3945</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-01T12:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat may reject request containing invalid Content-Length header]]></title>
        <id>https://github.com/advisories/GHSA-p22x-g9px-3945</id>
        <link href="https://github.com/advisories/GHSA-p22x-g9px-3945"/>
        <updated>2022-11-01T18:37:43.000Z</updated>
        <content type="html"><![CDATA[<p>If Apache Tomcat 8.5.0 to 8.5.52, 9.0.0-M1 to 9.0.67, 10.0.0-M1 to 10.0.26 or 10.1.0-M1 to 10.1.0 was configured to ignore invalid HTTP headers via setting rejectIllegalHeader to false (the default for 8.5.x only), Tomcat did not reject a request containing an invalid Content-Length header making a request smuggling attack possible if Tomcat was located behind a reverse proxy that also failed to reject the request with the invalid header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42252">https://nvd.nist.gov/vuln/detail/CVE-2022-42252</a></li>
<li><a href="https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq">https://lists.apache.org/thread/zzcxzvqfdqn515zfs3dxb7n8gty589sq</a></li>
<li><a href="https://github.com/advisories/GHSA-p22x-g9px-3945">https://github.com/advisories/GHSA-p22x-g9px-3945</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p22x-g9px-3945</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-11-01T12:00:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-oauth2-client] spring-security-oauth2-client vulnerable to Privilege Escalation]]></title>
        <id>https://github.com/advisories/GHSA-32vj-v39g-jh23</id>
        <link href="https://github.com/advisories/GHSA-32vj-v39g-jh23"/>
        <updated>2022-11-01T17:27:46.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security, versions 5.7 prior to 5.7.5, and 5.6 prior to 5.6.9, and older unsupported versions could be susceptible to a privilege escalation under certain conditions. A malicious user or attacker can modify a request initiated by the Client (via the browser) to the Authorization Server which can lead to a privilege escalation on the subsequent approval. This scenario can happen if the Authorization Server responds with an OAuth2 Access Token Response containing an empty scope list (per RFC 6749, Section 5.1) on the subsequent request to the token endpoint to obtain the access token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31690">https://nvd.nist.gov/vuln/detail/CVE-2022-31690</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2022-31690">https://tanzu.vmware.com/security/cve-2022-31690</a></li>
<li><a href="https://github.com/spring-projects/spring-security-samples/blob/4638e1e428ee2ddab234199eb3b67b9c94dfa08b/servlet/spring-boot/java/oauth2/webclient/src/main/java/example/SecurityConfiguration.java#L48">https://github.com/spring-projects/spring-security-samples/blob/4638e1e428ee2ddab234199eb3b67b9c94dfa08b/servlet/spring-boot/java/oauth2/webclient/src/main/java/example/SecurityConfiguration.java#L48</a></li>
<li><a href="https://github.com/advisories/GHSA-32vj-v39g-jh23">https://github.com/advisories/GHSA-32vj-v39g-jh23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32vj-v39g-jh23</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T12:00:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-oauth2-client] spring-security-oauth2-client vulnerable to Privilege Escalation]]></title>
        <id>https://github.com/advisories/GHSA-32vj-v39g-jh23</id>
        <link href="https://github.com/advisories/GHSA-32vj-v39g-jh23"/>
        <updated>2022-11-01T17:27:46.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security, versions 5.7 prior to 5.7.5, and 5.6 prior to 5.6.9, and older unsupported versions could be susceptible to a privilege escalation under certain conditions. A malicious user or attacker can modify a request initiated by the Client (via the browser) to the Authorization Server which can lead to a privilege escalation on the subsequent approval. This scenario can happen if the Authorization Server responds with an OAuth2 Access Token Response containing an empty scope list (per RFC 6749, Section 5.1) on the subsequent request to the token endpoint to obtain the access token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31690">https://nvd.nist.gov/vuln/detail/CVE-2022-31690</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2022-31690">https://tanzu.vmware.com/security/cve-2022-31690</a></li>
<li><a href="https://github.com/spring-projects/spring-security-samples/blob/4638e1e428ee2ddab234199eb3b67b9c94dfa08b/servlet/spring-boot/java/oauth2/webclient/src/main/java/example/SecurityConfiguration.java#L48">https://github.com/spring-projects/spring-security-samples/blob/4638e1e428ee2ddab234199eb3b67b9c94dfa08b/servlet/spring-boot/java/oauth2/webclient/src/main/java/example/SecurityConfiguration.java#L48</a></li>
<li><a href="https://github.com/advisories/GHSA-32vj-v39g-jh23">https://github.com/advisories/GHSA-32vj-v39g-jh23</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-32vj-v39g-jh23</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-01T12:00:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.dolphinscheduler:dolphinscheduler] Apache DolphinScheduler vulnerable to Path Traversal]]></title>
        <id>https://github.com/advisories/GHSA-vpgf-fgm8-gxr2</id>
        <link href="https://github.com/advisories/GHSA-vpgf-fgm8-gxr2"/>
        <updated>2022-11-01T13:29:33.000Z</updated>
        <content type="html"><![CDATA[<p>Users can read any files by log server, Apache DolphinScheduler users should upgrade to version 2.0.6 or higher.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-26884">https://nvd.nist.gov/vuln/detail/CVE-2022-26884</a></li>
<li><a href="https://lists.apache.org/thread/xfdst5y4hnrm2ntmc5jzrgmw2htyyb9c">https://lists.apache.org/thread/xfdst5y4hnrm2ntmc5jzrgmw2htyyb9c</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/10/28/2">http://www.openwall.com/lists/oss-security/2022/10/28/2</a></li>
<li><a href="https://github.com/apache/dolphinscheduler/releases/tag/2.0.6">https://github.com/apache/dolphinscheduler/releases/tag/2.0.6</a></li>
<li><a href="https://github.com/advisories/GHSA-vpgf-fgm8-gxr2">https://github.com/advisories/GHSA-vpgf-fgm8-gxr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vpgf-fgm8-gxr2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-10-28T12:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Improper Neutralization of Input During Web Page Generation in Jenkins]]></title>
        <id>https://github.com/advisories/GHSA-jpvq-v729-7j2h</id>
        <link href="https://github.com/advisories/GHSA-jpvq-v729-7j2h"/>
        <updated>2022-10-31T15:57:05.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins 2.251 and earlier, LTS 2.235.3 and earlier does not escape the remote address of the host starting a build via 'Trigger builds remotely', resulting in a stored cross-site scripting (XSS) vulnerability exploitable by users with Job/Configure permission or knowledge of the Authentication Token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-2231">https://nvd.nist.gov/vuln/detail/CVE-2020-2231</a></li>
<li><a href="https://jenkins.io/security/advisory/2020-08-12/#SECURITY-1960">https://jenkins.io/security/advisory/2020-08-12/#SECURITY-1960</a></li>
<li><a href="http://packetstormsecurity.com/files/160616/Jenkins-2.251-LTS-2.235.3-Cross-Site-Scripting.html">http://packetstormsecurity.com/files/160616/Jenkins-2.251-LTS-2.235.3-Cross-Site-Scripting.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2020/08/12/4">http://www.openwall.com/lists/oss-security/2020/08/12/4</a></li>
<li><a href="https://github.com/advisories/GHSA-jpvq-v729-7j2h">https://github.com/advisories/GHSA-jpvq-v729-7j2h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jpvq-v729-7j2h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:25:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.xmlgraphics:batik] Untrusted code execution in Apache XML Graphics Batik]]></title>
        <id>https://github.com/advisories/GHSA-rwqr-m72q-v6cm</id>
        <link href="https://github.com/advisories/GHSA-rwqr-m72q-v6cm"/>
        <updated>2022-10-31T15:41:34.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability in Batik of Apache XML Graphics allows an attacker to run Java code from untrusted SVG via JavaScript. This issue affects Apache XML Graphics prior to 1.16. Users are recommended to upgrade to version 1.16.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42890">https://nvd.nist.gov/vuln/detail/CVE-2022-42890</a></li>
<li><a href="https://lists.apache.org/thread/pkvhy0nsj1h1mlon008wtzhosbtxjwly">https://lists.apache.org/thread/pkvhy0nsj1h1mlon008wtzhosbtxjwly</a></li>
<li><a href="https://github.com/apache/xmlgraphics-batik/commit/401aa8595f52d085d40ff5b6b4ac0dd372423082">https://github.com/apache/xmlgraphics-batik/commit/401aa8595f52d085d40ff5b6b4ac0dd372423082</a></li>
<li><a href="https://github.com/apache/xmlgraphics-batik/commit/52f7a1ad6e3110ec295a35ffc94410eef085707a">https://github.com/apache/xmlgraphics-batik/commit/52f7a1ad6e3110ec295a35ffc94410eef085707a</a></li>
<li><a href="https://github.com/apache/xmlgraphics-batik/commit/eada57c716a2757579d53017f8b2aeadaad20edd">https://github.com/apache/xmlgraphics-batik/commit/eada57c716a2757579d53017f8b2aeadaad20edd</a></li>
<li><a href="https://issues.apache.org/jira/browse/BATIK-1345">https://issues.apache.org/jira/browse/BATIK-1345</a></li>
<li><a href="https://xmlgraphics.apache.org/security.html">https://xmlgraphics.apache.org/security.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/10/25/3">http://www.openwall.com/lists/oss-security/2022/10/25/3</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2022/10/msg00038.html">https://lists.debian.org/debian-lts-announce/2022/10/msg00038.html</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5264">https://www.debian.org/security/2022/dsa-5264</a></li>
<li><a href="https://github.com/advisories/GHSA-rwqr-m72q-v6cm">https://github.com/advisories/GHSA-rwqr-m72q-v6cm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwqr-m72q-v6cm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-25T19:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.linkis:linkis] Apache Linkis subject to Remote Code Execution via deserialization]]></title>
        <id>https://github.com/advisories/GHSA-3f3w-gmqf-4hj3</id>
        <link href="https://github.com/advisories/GHSA-3f3w-gmqf-4hj3"/>
        <updated>2022-10-31T15:53:34.000Z</updated>
        <content type="html"><![CDATA[<p>In Apache Linkis &lt;=1.2.0 when used with the MySQL Connector/J, a deserialization vulnerability with possible remote code execution impact exists when an attacker has write access to a database and configures a JDBC EC with a MySQL data source and malicious parameters. Therefore, the parameters in the jdbc url should be blacklisted. This issue is patched in version 1.3.0, and users are recommended to upgrade.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-39944">https://nvd.nist.gov/vuln/detail/CVE-2022-39944</a></li>
<li><a href="https://lists.apache.org/thread/rxytj48q17304snonjtyt5lnlw64gccc">https://lists.apache.org/thread/rxytj48q17304snonjtyt5lnlw64gccc</a></li>
<li><a href="https://github.com/advisories/GHSA-3f3w-gmqf-4hj3">https://github.com/advisories/GHSA-3f3w-gmqf-4hj3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3f3w-gmqf-4hj3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-26T19:00:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.flume:flume-parent] Apache Flume vulnerable to remote code execution via deserialization of unsafe providerURL]]></title>
        <id>https://github.com/advisories/GHSA-9w4g-fp9h-3q2v</id>
        <link href="https://github.com/advisories/GHSA-9w4g-fp9h-3q2v"/>
        <updated>2022-10-31T15:53:07.000Z</updated>
        <content type="html"><![CDATA[<p>Flume’s JMSSource class can be configured with a providerUrl parameter. A JNDI lookup is performed on this name without performing validation. This could result in untrusted data being deserialized, leading to remote code execution (RCE) attack when a configuration uses a JMS Source with an unsafe providerURL. This issue is fixed in version 1.11.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42468">https://nvd.nist.gov/vuln/detail/CVE-2022-42468</a></li>
<li><a href="https://issues.apache.org/jira/browse/FLUME-3437">https://issues.apache.org/jira/browse/FLUME-3437</a></li>
<li><a href="https://lists.apache.org/thread/1ckhmp539zr2nd2rs45pocpywk2d9zvz">https://lists.apache.org/thread/1ckhmp539zr2nd2rs45pocpywk2d9zvz</a></li>
<li><a href="https://lists.apache.org/thread/939wkx8o90bp6m2ht3t1sdyo1ncypl78">https://lists.apache.org/thread/939wkx8o90bp6m2ht3t1sdyo1ncypl78</a></li>
<li><a href="https://github.com/advisories/GHSA-9w4g-fp9h-3q2v">https://github.com/advisories/GHSA-9w4g-fp9h-3q2v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9w4g-fp9h-3q2v</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-26T19:00:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.iotdb:iotdb-parent] Apache IoTDB subject to ReDOS with Java 8]]></title>
        <id>https://github.com/advisories/GHSA-g6hg-4v3c-6jq7</id>
        <link href="https://github.com/advisories/GHSA-g6hg-4v3c-6jq7"/>
        <updated>2022-10-31T15:43:24.000Z</updated>
        <content type="html"><![CDATA[<p>Apache IoTDB versions 0.12.2 through 0.12.6, and 0.13.0 through 0.13.2 are vulnerable to a Denial of Service attack when accepting untrusted patterns for REGEXP queries with Java 8. This issue is patched in 0.13.3. Users should upgrade or use a later version of Java to avoid it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-43766">https://nvd.nist.gov/vuln/detail/CVE-2022-43766</a></li>
<li><a href="https://lists.apache.org/thread/9pgpb82p5brooy41n8l5q0y9h33db2zn">https://lists.apache.org/thread/9pgpb82p5brooy41n8l5q0y9h33db2zn</a></li>
<li><a href="https://github.com/advisories/GHSA-g6hg-4v3c-6jq7">https://github.com/advisories/GHSA-g6hg-4v3c-6jq7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6hg-4v3c-6jq7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-10-26T19:00:39.000Z</published>
    </entry>
</feed>