<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-12-13T11:01:17.932Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[com.sonyericsson.hudson.plugins.gerrit:gerrit-trigger] Missing permission check in Jenkins Gerrit Trigger Plugin]]></title>
        <id>https://github.com/advisories/GHSA-4r39-f4rh-j6q8</id>
        <link href="https://github.com/advisories/GHSA-4r39-f4rh-j6q8"/>
        <updated>2023-12-13T10:33:36.000Z</updated>
        <content type="html"><![CDATA[<p>A missing permission check in Jenkins Gerrit Trigger Plugin 2.30.1 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified HTTP URL or SSH server using attacker-specified credentials, or determine the existence of a file with a given path on the Jenkins master.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16552">https://nvd.nist.gov/vuln/detail/CVE-2019-16552</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-12-17/#SECURITY-1527">https://jenkins.io/security/advisory/2019-12-17/#SECURITY-1527</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/12/17/1">http://www.openwall.com/lists/oss-security/2019/12/17/1</a></li>
<li><a href="https://github.com/jenkinsci/gerrit-trigger-plugin/commit/bdc94d3e23df0ad6a64565c732498f89ff743b51">https://github.com/jenkinsci/gerrit-trigger-plugin/commit/bdc94d3e23df0ad6a64565c732498f89ff743b51</a></li>
<li><a href="https://github.com/advisories/GHSA-4r39-f4rh-j6q8">https://github.com/advisories/GHSA-4r39-f4rh-j6q8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4r39-f4rh-j6q8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:03:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:google-compute-engine] Jenkins Google Compute Engine Plugin Cross-Site Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x24m-wr2f-p3vc</id>
        <link href="https://github.com/advisories/GHSA-x24m-wr2f-p3vc"/>
        <updated>2023-12-13T10:23:28.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site request forgery vulnerability in Jenkins Google Compute Engine Plugin 4.1.1 and earlier in ComputeEngineCloud#doProvision could be used to provision new agents. Google Compute Engine Plugin 4.2.0 requires POST requests for this API endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16548">https://nvd.nist.gov/vuln/detail/CVE-2019-16548</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-11-21/#SECURITY-1586">https://jenkins.io/security/advisory/2019-11-21/#SECURITY-1586</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/11/21/1">http://www.openwall.com/lists/oss-security/2019/11/21/1</a></li>
<li><a href="https://github.com/jenkinsci/google-compute-engine-plugin/commit/aaf81996741c67229982f70b3eaa83894e035025">https://github.com/jenkinsci/google-compute-engine-plugin/commit/aaf81996741c67229982f70b3eaa83894e035025</a></li>
<li><a href="https://github.com/advisories/GHSA-x24m-wr2f-p3vc">https://github.com/advisories/GHSA-x24m-wr2f-p3vc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x24m-wr2f-p3vc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:01:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[de.wellnerbou.jenkins:git-changelog] Jenkins Git Changelog Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-h27g-72mh-9m33</id>
        <link href="https://github.com/advisories/GHSA-h27g-72mh-9m33"/>
        <updated>2023-12-13T10:16:33.000Z</updated>
        <content type="html"><![CDATA[<p>Git Changelog Plugin stored MediaWiki and Jira passwords unencrypted in job <code>config.xml</code> files on the Jenkins controller. These passwords could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>Git Changelog Plugin now stores these passwords encrypted. Existing jobs need to have their configuration saved for existing plain text passwords to be overwritten.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10414">https://nvd.nist.gov/vuln/detail/CVE-2019-10414</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1574">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1574</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/jenkinsci/git-changelog-plugin/commit/356243aa6d3f6ad60f057e7567a3466910618441">https://github.com/jenkinsci/git-changelog-plugin/commit/356243aa6d3f6ad60f057e7567a3466910618441</a></li>
<li><a href="https://github.com/advisories/GHSA-h27g-72mh-9m33">https://github.com/advisories/GHSA-h27g-72mh-9m33</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h27g-72mh-9m33</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.inedo.proget:inedo-proget] Jenkins Inedo ProGet Plugin Plugin has Cleartext Transmission of Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-f6g8-pxvp-9328</id>
        <link href="https://github.com/advisories/GHSA-f6g8-pxvp-9328"/>
        <updated>2023-12-13T10:13:28.000Z</updated>
        <content type="html"><![CDATA[<p>Inedo ProGet Plugin Plugin stores a service password in its global Jenkins configuration.</p>
<p>While the password is stored encrypted on disk, it was transmitted in plain text as part of the configuration form. This could result in exposure of the password through browser extensions, cross-site scripting vulnerabilities, and similar situations.</p>
<p>Inedo ProGet Plugin Plugin now encrypts the password transmitted to administrators viewing the global configuration form.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10412">https://nvd.nist.gov/vuln/detail/CVE-2019-10412</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1514">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1514</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/jenkinsci/inedo-proget-plugin/commit/9634846c65f204c2b54237674b2cecf66d5d5fdb">https://github.com/jenkinsci/inedo-proget-plugin/commit/9634846c65f204c2b54237674b2cecf66d5d5fdb</a></li>
<li><a href="https://github.com/advisories/GHSA-f6g8-pxvp-9328">https://github.com/advisories/GHSA-f6g8-pxvp-9328</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f6g8-pxvp-9328</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Improper Neutralization of Input During Web Page Generation in Jenkins]]></title>
        <id>https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</id>
        <link href="https://github.com/advisories/GHSA-hg6g-jj7g-x6v2"/>
        <updated>2023-12-13T10:09:11.000Z</updated>
        <content type="html"><![CDATA[<p>In Jenkins 2.196 and earlier, LTS 2.176.3 and earlier, the f:expandableTextBox form control interpreted its content as HTML when expanded, resulting in a stored XSS vulnerability exploitable by users with permission to define its contents (typically Job/Configure).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10401">https://nvd.nist.gov/vuln/detail/CVE-2019-10401</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1498">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1498</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/df600eb7a28dea189c41037398fd36fcea36302e">https://github.com/jenkinsci/jenkins/commit/df600eb7a28dea189c41037398fd36fcea36302e</a></li>
<li><a href="https://github.com/advisories/GHSA-hg6g-jj7g-x6v2">https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:00:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.main:jenkins-core] Improper Neutralization of Input During Web Page Generation in Jenkins]]></title>
        <id>https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</id>
        <link href="https://github.com/advisories/GHSA-hg6g-jj7g-x6v2"/>
        <updated>2023-12-13T10:09:11.000Z</updated>
        <content type="html"><![CDATA[<p>In Jenkins 2.196 and earlier, LTS 2.176.3 and earlier, the f:expandableTextBox form control interpreted its content as HTML when expanded, resulting in a stored XSS vulnerability exploitable by users with permission to define its contents (typically Job/Configure).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10401">https://nvd.nist.gov/vuln/detail/CVE-2019-10401</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1498">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1498</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/jenkinsci/jenkins/commit/df600eb7a28dea189c41037398fd36fcea36302e">https://github.com/jenkinsci/jenkins/commit/df600eb7a28dea189c41037398fd36fcea36302e</a></li>
<li><a href="https://github.com/advisories/GHSA-hg6g-jj7g-x6v2">https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hg6g-jj7g-x6v2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:00:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:git-client] Improper Neutralization of Special Elements used in an OS Command in Jenkins Git Client Plugin]]></title>
        <id>https://github.com/advisories/GHSA-hw6x-2qwv-rxr7</id>
        <link href="https://github.com/advisories/GHSA-hw6x-2qwv-rxr7"/>
        <updated>2023-12-13T10:08:25.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Git Client Plugin 2.8.4 and earlier did not properly restrict values passed as URL argument to an invocation of 'git ls-remote', resulting in OS command injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10392">https://nvd.nist.gov/vuln/detail/CVE-2019-10392</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-12/#SECURITY-1534">https://jenkins.io/security/advisory/2019-09-12/#SECURITY-1534</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/12/2">http://www.openwall.com/lists/oss-security/2019/09/12/2</a></li>
<li><a href="https://github.com/jenkinsci/git-client-plugin/commit/899123fa2eb9dd2c37137aae630c47c6be6b4b02">https://github.com/jenkinsci/git-client-plugin/commit/899123fa2eb9dd2c37137aae630c47c6be6b4b02</a></li>
<li><a href="https://github.com/advisories/GHSA-hw6x-2qwv-rxr7">https://github.com/advisories/GHSA-hw6x-2qwv-rxr7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hw6x-2qwv-rxr7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:55:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.jenkins:configuration-as-code] Plaintext Storage of a Password in Jenkins Configuration as Code Plugin]]></title>
        <id>https://github.com/advisories/GHSA-ggmx-pq89-7mcr</id>
        <link href="https://github.com/advisories/GHSA-ggmx-pq89-7mcr"/>
        <updated>2023-12-13T10:03:24.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Configuration as Code Plugin prior to version 1.25 did not treat the proxy password as a secret to be masked when logging or encrypted for export.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10345">https://nvd.nist.gov/vuln/detail/CVE-2019-10345</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-07-31/#SECURITY-1303">https://jenkins.io/security/advisory/2019-07-31/#SECURITY-1303</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/07/31/1">http://www.openwall.com/lists/oss-security/2019/07/31/1</a></li>
<li><a href="https://github.com/jenkinsci/configuration-as-code-plugin/commit/73afe3cb10a723cb06e29c2e5499206aadae3a0d">https://github.com/jenkinsci/configuration-as-code-plugin/commit/73afe3cb10a723cb06e29c2e5499206aadae3a0d</a></li>
<li><a href="https://github.com/advisories/GHSA-ggmx-pq89-7mcr">https://github.com/advisories/GHSA-ggmx-pq89-7mcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ggmx-pq89-7mcr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:51:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:oken-macro] Improper Restriction of XML External Entity Reference Jenkins Token Macro Plugin]]></title>
        <id>https://github.com/advisories/GHSA-g6h2-4x64-c59x</id>
        <link href="https://github.com/advisories/GHSA-g6h2-4x64-c59x"/>
        <updated>2023-12-13T10:01:00.000Z</updated>
        <content type="html"><![CDATA[<p>An XML external entities (XXE) vulnerability in Jenkins Token Macro Plugin 2.7 and earlier allowed attackers able to control a the content of the input file for the "XML" macro to have Jenkins resolve external entities, resulting in the extraction of secrets from the Jenkins agent, server-side request forgery, or denial-of-service attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10337">https://nvd.nist.gov/vuln/detail/CVE-2019-10337</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-06-11/#SECURITY-1399">https://jenkins.io/security/advisory/2019-06-11/#SECURITY-1399</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/06/11/1">http://www.openwall.com/lists/oss-security/2019/06/11/1</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:1636">https://access.redhat.com/errata/RHSA-2019:1636</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:1851">https://access.redhat.com/errata/RHSA-2019:1851</a></li>
<li><a href="http://www.securityfocus.com/bid/108747">http://www.securityfocus.com/bid/108747</a></li>
<li><a href="https://github.com/jenkinsci/token-macro-plugin/commit/004319f1b6e2a0f097a096b9df9dc19a5ac0d9b0">https://github.com/jenkinsci/token-macro-plugin/commit/004319f1b6e2a0f097a096b9df9dc19a5ac0d9b0</a></li>
<li><a href="https://github.com/advisories/GHSA-g6h2-4x64-c59x">https://github.com/advisories/GHSA-g6h2-4x64-c59x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g6h2-4x64-c59x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:47:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:credentials] Insertion of Sensitive Information into Externally-Accessible File or Directory in Jenkins Credentials Plugin]]></title>
        <id>https://github.com/advisories/GHSA-xm94-9jw8-p6hw</id>
        <link href="https://github.com/advisories/GHSA-xm94-9jw8-p6hw"/>
        <updated>2023-12-13T10:00:22.000Z</updated>
        <content type="html"><![CDATA[<p>Jenkins Credentials Plugin 2.1.18 and earlier allowed users with permission to create or update credentials to confirm the existence of files on the Jenkins master with an attacker-specified path, and obtain the certificate content of files containing a PKCS#12 certificate.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10320">https://nvd.nist.gov/vuln/detail/CVE-2019-10320</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-05-21/#SECURITY-1322">https://jenkins.io/security/advisory/2019-05-21/#SECURITY-1322</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/05/21/1">http://www.openwall.com/lists/oss-security/2019/05/21/1</a></li>
<li><a href="https://access.redhat.com/errata/RHBA-2019:1605">https://access.redhat.com/errata/RHBA-2019:1605</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:1636">https://access.redhat.com/errata/RHSA-2019:1636</a></li>
<li><a href="https://wwws.nightwatchcybersecurity.com/2019/05/23/exploring-the-file-system-via-jenkins-credentials-plugin-vulnerability-cve-2019-10320/">https://wwws.nightwatchcybersecurity.com/2019/05/23/exploring-the-file-system-via-jenkins-credentials-plugin-vulnerability-cve-2019-10320/</a></li>
<li><a href="http://seclists.org/fulldisclosure/2019/May/39">http://seclists.org/fulldisclosure/2019/May/39</a></li>
<li><a href="http://www.securityfocus.com/bid/108462">http://www.securityfocus.com/bid/108462</a></li>
<li><a href="https://github.com/jenkinsci/credentials-plugin/commit/40d0b5cc53c265b601ffaa4469310fad390a80fb">https://github.com/jenkinsci/credentials-plugin/commit/40d0b5cc53c265b601ffaa4469310fad390a80fb</a></li>
<li><a href="https://github.com/advisories/GHSA-xm94-9jw8-p6hw">https://github.com/advisories/GHSA-xm94-9jw8-p6hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xm94-9jw8-p6hw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:46:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:ontrack] Sandbox bypass in ontrack Jenkins Plugin]]></title>
        <id>https://github.com/advisories/GHSA-qw28-g63m-jxqv</id>
        <link href="https://github.com/advisories/GHSA-qw28-g63m-jxqv"/>
        <updated>2023-12-13T09:33:52.000Z</updated>
        <content type="html"><![CDATA[<p>A sandbox bypass vulnerability in Jenkins ontrack Plugin 3.4 and earlier allowed attackers with control over ontrack DSL definitions to execute arbitrary code on the Jenkins master JVM.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10306">https://nvd.nist.gov/vuln/detail/CVE-2019-10306</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-04-17/#SECURITY-1341">https://jenkins.io/security/advisory/2019-04-17/#SECURITY-1341</a></li>
<li><a href="http://www.securityfocus.com/bid/108045">http://www.securityfocus.com/bid/108045</a></li>
<li><a href="https://github.com/jenkinsci/ontrack-plugin/commit/7f0f806c18fdd6043103d848ba4c813cb805dd85">https://github.com/jenkinsci/ontrack-plugin/commit/7f0f806c18fdd6043103d848ba4c813cb805dd85</a></li>
<li><a href="https://github.com/advisories/GHSA-qw28-g63m-jxqv">https://github.com/advisories/GHSA-qw28-g63m-jxqv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw28-g63m-jxqv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-24T16:43:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jfinal:jfinal] Cross-site Scripting in JFinalCMS]]></title>
        <id>https://github.com/advisories/GHSA-f2w8-4m48-5qrq</id>
        <link href="https://github.com/advisories/GHSA-f2w8-4m48-5qrq"/>
        <updated>2023-12-12T20:55:45.000Z</updated>
        <content type="html"><![CDATA[<p>JFinalCMS v5.0.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the column management department.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49485">https://nvd.nist.gov/vuln/detail/CVE-2023-49485</a></li>
<li><a href="https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20storage%20type%20XSS%20in%20the%20column%20management%20department.md">https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20storage%20type%20XSS%20in%20the%20column%20management%20department.md</a></li>
<li><a href="https://github.com/advisories/GHSA-f2w8-4m48-5qrq">https://github.com/advisories/GHSA-f2w8-4m48-5qrq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2w8-4m48-5qrq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-08T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jfinal:jfinal] Cross-site Scripting in JFinalCMS]]></title>
        <id>https://github.com/advisories/GHSA-hjfp-2j7q-xmx4</id>
        <link href="https://github.com/advisories/GHSA-hjfp-2j7q-xmx4"/>
        <updated>2023-12-12T20:54:50.000Z</updated>
        <content type="html"><![CDATA[<p>JFinalCMS v5.0.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the model management department.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49486">https://nvd.nist.gov/vuln/detail/CVE-2023-49486</a></li>
<li><a href="https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20stored%20XSS%20in%20the%20model%20management%20department.md">https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20stored%20XSS%20in%20the%20model%20management%20department.md</a></li>
<li><a href="https://github.com/advisories/GHSA-hjfp-2j7q-xmx4">https://github.com/advisories/GHSA-hjfp-2j7q-xmx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hjfp-2j7q-xmx4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-08T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jfinal:jfinal] Cross-site Scripting in JFinalCMS]]></title>
        <id>https://github.com/advisories/GHSA-m42v-qv3c-h6j7</id>
        <link href="https://github.com/advisories/GHSA-m42v-qv3c-h6j7"/>
        <updated>2023-12-12T20:53:58.000Z</updated>
        <content type="html"><![CDATA[<p>JFinalCMS v5.0.0 was discovered to contain a cross-site scripting (XSS) vulnerability in the navigation management department.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49487">https://nvd.nist.gov/vuln/detail/CVE-2023-49487</a></li>
<li><a href="https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20stored%20XSS%20in%20the%20navigation%20management%20office.md">https://github.com/Rabb1ter/cms/blob/main/There%20is%20a%20stored%20XSS%20in%20the%20navigation%20management%20office.md</a></li>
<li><a href="https://github.com/advisories/GHSA-m42v-qv3c-h6j7">https://github.com/advisories/GHSA-m42v-qv3c-h6j7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m42v-qv3c-h6j7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-12-08T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.validation] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.utilities] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r5] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r4b] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.convertors] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.core] HL7 FHIR Partial Path Zip Slip due to bypass of CVE-2023-24057]]></title>
        <id>https://github.com/advisories/GHSA-9654-pr4f-gh6m</id>
        <link href="https://github.com/advisories/GHSA-9654-pr4f-gh6m"/>
        <updated>2023-12-12T19:46:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Zip Slip protections implemented in CVE-2023-24057 (GHSA-jqh6-9574-5x22) can be bypassed due a partial path traversal vulnerability.</p>
<p>This issue allows a malicious actor to potentially break out of the <code>TerminologyCacheManager</code> cache directory. The impact is limited to sibling directories.</p>
<p>To demonstrate the vulnerability, consider <code>userControlled.getCanonicalPath().startsWith("/usr/out")</code> will allow an attacker to access a directory with a name like <code>/usr/outnot</code>. </p>
<h3 id="why">Why?</h3>
<p>To demonstrate this vulnerability, consider <code>"/usr/outnot".startsWith("/usr/out")</code>.
The check is bypassed although <code>/outnot</code> is not under the <code>/out</code> directory.
It's important to understand that the terminating slash may be removed when using various <code>String</code> representations of the <code>File</code> object.
For example, on Linux, <code>println(new File("/var"))</code> will print <code>/var</code>, but <code>println(new File("/var", "/")</code> will print <code>/var/</code>;
however, <code>println(new File("/var", "/").getCanonicalPath())</code> will print <code>/var</code>.</p>
<h3 id="the-fix">The Fix</h3>
<p>Comparing paths with the <code>java.nio.files.Path#startsWith</code> will adequately protect againts this vulnerability.</p>
<p>For example: <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY)</code> or <code>file.getCanonicalFile().toPath().startsWith(BASE_DIRECTORY_FILE.getCanonicalFile().toPath())</code></p>
<h3 id="other-examples">Other Examples</h3>
<ul>
<li><a href="https://github.com/aws/aws-sdk-java/security/advisories/GHSA-c28r-hw5m-5gv3">CVE-2022-31159</a> - aws/aws-sdk-java</li>
<li><a href="https://securitylab.github.com/advisories/GHSL-2022-008_The_OWASP_Enterprise_Security_API/">CVE-2022-23457</a> - ESAPI/esapi-java-legacy</li>
</ul>
<h3 id="vulnerability">Vulnerability</h3>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></p>
<p>While <code>getAbsolutePath</code> will return a normalized path, because the string <code>path</code> is not slash terminated, the guard can be bypassed to write the contents of the Zip file to a sibling directory of the cache directory.</p>
<h3 id="patches">Patches</h3>
<p>All org.hl7.fhir.core libraries should be updated to 5.6.106.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105">https://github.com/hapifhir/org.hl7.fhir.core/blob/b0daf666725fa14476d147522155af1e81922aac/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java#L99-L105</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106">https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.106</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/pull/1162">https://github.com/hapifhir/org.hl7.fhir.core/pull/1162</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28465">https://nvd.nist.gov/vuln/detail/CVE-2023-28465</a></li>
<li><a href="https://github.com/advisories/GHSA-9654-pr4f-gh6m">https://github.com/advisories/GHSA-9654-pr4f-gh6m</a></li>
<li><a href="https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health">https://www.smilecdr.com/our-blog/statement-on-cve-2023-24057-smile-digital-health</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9654-pr4f-gh6m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-03-10T22:15:55.000Z</published>
    </entry>
</feed>