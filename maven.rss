<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-03-02T13:06:25.163Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:gcal] Jenkins Google Calendar Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-8gq4-x72r-6xcr</id>
        <link href="https://github.com/advisories/GHSA-8gq4-x72r-6xcr"/>
        <updated>2023-03-01T22:37:56.000Z</updated>
        <content type="html"><![CDATA[<p>Google Calendar Plugin stores a calendar password unencrypted in job <code>config.xml</code> files on the Jenkins controller. This password can be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10425">https://nvd.nist.gov/vuln/detail/CVE-2019-10425</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1572">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1572</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-8gq4-x72r-6xcr">https://github.com/advisories/GHSA-8gq4-x72r-6xcr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8gq4-x72r-6xcr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jamesmurty.utils:java-xmlbuilder] java-xmlbuilder vulnerable to XML External Entity Reference]]></title>
        <id>https://github.com/advisories/GHSA-3vrc-rrpw-r5pw</id>
        <link href="https://github.com/advisories/GHSA-3vrc-rrpw-r5pw"/>
        <updated>2023-03-01T20:46:07.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in java-xmlbuilder up to 1.1. It has been rated as problematic. Affected by this issue is some unknown functionality. The manipulation leads to xml external entity reference. Upgrading to version 1.2 is able to address this issue. The name of the patch is e6fddca201790abab4f2c274341c0bb8835c3e73. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-221480.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-125087">https://nvd.nist.gov/vuln/detail/CVE-2014-125087</a></li>
<li><a href="https://github.com/jmurty/java-xmlbuilder/issues/6">https://github.com/jmurty/java-xmlbuilder/issues/6</a></li>
<li><a href="https://github.com/jmurty/java-xmlbuilder/commit/e6fddca201790abab4f2c274341c0bb8835c3e73">https://github.com/jmurty/java-xmlbuilder/commit/e6fddca201790abab4f2c274341c0bb8835c3e73</a></li>
<li><a href="https://github.com/jmurty/java-xmlbuilder/releases/tag/v1.2">https://github.com/jmurty/java-xmlbuilder/releases/tag/v1.2</a></li>
<li><a href="https://vuldb.com/?ctiid.221480">https://vuldb.com/?ctiid.221480</a></li>
<li><a href="https://vuldb.com/?id.221480">https://vuldb.com/?id.221480</a></li>
<li><a href="https://github.com/advisories/GHSA-3vrc-rrpw-r5pw">https://github.com/advisories/GHSA-3vrc-rrpw-r5pw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3vrc-rrpw-r5pw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-02-19T18:30:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.thrift:libthrift] Improper Input Validation in Apache Thrift]]></title>
        <id>https://github.com/advisories/GHSA-wjxj-f8rg-99wx</id>
        <link href="https://github.com/advisories/GHSA-wjxj-f8rg-99wx"/>
        <updated>2023-03-01T20:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Thrift Java client library versions 0.5.0 prior to 0.9.3-1 and 0.10.0 prior to 0.12.0 can bypass SASL negotiation isComplete validation in the org.apache.thrift.transport.TSaslTransport class. An assert used to determine if the SASL handshake had successfully completed could be disabled in production settings making the validation incomplete.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1320">https://nvd.nist.gov/vuln/detail/CVE-2018-1320</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2413">https://access.redhat.com/errata/RHSA-2019:2413</a></li>
<li><a href="https://lists.apache.org/thread.html/07c3cd5a2953a4b253eee4437b1397b1603d0f886437e19b657d2c54@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/07c3cd5a2953a4b253eee4437b1397b1603d0f886437e19b657d2c54@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/187684ac8b94d55256253f5220cb55e8bd568afdf9a8a86e9bbb66c9@%3Cdevnull.infra.apache.org%3E">https://lists.apache.org/thread.html/187684ac8b94d55256253f5220cb55e8bd568afdf9a8a86e9bbb66c9@%3Cdevnull.infra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/3d3b6849fcf4cd1e87703b3dde0d57aabeb9ba0193dc0cf3c97f545d@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/3d3b6849fcf4cd1e87703b3dde0d57aabeb9ba0193dc0cf3c97f545d@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/6b07f6f618155c777191b4fad8ade0f0cf4ed4c12a1a746ce903d816@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/6b07f6f618155c777191b4fad8ade0f0cf4ed4c12a1a746ce903d816@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/8be5b16c02567fff61b1284e5df433a4e38617bc7de4804402bf62be@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/8be5b16c02567fff61b1284e5df433a4e38617bc7de4804402bf62be@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/da5234b5e78f1c99190407f791dfe1bf6c58de8d30d15974a9669be3@%3Cuser.thrift.apache.org%3E">https://lists.apache.org/thread.html/da5234b5e78f1c99190407f791dfe1bf6c58de8d30d15974a9669be3@%3Cuser.thrift.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/dbe3a39b48900318ad44494e8721f786901ba4520cd412c7698f534f@%3Cdev.storm.apache.org%3E">https://lists.apache.org/thread.html/dbe3a39b48900318ad44494e8721f786901ba4520cd412c7698f534f@%3Cdev.storm.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/dfee89880c84874058c6a584d8128468f8d3c2ac25068ded91073adc@%3Cuser.storm.apache.org%3E">https://lists.apache.org/thread.html/dfee89880c84874058c6a584d8128468f8d3c2ac25068ded91073adc@%3Cuser.storm.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/e825ff2f4e129c0ecdb6a19030b53c1ccdf810a8980667628d0c6a80@%3Cannounce.apache.org%3E">https://lists.apache.org/thread.html/e825ff2f4e129c0ecdb6a19030b53c1ccdf810a8980667628d0c6a80@%3Cannounce.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E">https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r09c3dcdccf4b74ad13bda79b354e6b793255ccfe245cca1b8cee23f5@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r09c3dcdccf4b74ad13bda79b354e6b793255ccfe245cca1b8cee23f5@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r2278846f7ab06ec07a0aa31457235e0ded9191b216cba55f3f315f16@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r2278846f7ab06ec07a0aa31457235e0ded9191b216cba55f3f315f16@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r261972a3b14cf6f1dcd94b1b265e9ef644a38ccdf0d0238fa0c4d459@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r261972a3b14cf6f1dcd94b1b265e9ef644a38ccdf0d0238fa0c4d459@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3d71a6dbb063aa61ba81278fe622b20bfe7501bb3821c27695641ac3@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r3d71a6dbb063aa61ba81278fe622b20bfe7501bb3821c27695641ac3@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/02/msg00008.html">https://lists.debian.org/debian-lts-announce/2019/02/msg00008.html</a></li>
<li><a href="https://support.f5.com/csp/article/K36361684">https://support.f5.com/csp/article/K36361684</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html">https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/07/24/3">http://www.openwall.com/lists/oss-security/2019/07/24/3</a></li>
<li><a href="https://lists.apache.org/thread.html/r1015eaadef8314daa9348aa423086a732cfeb998ceb5d42605c9b0b5@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r1015eaadef8314daa9348aa423086a732cfeb998ceb5d42605c9b0b5@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://github.com/apache/thrift/releases/tag/0.9.3.1">https://github.com/apache/thrift/releases/tag/0.9.3.1</a></li>
<li><a href="https://issues.apache.org/jira/browse/THRIFT-4506">https://issues.apache.org/jira/browse/THRIFT-4506</a></li>
<li><a href="https://web.archive.org/web/20200227094237/http://www.securityfocus.com/bid/106551">https://web.archive.org/web/20200227094237/http://www.securityfocus.com/bid/106551</a></li>
<li><a href="https://github.com/advisories/GHSA-wjxj-f8rg-99wx">https://github.com/advisories/GHSA-wjxj-f8rg-99wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjxj-f8rg-99wx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-01-17T13:56:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.thrift:libthrift] Improper Input Validation in Apache Thrift]]></title>
        <id>https://github.com/advisories/GHSA-wjxj-f8rg-99wx</id>
        <link href="https://github.com/advisories/GHSA-wjxj-f8rg-99wx"/>
        <updated>2023-03-01T20:05:51.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Thrift Java client library versions 0.5.0 prior to 0.9.3-1 and 0.10.0 prior to 0.12.0 can bypass SASL negotiation isComplete validation in the org.apache.thrift.transport.TSaslTransport class. An assert used to determine if the SASL handshake had successfully completed could be disabled in production settings making the validation incomplete.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1320">https://nvd.nist.gov/vuln/detail/CVE-2018-1320</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2413">https://access.redhat.com/errata/RHSA-2019:2413</a></li>
<li><a href="https://lists.apache.org/thread.html/07c3cd5a2953a4b253eee4437b1397b1603d0f886437e19b657d2c54@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/07c3cd5a2953a4b253eee4437b1397b1603d0f886437e19b657d2c54@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/187684ac8b94d55256253f5220cb55e8bd568afdf9a8a86e9bbb66c9@%3Cdevnull.infra.apache.org%3E">https://lists.apache.org/thread.html/187684ac8b94d55256253f5220cb55e8bd568afdf9a8a86e9bbb66c9@%3Cdevnull.infra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/3d3b6849fcf4cd1e87703b3dde0d57aabeb9ba0193dc0cf3c97f545d@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/3d3b6849fcf4cd1e87703b3dde0d57aabeb9ba0193dc0cf3c97f545d@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/6b07f6f618155c777191b4fad8ade0f0cf4ed4c12a1a746ce903d816@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/6b07f6f618155c777191b4fad8ade0f0cf4ed4c12a1a746ce903d816@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/8be5b16c02567fff61b1284e5df433a4e38617bc7de4804402bf62be@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/8be5b16c02567fff61b1284e5df433a4e38617bc7de4804402bf62be@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E">https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/da5234b5e78f1c99190407f791dfe1bf6c58de8d30d15974a9669be3@%3Cuser.thrift.apache.org%3E">https://lists.apache.org/thread.html/da5234b5e78f1c99190407f791dfe1bf6c58de8d30d15974a9669be3@%3Cuser.thrift.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/dbe3a39b48900318ad44494e8721f786901ba4520cd412c7698f534f@%3Cdev.storm.apache.org%3E">https://lists.apache.org/thread.html/dbe3a39b48900318ad44494e8721f786901ba4520cd412c7698f534f@%3Cdev.storm.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/dfee89880c84874058c6a584d8128468f8d3c2ac25068ded91073adc@%3Cuser.storm.apache.org%3E">https://lists.apache.org/thread.html/dfee89880c84874058c6a584d8128468f8d3c2ac25068ded91073adc@%3Cuser.storm.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/e825ff2f4e129c0ecdb6a19030b53c1ccdf810a8980667628d0c6a80@%3Cannounce.apache.org%3E">https://lists.apache.org/thread.html/e825ff2f4e129c0ecdb6a19030b53c1ccdf810a8980667628d0c6a80@%3Cannounce.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E">https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r09c3dcdccf4b74ad13bda79b354e6b793255ccfe245cca1b8cee23f5@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r09c3dcdccf4b74ad13bda79b354e6b793255ccfe245cca1b8cee23f5@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r2278846f7ab06ec07a0aa31457235e0ded9191b216cba55f3f315f16@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r2278846f7ab06ec07a0aa31457235e0ded9191b216cba55f3f315f16@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r261972a3b14cf6f1dcd94b1b265e9ef644a38ccdf0d0238fa0c4d459@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r261972a3b14cf6f1dcd94b1b265e9ef644a38ccdf0d0238fa0c4d459@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r3d71a6dbb063aa61ba81278fe622b20bfe7501bb3821c27695641ac3@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r3d71a6dbb063aa61ba81278fe622b20bfe7501bb3821c27695641ac3@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r4d3f1d3e333d9c2b2f6e6ae8ed8750d4de03410ac294bcd12c7eefa3@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/02/msg00008.html">https://lists.debian.org/debian-lts-announce/2019/02/msg00008.html</a></li>
<li><a href="https://support.f5.com/csp/article/K36361684">https://support.f5.com/csp/article/K36361684</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html">https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/07/24/3">http://www.openwall.com/lists/oss-security/2019/07/24/3</a></li>
<li><a href="https://lists.apache.org/thread.html/r1015eaadef8314daa9348aa423086a732cfeb998ceb5d42605c9b0b5@%3Ccommits.cassandra.apache.org%3E">https://lists.apache.org/thread.html/r1015eaadef8314daa9348aa423086a732cfeb998ceb5d42605c9b0b5@%3Ccommits.cassandra.apache.org%3E</a></li>
<li><a href="https://github.com/apache/thrift/releases/tag/0.9.3.1">https://github.com/apache/thrift/releases/tag/0.9.3.1</a></li>
<li><a href="https://issues.apache.org/jira/browse/THRIFT-4506">https://issues.apache.org/jira/browse/THRIFT-4506</a></li>
<li><a href="https://web.archive.org/web/20200227094237/http://www.securityfocus.com/bid/106551">https://web.archive.org/web/20200227094237/http://www.securityfocus.com/bid/106551</a></li>
<li><a href="https://github.com/advisories/GHSA-wjxj-f8rg-99wx">https://github.com/advisories/GHSA-wjxj-f8rg-99wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjxj-f8rg-99wx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-01-17T13:56:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-services] HTML Injection in Keycloak Admin REST API]]></title>
        <id>https://github.com/advisories/GHSA-m4fv-gm5m-4725</id>
        <link href="https://github.com/advisories/GHSA-m4fv-gm5m-4725"/>
        <updated>2023-03-01T17:58:02.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>execute-actions-email</code> endpoint of the Keycloak Admin REST API allows a malicious actor to send emails containing phishing links to Keycloak users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-m4fv-gm5m-4725">https://github.com/keycloak/keycloak/security/advisories/GHSA-m4fv-gm5m-4725</a></li>
<li><a href="https://github.com/keycloak/keycloak/pull/16764">https://github.com/keycloak/keycloak/pull/16764</a></li>
<li><a href="https://github.com/keycloak/keycloak/commit/fc3c61235fa30132123c17ed8702ff7b3a672fe9">https://github.com/keycloak/keycloak/commit/fc3c61235fa30132123c17ed8702ff7b3a672fe9</a></li>
<li><a href="https://github.com/advisories/GHSA-m4fv-gm5m-4725">https://github.com/advisories/GHSA-m4fv-gm5m-4725</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4fv-gm5m-4725</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T17:58:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-parent] Keycloak Cross-site Scripting on OpenID connect login service]]></title>
        <id>https://github.com/advisories/GHSA-9hhc-pj4w-w5rv</id>
        <link href="https://github.com/advisories/GHSA-9hhc-pj4w-w5rv"/>
        <updated>2023-03-01T17:38:57.000Z</updated>
        <content type="html"><![CDATA[<p>A reflected cross-site scripting (XSS) vulnerability was found in the <code>oob</code> OAuth endpoint due to incorrect null-byte handling. This issue allows a malicious link to insert an arbitrary URI into a Keycloak error page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-9hhc-pj4w-w5rv">https://github.com/keycloak/keycloak/security/advisories/GHSA-9hhc-pj4w-w5rv</a></li>
<li><a href="https://github.com/keycloak/keycloak/pull/16774">https://github.com/keycloak/keycloak/pull/16774</a></li>
<li><a href="https://github.com/keycloak/keycloak/commit/30d0e9d22dae51392e5a3748a1c68c116667359a">https://github.com/keycloak/keycloak/commit/30d0e9d22dae51392e5a3748a1c68c116667359a</a></li>
<li><a href="https://github.com/advisories/GHSA-9hhc-pj4w-w5rv">https://github.com/advisories/GHSA-9hhc-pj4w-w5rv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9hhc-pj4w-w5rv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T17:38:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-services] Keycloak vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-w354-2f3c-qvg9</id>
        <link href="https://github.com/advisories/GHSA-w354-2f3c-qvg9"/>
        <updated>2023-03-01T16:18:56.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Keycloak. Under specific circumstances, HTML entities are not sanitized during user impersonation, resulting in a Cross-site scripting (XSS) vulnerability.</p>
<h2 id="details">Details</h2>
<p>This issue is the result of code found in the exception here: <a href="https://github.com/keycloak/keycloak/blob/48835576daa158443f69917ac309e1a7c951bc87/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java#L1045">https://github.com/keycloak/keycloak/blob/48835576daa158443f69917ac309e1a7c951bc87/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java#L1045</a></p>
<h2 id="steps-to-reproduce">Steps to reproduce</h2>
<p>When using the legacy admin console:</p>
<ol>
<li>Sign in as Admin user in first tab.</li>
<li>In that tab create new user in keycloak admin section &gt; intercept user creation request and modify it by including malicious js script there (in username field).</li>
<li>Sign in as newly created user in second tab (same browser window but second tab).</li>
<li>Navigate back to first tab where you are signed in as admin, navigate to admin console which lists all application users.</li>
<li>Choose any user (except newly created malicious one) – modify anything for that user in his settings. E.g. navigate to credentials tab and set new credentials for him. Also set new password as temporary.</li>
<li>After update for that user is made, use impersonate option on that modified user.</li>
<li>You should see window with form which requires providing new credentials – fill it and submit request.</li>
<li>Just after submiting request user will get notified that “You are already authenticated as different user ‘[user + payload]’ in this session. Please sign out first.”  And malicious payload will be executed instantly.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-w354-2f3c-qvg9">https://github.com/keycloak/keycloak/security/advisories/GHSA-w354-2f3c-qvg9</a></li>
<li><a href="https://access.redhat.com/security/cve/cve-2022-1438">https://access.redhat.com/security/cve/cve-2022-1438</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2031904">https://bugzilla.redhat.com/show_bug.cgi?id=2031904</a></li>
<li><a href="https://github.com/keycloak/keycloak/blob/48835576daa158443f69917ac309e1a7c951bc87/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java#L1045">https://github.com/keycloak/keycloak/blob/48835576daa158443f69917ac309e1a7c951bc87/services/src/main/java/org/keycloak/authentication/AuthenticationProcessor.java#L1045</a></li>
<li><a href="https://github.com/advisories/GHSA-w354-2f3c-qvg9">https://github.com/advisories/GHSA-w354-2f3c-qvg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w354-2f3c-qvg9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-03-01T16:18:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tika:tika-parsers] org.apache.tika:tika-parsers has an Infinite Loop vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-p699-3wgc-7h72</id>
        <link href="https://github.com/advisories/GHSA-p699-3wgc-7h72"/>
        <updated>2023-02-28T22:57:52.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package <code>org.apache.tika:tika-parsers</code> before version 1.18 are vulnerable to Denial of Service (DoS) via a carefully crafted (or fuzzed) file that can trigger an infinite loop via the ChmParser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1339">https://nvd.nist.gov/vuln/detail/CVE-2018-1339</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:2669">https://access.redhat.com/errata/RHSA-2018:2669</a></li>
<li><a href="https://lists.apache.org/thread.html/4d2cb5c819401bb075e2a1130e0d14f0404a136541a6f91da0225828@%3Cdev.tika.apache.org%3E">https://lists.apache.org/thread.html/4d2cb5c819401bb075e2a1130e0d14f0404a136541a6f91da0225828@%3Cdev.tika.apache.org%3E</a></li>
<li><a href="https://github.com/apache/tika/commit/1b6ca3685c196cfd89f5f95c19cc919ce10c5aff#diff-43f8cbe58aaab159ce88bd95fafc46dd">https://github.com/apache/tika/commit/1b6ca3685c196cfd89f5f95c19cc919ce10c5aff#diff-43f8cbe58aaab159ce88bd95fafc46dd</a></li>
<li><a href="https://github.com/advisories/GHSA-p699-3wgc-7h72">https://github.com/advisories/GHSA-p699-3wgc-7h72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p699-3wgc-7h72</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-17T15:43:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.validation]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.utilities]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r5]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r4b]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.convertors]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.quarkus.resteasy.reactive:resteasy-reactive-common-parent] RestEasy Reactive implementation of Quarkus allows Creation of Temporary File With Insecure Permissions]]></title>
        <id>https://github.com/advisories/GHSA-j75r-vf64-6rrh</id>
        <link href="https://github.com/advisories/GHSA-j75r-vf64-6rrh"/>
        <updated>2023-02-24T19:55:16.000Z</updated>
        <content type="html"><![CDATA[<p>In RestEasy Reactive implementation of Quarkus the insecure <code>File.createTempFile()</code> is used in the <code>FileBodyHandler</code> class which creates temp files with insecure permissions that could be read by a local user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0481">https://nvd.nist.gov/vuln/detail/CVE-2023-0481</a></li>
<li><a href="https://github.com/quarkusio/quarkus/pull/30694">https://github.com/quarkusio/quarkus/pull/30694</a></li>
<li><a href="https://github.com/quarkusio/quarkus/commit/95d5904f7cf18c8165b97d8ca03b203d7f69c17e">https://github.com/quarkusio/quarkus/commit/95d5904f7cf18c8165b97d8ca03b203d7f69c17e</a></li>
<li><a href="https://github.com/advisories/GHSA-j75r-vf64-6rrh">https://github.com/advisories/GHSA-j75r-vf64-6rrh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j75r-vf64-6rrh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-24T18:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.neo4j.procedure:apoc] XML External Entity (XXE) vulnerability in apoc.import.graphml]]></title>
        <id>https://github.com/advisories/GHSA-9vx8-f5c4-862x</id>
        <link href="https://github.com/advisories/GHSA-9vx8-f5c4-862x"/>
        <updated>2023-02-24T17:39:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A XML External Entity (XXE) vulnerability found in the apoc.import.graphml procedure of APOC core plugin in Neo4j graph database. XML External Entity (XXE) injection occurs when the XML parser allows external entities to be resolved. The XML parser used by the apoc.import.graphml procedure was not configured in a secure way and therefore allowed this.</p>
<p>External entities can be used to read local files, send HTTP requests, and perform denial-of-service attacks on the application.</p>
<p>Abusing the XXE vulnerability enabled assessors to read local files remotely. Although with the level of privileges assessors had this was limited to one-line files. With the ability to write to the database, any file could have been read. Additionally, assessors noted, with local testing, the server could be crashed by passing in improperly formatted XML. </p>
<h3 id="patches">Patches</h3>
<p>The users should aim to use the latest released version compatible with their Neo4j version. The minimum versions containing patch for this vulnerability is 4.4.0.14. </p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade the library, you can control the&nbsp;<a href="https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.security.procedures.allowlist">allowlist</a>  of the  procedures&nbsp;that can be used in your system.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in&nbsp;<a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures">neo4j-apoc-procedures</a></li>
<li>Email us at&nbsp;<a href="mailto:security@neo4j.com">security@neo4j.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/security/advisories/GHSA-9vx8-f5c4-862x">https://github.com/neo4j-contrib/neo4j-apoc-procedures/security/advisories/GHSA-9vx8-f5c4-862x</a></li>
<li><a href="https://github.com/neo4j/apoc/security/advisories/GHSA-6wxg-wh7f-rqpr">https://github.com/neo4j/apoc/security/advisories/GHSA-6wxg-wh7f-rqpr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23926">https://nvd.nist.gov/vuln/detail/CVE-2023-23926</a></li>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c3e2a29020497acf9417879f38e8af4e8c6d5783">https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c3e2a29020497acf9417879f38e8af4e8c6d5783</a></li>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/4.4.0.14">https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/4.4.0.14</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx8-f5c4-862x">https://github.com/advisories/GHSA-9vx8-f5c4-862x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx8-f5c4-862x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-24T17:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.quarkus:quarkus-vertx-http] Cross-site Scripting in Quarkus]]></title>
        <id>https://github.com/advisories/GHSA-c57v-hc7m-8px2</id>
        <link href="https://github.com/advisories/GHSA-c57v-hc7m-8px2"/>
        <updated>2023-02-23T22:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>If the Quarkus Form Authentication session cookie Path attribute is set to <code>/</code> then a cross-site attack may be initiated which might lead to the Information Disclosure. This attack can be prevented with the Quarkus CSRF Prevention feature.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0044">https://nvd.nist.gov/vuln/detail/CVE-2023-0044</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-0044">https://access.redhat.com/security/cve/CVE-2023-0044</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2158081">https://bugzilla.redhat.com/show_bug.cgi?id=2158081</a></li>
<li><a href="https://github.com/advisories/GHSA-c57v-hc7m-8px2">https://github.com/advisories/GHSA-c57v-hc7m-8px2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c57v-hc7m-8px2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-23T21:30:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:synopsys-coverity] Synopsys Jenkins Coverity Plugin has Incorrect Default Permissions]]></title>
        <id>https://github.com/advisories/GHSA-jwr6-75xh-jh5j</id>
        <link href="https://github.com/advisories/GHSA-jwr6-75xh-jh5j"/>
        <updated>2023-02-23T22:14:20.000Z</updated>
        <content type="html"><![CDATA[<p>Synopsys Coverity Plugin 3.0.2 and earlier does not perform permission checks in several HTTP endpoints.</p>
<p>This allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins. Those can be used as part of an attack to capture the credentials using another vulnerability.</p>
<p>An enumeration of credentials IDs in Synopsys Coverity Plugin 3.0.3 requires the appropriate permissions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23850">https://nvd.nist.gov/vuln/detail/CVE-2023-23850</a></li>
<li><a href="https://community.synopsys.com/s/article/SIG-Product-Security-Advisory-Multiple-CVEs-affecting-Coverity-Jenkins-Plugin">https://community.synopsys.com/s/article/SIG-Product-Security-Advisory-Multiple-CVEs-affecting-Coverity-Jenkins-Plugin</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-02-15/#SECURITY-2793%20(1)">https://www.jenkins.io/security/advisory/2023-02-15/#SECURITY-2793%20(1)</a></li>
<li><a href="https://github.com/advisories/GHSA-jwr6-75xh-jh5j">https://github.com/advisories/GHSA-jwr6-75xh-jh5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwr6-75xh-jh5j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-15T21:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.technicolor:elOyente] Jenkins elOyente Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-jv62-6xvc-ccwh</id>
        <link href="https://github.com/advisories/GHSA-jv62-6xvc-ccwh"/>
        <updated>2023-02-23T22:09:37.000Z</updated>
        <content type="html"><![CDATA[<p>elOyente Plugin stores a password unencrypted in its global configuration file <code>com.technicolor.eloyente.ElOyente.xm</code>l on the Jenkins controller. This password can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10424">https://nvd.nist.gov/vuln/detail/CVE-2019-10424</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1561">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1561</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-jv62-6xvc-ccwh">https://github.com/advisories/GHSA-jv62-6xvc-ccwh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv62-6xvc-ccwh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.ukiuni.callOtherJenkins:call-remote-job-plugin] Jenkins Call Remote Job Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-j8c7-fm85-6jj6</id>
        <link href="https://github.com/advisories/GHSA-j8c7-fm85-6jj6"/>
        <updated>2023-02-23T22:07:19.000Z</updated>
        <content type="html"><![CDATA[<p>Call Remote Job Plugin stores a password unencrypted in job <code>config.xml</code> files on the Jenkins controller. This password can be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10422">https://nvd.nist.gov/vuln/detail/CVE-2019-10422</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1548">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1548</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-j8c7-fm85-6jj6">https://github.com/advisories/GHSA-j8c7-fm85-6jj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8c7-fm85-6jj6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.villagechief.codescan.jenkins:codescan] Jenkins CodeScan Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</id>
        <link href="https://github.com/advisories/GHSA-jp8r-jh5j-cgwf"/>
        <updated>2023-02-23T21:56:37.000Z</updated>
        <content type="html"><![CDATA[<p>CodeScan Plugin stores an API key unencrypted in its global configuration file <code>com.villagechief.codescan.jenkins.CodeScanBuilder.xml</code> on the Jenkins controller. This API key can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10423">https://nvd.nist.gov/vuln/detail/CVE-2019-10423</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1551">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1551</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-jp8r-jh5j-cgwf">https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
</feed>