<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-07-25T18:01:42.194Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.plexus:plexus-archiver] Arbitrary File Creation in AbstractUnArchiver]]></title>
        <id>https://github.com/advisories/GHSA-wh3p-fphp-9h2m</id>
        <link href="https://github.com/advisories/GHSA-wh3p-fphp-9h2m"/>
        <updated>2023-07-25T17:20:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using AbstractUnArchiver for extracting an archive might lead to an arbitrary file creation and possibly remote code execution.</p>
<h3 id="description">Description</h3>
<p>When extracting an archive with an entry that already exists in the destination directory as a symbolic link whose target does not exist - the resolveFile() function will return the symlink's source instead of its target, which will pass the verification that ensures the file will not be extracted outside of the destination directory. Later Files.newOutputStream(), that follows symlinks by default,  will actually write the entry's content to the symlink's target.</p>
<h3 id="impact">Impact</h3>
<p>Whoever uses plexus archiver to extract an untrusted archive is vulnerable to an arbitrary file creation and possibly remote code execution.</p>
<h3 id="technical-details">Technical Details</h3>
<p>In <a href="https://github.com/codehaus-plexus/plexus-archiver/blob/plexus-archiver-4.7.1/src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java#L342">AbstractUnArchiver.java</a>:</p>
<pre><code class="language-java">protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream, String entryName, final Date entryDate, final boolean isDirectory, final Integer mode, String symlinkDestination, final FileMapper[] fileMappers)
    throws IOException, ArchiverException
    {
        ...
        // Hmm. Symlinks re-evaluate back to the original file here. Unsure if this is a good thing...
        final File targetFileName = FileUtils.resolveFile( dir, entryName );


        // Make sure that the resolved path of the extracted file doesn't escape the destination directory
        // getCanonicalFile().toPath() is used instead of getCanonicalPath() (returns String),
        // because "/opt/directory".startsWith("/opt/dir") would return false negative.
        Path canonicalDirPath = dir.getCanonicalFile().toPath();
        Path canonicalDestPath = targetFileName.getCanonicalFile().toPath();


        if ( !canonicalDestPath.startsWith( canonicalDirPath ) )
        {
            throw new ArchiverException( "Entry is outside of the target directory (" + entryName + ")" );
        }


        try
        {
            ...
            if ( !StringUtils.isEmpty( symlinkDestination ) )
            {
                SymlinkUtils.createSymbolicLink( targetFileName, new File( symlinkDestination ) );
            }
            else if ( isDirectory )
            {
                targetFileName.mkdirs();
            }
            else
            {
                try ( OutputStream out = Files.newOutputStream( targetFileName.toPath() ) )
                {
                    IOUtil.copy( compressedInputStream, out );
                }
            }


            targetFileName.setLastModified( entryDate.getTime() );


            if ( !isIgnorePermissions() &amp;&amp; mode != null &amp;&amp; !isDirectory )
            {
                ArchiveEntryUtils.chmod( targetFileName, mode );
            }
        }
        catch ( final FileNotFoundException ex )
        {
            getLogger().warn( "Unable to expand to file " + targetFileName.getPath() );
        }
    }
</code></pre>
<p>When given an entry that already exists in dir as a symbolic link whose target does not exist - the symbolic link’s target will be created and the content of the archive’s entry will be written to it.</p>
<p>That’s because the way FileUtils.resolveFile() works:</p>
<pre><code class="language-java">public static File resolveFile( final File baseFile, String filename )
    {
        ...
        try
        {
            file = file.getCanonicalFile();
        }
        catch ( final IOException ioe )
        {
            // nop
        }


        return file;
    }
</code></pre>
<p>File.getCanonicalFile() (tested with the most recent version of openjdk (22.2) on Unix) will eventually call <a href="https://github.com/openjdk/jdk/blob/jdk-22%2B2/src/java.base/unix/native/libjava/canonicalize_md.c#LL48C1-L68C69">JDK_Canonicalize()</a>:</p>
<pre><code class="language-cpp">JNIEXPORT int
JDK_Canonicalize(const char *orig, char *out, int len)
{
    if (len &lt; PATH_MAX) {
        errno = EINVAL;
        return -1;
    }

    if (strlen(orig) &gt; PATH_MAX) {
        errno = ENAMETOOLONG;
        return -1;
    }

    /* First try realpath() on the entire path */
    if (realpath(orig, out)) {
        /* That worked, so return it */
        collapse(out);
        return 0;
    } else {
        /* Something's bogus in the original path, so remove names from the end
           until either some subpath works or we run out of names */
        ...
</code></pre>
<p>realpath() returns the destination path for a symlink, if this destination exists. But if it doesn’t - 
it will return NULL and we will reach the else’s clause, which will eventually return the path of the symlink itself.
So in case the entry is already exists as a symbolic link to a non-existing file - file.getCanonicalFile() will return the absolute path of the symbolic link and this check will pass:</p>
<pre><code class="language-java">Path canonicalDirPath = dir.getCanonicalFile().toPath();
Path canonicalDestPath = targetFileName.getCanonicalFile().toPath();


if ( !canonicalDestPath.startsWith( canonicalDirPath ) )
{
    throw new ArchiverException( "Entry is outside of the target directory (" + entryName + ")" );
}
</code></pre>
<p>Later, the content of the entry will be written to the symbolic link’s destination and by doing so will create the destination file and fill it with the entry’s content.</p>
<p>Arbitrary file creation can lead to remote code execution. For example, if there is an SSH server on the victim’s machine and ~/.ssh/authorized_keys does not exist - creating this file and filling it with an attacker's public key will allow the attacker to connect the SSH server without knowing the victim’s password.</p>
<h3 id="poc">PoC</h3>
<p>We created a zip as following:</p>
<pre><code class="language-bash">$ ln -s /tmp/target entry1
$ echo -ne “content” &gt; entry2
$ zip  --symlinks archive.zip entry1 entry2
</code></pre>
<p>The following command will change the name of entry2 to entry1:</p>
<pre><code class="language-bash">$ sed -i 's/entry2/entry1/' archive.zip
</code></pre>
<p>We put archive.zip in /tmp and create a dir for the extracted files:</p>
<pre><code class="language-bash">$ cp archive.zip /tmp
$ mkdir /tmp/extracted_files
</code></pre>
<p>Next, we wrote a java code that opens archive.zip:</p>
<pre><code class="language-java">package com.example;

import java.io.File;

import org.codehaus.plexus.archiver.zip.ZipUnArchiver;

public class App 
{
    public static void main( String[] args )
    {
        ZipUnArchiver unArchiver = new ZipUnArchiver(new File("/tmp/archive.zip"));
        unArchiver.setDestDirectory(new File("/tmp/extracted_files"));
        unArchiver.extract();        
    }
}
</code></pre>
<p>After running this java code, we can see that /tmp/target contains the string “content”:</p>
<pre><code>$ cat /tmp/target
content
</code></pre>
<p>Notice that although we used here a duplicated entry name in the same archive, this attack can be performed also by two different archives - one that contains a symlink and another archive that contains a regular file with the same entry name as the symlink.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m">https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m</a></li>
<li><a href="https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2">https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2</a></li>
<li><a href="https://github.com/advisories/GHSA-wh3p-fphp-9h2m">https://github.com/advisories/GHSA-wh3p-fphp-9h2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh3p-fphp-9h2m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-25T17:20:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.folio:mod-remote-storage] Hard-coded System User Credentials in Folio Data Export Spring module ]]></title>
        <id>https://github.com/advisories/GHSA-m8v7-469p-5x89</id>
        <link href="https://github.com/advisories/GHSA-m8v7-469p-5x89"/>
        <updated>2023-07-25T14:44:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The module creates a system user that is used to perform internal module-to-module operations.  Credentials for this user are hard-coded in the source code.  This makes it trivial to authenticate as this user, allowing unauthorized read access to these mod-inventory-storage records: instances, holdings, items, contributor-types, identifier-types. This includes records marked as suppressed from discovery.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade mod-remote-storage to &gt;=2.0.3, or a 1.7.x version &gt;=1.7.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a> - FOLIO Security Advisory with Upgrade Instructions
<a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a> - Fix</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89">https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89</a></li>
<li><a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a></li>
<li><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a></li>
<li><a href="https://github.com/advisories/GHSA-m8v7-469p-5x89">https://github.com/advisories/GHSA-m8v7-469p-5x89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8v7-469p-5x89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-25T14:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.folio:mod-remote-storage] Hard-coded System User Credentials in Folio Data Export Spring module ]]></title>
        <id>https://github.com/advisories/GHSA-m8v7-469p-5x89</id>
        <link href="https://github.com/advisories/GHSA-m8v7-469p-5x89"/>
        <updated>2023-07-25T14:44:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The module creates a system user that is used to perform internal module-to-module operations.  Credentials for this user are hard-coded in the source code.  This makes it trivial to authenticate as this user, allowing unauthorized read access to these mod-inventory-storage records: instances, holdings, items, contributor-types, identifier-types. This includes records marked as suppressed from discovery.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade mod-remote-storage to &gt;=2.0.3, or a 1.7.x version &gt;=1.7.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a> - FOLIO Security Advisory with Upgrade Instructions
<a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a> - Fix</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89">https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89</a></li>
<li><a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a></li>
<li><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a></li>
<li><a href="https://github.com/advisories/GHSA-m8v7-469p-5x89">https://github.com/advisories/GHSA-m8v7-469p-5x89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8v7-469p-5x89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-25T14:44:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.folio:mod-data-export-spring] Hard-coded System User Credentials in Folio Data Export Spring module ]]></title>
        <id>https://github.com/advisories/GHSA-vf78-3q9f-92g3</id>
        <link href="https://github.com/advisories/GHSA-vf78-3q9f-92g3"/>
        <updated>2023-07-25T13:53:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The module creates a system user that is used to perform internal module-to-module operations.  Credentials for this user are hard-coded in the source code.  This makes it trivial to authenticate as this user, resulting in unauthorized access to potentially dangerous APIs, allowing to view and modify configuration including single-sign-on configuration, to read, add and modify user data, and to read and transfer fees/fines in a patron's account.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade mod-data-export-spring to &gt;=2.0.2, or a 1.5.x version &gt;=1.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a> - FOLIO Security Advisory with Upgrade Instructions
<a href="https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446">https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446</a> - Fix</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3">https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3</a></li>
<li><a href="https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446">https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446</a></li>
<li><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a></li>
<li><a href="https://github.com/advisories/GHSA-vf78-3q9f-92g3">https://github.com/advisories/GHSA-vf78-3q9f-92g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vf78-3q9f-92g3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T13:53:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.folio:mod-data-export-spring] Hard-coded System User Credentials in Folio Data Export Spring module ]]></title>
        <id>https://github.com/advisories/GHSA-vf78-3q9f-92g3</id>
        <link href="https://github.com/advisories/GHSA-vf78-3q9f-92g3"/>
        <updated>2023-07-25T13:53:42.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The module creates a system user that is used to perform internal module-to-module operations.  Credentials for this user are hard-coded in the source code.  This makes it trivial to authenticate as this user, resulting in unauthorized access to potentially dangerous APIs, allowing to view and modify configuration including single-sign-on configuration, to read, add and modify user data, and to read and transfer fees/fines in a patron's account.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade mod-data-export-spring to &gt;=2.0.2, or a 1.5.x version &gt;=1.5.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a> - FOLIO Security Advisory with Upgrade Instructions
<a href="https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446">https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446</a> - Fix</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3">https://github.com/folio-org/mod-data-export-spring/security/advisories/GHSA-vf78-3q9f-92g3</a></li>
<li><a href="https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446">https://github.com/folio-org/mod-data-export-spring/commit/93aff4566bff59e30f4121b5a2bda5b0b508a446</a></li>
<li><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a></li>
<li><a href="https://github.com/advisories/GHSA-vf78-3q9f-92g3">https://github.com/advisories/GHSA-vf78-3q9f-92g3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vf78-3q9f-92g3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T13:53:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.shiro:shiro-web] Path Traversal in Apache Shiro]]></title>
        <id>https://github.com/advisories/GHSA-pmhc-2g4f-85cg</id>
        <link href="https://github.com/advisories/GHSA-pmhc-2g4f-85cg"/>
        <updated>2023-07-25T13:51:46.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Shiro, before 1.12.0 or 2.0.0-alpha-3, may be susceptible to a path traversal attack that results in an authentication bypass when used together with APIs or other web frameworks that route requests based on non-normalized requests.</p>
<p>Mitigation:&nbsp;Update to Apache Shiro 1.12.0+ or 2.0.0-alpha-3+</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34478">https://nvd.nist.gov/vuln/detail/CVE-2023-34478</a></li>
<li><a href="https://lists.apache.org/thread/mbv26onkgw9o35rldh7vmq11wpv2t2qk">https://lists.apache.org/thread/mbv26onkgw9o35rldh7vmq11wpv2t2qk</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/24/4">http://www.openwall.com/lists/oss-security/2023/07/24/4</a></li>
<li><a href="https://github.com/apache/shiro/commit/c3ede3f94efb442acb0795714a022c2c121d1da0">https://github.com/apache/shiro/commit/c3ede3f94efb442acb0795714a022c2c121d1da0</a></li>
<li><a href="https://github.com/advisories/GHSA-pmhc-2g4f-85cg">https://github.com/advisories/GHSA-pmhc-2g4f-85cg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmhc-2g4f-85cg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-24T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.shiro:shiro-web] Path Traversal in Apache Shiro]]></title>
        <id>https://github.com/advisories/GHSA-pmhc-2g4f-85cg</id>
        <link href="https://github.com/advisories/GHSA-pmhc-2g4f-85cg"/>
        <updated>2023-07-25T13:51:46.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Shiro, before 1.12.0 or 2.0.0-alpha-3, may be susceptible to a path traversal attack that results in an authentication bypass when used together with APIs or other web frameworks that route requests based on non-normalized requests.</p>
<p>Mitigation:&nbsp;Update to Apache Shiro 1.12.0+ or 2.0.0-alpha-3+</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34478">https://nvd.nist.gov/vuln/detail/CVE-2023-34478</a></li>
<li><a href="https://lists.apache.org/thread/mbv26onkgw9o35rldh7vmq11wpv2t2qk">https://lists.apache.org/thread/mbv26onkgw9o35rldh7vmq11wpv2t2qk</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/24/4">http://www.openwall.com/lists/oss-security/2023/07/24/4</a></li>
<li><a href="https://github.com/apache/shiro/commit/c3ede3f94efb442acb0795714a022c2c121d1da0">https://github.com/apache/shiro/commit/c3ede3f94efb442acb0795714a022c2c121d1da0</a></li>
<li><a href="https://github.com/advisories/GHSA-pmhc-2g4f-85cg">https://github.com/advisories/GHSA-pmhc-2g4f-85cg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pmhc-2g4f-85cg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-24T21:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:openrefine] OpenRefine Directory Traversal]]></title>
        <id>https://github.com/advisories/GHSA-f6fv-fjg8-4m6w</id>
        <link href="https://github.com/advisories/GHSA-f6fv-fjg8-4m6w"/>
        <updated>2023-07-25T00:16:51.000Z</updated>
        <content type="html"><![CDATA[<p>OpenRefine before 3.2 beta allows directory traversal via a relative pathname in a ZIP archive.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-19859">https://nvd.nist.gov/vuln/detail/CVE-2018-19859</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/issues/1840">https://github.com/OpenRefine/OpenRefine/issues/1840</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/pull/1901">https://github.com/OpenRefine/OpenRefine/pull/1901</a></li>
<li><a href="https://github.com/advisories/GHSA-f6fv-fjg8-4m6w">https://github.com/advisories/GHSA-f6fv-fjg8-4m6w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f6fv-fjg8-4m6w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:14:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.github.wxpay:wxpay-sdk] WeChat Pay Java SDK allows XXE]]></title>
        <id>https://github.com/advisories/GHSA-gqgv-2gp3-qqp3</id>
        <link href="https://github.com/advisories/GHSA-gqgv-2gp3-qqp3"/>
        <updated>2023-07-25T00:03:34.000Z</updated>
        <content type="html"><![CDATA[<p>WXPayUtil in WeChat Pay Java SDK allows XXE attacks involving a merchant notification URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-13439">https://nvd.nist.gov/vuln/detail/CVE-2018-13439</a></li>
<li><a href="https://packetstormsecurity.com/files/148390/WeChat-Pay-SDK-XXE-Injection.html">https://packetstormsecurity.com/files/148390/WeChat-Pay-SDK-XXE-Injection.html</a></li>
<li><a href="https://github.com/advisories/GHSA-gqgv-2gp3-qqp3">https://github.com/advisories/GHSA-gqgv-2gp3-qqp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gqgv-2gp3-qqp3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T03:00:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.glassfish:mojarra-parent] Path Traversal in Eclipse Mojarra]]></title>
        <id>https://github.com/advisories/GHSA-43q7-q5vp-3g68</id>
        <link href="https://github.com/advisories/GHSA-43q7-q5vp-3g68"/>
        <updated>2023-07-24T23:51:47.000Z</updated>
        <content type="html"><![CDATA[<p>The getLocalePrefix function in ResourceManager.java in Eclipse Mojarra before 2.3.7 is affected by Directory Traversal via the loc parameter. A remote attacker can download configuration files or Java bytecodes from applications.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14371">https://nvd.nist.gov/vuln/detail/CVE-2018-14371</a></li>
<li><a href="https://github.com/eclipse-ee4j/mojarra/commit/1b434748d9239f42eae8aa7d37d7a0930c061e24">https://github.com/eclipse-ee4j/mojarra/commit/1b434748d9239f42eae8aa7d37d7a0930c061e24</a></li>
<li><a href="https://github.com/eclipse-ee4j/mojarra/pull/4384">https://github.com/eclipse-ee4j/mojarra/pull/4384</a></li>
<li><a href="https://github.com/advisories/GHSA-43q7-q5vp-3g68">https://github.com/advisories/GHSA-43q7-q5vp-3g68</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43q7-q5vp-3g68</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:59:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-core] Keycloak Open Redirect]]></title>
        <id>https://github.com/advisories/GHSA-3qh2-mccc-q5m6</id>
        <link href="https://github.com/advisories/GHSA-3qh2-mccc-q5m6"/>
        <updated>2023-07-21T22:48:34.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in JBOSS Keycloak 3.2.1.Final. The Redirect URL for both Login and Logout are not normalized in <code>org.keycloak.protocol.oidc.utils.RedirectUtils</code> before the redirect url is verified. This can lead to an Open Redirection attack</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14658">https://nvd.nist.gov/vuln/detail/CVE-2018-14658</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3592">https://access.redhat.com/errata/RHSA-2018:3592</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3593">https://access.redhat.com/errata/RHSA-2018:3593</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3595">https://access.redhat.com/errata/RHSA-2018:3595</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14658">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14658</a></li>
<li><a href="https://github.com/advisories/GHSA-3qh2-mccc-q5m6">https://github.com/advisories/GHSA-3qh2-mccc-q5m6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3qh2-mccc-q5m6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:34:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-core] Keycloak XSS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-458h-wv48-fq75</id>
        <link href="https://github.com/advisories/GHSA-458h-wv48-fq75"/>
        <updated>2023-07-21T22:47:12.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Keycloak 3.4.3.Final, 4.0.0.Beta2, 4.3.0.Final. When using <code>response_mode=form_post</code> it is possible to inject arbitrary Javascript-Code via the 'state'-parameter in the authentication URL. This allows an XSS-Attack upon succesfully login.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14655">https://nvd.nist.gov/vuln/detail/CVE-2018-14655</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3592">https://access.redhat.com/errata/RHSA-2018:3592</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3593">https://access.redhat.com/errata/RHSA-2018:3593</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3595">https://access.redhat.com/errata/RHSA-2018:3595</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14655">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14655</a></li>
<li><a href="https://github.com/advisories/GHSA-458h-wv48-fq75">https://github.com/advisories/GHSA-458h-wv48-fq75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-458h-wv48-fq75</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:34:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-core] Keycloak Authentication Error]]></title>
        <id>https://github.com/advisories/GHSA-xvv8-8wh9-9fh2</id>
        <link href="https://github.com/advisories/GHSA-xvv8-8wh9-9fh2"/>
        <updated>2023-07-21T21:34:56.000Z</updated>
        <content type="html"><![CDATA[<p>It was found that SAML authentication in Keycloak 3.4.3.Final incorrectly authenticated expired certificates. A malicious user could use this to access unauthorized data or possibly conduct further attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-10894">https://nvd.nist.gov/vuln/detail/CVE-2018-10894</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3592">https://access.redhat.com/errata/RHSA-2018:3592</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3593">https://access.redhat.com/errata/RHSA-2018:3593</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3595">https://access.redhat.com/errata/RHSA-2018:3595</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:0877">https://access.redhat.com/errata/RHSA-2019:0877</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10894">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-10894</a></li>
<li><a href="https://github.com/advisories/GHSA-xvv8-8wh9-9fh2">https://github.com/advisories/GHSA-xvv8-8wh9-9fh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xvv8-8wh9-9fh2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:34:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opencms:opencms-core] Alkacon OpenCMS arbitrary file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-ghg2-3w9x-9599</id>
        <link href="https://github.com/advisories/GHSA-ghg2-3w9x-9599"/>
        <updated>2023-07-21T20:22:14.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the component /workplace#!explorer of Alkacon OpenCMS v15.0 allows attackers to execute arbitrary code via uploading a crafted PNG file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37602">https://nvd.nist.gov/vuln/detail/CVE-2023-37602</a></li>
<li><a href="https://www.exploit-db.com/exploits/51564">https://www.exploit-db.com/exploits/51564</a></li>
<li><a href="https://github.com/advisories/GHSA-ghg2-3w9x-9599">https://github.com/advisories/GHSA-ghg2-3w9x-9599</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ghg2-3w9x-9599</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-20T21:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.ruoyi:ruoyi] RuoYi vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-p4ww-j4pr-qw6q</id>
        <link href="https://github.com/advisories/GHSA-p4ww-j4pr-qw6q"/>
        <updated>2023-07-21T20:18:41.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, has been found in y_project RuoYi up to 4.7.7. Affected by this issue is the function <code>uploadFilesPath</code> of the component <code>File Upload</code>. The manipulation of the argument <code>originalFilenames</code> leads to cross site scripting. The attack may be launched remotely. VDB-235118 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-3815">https://nvd.nist.gov/vuln/detail/CVE-2023-3815</a></li>
<li><a href="https://gitee.com/y_project/RuoYi/issues/I7IL85">https://gitee.com/y_project/RuoYi/issues/I7IL85</a></li>
<li><a href="https://vuldb.com/?ctiid.235118">https://vuldb.com/?ctiid.235118</a></li>
<li><a href="https://vuldb.com/?id.235118">https://vuldb.com/?id.235118</a></li>
<li><a href="https://github.com/advisories/GHSA-p4ww-j4pr-qw6q">https://github.com/advisories/GHSA-p4ww-j4pr-qw6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p4ww-j4pr-qw6q</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-21T06:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-parent] Keycloak Improper Bruteforce Detection]]></title>
        <id>https://github.com/advisories/GHSA-85v8-vx4w-q684</id>
        <link href="https://github.com/advisories/GHSA-85v8-vx4w-q684"/>
        <updated>2023-07-20T23:45:07.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Keycloak 4.2.1.Final, 4.3.0.Final. When TOPT enabled, an improper implementation of the Brute Force detection algorithm will not enforce its protection measures.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-14657">https://nvd.nist.gov/vuln/detail/CVE-2018-14657</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3592">https://access.redhat.com/errata/RHSA-2018:3592</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3593">https://access.redhat.com/errata/RHSA-2018:3593</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:3595">https://access.redhat.com/errata/RHSA-2018:3595</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14657">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2018-14657</a></li>
<li><a href="https://github.com/advisories/GHSA-85v8-vx4w-q684">https://github.com/advisories/GHSA-85v8-vx4w-q684</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-85v8-vx4w-q684</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:12:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ro.pippo:pippo-parent] Pippo RCE Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h892-x453-86wc</id>
        <link href="https://github.com/advisories/GHSA-h892-x453-86wc"/>
        <updated>2023-07-20T23:22:47.000Z</updated>
        <content type="html"><![CDATA[<p>Pippo through 1.11.0 allows remote code execution via a command to java.lang.ProcessBuilder because the XstreamEngine component does not use XStream's available protection mechanisms to restrict unmarshalling.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-18240">https://nvd.nist.gov/vuln/detail/CVE-2018-18240</a></li>
<li><a href="https://github.com/pippo-java/pippo/issues/454">https://github.com/pippo-java/pippo/issues/454</a></li>
<li><a href="https://github.com/pippo-java/pippo/commit/c6b26551a82d2dd32097fcb17c13c3b830916296">https://github.com/pippo-java/pippo/commit/c6b26551a82d2dd32097fcb17c13c3b830916296</a></li>
<li><a href="https://github.com/advisories/GHSA-h892-x453-86wc">https://github.com/advisories/GHSA-h892-x453-86wc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h892-x453-86wc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-13T01:19:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openidentityplatform.openam:openam-federation-library] OpenAM vulnerable to user impersonation using SAMLv1.x SSO process]]></title>
        <id>https://github.com/advisories/GHSA-4mh8-9wq6-rjxg</id>
        <link href="https://github.com/advisories/GHSA-4mh8-9wq6-rjxg"/>
        <updated>2023-07-24T08:41:14.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenAM up to version 14.7.2 does not properly validate the signature of SAML responses received as part of the SAMLv1.x Single Sign-On process. Attackers can use this fact to impersonate any OpenAM user, including the administrator, by sending a specially crafted SAML response to the SAMLPOSTProfileServlet servlet.</p>
<h3 id="patches">Patches</h3>
<p>This problem has been patched in  OpenAM 14.7.3-SNAPSHOT and later</p>
<h3 id="workarounds">Workarounds</h3>
<p>One should comment servlet <code>SAMLPOSTProfileServlet</code> in web.xml or disable SAML in OpenAM</p>
<pre><code class="language-xml">&lt;servlet&gt;
    &lt;description&gt;SAMLPOSTProfileServlet&lt;/description&gt;
    &lt;servlet-name&gt;SAMLPOSTProfileServlet&lt;/servlet-name&gt;
    &lt;servlet-class&gt;com.sun.identity.saml.servlet.SAMLPOSTProfileServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;
...
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;SAMLSOAPReceiver&lt;/servlet-name&gt;
    &lt;url-pattern&gt;/SAMLSOAPReceiver&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
</code></pre>
<h3 id="references">References</h3>
<p>#624</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenIdentityPlatform/OpenAM/security/advisories/GHSA-4mh8-9wq6-rjxg">https://github.com/OpenIdentityPlatform/OpenAM/security/advisories/GHSA-4mh8-9wq6-rjxg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37471">https://nvd.nist.gov/vuln/detail/CVE-2023-37471</a></li>
<li><a href="https://github.com/OpenIdentityPlatform/OpenAM/pull/624">https://github.com/OpenIdentityPlatform/OpenAM/pull/624</a></li>
<li><a href="https://github.com/OpenIdentityPlatform/OpenAM/commit/7c18543d126e8a567b83bb4535631825aaa9d742">https://github.com/OpenIdentityPlatform/OpenAM/commit/7c18543d126e8a567b83bb4535631825aaa9d742</a></li>
<li><a href="https://github.com/advisories/GHSA-4mh8-9wq6-rjxg">https://github.com/advisories/GHSA-4mh8-9wq6-rjxg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mh8-9wq6-rjxg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-20T18:54:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.shardingsphere:shardingsphere] Apache ShardingSphere-Agent Deserialization of Untrusted Data vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-3cxh-xp3g-jxjm</id>
        <link href="https://github.com/advisories/GHSA-3cxh-xp3g-jxjm"/>
        <updated>2023-07-20T10:10:02.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of Untrusted Data vulnerability in Apache ShardingSphere-Agent, which allows attackers to execute arbitrary code by constructing a special YAML configuration file.</p>
<p>The attacker needs to have permission to modify the ShardingSphere Agent YAML configuration file on the target machine, and the target machine can access the URL with the arbitrary code JAR.
An attacker can use SnakeYAML to deserialize java.net.URLClassLoader and make it load a JAR from a specified URL, and then deserialize javax.script.ScriptEngineManager to load code using that ClassLoader. When the ShardingSphere JVM process starts and uses the ShardingSphere-Agent, the arbitrary code specified by the attacker will be executed during the deserialization of the YAML configuration file by the Agent.</p>
<p>This issue affects ShardingSphere-Agent: through 5.3.2. This vulnerability is fixed in Apache ShardingSphere 5.4.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28754">https://nvd.nist.gov/vuln/detail/CVE-2023-28754</a></li>
<li><a href="https://lists.apache.org/thread/p8onhqox5kkwow9lc6gs03z28wtyp1cg">https://lists.apache.org/thread/p8onhqox5kkwow9lc6gs03z28wtyp1cg</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/19/3">http://www.openwall.com/lists/oss-security/2023/07/19/3</a></li>
<li><a href="https://github.com/advisories/GHSA-3cxh-xp3g-jxjm">https://github.com/advisories/GHSA-3cxh-xp3g-jxjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cxh-xp3g-jxjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-19T09:30:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.integration:spring-integration-zip] spring-integration-zip Arbitrary File Write]]></title>
        <id>https://github.com/advisories/GHSA-87vg-5pgx-pggh</id>
        <link href="https://github.com/advisories/GHSA-87vg-5pgx-pggh"/>
        <updated>2023-07-19T23:55:10.000Z</updated>
        <content type="html"><![CDATA[<p>Addresses partial fix in CVE-2018-1261. Pivotal spring-integration-zip, versions prior to 1.0.2, exposes an arbitrary file write vulnerability, that can be achieved using a specially crafted zip archive (affects other archives as well, bzip2, tar, xz, war, cpio, 7z), that holds path traversal filenames. So when the filename gets concatenated to the target extraction directory, the final path ends up outside of the target folder.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1263">https://nvd.nist.gov/vuln/detail/CVE-2018-1263</a></li>
<li><a href="https://pivotal.io/security/cve-2018-1263">https://pivotal.io/security/cve-2018-1263</a></li>
<li><a href="https://web.archive.org/web/20210125210559/https://www.securityfocus.com/bid/104179/">https://web.archive.org/web/20210125210559/https://www.securityfocus.com/bid/104179/</a></li>
<li><a href="https://github.com/advisories/GHSA-87vg-5pgx-pggh">https://github.com/advisories/GHSA-87vg-5pgx-pggh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-87vg-5pgx-pggh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:07:04.000Z</published>
    </entry>
</feed>