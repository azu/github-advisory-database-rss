<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-09-13T09:01:32.678Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-core] Keycloak vulnerable to Plaintext Storage of User Password]]></title>
        <id>https://github.com/advisories/GHSA-5q66-v53q-pm35</id>
        <link href="https://github.com/advisories/GHSA-5q66-v53q-pm35"/>
        <updated>2023-09-12T21:10:40.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was discovered in Keycloak Core package.  When a user registers itself through registration flow, the "password" and "password-confirm" field from the form will occur as regular attributes in the users attributes. The password is also created, but the user attributes must not be there. This way, any entities (all users and clients with proper rights/roles) are able to retrieve the users passwords in clear-text. </p>
<h3 id="impact">Impact</h3>
<p>Passwords for self-registered users are stored as cleartext attributes associated with the user. </p>
<h3 id="mitigation">Mitigation</h3>
<p>Disable self-registration for users in all realms until patched.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/keycloak/keycloak/security/advisories/GHSA-5q66-v53q-pm35">https://github.com/keycloak/keycloak/security/advisories/GHSA-5q66-v53q-pm35</a></li>
<li><a href="https://github.com/advisories/GHSA-5q66-v53q-pm35">https://github.com/advisories/GHSA-5q66-v53q-pm35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5q66-v53q-pm35</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-12T21:10:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.nifi:nifi-standard-processors] Improper Restriction of XML External Entity Reference in Apache NiFi]]></title>
        <id>https://github.com/advisories/GHSA-42wx-65g4-5cxv</id>
        <link href="https://github.com/advisories/GHSA-42wx-65g4-5cxv"/>
        <updated>2023-09-12T19:08:15.000Z</updated>
        <content type="html"><![CDATA[<p>Apache NiFi External XML Entity issue in SplitXML processor. Malicious XML content could cause information disclosure or remote code execution. The fix to disable external general entity parsing and disallow doctype declarations was applied on the Apache NiFi 1.6.0 release. Users running a prior 1.x release should upgrade to the appropriate release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1309">https://nvd.nist.gov/vuln/detail/CVE-2018-1309</a></li>
<li><a href="https://nifi.apache.org/security.html#CVE-2018-1309">https://nifi.apache.org/security.html#CVE-2018-1309</a></li>
<li><a href="https://github.com/apache/nifi/commit/28067a29fd13cdf8e21b440fc65c6dd67872522f">https://github.com/apache/nifi/commit/28067a29fd13cdf8e21b440fc65c6dd67872522f</a></li>
<li><a href="https://issues.apache.org/jira/browse/NIFI-4869">https://issues.apache.org/jira/browse/NIFI-4869</a></li>
<li><a href="https://github.com/advisories/GHSA-42wx-65g4-5cxv">https://github.com/advisories/GHSA-42wx-65g4-5cxv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-42wx-65g4-5cxv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-14T03:16:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.nanohttpd:nanohttpd-nanolets] NanoHTTPD Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pr5m-4w22-8483</id>
        <link href="https://github.com/advisories/GHSA-pr5m-4w22-8483"/>
        <updated>2023-09-12T16:37:21.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in RouterNanoHTTPD.java in NanoHTTPD through 2.3.1. The GeneralHandler class implements a basic GET handler that prints debug information as an HTML page. Any web server that extends this class without implementing its own GET handler is vulnerable to reflected XSS, because the GeneralHandler GET handler prints user input passed through the query string without any sanitization.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13697">https://nvd.nist.gov/vuln/detail/CVE-2020-13697</a></li>
<li><a href="https://www.vdoo.com/advisories/#CVE-2020-13697">https://www.vdoo.com/advisories/#CVE-2020-13697</a></li>
<li><a href="https://github.com/NanoHttpd/nanohttpd/blob/efb2ebf85a2b06f7c508aba9eaad5377e3a01e81/nanolets/pom.xml">https://github.com/NanoHttpd/nanohttpd/blob/efb2ebf85a2b06f7c508aba9eaad5377e3a01e81/nanolets/pom.xml</a></li>
<li><a href="https://github.com/NanoHttpd/nanohttpd/blob/efb2ebf85a2b06f7c508aba9eaad5377e3a01e81/nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java">https://github.com/NanoHttpd/nanohttpd/blob/efb2ebf85a2b06f7c508aba9eaad5377e3a01e81/nanolets/src/main/java/org/nanohttpd/router/RouterNanoHTTPD.java</a></li>
<li><a href="https://github.com/advisories/GHSA-pr5m-4w22-8483">https://github.com/advisories/GHSA-pr5m-4w22-8483</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pr5m-4w22-8483</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-02-25T16:32:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tika:tika-server] Apache Tika Server exposes sensitive information]]></title>
        <id>https://github.com/advisories/GHSA-ccjp-w723-2jf2</id>
        <link href="https://github.com/advisories/GHSA-ccjp-w723-2jf2"/>
        <updated>2023-09-12T15:51:05.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tika provides optional functionality to run itself as a web service to allow remote use. When used in this manner,
it's possible for a 3rd party to pass a 'fileUrl' header to the Apache Tika Server (tika-server) before version 1.10. This header lets a remote client request that the server fetches content from the URL provided, including files from the server's local filesystem. Depending on the file permissions set on the local filesystem, this could be used to return sensitive content from the server machine.</p>
<p>This vulnerability only exists if you are running the tika-server version 1.9, and you allow un-trusted access to the tika-server
URL. Usage of Apache Tika as a standard library is not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-3271">https://nvd.nist.gov/vuln/detail/CVE-2015-3271</a></li>
<li><a href="https://github.com/advisories/GHSA-ccjp-w723-2jf2">https://github.com/advisories/GHSA-ccjp-w723-2jf2</a></li>
<li><a href="https://lists.apache.org/thread.html/d2b3e7afb0251fac95fdee9817423cbc91e3d99a848c25a51d91c1e8@1439485507@%3Cdev.tika.apache.org%3E">https://lists.apache.org/thread.html/d2b3e7afb0251fac95fdee9817423cbc91e3d99a848c25a51d91c1e8@1439485507@%3Cdev.tika.apache.org%3E</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2015/08/13/5">http://www.openwall.com/lists/oss-security/2015/08/13/5</a></li>
<li><a href="http://www.securityfocus.com/bid/95020">http://www.securityfocus.com/bid/95020</a></li>
<li><a href="https://lists.apache.org/thread.html/d2b3e7afb0251fac95fdee9817423cbc91e3d99a848c25a51d91c1e8%401439485507%40%3Cdev.tika.apache.org%3E">https://lists.apache.org/thread.html/d2b3e7afb0251fac95fdee9817423cbc91e3d99a848c25a51d91c1e8%401439485507%40%3Cdev.tika.apache.org%3E</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-ccjp-w723-2jf2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-17T15:44:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.nifi:nifi-stateless] Insertion of Sensitive Information into Log File in Apache NiFi Stateless]]></title>
        <id>https://github.com/advisories/GHSA-g644-pr5v-vppf</id>
        <link href="https://github.com/advisories/GHSA-g644-pr5v-vppf"/>
        <updated>2023-09-12T15:04:26.000Z</updated>
        <content type="html"><![CDATA[<p>In Apache NiFi 1.10.0 to 1.11.4, the NiFi stateless execution engine produced log output which included sensitive property values. When a flow was triggered, the flow definition configuration JSON was printed, potentially containing sensitive values in plaintext.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-9486">https://nvd.nist.gov/vuln/detail/CVE-2020-9486</a></li>
<li><a href="https://github.com/apache/nifi/commit/148537d64a017b73160b0d49943183c18f883ab0">https://github.com/apache/nifi/commit/148537d64a017b73160b0d49943183c18f883ab0</a></li>
<li><a href="https://nifi.apache.org/security#CVE-2020-9486">https://nifi.apache.org/security#CVE-2020-9486</a></li>
<li><a href="https://github.com/advisories/GHSA-g644-pr5v-vppf">https://github.com/advisories/GHSA-g644-pr5v-vppf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g644-pr5v-vppf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-06T20:41:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.orientechnologies:orientdb-server] OrientDB Server Community Edition uses insufficiently random values to generate session IDs]]></title>
        <id>https://github.com/advisories/GHSA-v6wr-fch2-vm5w</id>
        <link href="https://github.com/advisories/GHSA-v6wr-fch2-vm5w"/>
        <updated>2023-09-12T14:43:50.000Z</updated>
        <content type="html"><![CDATA[<p>OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the <code>java.util.Random</code> class for generation of random Session ID values in the <code>server/network/protocol/http/OHttpSessionManager.java</code>, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-2913">https://nvd.nist.gov/vuln/detail/CVE-2015-2913</a></li>
<li><a href="https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104">https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104</a></li>
<li><a href="https://github.com/advisories/GHSA-v6wr-fch2-vm5w">https://github.com/advisories/GHSA-v6wr-fch2-vm5w</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/845332">https://www.kb.cert.org/vuls/id/845332</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6wr-fch2-vm5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-18T17:41:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.orientechnologies:orientdb-server] OrientDB Server Community Edition uses insufficiently random values to generate session IDs]]></title>
        <id>https://github.com/advisories/GHSA-v6wr-fch2-vm5w</id>
        <link href="https://github.com/advisories/GHSA-v6wr-fch2-vm5w"/>
        <updated>2023-09-12T14:43:50.000Z</updated>
        <content type="html"><![CDATA[<p>OrientDB Server Community Edition before 2.0.15 and 2.1.x before 2.1.1 improperly relies on the <code>java.util.Random</code> class for generation of random Session ID values in the <code>server/network/protocol/http/OHttpSessionManager.java</code>, which makes it easier for remote attackers to predict a value by determining the internal state of the PRNG in this class.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-2913">https://nvd.nist.gov/vuln/detail/CVE-2015-2913</a></li>
<li><a href="https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104">https://github.com/orientechnologies/orientdb/commit/668ece96be210e742a4e2820a3085b215cf55104</a></li>
<li><a href="https://github.com/advisories/GHSA-v6wr-fch2-vm5w">https://github.com/advisories/GHSA-v6wr-fch2-vm5w</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/845332">https://www.kb.cert.org/vuls/id/845332</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v6wr-fch2-vm5w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-18T17:41:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.drools:drools-core] Drools Core Deserialization of Untrusted Data vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m5q8-58wh-xxq4</id>
        <link href="https://github.com/advisories/GHSA-m5q8-58wh-xxq4"/>
        <updated>2023-09-12T13:53:20.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found where some utility classes in Drools core did not use proper safeguards when deserializing data. This flaw allows an authenticated attacker to construct malicious serialized objects (usually called gadgets) and achieve code execution on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1415">https://nvd.nist.gov/vuln/detail/CVE-2022-1415</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2022:6813">https://access.redhat.com/errata/RHSA-2022:6813</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2022-1415">https://access.redhat.com/security/cve/CVE-2022-1415</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2065505">https://bugzilla.redhat.com/show_bug.cgi?id=2065505</a></li>
<li><a href="https://github.com/advisories/GHSA-m5q8-58wh-xxq4">https://github.com/advisories/GHSA-m5q8-58wh-xxq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m5q8-58wh-xxq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-11T21:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:database] OpenRefine Remote Code execution in project import with mysql jdbc url attack]]></title>
        <id>https://github.com/advisories/GHSA-p3r5-x3hr-gpg5</id>
        <link href="https://github.com/advisories/GHSA-p3r5-x3hr-gpg5"/>
        <updated>2023-09-12T13:53:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An remote Code exec vulnerability allows any unauthenticated user to exec code on the server.</p>
<h3 id="details">Details</h3>
<p>Hi,Team,
i find openrefine support to import data from database,When use mysql jdbc to connect to database,It is vulnerable to jdbc url attacks,for example,unauthenticated attacker can get rce on the server through the mysql userializable If the mysql-connector-java version used on the server side is less than 8.20.
In order for the server to enable deserialization we need to set the <code>autoDeserialize</code> and <code>queryInterceptors</code> parameters in the connection string,As same with <a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m</a>, since the concatenation string is a direct concatenation, it is possible to inject the required parameters after the other parameters.
<img alt="image" src="https://user-images.githubusercontent.com/24366795/262581108-e98dfe16-ee67-463f-8c49-7c318bf0d6f3.png"></p>
<p>And there is a commons-beanutils dependency library on the server side, which contains an RCE-capable deserialization exploit chain</p>
<h3 id="poc">PoC</h3>
<p>env:
centos 7
openrefine 3.7.4
jdk11
mysql-connector-java version 8.14.0
you can use the tool <a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a> to running a malicious mysql server.<br>for example use the CB 1.9 Gadget to exec command <code>touch /tmp/hacked</code>.<br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262583287-7351a00a-32bf-4cb3-8d86-65ff0a112360.png"><br>set the <code>user</code> to <code>base64ZGVzZXJfQ0JfdG91Y2ggL3RtcC9oYWNrZWQ=</code>(<code>touch /tmp/hacked</code> base64 encode),<code>dataBaseName</code> to <code>test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor#</code>.<br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262583657-9cfb9caa-02ed-4f6b-b110-650108803172.png">
<img alt="image" src="https://user-images.githubusercontent.com/24366795/262583815-a17d5530-bae8-4b4f-9392-4ea41b328c7d.png"><br> command <code>touch /tmp/hacked</code> is executed.<br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262583979-823d5843-578f-4af6-b84f-a1422aa1b863.png"></p>
<h3 id="impact">Impact</h3>
<p>An remote Code exec vulnerability allows any unauthenticated user to exec code on the server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-p3r5-x3hr-gpg5">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-p3r5-x3hr-gpg5</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/693fde606d4b5b78b16391c29d110389eb605511">https://github.com/OpenRefine/OpenRefine/commit/693fde606d4b5b78b16391c29d110389eb605511</a></li>
<li><a href="https://github.com/advisories/GHSA-p3r5-x3hr-gpg5">https://github.com/advisories/GHSA-p3r5-x3hr-gpg5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3r5-x3hr-gpg5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-12T13:52:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:database] OpenRefine vulnerable to arbitrary file read in project import with mysql jdbc url attack]]></title>
        <id>https://github.com/advisories/GHSA-qqh2-wvmv-h72m</id>
        <link href="https://github.com/advisories/GHSA-qqh2-wvmv-h72m"/>
        <updated>2023-09-12T13:52:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An arbitrary file read vulnerability allows any unauthenticated user to read the file on the server._</p>
<h3 id="details">Details</h3>
<p>Hi,Team,
i find openrefine support to import data from database,When use mysql jdbc to connect to database,It is vulnerable to jdbc url attacks,for example,unauthenticated attacker can read the file on the server.
There are some differences in utilization depending on the version of the mysql-connector dependency on the server side.  </p>
<ol>
<li>mysql-connector-java version &gt; 8.14
The default value of <code>allowLoadLocalInfile</code> on the server side is false in this case.We need to manually set this value to true in the connection string.<br>Since the way to get the databaseurl in <code>com/google/refine/extension/database/mysql/MySQLConnectionManager.java</code> is to splice the individual configurations directly, we can set the <code>allowLoadLocalInfile</code> parameter after the other parameters(for example the <code>databaseName</code> parameter ).<br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262531956-ef8bb163-6692-4494-92f9-3b9bcffdf503.png"><br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262531716-95e7c9a6-601d-4157-bce9-c58d17a6e3ea.png">
<img alt="image" src="https://user-images.githubusercontent.com/24366795/262531614-a34f891f-acd2-4354-bbbe-96447a9dcbd1.png"></li>
<li>mysql-connector-java version &lt;= 8.14
The default value of <code>allowLoadLocalInfile</code> on the server side is true in this case.so wo don't need do anything,Just connect to our malicious server.</li>
</ol>
<h3 id="poc">PoC</h3>
<p>env:<br>centos 7
openrefine 3.7.4 
jdk11 
mysql-connector-java version 8.30.0  </p>
<p>you can use the tool <a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a> to running a malicious mysql server.<br><img alt="image" src="https://user-images.githubusercontent.com/24366795/262536594-a62dbc2c-62d2-4b21-a351-5be7f506f852.png"><br>for example,to read the /etc/passwd file.
<img alt="image" src="https://user-images.githubusercontent.com/24366795/262539711-f274a396-9c0a-4ace-b3af-3b4e5309ab00.png">
set the <code>username</code> to <code>base64ZmlsZXJlYWRfL2V0Yy9wYXNzd2Q=</code> and <code>Database name</code> to <code>test?allowLoadLocalInfile=true#</code> (for  mysql-connector-java version &lt;= 8.14,just setting the database name normally) and test to connect your malicious mysql server.
you can get the file in your fake-server-files directory.
<img alt="image" src="https://user-images.githubusercontent.com/24366795/262542538-c9f501a4-899f-4b57-89b9-b8dd42f535fb.png"></p>
<h3 id="impact">Impact</h3>
<p>An arbitrary file read vulnerability allows any unauthenticated user to read the file on the server._</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-qqh2-wvmv-h72m</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d">https://github.com/OpenRefine/OpenRefine/commit/2de1439f5be63d9d0e89bbacbd24fa28c8c3e29d</a></li>
<li><a href="https://github.com/advisories/GHSA-qqh2-wvmv-h72m">https://github.com/advisories/GHSA-qqh2-wvmv-h72m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qqh2-wvmv-h72m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-12T13:52:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.craftercms:crafter-studio] Crafter CMS Crafter Studio vulnerable to Improper Control of Dynamically-Managed Code Resources]]></title>
        <id>https://github.com/advisories/GHSA-r6fx-55x3-f9x6</id>
        <link href="https://github.com/advisories/GHSA-r6fx-55x3-f9x6"/>
        <updated>2023-09-12T13:30:03.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Control of Dynamically-Managed Code Resources vulnerability in Crafter Studio of Crafter CMS allows authenticated developers to execute OS commands via FreeMarker static methods.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-23267">https://nvd.nist.gov/vuln/detail/CVE-2021-23267</a></li>
<li><a href="https://docs.craftercms.org/en/3.1/security/advisory.html#cv-2022051603">https://docs.craftercms.org/en/3.1/security/advisory.html#cv-2022051603</a></li>
<li><a href="https://github.com/advisories/GHSA-r6fx-55x3-f9x6">https://github.com/advisories/GHSA-r6fx-55x3-f9x6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6fx-55x3-f9x6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.karaf.specs:org.apache.karaf.specs.java.xml] XML External Entity Reference in Apache Karaf]]></title>
        <id>https://github.com/advisories/GHSA-92wj-x78c-m4fx</id>
        <link href="https://github.com/advisories/GHSA-92wj-x78c-m4fx"/>
        <updated>2023-09-11T22:40:28.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Karaf provides a features deployer, which allows users to "hot deploy" a features XML by dropping the file directly in the deploy folder. The features XML is parsed by XMLInputFactory class. Apache Karaf XMLInputFactory class doesn't contain any mitigation codes against XXE. This is a potential security risk as an user can inject external XML entities in Apache Karaf version prior to 4.1.7 or 4.2.2. It has been fixed in Apache Karaf 4.1.7 and 4.2.2 releases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-11788">https://nvd.nist.gov/vuln/detail/CVE-2018-11788</a></li>
<li><a href="http://karaf.apache.org/security/cve-2018-11788.txt">http://karaf.apache.org/security/cve-2018-11788.txt</a></li>
<li><a href="https://github.com/apache/karaf/commit/0c36c50bc158739c8fc8543122a6740c54adafca">https://github.com/apache/karaf/commit/0c36c50bc158739c8fc8543122a6740c54adafca</a></li>
<li><a href="https://web.archive.org/web/20200227101219/https://www.securityfocus.com/bid/106479/">https://web.archive.org/web/20200227101219/https://www.securityfocus.com/bid/106479/</a></li>
<li><a href="https://github.com/advisories/GHSA-92wj-x78c-m4fx">https://github.com/advisories/GHSA-92wj-x78c-m4fx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92wj-x78c-m4fx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2019-01-07T19:14:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.karaf.specs:org.apache.karaf.specs.java.xml] XML External Entity Reference in Apache Karaf]]></title>
        <id>https://github.com/advisories/GHSA-92wj-x78c-m4fx</id>
        <link href="https://github.com/advisories/GHSA-92wj-x78c-m4fx"/>
        <updated>2023-09-11T22:40:28.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Karaf provides a features deployer, which allows users to "hot deploy" a features XML by dropping the file directly in the deploy folder. The features XML is parsed by XMLInputFactory class. Apache Karaf XMLInputFactory class doesn't contain any mitigation codes against XXE. This is a potential security risk as an user can inject external XML entities in Apache Karaf version prior to 4.1.7 or 4.2.2. It has been fixed in Apache Karaf 4.1.7 and 4.2.2 releases.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-11788">https://nvd.nist.gov/vuln/detail/CVE-2018-11788</a></li>
<li><a href="http://karaf.apache.org/security/cve-2018-11788.txt">http://karaf.apache.org/security/cve-2018-11788.txt</a></li>
<li><a href="https://github.com/apache/karaf/commit/0c36c50bc158739c8fc8543122a6740c54adafca">https://github.com/apache/karaf/commit/0c36c50bc158739c8fc8543122a6740c54adafca</a></li>
<li><a href="https://web.archive.org/web/20200227101219/https://www.securityfocus.com/bid/106479/">https://web.archive.org/web/20200227101219/https://www.securityfocus.com/bid/106479/</a></li>
<li><a href="https://github.com/advisories/GHSA-92wj-x78c-m4fx">https://github.com/advisories/GHSA-92wj-x78c-m4fx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-92wj-x78c-m4fx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2019-01-07T19:14:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.karaf:org.apache.karaf.management] Insecure Java Deserialization in Apache Karaf]]></title>
        <id>https://github.com/advisories/GHSA-jh5g-9m4v-9vv9</id>
        <link href="https://github.com/advisories/GHSA-jh5g-9m4v-9vv9"/>
        <updated>2023-09-11T22:19:00.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Karaf allows monitoring of applications and the Java runtime by using the Java Management Extensions (JMX). JMX is a Java RMI based technology that relies on Java serialized objects for client server communication. Whereas the default JMX implementation is hardened against unauthenticated deserialization attacks, the implementation used by Apache Karaf is not protected against this kind of attack. The impact of Java deserialization vulnerabilities strongly depends on the classes that are available within the targets class path. Generally speaking, deserialization of untrusted data does always represent a high security risk and should be prevented. The risk is low as, by default, Karaf uses a limited set of classes in the JMX server class path. It depends of system scoped classes (e.g. jar in the lib folder).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-41766">https://nvd.nist.gov/vuln/detail/CVE-2021-41766</a></li>
<li><a href="https://karaf.apache.org/security/cve-2021-41766.txt">https://karaf.apache.org/security/cve-2021-41766.txt</a></li>
<li><a href="https://gitbox.apache.org/repos/asf?p=karaf.git;h=93a019c">https://gitbox.apache.org/repos/asf?p=karaf.git;h=93a019c</a></li>
<li><a href="https://gitbox.apache.org/repos/asf?p=karaf.git;h=b42c82c">https://gitbox.apache.org/repos/asf?p=karaf.git;h=b42c82c</a></li>
<li><a href="https://issues.apache.org/jira/browse/KARAF-7312">https://issues.apache.org/jira/browse/KARAF-7312</a></li>
<li><a href="https://github.com/apache/karaf/pull/1475">https://github.com/apache/karaf/pull/1475</a></li>
<li><a href="https://github.com/apache/karaf/commit/b42c82ca3b9a22bd92d249a1060a1953f4188bc2">https://github.com/apache/karaf/commit/b42c82ca3b9a22bd92d249a1060a1953f4188bc2</a></li>
<li><a href="https://github.com/advisories/GHSA-jh5g-9m4v-9vv9">https://github.com/advisories/GHSA-jh5g-9m4v-9vv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jh5g-9m4v-9vv9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-28T22:24:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.craftercms:crafter-studio] CrafterCMS Crafter Studio Improperly Controls Dynamically-Managed Code Resources]]></title>
        <id>https://github.com/advisories/GHSA-2jv3-v37p-65w3</id>
        <link href="https://github.com/advisories/GHSA-2jv3-v37p-65w3"/>
        <updated>2023-09-11T22:15:24.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Control of Dynamically-Managed Code Resources vulnerability in Crafter Studio of Crafter CMS allows authenticated developers to execute OS commands via FreeMarker SSTI.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-40634">https://nvd.nist.gov/vuln/detail/CVE-2022-40634</a></li>
<li><a href="https://docs.craftercms.org/en/3.1/security/advisory.html#cv-2022051601">https://docs.craftercms.org/en/3.1/security/advisory.html#cv-2022051601</a></li>
<li><a href="https://github.com/advisories/GHSA-2jv3-v37p-65w3">https://github.com/advisories/GHSA-2jv3-v37p-65w3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jv3-v37p-65w3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-09-14T00:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.activemq:artemis-openwire-protocol] Apache ActiveMQ Artemis vulnerable to Improper Access Control]]></title>
        <id>https://github.com/advisories/GHSA-q7fr-vqhq-v5xr</id>
        <link href="https://github.com/advisories/GHSA-q7fr-vqhq-v5xr"/>
        <updated>2023-09-11T20:56:04.000Z</updated>
        <content type="html"><![CDATA[<p>While investigating ARTEMIS-2964 it was found that the creation of advisory messages in the OpenWire protocol head of Apache ActiveMQ Artemis 2.15.0 bypassed policy based access control for the entire session. Production of advisory messages was not subject to access control in error.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-26118">https://nvd.nist.gov/vuln/detail/CVE-2021-26118</a></li>
<li><a href="https://lists.apache.org/thread.html/rafd5d7cf303772a0118865262946586921a65ebd98fc24f56c812574@%3Cannounce.apache.org%3E">https://lists.apache.org/thread.html/rafd5d7cf303772a0118865262946586921a65ebd98fc24f56c812574@%3Cannounce.apache.org%3E</a></li>
<li><a href="https://mail-archives.apache.org/mod_mbox/activemq-users/202101.mbox/%3CCAH%2BvQmMUNnkiXv2-d3ucdErWOsdnLi6CgnK%2BVfixyJvTgTuYig%40mail.gmail.com%3E">https://mail-archives.apache.org/mod_mbox/activemq-users/202101.mbox/%3CCAH%2BvQmMUNnkiXv2-d3ucdErWOsdnLi6CgnK%2BVfixyJvTgTuYig%40mail.gmail.com%3E</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20210827-0002/">https://security.netapp.com/advisory/ntap-20210827-0002/</a></li>
<li><a href="https://github.com/apache/activemq-artemis/commit/e5566d52116d81611d914548adc3cbb14d7118d4">https://github.com/apache/activemq-artemis/commit/e5566d52116d81611d914548adc3cbb14d7118d4</a></li>
<li><a href="https://github.com/advisories/GHSA-q7fr-vqhq-v5xr">https://github.com/advisories/GHSA-q7fr-vqhq-v5xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7fr-vqhq-v5xr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-06-16T17:39:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation]]></title>
        <id>https://github.com/advisories/GHSA-h7mf-qrm9-2848</id>
        <link href="https://github.com/advisories/GHSA-h7mf-qrm9-2848"/>
        <updated>2023-09-11T20:52:36.000Z</updated>
        <content type="html"><![CDATA[<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a "%{" sequence and ending with a "}" character. </p>
<p>Note: Version 2.0.4 marks the change from <code>opensymphony:xwork</code> to <code>com.opensymphony:xwork</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-4556">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>
<li><a href="http://struts.apache.org/2.x/docs/s2-001.html">http://struts.apache.org/2.x/docs/s2-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h7mf-qrm9-2848">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7mf-qrm9-2848</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-01T18:24:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation]]></title>
        <id>https://github.com/advisories/GHSA-h7mf-qrm9-2848</id>
        <link href="https://github.com/advisories/GHSA-h7mf-qrm9-2848"/>
        <updated>2023-09-11T20:52:36.000Z</updated>
        <content type="html"><![CDATA[<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a "%{" sequence and ending with a "}" character. </p>
<p>Note: Version 2.0.4 marks the change from <code>opensymphony:xwork</code> to <code>com.opensymphony:xwork</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-4556">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>
<li><a href="http://struts.apache.org/2.x/docs/s2-001.html">http://struts.apache.org/2.x/docs/s2-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h7mf-qrm9-2848">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7mf-qrm9-2848</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-01T18:24:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.nifi:nifi-framework-cluster] Apache NiFi Improper Input Validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-43fp-vwwg-qgv6</id>
        <link href="https://github.com/advisories/GHSA-43fp-vwwg-qgv6"/>
        <updated>2023-09-11T20:45:18.000Z</updated>
        <content type="html"><![CDATA[<p>When a client request to a cluster node was replicated to other nodes in the cluster for verification, the Content-Length was forwarded. On a DELETE request, the body was ignored, but if the initial request had a Content-Length value other than 0, the receiving nodes would wait for the body and eventually timeout. Mitigation: The fix to check DELETE requests and overwrite non-zero Content-Length header values was applied on the Apache NiFi 1.8.0 release. Users running a prior 1.x release should upgrade to the appropriate release.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-17194">https://nvd.nist.gov/vuln/detail/CVE-2018-17194</a></li>
<li><a href="https://nifi.apache.org/security.html#CVE-2018-17194">https://nifi.apache.org/security.html#CVE-2018-17194</a></li>
<li><a href="https://github.com/apache/nifi/commit/1baead6f525046a613fc4fe494a0d193776ea70f,">https://github.com/apache/nifi/commit/1baead6f525046a613fc4fe494a0d193776ea70f,</a></li>
<li><a href="https://github.com/advisories/GHSA-43fp-vwwg-qgv6">https://github.com/advisories/GHSA-43fp-vwwg-qgv6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-43fp-vwwg-qgv6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-12-20T22:02:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins.workflow:workflow-cps-global-lib] Missing Authorization in Jenkins Pipeline: Shared Groovy Libraries Plugin]]></title>
        <id>https://github.com/advisories/GHSA-9x5v-8352-244g</id>
        <link href="https://github.com/advisories/GHSA-9x5v-8352-244g"/>
        <updated>2023-09-11T20:44:11.000Z</updated>
        <content type="html"><![CDATA[<p>A missing permission check in Jenkins Pipeline: Shared Groovy Libraries Plugin 2.14 and earlier allowed users with Overall/Read access to obtain limited information about the content of SCM repositories referenced by global libraries.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10357">https://nvd.nist.gov/vuln/detail/CVE-2019-10357</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2594">https://access.redhat.com/errata/RHSA-2019:2594</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2651">https://access.redhat.com/errata/RHSA-2019:2651</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2019:2662">https://access.redhat.com/errata/RHSA-2019:2662</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-07-31/#SECURITY1422">https://jenkins.io/security/advisory/2019-07-31/#SECURITY1422</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/07/31/1">http://www.openwall.com/lists/oss-security/2019/07/31/1</a></li>
<li><a href="https://github.com/jenkinsci/workflow-cps-global-lib-plugin/commit/6fce1e241d82641e8648c546bc63c22a5e07e96b">https://github.com/jenkinsci/workflow-cps-global-lib-plugin/commit/6fce1e241d82641e8648c546bc63c22a5e07e96b</a></li>
<li><a href="https://github.com/advisories/GHSA-9x5v-8352-244g">https://github.com/advisories/GHSA-9x5v-8352-244g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9x5v-8352-244g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:51:50.000Z</published>
    </entry>
</feed>