<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2024-07-01T20:01:38.162Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-gwc] Classpath resource disclosure in GWC Web Resource API on Windows / Tomcat]]></title>
        <id>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</id>
        <link href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3"/>
        <updated>2024-07-01T19:24:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If GeoServer is deployed in the Windows operating system using an Apache Tomcat web application server, it is possible to bypass existing input validation in the GeoWebCache ByteStreamController class and read arbitrary classpath resources with specific file name extensions.</p>
<p>If GeoServer is also deployed as a web archive using the data directory embedded in the geoserver.war file (rather than an external data directory), it will likely be possible to read specific resources to gain administrator privileges.  However, it is very unlikely that production environments will be using the embedded data directory since, depending on how GeoServer is deployed, it will be erased and re-installed (which would also reset to the default password) either every time the server restarts or every time a new GeoServer WAR is installed and is therefore difficult to maintain. An external data directory will always be used if GeoServer is running in standalone mode (via an installer or a binary).</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Change environment:</p>
<ul>
<li>Change from Windows operating system. This vulnerability depends on Windows file paths so Linux and Mac OS are not vulnerable.</li>
<li>Change from Apache Tomcat application server. Jetty and WildFly are confirmed to not be vulnerable. Other application servers have not been tested and may be vulnerable.</li>
</ul>
<p>Disable anonymous access to the embeded GeoWebCache administration and status pages:</p>
<ol>
<li>Navigate to <strong>Security &gt; Authentication</strong> Page</li>
<li>Locate <strong>Filter Chains</strong> heading</li>
<li>Select the <code>web</code> filter filter chain (ant pattern <code>/web/**,/gwc/rest/web/**,/</code>)</li>
<li>Remove <code>,/gwc/rest/web/**</code> from the pattern (so that <code>/web/**,/</code> is left).</li>
<li>Save the changes</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li>CVE-Pending</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24749">https://nvd.nist.gov/vuln/detail/CVE-2024-24749</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef">https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T19:24:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-gwc] Classpath resource disclosure in GWC Web Resource API on Windows / Tomcat]]></title>
        <id>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</id>
        <link href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3"/>
        <updated>2024-07-01T19:24:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If GeoServer is deployed in the Windows operating system using an Apache Tomcat web application server, it is possible to bypass existing input validation in the GeoWebCache ByteStreamController class and read arbitrary classpath resources with specific file name extensions.</p>
<p>If GeoServer is also deployed as a web archive using the data directory embedded in the geoserver.war file (rather than an external data directory), it will likely be possible to read specific resources to gain administrator privileges.  However, it is very unlikely that production environments will be using the embedded data directory since, depending on how GeoServer is deployed, it will be erased and re-installed (which would also reset to the default password) either every time the server restarts or every time a new GeoServer WAR is installed and is therefore difficult to maintain. An external data directory will always be used if GeoServer is running in standalone mode (via an installer or a binary).</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Change environment:</p>
<ul>
<li>Change from Windows operating system. This vulnerability depends on Windows file paths so Linux and Mac OS are not vulnerable.</li>
<li>Change from Apache Tomcat application server. Jetty and WildFly are confirmed to not be vulnerable. Other application servers have not been tested and may be vulnerable.</li>
</ul>
<p>Disable anonymous access to the embeded GeoWebCache administration and status pages:</p>
<ol>
<li>Navigate to <strong>Security &gt; Authentication</strong> Page</li>
<li>Locate <strong>Filter Chains</strong> heading</li>
<li>Select the <code>web</code> filter filter chain (ant pattern <code>/web/**,/gwc/rest/web/**,/</code>)</li>
<li>Remove <code>,/gwc/rest/web/**</code> from the pattern (so that <code>/web/**,/</code> is left).</li>
<li>Save the changes</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li>CVE-Pending</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24749">https://nvd.nist.gov/vuln/detail/CVE-2024-24749</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef">https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T19:24:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-app] Classpath resource disclosure in GWC Web Resource API on Windows / Tomcat]]></title>
        <id>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</id>
        <link href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3"/>
        <updated>2024-07-01T19:24:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If GeoServer is deployed in the Windows operating system using an Apache Tomcat web application server, it is possible to bypass existing input validation in the GeoWebCache ByteStreamController class and read arbitrary classpath resources with specific file name extensions.</p>
<p>If GeoServer is also deployed as a web archive using the data directory embedded in the geoserver.war file (rather than an external data directory), it will likely be possible to read specific resources to gain administrator privileges.  However, it is very unlikely that production environments will be using the embedded data directory since, depending on how GeoServer is deployed, it will be erased and re-installed (which would also reset to the default password) either every time the server restarts or every time a new GeoServer WAR is installed and is therefore difficult to maintain. An external data directory will always be used if GeoServer is running in standalone mode (via an installer or a binary).</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Change environment:</p>
<ul>
<li>Change from Windows operating system. This vulnerability depends on Windows file paths so Linux and Mac OS are not vulnerable.</li>
<li>Change from Apache Tomcat application server. Jetty and WildFly are confirmed to not be vulnerable. Other application servers have not been tested and may be vulnerable.</li>
</ul>
<p>Disable anonymous access to the embeded GeoWebCache administration and status pages:</p>
<ol>
<li>Navigate to <strong>Security &gt; Authentication</strong> Page</li>
<li>Locate <strong>Filter Chains</strong> heading</li>
<li>Select the <code>web</code> filter filter chain (ant pattern <code>/web/**,/gwc/rest/web/**,/</code>)</li>
<li>Remove <code>,/gwc/rest/web/**</code> from the pattern (so that <code>/web/**,/</code> is left).</li>
<li>Save the changes</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li>CVE-Pending</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24749">https://nvd.nist.gov/vuln/detail/CVE-2024-24749</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef">https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T19:24:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-app] Classpath resource disclosure in GWC Web Resource API on Windows / Tomcat]]></title>
        <id>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</id>
        <link href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3"/>
        <updated>2024-07-01T19:24:05.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>If GeoServer is deployed in the Windows operating system using an Apache Tomcat web application server, it is possible to bypass existing input validation in the GeoWebCache ByteStreamController class and read arbitrary classpath resources with specific file name extensions.</p>
<p>If GeoServer is also deployed as a web archive using the data directory embedded in the geoserver.war file (rather than an external data directory), it will likely be possible to read specific resources to gain administrator privileges.  However, it is very unlikely that production environments will be using the embedded data directory since, depending on how GeoServer is deployed, it will be erased and re-installed (which would also reset to the default password) either every time the server restarts or every time a new GeoServer WAR is installed and is therefore difficult to maintain. An external data directory will always be used if GeoServer is running in standalone mode (via an installer or a binary).</p>
<h3 id="patches">Patches</h3>
<p><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Change environment:</p>
<ul>
<li>Change from Windows operating system. This vulnerability depends on Windows file paths so Linux and Mac OS are not vulnerable.</li>
<li>Change from Apache Tomcat application server. Jetty and WildFly are confirmed to not be vulnerable. Other application servers have not been tested and may be vulnerable.</li>
</ul>
<p>Disable anonymous access to the embeded GeoWebCache administration and status pages:</p>
<ol>
<li>Navigate to <strong>Security &gt; Authentication</strong> Page</li>
<li>Locate <strong>Filter Chains</strong> heading</li>
<li>Select the <code>web</code> filter filter chain (ant pattern <code>/web/**,/gwc/rest/web/**,/</code>)</li>
<li>Remove <code>,/gwc/rest/web/**</code> from the pattern (so that <code>/web/**,/</code> is left).</li>
<li>Save the changes</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li>CVE-Pending</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/geoserver/geoserver/security/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24749">https://nvd.nist.gov/vuln/detail/CVE-2024-24749</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/pull/1211">https://github.com/GeoWebCache/geowebcache/pull/1211</a></li>
<li><a href="https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef">https://github.com/GeoWebCache/geowebcache/commit/c7f76bd8a1d67c3b986146e7a5e0b14dd64a8fef</a></li>
<li><a href="https://github.com/advisories/GHSA-jhqx-5v5g-mpf3">https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jhqx-5v5g-mpf3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-01T19:24:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-main]  GeoServer's Server Status shows sensitive environmental variables and Java properties]]></title>
        <id>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</id>
        <link href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf"/>
        <updated>2024-07-01T19:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>GeoServer's Server Status page and REST API (at <code>/geoserver/rest/about/status</code>) lists <em>all</em> environment variables and Java properties to <em>any</em> GeoServer user with administrative rights as part of those modules' status message.</p>
<p>These variables/properties can also contain sensitive information, such as database passwords or API keys/tokens, for example:</p>
<ul>
<li><p>Data stores defined with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>) which need a password or access key.</p>
</li>
<li><p>GeoServer's official Docker image <a href="https://github.com/geoserver/docker/blob/master/README.md#how-to-enable-a-postgresql-jndi-resource">uses environment variables to configure PostgreSQL JNDI resources, including credentials</a> (<code>POSTGRES_HOST</code>, <code>POSTGRES_USERNAME</code>, <code>POSTGRES_PASSWORD</code>)</p>
</li>
</ul>
<p>Additionally, many community-developed GeoServer container images <code>export</code> other credentials from their start-up scripts as environment variables to the GeoServer (<code>java</code>) process, such as:</p>
<ul>
<li><p>GeoServer <code>admin</code> and master (<code>root</code>) passwords</p>
</li>
<li><p>Tomcat management application password</p>
</li>
<li><p>HTTPS/TLS certificate key store password</p>
</li>
<li><p>AWS S3 bucket access keys</p>
</li>
</ul>
<p>The precise scope of the issue depends on which container image is used and how it is configured.</p>
<blockquote>
<p>[!NOTE]
Some container images allow passing secrets as files (eg: <code>POSTGRES_PASSWORD_FILE</code>), or randomly generating passwords on start-up. While this is promoted as best-practice[^secret-files], if its start-up script <a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-export"><code>export</code>s these as environment variables</a> to GeoServer, they are <strong>also</strong> impacted by this issue.</p>
</blockquote>
<h3 id="impact">Impact</h3>
<p>The “about status” API endpoint (at <code>/geoserver/rest/about/status</code>) which powers the Server Status page is only available to administrators.</p>
<p>Depending on the operating environment, administrators might have legitimate access to credentials in other ways, but this issue defeats more sophisticated controls (like break-glass access to secrets or role accounts).</p>
<p>By default, GeoServer only allows same-origin authenticated API access. This limits the scope for a third-party attacker to use an administrator’s credentials to gain access to credentials (ie: requires XSS).</p>
<p>We were unable to determine any other conditions under which the GeoServer REST API may be available more broadly.</p>
<h3 id="fixes--remediation">Fixes / remediation</h3>
<p>GeoServer 2.24.4 and 2.25.1 hide <strong>all</strong> environment variables and Java system properties <em>by default</em>, with <em>no further action required by GeoServer administrators</em>.</p>
<p><a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">There are new settings to allow an administrator to display these again</a> – effectively <strong>reverting</strong> this security fix. We strongly recommend administrators leave these settings as-is, and use alternative mechanisms to access environment variables (instructions below).</p>
<p>If you're using GeoServer in a container runtime (such as Docker or Kubernetes) or from some other distributor's packages, you'll need to wait for the maintainer to update the version of GeoServer used in their image.</p>
<blockquote>
<p>[!WARNING]
If you run GeoServer with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>), a GeoServer administrator could use this to access any environment variable or Java property by including it in some field which is rendered by the UI (such as the description field), <strong>even with this fix</strong>.</p>
</blockquote>
<h3 id="advice-for-container--docker-image-maintainers">Advice for container / Docker image maintainers</h3>
<p>Update container images to use GeoServer 2.24.4 or 2.25.1 to get the bug fix.</p>
<p>Please leave environment variables and Java system properties hidden by default. If you provide the option to re-enable it, <a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">communicate the impact and risks</a> so that users can make an informed choice.</p>
<p>Container images should practice "defence in depth", to limit the impact when it is configured to show environment variables and/or properties:</p>
<ul>
<li><p>Pass secrets to the container as either:</p>
<ul>
<li>files which are only readable by the GeoServer process/UID, or,</li>
<li>references (identifiers) to a secret stored in a cloud provider's metadata or secret management service</li>
</ul>
</li>
<li><p>Pass secrets to GeoServer by generating configuration files as part of your start-up scripts, rather than passing variables/properties or relying on <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a>.</p>
</li>
<li><p>Ensure any configuration files with secrets are not readable by other users.</p>
</li>
<li><p>Clear all environment variables which contain secrets <em>before</em> starting GeoServer.</p>
<p><em>Alternatively:</em> start up GeoServer with <em>only</em> the environment variables it needs, and no secrets.</p>
</li>
<li><p><strong>Don't</strong> pass secrets as command-line flags – these are shown in <code>ps</code> to all users!</p>
</li>
</ul>
<h3 id="alternatives-for-displaying-geoservers-environment-variables">Alternatives for displaying GeoServer's environment variables</h3>
<ul>
<li><p><strong>On Linux,</strong> you can get all environment variables <a href="https://unix.stackexchange.com/a/70636">set at <em>start-up time</em></a> for a running process with:</p>
<pre><code class="language-sh">tr '\0' '\n' &lt; /proc/${GEOSERVER_PID}/environ
</code></pre>
</li>
<li><p><strong>On Windows,</strong> <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">SysInternals' Process Explorer</a> can show running processes' environment variables.</p>
</li>
<li><p>Current versions of <strong>macOS</strong> do not allow arbitrary access to other running processes' environment variables. Disabling these restrictions (on a macOS level) would significantly reduce the overall security of the system.</p>
</li>
</ul>
<p>[^secret-files]: <a href="https://docs.docker.com/compose/use-secrets/">Docker Compose: How to use secrets in Docker Compose</a>, <a href="https://docs.docker.com/engine/swarm/secrets/#build-support-for-docker-secrets-into-your-images">Docker Swarm: Build support for Docker Secrets into your images</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34696">https://nvd.nist.gov/vuln/detail/CVE-2024-34696</a></li>
<li><a href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/advisories/GHSA-j59v-vgcr-hxvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T19:20:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-main]  GeoServer's Server Status shows sensitive environmental variables and Java properties]]></title>
        <id>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</id>
        <link href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf"/>
        <updated>2024-07-01T19:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>GeoServer's Server Status page and REST API (at <code>/geoserver/rest/about/status</code>) lists <em>all</em> environment variables and Java properties to <em>any</em> GeoServer user with administrative rights as part of those modules' status message.</p>
<p>These variables/properties can also contain sensitive information, such as database passwords or API keys/tokens, for example:</p>
<ul>
<li><p>Data stores defined with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>) which need a password or access key.</p>
</li>
<li><p>GeoServer's official Docker image <a href="https://github.com/geoserver/docker/blob/master/README.md#how-to-enable-a-postgresql-jndi-resource">uses environment variables to configure PostgreSQL JNDI resources, including credentials</a> (<code>POSTGRES_HOST</code>, <code>POSTGRES_USERNAME</code>, <code>POSTGRES_PASSWORD</code>)</p>
</li>
</ul>
<p>Additionally, many community-developed GeoServer container images <code>export</code> other credentials from their start-up scripts as environment variables to the GeoServer (<code>java</code>) process, such as:</p>
<ul>
<li><p>GeoServer <code>admin</code> and master (<code>root</code>) passwords</p>
</li>
<li><p>Tomcat management application password</p>
</li>
<li><p>HTTPS/TLS certificate key store password</p>
</li>
<li><p>AWS S3 bucket access keys</p>
</li>
</ul>
<p>The precise scope of the issue depends on which container image is used and how it is configured.</p>
<blockquote>
<p>[!NOTE]
Some container images allow passing secrets as files (eg: <code>POSTGRES_PASSWORD_FILE</code>), or randomly generating passwords on start-up. While this is promoted as best-practice[^secret-files], if its start-up script <a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-export"><code>export</code>s these as environment variables</a> to GeoServer, they are <strong>also</strong> impacted by this issue.</p>
</blockquote>
<h3 id="impact">Impact</h3>
<p>The “about status” API endpoint (at <code>/geoserver/rest/about/status</code>) which powers the Server Status page is only available to administrators.</p>
<p>Depending on the operating environment, administrators might have legitimate access to credentials in other ways, but this issue defeats more sophisticated controls (like break-glass access to secrets or role accounts).</p>
<p>By default, GeoServer only allows same-origin authenticated API access. This limits the scope for a third-party attacker to use an administrator’s credentials to gain access to credentials (ie: requires XSS).</p>
<p>We were unable to determine any other conditions under which the GeoServer REST API may be available more broadly.</p>
<h3 id="fixes--remediation">Fixes / remediation</h3>
<p>GeoServer 2.24.4 and 2.25.1 hide <strong>all</strong> environment variables and Java system properties <em>by default</em>, with <em>no further action required by GeoServer administrators</em>.</p>
<p><a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">There are new settings to allow an administrator to display these again</a> – effectively <strong>reverting</strong> this security fix. We strongly recommend administrators leave these settings as-is, and use alternative mechanisms to access environment variables (instructions below).</p>
<p>If you're using GeoServer in a container runtime (such as Docker or Kubernetes) or from some other distributor's packages, you'll need to wait for the maintainer to update the version of GeoServer used in their image.</p>
<blockquote>
<p>[!WARNING]
If you run GeoServer with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>), a GeoServer administrator could use this to access any environment variable or Java property by including it in some field which is rendered by the UI (such as the description field), <strong>even with this fix</strong>.</p>
</blockquote>
<h3 id="advice-for-container--docker-image-maintainers">Advice for container / Docker image maintainers</h3>
<p>Update container images to use GeoServer 2.24.4 or 2.25.1 to get the bug fix.</p>
<p>Please leave environment variables and Java system properties hidden by default. If you provide the option to re-enable it, <a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">communicate the impact and risks</a> so that users can make an informed choice.</p>
<p>Container images should practice "defence in depth", to limit the impact when it is configured to show environment variables and/or properties:</p>
<ul>
<li><p>Pass secrets to the container as either:</p>
<ul>
<li>files which are only readable by the GeoServer process/UID, or,</li>
<li>references (identifiers) to a secret stored in a cloud provider's metadata or secret management service</li>
</ul>
</li>
<li><p>Pass secrets to GeoServer by generating configuration files as part of your start-up scripts, rather than passing variables/properties or relying on <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a>.</p>
</li>
<li><p>Ensure any configuration files with secrets are not readable by other users.</p>
</li>
<li><p>Clear all environment variables which contain secrets <em>before</em> starting GeoServer.</p>
<p><em>Alternatively:</em> start up GeoServer with <em>only</em> the environment variables it needs, and no secrets.</p>
</li>
<li><p><strong>Don't</strong> pass secrets as command-line flags – these are shown in <code>ps</code> to all users!</p>
</li>
</ul>
<h3 id="alternatives-for-displaying-geoservers-environment-variables">Alternatives for displaying GeoServer's environment variables</h3>
<ul>
<li><p><strong>On Linux,</strong> you can get all environment variables <a href="https://unix.stackexchange.com/a/70636">set at <em>start-up time</em></a> for a running process with:</p>
<pre><code class="language-sh">tr '\0' '\n' &lt; /proc/${GEOSERVER_PID}/environ
</code></pre>
</li>
<li><p><strong>On Windows,</strong> <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">SysInternals' Process Explorer</a> can show running processes' environment variables.</p>
</li>
<li><p>Current versions of <strong>macOS</strong> do not allow arbitrary access to other running processes' environment variables. Disabling these restrictions (on a macOS level) would significantly reduce the overall security of the system.</p>
</li>
</ul>
<p>[^secret-files]: <a href="https://docs.docker.com/compose/use-secrets/">Docker Compose: How to use secrets in Docker Compose</a>, <a href="https://docs.docker.com/engine/swarm/secrets/#build-support-for-docker-secrets-into-your-images">Docker Swarm: Build support for Docker Secrets into your images</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34696">https://nvd.nist.gov/vuln/detail/CVE-2024-34696</a></li>
<li><a href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/advisories/GHSA-j59v-vgcr-hxvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T19:20:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-app]  GeoServer's Server Status shows sensitive environmental variables and Java properties]]></title>
        <id>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</id>
        <link href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf"/>
        <updated>2024-07-01T19:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>GeoServer's Server Status page and REST API (at <code>/geoserver/rest/about/status</code>) lists <em>all</em> environment variables and Java properties to <em>any</em> GeoServer user with administrative rights as part of those modules' status message.</p>
<p>These variables/properties can also contain sensitive information, such as database passwords or API keys/tokens, for example:</p>
<ul>
<li><p>Data stores defined with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>) which need a password or access key.</p>
</li>
<li><p>GeoServer's official Docker image <a href="https://github.com/geoserver/docker/blob/master/README.md#how-to-enable-a-postgresql-jndi-resource">uses environment variables to configure PostgreSQL JNDI resources, including credentials</a> (<code>POSTGRES_HOST</code>, <code>POSTGRES_USERNAME</code>, <code>POSTGRES_PASSWORD</code>)</p>
</li>
</ul>
<p>Additionally, many community-developed GeoServer container images <code>export</code> other credentials from their start-up scripts as environment variables to the GeoServer (<code>java</code>) process, such as:</p>
<ul>
<li><p>GeoServer <code>admin</code> and master (<code>root</code>) passwords</p>
</li>
<li><p>Tomcat management application password</p>
</li>
<li><p>HTTPS/TLS certificate key store password</p>
</li>
<li><p>AWS S3 bucket access keys</p>
</li>
</ul>
<p>The precise scope of the issue depends on which container image is used and how it is configured.</p>
<blockquote>
<p>[!NOTE]
Some container images allow passing secrets as files (eg: <code>POSTGRES_PASSWORD_FILE</code>), or randomly generating passwords on start-up. While this is promoted as best-practice[^secret-files], if its start-up script <a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-export"><code>export</code>s these as environment variables</a> to GeoServer, they are <strong>also</strong> impacted by this issue.</p>
</blockquote>
<h3 id="impact">Impact</h3>
<p>The “about status” API endpoint (at <code>/geoserver/rest/about/status</code>) which powers the Server Status page is only available to administrators.</p>
<p>Depending on the operating environment, administrators might have legitimate access to credentials in other ways, but this issue defeats more sophisticated controls (like break-glass access to secrets or role accounts).</p>
<p>By default, GeoServer only allows same-origin authenticated API access. This limits the scope for a third-party attacker to use an administrator’s credentials to gain access to credentials (ie: requires XSS).</p>
<p>We were unable to determine any other conditions under which the GeoServer REST API may be available more broadly.</p>
<h3 id="fixes--remediation">Fixes / remediation</h3>
<p>GeoServer 2.24.4 and 2.25.1 hide <strong>all</strong> environment variables and Java system properties <em>by default</em>, with <em>no further action required by GeoServer administrators</em>.</p>
<p><a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">There are new settings to allow an administrator to display these again</a> – effectively <strong>reverting</strong> this security fix. We strongly recommend administrators leave these settings as-is, and use alternative mechanisms to access environment variables (instructions below).</p>
<p>If you're using GeoServer in a container runtime (such as Docker or Kubernetes) or from some other distributor's packages, you'll need to wait for the maintainer to update the version of GeoServer used in their image.</p>
<blockquote>
<p>[!WARNING]
If you run GeoServer with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>), a GeoServer administrator could use this to access any environment variable or Java property by including it in some field which is rendered by the UI (such as the description field), <strong>even with this fix</strong>.</p>
</blockquote>
<h3 id="advice-for-container--docker-image-maintainers">Advice for container / Docker image maintainers</h3>
<p>Update container images to use GeoServer 2.24.4 or 2.25.1 to get the bug fix.</p>
<p>Please leave environment variables and Java system properties hidden by default. If you provide the option to re-enable it, <a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">communicate the impact and risks</a> so that users can make an informed choice.</p>
<p>Container images should practice "defence in depth", to limit the impact when it is configured to show environment variables and/or properties:</p>
<ul>
<li><p>Pass secrets to the container as either:</p>
<ul>
<li>files which are only readable by the GeoServer process/UID, or,</li>
<li>references (identifiers) to a secret stored in a cloud provider's metadata or secret management service</li>
</ul>
</li>
<li><p>Pass secrets to GeoServer by generating configuration files as part of your start-up scripts, rather than passing variables/properties or relying on <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a>.</p>
</li>
<li><p>Ensure any configuration files with secrets are not readable by other users.</p>
</li>
<li><p>Clear all environment variables which contain secrets <em>before</em> starting GeoServer.</p>
<p><em>Alternatively:</em> start up GeoServer with <em>only</em> the environment variables it needs, and no secrets.</p>
</li>
<li><p><strong>Don't</strong> pass secrets as command-line flags – these are shown in <code>ps</code> to all users!</p>
</li>
</ul>
<h3 id="alternatives-for-displaying-geoservers-environment-variables">Alternatives for displaying GeoServer's environment variables</h3>
<ul>
<li><p><strong>On Linux,</strong> you can get all environment variables <a href="https://unix.stackexchange.com/a/70636">set at <em>start-up time</em></a> for a running process with:</p>
<pre><code class="language-sh">tr '\0' '\n' &lt; /proc/${GEOSERVER_PID}/environ
</code></pre>
</li>
<li><p><strong>On Windows,</strong> <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">SysInternals' Process Explorer</a> can show running processes' environment variables.</p>
</li>
<li><p>Current versions of <strong>macOS</strong> do not allow arbitrary access to other running processes' environment variables. Disabling these restrictions (on a macOS level) would significantly reduce the overall security of the system.</p>
</li>
</ul>
<p>[^secret-files]: <a href="https://docs.docker.com/compose/use-secrets/">Docker Compose: How to use secrets in Docker Compose</a>, <a href="https://docs.docker.com/engine/swarm/secrets/#build-support-for-docker-secrets-into-your-images">Docker Swarm: Build support for Docker Secrets into your images</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34696">https://nvd.nist.gov/vuln/detail/CVE-2024-34696</a></li>
<li><a href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/advisories/GHSA-j59v-vgcr-hxvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T19:20:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.web:gs-web-app]  GeoServer's Server Status shows sensitive environmental variables and Java properties]]></title>
        <id>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</id>
        <link href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf"/>
        <updated>2024-07-01T19:20:59.000Z</updated>
        <content type="html"><![CDATA[<p>GeoServer's Server Status page and REST API (at <code>/geoserver/rest/about/status</code>) lists <em>all</em> environment variables and Java properties to <em>any</em> GeoServer user with administrative rights as part of those modules' status message.</p>
<p>These variables/properties can also contain sensitive information, such as database passwords or API keys/tokens, for example:</p>
<ul>
<li><p>Data stores defined with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>) which need a password or access key.</p>
</li>
<li><p>GeoServer's official Docker image <a href="https://github.com/geoserver/docker/blob/master/README.md#how-to-enable-a-postgresql-jndi-resource">uses environment variables to configure PostgreSQL JNDI resources, including credentials</a> (<code>POSTGRES_HOST</code>, <code>POSTGRES_USERNAME</code>, <code>POSTGRES_PASSWORD</code>)</p>
</li>
</ul>
<p>Additionally, many community-developed GeoServer container images <code>export</code> other credentials from their start-up scripts as environment variables to the GeoServer (<code>java</code>) process, such as:</p>
<ul>
<li><p>GeoServer <code>admin</code> and master (<code>root</code>) passwords</p>
</li>
<li><p>Tomcat management application password</p>
</li>
<li><p>HTTPS/TLS certificate key store password</p>
</li>
<li><p>AWS S3 bucket access keys</p>
</li>
</ul>
<p>The precise scope of the issue depends on which container image is used and how it is configured.</p>
<blockquote>
<p>[!NOTE]
Some container images allow passing secrets as files (eg: <code>POSTGRES_PASSWORD_FILE</code>), or randomly generating passwords on start-up. While this is promoted as best-practice[^secret-files], if its start-up script <a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#index-export"><code>export</code>s these as environment variables</a> to GeoServer, they are <strong>also</strong> impacted by this issue.</p>
</blockquote>
<h3 id="impact">Impact</h3>
<p>The “about status” API endpoint (at <code>/geoserver/rest/about/status</code>) which powers the Server Status page is only available to administrators.</p>
<p>Depending on the operating environment, administrators might have legitimate access to credentials in other ways, but this issue defeats more sophisticated controls (like break-glass access to secrets or role accounts).</p>
<p>By default, GeoServer only allows same-origin authenticated API access. This limits the scope for a third-party attacker to use an administrator’s credentials to gain access to credentials (ie: requires XSS).</p>
<p>We were unable to determine any other conditions under which the GeoServer REST API may be available more broadly.</p>
<h3 id="fixes--remediation">Fixes / remediation</h3>
<p>GeoServer 2.24.4 and 2.25.1 hide <strong>all</strong> environment variables and Java system properties <em>by default</em>, with <em>no further action required by GeoServer administrators</em>.</p>
<p><a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">There are new settings to allow an administrator to display these again</a> – effectively <strong>reverting</strong> this security fix. We strongly recommend administrators leave these settings as-is, and use alternative mechanisms to access environment variables (instructions below).</p>
<p>If you're using GeoServer in a container runtime (such as Docker or Kubernetes) or from some other distributor's packages, you'll need to wait for the maintainer to update the version of GeoServer used in their image.</p>
<blockquote>
<p>[!WARNING]
If you run GeoServer with <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a> (<code>-DALLOW_ENV_PARAMETRIZATION=true</code>), a GeoServer administrator could use this to access any environment variable or Java property by including it in some field which is rendered by the UI (such as the description field), <strong>even with this fix</strong>.</p>
</blockquote>
<h3 id="advice-for-container--docker-image-maintainers">Advice for container / Docker image maintainers</h3>
<p>Update container images to use GeoServer 2.24.4 or 2.25.1 to get the bug fix.</p>
<p>Please leave environment variables and Java system properties hidden by default. If you provide the option to re-enable it, <a href="https://docs.geoserver.org/latest/en/user/production/config.html#showing-environment-variables-and-java-system-properties">communicate the impact and risks</a> so that users can make an informed choice.</p>
<p>Container images should practice "defence in depth", to limit the impact when it is configured to show environment variables and/or properties:</p>
<ul>
<li><p>Pass secrets to the container as either:</p>
<ul>
<li>files which are only readable by the GeoServer process/UID, or,</li>
<li>references (identifiers) to a secret stored in a cloud provider's metadata or secret management service</li>
</ul>
</li>
<li><p>Pass secrets to GeoServer by generating configuration files as part of your start-up scripts, rather than passing variables/properties or relying on <a href="https://docs.geoserver.org/latest/en/user/datadirectory/configtemplate.html">parameterized catalog settings</a>.</p>
</li>
<li><p>Ensure any configuration files with secrets are not readable by other users.</p>
</li>
<li><p>Clear all environment variables which contain secrets <em>before</em> starting GeoServer.</p>
<p><em>Alternatively:</em> start up GeoServer with <em>only</em> the environment variables it needs, and no secrets.</p>
</li>
<li><p><strong>Don't</strong> pass secrets as command-line flags – these are shown in <code>ps</code> to all users!</p>
</li>
</ul>
<h3 id="alternatives-for-displaying-geoservers-environment-variables">Alternatives for displaying GeoServer's environment variables</h3>
<ul>
<li><p><strong>On Linux,</strong> you can get all environment variables <a href="https://unix.stackexchange.com/a/70636">set at <em>start-up time</em></a> for a running process with:</p>
<pre><code class="language-sh">tr '\0' '\n' &lt; /proc/${GEOSERVER_PID}/environ
</code></pre>
</li>
<li><p><strong>On Windows,</strong> <a href="https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer">SysInternals' Process Explorer</a> can show running processes' environment variables.</p>
</li>
<li><p>Current versions of <strong>macOS</strong> do not allow arbitrary access to other running processes' environment variables. Disabling these restrictions (on a macOS level) would significantly reduce the overall security of the system.</p>
</li>
</ul>
<p>[^secret-files]: <a href="https://docs.docker.com/compose/use-secrets/">Docker Compose: How to use secrets in Docker Compose</a>, <a href="https://docs.docker.com/engine/swarm/secrets/#build-support-for-docker-secrets-into-your-images">Docker Swarm: Build support for Docker Secrets into your images</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/geoserver/geoserver/security/advisories/GHSA-j59v-vgcr-hxvf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34696">https://nvd.nist.gov/vuln/detail/CVE-2024-34696</a></li>
<li><a href="https://github.com/advisories/GHSA-j59v-vgcr-hxvf">https://github.com/advisories/GHSA-j59v-vgcr-hxvf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j59v-vgcr-hxvf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-01T19:20:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.streampipes:streampipes-resource-management] Apache StreamPipes: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) in Recovery Token Generation]]></title>
        <id>https://github.com/advisories/GHSA-cf3q-vg8w-mw84</id>
        <link href="https://github.com/advisories/GHSA-cf3q-vg8w-mw84"/>
        <updated>2024-07-01T16:16:25.000Z</updated>
        <content type="html"><![CDATA[<p>Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG) vulnerability in Apache StreamPipes&nbsp;user self-registration and password recovery mechanism.
This allows an attacker to guess the recovery token in a reasonable time and thereby to take over the attacked user's account.
This issue affects Apache StreamPipes: from 0.69.0 through 0.93.0.</p>
<p>Users are recommended to upgrade to version 0.95.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29868">https://nvd.nist.gov/vuln/detail/CVE-2024-29868</a></li>
<li><a href="https://lists.apache.org/thread/g7t7zctvq2fysrw1x17flnc12592nhx7">https://lists.apache.org/thread/g7t7zctvq2fysrw1x17flnc12592nhx7</a></li>
<li><a href="https://github.com/apache/streampipes/commit/1d94191c49617dffbcb6f6d8fd73bcd5dd597d52">https://github.com/apache/streampipes/commit/1d94191c49617dffbcb6f6d8fd73bcd5dd597d52</a></li>
<li><a href="https://github.com/advisories/GHSA-cf3q-vg8w-mw84">https://github.com/advisories/GHSA-cf3q-vg8w-mw84</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cf3q-vg8w-mw84</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-24T12:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.projectreactor.netty:reactor-netty-core] Reactor Netty HTTP Server denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q24v-hpg3-v3jp</id>
        <link href="https://github.com/advisories/GHSA-q24v-hpg3-v3jp"/>
        <updated>2024-06-28T12:49:35.000Z</updated>
        <content type="html"><![CDATA[<p>In Reactor Netty HTTP Server, versions 1.1.x prior to 1.1.13 and versions 1.0.x prior to 1.0.39, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.</p>
<p>Specifically, an application is vulnerable if Reactor Netty HTTP Server built-in integration with Micrometer is enabled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34054">https://nvd.nist.gov/vuln/detail/CVE-2023-34054</a></li>
<li><a href="https://spring.io/security/cve-2023-34054">https://spring.io/security/cve-2023-34054</a></li>
<li><a href="https://github.com/reactor/reactor-netty/releases/tag/v1.0.39">https://github.com/reactor/reactor-netty/releases/tag/v1.0.39</a></li>
<li><a href="https://github.com/reactor/reactor-netty/releases/tag/v1.1.13">https://github.com/reactor/reactor-netty/releases/tag/v1.1.13</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/37dc8a2ef6514cd7834e75e7f3faf0b9ea044c88">https://github.com/reactor/reactor-netty/commit/37dc8a2ef6514cd7834e75e7f3faf0b9ea044c88</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/4ddbb1b9b985bb72290110ebae468a54e7f19420">https://github.com/reactor/reactor-netty/commit/4ddbb1b9b985bb72290110ebae468a54e7f19420</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/ae82154e99e6f51f4816effd135f0c3a966d6ea3">https://github.com/reactor/reactor-netty/commit/ae82154e99e6f51f4816effd135f0c3a966d6ea3</a></li>
<li><a href="https://github.com/advisories/GHSA-q24v-hpg3-v3jp">https://github.com/advisories/GHSA-q24v-hpg3-v3jp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q24v-hpg3-v3jp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-28T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.projectreactor.netty:reactor-netty-core] Reactor Netty HTTP Server denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q24v-hpg3-v3jp</id>
        <link href="https://github.com/advisories/GHSA-q24v-hpg3-v3jp"/>
        <updated>2024-06-28T12:49:35.000Z</updated>
        <content type="html"><![CDATA[<p>In Reactor Netty HTTP Server, versions 1.1.x prior to 1.1.13 and versions 1.0.x prior to 1.0.39, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.</p>
<p>Specifically, an application is vulnerable if Reactor Netty HTTP Server built-in integration with Micrometer is enabled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34054">https://nvd.nist.gov/vuln/detail/CVE-2023-34054</a></li>
<li><a href="https://spring.io/security/cve-2023-34054">https://spring.io/security/cve-2023-34054</a></li>
<li><a href="https://github.com/reactor/reactor-netty/releases/tag/v1.0.39">https://github.com/reactor/reactor-netty/releases/tag/v1.0.39</a></li>
<li><a href="https://github.com/reactor/reactor-netty/releases/tag/v1.1.13">https://github.com/reactor/reactor-netty/releases/tag/v1.1.13</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/37dc8a2ef6514cd7834e75e7f3faf0b9ea044c88">https://github.com/reactor/reactor-netty/commit/37dc8a2ef6514cd7834e75e7f3faf0b9ea044c88</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/4ddbb1b9b985bb72290110ebae468a54e7f19420">https://github.com/reactor/reactor-netty/commit/4ddbb1b9b985bb72290110ebae468a54e7f19420</a></li>
<li><a href="https://github.com/reactor/reactor-netty/commit/ae82154e99e6f51f4816effd135f0c3a966d6ea3">https://github.com/reactor/reactor-netty/commit/ae82154e99e6f51f4816effd135f0c3a966d6ea3</a></li>
<li><a href="https://github.com/advisories/GHSA-q24v-hpg3-v3jp">https://github.com/advisories/GHSA-q24v-hpg3-v3jp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q24v-hpg3-v3jp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-11-28T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hibernate:hibernate-core] SQL Injection in Hibernate ORM]]></title>
        <id>https://github.com/advisories/GHSA-8grg-q944-cch5</id>
        <link href="https://github.com/advisories/GHSA-8grg-q944-cch5"/>
        <updated>2024-06-27T18:05:49.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14900">https://nvd.nist.gov/vuln/detail/CVE-2019-14900</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1666499">https://bugzilla.redhat.com/show_bug.cgi?id=1666499</a></li>
<li><a href="https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E">https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4">https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da">https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f">https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36">https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220210-0020">https://security.netapp.com/advisory/ntap-20220210-0020</a></li>
<li><a href="https://github.com/advisories/GHSA-8grg-q944-cch5">https://github.com/advisories/GHSA-8grg-q944-cch5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8grg-q944-cch5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-10T23:05:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hibernate:hibernate-core] SQL Injection in Hibernate ORM]]></title>
        <id>https://github.com/advisories/GHSA-8grg-q944-cch5</id>
        <link href="https://github.com/advisories/GHSA-8grg-q944-cch5"/>
        <updated>2024-06-27T18:05:49.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14900">https://nvd.nist.gov/vuln/detail/CVE-2019-14900</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1666499">https://bugzilla.redhat.com/show_bug.cgi?id=1666499</a></li>
<li><a href="https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E">https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4">https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da">https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f">https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36">https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220210-0020">https://security.netapp.com/advisory/ntap-20220210-0020</a></li>
<li><a href="https://github.com/advisories/GHSA-8grg-q944-cch5">https://github.com/advisories/GHSA-8grg-q944-cch5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8grg-q944-cch5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-10T23:05:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hibernate:hibernate-core] SQL Injection in Hibernate ORM]]></title>
        <id>https://github.com/advisories/GHSA-8grg-q944-cch5</id>
        <link href="https://github.com/advisories/GHSA-8grg-q944-cch5"/>
        <updated>2024-06-27T18:05:49.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in Hibernate ORM in versions before 5.3.18, 5.4.18 and 5.5.0.Beta1. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SELECT or GROUP BY parts of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-14900">https://nvd.nist.gov/vuln/detail/CVE-2019-14900</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1666499">https://bugzilla.redhat.com/show_bug.cgi?id=1666499</a></li>
<li><a href="https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E">https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4">https://github.com/hibernate/hibernate-orm/commit/3f3c1ab50604ab9ba99e25d2016fb85f3ba9dcd4</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da">https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f">https://github.com/hibernate/hibernate-orm/commit/e0e22ea256c1906235d6a8e90b79c4ce33d0861f</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36">https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3c2550ee70cdc9c1b02b52e330c8c36</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20220210-0020">https://security.netapp.com/advisory/ntap-20220210-0020</a></li>
<li><a href="https://github.com/advisories/GHSA-8grg-q944-cch5">https://github.com/advisories/GHSA-8grg-q944-cch5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8grg-q944-cch5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-02-10T23:05:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hibernate:hibernate-core] SQL injection in hibernate-core]]></title>
        <id>https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</id>
        <link href="https://github.com/advisories/GHSA-j8jw-g6fq-mp7h"/>
        <updated>2024-06-27T16:39:59.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25638">https://nvd.nist.gov/vuln/detail/CVE-2020-25638</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1881353">https://bugzilla.redhat.com/show_bug.cgi?id=1881353</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/01/msg00000.html">https://lists.debian.org/debian-lts-announce/2021/01/msg00000.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-4908">https://www.debian.org/security/2021/dsa-4908</a></li>
<li><a href="https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E">https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf2378209c676a28b71f9b604a3b3517c448540b85367160e558ef9df@%3Ccommits.turbine.apache.org%3E">https://lists.apache.org/thread.html/rf2378209c676a28b71f9b604a3b3517c448540b85367160e558ef9df@%3Ccommits.turbine.apache.org%3E</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/36ebf7d3836e83e99f2a91777b5389e1daf1f2b7">https://github.com/hibernate/hibernate-orm/commit/36ebf7d3836e83e99f2a91777b5389e1daf1f2b7</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/59fede7acaaa1579b561407aefa582311f7ebe78">https://github.com/hibernate/hibernate-orm/commit/59fede7acaaa1579b561407aefa582311f7ebe78</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/d22bbb5c339c9df7712c3365bb1df97c91b35ec5">https://github.com/hibernate/hibernate-orm/commit/d22bbb5c339c9df7712c3365bb1df97c91b35ec5</a></li>
<li><a href="https://github.com/advisories/GHSA-j8jw-g6fq-mp7h">https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-09T22:57:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.hibernate:hibernate-core] SQL injection in hibernate-core]]></title>
        <id>https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</id>
        <link href="https://github.com/advisories/GHSA-j8jw-g6fq-mp7h"/>
        <updated>2024-06-27T16:39:59.000Z</updated>
        <content type="html"><![CDATA[<p>A flaw was found in hibernate-core in versions prior to 5.3.20.Final and in 5.4.0.Final up to and including 5.4.23.Final. A SQL injection in the implementation of the JPA Criteria API can permit unsanitized literals when a literal is used in the SQL comments of the query. This flaw could allow an attacker to access unauthorized information or possibly conduct further attacks. The highest threat from this vulnerability is to data confidentiality and integrity.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25638">https://nvd.nist.gov/vuln/detail/CVE-2020-25638</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1881353">https://bugzilla.redhat.com/show_bug.cgi?id=1881353</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/01/msg00000.html">https://lists.debian.org/debian-lts-announce/2021/01/msg00000.html</a></li>
<li><a href="https://www.debian.org/security/2021/dsa-4908">https://www.debian.org/security/2021/dsa-4908</a></li>
<li><a href="https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E">https://lists.apache.org/thread.html/r833c1276e41334fa675848a08daf0c61f39009f9f9a400d9f7006d44@%3Cdev.turbine.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rf2378209c676a28b71f9b604a3b3517c448540b85367160e558ef9df@%3Ccommits.turbine.apache.org%3E">https://lists.apache.org/thread.html/rf2378209c676a28b71f9b604a3b3517c448540b85367160e558ef9df@%3Ccommits.turbine.apache.org%3E</a></li>
<li><a href="https://www.oracle.com//security-alerts/cpujul2021.html">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/36ebf7d3836e83e99f2a91777b5389e1daf1f2b7">https://github.com/hibernate/hibernate-orm/commit/36ebf7d3836e83e99f2a91777b5389e1daf1f2b7</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/59fede7acaaa1579b561407aefa582311f7ebe78">https://github.com/hibernate/hibernate-orm/commit/59fede7acaaa1579b561407aefa582311f7ebe78</a></li>
<li><a href="https://github.com/hibernate/hibernate-orm/commit/d22bbb5c339c9df7712c3365bb1df97c91b35ec5">https://github.com/hibernate/hibernate-orm/commit/d22bbb5c339c9df7712c3365bb1df97c91b35ec5</a></li>
<li><a href="https://github.com/advisories/GHSA-j8jw-g6fq-mp7h">https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8jw-g6fq-mp7h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-09T22:57:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.boot:spring-boot-actuator] Spring Boot Actuator denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jjfh-589g-3hjx</id>
        <link href="https://github.com/advisories/GHSA-jjfh-589g-3hjx"/>
        <updated>2024-06-27T16:35:04.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Boot versions 2.7.0 - 2.7.17, 3.0.0-3.0.12 and 3.1.0-3.1.5, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.</p>
<p>Specifically, an application is vulnerable when all of the following are true:</p>
<ul>
<li>the application uses Spring MVC or Spring WebFlux</li>
<li><code>org.springframework.boot:spring-boot-actuator</code>&nbsp;is on the classpath</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34055">https://nvd.nist.gov/vuln/detail/CVE-2023-34055</a></li>
<li><a href="https://spring.io/security/cve-2023-34055">https://spring.io/security/cve-2023-34055</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60">https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231221-0010">https://security.netapp.com/advisory/ntap-20231221-0010</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862">https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862</a></li>
<li><a href="https://github.com/advisories/GHSA-jjfh-589g-3hjx">https://github.com/advisories/GHSA-jjfh-589g-3hjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjfh-589g-3hjx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.boot:spring-boot-actuator] Spring Boot Actuator denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jjfh-589g-3hjx</id>
        <link href="https://github.com/advisories/GHSA-jjfh-589g-3hjx"/>
        <updated>2024-06-27T16:35:04.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Boot versions 2.7.0 - 2.7.17, 3.0.0-3.0.12 and 3.1.0-3.1.5, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.</p>
<p>Specifically, an application is vulnerable when all of the following are true:</p>
<ul>
<li>the application uses Spring MVC or Spring WebFlux</li>
<li><code>org.springframework.boot:spring-boot-actuator</code>&nbsp;is on the classpath</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34055">https://nvd.nist.gov/vuln/detail/CVE-2023-34055</a></li>
<li><a href="https://spring.io/security/cve-2023-34055">https://spring.io/security/cve-2023-34055</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60">https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231221-0010">https://security.netapp.com/advisory/ntap-20231221-0010</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862">https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862</a></li>
<li><a href="https://github.com/advisories/GHSA-jjfh-589g-3hjx">https://github.com/advisories/GHSA-jjfh-589g-3hjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjfh-589g-3hjx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.boot:spring-boot-actuator] Spring Boot Actuator denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-jjfh-589g-3hjx</id>
        <link href="https://github.com/advisories/GHSA-jjfh-589g-3hjx"/>
        <updated>2024-06-27T16:35:04.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring Boot versions 2.7.0 - 2.7.17, 3.0.0-3.0.12 and 3.1.0-3.1.5, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.</p>
<p>Specifically, an application is vulnerable when all of the following are true:</p>
<ul>
<li>the application uses Spring MVC or Spring WebFlux</li>
<li><code>org.springframework.boot:spring-boot-actuator</code>&nbsp;is on the classpath</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34055">https://nvd.nist.gov/vuln/detail/CVE-2023-34055</a></li>
<li><a href="https://spring.io/security/cve-2023-34055">https://spring.io/security/cve-2023-34055</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60">https://github.com/spring-projects/spring-boot/commit/5490e73922b37a7f0bdde43eb318cb1038b45d60</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20231221-0010">https://security.netapp.com/advisory/ntap-20231221-0010</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862">https://security.snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-6226862</a></li>
<li><a href="https://github.com/advisories/GHSA-jjfh-589g-3hjx">https://github.com/advisories/GHSA-jjfh-589g-3hjx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjfh-589g-3hjx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-11-28T09:30:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:plain-credentials] Secret file credentials stored unencrypted in rare cases by Plain Credentials Plugin ]]></title>
        <id>https://github.com/advisories/GHSA-3cpq-rw36-cppv</id>
        <link href="https://github.com/advisories/GHSA-3cpq-rw36-cppv"/>
        <updated>2024-06-26T20:07:12.000Z</updated>
        <content type="html"><![CDATA[<p>When creating secret file credentials Plain Credentials Plugin 182.v468b_97b_9dcb_8 and earlier attempts to decrypt the content of the file to check if it constitutes a valid encrypted secret. In rare cases the file content matches the expected format of an encrypted secret, and the file content will be stored unencrypted (only Base64 encoded) on the Jenkins controller file system.</p>
<p>These credentials can be viewed by users with access to the Jenkins controller file system (global credentials) or with Item/Extended Read permission (folder-scoped credentials).</p>
<p>Plain Credentials Plugin 183.va_de8f1dd5a_2b_ no longer attempts to decrypt the content of the file when creating secret file credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39459">https://nvd.nist.gov/vuln/detail/CVE-2024-39459</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2024-06-26/#SECURITY-2495">https://www.jenkins.io/security/advisory/2024-06-26/#SECURITY-2495</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/06/26/2">http://www.openwall.com/lists/oss-security/2024/06/26/2</a></li>
<li><a href="https://github.com/jenkinsci/plain-credentials-plugin/commit/ade8f1dd5a2bc69357995fd50baac56d73f80813">https://github.com/jenkinsci/plain-credentials-plugin/commit/ade8f1dd5a2bc69357995fd50baac56d73f80813</a></li>
<li><a href="https://github.com/advisories/GHSA-3cpq-rw36-cppv">https://github.com/advisories/GHSA-3cpq-rw36-cppv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3cpq-rw36-cppv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-26T18:30:28.000Z</published>
    </entry>
</feed>