<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-07-06T21:01:33.110Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.graylog2:graylog2-server] Graylog server has partial path traversal vulnerability in Support Bundle feature]]></title>
        <id>https://github.com/advisories/GHSA-2q4p-f6gf-mqr5</id>
        <link href="https://github.com/advisories/GHSA-2q4p-f6gf-mqr5"/>
        <updated>2023-07-06T20:54:10.000Z</updated>
        <content type="html"><![CDATA[<p>A partial path traversal vulnerability exists in Graylog's <a href="https://go2docs.graylog.org/5-1/making_sense_of_your_log_data/cluster_support_bundle.htm">Support Bundle</a> feature. The vulnerability is caused by incorrect user input validation in an HTTP API resource.</p>
<p>Thanks to weiweiwei9811 for reporting this vulnerability and providing detailed information.</p>
<h3 id="impact">Impact</h3>
<p>Graylog's Support Bundle feature allows an attacker with valid Admin role credentials to download or delete files in sibling directories of the support bundle directory.</p>
<p>The default <code>data_dir</code> in operating system packages (DEB, RPM) is set to <code>/var/lib/graylog-server</code>. The data directory for the Support Bundle feature is always <code>&lt;data_dir&gt;/support-bundle</code>.</p>
<p>Due to the partial path traversal vulnerability, an attacker with valid Admin role credentials can read or delete files in directories that start with a <code>/var/lib/graylog-server/support-bundle</code> directory name.</p>
<p>The vulnerability would allow the download or deletion of files in the following example directories.</p>
<ul>
<li><code>/var/lib/graylog-server/support-bundle-test</code></li>
<li><code>/var/lib/graylog-server/support-bundlesdirectory</code></li>
</ul>
<p>For the <a href="https://hub.docker.com/r/graylog/graylog">Graylog</a> and <a href="https://hub.docker.com/r/graylog/graylog-enterprise">Graylog Enterprise</a> Docker images, the <code>data_dir</code> is set to <code>/usr/share/graylog/data</code> by default.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability is fixed in Graylog version 5.1.3 and later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Block all HTTP requests to the following HTTP API endpoints by using a reverse proxy server in front of Graylog.</p>
<ul>
<li><code>GET /api/system/debug/support/bundle/download/{filename}</code></li>
<li><code>DELETE /api/system/debug/support/bundle/{filename}</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-2q4p-f6gf-mqr5">https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-2q4p-f6gf-mqr5</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/02b8792e6f4b829f0c1d87fcbf2d58b73458b938">https://github.com/Graylog2/graylog2-server/commit/02b8792e6f4b829f0c1d87fcbf2d58b73458b938</a></li>
<li><a href="https://github.com/advisories/GHSA-2q4p-f6gf-mqr5">https://github.com/advisories/GHSA-2q4p-f6gf-mqr5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2q4p-f6gf-mqr5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-06T20:53:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graylog2:graylog2-server] Graylog vulnerable to insecure source port usage for DNS queries]]></title>
        <id>https://github.com/advisories/GHSA-g96c-x7rh-99r3</id>
        <link href="https://github.com/advisories/GHSA-g96c-x7rh-99r3"/>
        <updated>2023-07-06T20:51:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Graylog utilises only one single source port for DNS queries.</p>
<h3 id="details">Details</h3>
<p>Graylog seems to bind a single socket for outgoing DNS queries. That socket is bound to a random port number which is not changed again. This goes against recommended practice since 2008, when Dan Kaminsky discovered how easy is to carry out DNS cache poisoning attacks. In order to prevent cache poisoning with spoofed DNS responses, it is necessary to maximise the uncertainty in the choice of a source port for a DNS query.</p>
<h3 id="poc">PoC</h3>
<p>The attached figure shows the source ports distribution difference between Graylog configured to use a data adapter based on DNS queries and ISC Bind.  The source port distribution of the DNS queries sent from Graylog to a recursive DNS name server running Bind (CLIENT_QUERY) are depicted in purple, while the queries sent from the recursive DNS server to the authoritatives (RESOLVER_QUERY) are plotted in green color. As it can be observed, in contrast to ISC Bind which presents a heterogeneous usage of source port, Graylog utilises a single source port.</p>
<p><img alt="image" src="https://user-images.githubusercontent.com/67056857/242301750-6a5a8d0d-fcd2-40d1-bbd4-73baa8279ed3.png"></p>
<h3 id="impact">Impact</h3>
<p>Although unlikely in many setups, an external attacker could inject forged DNS responses into a Graylog's lookup table cache. In order to prevent this, it is at least recommendable to distribute the DNS queries through a pool of distinct sockets, each of them with a random source port and renew them periodically.</p>
<p>(Credit to Iratxe Ni침o from Fundaci칩n Sarenet and Borja Marcos from Sarenet)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-g96c-x7rh-99r3">https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-g96c-x7rh-99r3</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/466af814523cffae9fbc7e77bab7472988f03c3e">https://github.com/Graylog2/graylog2-server/commit/466af814523cffae9fbc7e77bab7472988f03c3e</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/a101f4f12180fd3dfa7d3345188a099877a3c327">https://github.com/Graylog2/graylog2-server/commit/a101f4f12180fd3dfa7d3345188a099877a3c327</a></li>
<li><a href="https://github.com/advisories/GHSA-g96c-x7rh-99r3">https://github.com/advisories/GHSA-g96c-x7rh-99r3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g96c-x7rh-99r3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T20:51:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graylog2:graylog2-server] Graylog vulnerable to insecure source port usage for DNS queries]]></title>
        <id>https://github.com/advisories/GHSA-g96c-x7rh-99r3</id>
        <link href="https://github.com/advisories/GHSA-g96c-x7rh-99r3"/>
        <updated>2023-07-06T20:51:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Graylog utilises only one single source port for DNS queries.</p>
<h3 id="details">Details</h3>
<p>Graylog seems to bind a single socket for outgoing DNS queries. That socket is bound to a random port number which is not changed again. This goes against recommended practice since 2008, when Dan Kaminsky discovered how easy is to carry out DNS cache poisoning attacks. In order to prevent cache poisoning with spoofed DNS responses, it is necessary to maximise the uncertainty in the choice of a source port for a DNS query.</p>
<h3 id="poc">PoC</h3>
<p>The attached figure shows the source ports distribution difference between Graylog configured to use a data adapter based on DNS queries and ISC Bind.  The source port distribution of the DNS queries sent from Graylog to a recursive DNS name server running Bind (CLIENT_QUERY) are depicted in purple, while the queries sent from the recursive DNS server to the authoritatives (RESOLVER_QUERY) are plotted in green color. As it can be observed, in contrast to ISC Bind which presents a heterogeneous usage of source port, Graylog utilises a single source port.</p>
<p><img alt="image" src="https://user-images.githubusercontent.com/67056857/242301750-6a5a8d0d-fcd2-40d1-bbd4-73baa8279ed3.png"></p>
<h3 id="impact">Impact</h3>
<p>Although unlikely in many setups, an external attacker could inject forged DNS responses into a Graylog's lookup table cache. In order to prevent this, it is at least recommendable to distribute the DNS queries through a pool of distinct sockets, each of them with a random source port and renew them periodically.</p>
<p>(Credit to Iratxe Ni침o from Fundaci칩n Sarenet and Borja Marcos from Sarenet)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-g96c-x7rh-99r3">https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-g96c-x7rh-99r3</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/466af814523cffae9fbc7e77bab7472988f03c3e">https://github.com/Graylog2/graylog2-server/commit/466af814523cffae9fbc7e77bab7472988f03c3e</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/a101f4f12180fd3dfa7d3345188a099877a3c327">https://github.com/Graylog2/graylog2-server/commit/a101f4f12180fd3dfa7d3345188a099877a3c327</a></li>
<li><a href="https://github.com/advisories/GHSA-g96c-x7rh-99r3">https://github.com/advisories/GHSA-g96c-x7rh-99r3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g96c-x7rh-99r3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-06T20:51:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graylog2:graylog2-server] Graylog user session is still usable after logout]]></title>
        <id>https://github.com/advisories/GHSA-3fqm-frhg-7c85</id>
        <link href="https://github.com/advisories/GHSA-3fqm-frhg-7c85"/>
        <updated>2023-07-06T20:47:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In a multi-node Graylog cluster, after a user has explicitly logged out, a user session may still be used for API requests until it has reached its original expiry time.</p>
<h3 id="details">Details</h3>
<p>Each node maintains an in-memory cache of user sessions. Upon a cache-miss, the session is loaded from the database. After that, the node operates solely on the cached session. Modifications to sessions will update the cached version as well as the session persisted in the database. However, each node maintains their isolated version of the session.</p>
<p>When the user logs out, the session is removed from the node-local cache and deleted from the database. The other nodes will however still use the cached session.</p>
<p>These nodes will only fail to accept the session id if they intent to update the session in the database. They will then notice that the session is gone. This is true for most API requests originating from user interaction with the Graylog UI because these will lead to an update of the session's "last access" timestamp.</p>
<p>If the session update is however prevented by setting the <code>X-Graylog-No-Session-Extension:true</code> header in the request, the node will consider the (cached) session valid until the session is expired according to its timeout setting.</p>
<h3 id="poc">PoC</h3>
<p>In a 2-node setup, with both nodes behind a load balancer:</p>
<ol>
<li>Log in</li>
<li>Extract the session ID from the cookie</li>
<li>Log out and close the browser</li>
<li>Perform the following API request repeatedly with curl (with <code>&lt;session-id&gt;</code> replaced with the session id from step 2 and <code>&lt;lb-host&gt;</code> replaced with the hostname of your load balancer):<pre><code>curl -I -H X-Graylog-No-Session-Extension:true https://&lt;session-id&gt;:session@&lt;lb-host&gt;/api/system/cluster/nodes
</code></pre>
</li>
<li>Notice that the request is sometimes rejected, but sometimes succeeds</li>
</ol>
<h3 id="impact">Impact</h3>
<p>No session identifiers are leaked.</p>
<p>After a user has logged out, the UI shows the login screen again, which gives the user the impression that their session is not valid anymore. However, if the session becomes compromised later, it can still be used to perform API requests against the Graylog cluster. The time frame for this is limited to the configured session lifetime, starting from the time when the user logged out.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85">https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3">https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/ff90f3e2aa4ae2e0bb613d3236e52c40aa154b20">https://github.com/Graylog2/graylog2-server/commit/ff90f3e2aa4ae2e0bb613d3236e52c40aa154b20</a></li>
<li><a href="https://github.com/advisories/GHSA-3fqm-frhg-7c85">https://github.com/advisories/GHSA-3fqm-frhg-7c85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fqm-frhg-7c85</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-06T20:47:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graylog2:graylog2-server] Graylog user session is still usable after logout]]></title>
        <id>https://github.com/advisories/GHSA-3fqm-frhg-7c85</id>
        <link href="https://github.com/advisories/GHSA-3fqm-frhg-7c85"/>
        <updated>2023-07-06T20:47:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In a multi-node Graylog cluster, after a user has explicitly logged out, a user session may still be used for API requests until it has reached its original expiry time.</p>
<h3 id="details">Details</h3>
<p>Each node maintains an in-memory cache of user sessions. Upon a cache-miss, the session is loaded from the database. After that, the node operates solely on the cached session. Modifications to sessions will update the cached version as well as the session persisted in the database. However, each node maintains their isolated version of the session.</p>
<p>When the user logs out, the session is removed from the node-local cache and deleted from the database. The other nodes will however still use the cached session.</p>
<p>These nodes will only fail to accept the session id if they intent to update the session in the database. They will then notice that the session is gone. This is true for most API requests originating from user interaction with the Graylog UI because these will lead to an update of the session's "last access" timestamp.</p>
<p>If the session update is however prevented by setting the <code>X-Graylog-No-Session-Extension:true</code> header in the request, the node will consider the (cached) session valid until the session is expired according to its timeout setting.</p>
<h3 id="poc">PoC</h3>
<p>In a 2-node setup, with both nodes behind a load balancer:</p>
<ol>
<li>Log in</li>
<li>Extract the session ID from the cookie</li>
<li>Log out and close the browser</li>
<li>Perform the following API request repeatedly with curl (with <code>&lt;session-id&gt;</code> replaced with the session id from step 2 and <code>&lt;lb-host&gt;</code> replaced with the hostname of your load balancer):<pre><code>curl -I -H X-Graylog-No-Session-Extension:true https://&lt;session-id&gt;:session@&lt;lb-host&gt;/api/system/cluster/nodes
</code></pre>
</li>
<li>Notice that the request is sometimes rejected, but sometimes succeeds</li>
</ol>
<h3 id="impact">Impact</h3>
<p>No session identifiers are leaked.</p>
<p>After a user has logged out, the UI shows the login screen again, which gives the user the impression that their session is not valid anymore. However, if the session becomes compromised later, it can still be used to perform API requests against the Graylog cluster. The time frame for this is limited to the configured session lifetime, starting from the time when the user logged out.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85">https://github.com/Graylog2/graylog2-server/security/advisories/GHSA-3fqm-frhg-7c85</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3">https://github.com/Graylog2/graylog2-server/commit/bb88f3d0b2b0351669ab32c60b595ab7242a3fe3</a></li>
<li><a href="https://github.com/Graylog2/graylog2-server/commit/ff90f3e2aa4ae2e0bb613d3236e52c40aa154b20">https://github.com/Graylog2/graylog2-server/commit/ff90f3e2aa4ae2e0bb613d3236e52c40aa154b20</a></li>
<li><a href="https://github.com/advisories/GHSA-3fqm-frhg-7c85">https://github.com/advisories/GHSA-3fqm-frhg-7c85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3fqm-frhg-7c85</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2023-07-06T20:47:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.any23:apache-any23] Apache Any23 vulnerable to excessive memory usage]]></title>
        <id>https://github.com/advisories/GHSA-2gpr-j5vj-wvh2</id>
        <link href="https://github.com/advisories/GHSA-2gpr-j5vj-wvh2"/>
        <updated>2023-07-06T20:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>Use of TikaEncodingDetector in Apache Any23 can cause excessive memory usage.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34150">https://nvd.nist.gov/vuln/detail/CVE-2023-34150</a></li>
<li><a href="https://lists.apache.org/thread/713tk23khbtbg940pb2ql8ggd4cvh6j1">https://lists.apache.org/thread/713tk23khbtbg940pb2ql8ggd4cvh6j1</a></li>
<li><a href="https://github.com/advisories/GHSA-2gpr-j5vj-wvh2">https://github.com/advisories/GHSA-2gpr-j5vj-wvh2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2gpr-j5vj-wvh2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T09:30:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-debug-jdk18on] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-debug-jdk15to18] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-debug-jdk14] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-ext-jdk18on] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-ext-jdk15to18] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-ext-jdk14] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-jdk14] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-jdk15to18] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bouncycastle:bcprov-jdk18on] Bouncy Castle For Java LDAP injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</id>
        <link href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9"/>
        <updated>2023-07-06T15:40:29.000Z</updated>
        <content type="html"><![CDATA[<p>Bouncy Castle provides the X509LDAPCertStoreSpi.java class which can be used in conjunction with the CertPath API for validating certificate paths. Pre-1.73 the implementation did not check the X.500 name of any certificate, subject, or issuer being passed in for LDAP wild cards, meaning the presence of a wild car may lead to Information Disclosure.</p>
<p>A potential attack would be to generate a self-signed certificate with a subject name that contains special characters, e.g: CN=Subject*)(objectclass=. This will be included into the filter and provides the attacker ability to specify additional attributes in the search query. This can be exploited as a blind LDAP injection: an attacker can enumerate valid attribute values using the boolean blind injection technique. The exploitation depends on the structure of the target LDAP directory, as well as what kind of errors are exposed to the user.</p>
<p>Changes to the X509LDAPCertStoreSpi.java class add the additional checking of any X.500 name used to correctly escape wild card characters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33201">https://nvd.nist.gov/vuln/detail/CVE-2023-33201</a></li>
<li><a href="https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc">https://github.com/bcgit/bc-java/commit/e8c409a8389c815ea3fda5e8b94c92fdfe583bcc</a></li>
<li><a href="https://github.com/bcgit/bc-java/wiki/CVE-2023-33201">https://github.com/bcgit/bc-java/wiki/CVE-2023-33201</a></li>
<li><a href="https://bouncycastle.org/releasenotes.html#r1rv74">https://bouncycastle.org/releasenotes.html#r1rv74</a></li>
<li><a href="https://github.com/advisories/GHSA-hr8g-6v94-x4m9">https://github.com/advisories/GHSA-hr8g-6v94-x4m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr8g-6v94-x4m9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-05T03:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.grpc:grpc-protobuf] Connection confusion in gRPC]]></title>
        <id>https://github.com/advisories/GHSA-cfgp-2977-2fmm</id>
        <link href="https://github.com/advisories/GHSA-cfgp-2977-2fmm"/>
        <updated>2023-07-06T18:12:50.000Z</updated>
        <content type="html"><![CDATA[<p>When gRPC HTTP2 stack raised a header size exceeded error, it skipped parsing the rest of the HPACK frame. This caused any HPACK table mutations to also be skipped, resulting in a desynchronization of HPACK tables between sender and receiver. If leveraged, say, between a proxy and a backend, this could lead to requests from the proxy being interpreted as containing headers from different proxy clients - leading to an information leak that can be used for privilege escalation or data exfiltration. We recommend upgrading beyond the commit contained in&nbsp; <a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-32731">https://nvd.nist.gov/vuln/detail/CVE-2023-32731</a></li>
<li><a href="https://github.com/grpc/grpc/pull/32309">https://github.com/grpc/grpc/pull/32309</a></li>
<li><a href="https://github.com/grpc/grpc/pull/33005">https://github.com/grpc/grpc/pull/33005</a></li>
<li><a href="https://github.com/advisories/GHSA-cfgp-2977-2fmm">https://github.com/advisories/GHSA-cfgp-2977-2fmm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cfgp-2977-2fmm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-05T19:12:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.elasticsearch:elasticsearch] Improper privilege management in elasticsearch]]></title>
        <id>https://github.com/advisories/GHSA-c77j-p484-h84m</id>
        <link href="https://github.com/advisories/GHSA-c77j-p484-h84m"/>
        <updated>2023-07-02T05:02:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Elasticsearch before 7.9.0 and 6.8.12 a field disclosure flaw was found when running a scrolling search with Field Level Security. If a user runs the same query another more privileged user recently ran, the scrolling search can leak fields that should be hidden. This could result in an attacker gaining additional permissions against a restricted index.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7019">https://nvd.nist.gov/vuln/detail/CVE-2020-7019</a></li>
<li><a href="https://discuss.elastic.co/t/elastic-stack-7-9-0-and-6-8-12-security-update/245456">https://discuss.elastic.co/t/elastic-stack-7-9-0-and-6-8-12-security-update/245456</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200827-0001/">https://security.netapp.com/advisory/ntap-20200827-0001/</a></li>
<li><a href="https://github.com/advisories/GHSA-c77j-p484-h84m">https://github.com/advisories/GHSA-c77j-p484-h84m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c77j-p484-h84m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:26:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.elasticsearch:elasticsearch] Improper privilege management in elasticsearch]]></title>
        <id>https://github.com/advisories/GHSA-c77j-p484-h84m</id>
        <link href="https://github.com/advisories/GHSA-c77j-p484-h84m"/>
        <updated>2023-07-02T05:02:56.000Z</updated>
        <content type="html"><![CDATA[<p>In Elasticsearch before 7.9.0 and 6.8.12 a field disclosure flaw was found when running a scrolling search with Field Level Security. If a user runs the same query another more privileged user recently ran, the scrolling search can leak fields that should be hidden. This could result in an attacker gaining additional permissions against a restricted index.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7019">https://nvd.nist.gov/vuln/detail/CVE-2020-7019</a></li>
<li><a href="https://discuss.elastic.co/t/elastic-stack-7-9-0-and-6-8-12-security-update/245456">https://discuss.elastic.co/t/elastic-stack-7-9-0-and-6-8-12-security-update/245456</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200827-0001/">https://security.netapp.com/advisory/ntap-20200827-0001/</a></li>
<li><a href="https://github.com/advisories/GHSA-c77j-p484-h84m">https://github.com/advisories/GHSA-c77j-p484-h84m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c77j-p484-h84m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:26:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net.opentsdb:opentsdb] Remote Code Execution for 2.4.1 and earlier]]></title>
        <id>https://github.com/advisories/GHSA-76f7-9v52-v2fw</id>
        <link href="https://github.com/advisories/GHSA-76f7-9v52-v2fw"/>
        <updated>2023-07-03T18:39:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>OpenTSDB is vulnerable to Remote Code Execution vulnerability by writing user-controlled input to Gnuplot configuration file and running Gnuplot with the generated configuration.</p>
<h3 id="patches">Patches</h3>
<p>Patched in <a href="https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9">07c4641471c6f5c2ab5aab615969e97211eb50d9</a> and further refined in <a href="https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba">https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba</a></p>
<h3 id="workarounds">Workarounds</h3>
<p>Disable Gunuplot via <code>tsd.core.enable_ui = true</code> and remove the shell files <a href="https://github.com/OpenTSDB/opentsdb/blob/master/src/mygnuplot.bat">https://github.com/OpenTSDB/opentsdb/blob/master/src/mygnuplot.bat</a> and <a href="https://github.com/OpenTSDB/opentsdb/blob/master/src/mygnuplot.sh">https://github.com/OpenTSDB/opentsdb/blob/master/src/mygnuplot.sh</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/OpenTSDB/opentsdb/security/advisories/GHSA-76f7-9v52-v2fw">https://github.com/OpenTSDB/opentsdb/security/advisories/GHSA-76f7-9v52-v2fw</a></li>
<li><a href="https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9">https://github.com/OpenTSDB/opentsdb/commit/07c4641471c6f5c2ab5aab615969e97211eb50d9</a></li>
<li><a href="https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba">https://github.com/OpenTSDB/opentsdb/commit/fa88d3e4b5369f9fb73da384fab0b23e246309ba</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36812">https://nvd.nist.gov/vuln/detail/CVE-2023-36812</a></li>
<li><a href="https://github.com/advisories/GHSA-76f7-9v52-v2fw">https://github.com/advisories/GHSA-76f7-9v52-v2fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76f7-9v52-v2fw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-30T22:58:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.platform:xwiki-platform-oldcore] Upgrading doesn't prevent exploiting vulnerable XWiki documents]]></title>
        <id>https://github.com/advisories/GHSA-8q9q-r9v2-644m</id>
        <link href="https://github.com/advisories/GHSA-8q9q-r9v2-644m"/>
        <updated>2023-06-30T20:42:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When an XWiki installation is upgraded and that upgrade contains a fix for a bug in a document, just a new version of that document is added. In some cases, it's still possible to exploit the vulnerability that was fixed in the new version. The severity of this depends on the fixed vulnerability, for the purpose of this advisory take <a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2g5c-228j-p52x">CVE-2022-36100</a> as example - it is easily exploitable with just view rights and critical. When XWiki is upgraded from a version before the fix for it (e.g., 14.3) to a version including the fix (e.g., 14.4), the vulnerability can still be reproduced by adding <code>rev=1.1</code> to the URL used in the reproduction steps so remote code execution is possible even after upgrading. Therefore, this affects the confidentiality, integrity and availability of the whole XWiki installation. This vulnerability also affects manually added script macros that contained security vulnerabilities that were later fixed by changing the script macro without deleting the versions with the security vulnerability from the history.</p>
<p>This vulnerability doesn't affect freshly installed versions of XWiki. Further, this vulnerability doesn't affect content that is only loaded from the current version of a document like the code of wiki macros or UI extensions.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability has been patched in XWiki 14.10.7 and 15.2RC1 by forcing old revisions to be executed in a restricted mode that disables all script macros.</p>
<h3 id="workarounds">Workarounds</h3>
<p>As a workaround, admins can manually delete old revisions of affected documents. A script could be used to identify all installed documents and delete the history for them. However, also manually added and later corrected code may be affected by this vulnerability so it is easy to miss documents.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://jira.xwiki.org/browse/XWIKI-20594">https://jira.xwiki.org/browse/XWIKI-20594</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/15a6f845d8206b0ae97f37aa092ca43d4f9d6e59">https://github.com/xwiki/xwiki-platform/commit/15a6f845d8206b0ae97f37aa092ca43d4f9d6e59</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2g5c-228j-p52x">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-2g5c-228j-p52x</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8q9q-r9v2-644m">https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-8q9q-r9v2-644m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-36468">https://nvd.nist.gov/vuln/detail/CVE-2023-36468</a></li>
<li><a href="https://github.com/xwiki/xwiki-platform/commit/15a6f845d8206b0ae97f37aa092ca43d4f9d6e59">https://github.com/xwiki/xwiki-platform/commit/15a6f845d8206b0ae97f37aa092ca43d4f9d6e59</a></li>
<li><a href="https://jira.xwiki.org/browse/XWIKI-20594">https://jira.xwiki.org/browse/XWIKI-20594</a></li>
<li><a href="https://github.com/advisories/GHSA-8q9q-r9v2-644m">https://github.com/advisories/GHSA-8q9q-r9v2-644m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8q9q-r9v2-644m</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-30T20:42:07.000Z</published>
    </entry>
</feed>