<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-10-25T03:01:27.782Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.openrefine:main] OpenRefine vulnerable to zip slip in project import]]></title>
        <id>https://github.com/advisories/GHSA-m88m-crr9-jvqq</id>
        <link href="https://github.com/advisories/GHSA-m88m-crr9-jvqq"/>
        <updated>2023-10-24T22:35:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A carefully crafted malicious OpenRefine project tar file can be used to trigger arbitrary code execution if a user can be convinced to import it.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability exists in all versions of OpenRefine up to and including 3.7.3. Users should update to OpenRefine 3.7.4 as soon as possible.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Only import OpenRefine projects from trusted sources.</p>
<h3 id="references">References</h3>
<p>A similar <a href="https://github.com/OpenRefine/OpenRefine/issues/1840">issue</a> existed in the Create Project feature (<a href="https://nvd.nist.gov/vuln/detail/CVE-2018-19859">CVE-2018-19859</a>), which was fixed by PR <a href="https://github.com/OpenRefine/OpenRefine/pull/1901">#1901</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-m88m-crr9-jvqq">https://github.com/OpenRefine/OpenRefine/security/advisories/GHSA-m88m-crr9-jvqq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37476">https://nvd.nist.gov/vuln/detail/CVE-2023-37476</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/commit/e9c1e65d58b47aec8cd676bd5c07d97b002f205e">https://github.com/OpenRefine/OpenRefine/commit/e9c1e65d58b47aec8cd676bd5c07d97b002f205e</a></li>
<li><a href="https://github.com/OpenRefine/OpenRefine/releases/tag/3.7.4">https://github.com/OpenRefine/OpenRefine/releases/tag/3.7.4</a></li>
<li><a href="https://www.sonarsource.com/blog/openrefine-zip-slip/">https://www.sonarsource.com/blog/openrefine-zip-slip/</a></li>
<li><a href="https://github.com/advisories/GHSA-m88m-crr9-jvqq">https://github.com/advisories/GHSA-m88m-crr9-jvqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m88m-crr9-jvqq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-18T18:47:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.extension:gs-wps-core] WPS Server Side Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5pr3-m5hm-9956</id>
        <link href="https://github.com/advisories/GHSA-5pr3-m5hm-9956"/>
        <updated>2023-10-24T19:21:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The OGC Web Processing Service (WPS) specification is designed to process information from any server using GET and POST requests.</p>
<p>This presents the opportunity for Server Side Request Forgery.</p>
<h2 id="details">Details</h2>
<p>This vulnerability requires:</p>
<ul>
<li>The WPS extension to be installed</li>
<li>The WPS security setting "Disable complex inputs" to be unselected</li>
<li>Security URL checks to be disabled</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability presents the opportunity for Server Side Request Forgery.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The ability to reference an external URL location is defined by the WPS standard Execute operation. This operations is defined by an Industry and International standard and cannot be redefined by the GeoServer application in isolation.</p>
<p>To disable complex remote inputs on GeoServer 2.20.5 and GeoServer 2.21.0:</p>
<ol>
<li>Navigate to <strong>Security &gt; WPS Security</strong> page</li>
<li>Locate <strong>Complex Inputs</strong> heading</li>
<li>Select the check box for <strong>Disable loading complex inputs from remote references</strong></li>
</ol>
<h3 id="resolution">Resolution</h3>
<p>To allow processing of complex inputs safely in GeoServer 2.22.5 and GeoServer 2.23.2:</p>
<ol>
<li>Navigate to <strong>Security &gt; URL Checks</strong></li>
<li>Enable <strong>URL Checks</strong> are enabled setting</li>
<li>Check the user manual for <a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html#example-regex-patterns">examples</a> of how to trust specific locations for your external services.</li>
</ol>
<p>Processing of complex inputs safely is on by default in GeoServer 2.24.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/stable/en/user/services/wps/security.html#complex-inputs">Complex Inputs</a></li>
<li><a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html">URL Checks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-5pr3-m5hm-9956">https://github.com/geoserver/geoserver/security/advisories/GHSA-5pr3-m5hm-9956</a></li>
<li><a href="https://github.com/advisories/GHSA-5pr3-m5hm-9956">https://github.com/advisories/GHSA-5pr3-m5hm-9956</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pr3-m5hm-9956</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-24T19:21:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver.extension:gs-wps-core] WPS Server Side Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-5pr3-m5hm-9956</id>
        <link href="https://github.com/advisories/GHSA-5pr3-m5hm-9956"/>
        <updated>2023-10-24T19:21:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The OGC Web Processing Service (WPS) specification is designed to process information from any server using GET and POST requests.</p>
<p>This presents the opportunity for Server Side Request Forgery.</p>
<h2 id="details">Details</h2>
<p>This vulnerability requires:</p>
<ul>
<li>The WPS extension to be installed</li>
<li>The WPS security setting "Disable complex inputs" to be unselected</li>
<li>Security URL checks to be disabled</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability presents the opportunity for Server Side Request Forgery.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The ability to reference an external URL location is defined by the WPS standard Execute operation. This operations is defined by an Industry and International standard and cannot be redefined by the GeoServer application in isolation.</p>
<p>To disable complex remote inputs on GeoServer 2.20.5 and GeoServer 2.21.0:</p>
<ol>
<li>Navigate to <strong>Security &gt; WPS Security</strong> page</li>
<li>Locate <strong>Complex Inputs</strong> heading</li>
<li>Select the check box for <strong>Disable loading complex inputs from remote references</strong></li>
</ol>
<h3 id="resolution">Resolution</h3>
<p>To allow processing of complex inputs safely in GeoServer 2.22.5 and GeoServer 2.23.2:</p>
<ol>
<li>Navigate to <strong>Security &gt; URL Checks</strong></li>
<li>Enable <strong>URL Checks</strong> are enabled setting</li>
<li>Check the user manual for <a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html#example-regex-patterns">examples</a> of how to trust specific locations for your external services.</li>
</ol>
<p>Processing of complex inputs safely is on by default in GeoServer 2.24.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/stable/en/user/services/wps/security.html#complex-inputs">Complex Inputs</a></li>
<li><a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html">URL Checks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-5pr3-m5hm-9956">https://github.com/geoserver/geoserver/security/advisories/GHSA-5pr3-m5hm-9956</a></li>
<li><a href="https://github.com/advisories/GHSA-5pr3-m5hm-9956">https://github.com/advisories/GHSA-5pr3-m5hm-9956</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pr3-m5hm-9956</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-24T19:21:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-wms] Unsecured WMS dynamic styling sld=<url> parameter affords blind unauthenticated SSRF]]></title>
        <id>https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</id>
        <link href="https://github.com/advisories/GHSA-cqpc-x2c6-2gmf"/>
        <updated>2023-10-24T19:20:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The WMS specification defines an <code>sld=&lt;url&gt;</code> parameter for GetMap, GetLegendGraphic and GetFeatureInfo operations for user supplied "dynamic styling".  Enabling the use of dynamic styles, without also configuring URL checks, provides the opportunity for Service Side Request Forgery.</p>
<p>It is possible to use this for "Blind SSRF" on the WMS endpoint to steal NetNTLMv2 hashes via file requests to malicious servers.</p>
<h3 id="details">Details</h3>
<p>This vulnerability requires:</p>
<ul>
<li>WMS Settings dynamic styling being enabled</li>
<li>Security URL checks to be disabled, or to be enabled and allowing <code>file:\\*</code> access</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability can be used to steal user NetNTLMv2 hashes which could be relayed or cracked externally to gain further access.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The ability to reference an external URL location is defined by the WMS standard GetMap, GetFeatureInfo and GetLegendGraphic operations. These operations are defined by an Industry and International standard and cannot be redefined by the GeoServer application in isolation.</p>
<p>To disable dynamic styling on GeoServer 2.10.3 and GeoServer 2.11.1:</p>
<ol>
<li>Navigate to <strong>Services &gt; WMS Settings</strong> page</li>
<li>Locate <strong>Dynamic styling</strong> heading</li>
<li>Select the <strong>Disable usage of SLD and SLD_BODY parameters in GET requests and user styles in POST</strong> checkbox.</li>
</ol>
<h3 id="resolution">Resolution</h3>
<p>To allow dynamic styling safely on GeoServer 2.22.5 and GeoServer 2.23.2:</p>
<ol>
<li>Navigate to <strong>Security &gt; URL Checks</strong></li>
<li>Enable <strong>URL Checks are enabled</strong> setting</li>
<li>Check the user manual for <a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html#example-regex-patterns">examples</a> of how to trust specific locations:
<code>^https://styles\.server\.net/cartography/.*$</code></li>
<li>Enable dynamic styling on the <strong>Services &gt; WMS Settings</strong> page, deselect the <strong>Disable usage of SLD and SLD_BODY parameters in GET requests and user styles in POST</strong> checkbox.</li>
</ol>
<p>Use of dynamic styling safely is on by default in GeoServer 2.24.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/latest/en/user/services/wms/webadmin.html#disabling-usage-of-dynamic-styling-in-getmap-getfeatureinfo-and-getlegendgraphic-requests">Disabling usage of dynamic styling in GetMap, GetFeatureInfo and GetLegendGraphic requests</a></li>
<li><a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html">URL Checks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-cqpc-x2c6-2gmf">https://github.com/geoserver/geoserver/security/advisories/GHSA-cqpc-x2c6-2gmf</a></li>
<li><a href="https://github.com/advisories/GHSA-cqpc-x2c6-2gmf">https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-24T19:20:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.geoserver:gs-wms] Unsecured WMS dynamic styling sld=<url> parameter affords blind unauthenticated SSRF]]></title>
        <id>https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</id>
        <link href="https://github.com/advisories/GHSA-cqpc-x2c6-2gmf"/>
        <updated>2023-10-24T19:20:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The WMS specification defines an <code>sld=&lt;url&gt;</code> parameter for GetMap, GetLegendGraphic and GetFeatureInfo operations for user supplied "dynamic styling".  Enabling the use of dynamic styles, without also configuring URL checks, provides the opportunity for Service Side Request Forgery.</p>
<p>It is possible to use this for "Blind SSRF" on the WMS endpoint to steal NetNTLMv2 hashes via file requests to malicious servers.</p>
<h3 id="details">Details</h3>
<p>This vulnerability requires:</p>
<ul>
<li>WMS Settings dynamic styling being enabled</li>
<li>Security URL checks to be disabled, or to be enabled and allowing <code>file:\\*</code> access</li>
</ul>
<h3 id="impact">Impact</h3>
<p>This vulnerability can be used to steal user NetNTLMv2 hashes which could be relayed or cracked externally to gain further access.</p>
<h3 id="mitigation">Mitigation</h3>
<p>The ability to reference an external URL location is defined by the WMS standard GetMap, GetFeatureInfo and GetLegendGraphic operations. These operations are defined by an Industry and International standard and cannot be redefined by the GeoServer application in isolation.</p>
<p>To disable dynamic styling on GeoServer 2.10.3 and GeoServer 2.11.1:</p>
<ol>
<li>Navigate to <strong>Services &gt; WMS Settings</strong> page</li>
<li>Locate <strong>Dynamic styling</strong> heading</li>
<li>Select the <strong>Disable usage of SLD and SLD_BODY parameters in GET requests and user styles in POST</strong> checkbox.</li>
</ol>
<h3 id="resolution">Resolution</h3>
<p>To allow dynamic styling safely on GeoServer 2.22.5 and GeoServer 2.23.2:</p>
<ol>
<li>Navigate to <strong>Security &gt; URL Checks</strong></li>
<li>Enable <strong>URL Checks are enabled</strong> setting</li>
<li>Check the user manual for <a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html#example-regex-patterns">examples</a> of how to trust specific locations:
<code>^https://styles\.server\.net/cartography/.*$</code></li>
<li>Enable dynamic styling on the <strong>Services &gt; WMS Settings</strong> page, deselect the <strong>Disable usage of SLD and SLD_BODY parameters in GET requests and user styles in POST</strong> checkbox.</li>
</ol>
<p>Use of dynamic styling safely is on by default in GeoServer 2.24.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://docs.geoserver.org/latest/en/user/services/wms/webadmin.html#disabling-usage-of-dynamic-styling-in-getmap-getfeatureinfo-and-getlegendgraphic-requests">Disabling usage of dynamic styling in GetMap, GetFeatureInfo and GetLegendGraphic requests</a></li>
<li><a href="https://docs.geoserver.org/latest/en/user/security/urlchecks.html">URL Checks</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/geoserver/geoserver/security/advisories/GHSA-cqpc-x2c6-2gmf">https://github.com/geoserver/geoserver/security/advisories/GHSA-cqpc-x2c6-2gmf</a></li>
<li><a href="https://github.com/advisories/GHSA-cqpc-x2c6-2gmf">https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cqpc-x2c6-2gmf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-10-24T19:20:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opencastproject:base] Opencast RCE Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qwfv-5jwj-582h</id>
        <link href="https://github.com/advisories/GHSA-qwfv-5jwj-582h"/>
        <updated>2023-10-24T13:17:30.000Z</updated>
        <content type="html"><![CDATA[<p>Opencast 2.3.2 and older versions are vulnerable to script injections through media and metadata in the player and media module resulting in arbitrary code execution, fixed in 2.3.3 and 3.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000217">https://nvd.nist.gov/vuln/detail/CVE-2017-1000217</a></li>
<li><a href="https://groups.google.com/a/opencast.org/forum/#!topic/security-notices/sCpt0pIPEFg">https://groups.google.com/a/opencast.org/forum/#!topic/security-notices/sCpt0pIPEFg</a></li>
<li><a href="https://github.com/opencast/opencast/commit/2d42e42f3cfcff3a775a2538f735fca8542ce1fc">https://github.com/opencast/opencast/commit/2d42e42f3cfcff3a775a2538f735fca8542ce1fc</a></li>
<li><a href="https://github.com/opencast/opencast/commit/fba2f35df24ce2aeaff627200065cbade9b3a0cd">https://github.com/opencast/opencast/commit/fba2f35df24ce2aeaff627200065cbade9b3a0cd</a></li>
<li><a href="https://github.com/advisories/GHSA-qwfv-5jwj-582h">https://github.com/advisories/GHSA-qwfv-5jwj-582h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qwfv-5jwj-582h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T01:06:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.scala-sbt:io_3] sbt vulnerable to arbitrary file write via archive extraction (Zip Slip)]]></title>
        <id>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</id>
        <link href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf"/>
        <updated>2023-10-24T01:51:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Given specially crafted zip or JAR file, <code>IO.unzip</code> allows writing of arbitrary file. The follow is an example of a malicious entry:</p>
<pre><code>+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys
</code></pre>
<p>This would have a potential to overwrite <code>/root/.ssh/authorized_keys</code>. Within sbt's main code, <code>IO.unzip</code> is used in <code>pullRemoteCache</code> task and <code>Resolvers.remote</code>; however many projects use <code>IO.unzip(...)</code> directly to implement custom tasks - <a href="https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1">https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1</a></p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in <a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a>
sbt 1.9.7 is available with the fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A workaround might be use some other library to unzip.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680">https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46122">https://nvd.nist.gov/vuln/detail/CVE-2023-46122</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
<li><a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a></li>
<li><a href="https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a">https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a</a></li>
<li><a href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/advisories/GHSA-h9mw-grgx-2fhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-24T01:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.scala-sbt:io_2.13] sbt vulnerable to arbitrary file write via archive extraction (Zip Slip)]]></title>
        <id>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</id>
        <link href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf"/>
        <updated>2023-10-24T01:51:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Given specially crafted zip or JAR file, <code>IO.unzip</code> allows writing of arbitrary file. The follow is an example of a malicious entry:</p>
<pre><code>+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys
</code></pre>
<p>This would have a potential to overwrite <code>/root/.ssh/authorized_keys</code>. Within sbt's main code, <code>IO.unzip</code> is used in <code>pullRemoteCache</code> task and <code>Resolvers.remote</code>; however many projects use <code>IO.unzip(...)</code> directly to implement custom tasks - <a href="https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1">https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1</a></p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in <a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a>
sbt 1.9.7 is available with the fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A workaround might be use some other library to unzip.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680">https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46122">https://nvd.nist.gov/vuln/detail/CVE-2023-46122</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
<li><a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a></li>
<li><a href="https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a">https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a</a></li>
<li><a href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/advisories/GHSA-h9mw-grgx-2fhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-24T01:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.scala-sbt:io_2.12] sbt vulnerable to arbitrary file write via archive extraction (Zip Slip)]]></title>
        <id>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</id>
        <link href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf"/>
        <updated>2023-10-24T01:51:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Given specially crafted zip or JAR file, <code>IO.unzip</code> allows writing of arbitrary file. The follow is an example of a malicious entry:</p>
<pre><code>+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys
</code></pre>
<p>This would have a potential to overwrite <code>/root/.ssh/authorized_keys</code>. Within sbt's main code, <code>IO.unzip</code> is used in <code>pullRemoteCache</code> task and <code>Resolvers.remote</code>; however many projects use <code>IO.unzip(...)</code> directly to implement custom tasks - <a href="https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1">https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1</a></p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in <a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a>
sbt 1.9.7 is available with the fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A workaround might be use some other library to unzip.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680">https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46122">https://nvd.nist.gov/vuln/detail/CVE-2023-46122</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
<li><a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a></li>
<li><a href="https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a">https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a</a></li>
<li><a href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/advisories/GHSA-h9mw-grgx-2fhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-24T01:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.scala-sbt:sbt] sbt vulnerable to arbitrary file write via archive extraction (Zip Slip)]]></title>
        <id>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</id>
        <link href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf"/>
        <updated>2023-10-24T01:51:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Given specially crafted zip or JAR file, <code>IO.unzip</code> allows writing of arbitrary file. The follow is an example of a malicious entry:</p>
<pre><code>+2018-04-15 22:04:42 ..... 20 20 ../../../../../../root/.ssh/authorized_keys
</code></pre>
<p>This would have a potential to overwrite <code>/root/.ssh/authorized_keys</code>. Within sbt's main code, <code>IO.unzip</code> is used in <code>pullRemoteCache</code> task and <code>Resolvers.remote</code>; however many projects use <code>IO.unzip(...)</code> directly to implement custom tasks - <a href="https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1">https://github.com/search?q=IO.unzip+language%3AScala&amp;type=code&amp;l=Scala&amp;p=1</a></p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in <a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a>
sbt 1.9.7 is available with the fix.</p>
<h3 id="workarounds">Workarounds</h3>
<p>A workaround might be use some other library to unzip.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/snyk/zip-slip-vulnerability">https://github.com/snyk/zip-slip-vulnerability</a></li>
<li><a href="https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680">https://security.snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/sbt/sbt/security/advisories/GHSA-h9mw-grgx-2fhf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46122">https://nvd.nist.gov/vuln/detail/CVE-2023-46122</a></li>
<li><a href="https://github.com/sbt/io/issues/358">https://github.com/sbt/io/issues/358</a></li>
<li><a href="https://github.com/sbt/io/pull/360">https://github.com/sbt/io/pull/360</a></li>
<li><a href="https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a">https://github.com/sbt/io/commit/124538348db0713c80793cb57b915f97ec13188a</a></li>
<li><a href="https://github.com/advisories/GHSA-h9mw-grgx-2fhf">https://github.com/advisories/GHSA-h9mw-grgx-2fhf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h9mw-grgx-2fhf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-24T01:51:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.rabbitmq:amqp-client] RabbitMQ Java client's Lack of Message Size Limitation leads to Remote DoS Attack]]></title>
        <id>https://github.com/advisories/GHSA-mm8h-8587-p46h</id>
        <link href="https://github.com/advisories/GHSA-mm8h-8587-p46h"/>
        <updated>2023-10-24T01:49:10.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>maxBodyLebgth</code> was not used when receiving Message objects.  Attackers could just send a very large Message causing a memory overflow and triggering an OOM Error.</p>
<h3 id="poc">PoC</h3>
<h4 id="rbbitmq">RbbitMQ</h4>
<ul>
<li>Use RabbitMQ 3.11.16 as MQ and specify Message Body size 512M (here it only needs to be larger than the Consumer memory)</li>
<li>Start RabbitMQ</li>
</ul>
<h4 id="producer">Producer</h4>
<ul>
<li>Build a String of length 256M and send it to Consumer</li>
</ul>
<pre><code>package org.springframework.amqp.helloworld; 

import org.springframework.amqp.core.AmqpTemplate; 
import org.springframework.context.ApplicationContext; 
import org.springframework.context.annotation.AnnotationConfigApplicationContext; 

public class Producer {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
        AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class); 
        String s = "A";
        for(int i=0;i&lt;28;++i){
            s = s + s;
            System.out.println(i);
        }
        amqpTemplate.convertAndSend(s);
        System.out.println("Send Finish");
    }
 }
</code></pre>
<h4 id="consumer">Consumer</h4>
<ul>
<li>First set the heap memory size to 128M</li>
<li>Read the message sent by the Producer from the MQ and print the length</li>
</ul>
<pre><code>package org.springframework.amqp.helloworld;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Message;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class Consumer {
    
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
        AmqpTemplate amqpTemplate = context.getBean(AmqpTemplate.class);
        Object o = amqpTemplate.receiveAndConvert();
        if(o != null){
            String s = o.toString();
            System.out.println("Received Length : " + s.length());
        }else{
            System.out.println("null");
        }
    }
}
</code></pre>
<h4 id="results">Results</h4>
<ul>
<li>Run the Producer first, then the Consumer</li>
<li>Consumer throws OOM Exception</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Users of RabbitMQ may suffer from  DoS attacks from RabbitMQ Java client which will ultimately exhaust the memory of the consumer.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/rabbitmq/rabbitmq-java-client/security/advisories/GHSA-mm8h-8587-p46h">https://github.com/rabbitmq/rabbitmq-java-client/security/advisories/GHSA-mm8h-8587-p46h</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-java-client/issues/1062">https://github.com/rabbitmq/rabbitmq-java-client/issues/1062</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8">https://github.com/rabbitmq/rabbitmq-java-client/commit/714aae602dcae6cb4b53cadf009323ebac313cc8</a></li>
<li><a href="https://github.com/rabbitmq/rabbitmq-java-client/releases/tag/v5.18.0">https://github.com/rabbitmq/rabbitmq-java-client/releases/tag/v5.18.0</a></li>
<li><a href="https://github.com/advisories/GHSA-mm8h-8587-p46h">https://github.com/advisories/GHSA-mm8h-8587-p46h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mm8h-8587-p46h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-24T01:49:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.james:james-project] Apache James Privilege Escalation]]></title>
        <id>https://github.com/advisories/GHSA-xj7q-q94c-6wr3</id>
        <link href="https://github.com/advisories/GHSA-xj7q-q94c-6wr3"/>
        <updated>2023-10-23T17:05:54.000Z</updated>
        <content type="html"><![CDATA[<p>The JMX server embedded in Apache James, also used by the command line client is exposed to a java de-serialization issue, and thus can be used to execute arbitrary commands. As James exposes JMX socket by default only on local-host, this vulnerability can only be used for privilege escalation. Release 3.0.1 upgrades the incriminated library.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-12628">https://nvd.nist.gov/vuln/detail/CVE-2017-12628</a></li>
<li><a href="https://www.mail-archive.com/server-user@james.apache.org/msg15633.html">https://www.mail-archive.com/server-user@james.apache.org/msg15633.html</a></li>
<li><a href="https://web.archive.org/web/20210124113233/http://www.securityfocus.com/bid/101532">https://web.archive.org/web/20210124113233/http://www.securityfocus.com/bid/101532</a></li>
<li><a href="https://github.com/advisories/GHSA-xj7q-q94c-6wr3">https://github.com/advisories/GHSA-xj7q-q94c-6wr3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xj7q-q94c-6wr3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T00:25:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.santuario:xmlsec] Apache Santuario - XML Security for Java are vulnerable to private key disclosure]]></title>
        <id>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</id>
        <link href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2"/>
        <updated>2023-10-20T22:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of Apache Santuario - XML Security for Java prior to 2.2.6, 2.3.4, and 3.0.3, when using the JSR 105 API, are vulnerable to an issue where a private key may be disclosed in log files when generating an XML Signature and logging with debug level is enabled.&nbsp;Users are recommended to upgrade to version 2.2.6, 2.3.4, or 3.0.3, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44483">https://nvd.nist.gov/vuln/detail/CVE-2023-44483</a></li>
<li><a href="https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55">https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55</a></li>
<li><a href="https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2">https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/10/20/5">http://www.openwall.com/lists/oss-security/2023/10/20/5</a></li>
<li><a href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2">https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-20T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.santuario:xmlsec] Apache Santuario - XML Security for Java are vulnerable to private key disclosure]]></title>
        <id>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</id>
        <link href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2"/>
        <updated>2023-10-20T22:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of Apache Santuario - XML Security for Java prior to 2.2.6, 2.3.4, and 3.0.3, when using the JSR 105 API, are vulnerable to an issue where a private key may be disclosed in log files when generating an XML Signature and logging with debug level is enabled.&nbsp;Users are recommended to upgrade to version 2.2.6, 2.3.4, or 3.0.3, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44483">https://nvd.nist.gov/vuln/detail/CVE-2023-44483</a></li>
<li><a href="https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55">https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55</a></li>
<li><a href="https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2">https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/10/20/5">http://www.openwall.com/lists/oss-security/2023/10/20/5</a></li>
<li><a href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2">https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-20T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.santuario:xmlsec] Apache Santuario - XML Security for Java are vulnerable to private key disclosure]]></title>
        <id>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</id>
        <link href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2"/>
        <updated>2023-10-20T22:59:20.000Z</updated>
        <content type="html"><![CDATA[<p>All versions of Apache Santuario - XML Security for Java prior to 2.2.6, 2.3.4, and 3.0.3, when using the JSR 105 API, are vulnerable to an issue where a private key may be disclosed in log files when generating an XML Signature and logging with debug level is enabled.&nbsp;Users are recommended to upgrade to version 2.2.6, 2.3.4, or 3.0.3, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-44483">https://nvd.nist.gov/vuln/detail/CVE-2023-44483</a></li>
<li><a href="https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55">https://lists.apache.org/thread/vmqbp9mfxtrf0kmbnnmbn3h9j6dr9q55</a></li>
<li><a href="https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2">https://santuario.apache.org/secadv.data/CVE-2023-44483.txt.asc?version=1&amp;modificationDate=1697782758000&amp;api=v2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/10/20/5">http://www.openwall.com/lists/oss-security/2023/10/20/5</a></li>
<li><a href="https://github.com/advisories/GHSA-xfrj-6vvc-3xm2">https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfrj-6vvc-3xm2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-20T12:31:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.yamcs:yamcs] Yamcs Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-643f-hpcc-2gv8</id>
        <link href="https://github.com/advisories/GHSA-643f-hpcc-2gv8"/>
        <updated>2023-10-20T22:32:02.000Z</updated>
        <content type="html"><![CDATA[<p>Yamcs 5.8.6 allows XSS (issue 2 of 2). It comes with a Bucket as its primary storage mechanism. Buckets allow for the upload of any file. There's a way to upload an HTML file containing arbitrary JavaScript and then navigate to it. Once the user opens the file, the browser will execute the arbitrary JavaScript.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45280">https://nvd.nist.gov/vuln/detail/CVE-2023-45280</a></li>
<li><a href="https://github.com/yamcs/yamcs/compare/yamcs-5.8.6...yamcs-5.8.7">https://github.com/yamcs/yamcs/compare/yamcs-5.8.6...yamcs-5.8.7</a></li>
<li><a href="https://www.linkedin.com/pulse/yamcs-vulnerability-assessment-visionspace-technologies">https://www.linkedin.com/pulse/yamcs-vulnerability-assessment-visionspace-technologies</a></li>
<li><a href="https://github.com/advisories/GHSA-643f-hpcc-2gv8">https://github.com/advisories/GHSA-643f-hpcc-2gv8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-643f-hpcc-2gv8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-20T00:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.yamcs:yamcs] Yamcs Cross-site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4cqv-q33x-wfxw</id>
        <link href="https://github.com/advisories/GHSA-4cqv-q33x-wfxw"/>
        <updated>2023-10-20T22:31:46.000Z</updated>
        <content type="html"><![CDATA[<p>Yamcs 5.8.6 allows XSS (issue 1 of 2). It comes with a Bucket as its primary storage mechanism. Buckets allow for the upload of any file. There's a way to upload a display referencing a malicious JavaScript file to the bucket. The user can then open the uploaded display by selecting Telemetry from the menu and navigating to the display.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45279">https://nvd.nist.gov/vuln/detail/CVE-2023-45279</a></li>
<li><a href="https://github.com/yamcs/yamcs/compare/yamcs-5.8.6...yamcs-5.8.7">https://github.com/yamcs/yamcs/compare/yamcs-5.8.6...yamcs-5.8.7</a></li>
<li><a href="https://www.linkedin.com/pulse/yamcs-vulnerability-assessment-visionspace-technologies">https://www.linkedin.com/pulse/yamcs-vulnerability-assessment-visionspace-technologies</a></li>
<li><a href="https://github.com/advisories/GHSA-4cqv-q33x-wfxw">https://github.com/advisories/GHSA-4cqv-q33x-wfxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4cqv-q33x-wfxw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-10-20T00:30:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.anrisoftware.globalpom:globalpomutils] globalpom-utils has Insecure Temporary File]]></title>
        <id>https://github.com/advisories/GHSA-jjvp-wfp8-rv69</id>
        <link href="https://github.com/advisories/GHSA-jjvp-wfp8-rv69"/>
        <updated>2023-10-20T22:28:51.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability has been found in devent globalpom-utils up to 4.5.0 and classified as critical. This vulnerability affects the function <code>createTmpDir</code> of the file <code>globalpomutils-fileresources/src/main/java/com/anrisoftware/globalpom/fileresourcemanager/FileResourceManagerProvider.java</code>. The manipulation leads to insecure temporary file. The attack can be initiated remotely. Upgrading to version 4.5.1 can address this issue. The name of the patch is 77a820bac2f68e662ce261ecb050c643bd7ee560. It is recommended to upgrade the affected component. VDB-217570 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25068">https://nvd.nist.gov/vuln/detail/CVE-2018-25068</a></li>
<li><a href="https://github.com/devent/globalpom-utils/commit/77a820bac2f68e662ce261ecb050c643bd7ee560">https://github.com/devent/globalpom-utils/commit/77a820bac2f68e662ce261ecb050c643bd7ee560</a></li>
<li><a href="https://github.com/devent/globalpom-utils/releases/tag/globalpomutils-4.5.1">https://github.com/devent/globalpom-utils/releases/tag/globalpomutils-4.5.1</a></li>
<li><a href="https://vuldb.com/?ctiid.217570">https://vuldb.com/?ctiid.217570</a></li>
<li><a href="https://vuldb.com/?id.217570">https://vuldb.com/?id.217570</a></li>
<li><a href="https://github.com/advisories/GHSA-jjvp-wfp8-rv69">https://github.com/advisories/GHSA-jjvp-wfp8-rv69</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjvp-wfp8-rv69</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-06T21:30:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bonitasoft.connectors:bonita-connector-webservice] bonita-connector-webservice XML External Entity vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-wg99-5vrx-j2gg</id>
        <link href="https://github.com/advisories/GHSA-wg99-5vrx-j2gg"/>
        <updated>2023-10-20T22:28:37.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability, which was classified as problematic, was found in bonitasoft bonita-connector-webservice up to 1.3.0. This affects the function <code>TransformerConfigurationException</code> of the file <code>src/main/java/org/bonitasoft/connectors/ws/SecureWSConnector.java</code>. The manipulation leads to xml external entity reference. Upgrading to version 1.3.1 can address this issue. The name of the patch is a12ad691c05af19e9061d7949b6b828ce48815d5. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217443.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36640">https://nvd.nist.gov/vuln/detail/CVE-2020-36640</a></li>
<li><a href="https://github.com/bonitasoft/bonita-connector-webservice/pull/17">https://github.com/bonitasoft/bonita-connector-webservice/pull/17</a></li>
<li><a href="https://github.com/bonitasoft/bonita-connector-webservice/commit/a12ad691c05af19e9061d7949b6b828ce48815d5">https://github.com/bonitasoft/bonita-connector-webservice/commit/a12ad691c05af19e9061d7949b6b828ce48815d5</a></li>
<li><a href="https://github.com/bonitasoft/bonita-connector-webservice/releases/tag/1.3.1">https://github.com/bonitasoft/bonita-connector-webservice/releases/tag/1.3.1</a></li>
<li><a href="https://vuldb.com/?ctiid.217443">https://vuldb.com/?ctiid.217443</a></li>
<li><a href="https://vuldb.com/?id.217443">https://vuldb.com/?id.217443</a></li>
<li><a href="https://github.com/advisories/GHSA-wg99-5vrx-j2gg">https://github.com/advisories/GHSA-wg99-5vrx-j2gg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wg99-5vrx-j2gg</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-05T12:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fr.turri:aXMLRPC] aXMLRPC XML External Entity vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g4r8-28fp-f255</id>
        <link href="https://github.com/advisories/GHSA-g4r8-28fp-f255"/>
        <updated>2023-10-20T22:28:26.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability classified as problematic was found in gturri aXMLRPC up to 1.12.0. This vulnerability affects the function <code>ResponseParser</code> of the file <code>src/main/java/de/timroes/axmlrpc/ResponseParser.java</code>. The manipulation leads to xml external entity reference. Upgrading to version 1.12.1 is able to address this issue. The name of the patch is ad6615b3ec41353e614f6ea5fdd5b046442a832b. It is recommended to upgrade the affected component. VDB-217450 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36641">https://nvd.nist.gov/vuln/detail/CVE-2020-36641</a></li>
<li><a href="https://github.com/gturri/aXMLRPC/commit/ad6615b3ec41353e614f6ea5fdd5b046442a832b">https://github.com/gturri/aXMLRPC/commit/ad6615b3ec41353e614f6ea5fdd5b046442a832b</a></li>
<li><a href="https://github.com/gturri/aXMLRPC/releases/tag/aXMLRPC-1.12.1">https://github.com/gturri/aXMLRPC/releases/tag/aXMLRPC-1.12.1</a></li>
<li><a href="https://vuldb.com/?ctiid.217450">https://vuldb.com/?ctiid.217450</a></li>
<li><a href="https://vuldb.com/?id.217450">https://vuldb.com/?id.217450</a></li>
<li><a href="https://github.com/advisories/GHSA-g4r8-28fp-f255">https://github.com/advisories/GHSA-g4r8-28fp-f255</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4r8-28fp-f255</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-05T12:30:27.000Z</published>
    </entry>
</feed>