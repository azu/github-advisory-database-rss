<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2022-06-09T00:21:52.388Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[com.sun.faces:jsf-api] Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF)]]></title>
        <id>https://github.com/advisories/GHSA-vv6j-5x58-q2c3</id>
        <link href="https://github.com/advisories/GHSA-vv6j-5x58-q2c3"/>
        <updated>2022-06-08T22:39:00.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF) 1.2 before 1.2_08 allows remote attackers to inject arbitrary web script or HTML via unknown vectors.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2008-1285">https://nvd.nist.gov/vuln/detail/CVE-2008-1285</a></li>
<li><a href="https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=437082">https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=437082</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/41081">https://exchange.xforce.ibmcloud.com/vulnerabilities/41081</a></li>
<li><a href="http://rhn.redhat.com/errata/RHSA-2008-0828.html">http://rhn.redhat.com/errata/RHSA-2008-0828.html</a></li>
<li><a href="https://github.com/advisories/GHSA-vv6j-5x58-q2c3">https://github.com/advisories/GHSA-vv6j-5x58-q2c3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv6j-5x58-q2c3</uri>
        </author>
        <published>2022-05-01T23:38:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.mortbay.jetty:jetty] Improper Authentication in Mortbay Jetty]]></title>
        <id>https://github.com/advisories/GHSA-fvh3-4v5r-cvvc</id>
        <link href="https://github.com/advisories/GHSA-fvh3-4v5r-cvvc"/>
        <updated>2022-06-08T22:33:15.000Z</updated>
        <content type="html"><![CDATA[<p>Mortbay Jetty before 6.1.6rc1 does not properly handle "certain quote sequences" in HTML cookie parameters, which allows remote attackers to hijack browser sessions via unspecified vectors.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-5614">https://nvd.nist.gov/vuln/detail/CVE-2007-5614</a></li>
<li><a href="https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html</a></li>
<li><a href="https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html</a></li>
<li><a href="http://www.kb.cert.org/vuls/id/438616">http://www.kb.cert.org/vuls/id/438616</a></li>
<li><a href="https://www.eclipse.org/jetty/about.php">https://www.eclipse.org/jetty/about.php</a></li>
<li><a href="https://github.com/advisories/GHSA-fvh3-4v5r-cvvc">https://github.com/advisories/GHSA-fvh3-4v5r-cvvc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fvh3-4v5r-cvvc</uri>
        </author>
        <published>2022-05-01T18:35:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.xuxueli:xxl-job] Cross-Site Request Forgery in XXL-Job]]></title>
        <id>https://github.com/advisories/GHSA-v3c9-w6g2-hjg3</id>
        <link href="https://github.com/advisories/GHSA-v3c9-w6g2-hjg3"/>
        <updated>2022-06-08T22:27:23.000Z</updated>
        <content type="html"><![CDATA[<p>A Cross-Site Request Forgery (CSRF) in XXL-Job v2.3.0 allows attackers to arbitrarily create administrator accounts via the component /gaia-job-admin/user/add.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29002">https://nvd.nist.gov/vuln/detail/CVE-2022-29002</a></li>
<li><a href="https://github.com/xuxueli/xxl-job/issues/2821">https://github.com/xuxueli/xxl-job/issues/2821</a></li>
<li><a href="https://github.com/advisories/GHSA-v3c9-w6g2-hjg3">https://github.com/advisories/GHSA-v3c9-w6g2-hjg3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3c9-w6g2-hjg3</uri>
        </author>
        <published>2022-05-24T00:00:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.webjars.npm:dicer] Crash in HeaderParser in dicer]]></title>
        <id>https://github.com/advisories/GHSA-wm7h-9275-46v2</id>
        <link href="https://github.com/advisories/GHSA-wm7h-9275-46v2"/>
        <updated>2022-06-08T18:17:38.000Z</updated>
        <content type="html"><![CDATA[<p>This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. A complete denial of service can be achived by sending the malicious form in a loop.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24434">https://nvd.nist.gov/vuln/detail/CVE-2022-24434</a></li>
<li><a href="https://github.com/mscdex/busboy/issues/250">https://github.com/mscdex/busboy/issues/250</a></li>
<li><a href="https://github.com/mscdex/dicer/pull/22">https://github.com/mscdex/dicer/pull/22</a></li>
<li><a href="https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac">https://github.com/mscdex/dicer/pull/22/commits/b7fca2e93e8e9d4439d8acc5c02f5e54a0112dac</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JS-DICER-2311764">https://snyk.io/vuln/SNYK-JS-DICER-2311764</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2838865">https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-2838865</a></li>
<li><a href="https://github.com/advisories/GHSA-wm7h-9275-46v2">https://github.com/advisories/GHSA-wm7h-9275-46v2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wm7h-9275-46v2</uri>
        </author>
        <published>2022-05-21T00:00:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.mortbay.jetty:jetty] Mortbay Jetty vulnerable to Cross-site scripting]]></title>
        <id>https://github.com/advisories/GHSA-8h77-9vh5-hw5g</id>
        <link href="https://github.com/advisories/GHSA-8h77-9vh5-hw5g"/>
        <updated>2022-06-07T23:53:04.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in Dump Servlet in Mortbay Jetty before 6.1.6rc1 allows remote attackers to inject arbitrary web script or HTML via unspecified parameters and cookies.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-5613">https://nvd.nist.gov/vuln/detail/CVE-2007-5613</a></li>
<li><a href="https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00227.html</a></li>
<li><a href="https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html">https://www.redhat.com/archives/fedora-package-announce/2008-July/msg00250.html</a></li>
<li><a href="http://lists.opensuse.org/opensuse-security-announce/2009-02/msg00002.html">http://lists.opensuse.org/opensuse-security-announce/2009-02/msg00002.html</a></li>
<li><a href="http://www.kb.cert.org/vuls/id/237888">http://www.kb.cert.org/vuls/id/237888</a></li>
<li><a href="https://github.com/advisories/GHSA-8h77-9vh5-hw5g">https://github.com/advisories/GHSA-8h77-9vh5-hw5g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8h77-9vh5-hw5g</uri>
        </author>
        <published>2022-05-01T18:35:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation]]></title>
        <id>https://github.com/advisories/GHSA-h7mf-qrm9-2848</id>
        <link href="https://github.com/advisories/GHSA-h7mf-qrm9-2848"/>
        <updated>2022-06-07T23:11:47.000Z</updated>
        <content type="html"><![CDATA[<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a "%{" sequence and ending with a "}" character. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-4556">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>
<li><a href="http://struts.apache.org/2.x/docs/s2-001.html">http://struts.apache.org/2.x/docs/s2-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h7mf-qrm9-2848">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7mf-qrm9-2848</uri>
        </author>
        <published>2022-05-01T18:24:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.opensymphony:xwork] OpenSymphony XWork vulnerable to improper input validation]]></title>
        <id>https://github.com/advisories/GHSA-h7mf-qrm9-2848</id>
        <link href="https://github.com/advisories/GHSA-h7mf-qrm9-2848"/>
        <updated>2022-06-07T23:11:47.000Z</updated>
        <content type="html"><![CDATA[<p>XWork is an command-pattern framework that is used to power WebWork as well as other applications. Struts support in OpenSymphony XWork before 1.2.3, and 2.x before 2.0.4, as used in WebWork and Apache Struts, recursively evaluates all input as an Object-Graph Navigation Language (OGNL) expression when altSyntax is enabled, which allows remote attackers to cause a denial of service (infinite loop) or execute arbitrary code via form input beginning with a "%{" sequence and ending with a "}" character. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2007-4556">https://nvd.nist.gov/vuln/detail/CVE-2007-4556</a></li>
<li><a href="http://struts.apache.org/2.x/docs/s2-001.html">http://struts.apache.org/2.x/docs/s2-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-h7mf-qrm9-2848">https://github.com/advisories/GHSA-h7mf-qrm9-2848</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7mf-qrm9-2848</uri>
        </author>
        <published>2022-05-01T18:24:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[struts:struts] Improper Input Validation in Apache Struts]]></title>
        <id>https://github.com/advisories/GHSA-7qwv-cwgj-c8rj</id>
        <link href="https://github.com/advisories/GHSA-7qwv-cwgj-c8rj"/>
        <updated>2022-06-07T23:11:17.000Z</updated>
        <content type="html"><![CDATA[<p>ActionForm in Apache Software Foundation (ASF) Struts before 1.2.9 with BeanUtils 1.7 allows remote attackers to cause a denial of service via a multipart/form-data encoded form with a parameter name that references the public getMultipartRequestHandler method, which provides further access to elements in the CommonsMultipartRequestHandler implementation and BeanUtils.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2006-1547">https://nvd.nist.gov/vuln/detail/CVE-2006-1547</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/25613">https://exchange.xforce.ibmcloud.com/vulnerabilities/25613</a></li>
<li><a href="https://github.com/advisories/GHSA-7qwv-cwgj-c8rj">https://github.com/advisories/GHSA-7qwv-cwgj-c8rj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7qwv-cwgj-c8rj</uri>
        </author>
        <published>2022-05-01T06:50:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[struts:struts] Apache Struts vulnerable to Improper Input Validation]]></title>
        <id>https://github.com/advisories/GHSA-vf8g-mpmw-qv87</id>
        <link href="https://github.com/advisories/GHSA-vf8g-mpmw-qv87"/>
        <updated>2022-06-07T23:11:07.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to bypass validation via a request with a 'org.apache.struts.taglib.html.Constants.CANCEL' parameter, which causes the action to be canceled but would not be detected from applications that do not use the isCancelled check.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2006-1546">https://nvd.nist.gov/vuln/detail/CVE-2006-1546</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/25612">https://exchange.xforce.ibmcloud.com/vulnerabilities/25612</a></li>
<li><a href="http://mail-archives.apache.org/mod_mbox/struts-dev/200601.mbox/%3cdr169r$623$2@sea.gmane.org%3e">http://mail-archives.apache.org/mod_mbox/struts-dev/200601.mbox/%3cdr169r$623$2@sea.gmane.org%3e</a></li>
<li><a href="http://mail-archives.apache.org/mod_mbox/struts-user/200601.mbox/%3c20060121221800.15814.qmail@web32607.mail.mud.yahoo.com%3e">http://mail-archives.apache.org/mod_mbox/struts-user/200601.mbox/%3c20060121221800.15814.qmail@web32607.mail.mud.yahoo.com%3e</a></li>
<li><a href="https://github.com/advisories/GHSA-vf8g-mpmw-qv87">https://github.com/advisories/GHSA-vf8g-mpmw-qv87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vf8g-mpmw-qv87</uri>
        </author>
        <published>2022-05-01T06:50:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[struts:struts] Cross-site scripting in Apache Struts]]></title>
        <id>https://github.com/advisories/GHSA-p3vw-fvwx-qcv5</id>
        <link href="https://github.com/advisories/GHSA-p3vw-fvwx-qcv5"/>
        <updated>2022-06-07T23:11:03.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in (1) LookupDispatchAction and possibly (2) DispatchAction and (3) ActionDispatcher in Apache Software Foundation (ASF) Struts before 1.2.9 allows remote attackers to inject arbitrary web script or HTML via the parameter name, which is not filtered in the resulting error message.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2006-1548">https://nvd.nist.gov/vuln/detail/CVE-2006-1548</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/25614">https://exchange.xforce.ibmcloud.com/vulnerabilities/25614</a></li>
<li><a href="https://github.com/advisories/GHSA-p3vw-fvwx-qcv5">https://github.com/advisories/GHSA-p3vw-fvwx-qcv5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3vw-fvwx-qcv5</uri>
        </author>
        <published>2022-05-01T06:50:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.elasticsearch:elasticsearch] Improper Check for Unusual or Exceptional Conditions in Elasticsearch]]></title>
        <id>https://github.com/advisories/GHSA-wh6w-69xc-5rq5</id>
        <link href="https://github.com/advisories/GHSA-wh6w-69xc-5rq5"/>
        <updated>2022-06-07T21:15:20.000Z</updated>
        <content type="html"><![CDATA[<p>A Denial of Service flaw was discovered in Elasticsearch 8.0.0 through 8.2.0. Using this vulnerability, an unauthenticated attacker could forcibly shut down an Elasticsearch node with a specifically formatted network request. Version 8.2.1 contains a patch.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-23712">https://nvd.nist.gov/vuln/detail/CVE-2022-23712</a></li>
<li><a href="https://discuss.elastic.co/t/elastic-stack-7-17-4-and-8-2-1-security-update/305530">https://discuss.elastic.co/t/elastic-stack-7-17-4-and-8-2-1-security-update/305530</a></li>
<li><a href="https://www.elastic.co/community/security/">https://www.elastic.co/community/security/</a></li>
<li><a href="https://github.com/advisories/GHSA-wh6w-69xc-5rq5">https://github.com/advisories/GHSA-wh6w-69xc-5rq5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh6w-69xc-5rq5</uri>
        </author>
        <published>2022-06-07T00:00:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jodd:jodd-http] Server-Side Request Forgery in Jodd HTTP]]></title>
        <id>https://github.com/advisories/GHSA-pp3c-cf6j-m3ff</id>
        <link href="https://github.com/advisories/GHSA-pp3c-cf6j-m3ff"/>
        <updated>2022-06-07T21:14:25.000Z</updated>
        <content type="html"><![CDATA[<p>Jodd HTTP v6.0.9 was discovered to contain multiple CLRF injection vulnerabilities via the components jodd.http.HttpRequest#set and `jodd.http.HttpRequest#send. These vulnerabilities allow attackers to execute Server-Side Request Forgery (SSRF) via a crafted TCP payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29631">https://nvd.nist.gov/vuln/detail/CVE-2022-29631</a></li>
<li><a href="https://github.com/oblac/jodd-http/issues/9">https://github.com/oblac/jodd-http/issues/9</a></li>
<li><a href="https://github.com/oblac/jodd/issues/787">https://github.com/oblac/jodd/issues/787</a></li>
<li><a href="https://github.com/oblac/jodd-http/commit/e50f573c8f6a39212ade68c6eb1256b2889fa8a6">https://github.com/oblac/jodd-http/commit/e50f573c8f6a39212ade68c6eb1256b2889fa8a6</a></li>
<li><a href="https://github.com/advisories/GHSA-pp3c-cf6j-m3ff">https://github.com/advisories/GHSA-pp3c-cf6j-m3ff</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pp3c-cf6j-m3ff</uri>
        </author>
        <published>2022-06-07T00:00:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net.mingsoft:ms-mcms] Code injection in MCMS]]></title>
        <id>https://github.com/advisories/GHSA-6xj9-hpq3-w3qw</id>
        <link href="https://github.com/advisories/GHSA-6xj9-hpq3-w3qw"/>
        <updated>2022-06-03T22:30:59.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability was discovered in MCMS 5.2.7, allowing an attacker to execute arbitrary code through a crafted ZIP file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-30506">https://nvd.nist.gov/vuln/detail/CVE-2022-30506</a></li>
<li><a href="https://gitee.com/mingSoft/MCMS/issues/I56AID">https://gitee.com/mingSoft/MCMS/issues/I56AID</a></li>
<li><a href="https://github.com/advisories/GHSA-6xj9-hpq3-w3qw">https://github.com/advisories/GHSA-6xj9-hpq3-w3qw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6xj9-hpq3-w3qw</uri>
        </author>
        <published>2022-06-03T00:01:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jflyfox:jflyfox_jfinal] Cross site scripting in Jfinal]]></title>
        <id>https://github.com/advisories/GHSA-8rp2-j3vj-hgj4</id>
        <link href="https://github.com/advisories/GHSA-8rp2-j3vj-hgj4"/>
        <updated>2022-06-03T22:28:12.000Z</updated>
        <content type="html"><![CDATA[<p>A cross-site scripting (XSS) vulnerability in Jfinal CMS v5.1.0 allows attackers to execute arbitrary web scripts or HTML via a crafted X-Forwarded-For request.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29648">https://nvd.nist.gov/vuln/detail/CVE-2022-29648</a></li>
<li><a href="https://github.com/jflyfox/jfinal_cms/issues/34">https://github.com/jflyfox/jfinal_cms/issues/34</a></li>
<li><a href="https://github.com/advisories/GHSA-8rp2-j3vj-hgj4">https://github.com/advisories/GHSA-8rp2-j3vj-hgj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8rp2-j3vj-hgj4</uri>
        </author>
        <published>2022-06-03T00:01:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.typesafe.play:play_2.13] Dev error stack trace leaking into prod in Play Framework]]></title>
        <id>https://github.com/advisories/GHSA-p9p4-97g9-wcrh</id>
        <link href="https://github.com/advisories/GHSA-p9p4-97g9-wcrh"/>
        <updated>2022-06-03T22:19:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Play Framework, when run in dev mode, shows verbose errors for easy debugging, including an exception stack trace. Play does this by configuring its <code>DefaultHttpErrorHandler</code> to do so based on the application mode. In its Scala API Play also provides a static object <code>DefaultHttpErrorHandler</code> that is configured to always show verbose errors. This is used as a default value in some Play APIs, so it is possible to inadvertently use this version in production. It is also possible to improperly configure the <code>DefaultHttpErrorHandler</code> object instance as the injected error handler.  Both of these situations could result in verbose errors displaying to users in a production application, which could expose sensitive information from the application.</p>
<p>In particular the constructor for <code>CORSFilter</code> and <code>apply</code> method for <code>CORSActionBuilder</code> use the static object <code>DefaultHttpErrorHandler</code> as a default value.</p>
<h3 id="patches">Patches</h3>
<p>This is patched in Play Framework 2.8.16. The <code>DefaultHttpErrorHandler</code> object has been changed to use the prod-mode behavior, and <code>DevHttpErrorHandler</code> has been introduced for the dev-mode behavior.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When constructing a <code>CORSFilter</code> or <code>CORSActionBuilder</code>, ensure that a properly-configured error handler is passed. Generally this should be done by using the <code>HttpErrorHandler</code> instance provided through dependency injection or through Play's <code>BuiltInComponents</code>. Ensure that your application is not using the <code>DefaultHttpErrorHandler</code> static object in any code that may be run in production.</p>
<h3 id="references">References</h3>
<p><a href="https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler">https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler</a>
<a href="https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler">https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/playframework/playframework/">playframework/playframework</a></li>
<li>Email us at <a href="mailto:example@example.com">example email address</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh">https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31023">https://nvd.nist.gov/vuln/detail/CVE-2022-31023</a></li>
<li><a href="https://github.com/playframework/playframework/pull/11305">https://github.com/playframework/playframework/pull/11305</a></li>
<li><a href="https://github.com/playframework/playframework/releases/tag/2.8.16">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>
<li><a href="https://github.com/advisories/GHSA-p9p4-97g9-wcrh">https://github.com/advisories/GHSA-p9p4-97g9-wcrh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9p4-97g9-wcrh</uri>
        </author>
        <published>2022-06-03T22:19:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.typesafe.play:play_2.12] Dev error stack trace leaking into prod in Play Framework]]></title>
        <id>https://github.com/advisories/GHSA-p9p4-97g9-wcrh</id>
        <link href="https://github.com/advisories/GHSA-p9p4-97g9-wcrh"/>
        <updated>2022-06-03T22:19:25.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Play Framework, when run in dev mode, shows verbose errors for easy debugging, including an exception stack trace. Play does this by configuring its <code>DefaultHttpErrorHandler</code> to do so based on the application mode. In its Scala API Play also provides a static object <code>DefaultHttpErrorHandler</code> that is configured to always show verbose errors. This is used as a default value in some Play APIs, so it is possible to inadvertently use this version in production. It is also possible to improperly configure the <code>DefaultHttpErrorHandler</code> object instance as the injected error handler.  Both of these situations could result in verbose errors displaying to users in a production application, which could expose sensitive information from the application.</p>
<p>In particular the constructor for <code>CORSFilter</code> and <code>apply</code> method for <code>CORSActionBuilder</code> use the static object <code>DefaultHttpErrorHandler</code> as a default value.</p>
<h3 id="patches">Patches</h3>
<p>This is patched in Play Framework 2.8.16. The <code>DefaultHttpErrorHandler</code> object has been changed to use the prod-mode behavior, and <code>DevHttpErrorHandler</code> has been introduced for the dev-mode behavior.</p>
<h3 id="workarounds">Workarounds</h3>
<p>When constructing a <code>CORSFilter</code> or <code>CORSActionBuilder</code>, ensure that a properly-configured error handler is passed. Generally this should be done by using the <code>HttpErrorHandler</code> instance provided through dependency injection or through Play's <code>BuiltInComponents</code>. Ensure that your application is not using the <code>DefaultHttpErrorHandler</code> static object in any code that may be run in production.</p>
<h3 id="references">References</h3>
<p><a href="https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler">https://www.playframework.com/documentation/2.8.x/ScalaErrorHandling#Supplying-a-custom-error-handler</a>
<a href="https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler">https://www.playframework.com/documentation/2.8.x/JavaErrorHandling#Supplying-a-custom-error-handler</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/playframework/playframework/">playframework/playframework</a></li>
<li>Email us at <a href="mailto:example@example.com">example email address</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh">https://github.com/playframework/playframework/security/advisories/GHSA-p9p4-97g9-wcrh</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31023">https://nvd.nist.gov/vuln/detail/CVE-2022-31023</a></li>
<li><a href="https://github.com/playframework/playframework/pull/11305">https://github.com/playframework/playframework/pull/11305</a></li>
<li><a href="https://github.com/playframework/playframework/releases/tag/2.8.16">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>
<li><a href="https://github.com/advisories/GHSA-p9p4-97g9-wcrh">https://github.com/advisories/GHSA-p9p4-97g9-wcrh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9p4-97g9-wcrh</uri>
        </author>
        <published>2022-06-03T22:19:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.typesafe.play:play_2.12] Denial of service binding form from JSON in Play Framework]]></title>
        <id>https://github.com/advisories/GHSA-v8x6-59g4-5g3w</id>
        <link href="https://github.com/advisories/GHSA-v8x6-59g4-5g3w"/>
        <updated>2022-06-03T22:18:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A denial-of-service vulnerability has been discovered in Play's forms library, in both the Scala and Java APIs. This can occur when using either the <code>Form#bindFromRequest</code> method on a JSON request body or the <code>Form#bind</code> method directly on a JSON value. If the JSON data being bound to the form contains a deeply-nested JSON object or array, the form binding implementation may consume all available heap space and cause an <code>OutOfMemoryError</code>. If executing on the default dispatcher and <code>akka.jvm-exit-on-fatal-error</code> is enabled—as it is by default—then this can crash the application process.</p>
<p><code>Form.bindFromRequest</code> is vulnerable when using any body parser that produces a type of <code>AnyContent</code> or <code>JsValue</code> in Scala, or one that can produce a <code>JsonNode</code> in Java. This includes Play's default body parser.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability been patched in version 2.8.16. There is now a global limit on the depth of a JSON object that can be parsed, which can be configured by the user if necessary.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Applications that do not need to parse a request body of type <code>application/json</code> can switch from the default body parser to another body parser that supports only the specific type of body they expect; for example, the <code>formUrlEncoded</code> body parser can be used if the Play action only needs to accept <code>application/x-www-form-urlencoded</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w">https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31018">https://nvd.nist.gov/vuln/detail/CVE-2022-31018</a></li>
<li><a href="https://github.com/playframework/playframework/pull/11301">https://github.com/playframework/playframework/pull/11301</a></li>
<li><a href="https://github.com/playframework/playframework/releases/tag/2.8.16">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>
<li><a href="https://github.com/advisories/GHSA-v8x6-59g4-5g3w">https://github.com/advisories/GHSA-v8x6-59g4-5g3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8x6-59g4-5g3w</uri>
        </author>
        <published>2022-06-03T22:18:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.typesafe.play:play_2.13] Denial of service binding form from JSON in Play Framework]]></title>
        <id>https://github.com/advisories/GHSA-v8x6-59g4-5g3w</id>
        <link href="https://github.com/advisories/GHSA-v8x6-59g4-5g3w"/>
        <updated>2022-06-03T22:18:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A denial-of-service vulnerability has been discovered in Play's forms library, in both the Scala and Java APIs. This can occur when using either the <code>Form#bindFromRequest</code> method on a JSON request body or the <code>Form#bind</code> method directly on a JSON value. If the JSON data being bound to the form contains a deeply-nested JSON object or array, the form binding implementation may consume all available heap space and cause an <code>OutOfMemoryError</code>. If executing on the default dispatcher and <code>akka.jvm-exit-on-fatal-error</code> is enabled—as it is by default—then this can crash the application process.</p>
<p><code>Form.bindFromRequest</code> is vulnerable when using any body parser that produces a type of <code>AnyContent</code> or <code>JsValue</code> in Scala, or one that can produce a <code>JsonNode</code> in Java. This includes Play's default body parser.</p>
<h3 id="patches">Patches</h3>
<p>This vulnerability been patched in version 2.8.16. There is now a global limit on the depth of a JSON object that can be parsed, which can be configured by the user if necessary.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Applications that do not need to parse a request body of type <code>application/json</code> can switch from the default body parser to another body parser that supports only the specific type of body they expect; for example, the <code>formUrlEncoded</code> body parser can be used if the Play action only needs to accept <code>application/x-www-form-urlencoded</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w">https://github.com/playframework/playframework/security/advisories/GHSA-v8x6-59g4-5g3w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31018">https://nvd.nist.gov/vuln/detail/CVE-2022-31018</a></li>
<li><a href="https://github.com/playframework/playframework/pull/11301">https://github.com/playframework/playframework/pull/11301</a></li>
<li><a href="https://github.com/playframework/playframework/releases/tag/2.8.16">https://github.com/playframework/playframework/releases/tag/2.8.16</a></li>
<li><a href="https://github.com/advisories/GHSA-v8x6-59g4-5g3w">https://github.com/advisories/GHSA-v8x6-59g4-5g3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v8x6-59g4-5g3w</uri>
        </author>
        <published>2022-06-03T22:18:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.tika:tika] Regular expression denial of service in apache tika]]></title>
        <id>https://github.com/advisories/GHSA-qw3f-w4pf-jh5f</id>
        <link href="https://github.com/advisories/GHSA-qw3f-w4pf-jh5f"/>
        <updated>2022-06-03T22:18:17.000Z</updated>
        <content type="html"><![CDATA[<p>We failed to apply the fix for CVE-2022-30126 to the 1.x branch in the 1.28.2 release.  In Apache Tika, a regular expression in the StandardsText class, used by the StandardsExtractingContentHandler could lead to a denial of service caused by backtracking on a specially crafted file. This only affects users who are running the StandardsExtractingContentHandler, which is a non-standard handler.  This is fixed in 1.28.3.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-30973">https://nvd.nist.gov/vuln/detail/CVE-2022-30973</a></li>
<li><a href="https://lists.apache.org/thread/gqvb5t4p7tmdpl0y5bdbf72pgxj04h7p">https://lists.apache.org/thread/gqvb5t4p7tmdpl0y5bdbf72pgxj04h7p</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/05/31/2">http://www.openwall.com/lists/oss-security/2022/05/31/2</a></li>
<li><a href="https://github.com/advisories/GHSA-qw3f-w4pf-jh5f">https://github.com/advisories/GHSA-qw3f-w4pf-jh5f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qw3f-w4pf-jh5f</uri>
        </author>
        <published>2022-06-01T00:00:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.jflyfox:jflyfox_jfinal] SQL injection in jflyfox jfinal]]></title>
        <id>https://github.com/advisories/GHSA-595x-hh6c-hfv8</id>
        <link href="https://github.com/advisories/GHSA-595x-hh6c-hfv8"/>
        <updated>2022-06-03T18:37:33.000Z</updated>
        <content type="html"><![CDATA[<p>Jfinal cms 5.1.0 is vulnerable to SQL Injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-30500">https://nvd.nist.gov/vuln/detail/CVE-2022-30500</a></li>
<li><a href="https://github.com/jflyfox/jfinal_cms/issues/35">https://github.com/jflyfox/jfinal_cms/issues/35</a></li>
<li><a href="https://github.com/advisories/GHSA-595x-hh6c-hfv8">https://github.com/advisories/GHSA-595x-hh6c-hfv8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-595x-hh6c-hfv8</uri>
        </author>
        <published>2022-05-27T00:00:48.000Z</published>
    </entry>
</feed>