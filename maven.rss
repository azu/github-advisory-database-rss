<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2024-05-18T19:01:05.420Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[cn.hutool:hutool-all] Dromara hutool vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-6c25-cxcc-pmc4</id>
        <link href="https://github.com/advisories/GHSA-6c25-cxcc-pmc4"/>
        <updated>2024-05-16T17:12:25.000Z</updated>
        <content type="html"><![CDATA[<p>SQL Inection vulnerability in Dromara hutool v5.8.11 allows attacker to execute arbitrary code via the aviator template engine.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24163">https://nvd.nist.gov/vuln/detail/CVE-2023-24163</a></li>
<li><a href="https://gitee.com/dromara/hutool/issues/I6AJWJ#note_15801868">https://gitee.com/dromara/hutool/issues/I6AJWJ#note_15801868</a></li>
<li><a href="https://github.com/dromara/hutool/issues/3149">https://github.com/dromara/hutool/issues/3149</a></li>
<li><a href="https://github.com/google/osv.dev/issues/2195">https://github.com/google/osv.dev/issues/2195</a></li>
<li><a href="https://gitee.com/dromara/hutool/issues/I6AJWJ#note_20057806_link">https://gitee.com/dromara/hutool/issues/I6AJWJ#note_20057806_link</a></li>
<li><a href="https://github.com/dromara/hutool/releases/tag/5.8.21">https://github.com/dromara/hutool/releases/tag/5.8.21</a></li>
<li><a href="https://github.com/advisories/GHSA-6c25-cxcc-pmc4">https://github.com/advisories/GHSA-6c25-cxcc-pmc4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6c25-cxcc-pmc4</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-31T18:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.amqp:spring-amqp] Deserialization of Untrusted Data in Spring AMQP]]></title>
        <id>https://github.com/advisories/GHSA-945q-ch46-pchg</id>
        <link href="https://github.com/advisories/GHSA-945q-ch46-pchg"/>
        <updated>2024-05-15T23:10:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring AMQP versions 2.2.0 - 2.2.19 and 2.3.0 - 2.3.11, the Spring AMQP Message object, in its toString() method, will create a new String object from the message body, regardless of its size. This can cause an OOM Error with a large message</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22095">https://nvd.nist.gov/vuln/detail/CVE-2021-22095</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2021-22097">https://tanzu.vmware.com/security/cve-2021-22097</a></li>
<li><a href="https://github.com/spring-projects/spring-amqp/commit/bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d">https://github.com/spring-projects/spring-amqp/commit/bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d</a></li>
<li><a href="https://github.com/advisories/GHSA-945q-ch46-pchg">https://github.com/advisories/GHSA-945q-ch46-pchg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-945q-ch46-pchg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-12-01T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.amqp:spring-amqp] Deserialization of Untrusted Data in Spring AMQP]]></title>
        <id>https://github.com/advisories/GHSA-945q-ch46-pchg</id>
        <link href="https://github.com/advisories/GHSA-945q-ch46-pchg"/>
        <updated>2024-05-15T23:10:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Spring AMQP versions 2.2.0 - 2.2.19 and 2.3.0 - 2.3.11, the Spring AMQP Message object, in its toString() method, will create a new String object from the message body, regardless of its size. This can cause an OOM Error with a large message</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-22095">https://nvd.nist.gov/vuln/detail/CVE-2021-22095</a></li>
<li><a href="https://tanzu.vmware.com/security/cve-2021-22097">https://tanzu.vmware.com/security/cve-2021-22097</a></li>
<li><a href="https://github.com/spring-projects/spring-amqp/commit/bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d">https://github.com/spring-projects/spring-amqp/commit/bde294d62a8b7f3f1d5a9f50f862c6f0782efb9d</a></li>
<li><a href="https://github.com/advisories/GHSA-945q-ch46-pchg">https://github.com/advisories/GHSA-945q-ch46-pchg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-945q-ch46-pchg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-12-01T00:00:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bonitasoft.engine:bonita-server] Bonitasoft Runtime Community edition's contains an insecure direct object references vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-76v2-48w6-crxr</id>
        <link href="https://github.com/advisories/GHSA-76v2-48w6-crxr"/>
        <updated>2024-05-15T19:48:34.000Z</updated>
        <content type="html"><![CDATA[<p>In Bonitasoft runtime Community edition, the lack of dynamic permissions causes IDOR vulnerability. Dynamic permissions existed only in Subscription edition and have now been restored in Community edition, where they are not custmizable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28087">https://nvd.nist.gov/vuln/detail/CVE-2024-28087</a></li>
<li><a href="https://documentation.bonitasoft.com/bonita/latest/release-notes#_fixes_in_bonita_2024_1_2024_04_11">https://documentation.bonitasoft.com/bonita/latest/release-notes#_fixes_in_bonita_2024_1_2024_04_11</a></li>
<li><a href="https://github.com/bonitasoft/bonita-engine/commit/1b3ac00f0178bfcfe8f01811a249b1893f0b1da1">https://github.com/bonitasoft/bonita-engine/commit/1b3ac00f0178bfcfe8f01811a249b1893f0b1da1</a></li>
<li><a href="https://github.com/advisories/GHSA-76v2-48w6-crxr">https://github.com/advisories/GHSA-76v2-48w6-crxr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-76v2-48w6-crxr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T18:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.amazon.redshift:redshift-jdbc42] Amazon JDBC Driver for Redshift SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-x3wm-hffr-chwm</id>
        <link href="https://github.com/advisories/GHSA-x3wm-hffr-chwm"/>
        <updated>2024-05-15T17:10:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code which has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default, extended query mode. Note that <code>preferQueryMode</code> is not a supported parameter in Redshift JDBC driver, and is inherited code from Postgres JDBC driver. Users who do not override default settings to utilize this unsupported query mode are not affected.</p>
<h3 id="patch">Patch</h3>
<p>This issue is patched in driver version 2.1.0.28.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Do not use the connection property <code>preferQueryMode=simple</code>. (NOTE: If you do not explicitly specify a query mode, then you are using the default of extended query mode and are not affected by this issue.)</p>
<h3 id="references">References</h3>
<p>Similar to finding in Postgres JDBC: <a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></p>
<p>If you have any questions or comments about this advisory, we ask that you contact AWS Security via our <a href="https://aws.amazon.com/security/vulnerability-reporting">vulnerability reporting page</a> or directly via email to <a href="mailto:aws-security@amazon.com">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/aws/amazon-redshift-jdbc-driver/security/advisories/GHSA-x3wm-hffr-chwm">https://github.com/aws/amazon-redshift-jdbc-driver/security/advisories/GHSA-x3wm-hffr-chwm</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32888">https://nvd.nist.gov/vuln/detail/CVE-2024-32888</a></li>
<li><a href="https://github.com/aws/amazon-redshift-jdbc-driver/commit/0d354a5f26ca23f7cac4e800e3b8734220230319">https://github.com/aws/amazon-redshift-jdbc-driver/commit/0d354a5f26ca23f7cac4e800e3b8734220230319</a></li>
<li><a href="https://github.com/aws/amazon-redshift-jdbc-driver/commit/12a5e8ecfbb44c8154fc66041cca2e20ecd7b339">https://github.com/aws/amazon-redshift-jdbc-driver/commit/12a5e8ecfbb44c8154fc66041cca2e20ecd7b339</a></li>
<li><a href="https://github.com/aws/amazon-redshift-jdbc-driver/commit/bc93694201a291493778ce5369a72befeca5ba7d">https://github.com/aws/amazon-redshift-jdbc-driver/commit/bc93694201a291493778ce5369a72befeca5ba7d</a></li>
<li><a href="https://github.com/advisories/GHSA-x3wm-hffr-chwm">https://github.com/advisories/GHSA-x3wm-hffr-chwm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x3wm-hffr-chwm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-15T17:10:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.cxf:cxf-rt-frontend-jaxrs] Loop with Unreachable Exit Condition in Apache CXF]]></title>
        <id>https://github.com/advisories/GHSA-gw5j-77f9-v2g2</id>
        <link href="https://github.com/advisories/GHSA-gw5j-77f9-v2g2"/>
        <updated>2024-05-15T06:57:55.000Z</updated>
        <content type="html"><![CDATA[<p>The SamlHeaderInHandler in Apache CXF before 2.6.11, 2.7.x before 2.7.8, and 3.0.x before 3.0.1 allows remote attackers to cause a denial of service (infinite loop) via a crafted SAML token in the authorization header of a request to a JAX-RS service.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2014-3584">https://nvd.nist.gov/vuln/detail/CVE-2014-3584</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/97753">https://exchange.xforce.ibmcloud.com/vulnerabilities/97753</a></li>
<li><a href="https://lists.apache.org/thread.html/r36e44ffc1a9b365327df62cdfaabe85b9a5637de102cea07d79b2dbf@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/r36e44ffc1a9b365327df62cdfaabe85b9a5637de102cea07d79b2dbf@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rc774278135816e7afc943dc9fc78eb0764f2c84a2b96470a0187315c@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/rc774278135816e7afc943dc9fc78eb0764f2c84a2b96470a0187315c@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rd49aabd984ed540c8ff7916d4d79405f3fa311d2fdbcf9ed307839a6@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/rd49aabd984ed540c8ff7916d4d79405f3fa311d2fdbcf9ed307839a6@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rec7160382badd3ef4ad017a22f64a266c7188b9ba71394f0d321e2d4@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/rec7160382badd3ef4ad017a22f64a266c7188b9ba71394f0d321e2d4@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfb87e0bf3995e7d560afeed750fac9329ff5f1ad49da365129b7f89e@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/rfb87e0bf3995e7d560afeed750fac9329ff5f1ad49da365129b7f89e@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rff42cfa5e7d75b7c1af0e37589140a8f1999e578a75738740b244bd4@%3Ccommits.cxf.apache.org%3E">https://lists.apache.org/thread.html/rff42cfa5e7d75b7c1af0e37589140a8f1999e578a75738740b244bd4@%3Ccommits.cxf.apache.org%3E</a></li>
<li><a href="http://cxf.apache.org/security-advisories.data/CVE-2014-3584.txt.asc">http://cxf.apache.org/security-advisories.data/CVE-2014-3584.txt.asc</a></li>
<li><a href="http://seclists.org/oss-sec/2014/q4/437">http://seclists.org/oss-sec/2014/q4/437</a></li>
<li><a href="https://github.com/apache/cxf/commit/0b3894f57388b9955f2c33b2295223f2835cd7b3">https://github.com/apache/cxf/commit/0b3894f57388b9955f2c33b2295223f2835cd7b3</a></li>
<li><a href="https://github.com/apache/cxf/commit/47b127dbdb4a10d282be92f2ebbe646f8cf6b03e">https://github.com/apache/cxf/commit/47b127dbdb4a10d282be92f2ebbe646f8cf6b03e</a></li>
<li><a href="https://issues.apache.org/jira/browse/CXF-5390">https://issues.apache.org/jira/browse/CXF-5390</a></li>
<li><a href="https://github.com/advisories/GHSA-gw5j-77f9-v2g2">https://github.com/advisories/GHSA-gw5j-77f9-v2g2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gw5j-77f9-v2g2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:09:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.bedework:bw-webdav] Improper Restriction of XML External Entity Reference in bedework:bw-webdav]]></title>
        <id>https://github.com/advisories/GHSA-5p52-j8pw-j7x5</id>
        <link href="https://github.com/advisories/GHSA-5p52-j8pw-j7x5"/>
        <updated>2024-05-15T06:56:34.000Z</updated>
        <content type="html"><![CDATA[<p>Apereo Bedework bw-webdav before 4.0.3 allows XXE attacks, as demonstrated by an invite-reply document that reads a local file, related to webdav/servlet/common/MethodBase.java and webdav/servlet/common/PostRequestPars.java.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-20000">https://nvd.nist.gov/vuln/detail/CVE-2018-20000</a></li>
<li><a href="https://github.com/Bedework/bw-webdav/pull/1">https://github.com/Bedework/bw-webdav/pull/1</a></li>
<li><a href="https://github.com/Bedework/bw-webdav/compare/bw-webdav-4.0.2...bw-webdav-4.0.3">https://github.com/Bedework/bw-webdav/compare/bw-webdav-4.0.2...bw-webdav-4.0.3</a></li>
<li><a href="https://github.com/advisories/GHSA-5p52-j8pw-j7x5">https://github.com/advisories/GHSA-5p52-j8pw-j7x5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5p52-j8pw-j7x5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2018-12-19T19:24:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.poi:poi-scratchpad] Improper Input Validation and Allocation of Resources Without Limits or Throttling in poi-scratchpad]]></title>
        <id>https://github.com/advisories/GHSA-mqvp-7rrg-9jxc</id>
        <link href="https://github.com/advisories/GHSA-mqvp-7rrg-9jxc"/>
        <updated>2024-05-15T06:54:29.000Z</updated>
        <content type="html"><![CDATA[<p>A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception. This issue affects poi-scratchpad version 5.2.0 and prior versions. Users are recommended to upgrade to poi-scratchpad 5.2.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-26336">https://nvd.nist.gov/vuln/detail/CVE-2022-26336</a></li>
<li><a href="https://lists.apache.org/thread/sprg0kq986pc2271dc3v2oxb1f9qx09j">https://lists.apache.org/thread/sprg0kq986pc2271dc3v2oxb1f9qx09j</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20221028-0006">https://security.netapp.com/advisory/ntap-20221028-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-mqvp-7rrg-9jxc">https://github.com/advisories/GHSA-mqvp-7rrg-9jxc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqvp-7rrg-9jxc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-03-05T00:00:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.owasp.antisamy:antisamy] Cross-site Scripting in OWASP AntiSamy]]></title>
        <id>https://github.com/advisories/GHSA-9c8w-jrw3-q2c3</id>
        <link href="https://github.com/advisories/GHSA-9c8w-jrw3-q2c3"/>
        <updated>2024-05-15T06:53:28.000Z</updated>
        <content type="html"><![CDATA[<p>OWASP AntiSamy before 1.6.4 allows XSS via HTML attributes when using the HTML output serializer (XHTML is not affected). This was demonstrated by a javascript: URL with &amp;#00058 as the replacement for the : character.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-35043">https://nvd.nist.gov/vuln/detail/CVE-2021-35043</a></li>
<li><a href="https://github.com/nahsra/antisamy/pull/87">https://github.com/nahsra/antisamy/pull/87</a></li>
<li><a href="https://github.com/nahsra/antisamy/releases/tag/v1.6.4">https://github.com/nahsra/antisamy/releases/tag/v1.6.4</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2022.html">https://www.oracle.com/security-alerts/cpujan2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuapr2022.html">https://www.oracle.com/security-alerts/cpuapr2022.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9c8w-jrw3-q2c3">https://github.com/advisories/GHSA-9c8w-jrw3-q2c3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9c8w-jrw3-q2c3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-02T16:58:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] Improper Restriction of XML External Entity Reference]]></title>
        <id>https://github.com/advisories/GHSA-88cc-g835-76rp</id>
        <link href="https://github.com/advisories/GHSA-88cc-g835-76rp"/>
        <updated>2024-05-15T06:44:17.000Z</updated>
        <content type="html"><![CDATA[<p>PostgreSQL JDBC Driver (aka PgJDBC) before 42.2.13 allows XXE.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13692">https://nvd.nist.gov/vuln/detail/CVE-2020-13692</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65">https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65</a></li>
<li><a href="https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13">https://jdbc.postgresql.org/documentation/changelog.html#version_42.2.13</a></li>
<li><a href="https://lists.apache.org/thread.html/r00bcc6b2da972e0d6332a4ebc7807e17305d8b8e7fb2ae63d2a3cbfb@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r00bcc6b2da972e0d6332a4ebc7807e17305d8b8e7fb2ae63d2a3cbfb@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r01ae1b3d981cf2e563e9b5b0a6ea54fb3cac8e9a0512ee5269e3420e@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r01ae1b3d981cf2e563e9b5b0a6ea54fb3cac8e9a0512ee5269e3420e@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r0478a1aa9ae0dbd79d8f7b38d0d93fa933ac232e2b430b6f31a103c0@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r0478a1aa9ae0dbd79d8f7b38d0d93fa933ac232e2b430b6f31a103c0@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r1aae77706aab7d89b4fe19be468fc3c73e9cc84ff79cc2c3bd07c05a@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r1aae77706aab7d89b4fe19be468fc3c73e9cc84ff79cc2c3bd07c05a@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r4bdea189c9991aae7a929d28f575ec46e49ed3d68fa5235825f38a4f@%3Cnotifications.netbeans.apache.org%3E">https://lists.apache.org/thread.html/r4bdea189c9991aae7a929d28f575ec46e49ed3d68fa5235825f38a4f@%3Cnotifications.netbeans.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r631f967db6260d6178740a3314a35d9421facd8212e62320275fa78e@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r631f967db6260d6178740a3314a35d9421facd8212e62320275fa78e@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/r7f6d019839df17646ffd0046a99146cacf40492a6c92078f65fd32e0@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/r7f6d019839df17646ffd0046a99146cacf40492a6c92078f65fd32e0@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rb89f92aba44f524d5c270e0c44ca7aec4704691c37fe106cf73ec977@%3Cnotifications.netbeans.apache.org%3E">https://lists.apache.org/thread.html/rb89f92aba44f524d5c270e0c44ca7aec4704691c37fe106cf73ec977@%3Cnotifications.netbeans.apache.org%3E</a></li>
<li><a href="https://lists.apache.org/thread.html/rfe363bf3a46d440ad57fd05c0e313025c7218364bbdc5fd8622ea7ae@%3Ccommits.camel.apache.org%3E">https://lists.apache.org/thread.html/rfe363bf3a46d440ad57fd05c0e313025c7218364bbdc5fd8622ea7ae@%3Ccommits.camel.apache.org%3E</a></li>
<li><a href="https://www.debian.org/security/2022/dsa-5196">https://www.debian.org/security/2022/dsa-5196</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DCCAPM6FSNOC272DLSNQ6YHXS3OMHGJC">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DCCAPM6FSNOC272DLSNQ6YHXS3OMHGJC</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20200619-0005">https://security.netapp.com/advisory/ntap-20200619-0005</a></li>
<li><a href="https://github.com/advisories/GHSA-88cc-g835-76rp">https://github.com/advisories/GHSA-88cc-g835-76rp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-88cc-g835-76rp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-02-10T00:30:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-core] Security Constraint Bypass in Spring Security]]></title>
        <id>https://github.com/advisories/GHSA-v35c-49j6-q8hq</id>
        <link href="https://github.com/advisories/GHSA-v35c-49j6-q8hq"/>
        <updated>2024-05-15T06:42:08.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security does not consider URL path parameters when processing security constraints. By adding a URL path parameter with an encoded "/" to a request, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification (see below). Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. The unexpected presence of path parameters can cause a constraint to be bypassed.</p>
<p>Users of Apache Tomcat (all current versions) are not affected by this vulnerability since Tomcat follows the guidance previously provided by the Servlet Expert group and strips path parameters from the value returned by getContextPath(), getServletPath() and getPathInfo() [1].</p>
<p>Users of other Servlet containers based on Apache Tomcat may or may not be affected depending on whether or not the handling of path parameters has been modified.</p>
<p>Users of IBM WebSphere Application Server 8.5.x are known to be affected.</p>
<p>Users of other containers that implement the Servlet specification may be affected.</p>
<p>[1] <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=25015">https://issues.apache.org/bugzilla/show_bug.cgi?id=25015</a></p>
<h2 id="affected-pivotal-products-and-versions">Affected Pivotal Products and Versions</h2>
<p>Severity is high unless otherwise noted.</p>
<ul>
<li>Spring Security 3.2.0 - 3.2.9</li>
<li>Spring Security 4.0.x - 4.1.3</li>
<li>Spring Security 4.2.0</li>
<li>Older unsupported versions are also affected</li>
</ul>
<h2 id="mitigation">Mitigation</h2>
<p>Adopting one of the following mitigations will protect against this vulnerability.</p>
<ul>
<li>Use a Servlet container known not to include path parameters in the return values for getServletPath() and getPathInfo()</li>
<li>Upgrading to Spring Security 3.2.10, 4.1.4 or 4.2.1 will reject the request with a RequestRejectedException if the presence of an encoded "/" is detected. Note: If you wish to disable this feature it can be disabled by setting the DefaultHttpFirewall.allowUrlEncodedSlash = true. However, disabling this feature will mean applications are vulnerable (in containers that return path parameters in getServletPath() or getPathInfo()).</li>
</ul>
<h2 id="credit">Credit</h2>
<p>The issue was identified by Shumpei Asahara &amp; Yuji Ito from NTT DATA Corporation and responsibly reported to Pivotal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-9879">https://nvd.nist.gov/vuln/detail/CVE-2016-9879</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1832">https://access.redhat.com/errata/RHSA-2017:1832</a></li>
<li><a href="https://pivotal.io/security/cve-2016-9879">https://pivotal.io/security/cve-2016-9879</a></li>
<li><a href="http://www.securityfocus.com/bid/95142">http://www.securityfocus.com/bid/95142</a></li>
<li><a href="https://github.com/advisories/GHSA-v35c-49j6-q8hq">https://github.com/advisories/GHSA-v35c-49j6-q8hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35c-49j6-q8hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-15T20:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-core] Security Constraint Bypass in Spring Security]]></title>
        <id>https://github.com/advisories/GHSA-v35c-49j6-q8hq</id>
        <link href="https://github.com/advisories/GHSA-v35c-49j6-q8hq"/>
        <updated>2024-05-15T06:42:08.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security does not consider URL path parameters when processing security constraints. By adding a URL path parameter with an encoded "/" to a request, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification (see below). Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. The unexpected presence of path parameters can cause a constraint to be bypassed.</p>
<p>Users of Apache Tomcat (all current versions) are not affected by this vulnerability since Tomcat follows the guidance previously provided by the Servlet Expert group and strips path parameters from the value returned by getContextPath(), getServletPath() and getPathInfo() [1].</p>
<p>Users of other Servlet containers based on Apache Tomcat may or may not be affected depending on whether or not the handling of path parameters has been modified.</p>
<p>Users of IBM WebSphere Application Server 8.5.x are known to be affected.</p>
<p>Users of other containers that implement the Servlet specification may be affected.</p>
<p>[1] <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=25015">https://issues.apache.org/bugzilla/show_bug.cgi?id=25015</a></p>
<h2 id="affected-pivotal-products-and-versions">Affected Pivotal Products and Versions</h2>
<p>Severity is high unless otherwise noted.</p>
<ul>
<li>Spring Security 3.2.0 - 3.2.9</li>
<li>Spring Security 4.0.x - 4.1.3</li>
<li>Spring Security 4.2.0</li>
<li>Older unsupported versions are also affected</li>
</ul>
<h2 id="mitigation">Mitigation</h2>
<p>Adopting one of the following mitigations will protect against this vulnerability.</p>
<ul>
<li>Use a Servlet container known not to include path parameters in the return values for getServletPath() and getPathInfo()</li>
<li>Upgrading to Spring Security 3.2.10, 4.1.4 or 4.2.1 will reject the request with a RequestRejectedException if the presence of an encoded "/" is detected. Note: If you wish to disable this feature it can be disabled by setting the DefaultHttpFirewall.allowUrlEncodedSlash = true. However, disabling this feature will mean applications are vulnerable (in containers that return path parameters in getServletPath() or getPathInfo()).</li>
</ul>
<h2 id="credit">Credit</h2>
<p>The issue was identified by Shumpei Asahara &amp; Yuji Ito from NTT DATA Corporation and responsibly reported to Pivotal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-9879">https://nvd.nist.gov/vuln/detail/CVE-2016-9879</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1832">https://access.redhat.com/errata/RHSA-2017:1832</a></li>
<li><a href="https://pivotal.io/security/cve-2016-9879">https://pivotal.io/security/cve-2016-9879</a></li>
<li><a href="http://www.securityfocus.com/bid/95142">http://www.securityfocus.com/bid/95142</a></li>
<li><a href="https://github.com/advisories/GHSA-v35c-49j6-q8hq">https://github.com/advisories/GHSA-v35c-49j6-q8hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35c-49j6-q8hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-15T20:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework.security:spring-security-core] Security Constraint Bypass in Spring Security]]></title>
        <id>https://github.com/advisories/GHSA-v35c-49j6-q8hq</id>
        <link href="https://github.com/advisories/GHSA-v35c-49j6-q8hq"/>
        <updated>2024-05-15T06:42:08.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Security does not consider URL path parameters when processing security constraints. By adding a URL path parameter with an encoded "/" to a request, an attacker may be able to bypass a security constraint. The root cause of this issue is a lack of clarity regarding the handling of path parameters in the Servlet Specification (see below). Some Servlet containers include path parameters in the value returned for getPathInfo() and some do not. Spring Security uses the value returned by getPathInfo() as part of the process of mapping requests to security constraints. The unexpected presence of path parameters can cause a constraint to be bypassed.</p>
<p>Users of Apache Tomcat (all current versions) are not affected by this vulnerability since Tomcat follows the guidance previously provided by the Servlet Expert group and strips path parameters from the value returned by getContextPath(), getServletPath() and getPathInfo() [1].</p>
<p>Users of other Servlet containers based on Apache Tomcat may or may not be affected depending on whether or not the handling of path parameters has been modified.</p>
<p>Users of IBM WebSphere Application Server 8.5.x are known to be affected.</p>
<p>Users of other containers that implement the Servlet specification may be affected.</p>
<p>[1] <a href="https://issues.apache.org/bugzilla/show_bug.cgi?id=25015">https://issues.apache.org/bugzilla/show_bug.cgi?id=25015</a></p>
<h2 id="affected-pivotal-products-and-versions">Affected Pivotal Products and Versions</h2>
<p>Severity is high unless otherwise noted.</p>
<ul>
<li>Spring Security 3.2.0 - 3.2.9</li>
<li>Spring Security 4.0.x - 4.1.3</li>
<li>Spring Security 4.2.0</li>
<li>Older unsupported versions are also affected</li>
</ul>
<h2 id="mitigation">Mitigation</h2>
<p>Adopting one of the following mitigations will protect against this vulnerability.</p>
<ul>
<li>Use a Servlet container known not to include path parameters in the return values for getServletPath() and getPathInfo()</li>
<li>Upgrading to Spring Security 3.2.10, 4.1.4 or 4.2.1 will reject the request with a RequestRejectedException if the presence of an encoded "/" is detected. Note: If you wish to disable this feature it can be disabled by setting the DefaultHttpFirewall.allowUrlEncodedSlash = true. However, disabling this feature will mean applications are vulnerable (in containers that return path parameters in getServletPath() or getPathInfo()).</li>
</ul>
<h2 id="credit">Credit</h2>
<p>The issue was identified by Shumpei Asahara &amp; Yuji Ito from NTT DATA Corporation and responsibly reported to Pivotal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-9879">https://nvd.nist.gov/vuln/detail/CVE-2016-9879</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:1832">https://access.redhat.com/errata/RHSA-2017:1832</a></li>
<li><a href="https://pivotal.io/security/cve-2016-9879">https://pivotal.io/security/cve-2016-9879</a></li>
<li><a href="http://www.securityfocus.com/bid/95142">http://www.securityfocus.com/bid/95142</a></li>
<li><a href="https://github.com/advisories/GHSA-v35c-49j6-q8hq">https://github.com/advisories/GHSA-v35c-49j6-q8hq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35c-49j6-q8hq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-09-15T20:30:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.linecorp.armeria:armeria] Low severity vulnerability that affects com.linecorp.armeria:armeria]]></title>
        <id>https://github.com/advisories/GHSA-24r8-fm9r-cpj2</id>
        <link href="https://github.com/advisories/GHSA-24r8-fm9r-cpj2"/>
        <updated>2024-05-15T06:34:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="multiple-timing-attack-vulnerabilities-leading-to-the-recovery-of-secrets-based-on-the-use-of-non-constant-time-compare-function">Multiple timing attack vulnerabilities leading to the recovery of secrets based on the use of non-constant time compare function</h2>
<h3 id="impact">Impact</h3>
<p>String comparison method in multiple authentication validation in Armeria were known to be vulnerable to timing attacks. This vulnerability is caused by the insecure implementation of <code>equals</code> method from <code>java.lang.String</code>. While this attack is not practically possible, an attacker still has a potential to attack if the victim's server validates user by using <code>equals</code> method.</p>
<p>We would like to thank @chrsow for pointing out the issue.</p>
<h2 id="potentially-vulnerable-codes">Potentially vulnerable codes</h2>
<p><a href="https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java#L54">https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/OAuth2Token.java#L54</a>
<a href="https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/BasicToken.java#L64">https://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/server/auth/BasicToken.java#L64</a></p>
<h3 id="patches">Patches</h3>
<p>There are two options to patch this issue.</p>
<ol>
<li><p>Remove <code>equals</code> method; it has been exclusively used for test cases and was never used in any OSS projects that are using Armeria. (But it is worth noting that there are possibilities of closed projects authenticating users by utilizing <code>equals</code> method)</p>
</li>
<li><p>Use <code>MessageDigest.isEqual</code> to compare the credential instead.</p>
</li>
</ol>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Update to the latest version (TBD)</li>
</ol>
<p>2-1. Users can prevent these vulnerabilities by modifying and implementing timing attack preventions by themselves.</p>
<p>2-2. Precisely speaking, it is possible to compare credentials by securely comparing them after calling methods to directly return the input (namely <code>Object. accessToken()</code>, <code>Object.username()</code> and <code>Object.password()</code>).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/208.html">https://cwe.mitre.org/data/definitions/208.html</a></li>
<li><a href="https://security.stackexchange.com/questions/111040/should-i-worry-about-remote-timing-attacks-on-string-comparison">https://security.stackexchange.com/questions/111040/should-i-worry-about-remote-timing-attacks-on-string-comparison</a></li>
</ul>
<h3 id="side-note">Side Note</h3>
<p>Since it is a theoretical attack, there is no PoC available from neither the vendor nor the security team.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/line/armeria/security/advisories/GHSA-24r8-fm9r-cpj2">https://github.com/line/armeria/security/advisories/GHSA-24r8-fm9r-cpj2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-16771">https://nvd.nist.gov/vuln/detail/CVE-2019-16771</a></li>
<li><a href="https://github.com/advisories/GHSA-24r8-fm9r-cpj2">https://github.com/advisories/GHSA-24r8-fm9r-cpj2</a></li>
<li><a href="https://github.com/line/armeria/security/advisories/GHSA-35fr-h7jr-hh86">https://github.com/line/armeria/security/advisories/GHSA-35fr-h7jr-hh86</a></li>
<li><a href="https://github.com/line/armeria/commit/b597f7a865a527a84ee3d6937075cfbb4470ed20">https://github.com/line/armeria/commit/b597f7a865a527a84ee3d6937075cfbb4470ed20</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24r8-fm9r-cpj2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-12-05T18:40:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.james:james-server] Denial of Service in Apache James]]></title>
        <id>https://github.com/advisories/GHSA-r58x-wjg8-63m9</id>
        <link href="https://github.com/advisories/GHSA-r58x-wjg8-63m9"/>
        <updated>2024-05-15T06:30:05.000Z</updated>
        <content type="html"><![CDATA[<p>In Apache James, using Jazzer fuzzer, we identified that an IMAP user can craft IMAP LIST commands to orchestrate a Denial Of Service using a vulnerable Regular expression. This affected Apache James prior to 3.6.1 We recommend upgrading to Apache James 3.6.1 or higher , which enforce the use of RE2J regular expression engine to execute regex in linear time without back-tracking.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-40110">https://nvd.nist.gov/vuln/detail/CVE-2021-40110</a></li>
<li><a href="https://www.openwall.com/lists/oss-security/2022/01/04/2">https://www.openwall.com/lists/oss-security/2022/01/04/2</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2022/01/04/2">http://www.openwall.com/lists/oss-security/2022/01/04/2</a></li>
<li><a href="https://github.com/advisories/GHSA-r58x-wjg8-63m9">https://github.com/advisories/GHSA-r58x-wjg8-63m9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r58x-wjg8-63m9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-01-08T00:40:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.alibaba:fastjson] Unsafe deserialization in com.alibaba:fastjson]]></title>
        <id>https://github.com/advisories/GHSA-pv7h-hx5h-mgfj</id>
        <link href="https://github.com/advisories/GHSA-pv7h-hx5h-mgfj"/>
        <updated>2024-05-15T06:28:36.000Z</updated>
        <content type="html"><![CDATA[<p>The package com.alibaba:fastjson before 1.2.83 is vulnerable to Deserialization of Untrusted Data by bypassing the default autoType shutdown restrictions, which is possible under certain conditions. Exploiting this vulnerability allows attacking remote servers. Workaround: If upgrading is not possible, you can enable <a href="https://github.com/alibaba/fastjson/wiki/fastjson_safemode">safeMode</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-25845">https://nvd.nist.gov/vuln/detail/CVE-2022-25845</a></li>
<li><a href="https://github.com/alibaba/fastjson/commit/35db4adad70c32089542f23c272def1ad920a60d">https://github.com/alibaba/fastjson/commit/35db4adad70c32089542f23c272def1ad920a60d</a></li>
<li><a href="https://github.com/alibaba/fastjson/commit/8f3410f81cbd437f7c459f8868445d50ad301f15">https://github.com/alibaba/fastjson/commit/8f3410f81cbd437f7c459f8868445d50ad301f15</a></li>
<li><a href="https://github.com/alibaba/fastjson/releases/tag/1.2.83">https://github.com/alibaba/fastjson/releases/tag/1.2.83</a></li>
<li><a href="https://github.com/alibaba/fastjson/wiki/security_update_20220523">https://github.com/alibaba/fastjson/wiki/security_update_20220523</a></li>
<li><a href="https://snyk.io/vuln/SNYK-JAVA-COMALIBABA-2859222">https://snyk.io/vuln/SNYK-JAVA-COMALIBABA-2859222</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2022.html">https://www.oracle.com/security-alerts/cpujul2022.html</a></li>
<li><a href="https://www.ddosi.org/fastjson-poc">https://www.ddosi.org/fastjson-poc</a></li>
<li><a href="https://github.com/advisories/GHSA-pv7h-hx5h-mgfj">https://github.com/advisories/GHSA-pv7h-hx5h-mgfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pv7h-hx5h-mgfj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-06-11T00:00:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.vaadin:vaadin-server] Regular expression denial of service (ReDoS) in EmailValidator class in Vaadin 7]]></title>
        <id>https://github.com/advisories/GHSA-42j4-733x-5vcf</id>
        <link href="https://github.com/advisories/GHSA-42j4-733x-5vcf"/>
        <updated>2024-05-15T06:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>Unsafe validation RegEx in <code>EmailValidator</code> class in <code>com.vaadin:vaadin-server</code> versions 7.0.0 through 7.7.21 (Vaadin 7.0.0 through 7.7.21) allows attackers to cause uncontrolled resource consumption by submitting malicious email addresses.</p>
<ul>
<li><a href="https://vaadin.com/security/cve-2020-36320">https://vaadin.com/security/cve-2020-36320</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vaadin/framework/security/advisories/GHSA-42j4-733x-5vcf">https://github.com/vaadin/framework/security/advisories/GHSA-42j4-733x-5vcf</a></li>
<li><a href="https://vaadin.com/security/cve-2020-36320">https://vaadin.com/security/cve-2020-36320</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36320">https://nvd.nist.gov/vuln/detail/CVE-2020-36320</a></li>
<li><a href="https://github.com/vaadin/framework/issues/7757">https://github.com/vaadin/framework/issues/7757</a></li>
<li><a href="https://github.com/vaadin/framework/pull/12104">https://github.com/vaadin/framework/pull/12104</a></li>
<li><a href="https://github.com/advisories/GHSA-42j4-733x-5vcf">https://github.com/advisories/GHSA-42j4-733x-5vcf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-42j4-733x-5vcf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-19T14:49:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.vaadin:vaadin-bom] Regular expression denial of service (ReDoS) in EmailValidator class in Vaadin 7]]></title>
        <id>https://github.com/advisories/GHSA-42j4-733x-5vcf</id>
        <link href="https://github.com/advisories/GHSA-42j4-733x-5vcf"/>
        <updated>2024-05-15T06:27:11.000Z</updated>
        <content type="html"><![CDATA[<p>Unsafe validation RegEx in <code>EmailValidator</code> class in <code>com.vaadin:vaadin-server</code> versions 7.0.0 through 7.7.21 (Vaadin 7.0.0 through 7.7.21) allows attackers to cause uncontrolled resource consumption by submitting malicious email addresses.</p>
<ul>
<li><a href="https://vaadin.com/security/cve-2020-36320">https://vaadin.com/security/cve-2020-36320</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vaadin/framework/security/advisories/GHSA-42j4-733x-5vcf">https://github.com/vaadin/framework/security/advisories/GHSA-42j4-733x-5vcf</a></li>
<li><a href="https://vaadin.com/security/cve-2020-36320">https://vaadin.com/security/cve-2020-36320</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36320">https://nvd.nist.gov/vuln/detail/CVE-2020-36320</a></li>
<li><a href="https://github.com/vaadin/framework/issues/7757">https://github.com/vaadin/framework/issues/7757</a></li>
<li><a href="https://github.com/vaadin/framework/pull/12104">https://github.com/vaadin/framework/pull/12104</a></li>
<li><a href="https://github.com/advisories/GHSA-42j4-733x-5vcf">https://github.com/advisories/GHSA-42j4-733x-5vcf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-42j4-733x-5vcf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-19T14:49:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-core] Moderate severity vulnerability that affects org.springframework:spring-core]]></title>
        <id>https://github.com/advisories/GHSA-f26x-pr96-vw86</id>
        <link href="https://github.com/advisories/GHSA-f26x-pr96-vw86"/>
        <updated>2024-05-15T06:25:54.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the "jsonp" and "callback" JSONP parameters, enabling cross-domain requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-11040">https://nvd.nist.gov/vuln/detail/CVE-2018-11040</a></li>
<li><a href="https://github.com/advisories/GHSA-f26x-pr96-vw86">https://github.com/advisories/GHSA-f26x-pr96-vw86</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/04/msg00022.html">https://lists.debian.org/debian-lts-announce/2021/04/msg00022.html</a></li>
<li><a href="https://pivotal.io/security/cve-2018-11040">https://pivotal.io/security/cve-2018-11040</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2020.html">https://www.oracle.com/security-alerts/cpujan2020.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2020.html">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html">https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/874859493bbda59739c38c7e52eb3625f247b93a">https://github.com/spring-projects/spring-framework/commit/874859493bbda59739c38c7e52eb3625f247b93a</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26">https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f26x-pr96-vw86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-16T17:43:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.springframework:spring-core] Moderate severity vulnerability that affects org.springframework:spring-core]]></title>
        <id>https://github.com/advisories/GHSA-f26x-pr96-vw86</id>
        <link href="https://github.com/advisories/GHSA-f26x-pr96-vw86"/>
        <updated>2024-05-15T06:25:54.000Z</updated>
        <content type="html"><![CDATA[<p>Spring Framework, versions 5.0.x prior to 5.0.7 and 4.3.x prior to 4.3.18 and older unsupported versions, allows web applications to enable cross-domain requests via JSONP (JSON with Padding) through AbstractJsonpResponseBodyAdvice for REST controllers and MappingJackson2JsonView for browser requests. Both are not enabled by default in Spring Framework nor Spring Boot, however, when MappingJackson2JsonView is configured in an application, JSONP support is automatically ready to use through the "jsonp" and "callback" JSONP parameters, enabling cross-domain requests.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-11040">https://nvd.nist.gov/vuln/detail/CVE-2018-11040</a></li>
<li><a href="https://github.com/advisories/GHSA-f26x-pr96-vw86">https://github.com/advisories/GHSA-f26x-pr96-vw86</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2021/04/msg00022.html">https://lists.debian.org/debian-lts-announce/2021/04/msg00022.html</a></li>
<li><a href="https://pivotal.io/security/cve-2018-11040">https://pivotal.io/security/cve-2018-11040</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujan2020.html">https://www.oracle.com/security-alerts/cpujan2020.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpujul2020.html">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html">https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html">https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html</a></li>
<li><a href="https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html">https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html</a></li>
<li><a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html">http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html</a></li>
<li><a href="https://www.oracle.com/security-alerts/cpuoct2021.html">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/874859493bbda59739c38c7e52eb3625f247b93a">https://github.com/spring-projects/spring-framework/commit/874859493bbda59739c38c7e52eb3625f247b93a</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26">https://github.com/spring-projects/spring-framework/commit/b80c13b722bb207ddf43f53a007ee3ddc1dd2e26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f26x-pr96-vw86</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-16T17:43:45.000Z</published>
    </entry>
</feed>