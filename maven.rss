<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2023-03-01T15:01:29.063Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.apache.tika:tika-parsers] org.apache.tika:tika-parsers has an Infinite Loop vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-p699-3wgc-7h72</id>
        <link href="https://github.com/advisories/GHSA-p699-3wgc-7h72"/>
        <updated>2023-02-28T22:57:52.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of the package <code>org.apache.tika:tika-parsers</code> before version 1.18 are vulnerable to Denial of Service (DoS) via a carefully crafted (or fuzzed) file that can trigger an infinite loop via the ChmParser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1339">https://nvd.nist.gov/vuln/detail/CVE-2018-1339</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2018:2669">https://access.redhat.com/errata/RHSA-2018:2669</a></li>
<li><a href="https://lists.apache.org/thread.html/4d2cb5c819401bb075e2a1130e0d14f0404a136541a6f91da0225828@%3Cdev.tika.apache.org%3E">https://lists.apache.org/thread.html/4d2cb5c819401bb075e2a1130e0d14f0404a136541a6f91da0225828@%3Cdev.tika.apache.org%3E</a></li>
<li><a href="https://github.com/apache/tika/commit/1b6ca3685c196cfd89f5f95c19cc919ce10c5aff#diff-43f8cbe58aaab159ce88bd95fafc46dd">https://github.com/apache/tika/commit/1b6ca3685c196cfd89f5f95c19cc919ce10c5aff#diff-43f8cbe58aaab159ce88bd95fafc46dd</a></li>
<li><a href="https://github.com/advisories/GHSA-p699-3wgc-7h72">https://github.com/advisories/GHSA-p699-3wgc-7h72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p699-3wgc-7h72</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2018-10-17T15:43:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.validation]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.utilities]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r5]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.r4b]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ca.uhn.hapi.fhir:org.hl7.fhir.convertors]  MITM based Zip Slip in `ca.uhn.hapi.fhir:org.hl7.fhir.core`]]></title>
        <id>https://github.com/advisories/GHSA-jqh6-9574-5x22</id>
        <link href="https://github.com/advisories/GHSA-jqh6-9574-5x22"/>
        <updated>2023-02-28T20:40:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>MITM can enable Zip-Slip.</p>
<h3 id="vulnerability">Vulnerability</h3>
<h4 id="vulnerability-1-scannerjava">Vulnerability 1: <code>Scanner.java</code></h4>
<p>There is no validation that the zip file being unpacked has entries that are not maliciously writing outside of the intended destination directory.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L335-L357</a></p>
<p>This zip archive is downloaded over HTTP instead of HTTPS, leaving it vulnerable to compromise in-flight.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136">https://github.com/hapifhir/org.hl7.fhir.core/blob/8c43e21094af971303131efd081503e5a112db4b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/Scanner.java#L136</a></p>
<h5 id="vulnerability-2-terminologycachemanagerjava">Vulnerability 2: <code>TerminologyCacheManager.java</code></h5>
<p><strong>Note:</strong> While these links point to only one implementation, both implementations of <code>TerminologyCacheManager.java</code> are vulnerable to this as their code seems to be duplicated.</p>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java</a></li>
</ul>
<p>While there is validation in this bit of logic that attempts to validate that the zip file doesn't contain malicious entries that escape the destination directory, the guard is insufficient.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L97-L113</a></p>
<p>This is because the <code>Utilities.path(String... path)</code> method does not normalize the path, although it seems to be attempting to do so.
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java#L617-L675</a></p>
<p>The normalization only occurs if the path element starts with a path traversal payload. As an example, calling <code>Utilities.path("/base", "/child/../test")</code> will return the string <code>"/base/child/../test"</code>.</p>
<p>This guard logic can, thus, be easily bypassed:
<a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L100-L104</a></p>
<p>Assuming an attacker can control the return value of <code>ze.getName()</code>, they can supply a value like <code>/anything/../../../../zipsip-protection-bypass.txt</code>.</p>
<p>Similarly, an attacker can control the contents of the Zip file via a MITM attack as this logic is used with resources not downloaded over HTTPS.</p>
<p><a href="https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73">https://github.com/hapifhir/org.hl7.fhir.core/blob/f58b7acfb5e393cac52cc5bbb170bdb669c2880e/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java#L66-L73</a></p>
<h3 id="patches">Patches</h3>
<p>Unknown</p>
<h3 id="workarounds">Workarounds</h3>
<p>Unknown</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://snyk.io/research/zip-slip-vulnerability">https://snyk.io/research/zip-slip-vulnerability</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22">https://github.com/hapifhir/org.hl7.fhir.core/security/advisories/GHSA-jqh6-9574-5x22</a></li>
<li><a href="https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg">https://github.com/HL7/fhir-ig-publisher/security/advisories/GHSA-xr8x-pxm6-prjg</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-24057">https://nvd.nist.gov/vuln/detail/CVE-2023-24057</a></li>
<li><a href="https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc">https://github.com/hapifhir/org.hl7.fhir.core/commit/b50aec59124416b7315a49220cfc3999223414cc</a></li>
<li><a href="https://github.com/advisories/GHSA-jqh6-9574-5x22">https://github.com/advisories/GHSA-jqh6-9574-5x22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqh6-9574-5x22</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-01-23T22:05:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.quarkus.resteasy.reactive:resteasy-reactive-common-parent] RestEasy Reactive implementation of Quarkus allows Creation of Temporary File With Insecure Permissions]]></title>
        <id>https://github.com/advisories/GHSA-j75r-vf64-6rrh</id>
        <link href="https://github.com/advisories/GHSA-j75r-vf64-6rrh"/>
        <updated>2023-02-24T19:55:16.000Z</updated>
        <content type="html"><![CDATA[<p>In RestEasy Reactive implementation of Quarkus the insecure <code>File.createTempFile()</code> is used in the <code>FileBodyHandler</code> class which creates temp files with insecure permissions that could be read by a local user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0481">https://nvd.nist.gov/vuln/detail/CVE-2023-0481</a></li>
<li><a href="https://github.com/quarkusio/quarkus/pull/30694">https://github.com/quarkusio/quarkus/pull/30694</a></li>
<li><a href="https://github.com/quarkusio/quarkus/commit/95d5904f7cf18c8165b97d8ca03b203d7f69c17e">https://github.com/quarkusio/quarkus/commit/95d5904f7cf18c8165b97d8ca03b203d7f69c17e</a></li>
<li><a href="https://github.com/advisories/GHSA-j75r-vf64-6rrh">https://github.com/advisories/GHSA-j75r-vf64-6rrh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j75r-vf64-6rrh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-24T18:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.neo4j.procedure:apoc] XML External Entity (XXE) vulnerability in apoc.import.graphml]]></title>
        <id>https://github.com/advisories/GHSA-9vx8-f5c4-862x</id>
        <link href="https://github.com/advisories/GHSA-9vx8-f5c4-862x"/>
        <updated>2023-02-24T17:39:19.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A XML External Entity (XXE) vulnerability found in the apoc.import.graphml procedure of APOC core plugin in Neo4j graph database. XML External Entity (XXE) injection occurs when the XML parser allows external entities to be resolved. The XML parser used by the apoc.import.graphml procedure was not configured in a secure way and therefore allowed this.</p>
<p>External entities can be used to read local files, send HTTP requests, and perform denial-of-service attacks on the application.</p>
<p>Abusing the XXE vulnerability enabled assessors to read local files remotely. Although with the level of privileges assessors had this was limited to one-line files. With the ability to write to the database, any file could have been read. Additionally, assessors noted, with local testing, the server could be crashed by passing in improperly formatted XML. </p>
<h3 id="patches">Patches</h3>
<p>The users should aim to use the latest released version compatible with their Neo4j version. The minimum versions containing patch for this vulnerability is 4.4.0.14. </p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade the library, you can control the&nbsp;<a href="https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#config_dbms.security.procedures.allowlist">allowlist</a>  of the  procedures&nbsp;that can be used in your system.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in&nbsp;<a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures">neo4j-apoc-procedures</a></li>
<li>Email us at&nbsp;<a href="mailto:security@neo4j.com">security@neo4j.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/security/advisories/GHSA-9vx8-f5c4-862x">https://github.com/neo4j-contrib/neo4j-apoc-procedures/security/advisories/GHSA-9vx8-f5c4-862x</a></li>
<li><a href="https://github.com/neo4j/apoc/security/advisories/GHSA-6wxg-wh7f-rqpr">https://github.com/neo4j/apoc/security/advisories/GHSA-6wxg-wh7f-rqpr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23926">https://nvd.nist.gov/vuln/detail/CVE-2023-23926</a></li>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c3e2a29020497acf9417879f38e8af4e8c6d5783">https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/c3e2a29020497acf9417879f38e8af4e8c6d5783</a></li>
<li><a href="https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/4.4.0.14">https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/tag/4.4.0.14</a></li>
<li><a href="https://github.com/advisories/GHSA-9vx8-f5c4-862x">https://github.com/advisories/GHSA-9vx8-f5c4-862x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9vx8-f5c4-862x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-24T17:39:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[io.quarkus:quarkus-vertx-http] Cross-site Scripting in Quarkus]]></title>
        <id>https://github.com/advisories/GHSA-c57v-hc7m-8px2</id>
        <link href="https://github.com/advisories/GHSA-c57v-hc7m-8px2"/>
        <updated>2023-02-23T22:15:10.000Z</updated>
        <content type="html"><![CDATA[<p>If the Quarkus Form Authentication session cookie Path attribute is set to <code>/</code> then a cross-site attack may be initiated which might lead to the Information Disclosure. This attack can be prevented with the Quarkus CSRF Prevention feature.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0044">https://nvd.nist.gov/vuln/detail/CVE-2023-0044</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-0044">https://access.redhat.com/security/cve/CVE-2023-0044</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2158081">https://bugzilla.redhat.com/show_bug.cgi?id=2158081</a></li>
<li><a href="https://github.com/advisories/GHSA-c57v-hc7m-8px2">https://github.com/advisories/GHSA-c57v-hc7m-8px2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c57v-hc7m-8px2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-23T21:30:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:synopsys-coverity] Synopsys Jenkins Coverity Plugin has Incorrect Default Permissions]]></title>
        <id>https://github.com/advisories/GHSA-jwr6-75xh-jh5j</id>
        <link href="https://github.com/advisories/GHSA-jwr6-75xh-jh5j"/>
        <updated>2023-02-23T22:14:20.000Z</updated>
        <content type="html"><![CDATA[<p>Synopsys Coverity Plugin 3.0.2 and earlier does not perform permission checks in several HTTP endpoints.</p>
<p>This allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins. Those can be used as part of an attack to capture the credentials using another vulnerability.</p>
<p>An enumeration of credentials IDs in Synopsys Coverity Plugin 3.0.3 requires the appropriate permissions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-23850">https://nvd.nist.gov/vuln/detail/CVE-2023-23850</a></li>
<li><a href="https://community.synopsys.com/s/article/SIG-Product-Security-Advisory-Multiple-CVEs-affecting-Coverity-Jenkins-Plugin">https://community.synopsys.com/s/article/SIG-Product-Security-Advisory-Multiple-CVEs-affecting-Coverity-Jenkins-Plugin</a></li>
<li><a href="https://www.jenkins.io/security/advisory/2023-02-15/#SECURITY-2793%20(1)">https://www.jenkins.io/security/advisory/2023-02-15/#SECURITY-2793%20(1)</a></li>
<li><a href="https://github.com/advisories/GHSA-jwr6-75xh-jh5j">https://github.com/advisories/GHSA-jwr6-75xh-jh5j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jwr6-75xh-jh5j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-15T21:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.technicolor:elOyente] Jenkins elOyente Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-jv62-6xvc-ccwh</id>
        <link href="https://github.com/advisories/GHSA-jv62-6xvc-ccwh"/>
        <updated>2023-02-23T22:09:37.000Z</updated>
        <content type="html"><![CDATA[<p>elOyente Plugin stores a password unencrypted in its global configuration file <code>com.technicolor.eloyente.ElOyente.xm</code>l on the Jenkins controller. This password can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10424">https://nvd.nist.gov/vuln/detail/CVE-2019-10424</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1561">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1561</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-jv62-6xvc-ccwh">https://github.com/advisories/GHSA-jv62-6xvc-ccwh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jv62-6xvc-ccwh</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.ukiuni.callOtherJenkins:call-remote-job-plugin] Jenkins Call Remote Job Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-j8c7-fm85-6jj6</id>
        <link href="https://github.com/advisories/GHSA-j8c7-fm85-6jj6"/>
        <updated>2023-02-23T22:07:19.000Z</updated>
        <content type="html"><![CDATA[<p>Call Remote Job Plugin stores a password unencrypted in job <code>config.xml</code> files on the Jenkins controller. This password can be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10422">https://nvd.nist.gov/vuln/detail/CVE-2019-10422</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1548">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1548</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-j8c7-fm85-6jj6">https://github.com/advisories/GHSA-j8c7-fm85-6jj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j8c7-fm85-6jj6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.villagechief.codescan.jenkins:codescan] Jenkins CodeScan Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</id>
        <link href="https://github.com/advisories/GHSA-jp8r-jh5j-cgwf"/>
        <updated>2023-02-23T21:56:37.000Z</updated>
        <content type="html"><![CDATA[<p>CodeScan Plugin stores an API key unencrypted in its global configuration file <code>com.villagechief.codescan.jenkins.CodeScanBuilder.xml</code> on the Jenkins controller. This API key can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10423">https://nvd.nist.gov/vuln/detail/CVE-2019-10423</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1551">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1551</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-jp8r-jh5j-cgwf">https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jp8r-jh5j-cgwf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:azure-event-grid-notifier] Jenkins Azure Event Grid Build Notifier Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-826h-fxff-hpqf</id>
        <link href="https://github.com/advisories/GHSA-826h-fxff-hpqf"/>
        <updated>2023-02-23T21:53:39.000Z</updated>
        <content type="html"><![CDATA[<p>Azure Event Grid Build Notifier Plugin stores the Azure Event Grid secret key unencrypted in job <code>config.xml</code> files on the Jenkins controller. This key can be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10421">https://nvd.nist.gov/vuln/detail/CVE-2019-10421</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1544">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1544</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-826h-fxff-hpqf">https://github.com/advisories/GHSA-826h-fxff-hpqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-826h-fxff-hpqf</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:assembla] Jenkins Assembla Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-mhq6-h9m7-wq8c</id>
        <link href="https://github.com/advisories/GHSA-mhq6-h9m7-wq8c"/>
        <updated>2023-02-23T21:51:57.000Z</updated>
        <content type="html"><![CDATA[<p>Assembla Plugin stores the Assembla password unencrypted in its global configuration file <code>jenkins.plugin.assembla.AssemblaProjectProperty.xml</code> on the Jenkins controller. This password can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10420">https://nvd.nist.gov/vuln/detail/CVE-2019-10420</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1543">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1543</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-mhq6-h9m7-wq8c">https://github.com/advisories/GHSA-mhq6-h9m7-wq8c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mhq6-h9m7-wq8c</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:application-director-plugin] Jenkins vFabric Application Director Plugin Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-hx82-2ggv-vwm5</id>
        <link href="https://github.com/advisories/GHSA-hx82-2ggv-vwm5"/>
        <updated>2023-02-23T21:50:46.000Z</updated>
        <content type="html"><![CDATA[<p>vFabric Application Director Plugin stores the Application Director password unencrypted in its global configuration file <code>jfullam.vfabric.jenkins.plugin.ApplicationDirectorPostBuildDeployer.xml</code> on the Jenkins controller. This password can be viewed by users with access to the Jenkins controller file system.</p>
<p>As of publication of this advisory, there is no fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10419">https://nvd.nist.gov/vuln/detail/CVE-2019-10419</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURTIY-1541">https://jenkins.io/security/advisory/2019-09-25/#SECURTIY-1541</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-hx82-2ggv-vwm5">https://github.com/advisories/GHSA-hx82-2ggv-vwm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx82-2ggv-vwm5</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.opennms:opennms-web-api] Cross Site Scripting in OpenNMS]]></title>
        <id>https://github.com/advisories/GHSA-7v39-jjj6-j4j4</id>
        <link href="https://github.com/advisories/GHSA-7v39-jjj6-j4j4"/>
        <updated>2023-02-23T21:44:34.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting in outage/list.htm in multiple versions of OpenNMS Meridian and Horizon allows an attacker access to confidential session information.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-0869">https://nvd.nist.gov/vuln/detail/CVE-2023-0869</a></li>
<li><a href="https://github.com/OpenNMS/opennms/pull/5734">https://github.com/OpenNMS/opennms/pull/5734</a></li>
<li><a href="https://github.com/advisories/GHSA-7v39-jjj6-j4j4">https://github.com/advisories/GHSA-7v39-jjj6-j4j4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7v39-jjj6-j4j4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-23T15:33:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.apache.sling:org.apache.sling.i18n] Improper Privilege Management in Apache Sling]]></title>
        <id>https://github.com/advisories/GHSA-mrpv-5pmr-p92h</id>
        <link href="https://github.com/advisories/GHSA-mrpv-5pmr-p92h"/>
        <updated>2023-02-23T21:38:55.000Z</updated>
        <content type="html"><![CDATA[<p>Privilege Escalation vulnerability in Apache Software Foundation Apache Sling. Any content author is able to create i18n dictionaries in the repository in a location the author has write access to. As these translations are used across the whole product, it allows an author to change any text or dialog in the product. For example an attacker might fool someone by changing the text on a delete button to "Info". This issue affects the i18n module of Apache Sling versions before 2.6.2. Version 2.6.2 and higher limit by default i18m dictionaries to certain paths in the repository (/libs and /apps). Users of the module are advised to update to version 2.6.2 or higher, check the configuration for resource loading and then adjust the access permissions for the configured path accordingly.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-25621">https://nvd.nist.gov/vuln/detail/CVE-2023-25621</a></li>
<li><a href="https://github.com/apache/sling-org-apache-sling-i18n/pull/9">https://github.com/apache/sling-org-apache-sling-i18n/pull/9</a></li>
<li><a href="https://issues.apache.org/jira/browse/SLING-11744">https://issues.apache.org/jira/browse/SLING-11744</a></li>
<li><a href="https://seclists.org/oss-sec/2023/q1/112">https://seclists.org/oss-sec/2023/q1/112</a></li>
<li><a href="https://github.com/advisories/GHSA-mrpv-5pmr-p92h">https://github.com/advisories/GHSA-mrpv-5pmr-p92h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrpv-5pmr-p92h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-02-23T09:30:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.inedo.proget:inedo-proget] Jenkins Inedo ProGet Plugin Plugin has Cleartext Transmission of Sensitive Information]]></title>
        <id>https://github.com/advisories/GHSA-f6g8-pxvp-9328</id>
        <link href="https://github.com/advisories/GHSA-f6g8-pxvp-9328"/>
        <updated>2023-02-23T20:32:50.000Z</updated>
        <content type="html"><![CDATA[<p>Inedo ProGet Plugin Plugin stores a service password in its global Jenkins configuration.</p>
<p>While the password is stored encrypted on disk, it was transmitted in plain text as part of the configuration form. This could result in exposure of the password through browser extensions, cross-site scripting vulnerabilities, and similar situations.</p>
<p>Inedo ProGet Plugin Plugin now encrypts the password transmitted to administrators viewing the global configuration form.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10412">https://nvd.nist.gov/vuln/detail/CVE-2019-10412</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1514">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1514</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-f6g8-pxvp-9328">https://github.com/advisories/GHSA-f6g8-pxvp-9328</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f6g8-pxvp-9328</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2022-05-24T16:56:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.jenkins-ci.plugins:violation-comments-to-gitlab] Jenkins Violation Comments to GitLab Plugin has Insufficiently Protected Credentials]]></title>
        <id>https://github.com/advisories/GHSA-8hwr-589g-xpj2</id>
        <link href="https://github.com/advisories/GHSA-8hwr-589g-xpj2"/>
        <updated>2023-02-23T20:32:30.000Z</updated>
        <content type="html"><![CDATA[<p>Violation Comments to GitLab Plugin stored API tokens unencrypted in job <code>config.xml</code> files and its global configuration file <code>org.jenkinsci.plugins.jvctgl.ViolationsToGitLabGlobalConfiguration.xml</code> on the Jenkins controller. These credentials could be viewed by users with Extended Read permission, or access to the Jenkins controller file system.</p>
<p>Violation Comments to GitLab Plugin now stores these credentials encrypted. Existing jobs need to have their configuration saved for existing plain text credentials to be overwritten.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10415">https://nvd.nist.gov/vuln/detail/CVE-2019-10415</a></li>
<li><a href="https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1577">https://jenkins.io/security/advisory/2019-09-25/#SECURITY-1577</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2019/09/25/3">http://www.openwall.com/lists/oss-security/2019/09/25/3</a></li>
<li><a href="https://github.com/advisories/GHSA-8hwr-589g-xpj2">https://github.com/advisories/GHSA-8hwr-589g-xpj2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8hwr-589g-xpj2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T16:56:46.000Z</published>
    </entry>
</feed>