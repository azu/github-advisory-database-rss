<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/maven.rss</id>
    <title>Security Advisory for Java artifacts hosted at the Maven central repository</title>
    <updated>2024-02-22T00:03:27.112Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Amaven"/>
    <subtitle>Security Advisory for Java artifacts hosted at the Maven central repository on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[org.postgresql:postgresql] org.postgresql:postgresql vulnerable to SQL Injection via line comment generation]]></title>
        <id>https://github.com/advisories/GHSA-24rp-q3w6-vc56</id>
        <link href="https://github.com/advisories/GHSA-24rp-q3w6-vc56"/>
        <updated>2024-02-21T23:33:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>SQL injection is possible when using the non-default connection property <code>preferQueryMode=simple</code> in combination with application code that has a vulnerable SQL that negates a parameter value.</p>
<p>There is no vulnerability in the driver when using the default query mode. Users that do not override the query mode are not impacted.</p>
<h1 id="exploitation">Exploitation</h1>
<p>To exploit this behavior the following conditions must be met:</p>
<ol>
<li>A placeholder for a numeric value must be immediately preceded by a minus (i.e. <code>-</code>)</li>
<li>There must be a second placeholder for a string value after the first placeholder on the same line. </li>
<li>Both parameters must be user controlled.</li>
</ol>
<p>The prior behavior of the driver when operating in simple query mode would inline the negative value of the first parameter and cause the resulting line to be treated as a <code>--</code> SQL comment. That would extend to the beginning of the next parameter and cause the quoting of that parameter to be consumed by the comment line. If that string parameter includes a newline, the resulting text would appear unescaped in the resulting SQL.</p>
<p>When operating in the default extended query mode this would not be an issue as the parameter values are sent separately to the server. Only in simple query mode the parameter values are inlined into the executed SQL causing this issue.</p>
<h1 id="example">Example</h1>
<pre><code class="language-java">PreparedStatement stmt = conn.prepareStatement("SELECT -?, ?");
stmt.setInt(1, -1);
stmt.setString(2, "\nWHERE false --");
ResultSet rs = stmt.executeQuery();
</code></pre>
<p>The resulting SQL when operating in simple query mode would be:</p>
<pre><code class="language-sql">SELECT --1,'
WHERE false --'
</code></pre>
<p>The contents of the second parameter get injected into the command. Note how both the number of result columns and the WHERE clause of the command have changed. A more elaborate example could execute arbitrary other SQL commands.</p>
<h1 id="patch">Patch</h1>
<p>Problem will be patched upgrade to 42.7.2, 42.6.1, 42.5.5, 42.4.4, 42.3.9, 42.2.28, 42.2.28.jre7</p>
<p>The patch fixes the inlining of parameters by forcing them all to be serialized as wrapped literals. The SQL in the prior example would be transformed into:</p>
<pre><code class="language-sql">SELECT -('-1'::int4), ('
WHERE false --')
</code></pre>
<h1 id="workarounds">Workarounds</h1>
<p>Do not use the connection property<code>preferQueryMode=simple</code>. (<em>NOTE: If you do not explicitly specify a query mode then you are using the default of <code>extended</code> and are not impacted by this issue.</em>)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56">https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-24rp-q3w6-vc56</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1597">https://nvd.nist.gov/vuln/detail/CVE-2024-1597</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee">https://github.com/pgjdbc/pgjdbc/commit/06abfb78a627277a580d4df825f210e96a4e14ee</a></li>
<li><a href="https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40">https://github.com/pgjdbc/pgjdbc/commit/93b0fcb2711d9c1e3a2a03134369738a02a58b40</a></li>
<li><a href="https://github.com/advisories/GHSA-24rp-q3w6-vc56">https://github.com/advisories/GHSA-24rp-q3w6-vc56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-24rp-q3w6-vc56</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T23:33:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Calendar module and Liferay DXP vulnerable to Cross-site Scripting, content spoofing]]></title>
        <id>https://github.com/advisories/GHSA-hgr6-6hhw-883f</id>
        <link href="https://github.com/advisories/GHSA-hgr6-6hhw-883f"/>
        <updated>2024-02-21T23:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Calendar module in Liferay Portal 7.2.0 through 7.4.2, and older unsupported versions, and Liferay DXP 7.3 before service pack 3, 7.2 before fix pack 15, and older unsupported versions does not escape user supplied data in the default notification email template, which allows remote authenticated users to inject arbitrary web script or HTML via the title of a calendar event or the user's name. This may lead to a content spoofing or cross-site scripting (XSS) attacks depending on the capability of the receiver's mail client.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25151">https://nvd.nist.gov/vuln/detail/CVE-2024-25151</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151</a></li>
<li><a href="https://github.com/advisories/GHSA-hgr6-6hhw-883f">https://github.com/advisories/GHSA-hgr6-6hhw-883f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgr6-6hhw-883f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-21T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Calendar module and Liferay DXP vulnerable to Cross-site Scripting, content spoofing]]></title>
        <id>https://github.com/advisories/GHSA-hgr6-6hhw-883f</id>
        <link href="https://github.com/advisories/GHSA-hgr6-6hhw-883f"/>
        <updated>2024-02-21T23:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Calendar module in Liferay Portal 7.2.0 through 7.4.2, and older unsupported versions, and Liferay DXP 7.3 before service pack 3, 7.2 before fix pack 15, and older unsupported versions does not escape user supplied data in the default notification email template, which allows remote authenticated users to inject arbitrary web script or HTML via the title of a calendar event or the user's name. This may lead to a content spoofing or cross-site scripting (XSS) attacks depending on the capability of the receiver's mail client.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25151">https://nvd.nist.gov/vuln/detail/CVE-2024-25151</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151</a></li>
<li><a href="https://github.com/advisories/GHSA-hgr6-6hhw-883f">https://github.com/advisories/GHSA-hgr6-6hhw-883f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgr6-6hhw-883f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-21T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Liferay Portal Calendar module and Liferay DXP vulnerable to Cross-site Scripting, content spoofing]]></title>
        <id>https://github.com/advisories/GHSA-hgr6-6hhw-883f</id>
        <link href="https://github.com/advisories/GHSA-hgr6-6hhw-883f"/>
        <updated>2024-02-21T23:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>The Calendar module in Liferay Portal 7.2.0 through 7.4.2, and older unsupported versions, and Liferay DXP 7.3 before service pack 3, 7.2 before fix pack 15, and older unsupported versions does not escape user supplied data in the default notification email template, which allows remote authenticated users to inject arbitrary web script or HTML via the title of a calendar event or the user's name. This may lead to a content spoofing or cross-site scripting (XSS) attacks depending on the capability of the receiver's mail client.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25151">https://nvd.nist.gov/vuln/detail/CVE-2024-25151</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-25151</a></li>
<li><a href="https://github.com/advisories/GHSA-hgr6-6hhw-883f">https://github.com/advisories/GHSA-hgr6-6hhw-883f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hgr6-6hhw-883f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-21T06:30:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Frontend JS module's portlet.js and Liferay DXP vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</id>
        <link href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm"/>
        <updated>2024-02-21T23:31:56.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the Frontend JS module's portlet.js in Liferay Portal 7.2.0 through 7.4.3.37, and Liferay DXP 7.4 before update 38, 7.3 before update 11, 7.2 before fix pack 20, and older unsupported versions allows remote attackers to inject arbitrary web script or HTML via the anchor (hash) part of a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26269">https://nvd.nist.gov/vuln/detail/CVE-2024-26269</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269</a></li>
<li><a href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm">https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Frontend JS module's portlet.js and Liferay DXP vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</id>
        <link href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm"/>
        <updated>2024-02-21T23:31:56.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the Frontend JS module's portlet.js in Liferay Portal 7.2.0 through 7.4.3.37, and Liferay DXP 7.4 before update 38, 7.3 before update 11, 7.2 before fix pack 20, and older unsupported versions allows remote attackers to inject arbitrary web script or HTML via the anchor (hash) part of a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26269">https://nvd.nist.gov/vuln/detail/CVE-2024-26269</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269</a></li>
<li><a href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm">https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Frontend JS module's portlet.js and Liferay DXP vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</id>
        <link href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm"/>
        <updated>2024-02-21T23:31:56.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the Frontend JS module's portlet.js in Liferay Portal 7.2.0 through 7.4.3.37, and Liferay DXP 7.4 before update 38, 7.3 before update 11, 7.2 before fix pack 20, and older unsupported versions allows remote attackers to inject arbitrary web script or HTML via the anchor (hash) part of a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26269">https://nvd.nist.gov/vuln/detail/CVE-2024-26269</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269</a></li>
<li><a href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm">https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Liferay Portal Frontend JS module's portlet.js and Liferay DXP vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</id>
        <link href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm"/>
        <updated>2024-02-21T23:31:56.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site scripting (XSS) vulnerability in the Frontend JS module's portlet.js in Liferay Portal 7.2.0 through 7.4.3.37, and Liferay DXP 7.4 before update 38, 7.3 before update 11, 7.2 before fix pack 20, and older unsupported versions allows remote attackers to inject arbitrary web script or HTML via the anchor (hash) part of a URL.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26269">https://nvd.nist.gov/vuln/detail/CVE-2024-26269</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26269</a></li>
<li><a href="https://github.com/advisories/GHSA-rwhv-hvj2-qrqm">https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwhv-hvj2-qrqm</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal and Liferay DXP vulnerable to stored Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</id>
        <link href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75"/>
        <updated>2024-02-21T23:30:55.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple stored cross-site scripting (XSS) vulnerabilities in Liferay Portal 7.2.0 through 7.4.3.13, and older unsupported versions, and Liferay DXP 7.4 before update 10, 7.3 before update 4, 7.2 before fix pack 17, and older unsupported versions allow remote authenticated users to inject arbitrary web script or HTML via a crafted payload injected into the first/middle/last name text field of the user who creates an entry in the (1) Announcement widget, or (2) Alerts widget.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26266">https://nvd.nist.gov/vuln/detail/CVE-2024-26266</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266</a></li>
<li><a href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75">https://github.com/advisories/GHSA-rwxc-4cmw-7x75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal and Liferay DXP vulnerable to stored Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</id>
        <link href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75"/>
        <updated>2024-02-21T23:30:55.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple stored cross-site scripting (XSS) vulnerabilities in Liferay Portal 7.2.0 through 7.4.3.13, and older unsupported versions, and Liferay DXP 7.4 before update 10, 7.3 before update 4, 7.2 before fix pack 17, and older unsupported versions allow remote authenticated users to inject arbitrary web script or HTML via a crafted payload injected into the first/middle/last name text field of the user who creates an entry in the (1) Announcement widget, or (2) Alerts widget.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26266">https://nvd.nist.gov/vuln/detail/CVE-2024-26266</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266</a></li>
<li><a href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75">https://github.com/advisories/GHSA-rwxc-4cmw-7x75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal and Liferay DXP vulnerable to stored Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</id>
        <link href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75"/>
        <updated>2024-02-21T23:30:55.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple stored cross-site scripting (XSS) vulnerabilities in Liferay Portal 7.2.0 through 7.4.3.13, and older unsupported versions, and Liferay DXP 7.4 before update 10, 7.3 before update 4, 7.2 before fix pack 17, and older unsupported versions allow remote authenticated users to inject arbitrary web script or HTML via a crafted payload injected into the first/middle/last name text field of the user who creates an entry in the (1) Announcement widget, or (2) Alerts widget.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26266">https://nvd.nist.gov/vuln/detail/CVE-2024-26266</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266</a></li>
<li><a href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75">https://github.com/advisories/GHSA-rwxc-4cmw-7x75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Liferay Portal and Liferay DXP vulnerable to stored Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</id>
        <link href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75"/>
        <updated>2024-02-21T23:30:55.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple stored cross-site scripting (XSS) vulnerabilities in Liferay Portal 7.2.0 through 7.4.3.13, and older unsupported versions, and Liferay DXP 7.4 before update 10, 7.3 before update 4, 7.2 before fix pack 17, and older unsupported versions allow remote authenticated users to inject arbitrary web script or HTML via a crafted payload injected into the first/middle/last name text field of the user who creates an entry in the (1) Announcement widget, or (2) Alerts widget.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26266">https://nvd.nist.gov/vuln/detail/CVE-2024-26266</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2024-26266</a></li>
<li><a href="https://github.com/advisories/GHSA-rwxc-4cmw-7x75">https://github.com/advisories/GHSA-rwxc-4cmw-7x75</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwxc-4cmw-7x75</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Language Override edit screen and Liferay DXP vulnerable to reflected Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-73x3-8mrg-5r93</id>
        <link href="https://github.com/advisories/GHSA-73x3-8mrg-5r93"/>
        <updated>2024-02-21T23:30:21.000Z</updated>
        <content type="html"><![CDATA[<p>Reflected cross-site scripting (XSS) vulnerability in the Language Override edit screen in Liferay Portal 7.4.3.8 through 7.4.3.97, and Liferay DXP 2023.Q3 before patch 5, and 7.4 update 4 through 92 allows remote attackers to inject arbitrary web script or HTML via the <code>_com_liferay_portal_language_override_web_internal_portlet_PLOPortlet_key</code> parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42498">https://nvd.nist.gov/vuln/detail/CVE-2023-42498</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498</a></li>
<li><a href="https://github.com/advisories/GHSA-73x3-8mrg-5r93">https://github.com/advisories/GHSA-73x3-8mrg-5r93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-73x3-8mrg-5r93</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.dxp.bom] Liferay Portal Language Override edit screen and Liferay DXP vulnerable to reflected Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-73x3-8mrg-5r93</id>
        <link href="https://github.com/advisories/GHSA-73x3-8mrg-5r93"/>
        <updated>2024-02-21T23:30:21.000Z</updated>
        <content type="html"><![CDATA[<p>Reflected cross-site scripting (XSS) vulnerability in the Language Override edit screen in Liferay Portal 7.4.3.8 through 7.4.3.97, and Liferay DXP 2023.Q3 before patch 5, and 7.4 update 4 through 92 allows remote attackers to inject arbitrary web script or HTML via the <code>_com_liferay_portal_language_override_web_internal_portlet_PLOPortlet_key</code> parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42498">https://nvd.nist.gov/vuln/detail/CVE-2023-42498</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498</a></li>
<li><a href="https://github.com/advisories/GHSA-73x3-8mrg-5r93">https://github.com/advisories/GHSA-73x3-8mrg-5r93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-73x3-8mrg-5r93</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[com.liferay.portal:release.portal.bom] Liferay Portal Language Override edit screen and Liferay DXP vulnerable to reflected Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-73x3-8mrg-5r93</id>
        <link href="https://github.com/advisories/GHSA-73x3-8mrg-5r93"/>
        <updated>2024-02-21T23:30:21.000Z</updated>
        <content type="html"><![CDATA[<p>Reflected cross-site scripting (XSS) vulnerability in the Language Override edit screen in Liferay Portal 7.4.3.8 through 7.4.3.97, and Liferay DXP 2023.Q3 before patch 5, and 7.4 update 4 through 92 allows remote attackers to inject arbitrary web script or HTML via the <code>_com_liferay_portal_language_override_web_internal_portlet_PLOPortlet_key</code> parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-42498">https://nvd.nist.gov/vuln/detail/CVE-2023-42498</a></li>
<li><a href="https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498">https://liferay.dev/portal/security/known-vulnerabilities/-/asset_publisher/jekt/content/cve-2023-42498</a></li>
<li><a href="https://github.com/advisories/GHSA-73x3-8mrg-5r93">https://github.com/advisories/GHSA-73x3-8mrg-5r93</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-73x3-8mrg-5r93</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T03:30:37.000Z</published>
    </entry>
</feed>