{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>A cross-site scripting vulnerability has been discovered in the VirtualPage class.</p>\n<p>This vulnerability can only be exploited if a user with CMS access has posted malicious or unescaped HTML into any of the textfields of a page which a VirtualPage refers to.</p>\n<p>This has been resolved by ensuring that VirtualPage safely escapes all field content.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/cms/SS-2015-005-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/cms/SS-2015-005-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/software/download/security-releases/ss-2015-005\">https://www.silverstripe.org/software/download/security-releases/ss-2015-005</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r97r-64vp-fghm\">https://github.com/advisories/GHSA-r97r-64vp-fghm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r97r-64vp-fghm",
            "title": "[silverstripe/cms] Silverstripe XSS vulnerability via VirtualPage",
            "date_modified": "2024-05-22T18:53:40.000Z",
            "date_published": "2024-05-22T18:53:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r97r-64vp-fghm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting vulnerability has been discovered in the CMS page history tab.</p>\n<p>This vulnerability can only be exploited if a user with CMS access has posted malicious or unescaped HTML into any of the text fields on a page, and if the \"compare mode\" option is selected. The HTML will be embedded into the page unescaped.</p>\n<p>This has been resolved by performing the text comparison in a HTML friendly way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/cms/SS-2015-003-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/cms/SS-2015-003-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/software/download/security-releases/ss-2015-003\">https://www.silverstripe.org/software/download/security-releases/ss-2015-003</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hh6-59j2-qrxw\">https://github.com/advisories/GHSA-6hh6-59j2-qrxw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hh6-59j2-qrxw",
            "title": "[silverstripe/cms] Silverstripe History XSS Vulnerability",
            "date_modified": "2024-05-22T18:25:16.000Z",
            "date_published": "2024-05-22T18:25:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hh6-59j2-qrxw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>It is possible for a bad actor with access to the CMS to make use of onmouseover or onmouseout attributes in the WYSIWYG editor to embed malicious javascript.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/admin/SS-2018-004-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/admin/SS-2018-004-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-004\">https://www.silverstripe.org/download/security-releases/ss-2018-004</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-779c-7w4p-2c4g\">https://github.com/advisories/GHSA-779c-7w4p-2c4g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-779c-7w4p-2c4g",
            "title": "[silverstripe/admin] Silverstripe admin XSS Vulnerability via WYSIWYG editor",
            "date_modified": "2024-05-22T18:18:20.000Z",
            "date_published": "2024-05-22T18:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-779c-7w4p-2c4g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>It is possible for a bad actor with access to the CMS to make use of onmouseover or onmouseout attributes in the WYSIWYG editor to embed malicious javascript.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/admin/SS-2018-004-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/admin/SS-2018-004-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-004\">https://www.silverstripe.org/download/security-releases/ss-2018-004</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-779c-7w4p-2c4g\">https://github.com/advisories/GHSA-779c-7w4p-2c4g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-779c-7w4p-2c4g",
            "title": "[silverstripe/admin] Silverstripe admin XSS Vulnerability via WYSIWYG editor",
            "date_modified": "2024-05-22T18:18:20.000Z",
            "date_published": "2024-05-22T18:18:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-779c-7w4p-2c4g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Under certain circumstances it is possible to execute an authorized foreign code in Shopware version prior to 5.2.25.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware5/shopware/commit/8f6a7cefcba7547276892b82f64e4874c1a0dfed\">https://github.com/shopware5/shopware/commit/8f6a7cefcba7547276892b82f64e4874c1a0dfed</a></li>\n<li><a href=\"https://community.shopware.com/_detail_2015.html\">https://community.shopware.com/_detail_2015.html</a></li>\n<li><a href=\"https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-06-2017?category=shopware-5-en/security-updates\">https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-06-2017?category=shopware-5-en/security-updates</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-06-22.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-06-22.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-83jv-4prm-34g7\">https://github.com/advisories/GHSA-83jv-4prm-34g7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-83jv-4prm-34g7",
            "title": "[shopware/shopware] Shopware Remote Code Execution Vulnerability",
            "date_modified": "2024-05-21T21:00:40.000Z",
            "date_published": "2024-05-21T21:00:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-83jv-4prm-34g7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Under certain circumstances, it’s possible to execute an unauthorized foreign code in Shopware in versions prior to 5.2.16. One possible threat is if a template that doesn’t derive from the Shopware standard has been completely copied. Themes or plugins that execute or overwrite the following template code are vulnerable.</p>\n<ul>\n<li>Affected file: emotion.tpl</li>\n</ul>\n<p>Path template file \"Emotion template\": templates / _default / frontend / forms / elements.tpl\nPath template file \"Responsive template\": themes/Frontend/Bare/frontend/forms/elements.tpl</p>\n<p>The complete line beginning with: <code>{eval var=$sSupport.sFields[$sKey]...</code> should be exchanged with the following:</p>\n<pre><code>{$sSupport.sFields[$sKey]|replace:'{literal}':''|replace:'{/literal}':''|replace:'%*%':\"{s name='RequiredField' namespace='frontend/register/index'}{/s}\"}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware5/shopware/commit/6113d30a90e626154e438aa896e656c0f38694f3\">https://github.com/shopware5/shopware/commit/6113d30a90e626154e438aa896e656c0f38694f3</a></li>\n<li><a href=\"https://community.shopware.com/_detail_1989.html\">https://community.shopware.com/_detail_1989.html</a></li>\n<li><a href=\"https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates\">https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-25.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-25.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7336-ghhp-f2qj\">https://github.com/advisories/GHSA-7336-ghhp-f2qj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7336-ghhp-f2qj",
            "title": "[shopware/shopware] Shopware Remote Code Execution Vulnerability",
            "date_modified": "2024-05-21T20:52:58.000Z",
            "date_published": "2024-05-21T20:52:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7336-ghhp-f2qj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A non-persistent Cross-Site Scripting (XSS) vulnerability has been identified in the Shopware eCommerce platform within the frontend. This vulnerability may allow an attacker to inject and execute malicious scripts in the context of a victim's web browser.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware5/shopware/commit/54461aa651566dc2701b873fe6bd94589604751b\">https://github.com/shopware5/shopware/commit/54461aa651566dc2701b873fe6bd94589604751b</a></li>\n<li><a href=\"https://community.shopware.com/_detail_2048.html\">https://community.shopware.com/_detail_2048.html</a></li>\n<li><a href=\"https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2018?category=shopware-5-en/security-updates\">https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2018?category=shopware-5-en/security-updates</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2018-01-22.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2018-01-22.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jqr7-5h7r-ch8p\">https://github.com/advisories/GHSA-jqr7-5h7r-ch8p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqr7-5h7r-ch8p",
            "title": "[shopware/shopware] Shopware Non-Persistent XSS in the Frontend",
            "date_modified": "2024-05-21T20:42:48.000Z",
            "date_published": "2024-05-21T20:42:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqr7-5h7r-ch8p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Under certain circumstances, it’s possible to execute an unauthorized foreign code in Shopware. This is a critical security vulnerability that could affect the entire system. All Shopware versions including Shopware 5.2.14 are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware5/shopware/commit/14299e9ee9f7d93f687b4ec838e0873afbc84fec\">https://github.com/shopware5/shopware/commit/14299e9ee9f7d93f687b4ec838e0873afbc84fec</a></li>\n<li><a href=\"https://community.shopware.com/_detail_1989.html\">https://community.shopware.com/_detail_1989.html</a></li>\n<li><a href=\"https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates\">https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-24.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-24.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q3g4-2vw9-xv27\">https://github.com/advisories/GHSA-q3g4-2vw9-xv27</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q3g4-2vw9-xv27",
            "title": "[shopware/shopware] Shopware Remote Code Execution Vulnerability",
            "date_modified": "2024-05-21T18:50:08.000Z",
            "date_published": "2024-05-21T18:50:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q3g4-2vw9-xv27"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Under certain circumstances, it’s possible to execute an unauthorized foreign code in Shopware. This is a critical security vulnerability that could affect the entire system. All Shopware versions including Shopware 5.2.14 are affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware5/shopware/commit/14299e9ee9f7d93f687b4ec838e0873afbc84fec\">https://github.com/shopware5/shopware/commit/14299e9ee9f7d93f687b4ec838e0873afbc84fec</a></li>\n<li><a href=\"https://community.shopware.com/_detail_1989.html\">https://community.shopware.com/_detail_1989.html</a></li>\n<li><a href=\"https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates\">https://docs.shopware.com/en/shopware-5-en/security-updates/security-update-01-2017?category=shopware-5-en/security-updates</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-24.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/shopware/shopware/2017-01-24.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q3g4-2vw9-xv27\">https://github.com/advisories/GHSA-q3g4-2vw9-xv27</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q3g4-2vw9-xv27",
            "title": "[shopware/shopware] Shopware Remote Code Execution Vulnerability",
            "date_modified": "2024-05-21T18:50:08.000Z",
            "date_published": "2024-05-21T18:50:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q3g4-2vw9-xv27"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of sensiolabs/connect prior to 4.2.3 are affected by a Cross-Site Request Forgery (CSRF) vulnerability due to the absence of the state parameter in OAuth requests. The lack of proper state parameter handling exposes applications to CSRF attacks during the OAuth authentication flow.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sensiolabs/connect/pull/63\">https://github.com/sensiolabs/connect/pull/63</a></li>\n<li><a href=\"https://github.com/symfonycorp/connect/commit/9522aa774e8a0f8a61e709d828e6cc34c4c1e703\">https://github.com/symfonycorp/connect/commit/9522aa774e8a0f8a61e709d828e6cc34c4c1e703</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sensiolabs/connect/2018-06-08-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sensiolabs/connect/2018-06-08-1.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6wqp-7g94-f69j\">https://github.com/advisories/GHSA-6wqp-7g94-f69j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6wqp-7g94-f69j",
            "title": "[sensiolabs/connect] sensiolabs/connect has a Cross-Site Request Forgery Vulnerability",
            "date_modified": "2024-05-21T18:26:53.000Z",
            "date_published": "2024-05-21T18:26:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6wqp-7g94-f69j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In versions prior to 3.26.0 and prior to 4.11.0 of the \"scheb/two-factor-bundle\" project, a security vulnerability allowed attackers to bypass two-factor authentication (2FA) using the remember_me cookie. When the remember_me checkbox was used during login, a \"REMEMBERME\" cookie was created. Upon redirection to the 2FA page, attackers could manipulate the SESSIONID key, granting access to the homepage \"/\" and gaining authentication without completing 2FA.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/issues/253\">https://github.com/scheb/two-factor-bundle/issues/253</a></li>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/commit/3fbca9e821985559b444207a7c2d73b9b569b58b\">https://github.com/scheb/two-factor-bundle/commit/3fbca9e821985559b444207a7c2d73b9b569b58b</a></li>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/commit/a149808d25c1553757c529b9568913ea1cec0894\">https://github.com/scheb/two-factor-bundle/commit/a149808d25c1553757c529b9568913ea1cec0894</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2019-12-19.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2019-12-19.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9phw-7h96-q3rv\">https://github.com/advisories/GHSA-9phw-7h96-q3rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9phw-7h96-q3rv",
            "title": "[scheb/two-factor-bundle] scheb/two-factor-bundle bypass two-factor authentication with remember-me option",
            "date_modified": "2024-05-21T18:22:05.000Z",
            "date_published": "2024-05-21T18:22:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9phw-7h96-q3rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In versions prior to 3.26.0 and prior to 4.11.0 of the \"scheb/two-factor-bundle\" project, a security vulnerability allowed attackers to bypass two-factor authentication (2FA) using the remember_me cookie. When the remember_me checkbox was used during login, a \"REMEMBERME\" cookie was created. Upon redirection to the 2FA page, attackers could manipulate the SESSIONID key, granting access to the homepage \"/\" and gaining authentication without completing 2FA.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/issues/253\">https://github.com/scheb/two-factor-bundle/issues/253</a></li>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/commit/3fbca9e821985559b444207a7c2d73b9b569b58b\">https://github.com/scheb/two-factor-bundle/commit/3fbca9e821985559b444207a7c2d73b9b569b58b</a></li>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/commit/a149808d25c1553757c529b9568913ea1cec0894\">https://github.com/scheb/two-factor-bundle/commit/a149808d25c1553757c529b9568913ea1cec0894</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2019-12-19.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2019-12-19.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9phw-7h96-q3rv\">https://github.com/advisories/GHSA-9phw-7h96-q3rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9phw-7h96-q3rv",
            "title": "[scheb/two-factor-bundle] scheb/two-factor-bundle bypass two-factor authentication with remember-me option",
            "date_modified": "2024-05-21T18:22:05.000Z",
            "date_published": "2024-05-21T18:22:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9phw-7h96-q3rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Before version 3.7 the bundle is vulnerable to a <a href=\"https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/\">security issue in JWT</a>, which can be exploited by an attacker to generate trusted device cookies on their own, effectively by-passing two-factor authentication.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/issues/143\">https://github.com/scheb/two-factor-bundle/issues/143</a></li>\n<li><a href=\"https://github.com/scheb/two-factor-bundle/commit/8890c1e47ae89e0ac6f8a40fd4bb4b91c2081aa7\">https://github.com/scheb/two-factor-bundle/commit/8890c1e47ae89e0ac6f8a40fd4bb4b91c2081aa7</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2018-07-08.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/scheb/two-factor-bundle/2018-07-08.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6mp-mc7g-mg49\">https://github.com/advisories/GHSA-h6mp-mc7g-mg49</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6mp-mc7g-mg49",
            "title": "[scheb/two-factor-bundle] scheb/two-factor-bundle bypass two-factor authentication with unverified JWT trusted device token",
            "date_modified": "2024-05-21T18:16:24.000Z",
            "date_published": "2024-05-21T18:16:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6mp-mc7g-mg49"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users with access to a form's settings can include malicious Twig code into fields that support Twig. These might be the Submission Title or the Success Message. This code will then be executed upon creating a submission, or rendering the text.</p>\n<p>This is listed as low-medium severity due to requiring control panel access to edit a form's settings.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This has been fixed in Formie 2.1.6. Users should ensure they are running at least this version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/verbb/formie/security/advisories/GHSA-v45m-hxqp-fwf5\">https://github.com/verbb/formie/security/advisories/GHSA-v45m-hxqp-fwf5</a></li>\n<li><a href=\"https://github.com/verbb/formie/commit/90296edf7e707f117e760aa57e70dbd43a854420\">https://github.com/verbb/formie/commit/90296edf7e707f117e760aa57e70dbd43a854420</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35191\">https://nvd.nist.gov/vuln/detail/CVE-2024-35191</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v45m-hxqp-fwf5\">https://github.com/advisories/GHSA-v45m-hxqp-fwf5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v45m-hxqp-fwf5",
            "title": "[verbb/formie] verbb/formie Server-Side Template Injection for variable-enabled settings",
            "date_modified": "2024-05-20T22:07:18.000Z",
            "date_published": "2024-05-20T20:26:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v45m-hxqp-fwf5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The PHP file view/about.php is vulnerable to an XSS issue due to no sanitization of the user agent.</p>\n<p>At line [53], the website gets the user-agent from the headers through $_SERVER['HTTP_USER_AGENT'] and echo it without any sanitization.</p>\n<p>In PHP, echo a user generated statement, here the User-Agent Header, without any sanitization allows an attacker to inject malicious scripts into the output of a web page, which are then executed in the browser of anyone viewing that page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WWBN/AVideo/security/advisories/GHSA-f98p-2hc5-fm7v\">https://github.com/WWBN/AVideo/security/advisories/GHSA-f98p-2hc5-fm7v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34899\">https://nvd.nist.gov/vuln/detail/CVE-2024-34899</a></li>\n<li><a href=\"https://github.com/WWBN/AVideo/commit/345711562621d879e63a817d01a229bf0aae7a1d\">https://github.com/WWBN/AVideo/commit/345711562621d879e63a817d01a229bf0aae7a1d</a></li>\n<li><a href=\"https://hackerdna.com/courses/cve/cve-2024-34899\">https://hackerdna.com/courses/cve/cve-2024-34899</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f98p-2hc5-fm7v\">https://github.com/advisories/GHSA-f98p-2hc5-fm7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f98p-2hc5-fm7v",
            "title": "[wwbn/avideo] AVideo cross-site scripting vulnerability in the view/about.php page",
            "date_modified": "2024-05-20T18:44:01.000Z",
            "date_published": "2024-05-20T18:43:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f98p-2hc5-fm7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-f98p-2hc5-fm7v. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>WWBN AVideo 12.4 is vulnerable to Cross Site Scripting (XSS).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34899\">https://nvd.nist.gov/vuln/detail/CVE-2024-34899</a></li>\n<li><a href=\"https://hackerdna.com/courses/cve/cve-2024-34899\">https://hackerdna.com/courses/cve/cve-2024-34899</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qvwg-c35p-rqhj\">https://github.com/advisories/GHSA-qvwg-c35p-rqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qvwg-c35p-rqhj",
            "title": "[wwbn/avideo] Duplicate Advisory: AVideo cross-site scripting vulnerability in the view/about.php page",
            "date_modified": "2024-05-20T18:43:49.000Z",
            "date_published": "2024-05-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qvwg-c35p-rqhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been identified in the robrichards/xmlseclibs library, specifically related to XPath injection. The issue arises from inadequate filtering of user input before it is incorporated into XPath expressions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/robrichards/xmlseclibs/commit/649032643f7aac493e91ca318da0339aec72aa4a\">https://github.com/robrichards/xmlseclibs/commit/649032643f7aac493e91ca318da0339aec72aa4a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/robrichards/xmlseclibs/2018-09-27.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/robrichards/xmlseclibs/2018-09-27.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2g98-f9jv-w8c5\">https://github.com/advisories/GHSA-2g98-f9jv-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2g98-f9jv-w8c5",
            "title": "[robrichards/xmlseclibs] robrichards/xmlseclibs XPath injection",
            "date_modified": "2024-05-20T18:06:53.000Z",
            "date_published": "2024-05-20T18:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2g98-f9jv-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The service offered by Pusher provides \"private\" channels with an authentication mechanism that restricts subscription access. The decision on allowing subscriptions to private channels is delegated to customers, who implement an authentication endpoint. End-users request a token from this endpoint to join a specific channel. The token is an HMAC signature of the end-user's connection ID (socket_id) and the desired channel.</p>\n<p>The issue arises from a lack of validation in the libraries provided to customers. This vulnerability allows a malicious end-user to submit a malformed socket_id field, leading the customer to unknowingly sign a string. This signed string grants access to a different private channel than the one the end-user is ostensibly requesting. Consequently, a malicious end-user, with permission to subscribe to one private channel, can forge permission for any private channel owned by the same customer.</p>\n<p>Additionally, the HTTP API is secured by requiring a signature with each request, generated by the customer's secret key. In specific cases, a malicious end-user may deceive a customer into signing a value for socket_id, effectively authenticating an API request to Pusher.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pusher/pusher-http-php/commit/5a2ccdd3b14932b9cb5d0f59cf81d19c447214f1\">https://github.com/pusher/pusher-http-php/commit/5a2ccdd3b14932b9cb5d0f59cf81d19c447214f1</a></li>\n<li><a href=\"https://blog.pusher.com/update-on-security\">https://blog.pusher.com/update-on-security</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v7m-pcw5-h3cg\">https://github.com/advisories/GHSA-7v7m-pcw5-h3cg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v7m-pcw5-h3cg",
            "title": "[pusher/pusher-php-server]  Pusher Service Channel Authentication Bypass",
            "date_modified": "2024-05-20T17:49:11.000Z",
            "date_published": "2024-05-20T17:49:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v7m-pcw5-h3cg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The limit() query method is susceptible to catastrophic SQL injection with MySQL.</p>\n<p>For example, given a model User for a table users:</p>\n<pre><code>UserQuery::create()-&gt;limit('1;DROP TABLE users')-&gt;find();\n</code></pre>\n<p>This will drop the users table!</p>\n<p>The cause appears to be a lack of integer casting of the limit input in either Criteria::setLimit() or in DBMySQL::applyLimit(). The code comments there seem to imply that casting was avoided due to overflow issues with 32-bit integers.</p>\n<p>This is surprising behavior since one of the primary purposes of an ORM is to prevent basic SQL injection.</p>\n<p>This affects all versions of Propel: 1.x, 2.x, and 3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/propelorm/Propel/issues/1052\">https://github.com/propelorm/Propel/issues/1052</a></li>\n<li><a href=\"https://github.com/propelorm/Propel/pull/1054\">https://github.com/propelorm/Propel/pull/1054</a></li>\n<li><a href=\"https://github.com/propelorm/Propel/commit/b72093201f8e225410f62a246653ac039e31c90a\">https://github.com/propelorm/Propel/commit/b72093201f8e225410f62a246653ac039e31c90a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel1/2018-02-14.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel1/2018-02-14.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g7c-qhf3-x59p\">https://github.com/advisories/GHSA-7g7c-qhf3-x59p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g7c-qhf3-x59p",
            "title": "[propel/propel1] propel/propel1 SQL injection possible with limit() on MySQL",
            "date_modified": "2024-05-20T17:36:30.000Z",
            "date_published": "2024-05-20T17:36:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g7c-qhf3-x59p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The limit() query method is susceptible to catastrophic SQL injection with MySQL.</p>\n<p>For example, given a model User for a table users:</p>\n<pre><code>UserQuery::create()-&gt;limit('1;DROP TABLE users')-&gt;find();\n</code></pre>\n<p>This will drop the users table!</p>\n<p>The cause appears to be a lack of integer casting of the limit input in either Propel\\Runtime\\ActiveQuery\\Criteria::setLimit() or in Propel\\Runtime\\Adapter\\Pdo\\MysqlAdapter::applyLimit(). The code comments there seem to imply that casting was avoided due to overflow issues with 32-bit integers.</p>\n<p>This is surprising behavior since one of the primary purposes of an ORM is to prevent basic SQL injection.</p>\n<p>This affects all versions of Propel: 1.x, 2.x, and 3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/propelorm/Propel2/issues/1463\">https://github.com/propelorm/Propel2/issues/1463</a></li>\n<li><a href=\"https://github.com/propelorm/Propel2/pull/1464\">https://github.com/propelorm/Propel2/pull/1464</a></li>\n<li><a href=\"https://github.com/propelorm/Propel2/commit/cd23d7384a15cfe203e23b3a835c8ab1d81d9246\">https://github.com/propelorm/Propel2/commit/cd23d7384a15cfe203e23b3a835c8ab1d81d9246</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel/2018-02-14.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel/2018-02-14.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vw7-qx38-37vr\">https://github.com/advisories/GHSA-7vw7-qx38-37vr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vw7-qx38-37vr",
            "title": "[propel/propel] Propel2 SQL injection possible with limit() on MySQL",
            "date_modified": "2024-05-20T17:34:34.000Z",
            "date_published": "2024-05-20T17:34:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vw7-qx38-37vr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}