{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>The PHP file view/about.php is vulnerable to an XSS issue due to no sanitization of the user agent.</p>\n<p>At line [53], the website gets the user-agent from the headers through $_SERVER['HTTP_USER_AGENT'] and echo it without any sanitization.</p>\n<p>In PHP, echo a user generated statement, here the User-Agent Header, without any sanitization allows an attacker to inject malicious scripts into the output of a web page, which are then executed in the browser of anyone viewing that page.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WWBN/AVideo/security/advisories/GHSA-f98p-2hc5-fm7v\">https://github.com/WWBN/AVideo/security/advisories/GHSA-f98p-2hc5-fm7v</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34899\">https://nvd.nist.gov/vuln/detail/CVE-2024-34899</a></li>\n<li><a href=\"https://github.com/WWBN/AVideo/commit/345711562621d879e63a817d01a229bf0aae7a1d\">https://github.com/WWBN/AVideo/commit/345711562621d879e63a817d01a229bf0aae7a1d</a></li>\n<li><a href=\"https://hackerdna.com/courses/cve/cve-2024-34899\">https://hackerdna.com/courses/cve/cve-2024-34899</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f98p-2hc5-fm7v\">https://github.com/advisories/GHSA-f98p-2hc5-fm7v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f98p-2hc5-fm7v",
            "title": "[wwbn/avideo] AVideo cross-site scripting vulnerability in the view/about.php page",
            "date_modified": "2024-05-20T18:44:01.000Z",
            "date_published": "2024-05-20T18:43:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f98p-2hc5-fm7v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"duplicate-advisory\">Duplicate Advisory</h2>\n<p>This advisory has been withdrawn because it is a duplicate of GHSA-f98p-2hc5-fm7v. This link is maintained to preserve external references.</p>\n<h2 id=\"original-description\">Original Description</h2>\n<p>WWBN AVideo 12.4 is vulnerable to Cross Site Scripting (XSS).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-34899\">https://nvd.nist.gov/vuln/detail/CVE-2024-34899</a></li>\n<li><a href=\"https://hackerdna.com/courses/cve/cve-2024-34899\">https://hackerdna.com/courses/cve/cve-2024-34899</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qvwg-c35p-rqhj\">https://github.com/advisories/GHSA-qvwg-c35p-rqhj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qvwg-c35p-rqhj",
            "title": "[wwbn/avideo] Duplicate Advisory: AVideo cross-site scripting vulnerability in the view/about.php page",
            "date_modified": "2024-05-20T18:43:49.000Z",
            "date_published": "2024-05-14T18:30:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qvwg-c35p-rqhj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A vulnerability has been identified in the robrichards/xmlseclibs library, specifically related to XPath injection. The issue arises from inadequate filtering of user input before it is incorporated into XPath expressions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/robrichards/xmlseclibs/commit/649032643f7aac493e91ca318da0339aec72aa4a\">https://github.com/robrichards/xmlseclibs/commit/649032643f7aac493e91ca318da0339aec72aa4a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/robrichards/xmlseclibs/2018-09-27.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/robrichards/xmlseclibs/2018-09-27.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2g98-f9jv-w8c5\">https://github.com/advisories/GHSA-2g98-f9jv-w8c5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2g98-f9jv-w8c5",
            "title": "[robrichards/xmlseclibs] robrichards/xmlseclibs XPath injection",
            "date_modified": "2024-05-20T18:06:53.000Z",
            "date_published": "2024-05-20T18:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2g98-f9jv-w8c5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The service offered by Pusher provides \"private\" channels with an authentication mechanism that restricts subscription access. The decision on allowing subscriptions to private channels is delegated to customers, who implement an authentication endpoint. End-users request a token from this endpoint to join a specific channel. The token is an HMAC signature of the end-user's connection ID (socket_id) and the desired channel.</p>\n<p>The issue arises from a lack of validation in the libraries provided to customers. This vulnerability allows a malicious end-user to submit a malformed socket_id field, leading the customer to unknowingly sign a string. This signed string grants access to a different private channel than the one the end-user is ostensibly requesting. Consequently, a malicious end-user, with permission to subscribe to one private channel, can forge permission for any private channel owned by the same customer.</p>\n<p>Additionally, the HTTP API is secured by requiring a signature with each request, generated by the customer's secret key. In specific cases, a malicious end-user may deceive a customer into signing a value for socket_id, effectively authenticating an API request to Pusher.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pusher/pusher-http-php/commit/5a2ccdd3b14932b9cb5d0f59cf81d19c447214f1\">https://github.com/pusher/pusher-http-php/commit/5a2ccdd3b14932b9cb5d0f59cf81d19c447214f1</a></li>\n<li><a href=\"https://blog.pusher.com/update-on-security\">https://blog.pusher.com/update-on-security</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7v7m-pcw5-h3cg\">https://github.com/advisories/GHSA-7v7m-pcw5-h3cg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7v7m-pcw5-h3cg",
            "title": "[pusher/pusher-php-server]  Pusher Service Channel Authentication Bypass",
            "date_modified": "2024-05-20T17:49:11.000Z",
            "date_published": "2024-05-20T17:49:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7v7m-pcw5-h3cg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The limit() query method is susceptible to catastrophic SQL injection with MySQL.</p>\n<p>For example, given a model User for a table users:</p>\n<pre><code>UserQuery::create()-&gt;limit('1;DROP TABLE users')-&gt;find();\n</code></pre>\n<p>This will drop the users table!</p>\n<p>The cause appears to be a lack of integer casting of the limit input in either Criteria::setLimit() or in DBMySQL::applyLimit(). The code comments there seem to imply that casting was avoided due to overflow issues with 32-bit integers.</p>\n<p>This is surprising behavior since one of the primary purposes of an ORM is to prevent basic SQL injection.</p>\n<p>This affects all versions of Propel: 1.x, 2.x, and 3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/propelorm/Propel/issues/1052\">https://github.com/propelorm/Propel/issues/1052</a></li>\n<li><a href=\"https://github.com/propelorm/Propel/pull/1054\">https://github.com/propelorm/Propel/pull/1054</a></li>\n<li><a href=\"https://github.com/propelorm/Propel/commit/b72093201f8e225410f62a246653ac039e31c90a\">https://github.com/propelorm/Propel/commit/b72093201f8e225410f62a246653ac039e31c90a</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel1/2018-02-14.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel1/2018-02-14.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7g7c-qhf3-x59p\">https://github.com/advisories/GHSA-7g7c-qhf3-x59p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7g7c-qhf3-x59p",
            "title": "[propel/propel1] propel/propel1 SQL injection possible with limit() on MySQL",
            "date_modified": "2024-05-20T17:36:30.000Z",
            "date_published": "2024-05-20T17:36:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7g7c-qhf3-x59p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The limit() query method is susceptible to catastrophic SQL injection with MySQL.</p>\n<p>For example, given a model User for a table users:</p>\n<pre><code>UserQuery::create()-&gt;limit('1;DROP TABLE users')-&gt;find();\n</code></pre>\n<p>This will drop the users table!</p>\n<p>The cause appears to be a lack of integer casting of the limit input in either Propel\\Runtime\\ActiveQuery\\Criteria::setLimit() or in Propel\\Runtime\\Adapter\\Pdo\\MysqlAdapter::applyLimit(). The code comments there seem to imply that casting was avoided due to overflow issues with 32-bit integers.</p>\n<p>This is surprising behavior since one of the primary purposes of an ORM is to prevent basic SQL injection.</p>\n<p>This affects all versions of Propel: 1.x, 2.x, and 3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/propelorm/Propel2/issues/1463\">https://github.com/propelorm/Propel2/issues/1463</a></li>\n<li><a href=\"https://github.com/propelorm/Propel2/pull/1464\">https://github.com/propelorm/Propel2/pull/1464</a></li>\n<li><a href=\"https://github.com/propelorm/Propel2/commit/cd23d7384a15cfe203e23b3a835c8ab1d81d9246\">https://github.com/propelorm/Propel2/commit/cd23d7384a15cfe203e23b3a835c8ab1d81d9246</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel/2018-02-14.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/propel/propel/2018-02-14.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7vw7-qx38-37vr\">https://github.com/advisories/GHSA-7vw7-qx38-37vr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7vw7-qx38-37vr",
            "title": "[propel/propel] Propel2 SQL injection possible with limit() on MySQL",
            "date_modified": "2024-05-20T17:34:34.000Z",
            "date_published": "2024-05-20T17:34:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7vw7-qx38-37vr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions preceding 0.6.1 of the phpxmlrpc/extras project are susceptible to a Cross-Site Scripting (XSS) vulnerability. This vulnerability exists within the class documenting_xmlrpc_server when processing the GET methodName parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/gggeek/phpxmlrpc-extras/commit/65c336e3def9ce71b3e799104d3a6ad15668ddb0\">https://github.com/gggeek/phpxmlrpc-extras/commit/65c336e3def9ce71b3e799104d3a6ad15668ddb0</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/phpxmlrpc/extras/2017-10-29.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/phpxmlrpc/extras/2017-10-29.yaml</a></li>\n<li><a href=\"https://github.com/gggeek/phpxmlrpc-extras/releases/tag/0.6.1\">https://github.com/gggeek/phpxmlrpc-extras/releases/tag/0.6.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ww6p-q26w-fr6m\">https://github.com/advisories/GHSA-ww6p-q26w-fr6m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ww6p-q26w-fr6m",
            "title": "[phpxmlrpc/extras] phpxmlrpc/extra XSS in class documenting_xmlrpc_server",
            "date_modified": "2024-05-20T17:14:56.000Z",
            "date_published": "2024-05-20T17:14:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ww6p-q26w-fr6m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>A user could create and share a resource with a malicious URI. When the victim opens with menu “Open URI in a new tab” function, the malicious page has access to the window.opener object.</p>\n<h3 id=\"impact-of-issue\">Impact of issue</h3>\n<p>The newly opened malicious page can for example change the window.opener.location to redirect the user to a phishing page, or call a JavaScript function served by the AppJS on the user behalf for example to try to affect the integrity of the data.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The code that opens a new window via window.open(); now open the tab with the noopener attribute.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/passbolt/passbolt_api/commit/f568e113beb3134446eda9e66400d28d726ee20d\">https://github.com/passbolt/passbolt_api/commit/f568e113beb3134446eda9e66400d28d726ee20d</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-08-07-3.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-08-07-3.yaml</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/20190807_multiple_vulnerabilities\">https://www.passbolt.com/incidents/20190807_multiple_vulnerabilities</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qm5v-pj64-852j\">https://github.com/advisories/GHSA-qm5v-pj64-852j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qm5v-pj64-852j",
            "title": "[passbolt/passbolt_api] Passbolt Api Tabnabbing when opening URI with menu \"Open URI in a new tab\"",
            "date_modified": "2024-05-20T17:09:58.000Z",
            "date_published": "2024-05-20T17:09:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qm5v-pj64-852j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>An administrator can craft a user with a malicious first name and last name, using a payload such as</p>\n<pre><code>&lt;svg onload=\"confirm(document.domain)\"&gt;'); ?&gt;&lt;/svg&gt;\n</code></pre>\n<p>The user will then receive the invitation email and click on the setup link. The setup start page served by the server will fire the XSS.</p>\n<h3 id=\"impact-of-issue\">Impact of issue</h3>\n<p>An administrator could use this exploit to edit the setup start page for a given user, for example, trick the user into installing another extension. Even though the severity of this issue in itself is high, the likelihood is low because the exploit will be visible in clear by the user in the email notification, and also requires an action from a malicious administrator.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>Sanitize the firstname and lastname in the page that is used to trigger the extension setup process.</p>\n<p>Additionally since v2.11 some default CSP are inserted in the server response headers to prevent inline-scripts or 3rd party domain scripts on pages served by the passbolt API. This is to cater for the case where the administrator has not set them up as part of the web server configuration.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/passbolt/passbolt_api/commit/6135b483f72c6853e6085e329f5f8d7be60c9933\">https://github.com/passbolt/passbolt_api/commit/6135b483f72c6853e6085e329f5f8d7be60c9933</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-08-07-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-08-07-1.yaml</a></li>\n<li><a href=\"https://github.com/passbolt/passbolt_api/blob/master/CHANGELOG.md#2110---2019-08-08\">https://github.com/passbolt/passbolt_api/blob/master/CHANGELOG.md#2110---2019-08-08</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/20190807_multiple_vulnerabilities\">https://www.passbolt.com/incidents/20190807_multiple_vulnerabilities</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2f46-4xjm-73x5\">https://github.com/advisories/GHSA-2f46-4xjm-73x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2f46-4xjm-73x5",
            "title": "[passbolt/passbolt_api] Passbolt API Stored XSS on first/last name during setup",
            "date_modified": "2024-05-20T17:07:45.000Z",
            "date_published": "2024-05-20T17:07:44.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2f46-4xjm-73x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Passbolt provides a way for system administrators to generate a PGP key for the server during installation. The wizard requests a username, an e-mail address and an optional comment. No escaping or verification is done by Passbolt, effectively allowing a user to inject bash code.</p>\n<p>The impact is very high, but the probability is very low given that this vulnerability can only be exploited during Passbolt’s installation stage.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/passbolt/passbolt_api/commit/be84671676ebac43d49e326a14f1afe259777611\">https://github.com/passbolt/passbolt_api/commit/be84671676ebac43d49e326a14f1afe259777611</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-1.yaml</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities\">https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cv5c-2qv5-w2m2\">https://github.com/advisories/GHSA-cv5c-2qv5-w2m2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cv5c-2qv5-w2m2",
            "title": "[passbolt/passbolt_api] Passbolt Api Remote code execution",
            "date_modified": "2024-05-20T16:51:29.000Z",
            "date_published": "2024-05-20T16:51:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cv5c-2qv5-w2m2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Passbolt uses three cookies: a session cookie, a CSRF protection cookie and a cookie to keep track of the multiple-factor authentication process.</p>\n<p>Both the session cookie and the mfa cookie are properly set HTTP-only to prevent an attacker from retrieving the content of those cookies if they managed to exploit an XSS.</p>\n<p>The /auth/verify.json endpoint returns a JSON that, among other things, contains the cookies sent in the request. (similar to the TRACE HTTP method)</p>\n<p>An attacker who manages to leverage an XSS vulnerability could retrieve the session cookies of a legitimate user, effectively granting them the ability to retrieve information (such as encrypted password list or group list) without requiring user interaction.</p>\n<p>This vulnerability has a low impact, but no immediate risk due to it requiring the exploitation of an XSS vulnerability that has yet to be found.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/passbolt/passbolt_api/commit/fbf99fed4b60db5fec97b58a2251a04bb42c1b15\">https://github.com/passbolt/passbolt_api/commit/fbf99fed4b60db5fec97b58a2251a04bb42c1b15</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-2.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-2.yaml</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities\">https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f5pp-pmq8-gp46\">https://github.com/advisories/GHSA-f5pp-pmq8-gp46</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f5pp-pmq8-gp46",
            "title": "[passbolt/passbolt_api] Passbolt Api Retrieval of HTTP-only cookies",
            "date_modified": "2024-05-20T16:51:24.000Z",
            "date_published": "2024-05-20T16:51:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f5pp-pmq8-gp46"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Passbolt sends e-mail to users to warn them about different type of events such as the creation, modification or deletion of a password. Those e-mails may contain user-specified input, such as a password’s title or description.</p>\n<p>Passbolt does not escape the user’s input properly, resulting in the user being able to inject HTML code in an e-mail.</p>\n<p>An authenticated attacker could share a password containing an img HTML tag in its description with an other user to obtain information about their mail user-agent.</p>\n<p>This vulnerability has a very low impact. Most MUA do not embed remote images to protect their users’ privacy.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/passbolt/passbolt_api/commit/00f0ebe37d78815adee26d5e80cf2250fe878647\">https://github.com/passbolt/passbolt_api/commit/00f0ebe37d78815adee26d5e80cf2250fe878647</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-3.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/passbolt/passbolt_api/2019-02-11-3.yaml</a></li>\n<li><a href=\"https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities\">https://www.passbolt.com/incidents/20190211_multiple_vulnerabilities</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v86m-j5f7-ccwh\">https://github.com/advisories/GHSA-v86m-j5f7-ccwh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v86m-j5f7-ccwh",
            "title": "[passbolt/passbolt_api] Passbolt Api E-mail HTML injection",
            "date_modified": "2024-05-20T16:51:21.000Z",
            "date_published": "2024-05-20T16:51:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v86m-j5f7-ccwh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OroPlatform is prone to open redirection which could allow attackers to redirect users to external website.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/oroinc/platform/commit/baf79ad4f6b32bd2834b1766745afb20a5ef4739\">https://github.com/oroinc/platform/commit/baf79ad4f6b32bd2834b1766745afb20a5ef4739</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/oro/platform/2015-07-08.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/oro/platform/2015-07-08.yaml</a></li>\n<li><a href=\"https://oroinc.com/orocrm/blog/orocrm-security-announcement\">https://oroinc.com/orocrm/blog/orocrm-security-announcement</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3vhm-q4w3-rw8q\">https://github.com/advisories/GHSA-3vhm-q4w3-rw8q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3vhm-q4w3-rw8q",
            "title": "[oro/platform] OroPlatform Forced Redirect to External Website",
            "date_modified": "2024-05-20T14:22:10.000Z",
            "date_published": "2024-05-20T14:22:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3vhm-q4w3-rw8q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OroCRM is prone to open redirection which could allow attackers to redirect users to external website.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/oroinc/crm/commit/f86a959dcd77af09e7a5a5930a60cf409924a2be\">https://github.com/oroinc/crm/commit/f86a959dcd77af09e7a5a5930a60cf409924a2be</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/oro/crm/2015-07-08.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/oro/crm/2015-07-08.yaml</a></li>\n<li><a href=\"https://oroinc.com/orocrm/blog/orocrm-security-announcement\">https://oroinc.com/orocrm/blog/orocrm-security-announcement</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v8hp-239v-9367\">https://github.com/advisories/GHSA-v8hp-239v-9367</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v8hp-239v-9367",
            "title": "[oro/crm] OroCRM Forced Redirect to External Website",
            "date_modified": "2024-05-20T14:19:29.000Z",
            "date_published": "2024-05-20T14:19:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v8hp-239v-9367"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>random_compat versions prior to 2.0 are affected by a security vulnerability related to the insecure usage of Cryptographically Secure Pseudo-Random Number Generators (CSPRNG). The affected versions use openssl_random_pseudo_bytes(), which may result in insufficient entropy and compromise the security of generated random numbers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paragonie/random_compat/issues/96\">https://github.com/paragonie/random_compat/issues/96</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/paragonie/random_compat/2016-03-16.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/paragonie/random_compat/2016-03-16.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3fmq-x9q6-wm39\">https://github.com/advisories/GHSA-3fmq-x9q6-wm39</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3fmq-x9q6-wm39",
            "title": "[paragonie/random_compat] random_compat Uses insecure CSPRNG",
            "date_modified": "2024-05-17T23:27:21.000Z",
            "date_published": "2024-05-17T23:27:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3fmq-x9q6-wm39"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Vulnerability in onelogin/php-saml versions prior to 2.10.0 allows signature Wrapping attacks which may result in a malicious user gaining unauthorized access to a system.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/onelogin/php-saml/commit/9d31baa97a57b0989020f62d24307c29e325dac3\">https://github.com/onelogin/php-saml/commit/9d31baa97a57b0989020f62d24307c29e325dac3</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/onelogin/php-saml/CVE-2016-1000253.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/onelogin/php-saml/CVE-2016-1000253.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g48f-pgwh-wwxx\">https://github.com/advisories/GHSA-g48f-pgwh-wwxx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g48f-pgwh-wwxx",
            "title": "[onelogin/php-saml] onelogin/php-saml signature wrapping attacks",
            "date_modified": "2024-05-17T23:06:56.000Z",
            "date_published": "2024-05-17T23:06:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g48f-pgwh-wwxx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In order to verify Signatures on Logoutrequests and LogoutResponses we use\nthe verifySignature of the class XMLSecurityKey from the xmlseclibs library.\nThat method end up calling openssl_verify() depending on the signature algorithm used.</p>\n<p>The openssl_verify() function returns 1 when the signature was successfully verified,\n0 if it failed to verify with the given key, and -1 in case an error occurs.\nPHP allows translating numerical values to boolean implicitly, with the following correspondences:</p>\n<ul>\n<li>0 equals false.</li>\n<li>Non-zero equals true.</li>\n</ul>\n<p>This means that an implicit conversion to boolean of the values returned by openssl_verify()\nwill convert an error state, signaled by the value -1, to a successful verification of the\nsignature (represented by the boolean true).</p>\n<p>The LogoutRequest/LogoutResponse signature validator was performing an implicit conversion to boolean\nof the values returned by the verify() method, which subsequently will return the same output\nas openssl_verify() under most circumstances.\nThis means an error during signature verification is treated as a successful verification by the method.</p>\n<p>Since the signature validation of SAMLResponses were not affected, the impact of this security\nvulnerability is lower, but an update of the php-saml toolkit is recommended.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/onelogin/php-saml/commit/949359f5cad5e1d085c4e5447d9aa8f49a6e82a1\">https://github.com/onelogin/php-saml/commit/949359f5cad5e1d085c4e5447d9aa8f49a6e82a1</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/onelogin/php-saml/2017-02-28.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/onelogin/php-saml/2017-02-28.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9wrw-p9rm-r782\">https://github.com/advisories/GHSA-9wrw-p9rm-r782</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9wrw-p9rm-r782",
            "title": "[onelogin/php-saml] onelogin/php-saml Improper signature validation on LogoutRequest/LogoutResponse.",
            "date_modified": "2024-05-17T23:06:55.000Z",
            "date_published": "2024-05-17T23:06:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9wrw-p9rm-r782"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of nzo/url-encryptor-bundle prior to 5.0.1 and 4.3.2 are affected by a security vulnerability related to the lack of mandatory key and IV requirements. By default, the bundle uses the aes-256-ctr algorithm, which is susceptible to malleability attacks, potentially leading to Insecure Direct Object Reference (IDOR) vulnerabilities. Additionally, the reuse of keys enables users to decrypt and modify encrypted data if they can guess the plaintext of one ciphertext.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nayzo/NzoUrlEncryptorBundle/commit/ba3af1a9bcf3bedcc0ed5948979f482e2134da1a\">https://github.com/nayzo/NzoUrlEncryptorBundle/commit/ba3af1a9bcf3bedcc0ed5948979f482e2134da1a</a></li>\n<li><a href=\"https://github.com/nayzo/NzoUrlEncryptorBundle/commit/bd8232501c12c9df1bc45b1970870ef665218581\">https://github.com/nayzo/NzoUrlEncryptorBundle/commit/bd8232501c12c9df1bc45b1970870ef665218581</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/nzo/url-encryptor-bundle/2020-05-03.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/nzo/url-encryptor-bundle/2020-05-03.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r2r8-36pq-27cm\">https://github.com/advisories/GHSA-r2r8-36pq-27cm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r2r8-36pq-27cm",
            "title": "[nzo/url-encryptor-bundle] nzo/url-encryptor-bundle Insecure default secret key and IV allowing anyone to decrypt values",
            "date_modified": "2024-05-17T23:06:54.000Z",
            "date_published": "2024-05-17T23:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r2r8-36pq-27cm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of nzo/url-encryptor-bundle prior to 5.0.1 and 4.3.2 are affected by a security vulnerability related to the lack of mandatory key and IV requirements. By default, the bundle uses the aes-256-ctr algorithm, which is susceptible to malleability attacks, potentially leading to Insecure Direct Object Reference (IDOR) vulnerabilities. Additionally, the reuse of keys enables users to decrypt and modify encrypted data if they can guess the plaintext of one ciphertext.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nayzo/NzoUrlEncryptorBundle/commit/ba3af1a9bcf3bedcc0ed5948979f482e2134da1a\">https://github.com/nayzo/NzoUrlEncryptorBundle/commit/ba3af1a9bcf3bedcc0ed5948979f482e2134da1a</a></li>\n<li><a href=\"https://github.com/nayzo/NzoUrlEncryptorBundle/commit/bd8232501c12c9df1bc45b1970870ef665218581\">https://github.com/nayzo/NzoUrlEncryptorBundle/commit/bd8232501c12c9df1bc45b1970870ef665218581</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/nzo/url-encryptor-bundle/2020-05-03.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/nzo/url-encryptor-bundle/2020-05-03.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r2r8-36pq-27cm\">https://github.com/advisories/GHSA-r2r8-36pq-27cm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r2r8-36pq-27cm",
            "title": "[nzo/url-encryptor-bundle] nzo/url-encryptor-bundle Insecure default secret key and IV allowing anyone to decrypt values",
            "date_modified": "2024-05-17T23:06:54.000Z",
            "date_published": "2024-05-17T23:06:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r2r8-36pq-27cm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A remote code execution vulnerability has been found in the Swift Mailer library (swiftmailer/swiftmailer) recently. <a href=\"http://legalhackers.com/advisories/SwiftMailer-Exploit-Remote-Code-Exec-CVE-2016-10074-Vuln.html\">See this advisory for details</a>. If you are not using the default mail() transport, this particular problem  does not affect you. Upgrading is of course still recommended!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/swiftmailer/2017-01-06.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/swiftmailer/2017-01-06.yaml</a></li>\n<li><a href=\"https://www.neos.io/blog/flow-sa-2017-01.html\">https://www.neos.io/blog/flow-sa-2017-01.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rq6q-hjvh-5mwh\">https://github.com/advisories/GHSA-rq6q-hjvh-5mwh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rq6q-hjvh-5mwh",
            "title": "[neos/swiftmailer] Flow Swift Mailer package Remote code execution",
            "date_modified": "2024-05-17T23:06:51.000Z",
            "date_published": "2024-05-17T23:06:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rq6q-hjvh-5mwh"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}