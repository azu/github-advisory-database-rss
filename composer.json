{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>Prior to 5.2.1, the sendmail transport (<code>Swift_Transport_SendmailTransport</code>) was vulnerable to an arbitrary shell execution if the \"From\" header came from a non-trusted source and no \"Return-Path\" is configured. This has been fixed in 5.2.1. If you are using sendmail as a transport, you are encouraged to upgrade as soon as possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/swiftmailer/swiftmailer/commit/b4b78af55e5e87f5ff07c06c6be7963c44562f80\">https://github.com/swiftmailer/swiftmailer/commit/b4b78af55e5e87f5ff07c06c6be7963c44562f80</a></li>\n<li><a href=\"https://github.com/swiftmailer/swiftmailer/commit/efc430606a5faed864b969adfbdc5363ce2115a2\">https://github.com/swiftmailer/swiftmailer/commit/efc430606a5faed864b969adfbdc5363ce2115a2</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml</a></li>\n<li><a href=\"https://web.archive.org/web/20150219063146/http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released\">https://web.archive.org/web/20150219063146/http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released</a></li>\n<li><a href=\"http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released\">http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4qpj-gxxg-jqg4\">https://github.com/advisories/GHSA-4qpj-gxxg-jqg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4qpj-gxxg-jqg4",
            "title": "[swiftmailer/swiftmailer] Swiftmailer Sendmail transport arbitrary shell execution",
            "date_modified": "2024-05-29T13:13:17.000Z",
            "date_published": "2024-05-29T13:13:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4qpj-gxxg-jqg4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The vulnerability pertains to the usage of an insecure random number generator (RNG) in the \"stormpath-sdk-php\" library. Specifically, the issue is present in the generation of UUID (Universally Unique Identifier) version 4 within the codebase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/issues/132\">https://github.com/stormpath/stormpath-sdk-php/issues/132</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml</a></li>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/blob/15aee3007b8aa41c20cdf28fd650b8a2368a7fa9/src/Util/UUID.php#L167-L181\">https://github.com/stormpath/stormpath-sdk-php/blob/15aee3007b8aa41c20cdf28fd650b8a2368a7fa9/src/Util/UUID.php#L167-L181</a></li>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/blob/62698ea98ef89217f932e28cf3e511d39af3b4cf/src/Authc/Api/ApiKeyEncryptionOptions.php#L48-L50\">https://github.com/stormpath/stormpath-sdk-php/blob/62698ea98ef89217f932e28cf3e511d39af3b4cf/src/Authc/Api/ApiKeyEncryptionOptions.php#L48-L50</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q8fc-v85f-78pw\">https://github.com/advisories/GHSA-q8fc-v85f-78pw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q8fc-v85f-78pw",
            "title": "[stormpath/sdk] stormpath/sdk uses Insecure Random Number Generator",
            "date_modified": "2024-05-29T13:09:30.000Z",
            "date_published": "2024-05-29T13:09:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q8fc-v85f-78pw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ScnSocialAuth version 1.15.2 has been released and includes a security for this vulnerability. Fix has been applied in <a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All versions below 1.15.2 are affected. dev-master is fixed starting from <a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></p>\n<h3 id=\"exploits\">Exploits</h3>\n<p>Because of missing escaping of the URL param redirect a XSS attack is possible.\nFor example: Setting the redirect param to <code>\"&gt;&lt;a%20href=\"http://github.com\"&gt;GitHub.com&lt;/a&gt;&lt;inpu%20type=\"hidden\"%20\"</code> would result in a link added to the login page.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>If you are using any version of ScnSocialAuth below 1.15.2 please upgrade immediately by running composer update.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/socalnick/scnsocialauth/issues/184\">https://github.com/socalnick/scnsocialauth/issues/184</a></li>\n<li><a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/socalnick/scn-social-auth/2015-01-15.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/socalnick/scn-social-auth/2015-01-15.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6f5-4w43-2x63\">https://github.com/advisories/GHSA-g6f5-4w43-2x63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6f5-4w43-2x63",
            "title": "[socalnick/scn-social-auth] ScnSocialAuth Cross-site Scripting vulnerability in login redirect param",
            "date_modified": "2024-05-29T13:04:33.000Z",
            "date_published": "2024-05-29T13:04:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6f5-4w43-2x63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SimpleSAMLphp 1.17 includes a preview of the new user interface to be included in the future version 2.0. This new user interface can be enabled by setting the usenewui configuration option to true, and it includes a new admin interface in a module called admin, which can be disabled.</p>\n<h3 id=\"description\">Description</h3>\n<p>The new admin interface includes a way to view information about the host where SimpleSAMLphp is installed, by means of the phpinfo() PHP function. An endpoint that exposes the output of that function is included in the admin module for easier debugging.</p>\n<p>The aforementioned endpoint had no checks for administrator privileges. This would allow any individual to access the given endpoint without authenticating, gathering information about the affected system.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp 1.17 versions up to 1.17.7 are affected, provided that the new, experimental use interface is enabled, together with the new admin module.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker could leverage this issue by accessing the unprotected endpoint and gather intelligence about the host where SimpleSAMLphp is deployed, using it later for their own advantage in case other issues arise.</p>\n<p>However, the impact of this issue is deemed as low, given that the new user interface must be explicitly enabled by means of the usenewui configuration option, and the new admin module must also be enabled.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>Upgrade to SimpleSAMLphp 1.17.8 or 1.18. This can be done by downloading the package, or by running composer update. Refer to the documentation for instructions on how to run composer.</p>\n<p>Alternatively, the issue can be mitigated by either disabling the new user interface by setting the usenewui configuration option to false, or by disabling the admin module in the configuration:</p>\n<pre><code>    'module.enable' =&gt; [\n        ...\n        'admin' =&gt; false,\n        ...\n    ],\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/0e0d1f745f5491f9e848b1f3e6da198596bb8885\">https://github.com/simplesamlphp/simplesamlphp/commit/0e0d1f745f5491f9e848b1f3e6da198596bb8885</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-11-19.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-11-19.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201911-02\">https://simplesamlphp.org/security/201911-02</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppm4-r2vc-pg74\">https://github.com/advisories/GHSA-ppm4-r2vc-pg74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppm4-r2vc-pg74",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp Information Disclosure vulnerability",
            "date_modified": "2024-05-28T21:26:22.000Z",
            "date_published": "2024-05-28T21:26:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppm4-r2vc-pg74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SimpleSAMLphp uses metadata to determine how to interact with other SAML entities. This metadata includes what’s called endpoints, which are URLs belonging to that entity where SAML messages can be sent. These URLs are used directly by SimpleSAMLphp when a message is sent, either via an HTTP redirection or by automatically posting a form to them.</p>\n<h3 id=\"description\">Description</h3>\n<p>When sending a SAML message to another entity, SimpleSAMLphp will use the URL of the appropriate endpoint to redirect the user’s browser to it, or craft a form that will be automatically posted to it, depending on the SAML binding used. The URL that’s target of the message is fetched from the stored metadata for the given entity, and that metadata is trusted as correct.</p>\n<p>However, if that metadata has been altered by a malicious party (either an attacker or a rogue administrator) to substitute the URLs of the endpoints with javascript code, SimpleSAMLphp was blindly using them without any validation, trusting the contents of the metadata. This would lead to a reflected XSS where the javascript code is sent inline to the web browser, and if SimpleSAMLphp is not using a strict Content Security Policy to forbid inline javascript (which is the case of the default user interface), then the code will be executed in the end user’s browser.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions are affected, up to 1.17.2.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If metadata is consumed for a rogue entity that includes javascript code in the corresponding endpoints, this javascript code might be run by users trying to access this entity.</p>\n<p>Even though it’s unlikely that an administrator would add metadata for an entity that contains such endpoints inadvertently, if metadata is consumed automatically (e.g. using metarefresh) it would be easier to have an scenario like the one described here if a SAML entity is compromised and its metadata modified.</p>\n<p>The severity is assessed as medium given the difficulty to exploit the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/ce2294e092b3be7db2fc4e18e774b791d4564ff3\">https://github.com/simplesamlphp/simplesamlphp/commit/ce2294e092b3be7db2fc4e18e774b791d4564ff3</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-07-10.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-07-10.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201907-01\">https://simplesamlphp.org/security/201907-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vpr3-cw3h-prw8\">https://github.com/advisories/GHSA-vpr3-cw3h-prw8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vpr3-cw3h-prw8",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp Reflected Cross-site Scripting vulnerability",
            "date_modified": "2024-05-28T20:56:27.000Z",
            "date_published": "2024-05-28T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vpr3-cw3h-prw8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SAML messages are usually signed to prove the identity of the issuer of the message. In the case of SAML authentication responses, correctly verifying the signature is critical to trust that the assertion contained inside the response was issued by a trusted third-party and the identity of the subject has been properly verified.</p>\n<p>A SAML message can be signed both at the message level and at the assertion level (if the message is an authentication response). When the whole authentication response message is unsigned, all the assertions contained inside must be signed independently in order to verify their authenticity. Failure to properly verify the authenticity of the entire message or individual assertions leads to the ability of an attacker to impersonate any user from any Identity Provider trusted by the Service Provider.</p>\n<h3 id=\"description\">Description</h3>\n<p>A signature validation bypass issue has been found in the <code>SimpleSAML_XML_Validator</code> class. This class performs the verification of the XML digital signature of a SAML 1 message with a given key.</p>\n<p>When a SAML 1 authentication response message is received, it is processed to verify its authenticity, including a check for the signature or signatures included in the message. If the message is not signed but the assertions contained in it are, the signatures of those assertions signed will be verified. Unsigned assertions will not be verified. After verifying every signed element in the response, a list of valid nodes is built, holding the DOM nodes of those XML elements that are signed and whose signatures have been successfully verified.</p>\n<p>Once this list is built, the assertions need to be processed individually. They are not processed until the getAttributes() method of the SimpleSAML_XML_Shib13_AuthnResponse class is called. This method iterates through the list of assertions contained in the response and makes sure they were validated in the previous signature verification step, by checking if their corresponding DOM nodes are in the list of those verified.</p>\n<p>The vulnerability is due to lax comparison of the node being checked and the nodes in the verified list. The isNodeValidated() method of the SimpleSAML_XML_Validator class checks if a given DOM node is in the validNodes array by means of the standard in_array() function. This function, however, will return unexpected results due to the default lax behaviour when checking data types in PHP. In this case, the fact that there is a DOM node in the list is enough for in_array() to return true when looking for any DOM node. This means any unsigned assertion will be considered verified if there is at least one assertion with a valid signature in the message being processed.</p>\n<p>This issue allows an attacker to generate a SAML 1 authentication response that contains two different assertions. The first assertion is the one the attacker wants the Service Provider to use, with custom attributes, expiration and even entityID (provided that the given entityID belongs to an Identity Provider that the Service Provider knows and trusts). The second is a legitimate assertion issued and signed by an Identity Provider trusted by the Service Provider. If the second assertion is still valid when sent by the attacker, SimpleSAMLphp will merge all the attributes found in both assertions, but the entityID registered for the authenticating third-party will be the one found in the first, tampered assertion. If the second (legitimate) assertion is already expired when the attacker sends it, only the attributes found in the tampered assertion will be used.</p>\n<p>The issue can be easily fixed by passing a third parameter to the in_array() function, telling it to perform strict comparisons when checking if an object is found inside a given array. This way, when the code evaluates if the tampered assertion is included in the list of verified assertions, it fails and only the legitimate assertion is used, if possible (e.g. it is not expired).</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions before and including 1.14.16.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can leverage this vulnerability to impersonate any user from any SAML 1 Identity Provider trusted by a SimpleSAMLphp Service Provider, with the only pre-requisite of a valid assertion previously sent to the affected Service Provider. As such, only those SimpleSAMLphp installations that have metadata deployed for SAML 1 Identity Providers (by default, listed in the metadata/shib13-idp-remote.php file, but could be in other locations depending on your local configuration) are affected.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>Upgrade to the latest version. When an upgrade is not possible immediately, the following patch must be applied:</p>\n<pre><code>diff --git a/lib/SimpleSAML/XML/Validator.php b/lib/SimpleSAML/XML/Validator.php\nindex e4877f0..69236ef 100644\n--- a/lib/SimpleSAML/XML/Validator.php\n+++ b/lib/SimpleSAML/XML/Validator.php\n@@ -260,7 +260,7 @@ class SimpleSAML_XML_Validator {\n                assert('$node instanceof DOMNode');\n\n                while($node !== NULL) {\n-                       if(in_array($node, $this-&gt;validNodes)) {\n+                       if(in_array($node, $this-&gt;validNodes, true)) {\n                                return TRUE;\n                        }\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/e2d53086abbb253efb24ddcb49b116246eb0b6ca\">https://github.com/simplesamlphp/simplesamlphp/commit/e2d53086abbb253efb24ddcb49b116246eb0b6ca</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201710-01\">https://simplesamlphp.org/security/201710-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fjr2-r2mp-484p\">https://github.com/advisories/GHSA-fjr2-r2mp-484p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fjr2-r2mp-484p",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp signature validation bypass",
            "date_modified": "2024-05-28T19:29:39.000Z",
            "date_published": "2024-05-28T19:29:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fjr2-r2mp-484p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>In order to implement support for the SAML Enhanced Client or Proxy profile, the credentials obtained for authentication were stored in the state in order to pass them to the relevant routines. This, however, led to the credentials being recorded in the user’s session, which can be stored in permanent storage such as the local file system or a remote memcache or database server.</p>\n<h3 id=\"description\">Description</h3>\n<p>When an authentication request is received via the ECP profile, the username and password obtained this way were saved to the state array, which is used to pass relevant data to different routines that may need it. This is not a problem in itself. However, when the ECP profile is disabled in the Identity Provider, other bindings such as HTTP-POST or HTTP-Redirect will be used, and since redirections are involved, the state array is then persisted to the user’s session, effectively storing it in the session backend.</p>\n<p>The ECP profile, which uses the SOAP and PAOS bindings, does not involve any HTTP redirection for the user, and for that reason the state array containing the credentials is never persisted to the session. The logic for determining when to save the credentials to the state array assumed wrongly, though, that if the authentication request came in on the SOAP binding, that means the ECP profile is used. This may not be true as ECP can be disabled by configuration in the IdP’s hosted SAML metadata, and in that case SimpleSAMLphp would then try to default to a binding different than PAOS, such as HTTP-POST or HTTP-Redirect, effectively consolidating the entire state array to the user’s session as described before.</p>\n<p>In practice, any Identity Provider with the ECP profile disabled but metadata for an entity that supports ECP, would reject incoming ECP requests, but write the credentials obtained in the request to the user’s session, which will be stored in the session store, whichever is used (local file system in case PHP sessions are used, Memcache, Redis, relational databases, etc).</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions 1.16.x are affected, up to 1.16.2.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An Identity Provider with metadata for trusted entities that support the SAML ECP profile, may end up storing the user’s credentials received from such entities in its own session storage, whatever that is, in case ECP is actually not enabled in the IdP. Under such circumstances, the credentials may be then accessible to administrators, other personnel or even malicious parties who may have access to the systems where sessions or their backups are stored.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/44d1e3052930d93f0f554c25bc7c7602f8136880\">https://github.com/simplesamlphp/simplesamlphp/commit/44d1e3052930d93f0f554c25bc7c7602f8136880</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2018-12-20.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2018-12-20.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201812-01\">https://simplesamlphp.org/security/201812-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7wh8-jrq7-p27f\">https://github.com/advisories/GHSA-7wh8-jrq7-p27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7wh8-jrq7-p27f",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp exposes credentials in session storage",
            "date_modified": "2024-05-28T18:28:54.000Z",
            "date_published": "2024-05-28T18:28:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7wh8-jrq7-p27f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>Several scripts part of SimpleSAMLphp display a web page with links obtained from the request parameters. This allows us to enhance usability, as the users are presented with links they can follow after completing a certain action, like logging out.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following scripts were not checking the URLs obtained via the HTTP request before displaying them as the target of links that the user may click on:</p>\n<ul>\n<li>www/logout.php</li>\n<li>modules/core/www/no_cookie.php\nThe issue allowed attackers to display links targeting a malicious website inside a trusted site running SimpleSAMLphp, due to the lack of security checks involving the link_href and retryURL HTTP parameters, respectively. The issue was resolved by including a verification of the URLs received in the request against a white list of websites specified in the trusted.url.domains configuration option.</li>\n</ul>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions prior to 1.14.4.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>A remote attacker could craft a link pointing to a trusted website running SimpleSAMLphp, including a parameter pointing to a malicious website, and try to fool the victim into visiting that website by clicking on a link in the page presented by SimpleSAMLphp.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/b1af4e47c81bca2bee633b3f84f4fde624f359ba\">https://github.com/simplesamlphp/simplesamlphp/commit/b1af4e47c81bca2bee633b3f84f4fde624f359ba</a></li>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/d26eb8f17dc9916a5ef2fd0a286b0fc96a561e71\">https://github.com/simplesamlphp/simplesamlphp/commit/d26eb8f17dc9916a5ef2fd0a286b0fc96a561e71</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201606-01\">https://simplesamlphp.org/security/201606-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v858-922f-fj9v\">https://github.com/advisories/GHSA-v858-922f-fj9v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v858-922f-fj9v",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp Link Injection vulnerability",
            "date_modified": "2024-05-28T18:26:35.000Z",
            "date_published": "2024-05-28T18:26:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v858-922f-fj9v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a low level potential SQL injection vulnerability in the silverstripe/subsites module has been identified and fixed in version 2.1.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-subsites/commit/bf2c81dce62ae9a7623d224fd31a39505260eb57\">https://github.com/silverstripe/silverstripe-subsites/commit/bf2c81dce62ae9a7623d224fd31a39505260eb57</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/subsites/SS-2018-016-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/subsites/SS-2018-016-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-016\">https://www.silverstripe.org/download/security-releases/ss-2018-016</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xc69-p8fc-m6m5\">https://github.com/advisories/GHSA-xc69-p8fc-m6m5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xc69-p8fc-m6m5",
            "title": "[silverstripe/subsites] silverstripe/subsites Unsafe SQL Query Construction (Safe Data Source)",
            "date_modified": "2024-05-28T18:23:18.000Z",
            "date_published": "2024-05-28T18:23:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xc69-p8fc-m6m5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The buildDefaults method on DevelopmentAdmin is missing a permission check.</p>\n<p>In live mode, if you access /dev/build, you are requested to login first. However, if you access /dev/build/defaults, then the action is performed without any login check. This should be protected in the same way that /dev/build is.\nThe buildDefaults view is requireDefaultRecords() on each DataObject class, and hence has the potential to modify database state. It also lists all modified tables, allowing attackers more insight into which modules are used, and how the database tables are structured.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/15d4db3b4a7dbc9a7e089f9329a396f8408ed7d9\">https://github.com/silverstripe/silverstripe-framework/commit/15d4db3b4a7dbc9a7e089f9329a396f8408ed7d9</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/3398f670d881447f8777b567f1ead7c0d8d253f5\">https://github.com/silverstripe/silverstripe-framework/commit/3398f670d881447f8777b567f1ead7c0d8d253f5</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/5d2fc0d7cac4ce686f7ae05c1a7b1ad8c01711a8\">https://github.com/silverstripe/silverstripe-framework/commit/5d2fc0d7cac4ce686f7ae05c1a7b1ad8c01711a8</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2015-028-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2015-028\">https://www.silverstripe.org/download/security-releases/ss-2015-028</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x5w2-wcr8-9q45\">https://github.com/advisories/GHSA-x5w2-wcr8-9q45</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x5w2-wcr8-9q45",
            "title": "[silverstripe/framework] Silverstripe Missing security check on dev/build/defaults",
            "date_modified": "2024-05-28T17:58:37.000Z",
            "date_published": "2024-05-23T19:14:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x5w2-wcr8-9q45"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a vulnerability in silverstripe/taxonomy module that allows SQL injection. This affected controller (<code>TaxonomyDirectoryController</code>) is disabled by default and must be enabled by a developer for the exploit to be possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-taxonomy/commit/01a5d9e04b993df507058aa53e6e18efc5ca405b\">https://github.com/silverstripe/silverstripe-taxonomy/commit/01a5d9e04b993df507058aa53e6e18efc5ca405b</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-taxonomy/commit/d037941e931490c33af5029c676447ed38896ee8\">https://github.com/silverstripe/silverstripe-taxonomy/commit/d037941e931490c33af5029c676447ed38896ee8</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/taxonomy/SS-2018-011-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/taxonomy/SS-2018-011-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-011\">https://www.silverstripe.org/download/security-releases/ss-2018-011</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2v5-xcqm-4fv6\">https://github.com/advisories/GHSA-p2v5-xcqm-4fv6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2v5-xcqm-4fv6",
            "title": "[silverstripe/taxonomy] silverstripe/taxonomy SQL Injection vulnerability",
            "date_modified": "2024-05-28T17:29:05.000Z",
            "date_published": "2024-05-28T17:29:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2v5-xcqm-4fv6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a vulnerability in silverstripe/taxonomy module that allows SQL injection. This affected controller (<code>TaxonomyDirectoryController</code>) is disabled by default and must be enabled by a developer for the exploit to be possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-taxonomy/commit/01a5d9e04b993df507058aa53e6e18efc5ca405b\">https://github.com/silverstripe/silverstripe-taxonomy/commit/01a5d9e04b993df507058aa53e6e18efc5ca405b</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-taxonomy/commit/d037941e931490c33af5029c676447ed38896ee8\">https://github.com/silverstripe/silverstripe-taxonomy/commit/d037941e931490c33af5029c676447ed38896ee8</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/taxonomy/SS-2018-011-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/taxonomy/SS-2018-011-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-011\">https://www.silverstripe.org/download/security-releases/ss-2018-011</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2v5-xcqm-4fv6\">https://github.com/advisories/GHSA-p2v5-xcqm-4fv6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2v5-xcqm-4fv6",
            "title": "[silverstripe/taxonomy] silverstripe/taxonomy SQL Injection vulnerability",
            "date_modified": "2024-05-28T17:29:05.000Z",
            "date_published": "2024-05-28T17:29:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2v5-xcqm-4fv6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <a href=\"https://github.com/silverstripe/silverstripe-userforms\">userforms module</a> allows CMS administrators to create public facing forms with file upload abilities. These files are uploaded into a predictable public path on the website, unless configured otherwise by the CMS administrator setting up the form. While the name of the uploaded file itself is not predictable, certain actions taken by CMS authors could expose it. For example, submission notification emails contain a link to the file without authorisation checks.</p>\n<p>In 3.0.0 this field is disabled by default, but re-enabled upon installation of the <a href=\"https://github.com/silverstripe-labs/silverstripe-secureassets\">secure assets module</a>. When this is installed, the field can once again be used within a form, and will automatically lock this folder to a secure list of users, which can then be configured further by an administrator.</p>\n<p>Existing file upload fields will not be disabled, but will require re-enabling via config or installation of secure assets to become editable again.</p>\n<p>If any upload field points or is pointed to a folder that is not secured, and the secure assets module is present, then that folder will have the secure permissions applied automatically.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/userforms/SS-2015-018-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/userforms/SS-2015-018-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/software/download/security-releases/ss-2015-018\">https://www.silverstripe.org/software/download/security-releases/ss-2015-018</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-55pp-293f-3365\">https://github.com/advisories/GHSA-55pp-293f-3365</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55pp-293f-3365",
            "title": "[silverstripe/userforms] silverstripe/userforms file upload exposure on UserForms module",
            "date_modified": "2024-05-28T17:21:01.000Z",
            "date_published": "2024-05-28T17:21:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55pp-293f-3365"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Users with access to the administration panel with page editing permissions could insert <code>&lt;script&gt;</code> tags in markdown fields, which are exposed on the publicly accessible site pages, leading to potential XSS injections.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/releases/tag/1.13.0\"><strong>Formwork 1.13.0</strong></a> has been released with a patch that solves this vulnerability. Now the system config option <code>content.safe_mode</code> (enabled by default) controls whether HTML tags and potentially dangerous links are escaped. This is configurable as in some cases more flexibility should be given. Panel users should be only a controlled group of editors, which cannot enable the option by themselves, and not a generic group. This mitigates the chance of introducing vulnerabilities.</li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/6adc302f5a294f2ffbbf1571dd4ffea6b7876723\"><strong>Formwork 2.x</strong> (6adc302)</a> adds a similar <code>content.safeMode</code> system option. Like Formwork 1.13.0, by default HTML tags and dangerous link are escaped. Even if enabled by an administrator, however, <code>&lt;script&gt;</code> and other dangerous tags are still converted to text, but secure tags are allowed.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35621\">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35621</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getformwork/formwork/security/advisories/GHSA-gx8m-f3mp-fg99\">https://github.com/getformwork/formwork/security/advisories/GHSA-gx8m-f3mp-fg99</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/2d92e6dbf99a9a49797947afbda0cdd4e56e11df\">https://github.com/getformwork/formwork/commit/2d92e6dbf99a9a49797947afbda0cdd4e56e11df</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/6adc302f5a294f2ffbbf1571dd4ffea6b7876723\">https://github.com/getformwork/formwork/commit/6adc302f5a294f2ffbbf1571dd4ffea6b7876723</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gx8m-f3mp-fg99\">https://github.com/advisories/GHSA-gx8m-f3mp-fg99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gx8m-f3mp-fg99",
            "title": "[getformwork/formwork] formwork Cross-site scripting vulnerability in Markdown fields",
            "date_modified": "2024-05-28T16:54:32.000Z",
            "date_published": "2024-05-28T16:54:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gx8m-f3mp-fg99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"description\">Description</h3>\n<p>A stored cross-site scripting (XSS) vulnerability in Formwork v1.12.1 allows attackers to execute arbitrary web scripts or HTML via a crafted payload injected into the Page title field.</p>\n<p>Only users with access to Administration Panel with page editing permission can inject raw HTML in the Page title field.</p>\n<h3 id=\"patched-versions\">Patched versions</h3>\n<p>This vulnerability has been patched in <a href=\"https://github.com/getformwork/formwork/releases/tag/1.13.0\">Formwork 1.13.0</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-24230\">https://nvd.nist.gov/vuln/detail/CVE-2023-24230</a></li>\n<li><a href=\"https://medium.com/@0x2bit/formwork-1-12-1-stored-xss-vulnerability-at-page-title-b6efba27891a\">https://medium.com/@0x2bit/formwork-1-12-1-stored-xss-vulnerability-at-page-title-b6efba27891a</a></li>\n<li><a href=\"https://github.com/getformwork/formwork/commit/8781ee17ca9b9b7b0b57e090e7f2ba1b27dc1415\">https://github.com/getformwork/formwork/commit/8781ee17ca9b9b7b0b57e090e7f2ba1b27dc1415</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fvrh-wrpf-6q7h\">https://github.com/advisories/GHSA-fvrh-wrpf-6q7h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fvrh-wrpf-6q7h",
            "title": "[getformwork/formwork] Formwork Cross-site Scripting (XSS) from Page title field",
            "date_modified": "2024-05-28T14:22:32.000Z",
            "date_published": "2023-02-10T18:30:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fvrh-wrpf-6q7h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The GraphQL controller lacked any CSRF protection, meaning authenticated users could be forced or tricked into visiting a URL that would send a GET request to the affected web server that could mutate or destroy data without the user knowing.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-graphql/commit/b59ba397ff42d8934bd2d9c932514f898c327f64\">https://github.com/silverstripe/silverstripe-graphql/commit/b59ba397ff42d8934bd2d9c932514f898c327f64</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/graphql/SS-2018-007-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/graphql/SS-2018-007-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-007\">https://www.silverstripe.org/download/security-releases/ss-2018-007</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjg9-v8cf-f5q2\">https://github.com/advisories/GHSA-wjg9-v8cf-f5q2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjg9-v8cf-f5q2",
            "title": "[silverstripe/graphql] silverstripe/graphql Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-28T13:13:12.000Z",
            "date_published": "2024-05-28T13:13:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjg9-v8cf-f5q2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A potential SQL injection vulnerability was identified by using the silverstripe/postgresql database adapter. While unlikely to be exploitable, we have patched silverstripe/framework to ensure that table names are safely escaped before being passed to database adapters or user code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77\">https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d\">https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-020\">https://www.silverstripe.org/download/security-releases/ss-2018-020</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-265q-222x-52m6\">https://github.com/advisories/GHSA-265q-222x-52m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-265q-222x-52m6",
            "title": "[silverstripe/framework] silverstripe/framework has potential SQL Injection vulnerability in PostgreSQL database connector",
            "date_modified": "2024-05-28T13:01:50.000Z",
            "date_published": "2024-05-28T13:01:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-265q-222x-52m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A potential SQL injection vulnerability was identified by using the silverstripe/postgresql database adapter. While unlikely to be exploitable, we have patched silverstripe/framework to ensure that table names are safely escaped before being passed to database adapters or user code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77\">https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d\">https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-020\">https://www.silverstripe.org/download/security-releases/ss-2018-020</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-265q-222x-52m6\">https://github.com/advisories/GHSA-265q-222x-52m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-265q-222x-52m6",
            "title": "[silverstripe/framework] silverstripe/framework has potential SQL Injection vulnerability in PostgreSQL database connector",
            "date_modified": "2024-05-28T13:01:50.000Z",
            "date_published": "2024-05-28T13:01:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-265q-222x-52m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A potential SQL injection vulnerability was identified by using the silverstripe/postgresql database adapter. While unlikely to be exploitable, we have patched silverstripe/framework to ensure that table names are safely escaped before being passed to database adapters or user code.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77\">https://github.com/silverstripe/silverstripe-framework/commit/48bd335648188df9dae72be1e5f9c808f3fe1e77</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d\">https://github.com/silverstripe/silverstripe-framework/commit/fecedc2d98eeaaff6424fb59dc70ef6bdc6dc92d</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-020-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-020\">https://www.silverstripe.org/download/security-releases/ss-2018-020</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-265q-222x-52m6\">https://github.com/advisories/GHSA-265q-222x-52m6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-265q-222x-52m6",
            "title": "[silverstripe/framework] silverstripe/framework has potential SQL Injection vulnerability in PostgreSQL database connector",
            "date_modified": "2024-05-28T13:01:50.000Z",
            "date_published": "2024-05-28T13:01:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-265q-222x-52m6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A possible denial of service attack vector has been identified in the dev/build system controller.</p>\n<p>dev/build now has its own URL token, similar to flushtoken, to ensure users are authenticated when running dev/build outside of dev environments.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/0610f76da02ac53a1b51cdfe9eac34e943a66991\">https://github.com/silverstripe/silverstripe-framework/commit/0610f76da02ac53a1b51cdfe9eac34e943a66991</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/8d7c2dafabad505d769f3774c44e0595fb1a4cd9\">https://github.com/silverstripe/silverstripe-framework/commit/8d7c2dafabad505d769f3774c44e0595fb1a4cd9</a></li>\n<li><a href=\"https://github.com/silverstripe/silverstripe-framework/commit/af000bea9b16ea553cae7f7f662f74ab8dc343df\">https://github.com/silverstripe/silverstripe-framework/commit/af000bea9b16ea553cae7f7f662f74ab8dc343df</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-019-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2018-019-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-019\">https://www.silverstripe.org/download/security-releases/ss-2018-019</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cwgq-83w5-8jfq\">https://github.com/advisories/GHSA-cwgq-83w5-8jfq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cwgq-83w5-8jfq",
            "title": "[silverstripe/framework] silverstripe/framework has possible denial of service attack vector when flushing",
            "date_modified": "2024-05-28T12:59:06.000Z",
            "date_published": "2024-05-28T12:59:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cwgq-83w5-8jfq"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}