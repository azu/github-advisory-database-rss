{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<p>Symfony 2.0.11 carried a [similar] XXE security fix, however, on review of ZF2 I also noted a vulnerability to XML Entity Expansion (XEE) attacks whereby all extensions making use of libxml2 have no defense against XEE Quadratic Blowup Attacks. The vulnerability is a function of there being no current method of disabling custom entities in PHP (i.e. defined internal to the XML document without using external entities). In a QBA, a long entity can be defined and then referred to multiple times in document elements, creating a memory sink with which Denial Of Service attacks against a host's RAM can be mounted. The use of the LIBXML_NOENT or equivalent option in a dependent extension amplified the impact (it doesn't actually mean \"No Entities\"). In addition, libxml2's innate defense against the related Exponential or Billion Laugh's XEE attacks is active only so long as the LIBXML_PARSEHUGE is NOT set (it disables libxml2's hardcoded entity recursion limit). No instances of these two options were noted, but it's worth referencing for the future.</p>\n<p>Consider this (non-fatal) example:</p>\n<pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!DOCTYPE data [&lt;!ENTITY a\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"&gt;]&gt;\n&lt;data&gt;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&lt;/data&gt;\n</code></pre>\n<p>Increase the length of entity, and entity count to a few hundred, and peak memory usage will waste no time spiking the moment the nodeValue for is accessed since the entities will then be expanded by a simple multiplier effect. No external entities required.</p>\n<p>...</p>\n<p>This can be used in combination with the usual XXE defense of calling <code>libxml_disable_entity_loader(TRUE)</code> and, optionally, the LIBXML_NONET option (should local filesystem access be allowable). The DOCTYPE may be removed instead of rejecting the XML outright but this would likely result in other problems with the unresolved entities. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symfony/dependency-injection/commit/5c5040c890a8e4085dcd6fa3827f574ab5f71f4c\">https://github.com/symfony/dependency-injection/commit/5c5040c890a8e4085dcd6fa3827f574ab5f71f4c</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/dependency-injection/2012-08-28.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/dependency-injection/2012-08-28.yaml</a></li>\n<li><a href=\"https://symfony.com/blog/security-release-symfony-2-0-17-released\">https://symfony.com/blog/security-release-symfony-2-0-17-released</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c636-cg5r-2498\">https://github.com/advisories/GHSA-c636-cg5r-2498</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c636-cg5r-2498",
            "title": "[symfony/dependency-injection] Symfony XML Entity Expansion security vulnerability",
            "date_modified": "2024-05-29T19:59:15.000Z",
            "date_published": "2024-05-29T19:59:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c636-cg5r-2498"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A potential deserialisation vulnerability has been identified in the symbiote/silverstripe-multivaluefield which could allow an attacker to exploit implementations of this module via object injection.</p>\n<p>Support for handling PHP objects as values in this module has been deprecated, and the serialisation technique has been switched to using JSON for handling arrays.</p>\n<p>As well as this, a potential XSS (cross-site scripting) vulnerability has been identified and remediated.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/symbiote/silverstripe-multivaluefield/commit/31fbc8c208431fc7d7e96da6fa39ca057d978953\">https://github.com/symbiote/silverstripe-multivaluefield/commit/31fbc8c208431fc7d7e96da6fa39ca057d978953</a></li>\n<li><a href=\"https://github.com/symbiote/silverstripe-multivaluefield/commit/f523dfcb13b2bd9eb110ffa0c83087a49322ad3b\">https://github.com/symbiote/silverstripe-multivaluefield/commit/f523dfcb13b2bd9eb110ffa0c83087a49322ad3b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/symbiote/silverstripe-multivaluefield/SS-2018-017-1.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/symbiote/silverstripe-multivaluefield/SS-2018-017-1.yaml</a></li>\n<li><a href=\"https://www.silverstripe.org/download/security-releases/ss-2018-017\">https://www.silverstripe.org/download/security-releases/ss-2018-017</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g5vj-wj9x-4jg9\">https://github.com/advisories/GHSA-g5vj-wj9x-4jg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g5vj-wj9x-4jg9",
            "title": "[symbiote/silverstripe-multivaluefield] symbiote/silverstripe-multivaluefield Possible PHP Object Injection via Multi-Value Field Extension",
            "date_modified": "2024-05-29T18:53:49.000Z",
            "date_published": "2024-05-29T18:53:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g5vj-wj9x-4jg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884\">https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-945h-6vcv-pc8h\">https://github.com/advisories/GHSA-945h-6vcv-pc8h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h",
            "title": "[sylius/admin-bundle] Sylius Admin Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:29.000Z",
            "date_published": "2024-05-29T18:50:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884\">https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-945h-6vcv-pc8h\">https://github.com/advisories/GHSA-945h-6vcv-pc8h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h",
            "title": "[sylius/admin-bundle] Sylius Admin Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:29.000Z",
            "date_published": "2024-05-29T18:50:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884\">https://github.com/Sylius/SyliusAdminBundle/commit/79c2d963bed61411b1eef15715a74d2d96b91884</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/admin-bundle/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-945h-6vcv-pc8h\">https://github.com/advisories/GHSA-945h-6vcv-pc8h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h",
            "title": "[sylius/admin-bundle] Sylius Admin Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:29.000Z",
            "date_published": "2024-05-29T18:50:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-945h-6vcv-pc8h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b\">https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-65v7-wg35-2qpm\">https://github.com/advisories/GHSA-65v7-wg35-2qpm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm",
            "title": "[sylius/resource-bundle] Sylius Resource Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:23.000Z",
            "date_published": "2024-05-29T18:50:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b\">https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-65v7-wg35-2qpm\">https://github.com/advisories/GHSA-65v7-wg35-2qpm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm",
            "title": "[sylius/resource-bundle] Sylius Resource Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:23.000Z",
            "date_published": "2024-05-29T18:50:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Sylius 1.0.0 to 1.0.16, 1.1.0 to 1.1.8, 1.2.0 to 1.2.1 versions of AdminBundle and ResourceBundle are affected by this security issue.</p>\n<p>This issue has been fixed in Sylius 1.0.17, 1.1.9 and 1.2.2. Development branch for 1.3 release has also been fixed.</p>\n<h3 id=\"description\">Description</h3>\n<p>The following actions in the admin panel did not require a CSRF token:</p>\n<ul>\n<li>marking order’s payment as completed</li>\n<li>marking order’s payment as refunded</li>\n<li>marking product review as accepted</li>\n<li>marking product review as rejected</li>\n</ul>\n<h3 id=\"resolution\">Resolution</h3>\n<p>The issue is fixed by adding a required CSRF token to those actions.</p>\n<p>We also fixed <code>ResourceController</code>‘s  <code>applyStateMachineTransitionAction</code> method by adding a CSRF token check. If you use that action in the API context, you can disable it by adding <code>csrf_protection:</code> false to its routing configuration</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b\">https://github.com/Sylius/SyliusResourceBundle/commit/9720ac5a0a39ea2c2a395ef16a94a00aa86c418b</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/sylius/sylius/2018-07-09.yaml</a></li>\n<li><a href=\"https://sylius.com/blog/csrf-vulnerability-in-admin-panel\">https://sylius.com/blog/csrf-vulnerability-in-admin-panel</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-65v7-wg35-2qpm\">https://github.com/advisories/GHSA-65v7-wg35-2qpm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm",
            "title": "[sylius/resource-bundle] Sylius Resource Bundle Cross-Site Request Forgery vulnerability",
            "date_modified": "2024-05-29T18:50:23.000Z",
            "date_published": "2024-05-29T18:50:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-65v7-wg35-2qpm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Template authors could inject php code by choosing a malicous file name for an extends-tag. Users that cannot fully trust template authors should update asap.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Please upgrade to the most recent version of Smarty v4 or v5. There is no patch for v3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w\">https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35226\">https://nvd.nist.gov/vuln/detail/CVE-2024-35226</a></li>\n<li><a href=\"https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a\">https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4rmg-292m-wg3w\">https://github.com/advisories/GHSA-4rmg-292m-wg3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4rmg-292m-wg3w",
            "title": "[smarty/smarty] Smarty vulnerable to PHP Code Injection by malicious attribute in extends-tag",
            "date_modified": "2024-05-29T18:44:31.000Z",
            "date_published": "2024-05-29T18:44:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4rmg-292m-wg3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Template authors could inject php code by choosing a malicous file name for an extends-tag. Users that cannot fully trust template authors should update asap.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Please upgrade to the most recent version of Smarty v4 or v5. There is no patch for v3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w\">https://github.com/smarty-php/smarty/security/advisories/GHSA-4rmg-292m-wg3w</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35226\">https://nvd.nist.gov/vuln/detail/CVE-2024-35226</a></li>\n<li><a href=\"https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a\">https://github.com/smarty-php/smarty/commit/0be92bc8a6fb83e6e0d883946f7e7c09ba4e857a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4rmg-292m-wg3w\">https://github.com/advisories/GHSA-4rmg-292m-wg3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4rmg-292m-wg3w",
            "title": "[smarty/smarty] Smarty vulnerable to PHP Code Injection by malicious attribute in extends-tag",
            "date_modified": "2024-05-29T18:44:31.000Z",
            "date_published": "2024-05-29T18:44:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4rmg-292m-wg3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All SaaS and marketplace setups using Aimeos version from 2022/2023/2024 are affected by a potential denial of service attack</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to the latest 2022.10 LTS, 2023.10 LTS and 2024.04.7 version of the aimeos/aimeos-core package</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f\">https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461\">https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f\">https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17\">https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17\">https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7\">https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p",
            "title": "[aimeos/aimeos-core] Aimeos denial of service vulnerability in SaaS and marketplace setups",
            "date_modified": "2024-05-29T14:38:12.000Z",
            "date_published": "2024-05-29T14:38:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All SaaS and marketplace setups using Aimeos version from 2022/2023/2024 are affected by a potential denial of service attack</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to the latest 2022.10 LTS, 2023.10 LTS and 2024.04.7 version of the aimeos/aimeos-core package</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f\">https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461\">https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f\">https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17\">https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17\">https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7\">https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p",
            "title": "[aimeos/aimeos-core] Aimeos denial of service vulnerability in SaaS and marketplace setups",
            "date_modified": "2024-05-29T14:38:12.000Z",
            "date_published": "2024-05-29T14:38:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>All SaaS and marketplace setups using Aimeos version from 2022/2023/2024 are affected by a potential denial of service attack</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to the latest 2022.10 LTS, 2023.10 LTS and 2024.04.7 version of the aimeos/aimeos-core package</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/aimeos/aimeos-core/security/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f\">https://github.com/aimeos/aimeos-core/commit/66edb06a53e51d90e075aad1932811c53c40af6f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461\">https://github.com/aimeos/aimeos-core/commit/69e2ea127c4e2fd2e756a80a16442bea0351a461</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f\">https://github.com/aimeos/aimeos-core/commit/e933345915fc0cfafc6a011b853bc0228a61a45f</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17\">https://github.com/aimeos/aimeos-core/compare/2022.10.16...2022.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17\">https://github.com/aimeos/aimeos-core/compare/2023.10.16...2023.10.17</a></li>\n<li><a href=\"https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7\">https://github.com/aimeos/aimeos-core/compare/2024.04.6...2024.04.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xjm6-jfmg-qc6p\">https://github.com/advisories/GHSA-xjm6-jfmg-qc6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p",
            "title": "[aimeos/aimeos-core] Aimeos denial of service vulnerability in SaaS and marketplace setups",
            "date_modified": "2024-05-29T14:38:12.000Z",
            "date_published": "2024-05-29T14:38:11.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xjm6-jfmg-qc6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Prior to 5.2.1, the sendmail transport (<code>Swift_Transport_SendmailTransport</code>) was vulnerable to an arbitrary shell execution if the \"From\" header came from a non-trusted source and no \"Return-Path\" is configured. This has been fixed in 5.2.1. If you are using sendmail as a transport, you are encouraged to upgrade as soon as possible.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/swiftmailer/swiftmailer/commit/b4b78af55e5e87f5ff07c06c6be7963c44562f80\">https://github.com/swiftmailer/swiftmailer/commit/b4b78af55e5e87f5ff07c06c6be7963c44562f80</a></li>\n<li><a href=\"https://github.com/swiftmailer/swiftmailer/commit/efc430606a5faed864b969adfbdc5363ce2115a2\">https://github.com/swiftmailer/swiftmailer/commit/efc430606a5faed864b969adfbdc5363ce2115a2</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml</a></li>\n<li><a href=\"https://web.archive.org/web/20150219063146/http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released\">https://web.archive.org/web/20150219063146/http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released</a></li>\n<li><a href=\"http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released\">http://blog.swiftmailer.org/post/88660759928/security-fix-swiftmailer-5-2-1-released</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4qpj-gxxg-jqg4\">https://github.com/advisories/GHSA-4qpj-gxxg-jqg4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4qpj-gxxg-jqg4",
            "title": "[swiftmailer/swiftmailer] Swiftmailer Sendmail transport arbitrary shell execution",
            "date_modified": "2024-05-29T13:13:17.000Z",
            "date_published": "2024-05-29T13:13:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4qpj-gxxg-jqg4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The vulnerability pertains to the usage of an insecure random number generator (RNG) in the \"stormpath-sdk-php\" library. Specifically, the issue is present in the generation of UUID (Universally Unique Identifier) version 4 within the codebase.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/issues/132\">https://github.com/stormpath/stormpath-sdk-php/issues/132</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml</a></li>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/blob/15aee3007b8aa41c20cdf28fd650b8a2368a7fa9/src/Util/UUID.php#L167-L181\">https://github.com/stormpath/stormpath-sdk-php/blob/15aee3007b8aa41c20cdf28fd650b8a2368a7fa9/src/Util/UUID.php#L167-L181</a></li>\n<li><a href=\"https://github.com/stormpath/stormpath-sdk-php/blob/62698ea98ef89217f932e28cf3e511d39af3b4cf/src/Authc/Api/ApiKeyEncryptionOptions.php#L48-L50\">https://github.com/stormpath/stormpath-sdk-php/blob/62698ea98ef89217f932e28cf3e511d39af3b4cf/src/Authc/Api/ApiKeyEncryptionOptions.php#L48-L50</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q8fc-v85f-78pw\">https://github.com/advisories/GHSA-q8fc-v85f-78pw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q8fc-v85f-78pw",
            "title": "[stormpath/sdk] stormpath/sdk uses Insecure Random Number Generator",
            "date_modified": "2024-05-29T13:09:30.000Z",
            "date_published": "2024-05-29T13:09:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q8fc-v85f-78pw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>ScnSocialAuth version 1.15.2 has been released and includes a security for this vulnerability. Fix has been applied in <a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All versions below 1.15.2 are affected. dev-master is fixed starting from <a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></p>\n<h3 id=\"exploits\">Exploits</h3>\n<p>Because of missing escaping of the URL param redirect a XSS attack is possible.\nFor example: Setting the redirect param to <code>\"&gt;&lt;a%20href=\"http://github.com\"&gt;GitHub.com&lt;/a&gt;&lt;inpu%20type=\"hidden\"%20\"</code> would result in a link added to the login page.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>If you are using any version of ScnSocialAuth below 1.15.2 please upgrade immediately by running composer update.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/socalnick/scnsocialauth/issues/184\">https://github.com/socalnick/scnsocialauth/issues/184</a></li>\n<li><a href=\"https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700\">https://github.com/SocalNick/ScnSocialAuth/commit/4a00966c41bc37251586d007564c5c891eba3700</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/socalnick/scn-social-auth/2015-01-15.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/socalnick/scn-social-auth/2015-01-15.yaml</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6f5-4w43-2x63\">https://github.com/advisories/GHSA-g6f5-4w43-2x63</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6f5-4w43-2x63",
            "title": "[socalnick/scn-social-auth] ScnSocialAuth Cross-site Scripting vulnerability in login redirect param",
            "date_modified": "2024-05-29T13:04:33.000Z",
            "date_published": "2024-05-29T13:04:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6f5-4w43-2x63"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SimpleSAMLphp 1.17 includes a preview of the new user interface to be included in the future version 2.0. This new user interface can be enabled by setting the usenewui configuration option to true, and it includes a new admin interface in a module called admin, which can be disabled.</p>\n<h3 id=\"description\">Description</h3>\n<p>The new admin interface includes a way to view information about the host where SimpleSAMLphp is installed, by means of the phpinfo() PHP function. An endpoint that exposes the output of that function is included in the admin module for easier debugging.</p>\n<p>The aforementioned endpoint had no checks for administrator privileges. This would allow any individual to access the given endpoint without authenticating, gathering information about the affected system.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp 1.17 versions up to 1.17.7 are affected, provided that the new, experimental use interface is enabled, together with the new admin module.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker could leverage this issue by accessing the unprotected endpoint and gather intelligence about the host where SimpleSAMLphp is deployed, using it later for their own advantage in case other issues arise.</p>\n<p>However, the impact of this issue is deemed as low, given that the new user interface must be explicitly enabled by means of the usenewui configuration option, and the new admin module must also be enabled.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>Upgrade to SimpleSAMLphp 1.17.8 or 1.18. This can be done by downloading the package, or by running composer update. Refer to the documentation for instructions on how to run composer.</p>\n<p>Alternatively, the issue can be mitigated by either disabling the new user interface by setting the usenewui configuration option to false, or by disabling the admin module in the configuration:</p>\n<pre><code>    'module.enable' =&gt; [\n        ...\n        'admin' =&gt; false,\n        ...\n    ],\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/0e0d1f745f5491f9e848b1f3e6da198596bb8885\">https://github.com/simplesamlphp/simplesamlphp/commit/0e0d1f745f5491f9e848b1f3e6da198596bb8885</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-11-19.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-11-19.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201911-02\">https://simplesamlphp.org/security/201911-02</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppm4-r2vc-pg74\">https://github.com/advisories/GHSA-ppm4-r2vc-pg74</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppm4-r2vc-pg74",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp Information Disclosure vulnerability",
            "date_modified": "2024-05-28T21:26:22.000Z",
            "date_published": "2024-05-28T21:26:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppm4-r2vc-pg74"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SimpleSAMLphp uses metadata to determine how to interact with other SAML entities. This metadata includes what’s called endpoints, which are URLs belonging to that entity where SAML messages can be sent. These URLs are used directly by SimpleSAMLphp when a message is sent, either via an HTTP redirection or by automatically posting a form to them.</p>\n<h3 id=\"description\">Description</h3>\n<p>When sending a SAML message to another entity, SimpleSAMLphp will use the URL of the appropriate endpoint to redirect the user’s browser to it, or craft a form that will be automatically posted to it, depending on the SAML binding used. The URL that’s target of the message is fetched from the stored metadata for the given entity, and that metadata is trusted as correct.</p>\n<p>However, if that metadata has been altered by a malicious party (either an attacker or a rogue administrator) to substitute the URLs of the endpoints with javascript code, SimpleSAMLphp was blindly using them without any validation, trusting the contents of the metadata. This would lead to a reflected XSS where the javascript code is sent inline to the web browser, and if SimpleSAMLphp is not using a strict Content Security Policy to forbid inline javascript (which is the case of the default user interface), then the code will be executed in the end user’s browser.</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions are affected, up to 1.17.2.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If metadata is consumed for a rogue entity that includes javascript code in the corresponding endpoints, this javascript code might be run by users trying to access this entity.</p>\n<p>Even though it’s unlikely that an administrator would add metadata for an entity that contains such endpoints inadvertently, if metadata is consumed automatically (e.g. using metarefresh) it would be easier to have an scenario like the one described here if a SAML entity is compromised and its metadata modified.</p>\n<p>The severity is assessed as medium given the difficulty to exploit the issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/ce2294e092b3be7db2fc4e18e774b791d4564ff3\">https://github.com/simplesamlphp/simplesamlphp/commit/ce2294e092b3be7db2fc4e18e774b791d4564ff3</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-07-10.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2019-07-10.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201907-01\">https://simplesamlphp.org/security/201907-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vpr3-cw3h-prw8\">https://github.com/advisories/GHSA-vpr3-cw3h-prw8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vpr3-cw3h-prw8",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp Reflected Cross-site Scripting vulnerability",
            "date_modified": "2024-05-28T20:56:27.000Z",
            "date_published": "2024-05-28T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vpr3-cw3h-prw8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>SAML messages are usually signed to prove the identity of the issuer of the message. In the case of SAML authentication responses, correctly verifying the signature is critical to trust that the assertion contained inside the response was issued by a trusted third-party and the identity of the subject has been properly verified.</p>\n<p>A SAML message can be signed both at the message level and at the assertion level (if the message is an authentication response). When the whole authentication response message is unsigned, all the assertions contained inside must be signed independently in order to verify their authenticity. Failure to properly verify the authenticity of the entire message or individual assertions leads to the ability of an attacker to impersonate any user from any Identity Provider trusted by the Service Provider.</p>\n<h3 id=\"description\">Description</h3>\n<p>A signature validation bypass issue has been found in the <code>SimpleSAML_XML_Validator</code> class. This class performs the verification of the XML digital signature of a SAML 1 message with a given key.</p>\n<p>When a SAML 1 authentication response message is received, it is processed to verify its authenticity, including a check for the signature or signatures included in the message. If the message is not signed but the assertions contained in it are, the signatures of those assertions signed will be verified. Unsigned assertions will not be verified. After verifying every signed element in the response, a list of valid nodes is built, holding the DOM nodes of those XML elements that are signed and whose signatures have been successfully verified.</p>\n<p>Once this list is built, the assertions need to be processed individually. They are not processed until the getAttributes() method of the SimpleSAML_XML_Shib13_AuthnResponse class is called. This method iterates through the list of assertions contained in the response and makes sure they were validated in the previous signature verification step, by checking if their corresponding DOM nodes are in the list of those verified.</p>\n<p>The vulnerability is due to lax comparison of the node being checked and the nodes in the verified list. The isNodeValidated() method of the SimpleSAML_XML_Validator class checks if a given DOM node is in the validNodes array by means of the standard in_array() function. This function, however, will return unexpected results due to the default lax behaviour when checking data types in PHP. In this case, the fact that there is a DOM node in the list is enough for in_array() to return true when looking for any DOM node. This means any unsigned assertion will be considered verified if there is at least one assertion with a valid signature in the message being processed.</p>\n<p>This issue allows an attacker to generate a SAML 1 authentication response that contains two different assertions. The first assertion is the one the attacker wants the Service Provider to use, with custom attributes, expiration and even entityID (provided that the given entityID belongs to an Identity Provider that the Service Provider knows and trusts). The second is a legitimate assertion issued and signed by an Identity Provider trusted by the Service Provider. If the second assertion is still valid when sent by the attacker, SimpleSAMLphp will merge all the attributes found in both assertions, but the entityID registered for the authenticating third-party will be the one found in the first, tampered assertion. If the second (legitimate) assertion is already expired when the attacker sends it, only the attributes found in the tampered assertion will be used.</p>\n<p>The issue can be easily fixed by passing a third parameter to the in_array() function, telling it to perform strict comparisons when checking if an object is found inside a given array. This way, when the code evaluates if the tampered assertion is included in the list of verified assertions, it fails and only the legitimate assertion is used, if possible (e.g. it is not expired).</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions before and including 1.14.16.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An attacker can leverage this vulnerability to impersonate any user from any SAML 1 Identity Provider trusted by a SimpleSAMLphp Service Provider, with the only pre-requisite of a valid assertion previously sent to the affected Service Provider. As such, only those SimpleSAMLphp installations that have metadata deployed for SAML 1 Identity Providers (by default, listed in the metadata/shib13-idp-remote.php file, but could be in other locations depending on your local configuration) are affected.</p>\n<h3 id=\"resolution\">Resolution</h3>\n<p>Upgrade to the latest version. When an upgrade is not possible immediately, the following patch must be applied:</p>\n<pre><code>diff --git a/lib/SimpleSAML/XML/Validator.php b/lib/SimpleSAML/XML/Validator.php\nindex e4877f0..69236ef 100644\n--- a/lib/SimpleSAML/XML/Validator.php\n+++ b/lib/SimpleSAML/XML/Validator.php\n@@ -260,7 +260,7 @@ class SimpleSAML_XML_Validator {\n                assert('$node instanceof DOMNode');\n\n                while($node !== NULL) {\n-                       if(in_array($node, $this-&gt;validNodes)) {\n+                       if(in_array($node, $this-&gt;validNodes, true)) {\n                                return TRUE;\n                        }\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/e2d53086abbb253efb24ddcb49b116246eb0b6ca\">https://github.com/simplesamlphp/simplesamlphp/commit/e2d53086abbb253efb24ddcb49b116246eb0b6ca</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201710-01\">https://simplesamlphp.org/security/201710-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fjr2-r2mp-484p\">https://github.com/advisories/GHSA-fjr2-r2mp-484p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fjr2-r2mp-484p",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp signature validation bypass",
            "date_modified": "2024-05-28T19:29:39.000Z",
            "date_published": "2024-05-28T19:29:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fjr2-r2mp-484p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"background\">Background</h3>\n<p>In order to implement support for the SAML Enhanced Client or Proxy profile, the credentials obtained for authentication were stored in the state in order to pass them to the relevant routines. This, however, led to the credentials being recorded in the user’s session, which can be stored in permanent storage such as the local file system or a remote memcache or database server.</p>\n<h3 id=\"description\">Description</h3>\n<p>When an authentication request is received via the ECP profile, the username and password obtained this way were saved to the state array, which is used to pass relevant data to different routines that may need it. This is not a problem in itself. However, when the ECP profile is disabled in the Identity Provider, other bindings such as HTTP-POST or HTTP-Redirect will be used, and since redirections are involved, the state array is then persisted to the user’s session, effectively storing it in the session backend.</p>\n<p>The ECP profile, which uses the SOAP and PAOS bindings, does not involve any HTTP redirection for the user, and for that reason the state array containing the credentials is never persisted to the session. The logic for determining when to save the credentials to the state array assumed wrongly, though, that if the authentication request came in on the SOAP binding, that means the ECP profile is used. This may not be true as ECP can be disabled by configuration in the IdP’s hosted SAML metadata, and in that case SimpleSAMLphp would then try to default to a binding different than PAOS, such as HTTP-POST or HTTP-Redirect, effectively consolidating the entire state array to the user’s session as described before.</p>\n<p>In practice, any Identity Provider with the ECP profile disabled but metadata for an entity that supports ECP, would reject incoming ECP requests, but write the credentials obtained in the request to the user’s session, which will be stored in the session store, whichever is used (local file system in case PHP sessions are used, Memcache, Redis, relational databases, etc).</p>\n<h3 id=\"affected-versions\">Affected versions</h3>\n<p>All SimpleSAMLphp versions 1.16.x are affected, up to 1.16.2.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>An Identity Provider with metadata for trusted entities that support the SAML ECP profile, may end up storing the user’s credentials received from such entities in its own session storage, whatever that is, in case ECP is actually not enabled in the IdP. Under such circumstances, the credentials may be then accessible to administrators, other personnel or even malicious parties who may have access to the systems where sessions or their backups are stored.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/simplesamlphp/simplesamlphp/commit/44d1e3052930d93f0f554c25bc7c7602f8136880\">https://github.com/simplesamlphp/simplesamlphp/commit/44d1e3052930d93f0f554c25bc7c7602f8136880</a></li>\n<li><a href=\"https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2018-12-20.yaml\">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/2018-12-20.yaml</a></li>\n<li><a href=\"https://simplesamlphp.org/security/201812-01\">https://simplesamlphp.org/security/201812-01</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7wh8-jrq7-p27f\">https://github.com/advisories/GHSA-7wh8-jrq7-p27f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7wh8-jrq7-p27f",
            "title": "[simplesamlphp/simplesamlphp] SimpleSAMLphp exposes credentials in session storage",
            "date_modified": "2024-05-28T18:28:54.000Z",
            "date_published": "2024-05-28T18:28:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7wh8-jrq7-p27f"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}