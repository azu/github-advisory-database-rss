{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for PHP packages hosted at packagist.org",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/composer.json",
    "description": "Security Advisory for PHP packages hosted at packagist.org on GitHub",
    "items": [
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p>If values passed to a paragraph widget are not valid and contain a specific set of characters, applications are vulnerable to XSS attack against a user who opens a page on which a paragraph widget is rendered.</p>\n<p>Versions of dynamic dashboard from v3.0.0 through v3.0.2 are affected.</p>\n<p>Please upgrade to dynamic dashboard <a href=\"https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2\">v3.0.2</a>.</p>\n<h1 id=\"poc\">PoC</h1>\n<blockquote>\n<p>PoC will be published in a few weeks, once developers have had a chance to upgrade their apps.</p>\n</blockquote>\n<h1 id=\"response\">Response</h1>\n<p>This vulnerability (in paragraph widget only) was reported by <strong>Raghav Sharma</strong>, who reported the issue and patched the issue during the morning of 05/10/2024. Thank you <strong>Raghav Sharma</strong>.</p>\n<p>The review process concluded the same day at night, which revealed the issue was also present in paragraph widget. This was fixed the same day and dynamic dashboard <a href=\"https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2\">v3.0.2</a> followed.</p>\n<h2 id=\"note\">Note:</h2>\n<p>if you're published the view (blade files), you have to republish them or check the changes on release to update the affected file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc\">https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc</a></li>\n<li><a href=\"https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c\">https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c</a></li>\n<li><a href=\"https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a\">https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c6cw-g7fc-4gwc\">https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c6cw-g7fc-4gwc",
            "title": "[lara-zeus/artemis] Lara-zeus Dynamic Dashboard and Artemis do not validate paragraph widget values which can be used for XSS",
            "date_modified": "2024-10-07T14:55:31.000Z",
            "date_published": "2024-10-07T14:55:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c6cw-g7fc-4gwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"summary\">Summary</h1>\n<p>If values passed to a paragraph widget are not valid and contain a specific set of characters, applications are vulnerable to XSS attack against a user who opens a page on which a paragraph widget is rendered.</p>\n<p>Versions of dynamic dashboard from v3.0.0 through v3.0.2 are affected.</p>\n<p>Please upgrade to dynamic dashboard <a href=\"https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2\">v3.0.2</a>.</p>\n<h1 id=\"poc\">PoC</h1>\n<blockquote>\n<p>PoC will be published in a few weeks, once developers have had a chance to upgrade their apps.</p>\n</blockquote>\n<h1 id=\"response\">Response</h1>\n<p>This vulnerability (in paragraph widget only) was reported by <strong>Raghav Sharma</strong>, who reported the issue and patched the issue during the morning of 05/10/2024. Thank you <strong>Raghav Sharma</strong>.</p>\n<p>The review process concluded the same day at night, which revealed the issue was also present in paragraph widget. This was fixed the same day and dynamic dashboard <a href=\"https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2\">v3.0.2</a> followed.</p>\n<h2 id=\"note\">Note:</h2>\n<p>if you're published the view (blade files), you have to republish them or check the changes on release to update the affected file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc\">https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc</a></li>\n<li><a href=\"https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c\">https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c</a></li>\n<li><a href=\"https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a\">https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c6cw-g7fc-4gwc\">https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c6cw-g7fc-4gwc",
            "title": "[lara-zeus/dynamic-dashboard] Lara-zeus Dynamic Dashboard and Artemis do not validate paragraph widget values which can be used for XSS",
            "date_modified": "2024-10-07T14:55:31.000Z",
            "date_published": "2024-10-07T14:55:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c6cw-g7fc-4gwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in The Wikimedia Foundation Mediawiki - Cargo allows Cross-Site Scripting (XSS).This issue affects Mediawiki - Cargo: from 3.6.X before 3.6.1.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47847\">https://nvd.nist.gov/vuln/detail/CVE-2024-47847</a></li>\n<li><a href=\"https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063804\">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063804</a></li>\n<li><a href=\"https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063806\">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063806</a></li>\n<li><a href=\"https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063827\">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063827</a></li>\n<li><a href=\"https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063831\">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063831</a></li>\n<li><a href=\"https://phabricator.wikimedia.org/T368628\">https://phabricator.wikimedia.org/T368628</a></li>\n<li><a href=\"https://phabricator.wikimedia.org/T372211\">https://phabricator.wikimedia.org/T372211</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jqvm-9xm2-gc38\">https://github.com/advisories/GHSA-jqvm-9xm2-gc38</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqvm-9xm2-gc38",
            "title": "[mediawiki/cargo] Mediawiki Cargo extension vulnerable to Cross-site Scripting",
            "date_modified": "2024-10-07T14:50:53.000Z",
            "date_published": "2024-10-05T03:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqvm-9xm2-gc38"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>One of the sample scripts in PhpSpreadsheet is susceptible to a cross-site scripting (XSS) vulnerability due to improper handling of input where a number is expected leading to formula injection.</p>\n<h3 id=\"details\">Details</h3>\n<p>The following <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56\">code</a> in <code>45_Quadratic_equation_solver.php</code> concatenates the user supplied parameters directly into spreadsheet formulas. This allows an attacker to take control over the formula and output unsanitized data into the page, resulting in JavaScript execution.</p>\n<pre><code>$discriminantFormula = '=POWER(' . $_POST['B'] . ',2) - (4 * ' . $_POST['A'] . ' * ' . $_POST['C'] . ')';\n$discriminant = Calculation::getInstance()-&gt;calculateFormula($discriminantFormula);\n\n$r1Formula = '=IMDIV(IMSUM(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . ')';\n$r2Formula = '=IF(' . $discriminant . '=0,\"Only one root\",IMDIV(IMSUB(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . '))';\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Access <code>45_Quadratic_equation_solver.php</code> in a browser</li>\n<li>Enter any valid values for for <code>b</code> and <code>c</code>, and enter the following for <code>a</code></li>\n</ol>\n<pre><code>1) &amp; (\"1)),1)&amp;char(60)&amp;char(105)&amp;char(109)&amp;char(103)&amp;char(32)&amp;char(115)&amp;char(114)&amp;char(99)&amp;char(61)&amp;char(120)&amp;char(32)&amp;char(111)&amp;char(110)&amp;char(101)&amp;char(114)&amp;char(114)&amp;char(111)&amp;char(114)&amp;char(61)&amp;char(97)&amp;char(108)&amp;char(101)&amp;char(114)&amp;char(116)&amp;char(40)&amp;char(41)&amp;char(62)&amp;POWER(((1\") &amp;n(\"1\")&amp;(1\n</code></pre>\n<ol start=\"3\">\n<li>Press submit and observe that JavaScript is executed.</li>\n</ol>\n<p><img alt=\"exploit-phpspreadsheet\" src=\"https://user-images.githubusercontent.com/1211162/297062610-0cdb26d1-2b47-46e2-bd31-189b0694186d.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of this vulnerability on the project is expected to be relatively low since these are sample files that should not be included when the library is used properly (e.g., through composer). However, at least two instances of popular WordPress plugins have unintentionally exposed this file by including the entire git repository. Since these files also serve as reference points for developers using the library, addressing this issue can enhance security for users.</p>\n<p>A solution to fix the vulnerability is proposed below, and a request for a CVE assignment has been made to facilitate responsible disclosure of the security issue to the affected WordPress plugins.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>A quick and easy solution to prevent this attack is to force the parameters to be numerical values:</p>\n<pre><code class=\"language-php\">if (isset($_POST['submit'])) {\n    $_POST['A'] = floatval($_POST['A']);\n    $_POST['B'] = floatval($_POST['B']);\n    $_POST['C'] = floatval($_POST['C']);\n    if ($_POST['A'] == 0) {\n</code></pre>\n<p>Thank you for your time!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007\">https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759\">https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747\">https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/advisories/GHSA-v66g-p9x6-v98p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has an Unauthenticated Cross-Site-Scripting (XSS) in sample file",
            "date_modified": "2024-10-07T14:43:34.000Z",
            "date_published": "2024-10-07T14:43:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>One of the sample scripts in PhpSpreadsheet is susceptible to a cross-site scripting (XSS) vulnerability due to improper handling of input where a number is expected leading to formula injection.</p>\n<h3 id=\"details\">Details</h3>\n<p>The following <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56\">code</a> in <code>45_Quadratic_equation_solver.php</code> concatenates the user supplied parameters directly into spreadsheet formulas. This allows an attacker to take control over the formula and output unsanitized data into the page, resulting in JavaScript execution.</p>\n<pre><code>$discriminantFormula = '=POWER(' . $_POST['B'] . ',2) - (4 * ' . $_POST['A'] . ' * ' . $_POST['C'] . ')';\n$discriminant = Calculation::getInstance()-&gt;calculateFormula($discriminantFormula);\n\n$r1Formula = '=IMDIV(IMSUM(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . ')';\n$r2Formula = '=IF(' . $discriminant . '=0,\"Only one root\",IMDIV(IMSUB(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . '))';\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Access <code>45_Quadratic_equation_solver.php</code> in a browser</li>\n<li>Enter any valid values for for <code>b</code> and <code>c</code>, and enter the following for <code>a</code></li>\n</ol>\n<pre><code>1) &amp; (\"1)),1)&amp;char(60)&amp;char(105)&amp;char(109)&amp;char(103)&amp;char(32)&amp;char(115)&amp;char(114)&amp;char(99)&amp;char(61)&amp;char(120)&amp;char(32)&amp;char(111)&amp;char(110)&amp;char(101)&amp;char(114)&amp;char(114)&amp;char(111)&amp;char(114)&amp;char(61)&amp;char(97)&amp;char(108)&amp;char(101)&amp;char(114)&amp;char(116)&amp;char(40)&amp;char(41)&amp;char(62)&amp;POWER(((1\") &amp;n(\"1\")&amp;(1\n</code></pre>\n<ol start=\"3\">\n<li>Press submit and observe that JavaScript is executed.</li>\n</ol>\n<p><img alt=\"exploit-phpspreadsheet\" src=\"https://user-images.githubusercontent.com/1211162/297062610-0cdb26d1-2b47-46e2-bd31-189b0694186d.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of this vulnerability on the project is expected to be relatively low since these are sample files that should not be included when the library is used properly (e.g., through composer). However, at least two instances of popular WordPress plugins have unintentionally exposed this file by including the entire git repository. Since these files also serve as reference points for developers using the library, addressing this issue can enhance security for users.</p>\n<p>A solution to fix the vulnerability is proposed below, and a request for a CVE assignment has been made to facilitate responsible disclosure of the security issue to the affected WordPress plugins.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>A quick and easy solution to prevent this attack is to force the parameters to be numerical values:</p>\n<pre><code class=\"language-php\">if (isset($_POST['submit'])) {\n    $_POST['A'] = floatval($_POST['A']);\n    $_POST['B'] = floatval($_POST['B']);\n    $_POST['C'] = floatval($_POST['C']);\n    if ($_POST['A'] == 0) {\n</code></pre>\n<p>Thank you for your time!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007\">https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759\">https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747\">https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/advisories/GHSA-v66g-p9x6-v98p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has an Unauthenticated Cross-Site-Scripting (XSS) in sample file",
            "date_modified": "2024-10-07T14:43:34.000Z",
            "date_published": "2024-10-07T14:43:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>One of the sample scripts in PhpSpreadsheet is susceptible to a cross-site scripting (XSS) vulnerability due to improper handling of input where a number is expected leading to formula injection.</p>\n<h3 id=\"details\">Details</h3>\n<p>The following <a href=\"https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56\">code</a> in <code>45_Quadratic_equation_solver.php</code> concatenates the user supplied parameters directly into spreadsheet formulas. This allows an attacker to take control over the formula and output unsanitized data into the page, resulting in JavaScript execution.</p>\n<pre><code>$discriminantFormula = '=POWER(' . $_POST['B'] . ',2) - (4 * ' . $_POST['A'] . ' * ' . $_POST['C'] . ')';\n$discriminant = Calculation::getInstance()-&gt;calculateFormula($discriminantFormula);\n\n$r1Formula = '=IMDIV(IMSUM(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . ')';\n$r2Formula = '=IF(' . $discriminant . '=0,\"Only one root\",IMDIV(IMSUB(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . '))';\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<ol>\n<li>Access <code>45_Quadratic_equation_solver.php</code> in a browser</li>\n<li>Enter any valid values for for <code>b</code> and <code>c</code>, and enter the following for <code>a</code></li>\n</ol>\n<pre><code>1) &amp; (\"1)),1)&amp;char(60)&amp;char(105)&amp;char(109)&amp;char(103)&amp;char(32)&amp;char(115)&amp;char(114)&amp;char(99)&amp;char(61)&amp;char(120)&amp;char(32)&amp;char(111)&amp;char(110)&amp;char(101)&amp;char(114)&amp;char(114)&amp;char(111)&amp;char(114)&amp;char(61)&amp;char(97)&amp;char(108)&amp;char(101)&amp;char(114)&amp;char(116)&amp;char(40)&amp;char(41)&amp;char(62)&amp;POWER(((1\") &amp;n(\"1\")&amp;(1\n</code></pre>\n<ol start=\"3\">\n<li>Press submit and observe that JavaScript is executed.</li>\n</ol>\n<p><img alt=\"exploit-phpspreadsheet\" src=\"https://user-images.githubusercontent.com/1211162/297062610-0cdb26d1-2b47-46e2-bd31-189b0694186d.png\"></p>\n<h3 id=\"impact\">Impact</h3>\n<p>The impact of this vulnerability on the project is expected to be relatively low since these are sample files that should not be included when the library is used properly (e.g., through composer). However, at least two instances of popular WordPress plugins have unintentionally exposed this file by including the entire git repository. Since these files also serve as reference points for developers using the library, addressing this issue can enhance security for users.</p>\n<p>A solution to fix the vulnerability is proposed below, and a request for a CVE assignment has been made to facilitate responsible disclosure of the security issue to the affected WordPress plugins.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>A quick and easy solution to prevent this attack is to force the parameters to be numerical values:</p>\n<pre><code class=\"language-php\">if (isset($_POST['submit'])) {\n    $_POST['A'] = floatval($_POST['A']);\n    $_POST['B'] = floatval($_POST['B']);\n    $_POST['C'] = floatval($_POST['C']);\n    if ($_POST['A'] == 0) {\n</code></pre>\n<p>Thank you for your time!</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007\">https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759\">https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759</a></li>\n<li><a href=\"https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747\">https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v66g-p9x6-v98p\">https://github.com/advisories/GHSA-v66g-p9x6-v98p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p",
            "title": "[phpoffice/phpspreadsheet] PhpSpreadsheet has an Unauthenticated Cross-Site-Scripting (XSS) in sample file",
            "date_modified": "2024-10-07T14:43:34.000Z",
            "date_published": "2024-10-07T14:43:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v66g-p9x6-v98p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The <code>HtmlGenerator</code> class is subject to potential cross-site scripting (XSS) attack through a parsed malformed Minecraft server MOTD.</p>\n<h3 id=\"context\">Context</h3>\n<p>Minecraft server owners can set a so-called MOTD (Message of the Day) for their server that appears next to the server icon and below the server name on the multiplayer server list of a player's Minecraft client. The Minecraft server sends the MOTD in the <code>description</code> property of the <a href=\"https://wiki.vg/Server_List_Ping#Status_Response\">Status Response</a> packet. The <a href=\"https://github.com/jgniecki/MinecraftMotdParser\">jgniecki/MinecraftMotdParser</a> PHP library is able to parse the value of the <code>description</code> property, which can be either a string or an array of text components. By utilizing the aforementioned <code>HtmlGenerator</code> class, it is also able to transform the value into an HTML string that can be used to visualize the MOTD on a web page.</p>\n<h3 id=\"details\">Details</h3>\n<p>The <code>HtmlGenerator</code> iterates through objects of <code>MotdItem</code> that are contained in an object of <code>MotdItemCollection</code> to generate a HTML string. An attacker can make malicious inputs to the <code>color</code> and <code>text</code> properties of <code>MotdItem</code> to inject own HTML into a web page during web page generation. For example by sending a malicious MOTD from a Minecraft server under their control that was queried and passed to the <code>HtmlGenerator</code>.</p>\n<p>This XSS vulnerability exists because the values of these properties are neither filtered nor escaped, as can be seen here:</p>\n<ul>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a></li>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a></li>\n</ul>\n<h3 id=\"proof-of-concept\">Proof of Concept</h3>\n<p>JavaScript code can be injected into the <code>HtmlGenerator</code> by parsing either a string via <code>TextParser</code> or an array via <code>ArrayParser</code>. The following code examples demonstrate the vulnerability by triggering the alert dialog of the browser.</p>\n<h4 id=\"xss-via-textparser\">XSS via <code>TextParser</code></h4>\n<pre><code class=\"language-php\">&lt;?php\n\nuse DevLancer\\MinecraftMotdParser\\Collection\\MotdItemCollection;\nuse DevLancer\\MinecraftMotdParser\\Generator\\HtmlGenerator;\nuse DevLancer\\MinecraftMotdParser\\Parser\\TextParser;\n\n$motdCollection = (new TextParser())-&gt;parse('&lt;script&gt;alert(\"XSS on page load\")&lt;/script&gt;', new MotdItemCollection());\n\necho (new HtmlGenerator())-&gt;generate($motdCollection);\n</code></pre>\n<h4 id=\"xss-via-arrayparser\">XSS via <code>ArrayParser</code></h4>\n<pre><code class=\"language-php\">&lt;?php\n\nuse DevLancer\\MinecraftMotdParser\\Collection\\MotdItemCollection;\nuse DevLancer\\MinecraftMotdParser\\Generator\\HtmlGenerator;\nuse DevLancer\\MinecraftMotdParser\\Parser\\ArrayParser;\n\n$motdCollection = (new ArrayParser())-&gt;parse([\n    [\n        'color' =&gt; '#\" onmouseover=\"javascript:alert(\\'XSS when mouse pointer enters the span element\\')\"',\n        'text' =&gt; 'Hover me',\n    ],\n    [\n        'color' =&gt; '#000000',\n        'text' =&gt; '&lt;script&gt;alert(\"XSS on page load\")&lt;/script&gt;',\n    ]\n], new MotdItemCollection());\n\necho (new HtmlGenerator())-&gt;generate($motdCollection);\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>If the <code>HtmlGenerator</code> class of this library is used, this XSS vulnerability can potentially affect:</p>\n<ul>\n<li>Players visiting Minecraft server list websites (of which there are several dozen online, written in PHP) that display the MOTD.</li>\n<li>Users visiting Minecraft server status websites to query information about a Minecraft server.</li>\n<li>Server owners managing their Minecraft server via a web interface that displays the MOTD, where the attack could be carried out by a malicious Minecraft server plugin that modifies the MOTD without the server owner's consent.</li>\n</ul>\n<p>It is not clear if and which platforms depend on this library.</p>\n<h3 id=\"remediation\">Remediation</h3>\n<p>I suggest converting all HTML special characters in the values of the <code>color</code> and <code>text</code> properties to HTML entities. The display of the HTML entities will still be correct in the browser, but the XSS vulnerability will be eliminated as the values will no longer be interpreted as HTML by the browser.</p>\n<p>This could be achieved by introducing a new private <code>escape</code> function in the <code>HtmlGenerator</code> class:</p>\n<pre><code class=\"language-php\">private function escape(string $text): string\n{\n    return htmlentities($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n}\n</code></pre>\n<p>This function should be called in the following two lines:</p>\n<ul>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a>\nChange to: <code>$tags['span'][] = sprintf('color: %s;', $this-&gt;escape($motdItem-&gt;getColor()));</code></li>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a>\nChange to: <code>$value = sprintf($value, $this-&gt;escape($motdItem-&gt;getText()));</code></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/security/advisories/GHSA-q898-frwq-f3qp\">https://github.com/jgniecki/MinecraftMotdParser/security/advisories/GHSA-q898-frwq-f3qp</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47765\">https://nvd.nist.gov/vuln/detail/CVE-2024-47765</a></li>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c\">https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c</a></li>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a></li>\n<li><a href=\"https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80\">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q898-frwq-f3qp\">https://github.com/advisories/GHSA-q898-frwq-f3qp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q898-frwq-f3qp",
            "title": "[dev-lancer/minecraft-motd-parser] Minecraft MOTD Parser's HtmlGenerator vulnerable to XSS",
            "date_modified": "2024-10-04T18:51:36.000Z",
            "date_published": "2024-10-04T18:51:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q898-frwq-f3qp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows an attacker to inject arbitrary HTML/JavaScript code through the media download URL in Sulu CMS. It affects the SuluMediaBundle component. The vulnerability is a Reflected Cross-Site Scripting (XSS) issue, which could potentially allow attackers to steal sensitive information, manipulate the website's content, or perform actions on behalf of the victim.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has not been patched yet. Users should upgrade to patched versions once they become available. Currently affected versions are:</p>\n<ul>\n<li>2.6.4</li>\n<li>2.5.20</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Until an official patch is released, users can implement additional input validation and output encoding for the 'slug' parameter in the MediaStreamController's downloadAction method. Alternatively, configuring a Web Application Firewall (WAF) to filter potentially malicious input could serve as a temporary mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub repository: <a href=\"https://github.com/sulu/sulu\">https://github.com/sulu/sulu</a></li>\n<li>Vulnerable code: <a href=\"https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106\">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85\">https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47617\">https://nvd.nist.gov/vuln/detail/CVE-2024-47617</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda\">https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29\">https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29</a></li>\n<li><a href=\"https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106\">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6784-9c82-vr85\">https://github.com/advisories/GHSA-6784-9c82-vr85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6784-9c82-vr85",
            "title": "[sulu/sulu] Injection of arbitrary HTML/JavaScript code through the media download URL",
            "date_modified": "2024-10-03T18:26:27.000Z",
            "date_published": "2024-10-03T18:26:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6784-9c82-vr85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>This vulnerability allows an attacker to inject arbitrary HTML/JavaScript code through the media download URL in Sulu CMS. It affects the SuluMediaBundle component. The vulnerability is a Reflected Cross-Site Scripting (XSS) issue, which could potentially allow attackers to steal sensitive information, manipulate the website's content, or perform actions on behalf of the victim.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has not been patched yet. Users should upgrade to patched versions once they become available. Currently affected versions are:</p>\n<ul>\n<li>2.6.4</li>\n<li>2.5.20</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Until an official patch is released, users can implement additional input validation and output encoding for the 'slug' parameter in the MediaStreamController's downloadAction method. Alternatively, configuring a Web Application Firewall (WAF) to filter potentially malicious input could serve as a temporary mitigation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li>GitHub repository: <a href=\"https://github.com/sulu/sulu\">https://github.com/sulu/sulu</a></li>\n<li>Vulnerable code: <a href=\"https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106\">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85\">https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47617\">https://nvd.nist.gov/vuln/detail/CVE-2024-47617</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda\">https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29\">https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29</a></li>\n<li><a href=\"https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106\">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6784-9c82-vr85\">https://github.com/advisories/GHSA-6784-9c82-vr85</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6784-9c82-vr85",
            "title": "[sulu/sulu] Injection of arbitrary HTML/JavaScript code through the media download URL",
            "date_modified": "2024-10-03T18:26:27.000Z",
            "date_published": "2024-10-03T18:26:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6784-9c82-vr85"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In Sulu v2.0.0 through v2.6.4 are vulnerable against XSS whereas a low privileged user with an access to the “Media” section can upload an SVG file with a malicious payload. Once uploaded and accessed, the malicious javascript will be executed on the victims’ (other users including admins) browsers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sulu/sulu/security/advisories/GHSA-255w-87rh-rg44\">https://github.com/sulu/sulu/security/advisories/GHSA-255w-87rh-rg44</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-47618\">https://nvd.nist.gov/vuln/detail/CVE-2024-47618</a></li>\n<li><a href=\"https://github.com/sulu/sulu/commit/ca72f75eebe41ea7726624d8aea7da6c425f1eb9\">https://github.com/sulu/sulu/commit/ca72f75eebe41ea7726624d8aea7da6c425f1eb9</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-255w-87rh-rg44\">https://github.com/advisories/GHSA-255w-87rh-rg44</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-255w-87rh-rg44",
            "title": "[sulu/sulu] Cross-site Scripting via uploaded SVG",
            "date_modified": "2024-10-03T18:25:41.000Z",
            "date_published": "2024-10-03T18:25:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-255w-87rh-rg44"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/core] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/core] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/core-recommended] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/core-recommended] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/drupal] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45440\">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/issues/3457781\">https://www.drupal.org/project/drupal/issues/3457781</a></li>\n<li><a href=\"https://senscybersecurity.nl/CVE-2024-45440-Explained\">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>\n<li><a href=\"https://github.com/github/advisory-database/pull/4827\">https://github.com/github/advisory-database/pull/4827</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/10.3.6\">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>\n<li><a href=\"https://www.drupal.org/project/drupal/releases/11.0.5\">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mg8j-w93w-xjgc\">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc",
            "title": "[drupal/drupal] Drupal Full Path Disclosure",
            "date_modified": "2024-10-03T17:34:33.000Z",
            "date_published": "2024-08-29T12:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mg8j-w93w-xjgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Contao 5.4.1 allows an authenticated admin account to upload a SVG file containing malicious javascript code into the target system. If the file is accessed through the website, it could lead to a Cross-Site Scripting (XSS) attack or execute arbitrary code via a crafted javascript to the target.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45965\">https://nvd.nist.gov/vuln/detail/CVE-2024-45965</a></li>\n<li><a href=\"https://grimthereaperteam.medium.com/contao-5-4-1-malicious-file-upload-xss-in-svg-30edb8820ecb\">https://grimthereaperteam.medium.com/contao-5-4-1-malicious-file-upload-xss-in-svg-30edb8820ecb</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrw8-5368-phm3\">https://github.com/advisories/GHSA-mrw8-5368-phm3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrw8-5368-phm3",
            "title": "[contao/contao] Contao allows admin an account to upload SVG file containing malicious JavaScript",
            "date_modified": "2024-10-02T22:35:35.000Z",
            "date_published": "2024-10-02T21:30:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrw8-5368-phm3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Zenario 9.7.61188 is vulnerable to Cross Site Scripting (XSS) in the Image library via the \"Organizer tags\" field.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45964\">https://nvd.nist.gov/vuln/detail/CVE-2024-45964</a></li>\n<li><a href=\"https://grimthereaperteam.medium.com/zenario-9-7-61188-reflect-xss-bee4ab9187e7\">https://grimthereaperteam.medium.com/zenario-9-7-61188-reflect-xss-bee4ab9187e7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2cc5-429x-p387\">https://github.com/advisories/GHSA-2cc5-429x-p387</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2cc5-429x-p387",
            "title": "[tribalsystems/zenario] Zenario Cross Site Scripting in the Image library",
            "date_modified": "2024-10-02T22:35:25.000Z",
            "date_published": "2024-10-02T21:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2cc5-429x-p387"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>October 3.6.30 allows an authenticated admin account to upload a PDF file containing malicious JavaScript into the target system. If the file is accessed through the website, it could lead to a Cross-Site Scripting (XSS) attack or execute arbitrary code via a crafted JavaScript to the target.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45962\">https://nvd.nist.gov/vuln/detail/CVE-2024-45962</a></li>\n<li><a href=\"https://grimthereaperteam.medium.com/october-cms-3-6-30-stored-xss-ddf2be7a226e\">https://grimthereaperteam.medium.com/october-cms-3-6-30-stored-xss-ddf2be7a226e</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-hxpp-g76m-qhvg\">https://github.com/advisories/GHSA-hxpp-g76m-qhvg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxpp-g76m-qhvg",
            "title": "[october/october] October allows an admin account to upload PDF containing malicious JavaScript",
            "date_modified": "2024-10-02T22:35:21.000Z",
            "date_published": "2024-10-02T21:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxpp-g76m-qhvg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Zenario 9.7.61188 allows authenticated admin users to upload PDF files containing malicious code into the target system. If the PDF file is accessed through the website, it can trigger a Cross Site Scripting (XSS) attack.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-45960\">https://nvd.nist.gov/vuln/detail/CVE-2024-45960</a></li>\n<li><a href=\"https://grimthereaperteam.medium.com/zenario-9-7-9-7-61188-malicious-file-upload-xss-in-pdf-eb11729fe059\">https://grimthereaperteam.medium.com/zenario-9-7-9-7-61188-malicious-file-upload-xss-in-pdf-eb11729fe059</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3636-hx62-pv26\">https://github.com/advisories/GHSA-3636-hx62-pv26</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3636-hx62-pv26",
            "title": "[tribalsystems/zenario] Zenario allows authenticated admin users to upload PDF files containing malicious code",
            "date_modified": "2024-10-02T22:35:06.000Z",
            "date_published": "2024-10-02T21:30:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3636-hx62-pv26"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}