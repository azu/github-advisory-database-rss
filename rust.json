{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>If the preopened directory has a symlink pointing outside, WASI programs can traverse the symlink and access host filesystem if the caller sets both <code>oflags::creat</code> and <code>rights::fd_write</code>. Programs can also crash the runtime by creating a symlink pointing outside with <code>path_symlink</code> and <code>path_open</code>ing the link.</p>\n<h3 id=\"details\">Details</h3>\n<h3 id=\"poc\">PoC</h3>\n<p>Setup a filesystem as follows.</p>\n<pre><code>.\n├── outside.file\n└── preopen\n    └── dir\n        └── file -&gt; ../../outside.file\n</code></pre>\n<p>Compile this Rust snippet with <code>wasi</code> v0.11 (for the preview1 API).</p>\n<pre><code class=\"language-rust\">fn main() {\n    unsafe {\n        let filefd = wasi::path_open(\n            5,\n            wasi::LOOKUPFLAGS_SYMLINK_FOLLOW,\n            \"app/dir/file\",\n            wasi::OFLAGS_CREAT,\n            wasi::RIGHTS_FD_READ | wasi::RIGHTS_FD_WRITE,\n            0,\n            0,\n        )\n        .unwrap();\n        eprintln!(\"filefd: {filefd}\");\n\n        let mut buf = [0u8; 10];\n        let iovs = [wasi::Iovec {\n            buf: buf.as_mut_ptr(),\n            buf_len: buf.len(),\n        }];\n\n        let read = wasi::fd_read(filefd, &amp;iovs).unwrap();\n\n        eprintln!(\"read {read}: {}\", String::from_utf8_lossy(&amp;buf));\n    }\n}\n</code></pre>\n<p>Run the compiled binary with Wasmer preopening <code>preopen/</code>:</p>\n<pre><code>wasmer run --mapdir /app:preopen a.wasm\n</code></pre>\n<p>This should not print the contents of the <code>outside.file</code>. Other runtimes like Wasmtime can successfully block this call. But Wasmer prints the contents of the file.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5\">https://github.com/wasmerio/wasmer/security/advisories/GHSA-55f3-3qvg-8pv5</a></li>\n<li><a href=\"https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662\">https://github.com/wasmerio/wasmer/commit/b9483d022c602b994103f78ecfe46f017f8ac662</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-55f3-3qvg-8pv5\">https://github.com/advisories/GHSA-55f3-3qvg-8pv5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55f3-3qvg-8pv5",
            "title": "[wasmer] Symlink bypasses filesystem sandbox",
            "date_modified": "2024-06-07T19:40:01.000Z",
            "date_published": "2024-06-07T19:40:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55f3-3qvg-8pv5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When receiving a message from a client that sent an invalid RSA premaster secret, an issue in s2n-tls results in the server performing additional processing when the premaster secret contains an incorrect client hello version. While no practical attack on s2n-tls has been demonstrated, this causes a small timing difference which could theoretically be used as described in the Marvin Attack [1].</p>\n<p>We would like to thank Hubert Kario [2] for reporting this issue.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>The extent of this issue is a timing difference. No practical attack on s2n-tls has been demonstrated.</p>\n<p>This issue affects server applications that permit RSA key exchange. Applications that use the default, built-in blinding feature or properly implement self-service blinding are not affected.</p>\n<p>Impacted versions: &lt;= v1.4.15.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The patch is included in v1.4.16 [3].</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Applications can work around this issue by using an s2n-tls security policy that disallows RSA key exchange.</p>\n<p>If you have any questions or comments about this advisory we ask that you contact AWS/Amazon Security via our vulnerability reporting page [4] or directly via email to <a href=\"mailto:aws-security@amazon.com\">aws-security@amazon.com</a>. Please do not create a public GitHub issue.</p>\n<p>[1] <a href=\"https://people.redhat.com/~hkario/marvin/\">https://people.redhat.com/~hkario/marvin/</a>\n[2] <a href=\"https://github.com/tomato42\">https://github.com/tomato42</a>\n[3] <a href=\"https://github.com/aws/s2n-tls/releases/tag/v1.4.16\">https://github.com/aws/s2n-tls/releases/tag/v1.4.16</a>\n[4] <a href=\"https://aws.amazon.com/security/vulnerability-reporting\">https://aws.amazon.com/security/vulnerability-reporting</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/aws/s2n-tls/security/advisories/GHSA-52xf-5p2m-9wrv\">https://github.com/aws/s2n-tls/security/advisories/GHSA-52xf-5p2m-9wrv</a></li>\n<li><a href=\"https://github.com/aws/s2n-tls/commit/114ccab0ff2cde491203ac841837d0d39b767412\">https://github.com/aws/s2n-tls/commit/114ccab0ff2cde491203ac841837d0d39b767412</a></li>\n<li><a href=\"https://github.com/aws/s2n-tls/releases/tag/v1.4.16\">https://github.com/aws/s2n-tls/releases/tag/v1.4.16</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-52xf-5p2m-9wrv\">https://github.com/advisories/GHSA-52xf-5p2m-9wrv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-52xf-5p2m-9wrv",
            "title": "[s2n-tls] s2n-tls has a potentially observable differences in RSA premaster secret handling",
            "date_modified": "2024-06-06T14:26:27.000Z",
            "date_published": "2024-06-06T14:26:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-52xf-5p2m-9wrv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h1 id=\"reduced-entropy-due-to-inadequate-character-set-usage\">Reduced entropy due to inadequate character set usage</h1>\n<h2 id=\"description\">Description</h2>\n<p>Affected versions of the nano-id crate incorrectly generated IDs using a reduced character set in the <code>nano_id::base62</code> and <code>nano_id::base58</code> functions. Specifically, the <code>base62</code> function used a character set of 32 symbols instead of the intended 62 symbols, and the <code>base58</code> function used a character set of 16 symbols instead of the intended 58 symbols. Additionally, the <code>nano_id::gen</code> macro is also affected when a custom character set that is not a power of 2 in size is specified.</p>\n<p>It should be noted that <code>nano_id::base64</code> is not affected by this vulnerability.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This can result in a significant reduction in entropy, making the generated IDs predictable and vulnerable to brute-force attacks when the IDs are used in security-sensitive contexts such as session tokens or unique identifiers.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>The flaws were corrected in commit <a href=\"https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23\">a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a> by updating the the <code>nano_id::gen</code> macro to use all specified characters correctly.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-rust\">use std::collections::BTreeSet;\n\nfn main() {\n    test_base58();\n    test_base62();\n}\n\nfn test_base58() {\n    let mut produced_symbols = BTreeSet::new();\n\n    for _ in 0..100_000 {\n        let id = nano_id::base58::&lt;10&gt;();\n        for c in id.chars() {\n            produced_symbols.insert(c);\n        }\n    }\n\n    println!(\n        \"{} symbols generated from nano_id::base58\",\n        produced_symbols.len()\n    );\n}\n\nfn test_base62() {\n    let mut produced_symbols = BTreeSet::new();\n\n    for _ in 0..100_000 {\n        let id = nano_id::base62::&lt;10&gt;();\n        for c in id.chars() {\n            produced_symbols.insert(c);\n        }\n    }\n\n    println!(\n        \"{} symbols generated from nano_id::base62\",\n        produced_symbols.len()\n    );\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94\">https://github.com/viz-rs/nano-id/security/advisories/GHSA-9hc7-6w9r-wj94</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-36400\">https://nvd.nist.gov/vuln/detail/CVE-2024-36400</a></li>\n<li><a href=\"https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23\">https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9hc7-6w9r-wj94\">https://github.com/advisories/GHSA-9hc7-6w9r-wj94</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9hc7-6w9r-wj94",
            "title": "[nano-id] Unable to generate the correct character set",
            "date_modified": "2024-06-04T18:40:35.000Z",
            "date_published": "2024-06-04T18:40:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9hc7-6w9r-wj94"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"description\">Description</h2>\n<p>Affected versions of the nano-id crate incorrectly generated IDs using a reduced character set in the <code>nano_id::base62</code> and <code>nano_id::base58</code> functions. Specifically, the <code>base62</code> function used a character set of 32 symbols instead of the intended 62 symbols, and the <code>base58</code> function used a character set of 16 symbols instead of the intended 58 symbols. Additionally, the <code>nano_id::gen</code> macro is also affected when a custom character set that is not a power of 2 in size is specified.</p>\n<p>It should be noted that <code>nano_id::base64</code> is not affected by this vulnerability.</p>\n<h2 id=\"impact\">Impact</h2>\n<p>This can result in a significant reduction in entropy, making the generated IDs predictable and vulnerable to brute-force attacks when the IDs are used in security-sensitive contexts such as session tokens or unique identifiers.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>The flaws were corrected in commit <a href=\"https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23\">a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a> by updating the the <code>nano_id::gen</code> macro to use all specified characters correctly.</p>\n<h2 id=\"poc\">PoC</h2>\n<pre><code class=\"language-rust\">use std::collections::BTreeSet;\n\nfn main() {\n    test_base58();\n    test_base62();\n}\n\nfn test_base58() {\n    let mut produced_symbols = BTreeSet::new();\n\n    for _ in 0..100_000 {\nid = \"RUSTSEC-2024-0343\"\n        for c in id.chars() {\n            produced_symbols.insert(c);\n        }\n    }\n\n    println!(\n        \"{} symbols generated from nano_id::base58\",\n        produced_symbols.len()\n    );\n}\n\nfn test_base62() {\n    let mut produced_symbols = BTreeSet::new();\n\n    for _ in 0..100_000 {\nid = \"RUSTSEC-2024-0343\"\n        for c in id.chars() {\n            produced_symbols.insert(c);\n        }\n    }\n\n    println!(\n        \"{} symbols generated from nano_id::base62\",\n        produced_symbols.len()\n    );\n}\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23\">https://github.com/viz-rs/nano-id/commit/a9022772b2f1ce38929b5b81eccc670ac9d3ab23</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0343.html\">https://rustsec.org/advisories/RUSTSEC-2024-0343.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2hfw-w739-p7x5\">https://github.com/advisories/GHSA-2hfw-w739-p7x5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2hfw-w739-p7x5",
            "title": "[nano-id] nano-id reduced entropy due to inadequate character set usage",
            "date_modified": "2024-06-04T17:49:20.000Z",
            "date_published": "2024-06-04T17:49:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2hfw-w739-p7x5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>qdrant/qdrant version 1.9.0-dev is vulnerable to path traversal due to improper input validation in the <code>/collections/{name}/snapshots/upload</code> endpoint. By manipulating the <code>name</code> parameter through URL encoding, an attacker can upload a file to an arbitrary location on the system, such as <code>/root/poc.txt</code>. This vulnerability allows for the writing and overwriting of arbitrary files on the server, potentially leading to a full takeover of the system. The issue is fixed in version 1.9.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-3584\">https://nvd.nist.gov/vuln/detail/CVE-2024-3584</a></li>\n<li><a href=\"https://github.com/qdrant/qdrant/commit/15479a45ffa3b955485ae516696f7e933a8cce8a\">https://github.com/qdrant/qdrant/commit/15479a45ffa3b955485ae516696f7e933a8cce8a</a></li>\n<li><a href=\"https://huntr.com/bounties/5c7c82e2-4873-40b7-a5f3-0f4a42642f73\">https://huntr.com/bounties/5c7c82e2-4873-40b7-a5f3-0f4a42642f73</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcr2-h8hv-6227\">https://github.com/advisories/GHSA-xcr2-h8hv-6227</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcr2-h8hv-6227",
            "title": "[qdrant] qdrant is vulnerable to path traversal due to improper input validation in the `/collections/{name}/snapshots/upload` endpoint",
            "date_modified": "2024-06-02T22:30:10.000Z",
            "date_published": "2024-06-02T22:30:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcr2-h8hv-6227"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the <a href=\"https://v1.tauri.app/api/config/#securityconfig.dangerousremotedomainipcaccess\"><code>dangerousRemoteDomainIpcAccess</code></a> in v1 and in the <a href=\"https://v2.tauri.app/security/capabilities/#remote-api-access\"><code>capabilities</code></a> in v2.\nThis bypasses the origin check and allows iFrames to access the IPC endpoints exposed to the parent window.</p>\n<p>For this to be exploitable, an attacker must have script execution (e.g. XSS) in a script-enabled iFrame of a Tauri application.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>The patches include changes to wry and the behaviour of Tauri applications using iFrames. Previously, we injected the Tauri IPC initialization script into iFrames on MacOS, which was unintended. This is now also disabled to be consistent with all other supported operating systems.</p>\n<p>This means that the Tauri invoke functionality is no longer accessible from iFrames, except on Windows when the origin of the Tauri window and the origin of the iFrame are the same.</p>\n<p>We have also added a new protection mechanism to the IPC layer to protect against iFrames directly using the WebView IPC functionality (e.g. via <code>window.ipc.postMessage</code>).\nThis introduces an invoke key (<code>__TAURI_INVOKE_KEY__</code>) which is used to prevent frames that have not been initialized by the Tauri core from sending messages to the Tauri IPC.\nThis key is <strong>not</strong> used to protect against compromised Tauri windows or WebViews and is <strong>only</strong> intended to block IPC access from sub-frames.</p>\n<p>Unauthorized messages to the Tauri IPC from an iFrame or other non-initialized context will log a warning and the potentially malicious IPC call will be ignored.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>These workarounds should only be considered if you are unable to upgrade to the patched Tauri version in time.</p>\n<p>As a workaround for v1 Tauri applications, we recommend using a dedicated window for untrusted origins instead of iFrames, or disabling script execution within the iFrame.</p>\n<p>For v2 Tauri applications targeting Linux, it is possible to use either a dedicated window or <a href=\"https://github.com/tauri-apps/tauri/tree/dev/examples/multiwebview\">multiple WebViews</a> in the main window to simulate iFrame behavior.\nOn other platforms, it is only possible to use dedicated windows or disable script execution inside the iFrame, as described for v1.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri or\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<p>The original submissions from the reporter:</p>\n<blockquote>\n<h3 id=\"context\">Context</h3>\n<p>This is following up on the comments here: <a href=\"https://github.com/tauri-apps/tauri/issues/8316\">https://github.com/tauri-apps/tauri/issues/8316</a>, and here: <a href=\"https://discord.com/channels/616186924390023171/1227969106091966475\">https://discord.com/channels/616186924390023171/1227969106091966475</a>. I was asked to submit my findings as a vulnerability report.</p>\n<p>Firstly, thank you to all of you from the core team that helped out and guided me through understanding this issue! Huge fan of Tauri, and I'm excited to see it succeed!</p>\n<h3 id=\"summary\">Summary</h3>\n<p>In short, <strong>any iframe you add in your Tauri frontend will get access to Tauri APIs, even in isolation mode</strong>.</p>\n<p>Any embedded iframe that you don't own will be able to invoke the same APIs your app does. While isolation mode allows for finer grained control of what Tauri APIs can be called, it is not possible to determine if a request is coming your own app, or from a potentially malicious iframe.</p>\n<p>This means your app could be open to malicious iframe being able to execute any command your app can, and there doesn't seem to be a mechanism to filter these out.</p>\n<h3 id=\"details\">Details</h3>\n<p>I'm not an expert in Tauri source code, so I can't be sure I'm on the right track here, but I assume this has to do with how the webview is bootstrapped with the Tauri APIs.</p>\n<p>I know there's various handlers that get set, such as opening <code>target=\"_blank\"</code> links via a shell command, and of course setting <code>invoke</code> and other such APIs. Sounds like the issue is somewhere there and the APIs are being injected where they shouldn't.</p>\n<p>Technically it seems that an attacker couldn't actually receive a response from the command it executes. Tauri IPC can't route the response back to the invoking iframe, but the action is still executed, with the response just being dropped. You see these messages in the logs:</p>\n<pre><code>[Warning] [TAURI] Couldn't find callback id 3399436348 in window. This happens when the app is reloaded while Rust is running an asynchronous operation.\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Repository with reproduction steps: <a href=\"https://github.com/begleynk/tauri-sandbox-iframe-escape-poc\">https://github.com/begleynk/tauri-sandbox-iframe-escape-poc</a></p>\n<p>Building on that POC, here is a video of a Codepen iframe running inside an isolation mode Tauri app, invoking the same \"Greet\" command the frontend is invoking.</p>\n<p><a href=\"https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c\">https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c</a></p>\n<p>This is done with the following code running inside Codepen:</p>\n<pre><code class=\"language-javascript\">window.__TAURI_INVOKE__(\"greet\", { name: \"From CodePen\" })\n</code></pre>\n<h3 id=\"impact-1\">Impact</h3>\n<p>Valid commands with potentially unwanted consequences (\"delete project\", \"transfer credits\", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app.</p>\n</blockquote>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/issues/8316\">https://github.com/tauri-apps/tauri/issues/8316</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d\">https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608\">https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35222\">https://nvd.nist.gov/vuln/detail/CVE-2024-35222</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57fm-592m-34r7\">https://github.com/advisories/GHSA-57fm-592m-34r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57fm-592m-34r7",
            "title": "[tauri] iFrames Bypass Origin Checks for Tauri API Access Control",
            "date_modified": "2024-05-23T16:06:43.000Z",
            "date_published": "2024-05-23T14:11:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57fm-592m-34r7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Remote origin iFrames in Tauri applications can access the Tauri IPC endpoints without being explicitly allowed in the <a href=\"https://v1.tauri.app/api/config/#securityconfig.dangerousremotedomainipcaccess\"><code>dangerousRemoteDomainIpcAccess</code></a> in v1 and in the <a href=\"https://v2.tauri.app/security/capabilities/#remote-api-access\"><code>capabilities</code></a> in v2.\nThis bypasses the origin check and allows iFrames to access the IPC endpoints exposed to the parent window.</p>\n<p>For this to be exploitable, an attacker must have script execution (e.g. XSS) in a script-enabled iFrame of a Tauri application.</p>\n<h2 id=\"patches\">Patches</h2>\n<p>The patches include changes to wry and the behaviour of Tauri applications using iFrames. Previously, we injected the Tauri IPC initialization script into iFrames on MacOS, which was unintended. This is now also disabled to be consistent with all other supported operating systems.</p>\n<p>This means that the Tauri invoke functionality is no longer accessible from iFrames, except on Windows when the origin of the Tauri window and the origin of the iFrame are the same.</p>\n<p>We have also added a new protection mechanism to the IPC layer to protect against iFrames directly using the WebView IPC functionality (e.g. via <code>window.ipc.postMessage</code>).\nThis introduces an invoke key (<code>__TAURI_INVOKE_KEY__</code>) which is used to prevent frames that have not been initialized by the Tauri core from sending messages to the Tauri IPC.\nThis key is <strong>not</strong> used to protect against compromised Tauri windows or WebViews and is <strong>only</strong> intended to block IPC access from sub-frames.</p>\n<p>Unauthorized messages to the Tauri IPC from an iFrame or other non-initialized context will log a warning and the potentially malicious IPC call will be ignored.</p>\n<h2 id=\"workarounds\">Workarounds</h2>\n<p>These workarounds should only be considered if you are unable to upgrade to the patched Tauri version in time.</p>\n<p>As a workaround for v1 Tauri applications, we recommend using a dedicated window for untrusted origins instead of iFrames, or disabling script execution within the iFrame.</p>\n<p>For v2 Tauri applications targeting Linux, it is possible to use either a dedicated window or <a href=\"https://github.com/tauri-apps/tauri/tree/dev/examples/multiwebview\">multiple WebViews</a> in the main window to simulate iFrame behavior.\nOn other platforms, it is only possible to use dedicated windows or disable script execution inside the iFrame, as described for v1.</p>\n<h2 id=\"references\">References</h2>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri or\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<p>The original submissions from the reporter:</p>\n<blockquote>\n<h3 id=\"context\">Context</h3>\n<p>This is following up on the comments here: <a href=\"https://github.com/tauri-apps/tauri/issues/8316\">https://github.com/tauri-apps/tauri/issues/8316</a>, and here: <a href=\"https://discord.com/channels/616186924390023171/1227969106091966475\">https://discord.com/channels/616186924390023171/1227969106091966475</a>. I was asked to submit my findings as a vulnerability report.</p>\n<p>Firstly, thank you to all of you from the core team that helped out and guided me through understanding this issue! Huge fan of Tauri, and I'm excited to see it succeed!</p>\n<h3 id=\"summary\">Summary</h3>\n<p>In short, <strong>any iframe you add in your Tauri frontend will get access to Tauri APIs, even in isolation mode</strong>.</p>\n<p>Any embedded iframe that you don't own will be able to invoke the same APIs your app does. While isolation mode allows for finer grained control of what Tauri APIs can be called, it is not possible to determine if a request is coming your own app, or from a potentially malicious iframe.</p>\n<p>This means your app could be open to malicious iframe being able to execute any command your app can, and there doesn't seem to be a mechanism to filter these out.</p>\n<h3 id=\"details\">Details</h3>\n<p>I'm not an expert in Tauri source code, so I can't be sure I'm on the right track here, but I assume this has to do with how the webview is bootstrapped with the Tauri APIs.</p>\n<p>I know there's various handlers that get set, such as opening <code>target=\"_blank\"</code> links via a shell command, and of course setting <code>invoke</code> and other such APIs. Sounds like the issue is somewhere there and the APIs are being injected where they shouldn't.</p>\n<p>Technically it seems that an attacker couldn't actually receive a response from the command it executes. Tauri IPC can't route the response back to the invoking iframe, but the action is still executed, with the response just being dropped. You see these messages in the logs:</p>\n<pre><code>[Warning] [TAURI] Couldn't find callback id 3399436348 in window. This happens when the app is reloaded while Rust is running an asynchronous operation.\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Repository with reproduction steps: <a href=\"https://github.com/begleynk/tauri-sandbox-iframe-escape-poc\">https://github.com/begleynk/tauri-sandbox-iframe-escape-poc</a></p>\n<p>Building on that POC, here is a video of a Codepen iframe running inside an isolation mode Tauri app, invoking the same \"Greet\" command the frontend is invoking.</p>\n<p><a href=\"https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c\">https://github.com/tauri-apps/tauri/assets/1065208/8efd5f9d-3116-4068-b98b-6ace7de9261c</a></p>\n<p>This is done with the following code running inside Codepen:</p>\n<pre><code class=\"language-javascript\">window.__TAURI_INVOKE__(\"greet\", { name: \"From CodePen\" })\n</code></pre>\n<h3 id=\"impact-1\">Impact</h3>\n<p>Valid commands with potentially unwanted consequences (\"delete project\", \"transfer credits\", etc.) could be invoked by an attacker that controls the content of an iframe running inside a Tauri app.</p>\n</blockquote>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-57fm-592m-34r7</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/issues/8316\">https://github.com/tauri-apps/tauri/issues/8316</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d\">https://github.com/tauri-apps/tauri/commit/d950ac1239817d17324c035e5c4769ee71fc197d</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608\">https://github.com/tauri-apps/tauri/commit/f6d81dfe0871e0ccd012e5190d41e3767e733608</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35222\">https://nvd.nist.gov/vuln/detail/CVE-2024-35222</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-57fm-592m-34r7\">https://github.com/advisories/GHSA-57fm-592m-34r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-57fm-592m-34r7",
            "title": "[tauri] iFrames Bypass Origin Checks for Tauri API Access Control",
            "date_modified": "2024-05-23T16:06:43.000Z",
            "date_published": "2024-05-23T14:11:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-57fm-592m-34r7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix-index] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix-ref] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix-fs] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gitoxide-core] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix-worktree] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gitoxide] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>On Windows, fetching refs that clash with legacy device names reads from the devices, and checking out paths that clash with such names writes arbitrary data to the devices. This allows a repository, when cloned, to cause indefinite blocking or the production of arbitrary message that appear to have come from the application, and potentially other harmful effects under limited circumstances.</p>\n<h3 id=\"details\">Details</h3>\n<p>It is possible to create a Git repository that contains references or filenames that Windows treats as legacy DOS-style aliases for system devices. When such a repository is cloned:</p>\n<ul>\n<li>In references, <code>gix-ref</code> does not include a check for such names before attempting to access them on disk, which reads from the devices, though the ability to exfiltrate data appears limited.</li>\n<li>In paths, <code>gix-worktree-state</code> does not treat such names as collisions and instead writes to them, which writes arbitrary attacker-controlled data to the devices.</li>\n</ul>\n<p>Some such device names refer to devices that are often absent or inaccessible. But a few are guaranteed to be available, allowing some attacks to be carried out with low complexity. For both reading refs and writing paths, one important case is the console:</p>\n<ul>\n<li>Reading a ref whose last component (e.g., tag name) is <code>CON</code> or <code>CONIN$</code> reads data from the console, thereby blocking on console input, including in most situations where a console is not readily available. This may facilitate denial of service attacks.</li>\n<li>Checking out a file named <code>CON</code> or <code>CONOUT$</code> writes its contents to the console. This allows an untrusted repository to produce arbitrary text that appears to be a message from the application. Such text may facilitate social engineering if it is selected to instruct the user to perform a particular action.</li>\n</ul>\n<p>Another potentially important case is serial ports. For example, <code>COM1</code> refers to the first serial port, if present. A malicious repository may be able to disrupt intended use of serial ports or attempt to interact with a device. In some configurations, it may be possible to interfere with the operation of a physical or virtual serial console. On Windows, local access to serial ports is often permitted even for limited user accounts without elevation.</p>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions\">Naming Files, Paths, and Namespaces</a> covers most reserved names. <code>CONIN$</code> and <code>CONOUT$</code> are also special, and are similar in effect to <code>CON</code> but for only input or only output. These names are case-insensitive and can also be accessed with file extensions (e.g, <code>CON.txt</code> is equivalent to <code>CON</code>) and with some variations involving added spaces or colons.</p>\n<h3 id=\"poc\">PoC</h3>\n<h4 id=\"ref-example\">Ref example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) with at least one commit. Use <code>git tag CON</code> to create a lightweight tag named <code>CON</code>. Place the repository somewhere it can be cloned on Windows. A <code>file://</code> URL is sufficient for testing if a private remote is unavailable. If using <code>git push</code>, pass <code>--tags</code> so the remote has the tag.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. This command will block immediately, reading input from the console. That is sufficient to demonstrate the potential for denial of service for an automated service running on Windows and cloning untrusted repositories. The experiment can be stopped with <kbd>Ctrl</kbd>+<kbd>C</kbd>.</p>\n<p>However, if desired, input can be provided. Ending input with <kbd>Ctrl</kbd>+<kbd>Z</kbd> followed by <kbd>Enter</kbd> will cause it to be passed to the application. This will lead to an error message, the specific details of which vary by whether the input is empty or nonempty, and whether it matches or does not match the hexadecimal hash of the tagged commit.</p>\n<h4 id=\"path-example\">Path example</h4>\n<p>Create a repository on a non-Windows system (or in WSL) and commit a file named <code>CON</code> with the contents:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n</code></pre>\n<p>While that example text serves to illustrate the risk, any distinctive text is sufficient to observe the vulnerability. Place the repository somewhere it can be cloned on Windows. As above, a <code>file://</code> URL is sufficient.</p>\n<p>On a Windows system, clone the repository with <code>gix clone</code>. The output usually looks like this, with the deceptive message appearing to come from <code>gix</code>:</p>\n<pre><code class=\"language-text\">warning: data loss imminent; you should run EVIL_COMMAND to back up your work!\n 04:45:15 indexing done 3.0 objects in 0.00s (12.1K objects/s)\n 04:45:15 decompressing done 309B in 0.00s (1.2MB/s)\n 04:45:15     Resolving done 3.0 objects in 0.05s (58.0 objects/s)\n 04:45:15      Decoding done 309B in 0.05s (6.0KB/s)\n 04:45:15 writing index file done 1.2KB in 0.00s (7.0MB/s)\n 04:45:15  create index file done 3.0 objects in 0.05s (55.0 objects/s)\n 04:45:15          read pack done 294B in 0.05s (5.4KB/s)\nError: IO error while writing blob or reading file metadata or changing filetype\n\nCaused by:\n    Incorrect function. (os error 1)\n</code></pre>\n<p>The exact placement of the message is nondeterministic. It usually appears in that position, but may appear elsewhere, such as before the <code>Error:</code> line. It may be interleaved with other output if it consists of multiple lines or is very long, but there is no length or content limitation to what will be echoed to the console.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>If Windows is not used, or untrusted repositories are not cloned or otherwise used, then there is no impact.</p>\n<p>The impact is expected to be limited in common configurations, but may vary widely depending on what devices exist, how they are being used, how much knowledge an attacker has of the precise details of their use, and whether the user is likely to trust information that appears in a console. Accessing devices through refs is expected to be less dangerous than accessing them through filenames, since it is trivial to attempt to write arbitrary data using filenames.</p>\n<p>For attacks using the <code>CON</code> or <code>CONOUT$</code> device names, the greatest risk is if a command the user would not otherwise run, and would not be convinced to run by untrusted instructions, seems reasonable when a trusted application such as <code>gix</code> appears to recommend it. The user may then be misled into running an attacker's command.</p>\n<p>A minor degradation in availability may also be possible, such as with a very large file named <code>CON</code>, though the user could usually interrupt the application.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9\">https://github.com/Byron/gitoxide/security/advisories/GHSA-49jc-r788-3fc9</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35197\">https://nvd.nist.gov/vuln/detail/CVE-2024-35197</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-49jc-r788-3fc9\">https://github.com/advisories/GHSA-49jc-r788-3fc9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9",
            "title": "[gix-worktree-state] gix refs and paths with reserved Windows device names access the devices",
            "date_modified": "2024-05-23T16:06:38.000Z",
            "date_published": "2024-05-22T14:13:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-49jc-r788-3fc9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>During checkout, gitoxide does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application.</p>\n<h3 id=\"details\">Details</h3>\n<p>Although <code>gix-worktree-state</code> checks for collisions with existing files, it does not itself check if a path is really in the working tree when performing a checkout, nor do the path checks in <code>gix-fs</code> and <code>gix-worktree</code> prevent this. Cloning an untrusted repository containing specially crafted tree or blob names will create new files outside the repository, or inside the repository or a submodule's <code>.git</code> directory. The simplest cases are:</p>\n<ul>\n<li>A tree named <code>..</code> to traverse upward. This facilitates arbitrary code execution because files can be placed in one or more locations where they are likely to be executed soon.</li>\n<li>A tree named <code>.git</code> to enter a <code>.git</code> directory. This facilitates arbitrary code execution because hooks can be installed.</li>\n</ul>\n<p>A number of alternatives that achieve the same effect are also possible, some of which correspond to specific vulnerabilities that have affected Git in the past:</p>\n<ul>\n<li>A tree or blob whose name contains one or more <code>/</code>, to traverse upward or downward. For example, even without containing any tree named <code>..</code> or <code>.git</code>, a repository can represent a file named <code>../outside</code> or <code>.git/hooks/pre-commit</code>. This is distinct from the more intuitive case a repository containing trees that represent those paths.</li>\n<li>In Windows, a tree or blob whose name contains one or more <code>\\</code>, to traverse upward or downward. (Unlike <code>/</code>, these are valid on other systems.) See <a href=\"https://github.com/git/git/security/advisories/GHSA-xjx4-8694-q2fq\">GHSA-xjx4-8694-q2fq</a>.</li>\n<li>On a case-insensitive filesystem (such as NTFS, APFS, or HFS+), a tree named as a case variant of <code>.git</code>.</li>\n<li>On HFS+, a tree named like <code>.git</code> or a case variant, with characters added that HFS+ ignores <a href=\"https://developer.apple.com/library/archive/technotes/tn/tn1150.html#StringComparisonAlgorithm\">in collation</a>. See <a href=\"https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f\">https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f</a>.</li>\n<li>On NTFS, a tree equivalent to <code>.git</code> (or a case variant) by the use of <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3\">NTFS stream</a> notation, such as <code>.git::$INDEX_ALLOCATION</code>. See <a href=\"https://github.com/git/git/security/advisories/GHSA-5wph-8frv-58vj\">GHSA-5wph-8frv-58vj</a>.</li>\n<li>On an NTFS volume with <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#short-vs-long-names\">8.3 aliasing</a> enabled, a tree named as <code>git~1</code> (or a case variant). See <a href=\"https://github.com/git/git/security/advisories/GHSA-589j-mmg9-733v\">GHSA-589j-mmg9-733v</a>.</li>\n</ul>\n<p>When a checkout creates some files outside the repository directory but fails to complete, the repository directory is usually removed, but the outside files remain.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For simplicity, these examples stage a stand-in file with a valid name, modify the index, and commit. The instructions assume <code>sed</code> supports <code>-i</code>, which is the case on most systems. If using Windows, a Git Bash shell should be used.</p>\n<h4 id=\"example-downward-traversal-to-install-hooks\">Example: Downward traversal to install hooks</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-installs-hook</code> and <code>cd</code> into the directory.</li>\n<li>Create the stand-in called <code>.git@hooks@pre-commit</code>, with the <em>contents</em>:<pre><code class=\"language-sh\">#!/bin/sh\nprintf 'Vulnerable!\\n'\ndate &gt;vulnerable\n</code></pre>\n</li>\n<li>Stage the stand-in: <code>git add --chmod=+x .git@hooks@pre-commit</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.git@hooks@pre-commit|.git/hooks/pre-commit|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, on another or the same machine:</p>\n<ol>\n<li>Clone the repository with a <code>gix clone …</code> command.</li>\n<li>Enter the newly created directory.</li>\n<li><em>Optionally</em> run <code>ls -l .git/hooks</code> to observe that the <code>pre-commit</code> hook is already present.</li>\n<li>Make a new file and commit it with <code>git</code>. This causes the payload surreptitiously installed as a <code>pre-commit</code> hook to run, printing the message <code>Vulnerable!</code> and creating a file in the current directory containing the current date and time.</li>\n</ol>\n<p>Note that the effect is not limited to modifying the current directory. The payload could be written to perform any action that the user who runs <code>git commit</code> is capable of.</p>\n<h4 id=\"example-upward-traversal-to-create-a-file-above-the-working-tree\">Example: Upward traversal to create a file above the working tree</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-reaches-up</code>, and <code>cd</code> into the directory.</li>\n<li>Create the stand-in: <code>echo 'A file outside the working tree, somehow.' &gt;..@outside</code></li>\n<li>Stage the stand-in: <code>git add ..@outside</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.\\.@outside|../outside|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, as above, on the same or another machine, clone the repository with a <code>gix clone …</code> command. Observe that a file named <code>outside</code> is present alongside (not inside) the cloned directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use of <code>gix</code> or another application that makes use of <code>gix-worktree-state</code>, or otherwise relies on <code>gix-fs</code> and <code>gix-worktree</code> for validation, is affected, if used to clone untrusted repositories. The above description focuses on code execution, as that leads to a complete loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well.</p>\n<p>In use cases where no untrusted repository is ever cloned, this vulnerability has no impact. Furthermore, the impact of this vulnerability <em>may</em> be lower when <code>gix</code> is used to clone a repository for CI/CD purposes, even if untrusted, since in such uses the environment is usually isolated and arbitrary code is usually run deliberately from the repository with necessary safeguards in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c\">https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35186\">https://nvd.nist.gov/vuln/detail/CVE-2024-35186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w47-3wg8-547c\">https://github.com/advisories/GHSA-7w47-3wg8-547c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c",
            "title": "[gix-index] gix traversal outside working tree enables arbitrary code execution",
            "date_modified": "2024-05-23T13:57:07.000Z",
            "date_published": "2024-05-22T14:05:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>During checkout, gitoxide does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application.</p>\n<h3 id=\"details\">Details</h3>\n<p>Although <code>gix-worktree-state</code> checks for collisions with existing files, it does not itself check if a path is really in the working tree when performing a checkout, nor do the path checks in <code>gix-fs</code> and <code>gix-worktree</code> prevent this. Cloning an untrusted repository containing specially crafted tree or blob names will create new files outside the repository, or inside the repository or a submodule's <code>.git</code> directory. The simplest cases are:</p>\n<ul>\n<li>A tree named <code>..</code> to traverse upward. This facilitates arbitrary code execution because files can be placed in one or more locations where they are likely to be executed soon.</li>\n<li>A tree named <code>.git</code> to enter a <code>.git</code> directory. This facilitates arbitrary code execution because hooks can be installed.</li>\n</ul>\n<p>A number of alternatives that achieve the same effect are also possible, some of which correspond to specific vulnerabilities that have affected Git in the past:</p>\n<ul>\n<li>A tree or blob whose name contains one or more <code>/</code>, to traverse upward or downward. For example, even without containing any tree named <code>..</code> or <code>.git</code>, a repository can represent a file named <code>../outside</code> or <code>.git/hooks/pre-commit</code>. This is distinct from the more intuitive case a repository containing trees that represent those paths.</li>\n<li>In Windows, a tree or blob whose name contains one or more <code>\\</code>, to traverse upward or downward. (Unlike <code>/</code>, these are valid on other systems.) See <a href=\"https://github.com/git/git/security/advisories/GHSA-xjx4-8694-q2fq\">GHSA-xjx4-8694-q2fq</a>.</li>\n<li>On a case-insensitive filesystem (such as NTFS, APFS, or HFS+), a tree named as a case variant of <code>.git</code>.</li>\n<li>On HFS+, a tree named like <code>.git</code> or a case variant, with characters added that HFS+ ignores <a href=\"https://developer.apple.com/library/archive/technotes/tn/tn1150.html#StringComparisonAlgorithm\">in collation</a>. See <a href=\"https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f\">https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f</a>.</li>\n<li>On NTFS, a tree equivalent to <code>.git</code> (or a case variant) by the use of <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3\">NTFS stream</a> notation, such as <code>.git::$INDEX_ALLOCATION</code>. See <a href=\"https://github.com/git/git/security/advisories/GHSA-5wph-8frv-58vj\">GHSA-5wph-8frv-58vj</a>.</li>\n<li>On an NTFS volume with <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#short-vs-long-names\">8.3 aliasing</a> enabled, a tree named as <code>git~1</code> (or a case variant). See <a href=\"https://github.com/git/git/security/advisories/GHSA-589j-mmg9-733v\">GHSA-589j-mmg9-733v</a>.</li>\n</ul>\n<p>When a checkout creates some files outside the repository directory but fails to complete, the repository directory is usually removed, but the outside files remain.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For simplicity, these examples stage a stand-in file with a valid name, modify the index, and commit. The instructions assume <code>sed</code> supports <code>-i</code>, which is the case on most systems. If using Windows, a Git Bash shell should be used.</p>\n<h4 id=\"example-downward-traversal-to-install-hooks\">Example: Downward traversal to install hooks</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-installs-hook</code> and <code>cd</code> into the directory.</li>\n<li>Create the stand-in called <code>.git@hooks@pre-commit</code>, with the <em>contents</em>:<pre><code class=\"language-sh\">#!/bin/sh\nprintf 'Vulnerable!\\n'\ndate &gt;vulnerable\n</code></pre>\n</li>\n<li>Stage the stand-in: <code>git add --chmod=+x .git@hooks@pre-commit</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.git@hooks@pre-commit|.git/hooks/pre-commit|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, on another or the same machine:</p>\n<ol>\n<li>Clone the repository with a <code>gix clone …</code> command.</li>\n<li>Enter the newly created directory.</li>\n<li><em>Optionally</em> run <code>ls -l .git/hooks</code> to observe that the <code>pre-commit</code> hook is already present.</li>\n<li>Make a new file and commit it with <code>git</code>. This causes the payload surreptitiously installed as a <code>pre-commit</code> hook to run, printing the message <code>Vulnerable!</code> and creating a file in the current directory containing the current date and time.</li>\n</ol>\n<p>Note that the effect is not limited to modifying the current directory. The payload could be written to perform any action that the user who runs <code>git commit</code> is capable of.</p>\n<h4 id=\"example-upward-traversal-to-create-a-file-above-the-working-tree\">Example: Upward traversal to create a file above the working tree</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-reaches-up</code>, and <code>cd</code> into the directory.</li>\n<li>Create the stand-in: <code>echo 'A file outside the working tree, somehow.' &gt;..@outside</code></li>\n<li>Stage the stand-in: <code>git add ..@outside</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.\\.@outside|../outside|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, as above, on the same or another machine, clone the repository with a <code>gix clone …</code> command. Observe that a file named <code>outside</code> is present alongside (not inside) the cloned directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use of <code>gix</code> or another application that makes use of <code>gix-worktree-state</code>, or otherwise relies on <code>gix-fs</code> and <code>gix-worktree</code> for validation, is affected, if used to clone untrusted repositories. The above description focuses on code execution, as that leads to a complete loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well.</p>\n<p>In use cases where no untrusted repository is ever cloned, this vulnerability has no impact. Furthermore, the impact of this vulnerability <em>may</em> be lower when <code>gix</code> is used to clone a repository for CI/CD purposes, even if untrusted, since in such uses the environment is usually isolated and arbitrary code is usually run deliberately from the repository with necessary safeguards in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c\">https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35186\">https://nvd.nist.gov/vuln/detail/CVE-2024-35186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w47-3wg8-547c\">https://github.com/advisories/GHSA-7w47-3wg8-547c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c",
            "title": "[gitoxide-core] gix traversal outside working tree enables arbitrary code execution",
            "date_modified": "2024-05-23T13:57:07.000Z",
            "date_published": "2024-05-22T14:05:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>During checkout, gitoxide does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application.</p>\n<h3 id=\"details\">Details</h3>\n<p>Although <code>gix-worktree-state</code> checks for collisions with existing files, it does not itself check if a path is really in the working tree when performing a checkout, nor do the path checks in <code>gix-fs</code> and <code>gix-worktree</code> prevent this. Cloning an untrusted repository containing specially crafted tree or blob names will create new files outside the repository, or inside the repository or a submodule's <code>.git</code> directory. The simplest cases are:</p>\n<ul>\n<li>A tree named <code>..</code> to traverse upward. This facilitates arbitrary code execution because files can be placed in one or more locations where they are likely to be executed soon.</li>\n<li>A tree named <code>.git</code> to enter a <code>.git</code> directory. This facilitates arbitrary code execution because hooks can be installed.</li>\n</ul>\n<p>A number of alternatives that achieve the same effect are also possible, some of which correspond to specific vulnerabilities that have affected Git in the past:</p>\n<ul>\n<li>A tree or blob whose name contains one or more <code>/</code>, to traverse upward or downward. For example, even without containing any tree named <code>..</code> or <code>.git</code>, a repository can represent a file named <code>../outside</code> or <code>.git/hooks/pre-commit</code>. This is distinct from the more intuitive case a repository containing trees that represent those paths.</li>\n<li>In Windows, a tree or blob whose name contains one or more <code>\\</code>, to traverse upward or downward. (Unlike <code>/</code>, these are valid on other systems.) See <a href=\"https://github.com/git/git/security/advisories/GHSA-xjx4-8694-q2fq\">GHSA-xjx4-8694-q2fq</a>.</li>\n<li>On a case-insensitive filesystem (such as NTFS, APFS, or HFS+), a tree named as a case variant of <code>.git</code>.</li>\n<li>On HFS+, a tree named like <code>.git</code> or a case variant, with characters added that HFS+ ignores <a href=\"https://developer.apple.com/library/archive/technotes/tn/tn1150.html#StringComparisonAlgorithm\">in collation</a>. See <a href=\"https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f\">https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f</a>.</li>\n<li>On NTFS, a tree equivalent to <code>.git</code> (or a case variant) by the use of <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3\">NTFS stream</a> notation, such as <code>.git::$INDEX_ALLOCATION</code>. See <a href=\"https://github.com/git/git/security/advisories/GHSA-5wph-8frv-58vj\">GHSA-5wph-8frv-58vj</a>.</li>\n<li>On an NTFS volume with <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#short-vs-long-names\">8.3 aliasing</a> enabled, a tree named as <code>git~1</code> (or a case variant). See <a href=\"https://github.com/git/git/security/advisories/GHSA-589j-mmg9-733v\">GHSA-589j-mmg9-733v</a>.</li>\n</ul>\n<p>When a checkout creates some files outside the repository directory but fails to complete, the repository directory is usually removed, but the outside files remain.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For simplicity, these examples stage a stand-in file with a valid name, modify the index, and commit. The instructions assume <code>sed</code> supports <code>-i</code>, which is the case on most systems. If using Windows, a Git Bash shell should be used.</p>\n<h4 id=\"example-downward-traversal-to-install-hooks\">Example: Downward traversal to install hooks</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-installs-hook</code> and <code>cd</code> into the directory.</li>\n<li>Create the stand-in called <code>.git@hooks@pre-commit</code>, with the <em>contents</em>:<pre><code class=\"language-sh\">#!/bin/sh\nprintf 'Vulnerable!\\n'\ndate &gt;vulnerable\n</code></pre>\n</li>\n<li>Stage the stand-in: <code>git add --chmod=+x .git@hooks@pre-commit</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.git@hooks@pre-commit|.git/hooks/pre-commit|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, on another or the same machine:</p>\n<ol>\n<li>Clone the repository with a <code>gix clone …</code> command.</li>\n<li>Enter the newly created directory.</li>\n<li><em>Optionally</em> run <code>ls -l .git/hooks</code> to observe that the <code>pre-commit</code> hook is already present.</li>\n<li>Make a new file and commit it with <code>git</code>. This causes the payload surreptitiously installed as a <code>pre-commit</code> hook to run, printing the message <code>Vulnerable!</code> and creating a file in the current directory containing the current date and time.</li>\n</ol>\n<p>Note that the effect is not limited to modifying the current directory. The payload could be written to perform any action that the user who runs <code>git commit</code> is capable of.</p>\n<h4 id=\"example-upward-traversal-to-create-a-file-above-the-working-tree\">Example: Upward traversal to create a file above the working tree</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-reaches-up</code>, and <code>cd</code> into the directory.</li>\n<li>Create the stand-in: <code>echo 'A file outside the working tree, somehow.' &gt;..@outside</code></li>\n<li>Stage the stand-in: <code>git add ..@outside</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.\\.@outside|../outside|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, as above, on the same or another machine, clone the repository with a <code>gix clone …</code> command. Observe that a file named <code>outside</code> is present alongside (not inside) the cloned directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use of <code>gix</code> or another application that makes use of <code>gix-worktree-state</code>, or otherwise relies on <code>gix-fs</code> and <code>gix-worktree</code> for validation, is affected, if used to clone untrusted repositories. The above description focuses on code execution, as that leads to a complete loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well.</p>\n<p>In use cases where no untrusted repository is ever cloned, this vulnerability has no impact. Furthermore, the impact of this vulnerability <em>may</em> be lower when <code>gix</code> is used to clone a repository for CI/CD purposes, even if untrusted, since in such uses the environment is usually isolated and arbitrary code is usually run deliberately from the repository with necessary safeguards in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c\">https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35186\">https://nvd.nist.gov/vuln/detail/CVE-2024-35186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w47-3wg8-547c\">https://github.com/advisories/GHSA-7w47-3wg8-547c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c",
            "title": "[gix] gix traversal outside working tree enables arbitrary code execution",
            "date_modified": "2024-05-23T13:57:07.000Z",
            "date_published": "2024-05-22T14:05:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>During checkout, gitoxide does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application.</p>\n<h3 id=\"details\">Details</h3>\n<p>Although <code>gix-worktree-state</code> checks for collisions with existing files, it does not itself check if a path is really in the working tree when performing a checkout, nor do the path checks in <code>gix-fs</code> and <code>gix-worktree</code> prevent this. Cloning an untrusted repository containing specially crafted tree or blob names will create new files outside the repository, or inside the repository or a submodule's <code>.git</code> directory. The simplest cases are:</p>\n<ul>\n<li>A tree named <code>..</code> to traverse upward. This facilitates arbitrary code execution because files can be placed in one or more locations where they are likely to be executed soon.</li>\n<li>A tree named <code>.git</code> to enter a <code>.git</code> directory. This facilitates arbitrary code execution because hooks can be installed.</li>\n</ul>\n<p>A number of alternatives that achieve the same effect are also possible, some of which correspond to specific vulnerabilities that have affected Git in the past:</p>\n<ul>\n<li>A tree or blob whose name contains one or more <code>/</code>, to traverse upward or downward. For example, even without containing any tree named <code>..</code> or <code>.git</code>, a repository can represent a file named <code>../outside</code> or <code>.git/hooks/pre-commit</code>. This is distinct from the more intuitive case a repository containing trees that represent those paths.</li>\n<li>In Windows, a tree or blob whose name contains one or more <code>\\</code>, to traverse upward or downward. (Unlike <code>/</code>, these are valid on other systems.) See <a href=\"https://github.com/git/git/security/advisories/GHSA-xjx4-8694-q2fq\">GHSA-xjx4-8694-q2fq</a>.</li>\n<li>On a case-insensitive filesystem (such as NTFS, APFS, or HFS+), a tree named as a case variant of <code>.git</code>.</li>\n<li>On HFS+, a tree named like <code>.git</code> or a case variant, with characters added that HFS+ ignores <a href=\"https://developer.apple.com/library/archive/technotes/tn/tn1150.html#StringComparisonAlgorithm\">in collation</a>. See <a href=\"https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f\">https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f</a>.</li>\n<li>On NTFS, a tree equivalent to <code>.git</code> (or a case variant) by the use of <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3\">NTFS stream</a> notation, such as <code>.git::$INDEX_ALLOCATION</code>. See <a href=\"https://github.com/git/git/security/advisories/GHSA-5wph-8frv-58vj\">GHSA-5wph-8frv-58vj</a>.</li>\n<li>On an NTFS volume with <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#short-vs-long-names\">8.3 aliasing</a> enabled, a tree named as <code>git~1</code> (or a case variant). See <a href=\"https://github.com/git/git/security/advisories/GHSA-589j-mmg9-733v\">GHSA-589j-mmg9-733v</a>.</li>\n</ul>\n<p>When a checkout creates some files outside the repository directory but fails to complete, the repository directory is usually removed, but the outside files remain.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For simplicity, these examples stage a stand-in file with a valid name, modify the index, and commit. The instructions assume <code>sed</code> supports <code>-i</code>, which is the case on most systems. If using Windows, a Git Bash shell should be used.</p>\n<h4 id=\"example-downward-traversal-to-install-hooks\">Example: Downward traversal to install hooks</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-installs-hook</code> and <code>cd</code> into the directory.</li>\n<li>Create the stand-in called <code>.git@hooks@pre-commit</code>, with the <em>contents</em>:<pre><code class=\"language-sh\">#!/bin/sh\nprintf 'Vulnerable!\\n'\ndate &gt;vulnerable\n</code></pre>\n</li>\n<li>Stage the stand-in: <code>git add --chmod=+x .git@hooks@pre-commit</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.git@hooks@pre-commit|.git/hooks/pre-commit|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, on another or the same machine:</p>\n<ol>\n<li>Clone the repository with a <code>gix clone …</code> command.</li>\n<li>Enter the newly created directory.</li>\n<li><em>Optionally</em> run <code>ls -l .git/hooks</code> to observe that the <code>pre-commit</code> hook is already present.</li>\n<li>Make a new file and commit it with <code>git</code>. This causes the payload surreptitiously installed as a <code>pre-commit</code> hook to run, printing the message <code>Vulnerable!</code> and creating a file in the current directory containing the current date and time.</li>\n</ol>\n<p>Note that the effect is not limited to modifying the current directory. The payload could be written to perform any action that the user who runs <code>git commit</code> is capable of.</p>\n<h4 id=\"example-upward-traversal-to-create-a-file-above-the-working-tree\">Example: Upward traversal to create a file above the working tree</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-reaches-up</code>, and <code>cd</code> into the directory.</li>\n<li>Create the stand-in: <code>echo 'A file outside the working tree, somehow.' &gt;..@outside</code></li>\n<li>Stage the stand-in: <code>git add ..@outside</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.\\.@outside|../outside|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, as above, on the same or another machine, clone the repository with a <code>gix clone …</code> command. Observe that a file named <code>outside</code> is present alongside (not inside) the cloned directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use of <code>gix</code> or another application that makes use of <code>gix-worktree-state</code>, or otherwise relies on <code>gix-fs</code> and <code>gix-worktree</code> for validation, is affected, if used to clone untrusted repositories. The above description focuses on code execution, as that leads to a complete loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well.</p>\n<p>In use cases where no untrusted repository is ever cloned, this vulnerability has no impact. Furthermore, the impact of this vulnerability <em>may</em> be lower when <code>gix</code> is used to clone a repository for CI/CD purposes, even if untrusted, since in such uses the environment is usually isolated and arbitrary code is usually run deliberately from the repository with necessary safeguards in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c\">https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35186\">https://nvd.nist.gov/vuln/detail/CVE-2024-35186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w47-3wg8-547c\">https://github.com/advisories/GHSA-7w47-3wg8-547c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c",
            "title": "[gix-worktree] gix traversal outside working tree enables arbitrary code execution",
            "date_modified": "2024-05-23T13:57:07.000Z",
            "date_published": "2024-05-22T14:05:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>During checkout, gitoxide does not verify that paths point to locations in the working tree. A specially crafted repository can, when cloned, place new files anywhere writable by the application.</p>\n<h3 id=\"details\">Details</h3>\n<p>Although <code>gix-worktree-state</code> checks for collisions with existing files, it does not itself check if a path is really in the working tree when performing a checkout, nor do the path checks in <code>gix-fs</code> and <code>gix-worktree</code> prevent this. Cloning an untrusted repository containing specially crafted tree or blob names will create new files outside the repository, or inside the repository or a submodule's <code>.git</code> directory. The simplest cases are:</p>\n<ul>\n<li>A tree named <code>..</code> to traverse upward. This facilitates arbitrary code execution because files can be placed in one or more locations where they are likely to be executed soon.</li>\n<li>A tree named <code>.git</code> to enter a <code>.git</code> directory. This facilitates arbitrary code execution because hooks can be installed.</li>\n</ul>\n<p>A number of alternatives that achieve the same effect are also possible, some of which correspond to specific vulnerabilities that have affected Git in the past:</p>\n<ul>\n<li>A tree or blob whose name contains one or more <code>/</code>, to traverse upward or downward. For example, even without containing any tree named <code>..</code> or <code>.git</code>, a repository can represent a file named <code>../outside</code> or <code>.git/hooks/pre-commit</code>. This is distinct from the more intuitive case a repository containing trees that represent those paths.</li>\n<li>In Windows, a tree or blob whose name contains one or more <code>\\</code>, to traverse upward or downward. (Unlike <code>/</code>, these are valid on other systems.) See <a href=\"https://github.com/git/git/security/advisories/GHSA-xjx4-8694-q2fq\">GHSA-xjx4-8694-q2fq</a>.</li>\n<li>On a case-insensitive filesystem (such as NTFS, APFS, or HFS+), a tree named as a case variant of <code>.git</code>.</li>\n<li>On HFS+, a tree named like <code>.git</code> or a case variant, with characters added that HFS+ ignores <a href=\"https://developer.apple.com/library/archive/technotes/tn/tn1150.html#StringComparisonAlgorithm\">in collation</a>. See <a href=\"https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f\">https://github.com/git/git/commit/6162a1d323d24fd8cbbb1a6145a91fb849b2568f</a>.</li>\n<li>On NTFS, a tree equivalent to <code>.git</code> (or a case variant) by the use of <a href=\"https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-fscc/c54dec26-1551-4d3a-a0ea-4fa40f848eb3\">NTFS stream</a> notation, such as <code>.git::$INDEX_ALLOCATION</code>. See <a href=\"https://github.com/git/git/security/advisories/GHSA-5wph-8frv-58vj\">GHSA-5wph-8frv-58vj</a>.</li>\n<li>On an NTFS volume with <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#short-vs-long-names\">8.3 aliasing</a> enabled, a tree named as <code>git~1</code> (or a case variant). See <a href=\"https://github.com/git/git/security/advisories/GHSA-589j-mmg9-733v\">GHSA-589j-mmg9-733v</a>.</li>\n</ul>\n<p>When a checkout creates some files outside the repository directory but fails to complete, the repository directory is usually removed, but the outside files remain.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>For simplicity, these examples stage a stand-in file with a valid name, modify the index, and commit. The instructions assume <code>sed</code> supports <code>-i</code>, which is the case on most systems. If using Windows, a Git Bash shell should be used.</p>\n<h4 id=\"example-downward-traversal-to-install-hooks\">Example: Downward traversal to install hooks</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-installs-hook</code> and <code>cd</code> into the directory.</li>\n<li>Create the stand-in called <code>.git@hooks@pre-commit</code>, with the <em>contents</em>:<pre><code class=\"language-sh\">#!/bin/sh\nprintf 'Vulnerable!\\n'\ndate &gt;vulnerable\n</code></pre>\n</li>\n<li>Stage the stand-in: <code>git add --chmod=+x .git@hooks@pre-commit</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.git@hooks@pre-commit|.git/hooks/pre-commit|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, on another or the same machine:</p>\n<ol>\n<li>Clone the repository with a <code>gix clone …</code> command.</li>\n<li>Enter the newly created directory.</li>\n<li><em>Optionally</em> run <code>ls -l .git/hooks</code> to observe that the <code>pre-commit</code> hook is already present.</li>\n<li>Make a new file and commit it with <code>git</code>. This causes the payload surreptitiously installed as a <code>pre-commit</code> hook to run, printing the message <code>Vulnerable!</code> and creating a file in the current directory containing the current date and time.</li>\n</ol>\n<p>Note that the effect is not limited to modifying the current directory. The payload could be written to perform any action that the user who runs <code>git commit</code> is capable of.</p>\n<h4 id=\"example-upward-traversal-to-create-a-file-above-the-working-tree\">Example: Upward traversal to create a file above the working tree</h4>\n<ol>\n<li>Create a new repository with <code>git init dangerous-repo-reaches-up</code>, and <code>cd</code> into the directory.</li>\n<li>Create the stand-in: <code>echo 'A file outside the working tree, somehow.' &gt;..@outside</code></li>\n<li>Stage the stand-in: <code>git add ..@outside</code></li>\n<li>Edit the index: <code>env LC_ALL=C sed -i.orig 's|\\.\\.@outside|../outside|' .git/index</code></li>\n<li>Commit: <code>git commit -m 'Initial commit'</code></li>\n<li><em>Optionally</em>, push to a private remote.</li>\n</ol>\n<p>Then, as above, on the same or another machine, clone the repository with a <code>gix clone …</code> command. Observe that a file named <code>outside</code> is present alongside (not inside) the cloned directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any use of <code>gix</code> or another application that makes use of <code>gix-worktree-state</code>, or otherwise relies on <code>gix-fs</code> and <code>gix-worktree</code> for validation, is affected, if used to clone untrusted repositories. The above description focuses on code execution, as that leads to a complete loss of confidentiality, integrity, and availability, but creating files outside a working tree without attempting to execute code can directly impact integrity as well.</p>\n<p>In use cases where no untrusted repository is ever cloned, this vulnerability has no impact. Furthermore, the impact of this vulnerability <em>may</em> be lower when <code>gix</code> is used to clone a repository for CI/CD purposes, even if untrusted, since in such uses the environment is usually isolated and arbitrary code is usually run deliberately from the repository with necessary safeguards in place.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c\">https://github.com/Byron/gitoxide/security/advisories/GHSA-7w47-3wg8-547c</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-35186\">https://nvd.nist.gov/vuln/detail/CVE-2024-35186</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7w47-3wg8-547c\">https://github.com/advisories/GHSA-7w47-3wg8-547c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c",
            "title": "[gix-fs] gix traversal outside working tree enables arbitrary code execution",
            "date_modified": "2024-05-23T13:57:07.000Z",
            "date_published": "2024-05-22T14:05:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7w47-3wg8-547c"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}