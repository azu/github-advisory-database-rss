{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>Specific MongoDB Rust Driver versions can include credentials used by the connection pool to authenticate connections in the monitoring event that is emitted when the pool is created. The user's logging infrastructure could then potentially ingest these events and unexpectedly leak the credentials. Note that such monitoring is not enabled by default.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-20332\">https://nvd.nist.gov/vuln/detail/CVE-2021-20332</a></li>\n<li><a href=\"https://jira.mongodb.org/browse/RUST-591\">https://jira.mongodb.org/browse/RUST-591</a></li>\n<li><a href=\"https://github.com/mongodb/mongo-rust-driver/commit/9e8782b1bb1104e5399c073b553719c262d4463c\">https://github.com/mongodb/mongo-rust-driver/commit/9e8782b1bb1104e5399c073b553719c262d4463c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4rjr-3gj2-5crq\">https://github.com/advisories/GHSA-4rjr-3gj2-5crq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4rjr-3gj2-5crq",
            "title": "[mongors] Exposure of Sensitive Information to an Unauthorized Actor in MongoDB Rust Driver",
            "date_modified": "2022-06-17T21:39:30.000Z",
            "date_published": "2022-05-24T19:09:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4rjr-3gj2-5crq"
            }
        },
        {
            "content_html": "<p>The OpenSSL 3.0 implementation of the RC4-MD5 ciphersuite incorrectly uses the AAD data as the MAC key. This makes the MAC key trivially predictable. An attacker could exploit this issue by performing a man-in-the-middle attack to modify data being sent from one endpoint to an OpenSSL 3.0 recipient such that the modified data would still pass the MAC integrity check. Note that data sent from an OpenSSL 3.0 endpoint to a non-OpenSSL 3.0 endpoint will always be rejected by the recipient and the connection will fail at that point. Many application protocols require data to be sent from the client to the server first. Therefore, in such a case, only an OpenSSL 3.0 server would be impacted when talking to a non-OpenSSL 3.0 client. If both endpoints are OpenSSL 3.0 then the attacker could modify data being sent in both directions. In this case both clients and servers could be affected, regardless of the application protocol. Note that in the absence of an attacker this bug means that an OpenSSL 3.0 endpoint communicating with a non-OpenSSL 3.0 endpoint will fail to complete the handshake when using this ciphersuite. The confidentiality of data is not impacted by this issue, i.e. an attacker cannot decrypt data that has been encrypted using this ciphersuite - they can only modify it. In order for this attack to work both endpoints must legitimately negotiate the RC4-MD5 ciphersuite. This ciphersuite is not compiled by default in OpenSSL 3.0, and is not available within the default provider or the default ciphersuite list. This ciphersuite will never be used if TLSv1.3 has been negotiated. In order for an OpenSSL 3.0 endpoint to use this ciphersuite the following must have occurred: 1) OpenSSL must have been compiled with the (non-default) compile time option enable-weak-ssl-ciphers 2) OpenSSL must have had the legacy provider explicitly loaded (either through application code or via configuration) 3) The ciphersuite must have been explicitly added to the ciphersuite list 4) The libssl security level must have been set to 0 (default is 1) 5) A version of SSL/TLS below TLSv1.3 must have been negotiated 6) Both endpoints must negotiate the RC4-MD5 ciphersuite in preference to any others that both endpoints have in common Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1434\">https://nvd.nist.gov/vuln/detail/CVE-2022-1434</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=7d56a74a96828985db7354a55227a511615f732b\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=7d56a74a96828985db7354a55227a511615f732b</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0026.html\">https://rustsec.org/advisories/RUSTSEC-2022-0026.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-638m-m8mh-7gw2\">https://github.com/advisories/GHSA-638m-m8mh-7gw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-638m-m8mh-7gw2",
            "title": "[openssl-src] Incorrect MAC key used in the RC4-MD5 ciphersuite",
            "date_modified": "2022-06-17T17:03:10.000Z",
            "date_published": "2022-05-04T00:00:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-638m-m8mh-7gw2"
            }
        },
        {
            "content_html": "<p>The OpenSSL 3.0 implementation of the RC4-MD5 ciphersuite incorrectly uses the AAD data as the MAC key. This makes the MAC key trivially predictable. An attacker could exploit this issue by performing a man-in-the-middle attack to modify data being sent from one endpoint to an OpenSSL 3.0 recipient such that the modified data would still pass the MAC integrity check. Note that data sent from an OpenSSL 3.0 endpoint to a non-OpenSSL 3.0 endpoint will always be rejected by the recipient and the connection will fail at that point. Many application protocols require data to be sent from the client to the server first. Therefore, in such a case, only an OpenSSL 3.0 server would be impacted when talking to a non-OpenSSL 3.0 client. If both endpoints are OpenSSL 3.0 then the attacker could modify data being sent in both directions. In this case both clients and servers could be affected, regardless of the application protocol. Note that in the absence of an attacker this bug means that an OpenSSL 3.0 endpoint communicating with a non-OpenSSL 3.0 endpoint will fail to complete the handshake when using this ciphersuite. The confidentiality of data is not impacted by this issue, i.e. an attacker cannot decrypt data that has been encrypted using this ciphersuite - they can only modify it. In order for this attack to work both endpoints must legitimately negotiate the RC4-MD5 ciphersuite. This ciphersuite is not compiled by default in OpenSSL 3.0, and is not available within the default provider or the default ciphersuite list. This ciphersuite will never be used if TLSv1.3 has been negotiated. In order for an OpenSSL 3.0 endpoint to use this ciphersuite the following must have occurred: 1) OpenSSL must have been compiled with the (non-default) compile time option enable-weak-ssl-ciphers 2) OpenSSL must have had the legacy provider explicitly loaded (either through application code or via configuration) 3) The ciphersuite must have been explicitly added to the ciphersuite list 4) The libssl security level must have been set to 0 (default is 1) 5) A version of SSL/TLS below TLSv1.3 must have been negotiated 6) Both endpoints must negotiate the RC4-MD5 ciphersuite in preference to any others that both endpoints have in common Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1434\">https://nvd.nist.gov/vuln/detail/CVE-2022-1434</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=7d56a74a96828985db7354a55227a511615f732b\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=7d56a74a96828985db7354a55227a511615f732b</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0026.html\">https://rustsec.org/advisories/RUSTSEC-2022-0026.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-638m-m8mh-7gw2\">https://github.com/advisories/GHSA-638m-m8mh-7gw2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-638m-m8mh-7gw2",
            "title": "[openssl-src] Incorrect MAC key used in the RC4-MD5 ciphersuite",
            "date_modified": "2022-06-17T17:03:10.000Z",
            "date_published": "2022-05-04T00:00:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-638m-m8mh-7gw2"
            }
        },
        {
            "content_html": "<p>The function <code>OCSP_basic_verify</code> verifies the signer certificate on an OCSP response. In the case where the (non-default) flag OCSP_NOCHECKS is used then the response will be positive (meaning a successful verification) even in the case where the response signing certificate fails to verify. It is anticipated that most users of <code>OCSP_basic_verify</code> will not use the OCSP_NOCHECKS flag. In this case the <code>OCSP_basic_verify</code> function will return a negative value (indicating a fatal error) in the case of a certificate verification failure. The normal expected return value in this case would be 0. This issue also impacts the command line OpenSSL \"ocsp\" application. When verifying an ocsp response with the \"-no_cert_checks\" option the command line application will report that the verification is successful even though it has in fact failed. In this case the incorrect successful response will also be accompanied by error messages showing the failure and contradicting the apparently successful result. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1343\">https://nvd.nist.gov/vuln/detail/CVE-2022-1343</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2eda98790c5c2741d76d23cc1e74b0dc4f4b391a\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2eda98790c5c2741d76d23cc1e74b0dc4f4b391a</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0027.html\">https://rustsec.org/advisories/RUSTSEC-2022-0027.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mfm6-r9g2-q4r7\">https://github.com/advisories/GHSA-mfm6-r9g2-q4r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mfm6-r9g2-q4r7",
            "title": "[openssl-src] `OCSP_basic_verify` may incorrectly verify the response signing certificate",
            "date_modified": "2022-06-17T17:03:08.000Z",
            "date_published": "2022-05-04T00:00:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mfm6-r9g2-q4r7"
            }
        },
        {
            "content_html": "<p>The function <code>OCSP_basic_verify</code> verifies the signer certificate on an OCSP response. In the case where the (non-default) flag OCSP_NOCHECKS is used then the response will be positive (meaning a successful verification) even in the case where the response signing certificate fails to verify. It is anticipated that most users of <code>OCSP_basic_verify</code> will not use the OCSP_NOCHECKS flag. In this case the <code>OCSP_basic_verify</code> function will return a negative value (indicating a fatal error) in the case of a certificate verification failure. The normal expected return value in this case would be 0. This issue also impacts the command line OpenSSL \"ocsp\" application. When verifying an ocsp response with the \"-no_cert_checks\" option the command line application will report that the verification is successful even though it has in fact failed. In this case the incorrect successful response will also be accompanied by error messages showing the failure and contradicting the apparently successful result. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1343\">https://nvd.nist.gov/vuln/detail/CVE-2022-1343</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2eda98790c5c2741d76d23cc1e74b0dc4f4b391a\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2eda98790c5c2741d76d23cc1e74b0dc4f4b391a</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0027.html\">https://rustsec.org/advisories/RUSTSEC-2022-0027.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mfm6-r9g2-q4r7\">https://github.com/advisories/GHSA-mfm6-r9g2-q4r7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mfm6-r9g2-q4r7",
            "title": "[openssl-src] `OCSP_basic_verify` may incorrectly verify the response signing certificate",
            "date_modified": "2022-06-17T17:03:08.000Z",
            "date_published": "2022-05-04T00:00:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mfm6-r9g2-q4r7"
            }
        },
        {
            "content_html": "<p>Internally libssl in OpenSSL calls X509_verify_cert() on the client side to verify a certificate supplied by a server. That function may return a negative return value to indicate an internal error (for example out of memory). Such a negative return value is mishandled by OpenSSL and will cause an IO function (such as SSL_connect() or SSL_do_handshake()) to not indicate success and a subsequent call to SSL_get_error() to return the value SSL_ERROR_WANT_RETRY_VERIFY. This return value is only supposed to be returned by OpenSSL if the application has previously called SSL_CTX_set_cert_verify_callback(). Since most applications do not do this the SSL_ERROR_WANT_RETRY_VERIFY return value from SSL_get_error() will be totally unexpected and applications may not behave correctly as a result. The exact behaviour will depend on the application but it could result in crashes, infinite loops or other similar incorrect responses. This issue is made more serious in combination with a separate bug in OpenSSL 3.0 that will cause X509_verify_cert() to indicate an internal error when processing a certificate chain. This will occur where a certificate does not include the Subject Alternative Name extension but where a Certificate Authority has enforced name constraints. This issue can occur even with valid chains. By combining the two issues an attacker could induce incorrect, application dependent behaviour. Fixed in OpenSSL 3.0.1 (Affected 3.0.0).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-4044\">https://nvd.nist.gov/vuln/detail/CVE-2021-4044</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=758754966791c537ea95241438454aa86f91f256\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=758754966791c537ea95241438454aa86f91f256</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20211214.txt\">https://www.openssl.org/news/secadv/20211214.txt</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0129.html\">https://rustsec.org/advisories/RUSTSEC-2021-0129.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20211229-0003/\">https://security.netapp.com/advisory/ntap-20211229-0003/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mmjf-f5jw-w72q\">https://github.com/advisories/GHSA-mmjf-f5jw-w72q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mmjf-f5jw-w72q",
            "title": "[openssl-src] Invalid handling of `X509_verify_cert()` internal errors in libssl",
            "date_modified": "2022-06-17T15:16:50.000Z",
            "date_published": "2021-12-15T00:00:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mmjf-f5jw-w72q"
            }
        },
        {
            "content_html": "<p>The OPENSSL_LH_flush() function, which empties a hash table, contains a bug that breaks reuse of the memory occuppied by the removed hash table entries. This function is used when decoding certificates or keys. If a long lived process periodically decodes certificates or keys its memory usage will expand without bounds and the process might be terminated by the operating system causing a denial of service. Also traversing the empty hash table entries will take increasingly more time. Typically such long lived processes might be TLS clients or TLS servers configured to accept client certificate authentication. The function was added in the OpenSSL 3.0 version thus older releases are not affected by the issue. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1473\">https://nvd.nist.gov/vuln/detail/CVE-2022-1473</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0025.html\">https://rustsec.org/advisories/RUSTSEC-2022-0025.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g323-fr93-4j3c\">https://github.com/advisories/GHSA-g323-fr93-4j3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g323-fr93-4j3c",
            "title": "[openssl-src] Resource leakage when decoding certificates and keys",
            "date_modified": "2022-06-17T15:16:46.000Z",
            "date_published": "2022-05-04T00:00:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g323-fr93-4j3c"
            }
        },
        {
            "content_html": "<p>The OPENSSL_LH_flush() function, which empties a hash table, contains a bug that breaks reuse of the memory occuppied by the removed hash table entries. This function is used when decoding certificates or keys. If a long lived process periodically decodes certificates or keys its memory usage will expand without bounds and the process might be terminated by the operating system causing a denial of service. Also traversing the empty hash table entries will take increasingly more time. Typically such long lived processes might be TLS clients or TLS servers configured to accept client certificate authentication. The function was added in the OpenSSL 3.0 version thus older releases are not affected by the issue. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-1473\">https://nvd.nist.gov/vuln/detail/CVE-2022-1473</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=64c85430f95200b6b51fe9475bd5203f7c19daf1</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220503.txt\">https://www.openssl.org/news/secadv/20220503.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220602-0009/\">https://security.netapp.com/advisory/ntap-20220602-0009/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0025.html\">https://rustsec.org/advisories/RUSTSEC-2022-0025.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g323-fr93-4j3c\">https://github.com/advisories/GHSA-g323-fr93-4j3c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g323-fr93-4j3c",
            "title": "[openssl-src] Resource leakage when decoding certificates and keys",
            "date_modified": "2022-06-17T15:16:46.000Z",
            "date_published": "2022-05-04T00:00:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g323-fr93-4j3c"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>This issue only applies to applications starting authorization sessions using an explicit initial <code>nonce</code>.</strong></p>\n<p>When <a href=\"https://docs.rs/tss-esapi/7.0.1/tss_esapi/struct.Context.html#method.start_auth_session\"><code>Context::start_auth_session</code></a> was called with a <code>nonce</code> argument value of <code>Some(...)</code>, the nonce pointer passed down through FFI to <code>Esys_StartAuthSession</code> would be a dangling pointer, left over from a defunct instance of <code>TPM2B_NONCE</code>. This could lead to an incorrect value being used as a nonce, though whether that value is controllable is unclear (so should be assumed as possible). The error became apparent due to changes in v1.61.0 of the Rust compiler.</p>\n<p>Logs indicating a failure due to this issue (with the 1.61.0 version of the Rust toolchain) look as follows:</p>\n<pre><code>2022-05-24T01:04:41.9131341Z WARNING:esys:src/tss2-esys/api/Esys_StartAuthSession.c:390:Esys_StartAuthSession_Finish() Received TPM Error \n2022-05-24T01:04:41.9132192Z ERROR:esys:src/tss2-esys/api/Esys_StartAuthSession.c:136:Esys_StartAuthSession() Esys Finish ErrorCode (0x000001d5) \n2022-05-24T01:04:41.9145124Z [2022-05-24T01:04:41Z ERROR tss_esapi::context::tpm_commands::session_commands] Error when creating a session: structure is the wrong size (associated with parameter number 1)\n2022-05-24T01:04:41.9153816Z thread 'main' panicked at 'Call to start_auth_session failed: Tss2Error(FormatOne(FormatOneResponseCode { .0: 469, error_number: 21, parameter: true, format_selector: true, number: 1 }))', tss-esapi/tests/integration_tests/context_tests/tpm_commands/enhanced_authorization_ea_commands_tests.rs:870:14\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions 6 and 7 of the <code>tss-esapi</code> crate. Please update to <code>7.1.0</code> or <code>6.1.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround that achieves the same functionality.</p>\n<h3 id=\"references\">References</h3>\n<p>For more information on the cause of the issue and the fix, see <a href=\"https://github.com/parallaxsecond/rust-tss-esapi/pull/344\">this</a> PR.</p>\n<p>For more details about the <code>TPM2_StartAuthSession</code> command see section 11.1 of <a href=\"https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part3_Commands_pub.pdf\">the TPM spec, part 3</a>, and section 19.6.3 of <a href=\"https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part1_Architecture_pub.pdf\">part 1 of the same spec</a> for more information regarding session nonces.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue or discussion in <a href=\"https://github.com/parallaxsecond/rust-tss-esapi\">our repo</a></li>\n<li>Get in touch on <a href=\"https://github.com/parallaxsecond/community#community-channel\">our Slack channel</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parallaxsecond/rust-tss-esapi/security/advisories/GHSA-w3vw-ccc5-qr8v\">https://github.com/parallaxsecond/rust-tss-esapi/security/advisories/GHSA-w3vw-ccc5-qr8v</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w3vw-ccc5-qr8v\">https://github.com/advisories/GHSA-w3vw-ccc5-qr8v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w3vw-ccc5-qr8v",
            "title": "[tss-esapi] Use After Free in Context::start_auth_session",
            "date_modified": "2022-06-17T01:17:42.000Z",
            "date_published": "2022-06-17T01:17:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w3vw-ccc5-qr8v"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><strong>This issue only applies to applications starting authorization sessions using an explicit initial <code>nonce</code>.</strong></p>\n<p>When <a href=\"https://docs.rs/tss-esapi/7.0.1/tss_esapi/struct.Context.html#method.start_auth_session\"><code>Context::start_auth_session</code></a> was called with a <code>nonce</code> argument value of <code>Some(...)</code>, the nonce pointer passed down through FFI to <code>Esys_StartAuthSession</code> would be a dangling pointer, left over from a defunct instance of <code>TPM2B_NONCE</code>. This could lead to an incorrect value being used as a nonce, though whether that value is controllable is unclear (so should be assumed as possible). The error became apparent due to changes in v1.61.0 of the Rust compiler.</p>\n<p>Logs indicating a failure due to this issue (with the 1.61.0 version of the Rust toolchain) look as follows:</p>\n<pre><code>2022-05-24T01:04:41.9131341Z WARNING:esys:src/tss2-esys/api/Esys_StartAuthSession.c:390:Esys_StartAuthSession_Finish() Received TPM Error \n2022-05-24T01:04:41.9132192Z ERROR:esys:src/tss2-esys/api/Esys_StartAuthSession.c:136:Esys_StartAuthSession() Esys Finish ErrorCode (0x000001d5) \n2022-05-24T01:04:41.9145124Z [2022-05-24T01:04:41Z ERROR tss_esapi::context::tpm_commands::session_commands] Error when creating a session: structure is the wrong size (associated with parameter number 1)\n2022-05-24T01:04:41.9153816Z thread 'main' panicked at 'Call to start_auth_session failed: Tss2Error(FormatOne(FormatOneResponseCode { .0: 469, error_number: 21, parameter: true, format_selector: true, number: 1 }))', tss-esapi/tests/integration_tests/context_tests/tpm_commands/enhanced_authorization_ea_commands_tests.rs:870:14\n</code></pre>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in versions 6 and 7 of the <code>tss-esapi</code> crate. Please update to <code>7.1.0</code> or <code>6.1.2</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround that achieves the same functionality.</p>\n<h3 id=\"references\">References</h3>\n<p>For more information on the cause of the issue and the fix, see <a href=\"https://github.com/parallaxsecond/rust-tss-esapi/pull/344\">this</a> PR.</p>\n<p>For more details about the <code>TPM2_StartAuthSession</code> command see section 11.1 of <a href=\"https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part3_Commands_pub.pdf\">the TPM spec, part 3</a>, and section 19.6.3 of <a href=\"https://trustedcomputinggroup.org/wp-content/uploads/TCG_TPM2_r1p59_Part1_Architecture_pub.pdf\">part 1 of the same spec</a> for more information regarding session nonces.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue or discussion in <a href=\"https://github.com/parallaxsecond/rust-tss-esapi\">our repo</a></li>\n<li>Get in touch on <a href=\"https://github.com/parallaxsecond/community#community-channel\">our Slack channel</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/parallaxsecond/rust-tss-esapi/security/advisories/GHSA-w3vw-ccc5-qr8v\">https://github.com/parallaxsecond/rust-tss-esapi/security/advisories/GHSA-w3vw-ccc5-qr8v</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w3vw-ccc5-qr8v\">https://github.com/advisories/GHSA-w3vw-ccc5-qr8v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w3vw-ccc5-qr8v",
            "title": "[tss-esapi] Use After Free in Context::start_auth_session",
            "date_modified": "2022-06-17T01:17:42.000Z",
            "date_published": "2022-06-17T01:17:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w3vw-ccc5-qr8v"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The paper <a href=\"https://eprint.iacr.org/2020/1484\">Cryptanalysis of Aggregate Γ-Signature and Practical Countermeasures in Application to Bitcoin</a> defines a way to forge valid Γ-signatures, an algorithm that is used in the Biscuit specification version 1.\nIt would allow an attacker to create a token with any access level.</p>\n<p>As Biscuit v1 was still an early version and not broadly deployed, we were able to contact all known users of Biscuit v1 and help them migrate to Biscuit v2.\nWe are not aware of any active exploitation of this vulnerability.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The version 2 of the specification mandates a different algorithm than gamma signatures and as such is not affected by this vulnerability. The Biscuit implementations in Rust, Haskell, Go, Java and Javascript all have published versions following the v2 specification.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no known workaround, any use of Biscuit v1 should be migrated to v2.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://eprint.iacr.org/2020/1484\">Cryptanalysis of Aggregate Γ-Signature and Practical Countermeasures in Application to Bitcoin</a></p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in <a href=\"https://github.com/biscuit-auth/biscuit\">biscuit-auth/biscuit</a></li>\n<li>Ask questions on <a href=\"https://matrix.to/#/#biscuit-auth:matrix.org\">Matrix</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-75rw-34q6-72cr\">https://github.com/biscuit-auth/biscuit/security/advisories/GHSA-75rw-34q6-72cr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31053\">https://nvd.nist.gov/vuln/detail/CVE-2022-31053</a></li>\n<li><a href=\"https://eprint.iacr.org/2020/1484\">https://eprint.iacr.org/2020/1484</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-75rw-34q6-72cr\">https://github.com/advisories/GHSA-75rw-34q6-72cr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-75rw-34q6-72cr",
            "title": "[biscuit-auth] Signature forgery in Biscuit",
            "date_modified": "2022-06-17T00:38:04.000Z",
            "date_published": "2022-06-17T00:38:03.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-75rw-34q6-72cr"
            }
        },
        {
            "content_html": "<p>Affected versions of this crate did not implement <code>Drop</code> when <code>#[zeroize(drop)]</code> was used on an <code>enum</code>.</p>\n<p>This can result in memory not being zeroed out after dropping it, which is exactly what is intended when adding this attribute.</p>\n<p>The flaw was corrected in version 1.2 and <code>#[zeroize(drop)]</code> on <code>enum</code>s now properly implements <code>Drop</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/iqlusioninc/crates/issues/876\">https://github.com/iqlusioninc/crates/issues/876</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0115.html\">https://rustsec.org/advisories/RUSTSEC-2021-0115.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r45x-ghr2-qjxc\">https://github.com/advisories/GHSA-r45x-ghr2-qjxc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r45x-ghr2-qjxc",
            "title": "[zeroize_derive] `#[zeroize(drop)]` doesn't implement `Drop` for `enum`s",
            "date_modified": "2022-06-17T00:30:53.000Z",
            "date_published": "2022-06-17T00:30:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r45x-ghr2-qjxc"
            }
        },
        {
            "content_html": "<p>Affected versions of this crate did not require event handlers to have <code>Send</code> bound despite there being no guarantee of them being called on any particular thread, which can potentially lead to data races and undefined behavior.</p>\n<p>The flaw was corrected in commit <a href=\"https://github.com/microsoft/windows-rs/commit/afe32525c22209aa8f632a0f4ad607863b51796a\">afe3252</a> by adding <code>Send</code> bounds.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/microsoft/windows-rs/issues/1409\">https://github.com/microsoft/windows-rs/issues/1409</a></li>\n<li><a href=\"https://github.com/microsoft/windows-rs/commit/afe32525c22209aa8f632a0f4ad607863b51796a\">https://github.com/microsoft/windows-rs/commit/afe32525c22209aa8f632a0f4ad607863b51796a</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0008.html\">https://rustsec.org/advisories/RUSTSEC-2022-0008.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4mq-m75f-mx8m\">https://github.com/advisories/GHSA-x4mq-m75f-mx8m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4mq-m75f-mx8m",
            "title": "[windows] Delegate functions are missing `Send` bound",
            "date_modified": "2022-06-17T00:30:33.000Z",
            "date_published": "2022-06-17T00:30:33.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4mq-m75f-mx8m"
            }
        },
        {
            "content_html": "<p>Affected versions of this crate claimed to construct a const <code>Vec</code> with nonzero length and capacity, but that cannot be done because such a <code>Vec</code> requires a pointer from an allocator.</p>\n<p>The implementation was later changed to just construct a <code>std::borrow::Cow</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Eolu/vec-const/issues/1#issuecomment-898908241\">https://github.com/Eolu/vec-const/issues/1#issuecomment-898908241</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0082.html\">https://rustsec.org/advisories/RUSTSEC-2021-0082.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jmwx-r3gq-qq3p\">https://github.com/advisories/GHSA-jmwx-r3gq-qq3p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jmwx-r3gq-qq3p",
            "title": "[vec-const] vec-const attempts to construct a Vec from a pointer to a const slice",
            "date_modified": "2022-06-17T00:27:58.000Z",
            "date_published": "2022-06-17T00:27:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jmwx-r3gq-qq3p"
            }
        },
        {
            "content_html": "<p>Affected versions of this crate maintains references to memory that might have been freed already.\nIf affects the following two <code>tremor-script</code> language constructs:</p>\n<ul>\n<li>A <a href=\"https://www.tremor.rs/docs/tremor-script/index#merge\">Merge</a> where we assign the result back to the target expression\nand the expression to be merged needs to reference the <code>event</code>:</li>\n</ul>\n<pre><code>let state = merge state of event end;\n</code></pre>\n<ul>\n<li>A <a href=\"https://www.tremor.rs/docs/tremor-script/index#patch\">Patch</a> where we assign the result back to the target expression\nand the patch operations used need to reference the <code>event</code>:</li>\n</ul>\n<pre><code>let state = patch state of insert event.key =&gt; event.value end;\n</code></pre>\n<p>For constructs like this (it doesnt matter what is references in the expression to be merged or the patch operations) an optimization\nwas applied to manipulate the target value in-place, instead of cloning it.</p>\n<p>Our <code>Value</code> struct which underpins all event data in <code>tremor-script</code>, is representing as borrowed strings <code>beef::Cow&lt;'lifetime, str&gt;</code> \nthat reference the actual <code>Vec&lt;u8&gt;</code> the event is based upon. We keep the raw byte-array next to the event structure inside our <code>Event</code> struct as a self-referential struct,\nso we make sure that the structured <code>Value</code> and its references are valid across its whole lifetime.</p>\n<p>The optimization was considered safe as long as it was only possible to merge or patche <code>event</code> data or static data.\nWhen <code>state</code> was introduced to <code>tremor-script</code> a new possibility existed, to keep <code>Value</code> data around for longer than the lifetime of an event.\nIf <code>event</code> data is merged or patched into <code>state</code> without cloning <code>state</code> first, it can still reference keys or values from\nthe previous event, which will now be invalid. This allows access to those already freed regions of memory and to get their content out over the wire.</p>\n<h2 id=\"workaround\">Workaround</h2>\n<p>If an upgrade is not possible, a possible workaround is to avoid the optimization\nby introducing a temporary variable and not immediately reassigning to <code>state</code>:</p>\n<pre><code>let tmp = merge state of event end;\nlet state = tmp\n</code></pre>\n<h2 id=\"fix\">Fix</h2>\n<p>The flaw was corrected in <code>tremor-script</code> version 0.11.6 via commit <a href=\"https://github.com/tremor-rs/tremor-runtime/commit/1a2efcdbe68e5e7fd0a05836ac32d2cde78a0b2e\">1a2efcd</a> by removing the optimization\nand always clone the target expression of a <a href=\"https://www.tremor.rs/docs/tremor-script/index#merge\">Merge</a> or [Patch](<a href=\"https://www.tremor.rs/docs/tremor-script/index#patch\">https://www.tremor.rs/docs/tremor-script/index#patch</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tremor-rs/tremor-runtime/pull/1217\">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0111.html\">https://rustsec.org/advisories/RUSTSEC-2021-0111.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3pp4-64mp-9cg9\">https://github.com/advisories/GHSA-3pp4-64mp-9cg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3pp4-64mp-9cg9",
            "title": "[tremor-script] Memory Safety Issue when using `patch` or `merge` on `state` and assign the result back to `state`",
            "date_modified": "2022-06-17T00:27:30.000Z",
            "date_published": "2022-06-17T00:27:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3pp4-64mp-9cg9"
            }
        },
        {
            "content_html": "<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths\nmeaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed\nand respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users\ncould potentially read files anywhere on the filesystem.</p>\n<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>\n<p>See <a href=\"https://github.com/tower-rs/tower-http/pull/204\">tower-http#204</a> for more details.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tower-rs/tower-http/pull/204\">https://github.com/tower-rs/tower-http/pull/204</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0135.html\">https://rustsec.org/advisories/RUSTSEC-2021-0135.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wwh2-r387-g5rm\">https://github.com/advisories/GHSA-wwh2-r387-g5rm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wwh2-r387-g5rm",
            "title": "[tower-http] Improper validation of Windows paths could lead to directory traversal attack",
            "date_modified": "2022-06-17T00:26:06.000Z",
            "date_published": "2022-06-17T00:26:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wwh2-r387-g5rm"
            }
        },
        {
            "content_html": "<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths\nmeaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed\nand respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users\ncould potentially read files anywhere on the filesystem.</p>\n<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>\n<p>See <a href=\"https://github.com/tower-rs/tower-http/pull/204\">tower-http#204</a> for more details.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tower-rs/tower-http/pull/204\">https://github.com/tower-rs/tower-http/pull/204</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0135.html\">https://rustsec.org/advisories/RUSTSEC-2021-0135.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wwh2-r387-g5rm\">https://github.com/advisories/GHSA-wwh2-r387-g5rm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wwh2-r387-g5rm",
            "title": "[tower-http] Improper validation of Windows paths could lead to directory traversal attack",
            "date_modified": "2022-06-17T00:26:06.000Z",
            "date_published": "2022-06-17T00:26:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wwh2-r387-g5rm"
            }
        },
        {
            "content_html": "<p>In the affected version of this crate, <code>{Iter, IterMut}::next</code> used a weaker memory ordering when loading values than what was required, exposing a potential data race\nwhen iterating over a <code>ThreadLocal</code>'s values.</p>\n<p>Crates using <code>Iter::next</code>, or <code>IterMut::next</code> are affected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Amanieu/thread_local-rs/issues/33\">https://github.com/Amanieu/thread_local-rs/issues/33</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0006.html\">https://rustsec.org/advisories/RUSTSEC-2022-0006.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9hpw-r23r-xgm5\">https://github.com/advisories/GHSA-9hpw-r23r-xgm5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9hpw-r23r-xgm5",
            "title": "[thread_local] Data race in `Iter` and `IterMut`",
            "date_modified": "2022-06-17T00:25:48.000Z",
            "date_published": "2022-06-17T00:25:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9hpw-r23r-xgm5"
            }
        },
        {
            "content_html": "<p>Affected versions of this crate passes an uninitialized buffer to a user-provided <code>Read</code> implementation.</p>\n<p>Arbitrary <code>Read</code> implementations can read from the uninitialized buffer (memory exposure) and also can return incorrect number of bytes written to the buffer. Reading from uninitialized memory produces undefined values that can quickly invoke undefined behavior.</p>\n<p>The problem was fixed in commit <code>cdff034</code> by zero-initializing the buffer before passing it to a user-provided <code>Read</code> implementation.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tectonic-typesetting/tectonic/issues/752\">https://github.com/tectonic-typesetting/tectonic/issues/752</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0112.html\">https://rustsec.org/advisories/RUSTSEC-2021-0112.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6692-8qqf-79jc\">https://github.com/advisories/GHSA-6692-8qqf-79jc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6692-8qqf-79jc",
            "title": "[tectonic_xdv] `Read` on uninitialized buffer may cause UB ('tectonic_xdv' crate)",
            "date_modified": "2022-06-17T00:24:30.000Z",
            "date_published": "2022-06-17T00:24:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6692-8qqf-79jc"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the scratchpad crate before 1.3.1 for Rust. The move_elements function can have a double-free upon a panic in a user-provided f function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-28031\">https://nvd.nist.gov/vuln/detail/CVE-2021-28031</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0030.html\">https://rustsec.org/advisories/RUSTSEC-2021-0030.html</a></li>\n<li><a href=\"https://github.com/okready/scratchpad/issues/1\">https://github.com/okready/scratchpad/issues/1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3qm2-rfqw-fmrw\">https://github.com/advisories/GHSA-3qm2-rfqw-fmrw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3qm2-rfqw-fmrw",
            "title": "[scratchpad] move_elements can double-free objects on panic",
            "date_modified": "2022-06-17T00:24:00.000Z",
            "date_published": "2022-05-24T17:43:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3qm2-rfqw-fmrw"
            }
        }
    ]
}