{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>An integer overflow in dav1d AV1 decoder that can occur when decoding videos with large frame size. This can lead to memory corruption within the AV1 decoder. We recommend upgrading to version 0.7.0 of libdav1d-sys, which includes dav1d 1.4.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0016.html\">https://rustsec.org/advisories/RUSTSEC-2024-0016.html</a></li>\n<li><a href=\"https://www.cvedetails.com/cve/CVE-2024-1580\">https://www.cvedetails.com/cve/CVE-2024-1580</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc39-h54g-pvw6\">https://github.com/advisories/GHSA-mc39-h54g-pvw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc39-h54g-pvw6",
            "title": "[libdav1d-sys] libdav1d-sys affected by dav1d AV1 decoder integer overflow",
            "date_modified": "2024-04-05T15:42:40.000Z",
            "date_published": "2024-04-05T15:42:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc39-h54g-pvw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Given the function <code>transpose::transpose</code>:</p>\n<pre><code class=\"language-rust\">fn transpose&lt;T: Copy&gt;(input: &amp;[T], output: &amp;mut [T], input_width: usize, input_height: usize)\n</code></pre>\n<p>The safety check <code>input_width * input_height == output.len()</code> can fail due to <code>input_width * input_height</code> overflowing in such a way that it equals <code>output.len()</code>.\nAs a result of failing the safety check, memory past the end of <code>output</code> is written to. This only occurs in release mode since <code>*</code> panics on overflow in debug mode.</p>\n<p>Exploiting this issue requires the caller to pass <code>input_width</code> and <code>input_height</code> arguments such that multiplying them overflows, and the overflown result equals the lengths of input and output slices.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ejmahler/transpose/issues/11\">https://github.com/ejmahler/transpose/issues/11</a></li>\n<li><a href=\"https://github.com/ejmahler/transpose/commit/c4bcd39fabca9a31a401d0cc42d4090869b5a37a\">https://github.com/ejmahler/transpose/commit/c4bcd39fabca9a31a401d0cc42d4090869b5a37a</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0080.html\">https://rustsec.org/advisories/RUSTSEC-2023-0080.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5gmm-6m36-r7jh\">https://github.com/advisories/GHSA-5gmm-6m36-r7jh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5gmm-6m36-r7jh",
            "title": "[transpose] transpose: Buffer overflow due to integer overflow",
            "date_modified": "2024-04-05T15:41:34.000Z",
            "date_published": "2024-04-05T15:41:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5gmm-6m36-r7jh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>As of version 0.6.0, the ObjectPool explicitly creates an uninitialized instance of its type parameter when it attempts to free an object, and swaps it into the storage. This causes instant undefined behavior due to reading the uninitialized memory in order to write it to the pool storage.</p>\n<p>Extremely basic usage of the crate can trigger this issue, e.g. this code from a doctest:</p>\n<pre><code class=\"language-rust\">use crayon::prelude::*;\napplication::oneshot().unwrap();\n\nlet mut params = MeshParams::default();\n\nlet mesh = video::create_mesh(params, None).unwrap();\n\n// Deletes the mesh object.\nvideo::delete_mesh(mesh); // &lt;-- UB\n</code></pre>\n<p>The Clippy warning for this code was silenced in commit c2fde19caf6149d91faa504263f0bc5cafc35de5.</p>\n<p>Discovered via <a href=\"https://asan.saethlin.dev/ub?crate=crayon&amp;version=0.7.1\">https://asan.saethlin.dev/ub?crate=crayon&amp;version=0.7.1</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/shawnscode/crayon/issues/109\">https://github.com/shawnscode/crayon/issues/109</a></li>\n<li><a href=\"https://github.com/shawnscode/crayon/commit/c2fde19caf6149d91faa504263f0bc5cafc35de5\">https://github.com/shawnscode/crayon/commit/c2fde19caf6149d91faa504263f0bc5cafc35de5</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0018.html\">https://rustsec.org/advisories/RUSTSEC-2024-0018.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xfhw-6mc4-mgxf\">https://github.com/advisories/GHSA-xfhw-6mc4-mgxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xfhw-6mc4-mgxf",
            "title": "[crayon] crayon: ObjectPool creates uninitialized memory when freeing objects",
            "date_modified": "2024-04-05T15:40:47.000Z",
            "date_published": "2024-04-05T15:40:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xfhw-6mc4-mgxf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>With versions of the whoami crate &gt;= 0.5.3 and &lt; 1.5.0, calling any of these functions leads to an immediate stack buffer overflow on illumos and Solaris:</p>\n<ul>\n<li><code>whoami::username</code></li>\n<li><code>whoami::realname</code></li>\n<li><code>whoami::username_os</code></li>\n<li><code>whoami::realname_os</code></li>\n</ul>\n<p>With versions of the whoami crate &gt;= 0.5.3 and &lt; 1.0.1, calling any of the above functions also leads to a stack buffer overflow on these platforms:</p>\n<ul>\n<li>Bitrig</li>\n<li>DragonFlyBSD</li>\n<li>FreeBSD</li>\n<li>NetBSD</li>\n<li>OpenBSD</li>\n</ul>\n<p>This occurs because of an incorrect definition of the <code>passwd</code> struct on those platforms.</p>\n<p>As a result of this issue, denial of service and data corruption have both been observed in the wild. The issue is possibly exploitable as well.</p>\n<p>This vulnerability also affects other Unix platforms that aren't Linux or macOS.</p>\n<p>This issue has been addressed in whoami 1.5.0.</p>\n<p>For more information, see <a href=\"https://github.com/ardaku/whoami/issues/91\">this GitHub issue</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/ardaku/whoami/issues/91\">https://github.com/ardaku/whoami/issues/91</a></li>\n<li><a href=\"https://github.com/ardaku/whoami/commit/d6ee13ed9e818aa51b8d86d95e8009a376289a40\">https://github.com/ardaku/whoami/commit/d6ee13ed9e818aa51b8d86d95e8009a376289a40</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0020.html\">https://rustsec.org/advisories/RUSTSEC-2024-0020.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w5w5-8vfh-xcjq\">https://github.com/advisories/GHSA-w5w5-8vfh-xcjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w5w5-8vfh-xcjq",
            "title": "[whoami] whoami stack buffer overflow on several Unix platforms",
            "date_modified": "2024-04-05T15:39:19.000Z",
            "date_published": "2024-04-05T15:39:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w5w5-8vfh-xcjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In affected versions, after a <code>Report</code> is constructed using <code>wrap_err</code> or <code>wrap_err_with</code> to attach a message of type <code>D</code> onto an error of type <code>E</code>, then using <code>downcast</code> to recover ownership of either the value of type <code>D</code> or the value of type <code>E</code>, one of two things can go wrong:</p>\n<ul>\n<li><p>If downcasting to <code>E</code>, there remains a value of type <code>D</code> to be dropped. It is incorrectly \"dropped\" by running <code>E</code>'s drop behavior, rather than <code>D</code>'s. For example if <code>D</code> is <code>&amp;str</code> and <code>E</code> is <code>std::io::Error</code>, there would be a call of <code>std::io::Error::drop</code> in which the reference received by the <code>Drop</code> impl does not refer to a valid value of type <code>std::io::Error</code>, but instead to <code>&amp;str</code>.</p>\n</li>\n<li><p>If downcasting to <code>D</code>, there remains a value of type <code>E</code> to be dropped. When <code>D</code> and <code>E</code> do not happen to be the same size, <code>E</code>'s drop behavior is incorrectly executed in the wrong location. The reference received by the <code>Drop</code> impl may point left or right of the real <code>E</code> value that is meant to be getting dropped.</p>\n</li>\n</ul>\n<p>In both cases, when the <code>Report</code> contains an error <code>E</code> that has nontrivial drop behavior, the most likely outcome is memory corruption.</p>\n<p>When the <code>Report</code> contains an error <code>E</code> that has trivial drop behavior (for example a <code>Utf8Error</code>) but where <code>D</code> has nontrivial drop behavior (such as <code>String</code>), the most likely outcome is that downcasting to <code>E</code> would leak <code>D</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/eyre-rs/eyre/issues/141\">https://github.com/eyre-rs/eyre/issues/141</a></li>\n<li><a href=\"https://github.com/eyre-rs/eyre/commit/770ac3fa1435eae3b166a4b072053360e38a0575\">https://github.com/eyre-rs/eyre/commit/770ac3fa1435eae3b166a4b072053360e38a0575</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0021.html\">https://rustsec.org/advisories/RUSTSEC-2024-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4v52-7q2x-v4xj\">https://github.com/advisories/GHSA-4v52-7q2x-v4xj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4v52-7q2x-v4xj",
            "title": "[eyre] eyre: Parts of Report are dropped as the wrong type during downcast",
            "date_modified": "2024-04-05T15:08:54.000Z",
            "date_published": "2024-04-05T15:08:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4v52-7q2x-v4xj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Due to insufficient checking of input data, decoding certain data sequences can lead to <em>Decoder::decode</em> panicking rather than returning an error.</p>\n<p>Example code that triggers this vulnerability looks like this:</p>\n<pre><code class=\"language-rust\">use hpack::Decoder;\n\npub fn main() {\n  let input = &amp;[0x3f];\n  let mut decoder = Decoder::new();\n  let _ = decoder.decode(input);\n}\n</code></pre>\n<p>hpack is unmaintained. A crate with the panics fixed has been published as <a href=\"https://crates.io/crates/hpack-patched\">hpack-patched</a>.</p>\n<p>Also consider using <a href=\"https://crates.io/crates/fluke-hpack\">fluke-hpack</a> or <a href=\"https://crates.io/crates/httlib-huffman\">httlib-huffman</a> as an alternative.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mlalic/hpack-rs/issues/11\">https://github.com/mlalic/hpack-rs/issues/11</a></li>\n<li><a href=\"https://github.com/sno2/hpack-rs-patched/commit/d669282924a95311599e9e7dd53869ee96b3a2f5\">https://github.com/sno2/hpack-rs-patched/commit/d669282924a95311599e9e7dd53869ee96b3a2f5</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0085.html\">https://rustsec.org/advisories/RUSTSEC-2023-0085.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w7hm-hmxv-pvhf\">https://github.com/advisories/GHSA-w7hm-hmxv-pvhf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w7hm-hmxv-pvhf",
            "title": "[hpack] HPACK decoder panics on invalid input",
            "date_modified": "2024-04-05T15:06:28.000Z",
            "date_published": "2024-04-05T15:06:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w7hm-hmxv-pvhf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can send a flood of CONTINUATION frames, causing <code>h2</code> to process them indefinitely. This results in an increase in CPU usage.</p>\n<p>Tokio task budget helps prevent this from a complete denial-of-service, as the server can still respond to legitimate requests, albeit with increased latency.</p>\n<p>More details at <a href=\"https://seanmonstar.com/blog/hyper-http2-continuation-flood/\">https://seanmonstar.com/blog/hyper-http2-continuation-flood/</a>.</p>\n<p>Patches available for 0.4.x and 0.3.x versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0332.html\">https://rustsec.org/advisories/RUSTSEC-2024-0332.html</a></li>\n<li><a href=\"https://seanmonstar.com/blog/hyper-http2-continuation-flood\">https://seanmonstar.com/blog/hyper-http2-continuation-flood</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/421644\">https://www.kb.cert.org/vuls/id/421644</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6cp-qfwq-4gcv\">https://github.com/advisories/GHSA-q6cp-qfwq-4gcv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6cp-qfwq-4gcv",
            "title": "[h2] h2 servers vulnerable to degradation of service with CONTINUATION Flood",
            "date_modified": "2024-04-05T15:05:33.000Z",
            "date_published": "2024-04-05T15:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6cp-qfwq-4gcv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An attacker can send a flood of CONTINUATION frames, causing <code>h2</code> to process them indefinitely. This results in an increase in CPU usage.</p>\n<p>Tokio task budget helps prevent this from a complete denial-of-service, as the server can still respond to legitimate requests, albeit with increased latency.</p>\n<p>More details at <a href=\"https://seanmonstar.com/blog/hyper-http2-continuation-flood/\">https://seanmonstar.com/blog/hyper-http2-continuation-flood/</a>.</p>\n<p>Patches available for 0.4.x and 0.3.x versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0332.html\">https://rustsec.org/advisories/RUSTSEC-2024-0332.html</a></li>\n<li><a href=\"https://seanmonstar.com/blog/hyper-http2-continuation-flood\">https://seanmonstar.com/blog/hyper-http2-continuation-flood</a></li>\n<li><a href=\"https://www.kb.cert.org/vuls/id/421644\">https://www.kb.cert.org/vuls/id/421644</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q6cp-qfwq-4gcv\">https://github.com/advisories/GHSA-q6cp-qfwq-4gcv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q6cp-qfwq-4gcv",
            "title": "[h2] h2 servers vulnerable to degradation of service with CONTINUATION Flood",
            "date_modified": "2024-04-05T15:05:33.000Z",
            "date_published": "2024-04-05T15:05:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q6cp-qfwq-4gcv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Code that attempts to use an item (e.g., a row) returned by an iterator after the iterator has advanced to the next item will be accessing freed memory and experience undefined behaviour. Code that uses the item and then advances the iterator is unaffected. This problem has always existed.</p>\n<p>This is a use-after-free bug, so it's rated high severity. If your code uses a pre-3.0.0 version of cassandra-rs, and uses an item returned by a cassandra-rs iterator after calling <code>next()</code> on that iterator, then it is vulnerable. However, such code will almost always fail immediately - so we believe it is unlikely that any code using this pattern would have reached production. For peace of mind, we recommend you upgrade anyway.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed in version 3.0.0. Users should upgrade to ensure their code cannot use the problematic pattern.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure all usage fits the expected pattern. For example, use <code>get_first_row()</code> rather than an iterator, or completely process an item before advancing the iterator with <code>next()</code>.</p>\n<h3 id=\"references\">References</h3>\n<p>None.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Metaswitch/cassandra-rs/security/advisories/GHSA-x9xc-63hg-vcfq\">https://github.com/Metaswitch/cassandra-rs/security/advisories/GHSA-x9xc-63hg-vcfq</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-27284\">https://nvd.nist.gov/vuln/detail/CVE-2024-27284</a></li>\n<li><a href=\"https://github.com/Metaswitch/cassandra-rs/commit/ae054dc8044eac9c2c7ae2b1ab154b53ca7f8df7\">https://github.com/Metaswitch/cassandra-rs/commit/ae054dc8044eac9c2c7ae2b1ab154b53ca7f8df7</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2024-0017.html\">https://rustsec.org/advisories/RUSTSEC-2024-0017.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x9xc-63hg-vcfq\">https://github.com/advisories/GHSA-x9xc-63hg-vcfq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x9xc-63hg-vcfq",
            "title": "[cassandra-cpp] cassandra-rs's non-idiomatic use of iterators leads to use after free",
            "date_modified": "2024-04-05T15:00:57.000Z",
            "date_published": "2024-04-05T15:00:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x9xc-63hg-vcfq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The 19.0.0 release of Wasmtime contains a regression introduced during its development which can lead to a guest WebAssembly module causing a panic in the host runtime. A valid WebAssembly module, when executed at runtime, may cause this panic. The panic in question is caused when a WebAssembly module issues a <code>table.*</code> instruction which uses a dropped element segment with a table that also has an <code>externref</code> type. This causes Wasmtime to erroneously use an empty function segment instead of an empty externref segment to perform this operation. This mismatch in types causes a panic in Wasmtime when it's asserted that an externref table is only viewed as externrefs.</p>\n<p>This regression was introduced during the development of the 19.0.0 release and only affects the 19.0.0 release. This panic requires the <code>reference-types</code> WebAssembly feature to be enabled, and it is enabled by default. Toolchains are not known to generate this pattern by default so it's likely a module would need to be specifically crafted to trigger this panic.</p>\n<p>A panic in a host runtime represents a possible denial-of-service in some scenarios. This panic cannot introduce memory unsafety or allow WebAssembly to break outside of its sandbox, however. There is no possible heap corruption or memory unsafety from this panic.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Wasmtime 19.0.1 has been released to fix this problem. Users of 19.0.0 should upgrade to 19.0.1. All other versions of Wasmtime are not affected by this issue.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not possible it's recommended to use <code>config.reference_types(false)</code>. That will disable these modules at validation-time which prevents the possibility of a panic at runtime. If reference-types are required, however, then there is no other workaround at this time other than upgrading.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8281\">Original bug report</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8283\">PR to fix the bug</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8018\">PR that introduced the bug</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-75hq-h6g9-h4q5\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-75hq-h6g9-h4q5</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8281\">https://github.com/bytecodealliance/wasmtime/issues/8281</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8018\">https://github.com/bytecodealliance/wasmtime/pull/8018</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8283\">https://github.com/bytecodealliance/wasmtime/pull/8283</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/7f57d0bb0948fa56cc950278d0db230ed10e8664\">https://github.com/bytecodealliance/wasmtime/commit/7f57d0bb0948fa56cc950278d0db230ed10e8664</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-30266\">https://nvd.nist.gov/vuln/detail/CVE-2024-30266</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-75hq-h6g9-h4q5\">https://github.com/advisories/GHSA-75hq-h6g9-h4q5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-75hq-h6g9-h4q5",
            "title": "[wasmtime] Wasmtime vulnerable to panic when using a dropped extenref-typed element segment",
            "date_modified": "2024-04-04T20:24:14.000Z",
            "date_published": "2024-04-02T21:09:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-75hq-h6g9-h4q5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in aliyundrive-webdav v.2.3.3 and before allows a remote attacker to execute arbitrary code via a crafted payload to the sid parameter in the <code>action_query_qrcode</code> component.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-29640\">https://nvd.nist.gov/vuln/detail/CVE-2024-29640</a></li>\n<li><a href=\"https://github.com/lakemoon602/vuln/blob/main/detail.md\">https://github.com/lakemoon602/vuln/blob/main/detail.md</a></li>\n<li><a href=\"https://github.com/messense/aliyundrive-webdav\">https://github.com/messense/aliyundrive-webdav</a></li>\n<li><a href=\"http://aliyundrive-webdav.com\">http://aliyundrive-webdav.com</a></li>\n<li><a href=\"https://github.com/messense/aliyundrive-webdav/blob/main/openwrt/luci-app-aliyundrive-webdav/luasrc/controller/aliyundrive-webdav.lua\">https://github.com/messense/aliyundrive-webdav/blob/main/openwrt/luci-app-aliyundrive-webdav/luasrc/controller/aliyundrive-webdav.lua</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-73v2-rxqp-7q4f\">https://github.com/advisories/GHSA-73v2-rxqp-7q4f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-73v2-rxqp-7q4f",
            "title": "[aliyundrive-webdav] aliyundrive-webdav vulnerable to Command Injection",
            "date_modified": "2024-03-29T20:14:35.000Z",
            "date_published": "2024-03-29T18:30:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-73v2-rxqp-7q4f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>With the default configuration of tls-listener, a malicious user can open 6.4 <code>TcpStream</code>s a second, sending 0 bytes, and can trigger a DoS.</p>\n<h3 id=\"details\">Details</h3>\n<p>The default configuration options make any public service using <code>TlsListener::new()</code> vulnerable to a slow-loris DoS attack.</p>\n<pre><code class=\"language-rust\">/// Default number of concurrent handshakes\npub const DEFAULT_MAX_HANDSHAKES: usize = 64;\n/// Default timeout for the TLS handshake.\npub const DEFAULT_HANDSHAKE_TIMEOUT: Duration = Duration::from_secs(10);\n</code></pre>\n<h3 id=\"poc\">PoC</h3>\n<p>Running the HTTP TLS server example: <a href=\"https://github.com/tmccombs/tls-listener/blob/6c57dea2d9beb1577ae4d80f6eaf03aad4ef3857/examples/http.rs\">https://github.com/tmccombs/tls-listener/blob/6c57dea2d9beb1577ae4d80f6eaf03aad4ef3857/examples/http.rs</a>, then running the following script will prevent new connections to the server.</p>\n<pre><code class=\"language-rust\">use std::{net::ToSocketAddrs, time::Duration};\nuse tokio::{io::AsyncReadExt, net::TcpStream, task::JoinSet};\n\n#[tokio::main]\nasync fn main() {\n    const N: usize = 1024;\n    const T: Duration = Duration::from_secs(10);\n\n    let url = \"127.0.0.1:3000\";\n    let sockets: Vec&lt;_&gt; = url\n        .to_socket_addrs()\n        .unwrap()\n        .inspect(|s| println!(\"{s:?}\"))\n        .collect();\n\n    let mut js = JoinSet::new();\n\n    let mut int = tokio::time::interval(T / (N as u32) / (sockets.len() as u32));\n    int.set_missed_tick_behavior(tokio::time::MissedTickBehavior::Burst);\n    for _ in 0..10000 {\n        for &amp;socket in &amp;sockets {\n            int.tick().await;\n            js.spawn(async move {\n                let mut stream = TcpStream::connect(socket).await.unwrap();\n                let _ = tokio::time::timeout(T, stream.read_to_end(&amp;mut Vec::new())).await;\n            });\n        }\n    }\n\n    while js.join_next().await.is_some() {}\n}\n</code></pre>\n<h3 id=\"impact\">Impact</h3>\n<p>This is an instance of a <a href=\"https://en.wikipedia.org/wiki/Slowloris_(computer_security)\">slow-loris attack</a>. This impacts any publically accessible service using the default configuration of <code>tls-listener</code></p>\n<h3 id=\"mitigation\">Mitigation</h3>\n<p>Previous versions can mitigate this by passing a large value, such as <code>usize::MAX</code> as the parameter to <code>Builder::max_handshakes</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tmccombs/tls-listener/security/advisories/GHSA-2qph-qpvm-2qf7\">https://github.com/tmccombs/tls-listener/security/advisories/GHSA-2qph-qpvm-2qf7</a></li>\n<li><a href=\"https://github.com/tmccombs/tls-listener/commit/d5a7655d6ea9e53ab57c3013092c5576da964bc4\">https://github.com/tmccombs/tls-listener/commit/d5a7655d6ea9e53ab57c3013092c5576da964bc4</a></li>\n<li><a href=\"https://github.com/tmccombs/tls-listener/releases/tag/v0.10.0\">https://github.com/tmccombs/tls-listener/releases/tag/v0.10.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-28854\">https://nvd.nist.gov/vuln/detail/CVE-2024-28854</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Slowloris_(computer_security)\">https://en.wikipedia.org/wiki/Slowloris_(computer_security)</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2qph-qpvm-2qf7\">https://github.com/advisories/GHSA-2qph-qpvm-2qf7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2qph-qpvm-2qf7",
            "title": "[tls-listener] tls-listener affected by the slow loris vulnerability with default configuration",
            "date_modified": "2024-03-18T18:33:19.000Z",
            "date_published": "2024-03-15T19:57:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2qph-qpvm-2qf7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Wasmtime's implementation of the <a href=\"https://github.com/webassembly/simd\">SIMD proposal for WebAssembly</a> on x86_64 contained two distinct bugs in the instruction lowerings implemented in Cranelift. The aarch64 implementation of the simd proposal is not affected. The bugs were presented in the <code>i8x16.swizzle</code> and <code>select</code> WebAssembly instructions. The <code>select</code> instruction is only affected when the inputs are of <code>v128</code> type. The correspondingly affected Cranelift instructions were <code>swizzle</code> and <code>select</code>.</p>\n<p>The <code>swizzle</code> instruction lowering in Cranelift erroneously overwrote the mask input register which could corrupt a constant value, for example. This means that future uses of the same constant may see a different value than the constant itself.</p>\n<p>The <code>select</code> instruction lowering in Cranelift wasn't correctly implemented for vector types that are 128-bits wide. When the condition was 0 the wrong instruction was used to move the correct input to the output of the instruction meaning that only the low 32 bits were moved and the upper 96 bits of the result were left as whatever the register previously contained (instead of the input being moved from). The <code>select</code> instruction worked correctly if the condition was nonzero, however.</p>\n<p>This bug in Wasmtime's implementation of these instructions on x86_64 represents an incorrect implementation of the specified semantics of these instructions according to the <a href=\"https://webassembly.github.io/spec/\">WebAssembly specification</a>. The impact of this is benign for hosts running WebAssembly but represents possible vulnerabilities within the execution of a guest program. For example a WebAssembly program could take unintended branches or materialize incorrect values internally which runs the risk of exposing the program itself to other related vulnerabilities which can occur from miscompilations.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We have released Wasmtime 0.38.1 and cranelift-codegen (and other associated cranelift crates) 0.85.1 which contain the corrected implementations of these two instructions in Cranelift.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not an option for you at this time, you can avoid the vulnerability by <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd\">disabling the Wasm simd proposal</a></p>\n<pre><code class=\"language-rust\">config.wasm_simd(false);\n</code></pre>\n<p>Additionally the bug is only present on x86_64 hosts. Other aarch64 hosts are not affected. Note that s390x hosts don't yet implement the simd proposal and are not affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/webassembly/simd\">The WebAssembly simd proposal</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">Original test case showing the erroneous behavior</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">Fix for the <code>swizzle</code> instruction</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">Fix for the <code>select</code> instruction</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the bytecodealliance/wasmtime repository</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31104\">https://nvd.nist.gov/vuln/detail/CVE-2022-31104</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a></li>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd</a></li>\n<li><a href=\"https://github.com/webassembly/simd\">https://github.com/webassembly/simd</a></li>\n<li><a href=\"https://webassembly.github.io/spec\">https://webassembly.github.io/spec</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jqwc-c49r-4w2x\">https://github.com/advisories/GHSA-jqwc-c49r-4w2x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqwc-c49r-4w2x",
            "title": "[cranelift-codegen] Miscompilation of `i8x16.swizzle` and `select` with v128 inputs",
            "date_modified": "2024-03-14T21:40:29.000Z",
            "date_published": "2022-06-29T22:08:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqwc-c49r-4w2x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Wasmtime's implementation of the <a href=\"https://github.com/webassembly/simd\">SIMD proposal for WebAssembly</a> on x86_64 contained two distinct bugs in the instruction lowerings implemented in Cranelift. The aarch64 implementation of the simd proposal is not affected. The bugs were presented in the <code>i8x16.swizzle</code> and <code>select</code> WebAssembly instructions. The <code>select</code> instruction is only affected when the inputs are of <code>v128</code> type. The correspondingly affected Cranelift instructions were <code>swizzle</code> and <code>select</code>.</p>\n<p>The <code>swizzle</code> instruction lowering in Cranelift erroneously overwrote the mask input register which could corrupt a constant value, for example. This means that future uses of the same constant may see a different value than the constant itself.</p>\n<p>The <code>select</code> instruction lowering in Cranelift wasn't correctly implemented for vector types that are 128-bits wide. When the condition was 0 the wrong instruction was used to move the correct input to the output of the instruction meaning that only the low 32 bits were moved and the upper 96 bits of the result were left as whatever the register previously contained (instead of the input being moved from). The <code>select</code> instruction worked correctly if the condition was nonzero, however.</p>\n<p>This bug in Wasmtime's implementation of these instructions on x86_64 represents an incorrect implementation of the specified semantics of these instructions according to the <a href=\"https://webassembly.github.io/spec/\">WebAssembly specification</a>. The impact of this is benign for hosts running WebAssembly but represents possible vulnerabilities within the execution of a guest program. For example a WebAssembly program could take unintended branches or materialize incorrect values internally which runs the risk of exposing the program itself to other related vulnerabilities which can occur from miscompilations.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>We have released Wasmtime 0.38.1 and cranelift-codegen (and other associated cranelift crates) 0.85.1 which contain the corrected implementations of these two instructions in Cranelift.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not an option for you at this time, you can avoid the vulnerability by <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd\">disabling the Wasm simd proposal</a></p>\n<pre><code class=\"language-rust\">config.wasm_simd(false);\n</code></pre>\n<p>Additionally the bug is only present on x86_64 hosts. Other aarch64 hosts are not affected. Note that s390x hosts don't yet implement the simd proposal and are not affected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/webassembly/simd\">The WebAssembly simd proposal</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4315\">Original test case showing the erroneous behavior</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">Fix for the <code>swizzle</code> instruction</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">Fix for the <code>select</code> instruction</a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the bytecodealliance/wasmtime repository</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-jqwc-c49r-4w2x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31104\">https://nvd.nist.gov/vuln/detail/CVE-2022-31104</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4317\">https://github.com/bytecodealliance/wasmtime/pull/4317</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4318\">https://github.com/bytecodealliance/wasmtime/pull/4318</a></li>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_simd</a></li>\n<li><a href=\"https://github.com/webassembly/simd\">https://github.com/webassembly/simd</a></li>\n<li><a href=\"https://webassembly.github.io/spec\">https://webassembly.github.io/spec</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jqwc-c49r-4w2x\">https://github.com/advisories/GHSA-jqwc-c49r-4w2x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqwc-c49r-4w2x",
            "title": "[wasmtime] Miscompilation of `i8x16.swizzle` and `select` with v128 inputs",
            "date_modified": "2024-03-14T21:40:29.000Z",
            "date_published": "2022-06-29T22:08:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqwc-c49r-4w2x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cloudflare Quiche (through version 0.19.1/0.20.0) was affected by an unlimited resource allocation vulnerability causing rapid increase of memory usage of the system running quiche server or client.</p>\n<p>A remote attacker could take advantage of this vulnerability by repeatedly sending an unlimited number of 1-RTT CRYPTO frames after previously completing the QUIC handshake.\nExploitation was possible for the duration of the connection which could be extended by the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Quiche 0.19.2 and 0.20.1 are the earliest versions containing the fix for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/quiche/security/advisories/GHSA-78wx-jg4j-5j6g\">https://github.com/cloudflare/quiche/security/advisories/GHSA-78wx-jg4j-5j6g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1765\">https://nvd.nist.gov/vuln/detail/CVE-2024-1765</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/1017466c143fc93a82b286a1ba35e53334cdf8e2\">https://github.com/cloudflare/quiche/commit/1017466c143fc93a82b286a1ba35e53334cdf8e2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/11dbf5461ab657bbc02e466d719070124b27ef3c\">https://github.com/cloudflare/quiche/commit/11dbf5461ab657bbc02e466d719070124b27ef3c</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.19.2\">https://github.com/cloudflare/quiche/releases/tag/0.19.2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.20.1\">https://github.com/cloudflare/quiche/releases/tag/0.20.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-78wx-jg4j-5j6g\">https://github.com/advisories/GHSA-78wx-jg4j-5j6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-78wx-jg4j-5j6g",
            "title": "[quiche] quiche vulnerable to unlimited resource allocation by QUIC CRYPTO frames flooding",
            "date_modified": "2024-03-13T15:39:42.000Z",
            "date_published": "2024-03-13T15:39:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-78wx-jg4j-5j6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cloudflare Quiche (through version 0.19.1/0.20.0) was affected by an unlimited resource allocation vulnerability causing rapid increase of memory usage of the system running quiche server or client.</p>\n<p>A remote attacker could take advantage of this vulnerability by repeatedly sending an unlimited number of 1-RTT CRYPTO frames after previously completing the QUIC handshake.\nExploitation was possible for the duration of the connection which could be extended by the attacker.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Quiche 0.19.2 and 0.20.1 are the earliest versions containing the fix for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/quiche/security/advisories/GHSA-78wx-jg4j-5j6g\">https://github.com/cloudflare/quiche/security/advisories/GHSA-78wx-jg4j-5j6g</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1765\">https://nvd.nist.gov/vuln/detail/CVE-2024-1765</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/1017466c143fc93a82b286a1ba35e53334cdf8e2\">https://github.com/cloudflare/quiche/commit/1017466c143fc93a82b286a1ba35e53334cdf8e2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/11dbf5461ab657bbc02e466d719070124b27ef3c\">https://github.com/cloudflare/quiche/commit/11dbf5461ab657bbc02e466d719070124b27ef3c</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.19.2\">https://github.com/cloudflare/quiche/releases/tag/0.19.2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.20.1\">https://github.com/cloudflare/quiche/releases/tag/0.20.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-78wx-jg4j-5j6g\">https://github.com/advisories/GHSA-78wx-jg4j-5j6g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-78wx-jg4j-5j6g",
            "title": "[quiche] quiche vulnerable to unlimited resource allocation by QUIC CRYPTO frames flooding",
            "date_modified": "2024-03-13T15:39:42.000Z",
            "date_published": "2024-03-13T15:39:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-78wx-jg4j-5j6g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cloudflare quiche was discovered to be vulnerable to unbounded storage of information related to connection ID retirement, which could lead to excessive resource consumption. Each QUIC connection possesses a set of connection Identifiers (IDs); see <a href=\"https://datatracker.ietf.org/doc/html/rfc9000#section-5.1\">RFC 9000 Section 5.1</a>. Endpoints declare the number of active connection IDs they are willing to support using the active_connection_id_limit transport parameter. The peer can create new IDs using a NEW_CONNECTION_ID frame but must stay within the active ID limit. This is done by retirement of old IDs, the endpoint sends NEW_CONNECTION_ID includes a value in the retire_prior_to field, which elicits a RETIRE_CONNECTION_ID frame as confirmation. An unauthenticated remote attacker can exploit the vulnerability by sending NEW_CONNECTION_ID frames and manipulating the connection (e.g. by restricting the peer's congestion window size) so that RETIRE_CONNECTION_ID frames can only be sent at a slower rate than they are received, leading to storage of information related to connection IDs in an unbounded queue. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Quiche versions 0.19.2 and 0.20.1 are the earliest to address this problem. There is no workaround for affected versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/quiche/security/advisories/GHSA-xhg9-xwch-vr7x\">https://github.com/cloudflare/quiche/security/advisories/GHSA-xhg9-xwch-vr7x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1410\">https://nvd.nist.gov/vuln/detail/CVE-2024-1410</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/0c5733a84c41e9e178adc866b11ce59ac264f5af\">https://github.com/cloudflare/quiche/commit/0c5733a84c41e9e178adc866b11ce59ac264f5af</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/5be8143126f8cfa8a483d4a5ae475b9a46053fa1\">https://github.com/cloudflare/quiche/commit/5be8143126f8cfa8a483d4a5ae475b9a46053fa1</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/7ab42af5f5e97f20f1d63b7ea2f9ab0536678c40\">https://github.com/cloudflare/quiche/commit/7ab42af5f5e97f20f1d63b7ea2f9ab0536678c40</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/a983998c4408605905ee9a6ab0fc00e68436ac67\">https://github.com/cloudflare/quiche/commit/a983998c4408605905ee9a6ab0fc00e68436ac67</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.19.2\">https://github.com/cloudflare/quiche/releases/tag/0.19.2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.20.1\">https://github.com/cloudflare/quiche/releases/tag/0.20.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xhg9-xwch-vr7x\">https://github.com/advisories/GHSA-xhg9-xwch-vr7x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xhg9-xwch-vr7x",
            "title": "[quiche] quiche vulnerable to unbounded storage of information related to connection ID retirement",
            "date_modified": "2024-03-13T15:38:22.000Z",
            "date_published": "2024-03-13T15:38:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xhg9-xwch-vr7x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Cloudflare quiche was discovered to be vulnerable to unbounded storage of information related to connection ID retirement, which could lead to excessive resource consumption. Each QUIC connection possesses a set of connection Identifiers (IDs); see <a href=\"https://datatracker.ietf.org/doc/html/rfc9000#section-5.1\">RFC 9000 Section 5.1</a>. Endpoints declare the number of active connection IDs they are willing to support using the active_connection_id_limit transport parameter. The peer can create new IDs using a NEW_CONNECTION_ID frame but must stay within the active ID limit. This is done by retirement of old IDs, the endpoint sends NEW_CONNECTION_ID includes a value in the retire_prior_to field, which elicits a RETIRE_CONNECTION_ID frame as confirmation. An unauthenticated remote attacker can exploit the vulnerability by sending NEW_CONNECTION_ID frames and manipulating the connection (e.g. by restricting the peer's congestion window size) so that RETIRE_CONNECTION_ID frames can only be sent at a slower rate than they are received, leading to storage of information related to connection IDs in an unbounded queue. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Quiche versions 0.19.2 and 0.20.1 are the earliest to address this problem. There is no workaround for affected versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/quiche/security/advisories/GHSA-xhg9-xwch-vr7x\">https://github.com/cloudflare/quiche/security/advisories/GHSA-xhg9-xwch-vr7x</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2024-1410\">https://nvd.nist.gov/vuln/detail/CVE-2024-1410</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/0c5733a84c41e9e178adc866b11ce59ac264f5af\">https://github.com/cloudflare/quiche/commit/0c5733a84c41e9e178adc866b11ce59ac264f5af</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/5be8143126f8cfa8a483d4a5ae475b9a46053fa1\">https://github.com/cloudflare/quiche/commit/5be8143126f8cfa8a483d4a5ae475b9a46053fa1</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/7ab42af5f5e97f20f1d63b7ea2f9ab0536678c40\">https://github.com/cloudflare/quiche/commit/7ab42af5f5e97f20f1d63b7ea2f9ab0536678c40</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/a983998c4408605905ee9a6ab0fc00e68436ac67\">https://github.com/cloudflare/quiche/commit/a983998c4408605905ee9a6ab0fc00e68436ac67</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.19.2\">https://github.com/cloudflare/quiche/releases/tag/0.19.2</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/releases/tag/0.20.1\">https://github.com/cloudflare/quiche/releases/tag/0.20.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xhg9-xwch-vr7x\">https://github.com/advisories/GHSA-xhg9-xwch-vr7x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xhg9-xwch-vr7x",
            "title": "[quiche] quiche vulnerable to unbounded storage of information related to connection ID retirement",
            "date_modified": "2024-03-13T15:38:22.000Z",
            "date_published": "2024-03-13T15:38:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xhg9-xwch-vr7x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>In the WASMI Interpreter, an <a href=\"https://cwe.mitre.org/data/definitions/787.html\">Out-of-bounds Buffer Write</a> will arise arise if the host calls or resumes a Wasm function with more parameters than the default limit (128), as it will surpass the stack value. This doesn’t affect calls from Wasm to Wasm, only from host to Wasm.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>After conducting an analysis of the dependent Polkadot systems of <code>wasmi</code>: <a href=\"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts\">Pallet Contracts</a>, <a href=\"https://github.com/paritytech/parity-signer\">Parity Signer</a>, and <a href=\"https://github.com/smol-dot/smoldot\">Smoldot</a>, we have found that none on those systems have been affected by the issue as they are calling host to Wasm function with a small limited amount of parameters always. </p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>If you are using <code>wasmi</code> betwen version 0.15.0 and 0.31.0, please update it to the <a href=\"https://github.com/paritytech/wasmi/releases/tag/v0.31.1\">0.31.1</a> patch release that we just published.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure no more than 128 parameters can be pass in a call from the host to a Wasm function. </p>\n<h3 id=\"references\">References</h3>\n<p>Patch PR: </p>\n<h3 id=\"special-thanks\">Special thanks</h3>\n<p>Special thanks to Stellar Development Foundation for reporting this security vulnerability.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wasmi-labs/wasmi/security/advisories/GHSA-75jp-vq8x-h4cq\">https://github.com/wasmi-labs/wasmi/security/advisories/GHSA-75jp-vq8x-h4cq</a></li>\n<li><a href=\"https://github.com/wasmi-labs/wasmi/commit/f7b3200e9f3dc9e2cbca966cb255c228453c792f\">https://github.com/wasmi-labs/wasmi/commit/f7b3200e9f3dc9e2cbca966cb255c228453c792f</a></li>\n<li><a href=\"https://github.com/wasmi-labs/wasmi/releases/tag/v0.31.1\">https://github.com/wasmi-labs/wasmi/releases/tag/v0.31.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-75jp-vq8x-h4cq\">https://github.com/advisories/GHSA-75jp-vq8x-h4cq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-75jp-vq8x-h4cq",
            "title": "[wasmi] Wasmi Out-of-bounds Write for host to Wasm calls with more than 128 Parameters",
            "date_modified": "2024-03-07T17:26:28.000Z",
            "date_published": "2024-03-07T17:26:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-75jp-vq8x-h4cq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Apollo Router is a configurable, high-performance graph router written in Rust to run a federated supergraph that uses Apollo Federation. Affected versions are subject to a Denial-of-Service (DoS) type vulnerability. When receiving compressed HTTP payloads, affected versions of the Router evaluate the <code>limits.http_max_request_bytes</code> configuration option after the entirety of the compressed payload is decompressed. If affected versions of the Router receive highly compressed payloads, this could result in significant memory consumption while the compressed payload is expanded. </p>\n<h3 id=\"patches\">Patches</h3>\n<p>Router version 1.40.2 has a fix for the vulnerability.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you are unable to upgrade, you may be able to implement mitigations at proxies or load balancers positioned in front of your Router fleet (e.g. Nginx, HAProxy, or cloud-native WAF services) by creating limits on HTTP body upload size. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/apollographql/router/security/advisories/GHSA-cgqf-3cq5-wvcj\">https://github.com/apollographql/router/security/advisories/GHSA-cgqf-3cq5-wvcj</a></li>\n<li><a href=\"https://github.com/apollographql/router/commit/9e9527c73c8f34fc8438b09066163cd42520f413\">https://github.com/apollographql/router/commit/9e9527c73c8f34fc8438b09066163cd42520f413</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cgqf-3cq5-wvcj\">https://github.com/advisories/GHSA-cgqf-3cq5-wvcj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cgqf-3cq5-wvcj",
            "title": "[apollo-router] Apollo Router's Compressed Payloads do not respect HTTP Payload Limits",
            "date_modified": "2024-03-06T18:24:18.000Z",
            "date_published": "2024-03-06T18:24:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cgqf-3cq5-wvcj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}