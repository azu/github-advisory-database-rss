{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A bug in Frontier's MODEXP precompile implementation can cause an integer underflow in certain conditions. This will cause a node crash for debug builds. For release builds (and production WebAssembly binaries), the impact is limited as it can only cause a normal EVM out-of-gas. It is recommended that you apply the patch as soon as possible.</p>\n<p>If you do not use MODEXP precompile in your runtime, then you are not impacted.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Patches are applied in PR #549.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>Patch PR: #549</p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thanks to SR-Labs for discovering the security vulnerability, and thanks to PureStake team for the patches.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/paritytech/frontier\">Frontier repo</a></li>\n</ul>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cjg2-2fjg-fph4",
            "title": "[frontier] Integer underflow in Frontier",
            "date_modified": "2022-01-15T00:03:46.000Z",
            "date_published": "2022-01-14T21:03:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cjg2-2fjg-fph4"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the lru crate before 0.7.1 for Rust. The iterators have a use-after-free, as demonstrated by an access after a pop operation.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v362-2895-h9r2",
            "title": "[lru] Use After Free in lru",
            "date_modified": "2022-01-07T22:37:01.000Z",
            "date_published": "2022-01-07T22:37:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v362-2895-h9r2"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the smallvec crate before 0.6.13 for Rust. It can create an uninitialized value of any type, including a reference type.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-55m5-whcv-c49c",
            "title": "[smallvec] Use of Uninitialized Resource in smallvec",
            "date_modified": "2022-01-06T22:20:28.000Z",
            "date_published": "2022-01-06T22:20:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-55m5-whcv-c49c"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly coerce an immutable reference into a mutable reference, leading to memory corruption.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9qj6-4rfq-vm84",
            "title": "[actix-web] Out-of-bounds Write in actix-web",
            "date_modified": "2022-01-06T22:20:41.000Z",
            "date_published": "2022-01-06T22:20:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9qj6-4rfq-vm84"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can unsoundly extend the lifetime of a string, leading to memory corruption.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fgfm-hqjw-3265",
            "title": "[actix-web] Out-of-bounds Write in actix-web",
            "date_modified": "2022-01-06T22:18:46.000Z",
            "date_published": "2022-01-06T22:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fgfm-hqjw-3265"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the actix-web crate before 0.7.15 for Rust. It can add the Send marker trait to an object that cannot be sent between threads safely, leading to memory corruption.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7x36-h62w-vw65",
            "title": "[actix-web] Out-of-bounds Write in actix-web",
            "date_modified": "2022-01-06T22:18:58.000Z",
            "date_published": "2022-01-06T22:18:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7x36-h62w-vw65"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the libpulse-binding crate before 1.2.1 for Rust. get_format_info can cause a use-after-free.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-hxjf-h2mh-r6hj",
            "title": "[libpulse-binding] Use After Free in libpulse-binding",
            "date_modified": "2022-01-06T22:20:12.000Z",
            "date_published": "2022-01-06T22:20:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-hxjf-h2mh-r6hj"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the pnet crate before 0.27.2 for Rust. There is a segmentation fault (upon attempted dereference of an uninitialized descriptor) because of an erroneous IcmpTransportChannelIterator compiler optimization.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-24g6-5rx7-58wj",
            "title": "[pnet] Missing Initialization of Resource in pnet",
            "date_modified": "2022-01-07T16:13:37.000Z",
            "date_published": "2022-01-06T22:18:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-24g6-5rx7-58wj"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the libpulse-binding crate before 1.2.1 for Rust. get_context can cause a use-after-free.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jqpv-jm4m-86j9",
            "title": "[libpulse-binding] Use After Free in libpulse-binding",
            "date_modified": "2022-01-06T22:17:50.000Z",
            "date_published": "2022-01-06T22:17:50.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jqpv-jm4m-86j9"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the buffoon crate through 2020-12-31 for Rust. InputStream::read_exact may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v938-qcc9-rwv8",
            "title": "[buffoon] Use of Uninitialized Resource in buffoon.",
            "date_modified": "2022-01-07T16:24:02.000Z",
            "date_published": "2022-01-06T22:17:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v938-qcc9-rwv8"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the bite crate through 2020-12-31 for Rust. read::BiteReadExpandedExt::read_framed_max may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v2ch-fc8f-qm33",
            "title": "[bite] Use of Uninitialized Resource in bite.",
            "date_modified": "2022-01-07T16:24:38.000Z",
            "date_published": "2022-01-06T22:16:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v2ch-fc8f-qm33"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the libpulse-binding crate before 2.6.0 for Rust. It mishandles a panic that crosses a Foreign Function Interface (FFI) boundary.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xvcg-2q82-r87j",
            "title": "[libpulse-binding] Panic mishandled in libpulse-binding",
            "date_modified": "2022-01-07T16:25:12.000Z",
            "date_published": "2022-01-06T22:18:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xvcg-2q82-r87j"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the vec-const crate before 2.0.0 for Rust. It tries to construct a Vec from a pointer to a const slice, leading to memory corruption.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x76r-966h-5qv9",
            "title": "[vec-const] Out-of-bounds Write in vec-const",
            "date_modified": "2022-01-07T16:19:26.000Z",
            "date_published": "2022-01-06T22:15:56.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x76r-966h-5qv9"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the acc_reader crate through 2020-12-27 for Rust. fill_buf may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p4cr-64x4-f92f",
            "title": "[acc_reader] Use of Uninitialized Resource in acc_reader.",
            "date_modified": "2022-01-07T16:21:26.000Z",
            "date_published": "2022-01-06T22:17:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p4cr-64x4-f92f"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the acc_reader crate through 2020-12-27 for Rust. read_up_to may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-799f-r78p-gq9c",
            "title": "[acc_reader] Use of Uninitialized Resource in acc_reader.",
            "date_modified": "2022-01-07T16:22:25.000Z",
            "date_published": "2022-01-06T22:17:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-799f-r78p-gq9c"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the flumedb crate through 2021-01-07 for Rust. read_entry may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2",
            "title": "[flumedb] Use of Uninitialized Resource in flumedb.",
            "date_modified": "2022-01-07T16:14:38.000Z",
            "date_published": "2022-01-06T22:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the binjs_io crate through 2021-01-03 for Rust. The Read method may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cw4j-cf6c-mmfv",
            "title": "[binjs_io] Use of Uninitialized Resource in binjs_io.",
            "date_modified": "2022-01-07T17:36:38.000Z",
            "date_published": "2022-01-06T22:14:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cw4j-cf6c-mmfv"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the bronzedb-protocol crate through 2021-01-03 for Rust. ReadKVExt may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jv2r-jx6q-89jg",
            "title": "[bronzedb-protocol] Use of Uninitialized Resource in bronzedb-protocol.",
            "date_modified": "2022-01-07T16:16:58.000Z",
            "date_published": "2022-01-06T22:16:32.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jv2r-jx6q-89jg"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the derive-com-impl crate before 0.1.2 for Rust. An invalid reference (and memory corruption) can occur because AddRef might not be called before returning a pointer.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w4cc-pc2h-whcj",
            "title": "[derive-com-impl] Out-of-bounds Write in derive-com-impl",
            "date_modified": "2022-01-07T16:17:29.000Z",
            "date_published": "2022-01-06T22:16:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w4cc-pc2h-whcj"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the columnar crate through 2021-01-07 for Rust. ColumnarReadExt::read_typed_vec may read from uninitialized memory locations.</p>\n<ul>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n<li>&lt;[object Object]&gt;</li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9mp7-45qh-r8j8",
            "title": "[columnar] Use of Uninitialized Resource in columnar.",
            "date_modified": "2022-01-07T17:34:42.000Z",
            "date_published": "2022-01-06T22:13:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9mp7-45qh-r8j8"
            }
        }
    ]
}