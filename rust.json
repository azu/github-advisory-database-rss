{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>On windows, <code>atty</code> dereferences a potentially unaligned pointer.</p>\n<p>In practice however, the pointer won't be unaligned unless a custom global allocator is used.</p>\n<p>In particular, the <code>System</code> allocator on windows uses <code>HeapAlloc</code>, which guarantees a large enough alignment.</p>\n<h1 id=\"atty-is-unmaintained\">atty is Unmaintained</h1>\n<p>A Pull Request with a fix has been provided over a year ago but the maintainer seems to be unreachable.</p>\n<p>Last release of <code>atty</code> was almost 3 years ago.</p>\n<h2 id=\"possible-alternatives\">Possible Alternative(s)</h2>\n<p>The below list has not been vetted in any way and may or may not contain alternatives;</p>\n<ul>\n<li><a href=\"https://crates.io/crates/is-terminal\">is-terminal</a></li>\n<li>std::io::IsTerminal <em>nightly-only experimental</em></li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/softprops/atty/issues/50\">https://github.com/softprops/atty/issues/50</a></li>\n<li><a href=\"https://github.com/softprops/atty/pull/51\">https://github.com/softprops/atty/pull/51</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0145.html\">https://rustsec.org/advisories/RUSTSEC-2021-0145.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g98v-hv3f-hcfr\">https://github.com/advisories/GHSA-g98v-hv3f-hcfr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g98v-hv3f-hcfr",
            "title": "[atty] atty potential unaligned read",
            "date_modified": "2023-06-30T20:22:03.000Z",
            "date_published": "2023-06-30T20:21:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g98v-hv3f-hcfr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The function <code>ChunkId::new</code> creates a misaligned pointer by casting mutable pointer of <code>u8</code> slice which has alignment 1 to the mutable pointer of <code>u32</code> which has alignment 4, and dereference the misaligned pointer leading UB, which should not be allowed in safe function.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/buckyos/CYFS/issues/275\">https://github.com/buckyos/CYFS/issues/275</a></li>\n<li><a href=\"https://github.com/buckyos/CYFS/commit/e030188895096fd8d91d48753877729f4d37dd24\">https://github.com/buckyos/CYFS/commit/e030188895096fd8d91d48753877729f4d37dd24</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0046.html\">https://rustsec.org/advisories/RUSTSEC-2023-0046.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g753-ghr7-q33w\">https://github.com/advisories/GHSA-g753-ghr7-q33w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g753-ghr7-q33w",
            "title": "[cyfs-base] cyfs-base vulnerable to misaligned pointer dereference in `ChunkId::new`",
            "date_modified": "2023-06-22T20:01:57.000Z",
            "date_published": "2023-06-22T20:01:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g753-ghr7-q33w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption\">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>\n<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>\n<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24791\">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a\">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>\n<li><a href=\"https://github.com/WebAssembly/reference-types\">https://github.com/WebAssembly/reference-types</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0016.html\">https://rustsec.org/advisories/RUSTSEC-2022-0016.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gwc9-348x-qwv2\">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gwc9-348x-qwv2",
            "title": "[wasmtime] Use after free in Wasmtime",
            "date_modified": "2023-06-22T05:03:26.000Z",
            "date_published": "2022-04-01T13:36:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gwc9-348x-qwv2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>There is a use after free vulnerability in Wasmtime when both running Wasm that uses <code>externref</code>s and enabling <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption\">epoch interruption</a> in Wasmtime. If you are not explicitly enabling epoch interruption (it is disabled by default) then you are not affected. If you are explicitly disabling the Wasm reference types proposal (it is enabled by default) then you are also not affected.</p>\n<p>The use after free is caused by Cranelift failing to emit stack maps when there are safepoints inside cold blocks. Cold blocks occur when epoch interruption is enabled. Cold blocks are emitted at the end of compiled functions, and change the order blocks are emitted versus defined. This reordering accidentally caused Cranelift to skip emitting some stack maps because it expected to emit the stack maps in block definition order, rather than block emission order. When Wasmtime would eventually collect garbage, it would fail to find live references on the stack because of the missing stack maps, think that they were unreferenced garbage, and therefore reclaim them. Then after the collection ended, the Wasm code could use the reclaimed-too-early references, which is a use after free.</p>\n<p>This bug was discovered while extending our fuzz targets for <code>externref</code>s and GC in Wasmtime. The updated fuzz target thoroughly exercises these code paths and feature combinations now. We have also added a regression test for this bug. Released versions 0.34.2 and 0.35.2, which fix the vulnerability. We recommend all Wasmtime users upgrade to these patched versions. If upgrading is not an option for you at this time, you can avoid the vulnerability by either disabling the Wasm reference types proposal or by disabling epoch interruption if you were previously enabling it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-gwc9-348x-qwv2</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-24791\">https://nvd.nist.gov/vuln/detail/CVE-2022-24791</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a\">https://github.com/bytecodealliance/wasmtime/commit/666c2554ea0e1728c35aa41178cf235920db888a</a></li>\n<li><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.epoch_interruption</a></li>\n<li><a href=\"https://github.com/WebAssembly/reference-types\">https://github.com/WebAssembly/reference-types</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0016.html\">https://rustsec.org/advisories/RUSTSEC-2022-0016.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gwc9-348x-qwv2\">https://github.com/advisories/GHSA-gwc9-348x-qwv2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gwc9-348x-qwv2",
            "title": "[wasmtime] Use after free in Wasmtime",
            "date_modified": "2023-06-22T05:03:26.000Z",
            "date_published": "2022-04-01T13:36:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gwc9-348x-qwv2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the tremor-script crate before 0.11.6 for Rust. A patch operation may result in a use-after-free.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45701\">https://nvd.nist.gov/vuln/detail/CVE-2021-45701</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tremor-script/RUSTSEC-2021-0111.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tremor-script/RUSTSEC-2021-0111.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0111.html\">https://rustsec.org/advisories/RUSTSEC-2021-0111.html</a></li>\n<li><a href=\"https://github.com/tremor-rs/tremor-runtime/pull/1217\">https://github.com/tremor-rs/tremor-runtime/pull/1217</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-q2x5-6q7q-r872\">https://github.com/advisories/GHSA-q2x5-6q7q-r872</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-q2x5-6q7q-r872",
            "title": "[tremor-script] Use After Free in tremor-script",
            "date_modified": "2023-06-22T05:03:25.000Z",
            "date_published": "2022-01-06T22:10:17.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-q2x5-6q7q-r872"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the slock crate through 2020-11-17 for Rust. Slock unconditionally implements Send and Sync.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36455\">https://nvd.nist.gov/vuln/detail/CVE-2020-36455</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/issues/2\">https://github.com/BrokenLamp/slock-rs/issues/2</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0135.html\">https://rustsec.org/advisories/RUSTSEC-2020-0135.html</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6\">https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc36-5m36-hjh5\">https://github.com/advisories/GHSA-mc36-5m36-hjh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5",
            "title": "[slock] Data races in slock",
            "date_modified": "2023-06-22T05:03:19.000Z",
            "date_published": "2021-08-25T20:58:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because xcb::xproto::GetAtomNameReply::name() calls std::str::from_utf8_unchecked() on unvalidated bytes from an X server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26955\">https://nvd.nist.gov/vuln/detail/CVE-2021-26955</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/issues/653\">https://github.com/RustSec/advisory-db/issues/653</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0019.html\">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3288-cwgw-ch86\">https://github.com/advisories/GHSA-3288-cwgw-ch86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3288-cwgw-ch86",
            "title": "[xcb] Unchecked Return Value in xcb",
            "date_modified": "2023-06-22T05:03:18.000Z",
            "date_published": "2021-08-25T20:53:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3288-cwgw-ch86"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the rusqlite crate before 0.23.0 for Rust. Memory safety can be violated via an Auxdata API use-after-free.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35870\">https://nvd.nist.gov/vuln/detail/CVE-2020-35870</a></li>\n<li><a href=\"https://github.com/rusqlite/rusqlite/commit/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3\">https://github.com/rusqlite/rusqlite/commit/2ef3628dac35aeba0a97d5fb3a57746b4e1d62b3</a></li>\n<li><a href=\"https://github.com/rusqlite/rusqlite/releases/tag/0.23.0\">https://github.com/rusqlite/rusqlite/releases/tag/0.23.0</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0014.html\">https://rustsec.org/advisories/RUSTSEC-2020-0014.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8h4j-vm3r-vcq3\">https://github.com/advisories/GHSA-8h4j-vm3r-vcq3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8h4j-vm3r-vcq3",
            "title": "[rusqlite] Use after free in rusqlite",
            "date_modified": "2023-06-22T05:03:18.000Z",
            "date_published": "2021-08-25T20:47:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8h4j-vm3r-vcq3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the futures-util crate before 0.3.2 for Rust. FuturesUnordered can lead to data corruption because Sync is mishandled.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35908\">https://nvd.nist.gov/vuln/detail/CVE-2020-35908</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0062.html\">https://rustsec.org/advisories/RUSTSEC-2020-0062.html</a></li>\n<li><a href=\"https://github.com/rust-lang/futures-rs/issues/2050\">https://github.com/rust-lang/futures-rs/issues/2050</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r9g-j7jj-hw6c\">https://github.com/advisories/GHSA-5r9g-j7jj-hw6c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r9g-j7jj-hw6c",
            "title": "[futures-util] Improper `Sync` implementation on `FuturesUnordered` in futures-utils can cause data corruption",
            "date_modified": "2023-06-22T05:03:12.000Z",
            "date_published": "2022-05-24T17:37:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r9g-j7jj-hw6c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The From implementation for Vec was not properly implemented, returning a vector backed by freed memory. This could lead to memory corruption or be exploited to cause undefined behavior.</p>\n<p>A fix was published in version 0.1.3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16140\">https://nvd.nist.gov/vuln/detail/CVE-2019-16140</a></li>\n<li><a href=\"https://github.com/sagebind/isahc/issues/2\">https://github.com/sagebind/isahc/issues/2</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0016.html\">https://rustsec.org/advisories/RUSTSEC-2019-0016.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5rrv-m36h-qwf8\">https://github.com/advisories/GHSA-5rrv-m36h-qwf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5rrv-m36h-qwf8",
            "title": "[chttp] Use-after-free in chttp",
            "date_modified": "2023-06-22T05:03:03.000Z",
            "date_published": "2021-08-25T20:44:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5rrv-m36h-qwf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When this function was passed an empty string, <code>openssl</code> would attempt to call <code>strlen</code> on it, reading arbitrary memory until it reached a NUL byte.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sfackler/rust-openssl/issues/1965\">https://github.com/sfackler/rust-openssl/issues/1965</a></li>\n<li><a href=\"https://github.com/sfackler/rust-openssl/pull/1968\">https://github.com/sfackler/rust-openssl/pull/1968</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0044.html\">https://rustsec.org/advisories/RUSTSEC-2023-0044.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xcf7-rvmh-g6q4\">https://github.com/advisories/GHSA-xcf7-rvmh-g6q4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xcf7-rvmh-g6q4",
            "title": "[openssl] `openssl` `X509VerifyParamRef::set_host` buffer over-read",
            "date_modified": "2023-06-21T22:07:52.000Z",
            "date_published": "2023-06-21T22:07:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xcf7-rvmh-g6q4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>memoffset allows attempt of reading data from address <code>0</code> with arbitrary type. This behavior is an undefined behavior because address <code>0</code> to <code>std::mem::size_of&lt;T&gt;</code> may not have valid bit-pattern with <code>T</code>. Old implementation dereferences uninitialized memory obtained from <code>std::mem::align_of</code>. Older implementation prior to it allows using uninitialized data obtained from <code>std::mem::uninitialized</code> with arbitrary type then compute offset by taking the address of field-projection. This may also result in an undefined behavior for \"father\" that includes (directly or transitively) type that <a href=\"https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html\">does not allow to be uninitialized</a>.</p>\n<p>This flaw was corrected by using <code>std::ptr::addr_of</code> in <a href=\"https://github.com/Gilnaa/memoffset/pull/50\">https://github.com/Gilnaa/memoffset/pull/50</a>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/Gilnaa/memoffset/issues/24\">https://github.com/Gilnaa/memoffset/issues/24</a></li>\n<li><a href=\"https://github.com/Gilnaa/memoffset/pull/50\">https://github.com/Gilnaa/memoffset/pull/50</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0045.html\">https://rustsec.org/advisories/RUSTSEC-2023-0045.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wfg4-322g-9vqv\">https://github.com/advisories/GHSA-wfg4-322g-9vqv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wfg4-322g-9vqv",
            "title": "[memoffset] memoffset allows reading uninitialized memory",
            "date_modified": "2023-06-21T22:06:31.000Z",
            "date_published": "2023-06-21T22:06:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wfg4-322g-9vqv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The urlnorm crate through 0.1.4 for Rust allows Regular Expression Denial of Service (ReDos) via a crafted URL to lib.rs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33289\">https://nvd.nist.gov/vuln/detail/CVE-2023-33289</a></li>\n<li><a href=\"https://gist.github.com/6en6ar/b118888dc739e8979038f24c8ac33611\">https://gist.github.com/6en6ar/b118888dc739e8979038f24c8ac33611</a></li>\n<li><a href=\"https://github.com/progscrape/urlnorm\">https://github.com/progscrape/urlnorm</a></li>\n<li><a href=\"https://lib.rs/crates/urlnorm\">https://lib.rs/crates/urlnorm</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fqhp-rhm6-8rrj\">https://github.com/advisories/GHSA-fqhp-rhm6-8rrj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fqhp-rhm6-8rrj",
            "title": "[urlnorm] urlnorm vulnerable to Regular Expression Denial of Service",
            "date_modified": "2023-06-28T19:43:30.000Z",
            "date_published": "2023-06-21T21:30:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fqhp-rhm6-8rrj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The 1.4.0 release includes a regression on the filesystem scope check for dotfiles on Linux and macOS.</p>\n<p>Previously dotfiles (eg. <code>$HOME/.ssh/</code>) were not implicitly allowed by the glob wildcard scopes (eg. <code>$HOME/*</code>), but a regression was introduced when a configuration option for this behavior was implemented and dotfiles were implicitly allowed.</p>\n<p>Only Tauri applications using wildcard scopes in the <code>fs</code> endpoint are affected.\nOnly macOS and Linux systems are affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The regression has been patched on <code>v1.4.1</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There are no known workarounds at this time, users should update to <code>v1.4.1</code> immediately.</p>\n<h3 id=\"references\">References</h3>\n<p>See the <a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">original advisory</a> for more information.</p>\n<h3 id=\"for-more-information\">For more Information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-wmff-grcw-jcfm\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-wmff-grcw-jcfm</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/pull/6969#discussion_r1232018347\">https://github.com/tauri-apps/tauri/pull/6969#discussion_r1232018347</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/pull/7227\">https://github.com/tauri-apps/tauri/pull/7227</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/066c09a6ea06f42f550d090715e06beb65cd5564\">https://github.com/tauri-apps/tauri/commit/066c09a6ea06f42f550d090715e06beb65cd5564</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wmff-grcw-jcfm\">https://github.com/advisories/GHSA-wmff-grcw-jcfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wmff-grcw-jcfm",
            "title": "[tauri] Tauri vulnerable to Regression on Filesystem Scope Checks for Dotfiles",
            "date_modified": "2023-06-21T18:35:24.000Z",
            "date_published": "2023-06-21T18:35:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wmff-grcw-jcfm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-1967\">https://nvd.nist.gov/vuln/detail/CVE-2020-1967</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=eb563247aef3e83dda7679c43f9649270462e5b1\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=eb563247aef3e83dda7679c43f9649270462e5b1</a></li>\n<li><a href=\"https://github.com/irsl/CVE-2020-1967\">https://github.com/irsl/CVE-2020-1967</a></li>\n<li><a href=\"https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44440\">https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44440</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r66ea9c436da150683432db5fbc8beb8ae01886c6459ac30c2cea7345@%3Cdev.tomcat.apache.org%3E\">https://lists.apache.org/thread.html/r66ea9c436da150683432db5fbc8beb8ae01886c6459ac30c2cea7345@%3Cdev.tomcat.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r94d6ac3f010a38fccf4f432b12180a13fa1cf303559bd805648c9064@%3Cdev.tomcat.apache.org%3E\">https://lists.apache.org/thread.html/r94d6ac3f010a38fccf4f432b12180a13fa1cf303559bd805648c9064@%3Cdev.tomcat.apache.org%3E</a></li>\n<li><a href=\"https://lists.apache.org/thread.html/r9a41e304992ce6aec6585a87842b4f2e692604f5c892c37e3b0587ee@%3Cdev.tomcat.apache.org%3E\">https://lists.apache.org/thread.html/r9a41e304992ce6aec6585a87842b4f2e692604f5c892c37e3b0587ee@%3Cdev.tomcat.apache.org%3E</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DDHOAATPWJCXRNFMJ2SASDBBNU5RJONY/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/DDHOAATPWJCXRNFMJ2SASDBBNU5RJONY/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EXDDAOWSAIEFQNBHWYE6PPYFV4QXGMCD/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EXDDAOWSAIEFQNBHWYE6PPYFV4QXGMCD/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XVEP3LAK4JSPRXFO4QF4GG2IVXADV3SO/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/XVEP3LAK4JSPRXFO4QF4GG2IVXADV3SO/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0015.html\">https://rustsec.org/advisories/RUSTSEC-2020-0015.html</a></li>\n<li><a href=\"https://security.FreeBSD.org/advisories/FreeBSD-SA-20:11.openssl.asc\">https://security.FreeBSD.org/advisories/FreeBSD-SA-20:11.openssl.asc</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202004-10\">https://security.gentoo.org/glsa/202004-10</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200424-0003/\">https://security.netapp.com/advisory/ntap-20200424-0003/</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20200717-0004/\">https://security.netapp.com/advisory/ntap-20200717-0004/</a></li>\n<li><a href=\"https://www.debian.org/security/2020/dsa-4661\">https://www.debian.org/security/2020/dsa-4661</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20200421.txt\">https://www.openssl.org/news/secadv/20200421.txt</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuApr2021.html\">https://www.oracle.com/security-alerts/cpuApr2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujan2021.html\">https://www.oracle.com/security-alerts/cpujan2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpujul2020.html\">https://www.oracle.com/security-alerts/cpujul2020.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2020.html\">https://www.oracle.com/security-alerts/cpuoct2020.html</a></li>\n<li><a href=\"https://www.synology.com/security/advisory/Synology_SA_20_05\">https://www.synology.com/security/advisory/Synology_SA_20_05</a></li>\n<li><a href=\"https://www.synology.com/security/advisory/Synology_SA_20_05_OpenSSL\">https://www.synology.com/security/advisory/Synology_SA_20_05_OpenSSL</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2020-03\">https://www.tenable.com/security/tns-2020-03</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2020-04\">https://www.tenable.com/security/tns-2020-04</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2020-11\">https://www.tenable.com/security/tns-2020-11</a></li>\n<li><a href=\"https://www.tenable.com/security/tns-2021-10\">https://www.tenable.com/security/tns-2021-10</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00004.html\">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00004.html</a></li>\n<li><a href=\"http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00011.html\">http://lists.opensuse.org/opensuse-security-announce/2020-07/msg00011.html</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/157527/OpenSSL-signature_algorithms_cert-Denial-Of-Service.html\">http://packetstormsecurity.com/files/157527/OpenSSL-signature_algorithms_cert-Denial-Of-Service.html</a></li>\n<li><a href=\"http://seclists.org/fulldisclosure/2020/May/5\">http://seclists.org/fulldisclosure/2020/May/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2020/04/22/2\">http://www.openwall.com/lists/oss-security/2020/04/22/2</a></li>\n<li><a href=\"https://www.oracle.com//security-alerts/cpujul2021.html\">https://www.oracle.com//security-alerts/cpujul2021.html</a></li>\n<li><a href=\"https://www.oracle.com/security-alerts/cpuoct2021.html\">https://www.oracle.com/security-alerts/cpuoct2021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jq65-29v4-4x35\">https://github.com/advisories/GHSA-jq65-29v4-4x35</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jq65-29v4-4x35",
            "title": "[openssl-src] Null pointer deference in openssl-src ",
            "date_modified": "2023-06-16T22:15:37.000Z",
            "date_published": "2021-08-25T20:45:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jq65-29v4-4x35"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In 0.15.0 and prior, Ouroboros works internally by creating a struct where all uses of 'this are replaced by 'static. However, a recent addition to Miri checks that references passed to functions are valid during the entire execution of the function, even when those references are passed inside a struct. This poses an issue for dropping self-referencing values, as the reference becomes invalid during the dropping process. Effectively, since self-referencing structs are not allowed in vanilla Rust, there is no allowance for dropping data during a function that has also been given a reference to that data. There's usually no way to pass a and &amp;a to the same function.</p>\n<p>A fix was attempted, where the struct would be turned in to a raw byte array and only transformed back into the underlying data type inside each function. This is allowable as a reference can be created and die over the body of a function, as long as the reference was created inside the function. However, this is also not sound if the original struct contains padding. There is no way to initialize padding bytes to a known value that Miri will accept, so when it is cast to an array some of the bytes contain uninitialized values. This is not acceptable (despite the fact that these bytes are never read) due to the potential for optimizations that may read from the uninitialized bytes. Besides which, this fix does not allow for template or constant parameters as there is no way to check the size of a templated type without giving specific, concrete values for the template parameters.</p>\n<p>The final solution was to use this fix while wrapping the raw byte array in MaybeUninit&lt;&gt;.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joshua-maros/ouroboros/issues/88\">https://github.com/joshua-maros/ouroboros/issues/88</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0042.html\">https://rustsec.org/advisories/RUSTSEC-2023-0042.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87mf-9wg6-ppf8\">https://github.com/advisories/GHSA-87mf-9wg6-ppf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87mf-9wg6-ppf8",
            "title": "[ouroboros] Ouroboros is Unsound",
            "date_modified": "2023-06-16T17:45:05.000Z",
            "date_published": "2023-06-12T18:52:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87mf-9wg6-ppf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The return value when using delegate call mechanics, either through <a href=\"https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate\"><code>CallBuilder::delegate</code></a> or <a href=\"https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html\"><code>ink_env::invoke_contract_delegate</code></a>, is being decoded incorrectly.</p>\n<h3 id=\"description\">Description</h3>\n<p>Consider this minimal example:</p>\n<pre><code class=\"language-rust\">// First contract, this will be performing a delegate call to the `Callee`.\n#[ink(storage)]\npub struct Caller {\n    value: u128,\n}\n\n#[ink(message)]\npub fn get_value(&amp;self, callee_code_hash: Hash) -&gt; u128 {\n    let result = build_call::&lt;DefaultEnvironment&gt;()\n        .delegate(callee_code_hash)\n        .exec_input(ExecutionInput::new(Selector::new(ink::selector_bytes!(\n            \"get_value\"\n        ))))\n        .returns::&lt;u128&gt;()\n        .invoke();\n\n    result\n}\n\n// Different contract, using this code hash for the delegate call.\n#[ink(storage)]\npub struct Callee {\n    value: u128,\n}\n\n#[ink(message)]\npub fn get_value(&amp;self) -&gt; u128 {\n    self.value\n}\n</code></pre>\n<p>In this example we are executing the <code>Callee</code> code in the context of the <code>Caller</code> contract. This means we'll be using the storage values of the <code>Caller</code> contract.</p>\n<p>Running this code we expect the delegate call to return <code>value</code> as it was stored in the <code>Caller</code> contract. However, due to the reported bug a different value is returned (for the case of <code>uint</code>s it is <code>256</code> times the expected value).</p>\n<h3 id=\"impact\">Impact</h3>\n<p>After conducting an analysis of the on-chain deployments of ink! contracts on Astar, Shiden, Aleph Zero, Amplitude and Pendulum, we have found that no contracts on those chains have been affected by the issue.</p>\n<p>This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of <a href=\"https://github.com/paritytech/ink/pull/1450\">https://github.com/paritytech/ink/pull/1450</a>. Since this feature was only released in ink! 4.0.0 no previous versions are affected.</p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>If you have an ink! 4.x series contract, please update it to the <a href=\"https://github.com/paritytech/ink/releases/tag/v4.2.1\">4.2.1</a> patch release that we just published. </p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you Facundo Lerena from <a href=\"https://www.coinfabrik.com\">CoinFabrik</a> for reporting this problem in a well-structured and responsible way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f\">https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f</a></li>\n<li><a href=\"https://github.com/paritytech/ink/pull/1450\">https://github.com/paritytech/ink/pull/1450</a></li>\n<li><a href=\"https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db\">https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db</a></li>\n<li><a href=\"https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate\">https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate</a></li>\n<li><a href=\"https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html\">https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34449\">https://nvd.nist.gov/vuln/detail/CVE-2023-34449</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-853p-5678-hv8f\">https://github.com/advisories/GHSA-853p-5678-hv8f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-853p-5678-hv8f",
            "title": "[ink_env] ink! vulnerable to incorrect decoding of storage value when using `DelegateCall`",
            "date_modified": "2023-06-16T17:57:44.000Z",
            "date_published": "2023-06-14T20:11:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-853p-5678-hv8f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>The return value when using delegate call mechanics, either through <a href=\"https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate\"><code>CallBuilder::delegate</code></a> or <a href=\"https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html\"><code>ink_env::invoke_contract_delegate</code></a>, is being decoded incorrectly.</p>\n<h3 id=\"description\">Description</h3>\n<p>Consider this minimal example:</p>\n<pre><code class=\"language-rust\">// First contract, this will be performing a delegate call to the `Callee`.\n#[ink(storage)]\npub struct Caller {\n    value: u128,\n}\n\n#[ink(message)]\npub fn get_value(&amp;self, callee_code_hash: Hash) -&gt; u128 {\n    let result = build_call::&lt;DefaultEnvironment&gt;()\n        .delegate(callee_code_hash)\n        .exec_input(ExecutionInput::new(Selector::new(ink::selector_bytes!(\n            \"get_value\"\n        ))))\n        .returns::&lt;u128&gt;()\n        .invoke();\n\n    result\n}\n\n// Different contract, using this code hash for the delegate call.\n#[ink(storage)]\npub struct Callee {\n    value: u128,\n}\n\n#[ink(message)]\npub fn get_value(&amp;self) -&gt; u128 {\n    self.value\n}\n</code></pre>\n<p>In this example we are executing the <code>Callee</code> code in the context of the <code>Caller</code> contract. This means we'll be using the storage values of the <code>Caller</code> contract.</p>\n<p>Running this code we expect the delegate call to return <code>value</code> as it was stored in the <code>Caller</code> contract. However, due to the reported bug a different value is returned (for the case of <code>uint</code>s it is <code>256</code> times the expected value).</p>\n<h3 id=\"impact\">Impact</h3>\n<p>After conducting an analysis of the on-chain deployments of ink! contracts on Astar, Shiden, Aleph Zero, Amplitude and Pendulum, we have found that no contracts on those chains have been affected by the issue.</p>\n<p>This bug was related to the mechanics around decoding a call's return buffer, which was changed as part of <a href=\"https://github.com/paritytech/ink/pull/1450\">https://github.com/paritytech/ink/pull/1450</a>. Since this feature was only released in ink! 4.0.0 no previous versions are affected.</p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>If you have an ink! 4.x series contract, please update it to the <a href=\"https://github.com/paritytech/ink/releases/tag/v4.2.1\">4.2.1</a> patch release that we just published. </p>\n<h3 id=\"credits\">Credits</h3>\n<p>Thank you Facundo Lerena from <a href=\"https://www.coinfabrik.com\">CoinFabrik</a> for reporting this problem in a well-structured and responsible way.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f\">https://github.com/paritytech/ink/security/advisories/GHSA-853p-5678-hv8f</a></li>\n<li><a href=\"https://github.com/paritytech/ink/pull/1450\">https://github.com/paritytech/ink/pull/1450</a></li>\n<li><a href=\"https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db\">https://github.com/paritytech/ink/commit/f1407ee9f87e5f64d467a22d26ee88f61db7f3db</a></li>\n<li><a href=\"https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate\">https://docs.rs/ink_env/4.2.0/ink_env/call/struct.CallBuilder.html#method.delegate</a></li>\n<li><a href=\"https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html\">https://docs.rs/ink_env/4.2.0/ink_env/fn.invoke_contract_delegate.html</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34449\">https://nvd.nist.gov/vuln/detail/CVE-2023-34449</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-853p-5678-hv8f\">https://github.com/advisories/GHSA-853p-5678-hv8f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-853p-5678-hv8f",
            "title": "[ink] ink! vulnerable to incorrect decoding of storage value when using `DelegateCall`",
            "date_modified": "2023-06-16T17:57:44.000Z",
            "date_published": "2023-06-14T20:11:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-853p-5678-hv8f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The net2 crate has assumed std::net::SocketAddrV4 and std::net::SocketAddrV6 have the same memory layout as the system C representation sockaddr. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35919\">https://nvd.nist.gov/vuln/detail/CVE-2020-35919</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0078.html\">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>\n<li><a href=\"https://github.com/deprecrated/net2-rs/issues/105\">https://github.com/deprecrated/net2-rs/issues/105</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c79c-gwph-gqfm\">https://github.com/advisories/GHSA-c79c-gwph-gqfm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c79c-gwph-gqfm",
            "title": "[net2] `net2` invalidly assumes the memory layout of std::net::SocketAddr",
            "date_modified": "2023-06-14T16:02:28.000Z",
            "date_published": "2022-05-24T17:37:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c79c-gwph-gqfm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The xml-rs crate &gt;= 0.8.9 and &lt; 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid &lt;! token (such as &lt;!DOCTYPEs/%&lt;!A nesting) in an XML document.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34411\">https://nvd.nist.gov/vuln/detail/CVE-2023-34411</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/pull/226\">https://github.com/netvl/xml-rs/pull/226</a></li>\n<li><a href=\"https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f\">https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c\">https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14\">https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/commit/014d808be900c85a0afc5ccdfe668be040d175aa\">https://github.com/netvl/xml-rs/commit/014d808be900c85a0afc5ccdfe668be040d175aa</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7gf7-jv65-wjmh\">https://github.com/advisories/GHSA-7gf7-jv65-wjmh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7gf7-jv65-wjmh",
            "title": "[xml-rs] xml-rs vulnerable to denial of service via invalid token in XML document",
            "date_modified": "2023-06-13T22:40:02.000Z",
            "date_published": "2023-06-05T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7gf7-jv65-wjmh"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}