{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>Affected versions of this crate were using a debug assertion to validate the <code>last</code> parameter of <code>partial_sort()</code>. This would allow invalid inputs to cause an out-of-bounds read instead of immediately panicking, when compiled without debug assertions.</p>\n<p>All writes are bounds-checked, so the out-of-bounds memory access is read-only. This also means that the first attempted out-of-bounds write will panic, limiting the possible reads.</p>\n<p>The accessible region is further limited by an initial bounds-checked read at <code>(last / 2) - 1</code>, i.e., it is proportional to the size of the vector.</p>\n<p>This bug has been fixed in v0.2.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/sundy-li/partial_sort/issues/7\">https://github.com/sundy-li/partial_sort/issues/7</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0016.html\">https://rustsec.org/advisories/RUSTSEC-2023-0016.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5x36-7567-3cw6\">https://github.com/advisories/GHSA-5x36-7567-3cw6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5x36-7567-3cw6",
            "title": "[partial_sort] partial_sort contains Out-of-bounds Read in release mode",
            "date_modified": "2023-02-28T20:31:06.000Z",
            "date_published": "2023-02-28T20:31:05.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5x36-7567-3cw6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected version of this crate had implementation of <code>From&lt;&amp;mut AsciiStr&gt;</code> for <code>&amp;mut [u8]</code> and <code>&amp;mut str</code>. This can result in out-of-bounds array indexing in safe code.</p>\n<p>The flaw was corrected in commit <a href=\"https://github.com/tomprogrammer/rust-ascii/pull/63/commits/8a6c7798c202766bd57d70fb8d12739dd68fb9dc\">8a6c779</a> by removing those impls.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tomprogrammer/rust-ascii/issues/64\">https://github.com/tomprogrammer/rust-ascii/issues/64</a></li>\n<li><a href=\"https://github.com/tomprogrammer/rust-ascii/pull/63/commits/8a6c7798c202766bd57d70fb8d12739dd68fb9dc\">https://github.com/tomprogrammer/rust-ascii/pull/63/commits/8a6c7798c202766bd57d70fb8d12739dd68fb9dc</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0015.html\">https://rustsec.org/advisories/RUSTSEC-2023-0015.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mrrw-grhq-86gf\">https://github.com/advisories/GHSA-mrrw-grhq-86gf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mrrw-grhq-86gf",
            "title": "[ascii] Ascii (crate) allows out-of-bounds array indexing in safe code",
            "date_modified": "2023-02-28T20:30:10.000Z",
            "date_published": "2023-02-28T20:30:10.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mrrw-grhq-86gf"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Versions of the package deno before 1.31.0 are vulnerable to Regular Expression Denial of Service (ReDoS) due to the upgradeWebSocket function, which contains regexes in the form of /s*,s*/, used for splitting the Connection/Upgrade header. A specially crafted Connection/Upgrade header can be used to significantly slow down a web socket server. This issue has been patched in version 1.31.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-26103\">https://nvd.nist.gov/vuln/detail/CVE-2023-26103</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/17722\">https://github.com/denoland/deno/pull/17722</a></li>\n<li><a href=\"https://github.com/denoland/deno/commit/cf06a7c7e672880e1b38598fe445e2c50b4a9d06\">https://github.com/denoland/deno/commit/cf06a7c7e672880e1b38598fe445e2c50b4a9d06</a></li>\n<li><a href=\"https://github.com/denoland/deno/blob/2b247be517d789a37e532849e2e40b724af0918f/ext/http/01_http.js%23L395-L409\">https://github.com/denoland/deno/blob/2b247be517d789a37e532849e2e40b724af0918f/ext/http/01_http.js%23L395-L409</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.31.0\">https://github.com/denoland/deno/releases/tag/v1.31.0</a></li>\n<li><a href=\"https://security.snyk.io/vuln/SNYK-RUST-DENO-3315970\">https://security.snyk.io/vuln/SNYK-RUST-DENO-3315970</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xr9w-x6gw-c9mj\">https://github.com/advisories/GHSA-xr9w-x6gw-c9mj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xr9w-x6gw-c9mj",
            "title": "[deno] Deno vulnerable to Regular Expression Denial of Service",
            "date_modified": "2023-02-28T14:00:56.000Z",
            "date_published": "2023-02-25T06:30:21.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xr9w-x6gw-c9mj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>remove_dir_all</code> crate is a Rust library that offers additional features over the Rust standard library <code>fs::remove_dir_all</code> function. It suffers the same class of failure as the code it was layering over: TOCTOU race conditions, with the ability to cause arbitrary paths to be deleted by substituting a symlink for a path after the type of the path was checked.</p>\n<p>Thanks to the Rust security team for identifying the problem and alerting us to it.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/XAMPPRocky/remove_dir_all/security/advisories/GHSA-mc8h-8q98-g5hr\">https://github.com/XAMPPRocky/remove_dir_all/security/advisories/GHSA-mc8h-8q98-g5hr</a></li>\n<li><a href=\"https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead\">https://github.com/XAMPPRocky/remove_dir_all/commit/7247a8b6ee59fc99bbb69ca6b3ca4bfd8c809ead</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc8h-8q98-g5hr\">https://github.com/advisories/GHSA-mc8h-8q98-g5hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc8h-8q98-g5hr",
            "title": "[remove_dir_all] Race Condition Enabling Link Following and Time-of-check Time-of-use (TOCTOU) Race Condition in remove_dir_all",
            "date_modified": "2023-02-24T16:24:00.000Z",
            "date_published": "2023-02-24T16:23:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc8h-8q98-g5hr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SQLite 1.0.12 through 3.39.x before 3.39.2 sometimes allows an array-bounds overflow if billions of bytes are used in a string argument to a C API.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-35737\">https://nvd.nist.gov/vuln/detail/CVE-2022-35737</a></li>\n<li><a href=\"https://kb.cert.org/vuls/id/720344\">https://kb.cert.org/vuls/id/720344</a></li>\n<li><a href=\"https://www.sqlite.org/cves.html\">https://www.sqlite.org/cves.html</a></li>\n<li><a href=\"https://sqlite.org/releaselog/3_39_2.html\">https://sqlite.org/releaselog/3_39_2.html</a></li>\n<li><a href=\"https://security.netapp.com/advisory/ntap-20220915-0009/\">https://security.netapp.com/advisory/ntap-20220915-0009/</a></li>\n<li><a href=\"https://blog.trailofbits.com/2022/10/25/sqlite-vulnerability-july-2022-library-api/\">https://blog.trailofbits.com/2022/10/25/sqlite-vulnerability-july-2022-library-api/</a></li>\n<li><a href=\"https://security.gentoo.org/glsa/202210-40\">https://security.gentoo.org/glsa/202210-40</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0090.html\">https://rustsec.org/advisories/RUSTSEC-2022-0090.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-jw36-hf63-69r9\">https://github.com/advisories/GHSA-jw36-hf63-69r9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-jw36-hf63-69r9",
            "title": "[libsqlite3-sys] `libsqlite3-sys` via C SQLite improperly validates array index",
            "date_modified": "2023-02-15T15:38:08.000Z",
            "date_published": "2022-08-04T00:00:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-jw36-hf63-69r9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Version 0.7.1 of the <code>cortex-m-rt</code> crate introduced a regression causing the stack to NOT be eight-byte aligned prior to calling <code>main</code> (or any other specified entrypoint), violating the <a href=\"https://github.com/ARM-software/abi-aa/blob/edd7460d87493fff124b8b5713acf71ffc06ee91/aapcs32/aapcs32.rst#6212stack-constraints-at-a-public-interface\">stack ABI of AAPCS32</a>, the default ABI used by all Cortex-M targets. This regression is also present in version 0.7.2 of the <code>cortex-m-rt</code> crate.</p>\n<p>This regression can cause certain compiler optimizations (which assume the eight-byte alignment) to produce incorrect behavior at runtime. This incorrect behavior has been <a href=\"https://github.com/peter9477/test2\">observed in real-world applications</a>.</p>\n<p><strong>It is advised that ALL users of <code>v0.7.1</code> and <code>v0.7.2</code> of the <code>cortex-m-rt</code> crate update to the latest version (<code>v0.7.3</code>), AS SOON AS POSSIBLE.</strong> Users of <code>v0.7.0</code> and prior versions of <code>cortex-m-rt</code> are not affected by this regression.</p>\n<p>It will be necessary to rebuild all affected firmware binaries, and flash or deploy the new firmware binaries to affected devices.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rust-embedded/cortex-m/discussions/469\">https://github.com/rust-embedded/cortex-m/discussions/469</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0014.html\">https://rustsec.org/advisories/RUSTSEC-2023-0014.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xw5j-gv2g-mjm2\">https://github.com/advisories/GHSA-xw5j-gv2g-mjm2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xw5j-gv2g-mjm2",
            "title": "[cortex-m-rt] Miscompilation in cortex-m-rt 0.7.1 and 0.7.2",
            "date_modified": "2023-02-14T21:53:38.000Z",
            "date_published": "2023-02-14T21:53:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xw5j-gv2g-mjm2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2020-12-10 for Rust. base::Error does not have soundness. Because of the public ptr field, a use-after-free or double-free can occur.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36205\">https://nvd.nist.gov/vuln/detail/CVE-2020-36205</a></li>\n<li><a href=\"https://github.com/rtbo/rust-xcb/issues/93\">https://github.com/rtbo/rust-xcb/issues/93</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0097.html\">https://rustsec.org/advisories/RUSTSEC-2020-0097.html</a></li>\n<li><a href=\"https://github.com/rust-x-bindings/rust-xcb/issues/93\">https://github.com/rust-x-bindings/rust-xcb/issues/93</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c8hq-x4mm-p6q6\">https://github.com/advisories/GHSA-c8hq-x4mm-p6q6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c8hq-x4mm-p6q6",
            "title": "[xcb] Memory handling issues in xcb",
            "date_modified": "2023-02-13T16:58:15.000Z",
            "date_published": "2021-08-25T20:50:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c8hq-x4mm-p6q6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>As indicated by this <a href=\"https://github.com/libpnet/libpnet/issues/449#issuecomment-663355987\">issue</a>, a buffer overrun is possible in the <code>set_payload</code> setter of the various mutable \"Packet\" struct setters. The offending <code>set_payload</code> functions were defined within the struct <code>impl</code> blocks in earlier versions of the package, and later by the <code>packet</code> macro.</p>\n<p>Fixed in the <code>packet</code> macro by <a href=\"https://github.com/libpnet/libpnet/pull/455\">this</a> PR.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libpnet/libpnet/issues/449\">https://github.com/libpnet/libpnet/issues/449</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0167.html\">https://rustsec.org/advisories/RUSTSEC-2020-0167.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-cf4g-fcf8-3cr9\">https://github.com/advisories/GHSA-cf4g-fcf8-3cr9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-cf4g-fcf8-3cr9",
            "title": "[pnet_packet] `pnet_packet` buffer overrun in `set_payload` setters",
            "date_modified": "2023-02-09T19:27:58.000Z",
            "date_published": "2023-02-09T19:27:57.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-cf4g-fcf8-3cr9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE.</p>\n<p>For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4304\">https://nvd.nist.gov/vuln/detail/CVE-2022-4304</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0007.html\">https://rustsec.org/advisories/RUSTSEC-2023-0007.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p52g-cm5j-mjv4\">https://github.com/advisories/GHSA-p52g-cm5j-mjv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p52g-cm5j-mjv4",
            "title": "[openssl-src] openssl-src subject to Timing Oracle in RSA Decryption",
            "date_modified": "2023-02-24T19:03:44.000Z",
            "date_published": "2023-02-08T22:31:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p52g-cm5j-mjv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE.</p>\n<p>For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4304\">https://nvd.nist.gov/vuln/detail/CVE-2022-4304</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0007.html\">https://rustsec.org/advisories/RUSTSEC-2023-0007.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p52g-cm5j-mjv4\">https://github.com/advisories/GHSA-p52g-cm5j-mjv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p52g-cm5j-mjv4",
            "title": "[openssl-src] openssl-src subject to Timing Oracle in RSA Decryption",
            "date_modified": "2023-02-24T19:03:44.000Z",
            "date_published": "2023-02-08T22:31:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p52g-cm5j-mjv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>\n<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>\n<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>\n<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0215\">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0009.html\">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7jw-wp68-3xch\">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7jw-wp68-3xch",
            "title": "[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`",
            "date_modified": "2023-02-24T16:07:37.000Z",
            "date_published": "2023-02-08T22:28:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7jw-wp68-3xch"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The public API function <code>BIO_new_NDEF</code> is a helper function used for streaming ASN.1 data via a <code>BIO</code>. It is primarily used internally to OpenSSL to support the SMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by end user applications.</p>\n<p>The function receives a <code>BIO</code> from the caller, prepends a new <code>BIO_f_asn1</code> filter <code>BIO</code> onto the front of it to form a <code>BIO</code> chain, and then returns the new head of the <code>BIO</code> chain to the caller. Under certain conditions, for example if a CMS recipient public key is invalid, the new filter <code>BIO</code> is freed and the function returns a <code>NULL</code> result indicating a failure. However, in this case, the <code>BIO</code> chain is not properly cleaned up and the <code>BIO</code> passed by the caller still retains internal pointers to the previously freed filter <code>BIO</code>. If the caller then goes on to call <code>BIO_pop()</code> on the <code>BIO</code> then a use-after-free will occur. This will most likely result in a crash.</p>\n<p>This scenario occurs directly in the internal function <code>B64_write_ASN1()</code> which may cause <code>BIO_new_NDEF()</code> to be called and will subsequently call <code>BIO_pop()</code> on the <code>BIO</code>. This internal function is in turn called by the public API functions <code>PEM_write_bio_ASN1_stream</code>, <code>PEM_write_bio_CMS_stream</code>, <code>PEM_write_bio_PKCS7_stream</code>, <code>SMIME_write_ASN1</code>, <code>SMIME_write_CMS</code> and <code>SMIME_write_PKCS7</code>.</p>\n<p>Other public API functions that may be impacted by this include <code>i2d_ASN1_bio_stream</code>, <code>BIO_new_CMS</code>, <code>BIO_new_PKCS7</code>, <code>i2d_CMS_bio_stream</code> and <code>i2d_PKCS7_bio_stream</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0215\">https://nvd.nist.gov/vuln/detail/CVE-2023-0215</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0009.html\">https://rustsec.org/advisories/RUSTSEC-2023-0009.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=8818064ce3c3c0f1b740a5aaba2a987e75bfbafd</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=9816136fe31d92ace4037d5da5257f763aeeb4eb</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c3829dd8825c654652201e16f8a0a0c46ee3f344</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r7jw-wp68-3xch\">https://github.com/advisories/GHSA-r7jw-wp68-3xch</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r7jw-wp68-3xch",
            "title": "[openssl-src] openssl-src vulnerable to Use-after-free following `BIO_new_NDEF`",
            "date_modified": "2023-02-24T16:07:37.000Z",
            "date_published": "2023-02-08T22:28:34.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r7jw-wp68-3xch"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path to a trusted issuer.</p>\n<p>The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory.</p>\n<p>In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4203\">https://nvd.nist.gov/vuln/detail/CVE-2022-4203</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0008.html\">https://rustsec.org/advisories/RUSTSEC-2023-0008.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c927a3492698c254637da836762f9b1f86cffabc\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=c927a3492698c254637da836762f9b1f86cffabc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w67w-mw4j-8qrv\">https://github.com/advisories/GHSA-w67w-mw4j-8qrv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w67w-mw4j-8qrv",
            "title": "[openssl-src] openssl-src contains Read Buffer Overflow in X.509 Name Constraint",
            "date_modified": "2023-02-24T16:07:29.000Z",
            "date_published": "2023-02-08T22:27:42.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w67w-mw4j-8qrv"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An invalid pointer dereference on read can be triggered when an application tries to load malformed PKCS7 data with the <code>d2i_PKCS7()</code>, <code>d2i_PKCS7_bio()</code> or <code>d2i_PKCS7_fp()</code> functions.</p>\n<p>The result of the dereference is an application crash which could lead to a denial of service attack. The TLS implementation in OpenSSL does not call this function however third party applications might call these functions on untrusted data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0216\">https://nvd.nist.gov/vuln/detail/CVE-2023-0216</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0011.html\">https://rustsec.org/advisories/RUSTSEC-2023-0011.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=934a04f0e775309cadbef0aa6b9692e1b12a76c6\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=934a04f0e775309cadbef0aa6b9692e1b12a76c6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29xx-hcv2-c4cp\">https://github.com/advisories/GHSA-29xx-hcv2-c4cp</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29xx-hcv2-c4cp",
            "title": "[openssl-src] openssl-src subject to Invalid pointer dereference in `d2i_PKCS7` functions",
            "date_modified": "2023-02-24T16:07:12.000Z",
            "date_published": "2023-02-08T22:23:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29xx-hcv2-c4cp"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The function <code>PEM_read_bio_ex()</code> reads a PEM file from a BIO and parses and decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data. If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case <code>PEM_read_bio_ex()</code> will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack.</p>\n<p>The functions <code>PEM_read_bio()</code> and <code>PEM_read()</code> are simple wrappers around <code>PEM_read_bio_ex()</code> and therefore these functions are also directly affected.</p>\n<p>These functions are also called indirectly by a number of other OpenSSL functions including <code>PEM_X509_INFO_read_bio_ex()</code> and\n<code>SSL_CTX_use_serverinfo_file()</code> which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if <code>PEM_read_bio_ex()</code> returns a failure code. These locations include the <code>PEM_read_bio_TYPE()</code> functions as well as the decoders introduced in OpenSSL 3.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4450\">https://nvd.nist.gov/vuln/detail/CVE-2022-4450</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0010.html\">https://rustsec.org/advisories/RUSTSEC-2023-0010.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=63bcf189be73a9cc1264059bed6f57974be74a83\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=63bcf189be73a9cc1264059bed6f57974be74a83</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bbcf509bd046b34cca19c766bbddc31683d0858b\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bbcf509bd046b34cca19c766bbddc31683d0858b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v5w6-wcm8-jm4q\">https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v5w6-wcm8-jm4q",
            "title": "[openssl-src] openssl-src contains Double free after calling `PEM_read_bio_ex`",
            "date_modified": "2023-02-24T16:06:21.000Z",
            "date_published": "2023-02-08T22:22:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v5w6-wcm8-jm4q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The function <code>PEM_read_bio_ex()</code> reads a PEM file from a BIO and parses and decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data. If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are populated with pointers to buffers containing the relevant decoded data. The caller is responsible for freeing those buffers. It is possible to construct a PEM file that results in 0 bytes of payload data. In this case <code>PEM_read_bio_ex()</code> will return a failure code but will populate the header argument with a pointer to a buffer that has already been freed. If the caller also frees this buffer then a double free will occur. This will most likely lead to a crash. This could be exploited by an attacker who has the ability to supply malicious PEM files for parsing to achieve a denial of service attack.</p>\n<p>The functions <code>PEM_read_bio()</code> and <code>PEM_read()</code> are simple wrappers around <code>PEM_read_bio_ex()</code> and therefore these functions are also directly affected.</p>\n<p>These functions are also called indirectly by a number of other OpenSSL functions including <code>PEM_X509_INFO_read_bio_ex()</code> and\n<code>SSL_CTX_use_serverinfo_file()</code> which are also vulnerable. Some OpenSSL internal uses of these functions are not vulnerable because the caller does not free the header argument if <code>PEM_read_bio_ex()</code> returns a failure code. These locations include the <code>PEM_read_bio_TYPE()</code> functions as well as the decoders introduced in OpenSSL 3.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-4450\">https://nvd.nist.gov/vuln/detail/CVE-2022-4450</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0010.html\">https://rustsec.org/advisories/RUSTSEC-2023-0010.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=63bcf189be73a9cc1264059bed6f57974be74a83\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=63bcf189be73a9cc1264059bed6f57974be74a83</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bbcf509bd046b34cca19c766bbddc31683d0858b\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bbcf509bd046b34cca19c766bbddc31683d0858b</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-v5w6-wcm8-jm4q\">https://github.com/advisories/GHSA-v5w6-wcm8-jm4q</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-v5w6-wcm8-jm4q",
            "title": "[openssl-src] openssl-src contains Double free after calling `PEM_read_bio_ex`",
            "date_modified": "2023-02-24T16:06:21.000Z",
            "date_published": "2023-02-08T22:22:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-v5w6-wcm8-jm4q"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An invalid pointer dereference on read can be triggered when an application tries to check a malformed DSA public key by the <code>EVP_PKEY_public_check()</code> function. This will most likely lead to an application crash. This function can be called on public keys supplied from untrusted sources which could allow an attacker to cause a denial of service attack.</p>\n<p>The TLS implementation in OpenSSL does not call this function but applications might call the function if there are additional security requirements imposed by standards such as FIPS 140-3.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0217\">https://nvd.nist.gov/vuln/detail/CVE-2023-0217</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0012.html\">https://rustsec.org/advisories/RUSTSEC-2023-0012.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=23985bac83fd50c8e29431009302b5442f985096\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=23985bac83fd50c8e29431009302b5442f985096</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vxrh-cpg7-8vjr\">https://github.com/advisories/GHSA-vxrh-cpg7-8vjr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vxrh-cpg7-8vjr",
            "title": "[openssl-src] openssl-src subject to NULL dereference validating DSA public key",
            "date_modified": "2023-02-24T16:06:14.000Z",
            "date_published": "2023-02-08T22:22:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vxrh-cpg7-8vjr"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A <code>NULL</code> pointer can be dereferenced when signatures are being verified on PKCS7 <code>signed</code> or <code>signedAndEnveloped</code> data. In case the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available the digest initialization will fail. There is a missing check for the return value from the initialization function which later leads to invalid usage of the digest API most likely leading to a crash. The unavailability of an algorithm can be caused by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider.</p>\n<p>PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0401\">https://nvd.nist.gov/vuln/detail/CVE-2023-0401</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0013.html\">https://rustsec.org/advisories/RUSTSEC-2023-0013.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=d3b6dfd70db844c4499bec6ad6601623a565e674\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=d3b6dfd70db844c4499bec6ad6601623a565e674</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vrh7-x64v-7vxq\">https://github.com/advisories/GHSA-vrh7-x64v-7vxq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vrh7-x64v-7vxq",
            "title": "[openssl-src] openssl-src contains `NULL` dereference during PKCS7 data verification",
            "date_modified": "2023-02-24T16:04:21.000Z",
            "date_published": "2023-02-08T22:21:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vrh7-x64v-7vxq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href=\"https://www.openssl.org/news/secadv/20221213.txt\">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>\n<p>If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0286\">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0006.html\">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5",
            "title": "[openssl-src] Vulnerable OpenSSL included in cryptography wheels",
            "date_modified": "2023-03-01T01:47:42.000Z",
            "date_published": "2023-02-08T22:17:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>pyca/cryptography's wheels include a statically linked copy of OpenSSL. The versions of OpenSSL included in cryptography 0.8.1-39.0.0  are vulnerable to a security issue. More details about the vulnerabilities themselves can be found in <a href=\"https://www.openssl.org/news/secadv/20221213.txt\">https://www.openssl.org/news/secadv/20221213.txt</a> and <a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a>.</p>\n<p>If you are building cryptography source (\"sdist\") then you are responsible for upgrading your copy of OpenSSL. Only users installing from wheels built by the cryptography project (i.e., those distributed on PyPI) need to update their cryptography versions.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/pyca/cryptography/security/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-0286\">https://nvd.nist.gov/vuln/detail/CVE-2023-0286</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0006.html\">https://rustsec.org/advisories/RUSTSEC-2023-0006.html</a></li>\n<li><a href=\"https://www.openssl.org/news/secadv/20230207.txt\">https://www.openssl.org/news/secadv/20230207.txt</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2c6c9d439b484e1ba9830d8454a34fa4f80fdfe9</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=2f7530077e0ef79d98718138716bc51ca0cad658</a></li>\n<li><a href=\"https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d\">https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=fd2af07dc083a350c959147097003a14a5e8ac4d</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4qr-2fvf-3mr5\">https://github.com/advisories/GHSA-x4qr-2fvf-3mr5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5",
            "title": "[openssl-src] Vulnerable OpenSSL included in cryptography wheels",
            "date_modified": "2023-03-01T01:47:42.000Z",
            "date_published": "2023-02-08T22:17:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4qr-2fvf-3mr5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}