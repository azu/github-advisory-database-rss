{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>Affected versions of this crate did not properly implement the generativity, because the invariant lifetimes were not necessarily dropped.</p>\n<p>This allows an attacker to mix up two arenas, using indices created from one arena with another one. This might lead to an out-of-bounds read or write access into the memory reserved for the arena.</p>\n<p>The flaw was corrected by implementing generativity correctly in version 0.4.0.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2019-16139\">https://nvd.nist.gov/vuln/detail/CVE-2019-16139</a></li>\n<li><a href=\"https://github.com/llogiq/compact_arena/issues/22\">https://github.com/llogiq/compact_arena/issues/22</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0015.html\">https://rustsec.org/advisories/RUSTSEC-2019-0015.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7j36-gc4r-9x3r\">https://github.com/advisories/GHSA-7j36-gc4r-9x3r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7j36-gc4r-9x3r",
            "title": "[compact_arena] Out of bounds access in compact_arena",
            "date_modified": "2023-06-13T16:57:57.000Z",
            "date_published": "2021-08-25T20:44:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7j36-gc4r-9x3r"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of Claxon made an invalid assumption about the decode buffer size being a multiple of a value read from the bitstream. This could cause parts of the decode buffer to not be overwritten. If the decode buffer was newly allocated and uninitialized, this uninitialized memory could be exposed.</p>\n<p>This allows an attacker to observe parts of the uninitialized memory in the decoded audio stream.</p>\n<p>The flaw was corrected by checking that the value read from the bitstream divides the decode buffer size, and returning a format error if it does not. If an error is returned, the decode buffer is not exposed. Regression tests and an additional fuzzer have been added to prevent similar flaws in the future.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-20992\">https://nvd.nist.gov/vuln/detail/CVE-2018-20992</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c\">https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2018-0004.html\">https://rustsec.org/advisories/RUSTSEC-2018-0004.html</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/releases/tag/v0.3.2\">https://github.com/ruuda/claxon/releases/tag/v0.3.2</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/releases/tag/v0.4.1\">https://github.com/ruuda/claxon/releases/tag/v0.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c6g-4xc5-w96c\">https://github.com/advisories/GHSA-8c6g-4xc5-w96c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c6g-4xc5-w96c",
            "title": "[claxon] Uninitialized memory exposure in claxon",
            "date_modified": "2023-06-13T16:57:26.000Z",
            "date_published": "2021-08-25T20:43:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c6g-4xc5-w96c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of Claxon made an invalid assumption about the decode buffer size being a multiple of a value read from the bitstream. This could cause parts of the decode buffer to not be overwritten. If the decode buffer was newly allocated and uninitialized, this uninitialized memory could be exposed.</p>\n<p>This allows an attacker to observe parts of the uninitialized memory in the decoded audio stream.</p>\n<p>The flaw was corrected by checking that the value read from the bitstream divides the decode buffer size, and returning a format error if it does not. If an error is returned, the decode buffer is not exposed. Regression tests and an additional fuzzer have been added to prevent similar flaws in the future.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2018-20992\">https://nvd.nist.gov/vuln/detail/CVE-2018-20992</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c\">https://github.com/ruuda/claxon/commit/8f28ec275e412dd3af4f3cda460605512faf332c</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2018-0004.html\">https://rustsec.org/advisories/RUSTSEC-2018-0004.html</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/releases/tag/v0.3.2\">https://github.com/ruuda/claxon/releases/tag/v0.3.2</a></li>\n<li><a href=\"https://github.com/ruuda/claxon/releases/tag/v0.4.1\">https://github.com/ruuda/claxon/releases/tag/v0.4.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8c6g-4xc5-w96c\">https://github.com/advisories/GHSA-8c6g-4xc5-w96c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8c6g-4xc5-w96c",
            "title": "[claxon] Uninitialized memory exposure in claxon",
            "date_modified": "2023-06-13T16:57:26.000Z",
            "date_published": "2021-08-25T20:43:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8c6g-4xc5-w96c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the bitvec crate before 0.17.4 for Rust. BitVec to BitBox conversion leads to a use-after-free or double free.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35862\">https://nvd.nist.gov/vuln/detail/CVE-2020-35862</a></li>\n<li><a href=\"https://github.com/myrrlyn/bitvec/issues/55\">https://github.com/myrrlyn/bitvec/issues/55</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0007.html\">https://rustsec.org/advisories/RUSTSEC-2020-0007.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7cjc-hvxf-gqh7\">https://github.com/advisories/GHSA-7cjc-hvxf-gqh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7cjc-hvxf-gqh7",
            "title": "[bitvec] Use after free and double free in bitvec",
            "date_modified": "2023-06-13T16:41:00.000Z",
            "date_published": "2021-08-25T20:47:39.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7cjc-hvxf-gqh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The git-url-parse crate through 0.4.4 for Rust allows Regular Expression Denial of Service (ReDos) via a crafted URL to <code>normalize_url</code> in <code>lib.rs</code>, a similar issue to CVE-2023-32758 (Python).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33290\">https://nvd.nist.gov/vuln/detail/CVE-2023-33290</a></li>\n<li><a href=\"https://github.com/tjtelan/git-url-parse-rs/issues/51\">https://github.com/tjtelan/git-url-parse-rs/issues/51</a></li>\n<li><a href=\"https://github.com/tjtelan/git-url-parse-rs/blob/main/src/lib.rs#L396\">https://github.com/tjtelan/git-url-parse-rs/blob/main/src/lib.rs#L396</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qfh9-8p57-mjjj\">https://github.com/advisories/GHSA-qfh9-8p57-mjjj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qfh9-8p57-mjjj",
            "title": "[git-url-parse] git-url-parse crate vulnerable to Regular Expression Denial of Service",
            "date_modified": "2023-06-12T18:55:58.000Z",
            "date_published": "2023-06-12T15:30:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qfh9-8p57-mjjj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h2 id=\"summary\">Summary</h2>\n<p>Currently, Ouroboros works internally by creating a struct where all uses of 'this are replaced by 'static. However, a recent addition to Miri checks that references passed to functions are valid during the entire execution of the function, even when those references are passed inside a struct. This poses an issue for dropping self-referencing values, as the reference becomes invalid during the dropping process. Effectively, since self-referencing structs are not allowed in vanilla Rust, there is no allowance for dropping dataduring a function that has also been given a reference to that data. There's usually no way to pass a and &amp;a to the same function.</p>\n<p>A fix was attempted, where the struct would be turned in to a raw byte array and only transformed back into the underlying data type inside each function. This is allowable as a reference can be created and die over the body of a function, as long as the \nreference was created inside the function. However, this is also not sound if the original struct contains padding. There is no way to initialize padding bytes to a known value that Miri will accept, so when it is cast to an array some of the bytes contain uninitialized values. This is not acceptable (despite the fact that these bytes are never read) due to the potential for optimizations that may read from the uninitialized bytes. Besides which, this fix does not allow for template or constant parameters as there is no way to check the size of a templated type without giving specific, concrete values for the template parameters.</p>\n<p>The crate at this point is no longer maintained, and previous users should migrate their code to use <a href=\"https://github.com/Voultapher/self_cell\">self_cell</a> instead.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/joshua-maros/ouroboros/issues/88\">https://github.com/joshua-maros/ouroboros/issues/88</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0042.html\">https://rustsec.org/advisories/RUSTSEC-2023-0042.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-87mf-9wg6-ppf8\">https://github.com/advisories/GHSA-87mf-9wg6-ppf8</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-87mf-9wg6-ppf8",
            "title": "[ouroboros] Ouroboros is Unsound",
            "date_modified": "2023-06-12T18:52:33.000Z",
            "date_published": "2023-06-12T18:52:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-87mf-9wg6-ppf8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The xml-rs crate before 0.8.14 for Rust and Crab allows a denial of service (panic) via an invalid &lt;! token (such as &lt;!DOCTYPEs/%&lt;!A nesting) in an XML document.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-34411\">https://nvd.nist.gov/vuln/detail/CVE-2023-34411</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/pull/226\">https://github.com/netvl/xml-rs/pull/226</a></li>\n<li><a href=\"https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f\">https://github.com/00xc/xml-rs/commit/0f084d45aa53e4a27476961785f59f2bd7d59a9f</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c\">https://github.com/netvl/xml-rs/commit/c09549a187e62d39d40467f129e64abf32efc35c</a></li>\n<li><a href=\"https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14\">https://github.com/netvl/xml-rs/compare/0.8.13...0.8.14</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7gf7-jv65-wjmh\">https://github.com/advisories/GHSA-7gf7-jv65-wjmh</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7gf7-jv65-wjmh",
            "title": "[xml-rs] xml-rs vulnerable to denial of service via invalid token in XML document",
            "date_modified": "2023-06-12T20:09:48.000Z",
            "date_published": "2023-06-05T06:30:15.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7gf7-jv65-wjmh"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>trust-dns and trust-dns-server are vulnerable to remotely triggered denial-of-service attacks, consuming both network and CPU resources.\nDNS messages with the QR=1 bit set are responded to with a <code>FormErr</code> response.\nThis allows creating a traffic loop, in which these <code>FormErr</code> responses are sent nonstop between vulnerable servers.</p>\n<p>There are two scenarios how this can be exploited: 1) Create a loop between two instances of trust-dns, consuming network resources, or 2) consuming the CPU of a single instance.</p>\n<p>With two instances <em>A</em> and <em>B</em> an attacker sends a DNS query with a spoofed source IP address to <em>A</em>.\n<em>A</em> replies with a <code>FormErr</code> to <em>B</em>.\nNow both servers with ping-pong the message back and forth until by chance the packet is dropped in the network.\nMultiple spoofed packets can be sent by the attacker, increasing resource consumption.</p>\n<p>A single server can get locked up replying to itself.\nSame setup as above, but now <em>A</em> sends the reply to itself.\nThe packet is sent out as fast as the CPU and network stack manage.\nThis locks up a CPU core.\nMultiple packets from the attacker consume multiple CPU cores.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bluejekyll/trust-dns/pull/1952\">https://github.com/bluejekyll/trust-dns/pull/1952</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0041.html\">https://rustsec.org/advisories/RUSTSEC-2023-0041.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fm9-h728-fwpj\">https://github.com/advisories/GHSA-5fm9-h728-fwpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fm9-h728-fwpj",
            "title": "[trust-dns-server] trust-dns vulnerable to Remote Attackers causing Denial-of-Service (packet loops) with crafted DNS packets",
            "date_modified": "2023-06-06T02:06:23.000Z",
            "date_published": "2023-06-06T02:06:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fm9-h728-fwpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>trust-dns and trust-dns-server are vulnerable to remotely triggered denial-of-service attacks, consuming both network and CPU resources.\nDNS messages with the QR=1 bit set are responded to with a <code>FormErr</code> response.\nThis allows creating a traffic loop, in which these <code>FormErr</code> responses are sent nonstop between vulnerable servers.</p>\n<p>There are two scenarios how this can be exploited: 1) Create a loop between two instances of trust-dns, consuming network resources, or 2) consuming the CPU of a single instance.</p>\n<p>With two instances <em>A</em> and <em>B</em> an attacker sends a DNS query with a spoofed source IP address to <em>A</em>.\n<em>A</em> replies with a <code>FormErr</code> to <em>B</em>.\nNow both servers with ping-pong the message back and forth until by chance the packet is dropped in the network.\nMultiple spoofed packets can be sent by the attacker, increasing resource consumption.</p>\n<p>A single server can get locked up replying to itself.\nSame setup as above, but now <em>A</em> sends the reply to itself.\nThe packet is sent out as fast as the CPU and network stack manage.\nThis locks up a CPU core.\nMultiple packets from the attacker consume multiple CPU cores.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/bluejekyll/trust-dns/pull/1952\">https://github.com/bluejekyll/trust-dns/pull/1952</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0041.html\">https://rustsec.org/advisories/RUSTSEC-2023-0041.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5fm9-h728-fwpj\">https://github.com/advisories/GHSA-5fm9-h728-fwpj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5fm9-h728-fwpj",
            "title": "[trust-dns-server] trust-dns vulnerable to Remote Attackers causing Denial-of-Service (packet loops) with crafted DNS packets",
            "date_modified": "2023-06-06T02:06:23.000Z",
            "date_published": "2023-06-06T02:06:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5fm9-h728-fwpj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of the crate have a bug where attacker-controlled input can result in the use of an out-of-bound array index. Rust\ndetects the use of the out-of-bound index and causes the application to panic.  An attacker may be able to use this to cause a denial-of-service.  However, it is not possible for an attacker to read from or write to the application's address space.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-25mx-8f3v-8wh7\">https://github.com/advisories/GHSA-25mx-8f3v-8wh7</a></li>\n<li><a href=\"https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/buffered-reader/NEWS\">https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/buffered-reader/NEWS</a></li>\n<li><a href=\"https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/\">https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0039.html\">https://rustsec.org/advisories/RUSTSEC-2023-0039.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29mf-62xx-28jq\">https://github.com/advisories/GHSA-29mf-62xx-28jq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29mf-62xx-28jq",
            "title": "[buffered-reader] buffered-reader vulnerable to out-of-bounds array access leading to panic",
            "date_modified": "2023-06-06T01:58:42.000Z",
            "date_published": "2023-06-06T01:58:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29mf-62xx-28jq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of the crate have a bug where attacker-controlled input can result in the use of an out-of-bound array index. Rust\ndetects the use of the out-of-bound index and causes the application to panic.  An attacker may be able to use this to cause a denial-of-service.  However, it is not possible for an attacker to read from or write to the application's address space.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-25mx-8f3v-8wh7\">https://github.com/advisories/GHSA-25mx-8f3v-8wh7</a></li>\n<li><a href=\"https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/buffered-reader/NEWS\">https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/buffered-reader/NEWS</a></li>\n<li><a href=\"https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/\">https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0039.html\">https://rustsec.org/advisories/RUSTSEC-2023-0039.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-29mf-62xx-28jq\">https://github.com/advisories/GHSA-29mf-62xx-28jq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-29mf-62xx-28jq",
            "title": "[buffered-reader] buffered-reader vulnerable to out-of-bounds array access leading to panic",
            "date_modified": "2023-06-06T01:58:42.000Z",
            "date_published": "2023-06-06T01:58:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-29mf-62xx-28jq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of the crate have several bugs where attacker-controlled input can result in the use of an out-of-bound array index.  Rust detects the use of the out-of-bound index and causes the application to panic.  An attacker may be able to use this to cause a denial-of-service.  However, it is not possible for an attacker to read from or write to the application's address space.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-29mf-62xx-28jq\">https://github.com/advisories/GHSA-29mf-62xx-28jq</a></li>\n<li><a href=\"https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS\">https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS</a></li>\n<li><a href=\"https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/\">https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0038.html\">https://rustsec.org/advisories/RUSTSEC-2023-0038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-25mx-8f3v-8wh7\">https://github.com/advisories/GHSA-25mx-8f3v-8wh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7",
            "title": "[sequoia-openpgp] sequoia-openpgp vulnerable to out-of-bounds array access leading to panic",
            "date_modified": "2023-06-06T01:58:06.000Z",
            "date_published": "2023-06-06T01:58:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of the crate have several bugs where attacker-controlled input can result in the use of an out-of-bound array index.  Rust detects the use of the out-of-bound index and causes the application to panic.  An attacker may be able to use this to cause a denial-of-service.  However, it is not possible for an attacker to read from or write to the application's address space.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-29mf-62xx-28jq\">https://github.com/advisories/GHSA-29mf-62xx-28jq</a></li>\n<li><a href=\"https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS\">https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS</a></li>\n<li><a href=\"https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/\">https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0038.html\">https://rustsec.org/advisories/RUSTSEC-2023-0038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-25mx-8f3v-8wh7\">https://github.com/advisories/GHSA-25mx-8f3v-8wh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7",
            "title": "[sequoia-openpgp] sequoia-openpgp vulnerable to out-of-bounds array access leading to panic",
            "date_modified": "2023-06-06T01:58:06.000Z",
            "date_published": "2023-06-06T01:58:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of the crate have several bugs where attacker-controlled input can result in the use of an out-of-bound array index.  Rust detects the use of the out-of-bound index and causes the application to panic.  An attacker may be able to use this to cause a denial-of-service.  However, it is not possible for an attacker to read from or write to the application's address space.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/advisories/GHSA-29mf-62xx-28jq\">https://github.com/advisories/GHSA-29mf-62xx-28jq</a></li>\n<li><a href=\"https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS\">https://gitlab.com/sequoia-pgp/sequoia/-/blob/main/openpgp/NEWS</a></li>\n<li><a href=\"https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/\">https://lists.sequoia-pgp.org/hyperkitty/list/announce@lists.sequoia-pgp.org/thread/SN2E3QRT4DMQ5JNEK6VIN6DJ5SH766DI/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0038.html\">https://rustsec.org/advisories/RUSTSEC-2023-0038.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-25mx-8f3v-8wh7\">https://github.com/advisories/GHSA-25mx-8f3v-8wh7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7",
            "title": "[sequoia-openpgp] sequoia-openpgp vulnerable to out-of-bounds array access leading to panic",
            "date_modified": "2023-06-06T01:58:06.000Z",
            "date_published": "2023-06-06T01:58:04.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-25mx-8f3v-8wh7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Outbound HTTP requests made using the built-in \"node:http\" or \"node:https\" modules are incorrectly not checked against the network permission allow list (<code>--allow-net</code>). Dependencies relying on these built-in modules are subject to the vulnerability too.</p>\n<p>Users of Deno versions prior to 1.34.0 are unaffected. Deno Deploy users are unaffected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been patched in Deno v1.34.1 and all users are recommended to update to this version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is available for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-vc52-gwm3-8v2f\">https://github.com/denoland/deno/security/advisories/GHSA-vc52-gwm3-8v2f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33966\">https://nvd.nist.gov/vuln/detail/CVE-2023-33966</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.34.1\">https://github.com/denoland/deno/releases/tag/v1.34.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc52-gwm3-8v2f\">https://github.com/advisories/GHSA-vc52-gwm3-8v2f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc52-gwm3-8v2f",
            "title": "[deno_runtime] Missing \"--allow-net\" permission check for built-in Node modules",
            "date_modified": "2023-06-07T20:56:03.000Z",
            "date_published": "2023-05-31T23:39:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc52-gwm3-8v2f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Outbound HTTP requests made using the built-in \"node:http\" or \"node:https\" modules are incorrectly not checked against the network permission allow list (<code>--allow-net</code>). Dependencies relying on these built-in modules are subject to the vulnerability too.</p>\n<p>Users of Deno versions prior to 1.34.0 are unaffected. Deno Deploy users are unaffected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This problem has been patched in Deno v1.34.1 and all users are recommended to update to this version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is available for this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-vc52-gwm3-8v2f\">https://github.com/denoland/deno/security/advisories/GHSA-vc52-gwm3-8v2f</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33966\">https://nvd.nist.gov/vuln/detail/CVE-2023-33966</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.34.1\">https://github.com/denoland/deno/releases/tag/v1.34.1</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc52-gwm3-8v2f\">https://github.com/advisories/GHSA-vc52-gwm3-8v2f</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc52-gwm3-8v2f",
            "title": "[deno] Missing \"--allow-net\" permission check for built-in Node modules",
            "date_modified": "2023-06-07T20:56:03.000Z",
            "date_published": "2023-05-31T23:39:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc52-gwm3-8v2f"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>On Linux the <code>sccache</code> client can execute arbitrary code with the privileges of a local <code>sccache</code> server, by preloading the code in a shared library passed to <code>LD_PRELOAD</code>.</p>\n<p>If the server is run as root (which is the default when installing the <a href=\"https://snapcraft.io/sccache\">snap package</a>), this means a user running the <code>sccache</code> client can get root privileges.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Upgrade to 0.4.0</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Don't run sccache server as root. </p>\n<h3 id=\"github-security-lab-number\">GitHub Security Lab number</h3>\n<p>GHSL-2023-046</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/mozilla/sccache/security/advisories/GHSA-x7fr-pg8f-93f5\">https://github.com/mozilla/sccache/security/advisories/GHSA-x7fr-pg8f-93f5</a></li>\n<li><a href=\"https://github.com/mozilla/sccache/releases/tag/v0.4.0\">https://github.com/mozilla/sccache/releases/tag/v0.4.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x7fr-pg8f-93f5\">https://github.com/advisories/GHSA-x7fr-pg8f-93f5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x7fr-pg8f-93f5",
            "title": "[sccache] sccache vulnerable to privilege escalation if server is run as root",
            "date_modified": "2023-05-30T20:06:04.000Z",
            "date_published": "2023-05-30T20:06:02.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x7fr-pg8f-93f5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>ntpd-rs does not validate the length of NTS cookies in received NTP packets to the server. An attacker can crash the server by sending a specially crafted NTP packet containing a cookie shorter than what the server expects. The server also crashes when it is not configured to handle NTS packets.</p>\n<p>ntpd-rs running purely as an ntp client is not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue was caused by improper slice indexing. The indexing operations were replaced by safer alternatives that do not crash the ntpd-rs server process but instead properly handle the error condition. A patch was released in version 0.3.3</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>ntpd-rs running purely as an ntp client is not affected. By default, ntpd-rs packages are not configured to run as a server.</p>\n<p>For machines where serving the time is required, there is no known workaround. Users are recommended to upgrade ntpd-rs as soon as possible.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://github.com/pendulum-project/ntpd-rs/pull/752\">https://github.com/pendulum-project/ntpd-rs/pull/752</a></p>\n<p>We would like to thank @mlichvar for identifying this issue</p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-qwhm-h7v3-mrjx\">https://github.com/pendulum-project/ntpd-rs/security/advisories/GHSA-qwhm-h7v3-mrjx</a></li>\n<li><a href=\"https://github.com/pendulum-project/ntpd-rs/pull/752\">https://github.com/pendulum-project/ntpd-rs/pull/752</a></li>\n<li><a href=\"https://github.com/pendulum-project/ntpd-rs/releases/tag/v0.3.3\">https://github.com/pendulum-project/ntpd-rs/releases/tag/v0.3.3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-33192\">https://nvd.nist.gov/vuln/detail/CVE-2023-33192</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-qwhm-h7v3-mrjx\">https://github.com/advisories/GHSA-qwhm-h7v3-mrjx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-qwhm-h7v3-mrjx",
            "title": "[ntpd] Improper handling of NTS cookie length that could crash the ntpd-rs server",
            "date_modified": "2023-05-30T09:06:00.000Z",
            "date_published": "2023-05-25T17:01:12.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-qwhm-h7v3-mrjx"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>A cross-site scripting vulnerability (XSS) in the component microbin/src/pasta.rs of Microbin v1.2.0 allows attackers to execute arbitrary web scripts or HTML via a crafted payload.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-27075\">https://nvd.nist.gov/vuln/detail/CVE-2023-27075</a></li>\n<li><a href=\"https://github.com/szabodanika/microbin/issues/142\">https://github.com/szabodanika/microbin/issues/142</a></li>\n<li><a href=\"https://github.com/szabodanika/microbin/pull/143\">https://github.com/szabodanika/microbin/pull/143</a></li>\n<li><a href=\"https://github.com/szabodanika/microbin/pull/143/commits/6907bb4f13faf13e45d4a2cd0f9a8c562086e6ca\">https://github.com/szabodanika/microbin/pull/143/commits/6907bb4f13faf13e45d4a2cd0f9a8c562086e6ca</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mphm-gqh9-q59x\">https://github.com/advisories/GHSA-mphm-gqh9-q59x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mphm-gqh9-q59x",
            "title": "[microbin] Stored cross site scripting in Microbin",
            "date_modified": "2023-05-09T18:48:42.000Z",
            "date_published": "2023-05-04T03:30:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mphm-gqh9-q59x"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p><a href=\"https://github.com/tc39/proposal-resizablearraybuffer\">Resizable ArrayBuffers</a> passed to asynchronous native functions that are shrunk during the asynchronous operation could result in an out-of-bound read/write.</p>\n<p>It is unlikely that this has been exploited in the wild, as the only version affected is Deno 1.32.0.</p>\n<p>Deno Deploy users are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been resolved by disabling resizable ArrayBuffers temporarily in Deno 1.32.1. A future version of Deno will re-enable resizable ArrayBuffers with a proper fix.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Upgrade to Deno 1.32.1, or run with <code>--v8-flags=--no-harmony-rab-gsab</code> to disable resizable ArrayBuffers.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/denoland/deno/security/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/18395\">https://github.com/denoland/deno/pull/18395</a></li>\n<li><a href=\"https://github.com/denoland/deno/releases/tag/v1.32.1\">https://github.com/denoland/deno/releases/tag/v1.32.1</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-28445\">https://nvd.nist.gov/vuln/detail/CVE-2023-28445</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/18452\">https://github.com/denoland/deno/pull/18452</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c25x-cm9x-qqgx\">https://github.com/advisories/GHSA-c25x-cm9x-qqgx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx",
            "title": "[deno_runtime] Deno improperly handles resizable ArrayBuffer",
            "date_modified": "2023-05-04T21:09:39.000Z",
            "date_published": "2023-03-23T23:13:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c25x-cm9x-qqgx"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}