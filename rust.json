{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>An issue in the IpFile argument of rust-lang webbrowser-rs v0.8.2 allows attackers to access arbitrary files via supplying a crafted URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45299\">https://nvd.nist.gov/vuln/detail/CVE-2022-45299</a></li>\n<li><a href=\"https://github.com/offalltn/CVE-2022-45299\">https://github.com/offalltn/CVE-2022-45299</a></li>\n<li><a href=\"https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3\">https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m589-mv4q-p7rj\">https://github.com/advisories/GHSA-m589-mv4q-p7rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m589-mv4q-p7rj",
            "title": "[webbrowser] webbrowser-rs allows attackers to access arbitrary files via supplying a crafted URL",
            "date_modified": "2023-01-17T23:24:32.000Z",
            "date_published": "2023-01-13T21:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m589-mv4q-p7rj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the slock crate through 2020-11-17 for Rust. Slock unconditionally implements Send and Sync.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36455\">https://nvd.nist.gov/vuln/detail/CVE-2020-36455</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/issues/2\">https://github.com/BrokenLamp/slock-rs/issues/2</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0135.html\">https://rustsec.org/advisories/RUSTSEC-2020-0135.html</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6\">https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc36-5m36-hjh5\">https://github.com/advisories/GHSA-mc36-5m36-hjh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5",
            "title": "[slock] Data races in slock",
            "date_modified": "2023-01-17T13:58:18.000Z",
            "date_published": "2021-08-25T20:58:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the csv-sniffer crate through 2021-01-05 for Rust. preamble_skipcount may read from uninitialized memory locations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45686\">https://nvd.nist.gov/vuln/detail/CVE-2021-45686</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0088.html\">https://rustsec.org/advisories/RUSTSEC-2021-0088.html</a></li>\n<li><a href=\"https://github.com/jblondin/csv-sniffer/pull/2\">https://github.com/jblondin/csv-sniffer/pull/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9783-42pm-x5jq\">https://github.com/advisories/GHSA-9783-42pm-x5jq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9783-42pm-x5jq",
            "title": "[csv-sniffer] Use of Uninitialized Resource in csv-sniffer.",
            "date_modified": "2023-01-10T23:41:54.000Z",
            "date_published": "2022-01-06T22:13:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9783-42pm-x5jq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the flumedb crate through 2021-01-07 for Rust. read_entry may read from uninitialized memory locations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45684\">https://nvd.nist.gov/vuln/detail/CVE-2021-45684</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0086.html\">https://rustsec.org/advisories/RUSTSEC-2021-0086.html</a></li>\n<li><a href=\"https://github.com/sunrise-choir/flumedb-rs/pull/12\">https://github.com/sunrise-choir/flumedb-rs/pull/12</a></li>\n<li><a href=\"https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6\">https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p46c-w9m3-7qr2\">https://github.com/advisories/GHSA-p46c-w9m3-7qr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2",
            "title": "[flumedb] Use of Uninitialized Resource in flumedb.",
            "date_modified": "2023-01-10T23:36:20.000Z",
            "date_published": "2022-01-06T22:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The bzip2 crate before 0.4.4 for Rust allow attackers to cause a denial of service via a large file that triggers an integer overflow in <code>mem.rs</code>. NOTE: this is unrelated to the <a href=\"https://crates.io/crates/bzip2-rs\">https://crates.io/crates/bzip2-rs</a> product.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22895\">https://nvd.nist.gov/vuln/detail/CVE-2023-22895</a></li>\n<li><a href=\"https://github.com/alexcrichton/bzip2-rs/pull/86\">https://github.com/alexcrichton/bzip2-rs/pull/86</a></li>\n<li><a href=\"https://crates.io/crates/bzip2/versions\">https://crates.io/crates/bzip2/versions</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-96jv-r488-c2rj\">https://github.com/advisories/GHSA-96jv-r488-c2rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-96jv-r488-c2rj",
            "title": "[bzip2] bzip2 allows attackers to cause a denial of service via a large file that triggers an integer overflow",
            "date_modified": "2023-01-13T17:18:41.000Z",
            "date_published": "2023-01-10T03:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-96jv-r488-c2rj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The Rust Security Response WG was notified that Cargo did not perform SSH host key verification when cloning indexes and dependencies via SSH. An attacker could exploit this to perform man-in-the-middle (MITM) attacks.</p>\n<p>This vulnerability has been assigned CVE-2022-46176.</p>\n<h2 id=\"overview\">Overview</h2>\n<p>When an SSH client establishes communication with a server, to prevent MITM attacks the client should check whether it already communicated with that server in the past and what the server's public key was back then. If the key changed since the last connection, the connection must be aborted as a MITM attack is likely taking place.</p>\n<p>It was discovered that Cargo never implemented such checks, and performed no validation on the server's public key, leaving Cargo users vulnerable to MITM attacks.</p>\n<h2 id=\"affected-versions\">Affected Versions</h2>\n<p>All Rust versions containing Cargo before 1.66.1 are vulnerable (prior to 0.67.1 for the crates.io package).</p>\n<p>Note that even if you don't explicitly use SSH for alternate registry indexes or crate dependencies, you might be affected by this vulnerability if you have configured git to replace HTTPS connections to GitHub with SSH (through git's <a href=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf\"><code>url.&lt;base&gt;.insteadOf</code></a> setting), as that'd cause you to clone the crates.io index through SSH.</p>\n<h2 id=\"mitigations\">Mitigations</h2>\n<p>We will be releasing Rust 1.66.1 today, 2023-01-10, changing Cargo to check the SSH host key and abort the connection if the server's public key is not already trusted. We recommend everyone to upgrade as soon as possible.</p>\n<p>Patch files for Rust 1.66.0 are also available <a href=\"https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176\">here</a> for custom-built toolchains.</p>\n<p>For the time being Cargo will not ask the user whether to trust a server's public key during the first connection. Instead, Cargo will show an error message detailing how to add that public key to the list of trusted keys. Note that this might break your automated builds if the hosts you clone dependencies or indexes from are not already trusted.</p>\n<p>If you can't upgrade to Rust 1.66.1 yet, we recommend configuring Cargo to use the <code>git</code> CLI instead of its built-in git support. That way, all git network operations will be performed by the <code>git</code> CLI, which is not affected by this vulnerability. You can do so by adding this snippet to your <a href=\"https://doc.rust-lang.org/cargo/reference/config.html\">Cargo configuration file</a>:</p>\n<pre><code class=\"language-toml\">[net]\ngit-fetch-with-cli = true\n</code></pre>\n<h2 id=\"acknowledgments\">Acknowledgments</h2>\n<p>Thanks to the Julia Security Team for disclosing this to us according to our <a href=\"https://www.rust-lang.org/policies/security\">security policy</a>!</p>\n<p>We also want to thank the members of the Rust project who contributed to fixing this issue. Thanks to Eric Huss and Weihang Lo for writing and reviewing the patch, Pietro Albini for coordinating the disclosure and writing this advisory, and Josh Stone, Josh Triplett and Jacob Finkelman for advising during the disclosure.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/rust-lang/cargo/security/advisories/GHSA-r5w3-xm58-jv6j\">https://github.com/rust-lang/cargo/security/advisories/GHSA-r5w3-xm58-jv6j</a></li>\n<li><a href=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf\">https://git-scm.com/docs/git-config#Documentation/git-config.txt-urlltbasegtinsteadOf</a></li>\n<li><a href=\"https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176\">https://github.com/rust-lang/wg-security-response/tree/main/patches/CVE-2022-46176</a></li>\n<li><a href=\"https://www.rust-lang.org/policies/security\">https://www.rust-lang.org/policies/security</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46176\">https://nvd.nist.gov/vuln/detail/CVE-2022-46176</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r5w3-xm58-jv6j\">https://github.com/advisories/GHSA-r5w3-xm58-jv6j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r5w3-xm58-jv6j",
            "title": "[cargo] Cargo did not verify SSH host keys",
            "date_modified": "2023-01-11T22:59:43.000Z",
            "date_published": "2023-01-10T21:09:31.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r5w3-xm58-jv6j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SWHKD 1.1.5 allows unsafe parsing via the -c option. An information leak might occur but there is a simple denial of service (memory exhaustion) upon an attempt to parse a large or infinite file (such as a block or character device).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-27819\">https://nvd.nist.gov/vuln/detail/CVE-2022-27819</a></li>\n<li><a href=\"https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021\">https://github.com/waycrate/swhkd/commit/b4e6dc76f4845ab03104187a42ac6d1bbc1e0021</a></li>\n<li><a href=\"https://github.com/waycrate/swhkd/releases\">https://github.com/waycrate/swhkd/releases</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/04/14/1\">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>\n<li><a href=\"https://github.com/waycrate/swhkd/releases/tag/1.2.0\">https://github.com/waycrate/swhkd/releases/tag/1.2.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-h6xw-mghq-7523\">https://github.com/advisories/GHSA-h6xw-mghq-7523</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-h6xw-mghq-7523",
            "title": "[Simple-Wayland-HotKey-Daemon] Unsafe parsing in SWHKD",
            "date_modified": "2023-01-06T22:26:05.000Z",
            "date_published": "2022-04-08T00:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-h6xw-mghq-7523"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>\n<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following versions have been patched:</p>\n<ul>\n<li>1.23.1</li>\n<li>1.20.3</li>\n<li>1.18.4</li>\n</ul>\n<p>The fix will also be present in all releases starting from version 1.24.0.</p>\n<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>\n<pre><code class=\"language-rust\">let mut opts = ServerOptions::new();\nopts.pipe_mode(PipeMode::Message);\nopts.reject_remote_clients(true);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22466\">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/5336\">https://github.com/tokio-rs/tokio/pull/5336</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1\">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0001.html\">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7",
            "title": "[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe",
            "date_modified": "2023-01-10T16:12:25.000Z",
            "date_published": "2023-01-06T21:40:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>\n<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following versions have been patched:</p>\n<ul>\n<li>1.23.1</li>\n<li>1.20.3</li>\n<li>1.18.4</li>\n</ul>\n<p>The fix will also be present in all releases starting from version 1.24.0.</p>\n<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>\n<pre><code class=\"language-rust\">let mut opts = ServerOptions::new();\nopts.pipe_mode(PipeMode::Message);\nopts.reject_remote_clients(true);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22466\">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/5336\">https://github.com/tokio-rs/tokio/pull/5336</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1\">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0001.html\">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7",
            "title": "[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe",
            "date_modified": "2023-01-10T16:12:25.000Z",
            "date_published": "2023-01-06T21:40:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>When configuring a Windows named pipe server, setting <code>pipe_mode</code> will reset <code>reject_remote_clients</code> to <code>false</code>. If the application has previously configured <code>reject_remote_clients</code> to <code>true</code>, this effectively undoes the configuration. This also applies if <code>reject_remote_clients</code> is not explicitly set as this is the default configuration and is cleared by calling <code>pipe_mode</code>.</p>\n<p>Remote clients may only access the named pipe if the named pipe's associated path is accessible via a publically shared folder (SMB).</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The following versions have been patched:</p>\n<ul>\n<li>1.23.1</li>\n<li>1.20.3</li>\n<li>1.18.4</li>\n</ul>\n<p>The fix will also be present in all releases starting from version 1.24.0.</p>\n<p>Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Ensure that <code>pipe_mode</code> is set <strong>first</strong> after initializing a <code>ServerOptions</code>. For example:</p>\n<pre><code class=\"language-rust\">let mut opts = ServerOptions::new();\nopts.pipe_mode(PipeMode::Message);\nopts.reject_remote_clients(true);\n</code></pre>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22466\">https://nvd.nist.gov/vuln/detail/CVE-2023-22466</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/pull/5336\">https://github.com/tokio-rs/tokio/pull/5336</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1\">https://github.com/tokio-rs/tokio/releases/tag/tokio-1.23.1</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients\">https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0001.html\">https://rustsec.org/advisories/RUSTSEC-2023-0001.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7rrj-xr53-82p7\">https://github.com/advisories/GHSA-7rrj-xr53-82p7</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7",
            "title": "[tokio] Tokio reject_remote_clients configuration may get dropped when creating a Windows named pipe",
            "date_modified": "2023-01-10T16:12:25.000Z",
            "date_published": "2023-01-06T21:40:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7rrj-xr53-82p7"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>SWHKD 1.1.5 unsafely uses the /tmp/swhkd.sock pathname. There can be an information leak or denial of service.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-27818\">https://nvd.nist.gov/vuln/detail/CVE-2022-27818</a></li>\n<li><a href=\"https://github.com/waycrate/swhkd/commit/f70b99dd575fab79d8a942111a6980431f006818\">https://github.com/waycrate/swhkd/commit/f70b99dd575fab79d8a942111a6980431f006818</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2022/04/14/1\">http://www.openwall.com/lists/oss-security/2022/04/14/1</a></li>\n<li><a href=\"https://github.com/waycrate/swhkd/releases/tag/1.2.0\">https://github.com/waycrate/swhkd/releases/tag/1.2.0</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r3r5-jhw6-4634\">https://github.com/advisories/GHSA-r3r5-jhw6-4634</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r3r5-jhw6-4634",
            "title": "[Simple-Wayland-HotKey-Daemon] Insecure temporary file usage in SWHKD",
            "date_modified": "2023-01-13T05:05:19.000Z",
            "date_published": "2022-04-08T00:00:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r3r5-jhw6-4634"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In function <code>Table::as_ref</code>, a reference of vector is force cast to slice. There are multiple problems here:</p>\n<ol>\n<li>To guarantee the size is correct, we have to first do <code>Vec::shrink_to_fit</code>. The function requires a mutable reference, so we have to force cast from immutable to mutable, which is undefined behavior (UB).</li>\n<li>Even if (1) is sound, <code>&amp;Vec&lt;T&gt;</code> and <code>&amp;[T]</code> still might not have the same layout. Treating them equally may lead to undefinted behavior (UB).</li>\n</ol>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/phsym/prettytable-rs/issues/145\">https://github.com/phsym/prettytable-rs/issues/145</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0074.html\">https://rustsec.org/advisories/RUSTSEC-2022-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-gfgm-chr3-x6px\">https://github.com/advisories/GHSA-gfgm-chr3-x6px</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-gfgm-chr3-x6px",
            "title": "[prettytable-rs] prettytable-rs: Force cast a &Vec<T> to &[T] may lead to undefined behavior",
            "date_modified": "2023-01-07T05:05:44.000Z",
            "date_published": "2022-12-30T17:48:30.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-gfgm-chr3-x6px"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When <code>hyper-staticfile</code> performs a redirect for a directory request (e.g. a request for <code>/dir</code> that redirects to <code>/dir/</code>), the <code>Location</code> header value was derived from user input (the request path), simply appending a slash. The intent was to perform an origin-relative redirect, but specific inputs allowed performing a scheme-relative redirect instead.</p>\n<p>An attacker could craft a special URL that would appear to be for the correct domain, but immediately redirects to a malicious domain. Such a URL can benefit phishing attacks, for example an innocent looking link in an email.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/stephank/hyper-staticfile/commit/4db4afb811c553bc3d54a01a9985b9e6dfc5a115\">https://github.com/stephank/hyper-staticfile/commit/4db4afb811c553bc3d54a01a9985b9e6dfc5a115</a></li>\n<li><a href=\"https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea\">https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0072.html\">https://rustsec.org/advisories/RUSTSEC-2022-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5wvv-q5fv-2388\">https://github.com/advisories/GHSA-5wvv-q5fv-2388</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5wvv-q5fv-2388",
            "title": "[hyper-staticfile] hyper-staticfile's location header incorporates user input, allowing open redirect",
            "date_modified": "2023-01-07T05:05:25.000Z",
            "date_published": "2022-12-30T16:57:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5wvv-q5fv-2388"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>When <code>hyper-staticfile</code> performs a redirect for a directory request (e.g. a request for <code>/dir</code> that redirects to <code>/dir/</code>), the <code>Location</code> header value was derived from user input (the request path), simply appending a slash. The intent was to perform an origin-relative redirect, but specific inputs allowed performing a scheme-relative redirect instead.</p>\n<p>An attacker could craft a special URL that would appear to be for the correct domain, but immediately redirects to a malicious domain. Such a URL can benefit phishing attacks, for example an innocent looking link in an email.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/stephank/hyper-staticfile/commit/4db4afb811c553bc3d54a01a9985b9e6dfc5a115\">https://github.com/stephank/hyper-staticfile/commit/4db4afb811c553bc3d54a01a9985b9e6dfc5a115</a></li>\n<li><a href=\"https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea\">https://github.com/stephank/hyper-staticfile/commit/f12cadc6666c6f555d29725f5bc45da2103f24ea</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0072.html\">https://rustsec.org/advisories/RUSTSEC-2022-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-5wvv-q5fv-2388\">https://github.com/advisories/GHSA-5wvv-q5fv-2388</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-5wvv-q5fv-2388",
            "title": "[hyper-staticfile] hyper-staticfile's location header incorporates user input, allowing open redirect",
            "date_modified": "2023-01-07T05:05:25.000Z",
            "date_published": "2022-12-30T16:57:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-5wvv-q5fv-2388"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The filesystem glob pattern wildcards <code>*</code>, <code>?</code>, and <code>[...]</code> match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths.</p>\n<p>Example: The <code>fs</code> scope <code>$HOME/*.key</code> would also allow <code>$HOME/.ssh/secret.key</code> to be read even though it is in a sub directory of <code>$HOME</code> and is inside a hidden folder.</p>\n<p>Scopes without the wildcards are not affected. As <code>**</code> allows for sub directories the behavior there is also as expected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in the latest release and was backported into the currently supported 1.x branches.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is known at the time of publication.</p>\n<h3 id=\"references\">References</h3>\n<p>The original report contained information that the <code>dialog.open</code> component automatically allows one sub directory to be read, regardless of the <code>recursive</code> option.</p>\n<p>Imagine a file system looking like</p>\n<pre><code> o ../\n o documents/\n    - file.txt\n    - deeper/\n       o deep_file.txt\n</code></pre>\n<p>Reproduction steps:</p>\n<ol>\n<li>Trying to load “file.txt” or “deep_file.txt” doesn’t work. Expected</li>\n<li>Select “documents” as folder to open(ie. with window.<strong>TAURI</strong>.dialog.open)</li>\n<li>Trying to load “file.txt” works. Expected</li>\n<li>Trying to load “deep_file.txt” also works, which isn’t expected</li>\n</ol>\n<p>The recursive flag is used in <a href=\"https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154\">https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154</a> to scope the filesystem access to either files in the folder or to also include sub directories.</p>\n<p>The original issue was replicated and further investigated.</p>\n<p>The root cause was triaged to the <code>glob</code> crate facilitating defaults, which allow the <code>*</code> and <code>[...]</code> to also match path literals.</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: false,\n    require_literal_leading_dot: false\n}\n</code></pre>\n<p>This implicated that not only the <code>dialog.open</code> component was affected but rather all <code>fs</code> scopes containing the <code>*</code> or <code>[...]</code> glob.\nDuring this investigation it became obvious that the current glob matches would also match hidden folder (e.g: <code>.ssh</code>) content by default, without explicitly allowing hidden folders to be matched. This is not commonly expected behavior in comparison to for example <code>bash</code>.</p>\n<p>The new default  Match options are:</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: true,\n    require_literal_leading_dot: true\n}\n</code></pre>\n<blockquote>\n<p>Another note security relevant for developers building applications interacting with case sensitive filesystems is, that the <code>case_sensitive</code> option only affects ASCII file paths and is not valid in Unicode based paths. This is considered a known risk until the <code>glob</code> crate supports non-ASCII file paths for this type of case sensitive matching.</p>\n</blockquote>\n<h3 id=\"for-more-information\">For more Information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4\">https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3\">https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46171\">https://nvd.nist.gov/vuln/detail/CVE-2022-46171</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58\">https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5",
            "title": "[tauri] Tauri Filesystem Scope Glob Pattern is too Permissive",
            "date_modified": "2023-01-08T05:07:47.000Z",
            "date_published": "2022-12-22T20:03:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The filesystem glob pattern wildcards <code>*</code>, <code>?</code>, and <code>[...]</code> match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths.</p>\n<p>Example: The <code>fs</code> scope <code>$HOME/*.key</code> would also allow <code>$HOME/.ssh/secret.key</code> to be read even though it is in a sub directory of <code>$HOME</code> and is inside a hidden folder.</p>\n<p>Scopes without the wildcards are not affected. As <code>**</code> allows for sub directories the behavior there is also as expected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in the latest release and was backported into the currently supported 1.x branches.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is known at the time of publication.</p>\n<h3 id=\"references\">References</h3>\n<p>The original report contained information that the <code>dialog.open</code> component automatically allows one sub directory to be read, regardless of the <code>recursive</code> option.</p>\n<p>Imagine a file system looking like</p>\n<pre><code> o ../\n o documents/\n    - file.txt\n    - deeper/\n       o deep_file.txt\n</code></pre>\n<p>Reproduction steps:</p>\n<ol>\n<li>Trying to load “file.txt” or “deep_file.txt” doesn’t work. Expected</li>\n<li>Select “documents” as folder to open(ie. with window.<strong>TAURI</strong>.dialog.open)</li>\n<li>Trying to load “file.txt” works. Expected</li>\n<li>Trying to load “deep_file.txt” also works, which isn’t expected</li>\n</ol>\n<p>The recursive flag is used in <a href=\"https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154\">https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154</a> to scope the filesystem access to either files in the folder or to also include sub directories.</p>\n<p>The original issue was replicated and further investigated.</p>\n<p>The root cause was triaged to the <code>glob</code> crate facilitating defaults, which allow the <code>*</code> and <code>[...]</code> to also match path literals.</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: false,\n    require_literal_leading_dot: false\n}\n</code></pre>\n<p>This implicated that not only the <code>dialog.open</code> component was affected but rather all <code>fs</code> scopes containing the <code>*</code> or <code>[...]</code> glob.\nDuring this investigation it became obvious that the current glob matches would also match hidden folder (e.g: <code>.ssh</code>) content by default, without explicitly allowing hidden folders to be matched. This is not commonly expected behavior in comparison to for example <code>bash</code>.</p>\n<p>The new default  Match options are:</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: true,\n    require_literal_leading_dot: true\n}\n</code></pre>\n<blockquote>\n<p>Another note security relevant for developers building applications interacting with case sensitive filesystems is, that the <code>case_sensitive</code> option only affects ASCII file paths and is not valid in Unicode based paths. This is considered a known risk until the <code>glob</code> crate supports non-ASCII file paths for this type of case sensitive matching.</p>\n</blockquote>\n<h3 id=\"for-more-information\">For more Information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4\">https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3\">https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46171\">https://nvd.nist.gov/vuln/detail/CVE-2022-46171</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58\">https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5",
            "title": "[tauri] Tauri Filesystem Scope Glob Pattern is too Permissive",
            "date_modified": "2023-01-08T05:07:47.000Z",
            "date_published": "2022-12-22T20:03:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The filesystem glob pattern wildcards <code>*</code>, <code>?</code>, and <code>[...]</code> match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths.</p>\n<p>Example: The <code>fs</code> scope <code>$HOME/*.key</code> would also allow <code>$HOME/.ssh/secret.key</code> to be read even though it is in a sub directory of <code>$HOME</code> and is inside a hidden folder.</p>\n<p>Scopes without the wildcards are not affected. As <code>**</code> allows for sub directories the behavior there is also as expected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in the latest release and was backported into the currently supported 1.x branches.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is known at the time of publication.</p>\n<h3 id=\"references\">References</h3>\n<p>The original report contained information that the <code>dialog.open</code> component automatically allows one sub directory to be read, regardless of the <code>recursive</code> option.</p>\n<p>Imagine a file system looking like</p>\n<pre><code> o ../\n o documents/\n    - file.txt\n    - deeper/\n       o deep_file.txt\n</code></pre>\n<p>Reproduction steps:</p>\n<ol>\n<li>Trying to load “file.txt” or “deep_file.txt” doesn’t work. Expected</li>\n<li>Select “documents” as folder to open(ie. with window.<strong>TAURI</strong>.dialog.open)</li>\n<li>Trying to load “file.txt” works. Expected</li>\n<li>Trying to load “deep_file.txt” also works, which isn’t expected</li>\n</ol>\n<p>The recursive flag is used in <a href=\"https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154\">https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154</a> to scope the filesystem access to either files in the folder or to also include sub directories.</p>\n<p>The original issue was replicated and further investigated.</p>\n<p>The root cause was triaged to the <code>glob</code> crate facilitating defaults, which allow the <code>*</code> and <code>[...]</code> to also match path literals.</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: false,\n    require_literal_leading_dot: false\n}\n</code></pre>\n<p>This implicated that not only the <code>dialog.open</code> component was affected but rather all <code>fs</code> scopes containing the <code>*</code> or <code>[...]</code> glob.\nDuring this investigation it became obvious that the current glob matches would also match hidden folder (e.g: <code>.ssh</code>) content by default, without explicitly allowing hidden folders to be matched. This is not commonly expected behavior in comparison to for example <code>bash</code>.</p>\n<p>The new default  Match options are:</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: true,\n    require_literal_leading_dot: true\n}\n</code></pre>\n<blockquote>\n<p>Another note security relevant for developers building applications interacting with case sensitive filesystems is, that the <code>case_sensitive</code> option only affects ASCII file paths and is not valid in Unicode based paths. This is considered a known risk until the <code>glob</code> crate supports non-ASCII file paths for this type of case sensitive matching.</p>\n</blockquote>\n<h3 id=\"for-more-information\">For more Information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4\">https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3\">https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46171\">https://nvd.nist.gov/vuln/detail/CVE-2022-46171</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58\">https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5",
            "title": "[tauri] Tauri Filesystem Scope Glob Pattern is too Permissive",
            "date_modified": "2023-01-08T05:07:47.000Z",
            "date_published": "2022-12-22T20:03:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The filesystem glob pattern wildcards <code>*</code>, <code>?</code>, and <code>[...]</code> match file path literals and leading dots by default, which unintentionally exposes sub folder content of allowed paths.</p>\n<p>Example: The <code>fs</code> scope <code>$HOME/*.key</code> would also allow <code>$HOME/.ssh/secret.key</code> to be read even though it is in a sub directory of <code>$HOME</code> and is inside a hidden folder.</p>\n<p>Scopes without the wildcards are not affected. As <code>**</code> allows for sub directories the behavior there is also as expected.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in the latest release and was backported into the currently supported 1.x branches.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>No workaround is known at the time of publication.</p>\n<h3 id=\"references\">References</h3>\n<p>The original report contained information that the <code>dialog.open</code> component automatically allows one sub directory to be read, regardless of the <code>recursive</code> option.</p>\n<p>Imagine a file system looking like</p>\n<pre><code> o ../\n o documents/\n    - file.txt\n    - deeper/\n       o deep_file.txt\n</code></pre>\n<p>Reproduction steps:</p>\n<ol>\n<li>Trying to load “file.txt” or “deep_file.txt” doesn’t work. Expected</li>\n<li>Select “documents” as folder to open(ie. with window.<strong>TAURI</strong>.dialog.open)</li>\n<li>Trying to load “file.txt” works. Expected</li>\n<li>Trying to load “deep_file.txt” also works, which isn’t expected</li>\n</ol>\n<p>The recursive flag is used in <a href=\"https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154\">https://github.com/tauri-apps/tauri/blob/cd8c074ae6592303d3f6844a4fb6d262eae913b2/core/tauri/src/scope/fs.rs#L154</a> to scope the filesystem access to either files in the folder or to also include sub directories.</p>\n<p>The original issue was replicated and further investigated.</p>\n<p>The root cause was triaged to the <code>glob</code> crate facilitating defaults, which allow the <code>*</code> and <code>[...]</code> to also match path literals.</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: false,\n    require_literal_leading_dot: false\n}\n</code></pre>\n<p>This implicated that not only the <code>dialog.open</code> component was affected but rather all <code>fs</code> scopes containing the <code>*</code> or <code>[...]</code> glob.\nDuring this investigation it became obvious that the current glob matches would also match hidden folder (e.g: <code>.ssh</code>) content by default, without explicitly allowing hidden folders to be matched. This is not commonly expected behavior in comparison to for example <code>bash</code>.</p>\n<p>The new default  Match options are:</p>\n<pre><code class=\"language-rust\">MatchOptions {\n    case_sensitive: true,\n    require_literal_separator: true,\n    require_literal_leading_dot: true\n}\n</code></pre>\n<blockquote>\n<p>Another note security relevant for developers building applications interacting with case sensitive filesystems is, that the <code>case_sensitive</code> option only affects ASCII file paths and is not valid in Unicode based paths. This is considered a known risk until the <code>glob</code> crate supports non-ASCII file paths for this type of case sensitive matching.</p>\n</blockquote>\n<h3 id=\"for-more-information\">For more Information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<p>Open an issue in tauri\nEmail us at <a href=\"mailto:security@tauri.app\">security@tauri.app</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/tauri-apps/tauri/security/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4\">https://github.com/tauri-apps/tauri/commit/14d567f7ecb25a6d1024cf3d796f86aee89d0dd4</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3\">https://github.com/tauri-apps/tauri/commit/72389b00d7b495ffd7750eb1e75a3b8537d07cf3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-46171\">https://nvd.nist.gov/vuln/detail/CVE-2022-46171</a></li>\n<li><a href=\"https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58\">https://github.com/tauri-apps/tauri/commit/f0602e7c294245ab6ef6fbf2a976ef398340ef58</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-6mv3-wm7j-h4w5\">https://github.com/advisories/GHSA-6mv3-wm7j-h4w5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5",
            "title": "[tauri] Tauri Filesystem Scope Glob Pattern is too Permissive",
            "date_modified": "2023-01-08T05:07:47.000Z",
            "date_published": "2022-12-22T20:03:43.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-6mv3-wm7j-h4w5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Anyone using the <code>tendermint-light-client</code> and related packages to perform light client verification (e.g. IBC-rs, Hermes).</p>\n<p>At present, the light client does not check that the chain IDs of the trusted and untrusted headers match, resulting in a possible attack vector where someone who finds a header from an untrusted chain that satisfies all other verification conditions (e.g. enough overlapping validator signatures) could fool a light client.</p>\n<p>The attack vector is currently theoretical, and no proof-of-concept exists yet to exploit it on live networks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users of the light client-related crates can currently upgrade to <code>v0.28.0</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tendermint/tendermint/tree/main/spec/light-client\">Light Client specification</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-xqqc-c5gw-c5r5\">https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-xqqc-c5gw-c5r5</a></li>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/commit/5c32f31b97ac3172775699fe0d4ba6003ca4fb18\">https://github.com/informalsystems/tendermint-rs/commit/5c32f31b97ac3172775699fe0d4ba6003ca4fb18</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23507\">https://nvd.nist.gov/vuln/detail/CVE-2022-23507</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqqc-c5gw-c5r5\">https://github.com/advisories/GHSA-xqqc-c5gw-c5r5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqqc-c5gw-c5r5",
            "title": "[tendermint-light-client-js] Tendermint light client verification not taking into account chain ID",
            "date_modified": "2023-01-08T05:04:49.000Z",
            "date_published": "2022-12-14T21:35:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqqc-c5gw-c5r5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Anyone using the <code>tendermint-light-client</code> and related packages to perform light client verification (e.g. IBC-rs, Hermes).</p>\n<p>At present, the light client does not check that the chain IDs of the trusted and untrusted headers match, resulting in a possible attack vector where someone who finds a header from an untrusted chain that satisfies all other verification conditions (e.g. enough overlapping validator signatures) could fool a light client.</p>\n<p>The attack vector is currently theoretical, and no proof-of-concept exists yet to exploit it on live networks.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users of the light client-related crates can currently upgrade to <code>v0.28.0</code>.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>None</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tendermint/tendermint/tree/main/spec/light-client\">Light Client specification</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-xqqc-c5gw-c5r5\">https://github.com/informalsystems/tendermint-rs/security/advisories/GHSA-xqqc-c5gw-c5r5</a></li>\n<li><a href=\"https://github.com/informalsystems/tendermint-rs/commit/5c32f31b97ac3172775699fe0d4ba6003ca4fb18\">https://github.com/informalsystems/tendermint-rs/commit/5c32f31b97ac3172775699fe0d4ba6003ca4fb18</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-23507\">https://nvd.nist.gov/vuln/detail/CVE-2022-23507</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-xqqc-c5gw-c5r5\">https://github.com/advisories/GHSA-xqqc-c5gw-c5r5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-xqqc-c5gw-c5r5",
            "title": "[tendermint-light-client] Tendermint light client verification not taking into account chain ID",
            "date_modified": "2023-01-08T05:04:49.000Z",
            "date_published": "2022-12-14T21:35:24.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-xqqc-c5gw-c5r5"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}