{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<p>An issue was discovered in ostree before version 0.17.1 allows attackers to cause a denial of service via the print_panic function in repo_checkout_filter.rs.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-47085\">https://nvd.nist.gov/vuln/detail/CVE-2022-47085</a></li>\n<li><a href=\"https://github.com/ostreedev/ostree/issues/2775\">https://github.com/ostreedev/ostree/issues/2775</a></li>\n<li><a href=\"https://doc.rust-lang.org/std/macro.eprintln.html\">https://doc.rust-lang.org/std/macro.eprintln.html</a></li>\n<li><a href=\"https://github.com/ostreedev/ostree/commit/d9bb160a7c1e7f0a2308a7282622b91bc27d448c\">https://github.com/ostreedev/ostree/commit/d9bb160a7c1e7f0a2308a7282622b91bc27d448c</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x96g-95fq-4xv4\">https://github.com/advisories/GHSA-x96g-95fq-4xv4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x96g-95fq-4xv4",
            "title": "[ostree] libostree vulnerable to denial of service attack",
            "date_modified": "2023-12-20T23:16:17.000Z",
            "date_published": "2023-07-18T15:30:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x96g-95fq-4xv4"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>Terrapin is a prefix truncation attack targeting the SSH protocol. More precisely, Terrapin breaks the integrity of SSH's secure channel. By carefully adjusting the sequence numbers during the handshake, an attacker can remove an arbitrary amount of messages sent by the client or server at the beginning of the secure channel without the client or server noticing it.</p>\n<h3 id=\"mitigations\">Mitigations</h3>\n<p>To mitigate this protocol vulnerability, OpenSSH suggested a so-called \"strict kex\" which alters the SSH handshake to ensure a Man-in-the-Middle attacker cannot introduce unauthenticated messages as well as convey sequence number manipulation across handshakes.</p>\n<p><strong>Warning: To take effect, both the client and server must support this countermeasure.</strong> </p>\n<p>As a stop-gap measure, peers may also (temporarily) disable the affected algorithms and use unaffected alternatives like AES-GCM instead until patches are available.</p>\n<h3 id=\"details\">Details</h3>\n<p>The SSH specifications of ChaCha20-Poly1305 (<a href=\"mailto:chacha20-poly1305@openssh.com\">chacha20-poly1305@openssh.com</a>) and Encrypt-then-MAC (*<a href=\"mailto:-etm@openssh.com\">-etm@openssh.com</a> MACs) are vulnerable against an arbitrary prefix truncation attack (a.k.a. Terrapin attack). This allows for an extension negotiation downgrade by stripping the SSH_MSG_EXT_INFO sent after the first message after SSH_MSG_NEWKEYS, downgrading security, and disabling attack countermeasures in some versions of OpenSSH. When targeting Encrypt-then-MAC, this attack requires the use of a CBC cipher to be practically exploitable due to the internal workings of the cipher mode. Additionally, this novel attack technique can be used to exploit previously unexploitable implementation flaws in a Man-in-the-Middle scenario.</p>\n<p>The attack works by an attacker injecting an arbitrary number of SSH_MSG_IGNORE messages during the initial key exchange and consequently removing the same number of messages just after the initial key exchange has concluded. This is possible due to missing authentication of the excess SSH_MSG_IGNORE messages and the fact that the implicit sequence numbers used within the SSH protocol are only checked after the initial key exchange.</p>\n<p>In the case of ChaCha20-Poly1305, the attack is guaranteed to work on every connection as this cipher does not maintain an internal state other than the message's sequence number. In the case of Encrypt-Then-MAC, practical exploitation requires the use of a CBC cipher; while theoretical integrity is broken for all ciphers when using this mode, message processing will fail at the application layer for CTR and stream ciphers.</p>\n<p>For more details see <a href=\"https://terrapin-attack.com\">https://terrapin-attack.com</a>. </p>\n<h3 id=\"impact\">Impact</h3>\n<p>This attack targets the specification of ChaCha20-Poly1305 (<a href=\"mailto:chacha20-poly1305@openssh.com\">chacha20-poly1305@openssh.com</a>) and Encrypt-then-MAC (*<a href=\"mailto:-etm@openssh.com\">-etm@openssh.com</a>), which are widely adopted by well-known SSH implementations and can be considered de-facto standard. These algorithms can be practically exploited; however, in the case of Encrypt-Then-MAC, we additionally require the use of a CBC cipher. As a consequence, this attack works against all well-behaving SSH implementations supporting either of those algorithms and can be used to downgrade (but not fully strip) connection security in case SSH extension negotiation (RFC8308) is supported. The attack may also enable attackers to exploit certain implementation flaws in a man-in-the-middle (MitM) scenario.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/warp-tech/russh/security/advisories/GHSA-45x7-px36-x8w8\">https://github.com/warp-tech/russh/security/advisories/GHSA-45x7-px36-x8w8</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-48795\">https://nvd.nist.gov/vuln/detail/CVE-2023-48795</a></li>\n<li><a href=\"https://github.com/paramiko/paramiko/issues/2337\">https://github.com/paramiko/paramiko/issues/2337</a></li>\n<li><a href=\"https://github.com/TeraTermProject/teraterm/commit/7279fbd6ef4d0c8bdd6a90af4ada2899d786eec0\">https://github.com/TeraTermProject/teraterm/commit/7279fbd6ef4d0c8bdd6a90af4ada2899d786eec0</a></li>\n<li><a href=\"https://github.com/golang/crypto/commit/9d2ee975ef9fe627bf0a6f01c1f69e8ef1d4f05d\">https://github.com/golang/crypto/commit/9d2ee975ef9fe627bf0a6f01c1f69e8ef1d4f05d</a></li>\n<li><a href=\"https://github.com/warp-tech/russh/commit/1aa340a7df1d5be1c0f4a9e247aade76dfdd2951\">https://github.com/warp-tech/russh/commit/1aa340a7df1d5be1c0f4a9e247aade76dfdd2951</a></li>\n<li><a href=\"https://github.com/erlang/otp/blob/d1b43dc0f1361d2ad67601169e90a7fc50bb0369/lib/ssh/doc/src/notes.xml#L39-L42\">https://github.com/erlang/otp/blob/d1b43dc0f1361d2ad67601169e90a7fc50bb0369/lib/ssh/doc/src/notes.xml#L39-L42</a></li>\n<li><a href=\"https://github.com/mkj/dropbear/blob/17657c36cce6df7716d5ff151ec09a665382d5dd/CHANGES#L25\">https://github.com/mkj/dropbear/blob/17657c36cce6df7716d5ff151ec09a665382d5dd/CHANGES#L25</a></li>\n<li><a href=\"https://github.com/openssh/openssh-portable/commits/master\">https://github.com/openssh/openssh-portable/commits/master</a></li>\n<li><a href=\"https://github.com/ronf/asyncssh/blob/develop/docs/changes.rst\">https://github.com/ronf/asyncssh/blob/develop/docs/changes.rst</a></li>\n<li><a href=\"https://github.com/ronf/asyncssh/tags\">https://github.com/ronf/asyncssh/tags</a></li>\n<li><a href=\"https://github.com/warp-tech/russh/releases/tag/v0.40.2\">https://github.com/warp-tech/russh/releases/tag/v0.40.2</a></li>\n<li><a href=\"https://gitlab.com/libssh/libssh-mirror/-/tags\">https://gitlab.com/libssh/libssh-mirror/-/tags</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/-n5WqVC18LQ\">https://groups.google.com/g/golang-announce/c/-n5WqVC18LQ</a></li>\n<li><a href=\"https://groups.google.com/g/golang-announce/c/qA3XtxvMUyg\">https://groups.google.com/g/golang-announce/c/qA3XtxvMUyg</a></li>\n<li><a href=\"https://jadaptive.com/important-java-ssh-security-update-new-ssh-vulnerability-discovered-cve-2023-48795/\">https://jadaptive.com/important-java-ssh-security-update-new-ssh-vulnerability-discovered-cve-2023-48795/</a></li>\n<li><a href=\"https://matt.ucc.asn.au/dropbear/CHANGES\">https://matt.ucc.asn.au/dropbear/CHANGES</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=38684904\">https://news.ycombinator.com/item?id=38684904</a></li>\n<li><a href=\"https://news.ycombinator.com/item?id=38685286\">https://news.ycombinator.com/item?id=38685286</a></li>\n<li><a href=\"https://thorntech.com/cve-2023-48795-and-sftp-gateway/\">https://thorntech.com/cve-2023-48795-and-sftp-gateway/</a></li>\n<li><a href=\"https://twitter.com/TrueSkrillor/status/1736774389725565005\">https://twitter.com/TrueSkrillor/status/1736774389725565005</a></li>\n<li><a href=\"https://www.bitvise.com/ssh-server-version-history\">https://www.bitvise.com/ssh-server-version-history</a></li>\n<li><a href=\"https://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html\">https://www.chiark.greenend.org.uk/~sgtatham/putty/changes.html</a></li>\n<li><a href=\"https://www.openssh.com/openbsd.html\">https://www.openssh.com/openbsd.html</a></li>\n<li><a href=\"https://www.openssh.com/txt/release-9.6\">https://www.openssh.com/txt/release-9.6</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/12/18/2\">https://www.openwall.com/lists/oss-security/2023/12/18/2</a></li>\n<li><a href=\"https://www.reddit.com/r/sysadmin/comments/18idv52/cve202348795_why_is_this_cve_still_undisclosed/\">https://www.reddit.com/r/sysadmin/comments/18idv52/cve202348795_why_is_this_cve_still_undisclosed/</a></li>\n<li><a href=\"https://www.terrapin-attack.com\">https://www.terrapin-attack.com</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/12/18/3\">http://www.openwall.com/lists/oss-security/2023/12/18/3</a></li>\n<li><a href=\"https://github.com/mwiede/jsch/issues/457\">https://github.com/mwiede/jsch/issues/457</a></li>\n<li><a href=\"https://github.com/mwiede/jsch/pull/461\">https://github.com/mwiede/jsch/pull/461</a></li>\n<li><a href=\"https://access.redhat.com/security/cve/cve-2023-48795\">https://access.redhat.com/security/cve/cve-2023-48795</a></li>\n<li><a href=\"https://bugs.gentoo.org/920280\">https://bugs.gentoo.org/920280</a></li>\n<li><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=2254210\">https://bugzilla.redhat.com/show_bug.cgi?id=2254210</a></li>\n<li><a href=\"https://bugzilla.suse.com/show_bug.cgi?id=1217950\">https://bugzilla.suse.com/show_bug.cgi?id=1217950</a></li>\n<li><a href=\"https://git.libssh.org/projects/libssh.git/commit/?h=stable-0.10&amp;id=10e09e273f69e149389b3e0e5d44b8c221c2e7f6\">https://git.libssh.org/projects/libssh.git/commit/?h=stable-0.10&amp;id=10e09e273f69e149389b3e0e5d44b8c221c2e7f6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45x7-px36-x8w8\">https://github.com/advisories/GHSA-45x7-px36-x8w8</a></li>\n<li><a href=\"https://github.com/drakkan/sftpgo/releases/tag/v2.5.6\">https://github.com/drakkan/sftpgo/releases/tag/v2.5.6</a></li>\n<li><a href=\"https://github.com/erlang/otp/releases/tag/OTP-26.2.1\">https://github.com/erlang/otp/releases/tag/OTP-26.2.1</a></li>\n<li><a href=\"https://go.dev/cl/550715\">https://go.dev/cl/550715</a></li>\n<li><a href=\"https://go.dev/issue/64784\">https://go.dev/issue/64784</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/CVE-2023-48795\">https://security-tracker.debian.org/tracker/CVE-2023-48795</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/source-package/libssh2\">https://security-tracker.debian.org/tracker/source-package/libssh2</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/source-package/proftpd-dfsg\">https://security-tracker.debian.org/tracker/source-package/proftpd-dfsg</a></li>\n<li><a href=\"https://ubuntu.com/security/CVE-2023-48795\">https://ubuntu.com/security/CVE-2023-48795</a></li>\n<li><a href=\"https://www.suse.com/c/suse-addresses-the-ssh-v2-protocol-terrapin-attack-aka-cve-2023-48795/\">https://www.suse.com/c/suse-addresses-the-ssh-v2-protocol-terrapin-attack-aka-cve-2023-48795/</a></li>\n<li><a href=\"https://github.com/libssh2/libssh2/pull/1291\">https://github.com/libssh2/libssh2/pull/1291</a></li>\n<li><a href=\"https://github.com/jtesta/ssh-audit/commit/8e972c5e94b460379fe0c7d20209c16df81538a5\">https://github.com/jtesta/ssh-audit/commit/8e972c5e94b460379fe0c7d20209c16df81538a5</a></li>\n<li><a href=\"https://forum.netgate.com/topic/184941/terrapin-ssh-attack\">https://forum.netgate.com/topic/184941/terrapin-ssh-attack</a></li>\n<li><a href=\"https://github.com/rapier1/hpn-ssh/releases\">https://github.com/rapier1/hpn-ssh/releases</a></li>\n<li><a href=\"https://github.com/proftpd/proftpd/issues/456\">https://github.com/proftpd/proftpd/issues/456</a></li>\n<li><a href=\"https://github.com/NixOS/nixpkgs/pull/275249\">https://github.com/NixOS/nixpkgs/pull/275249</a></li>\n<li><a href=\"https://github.com/connectbot/sshlib/commit/5c8b534f6e97db7ac0e0e579331213aa25c173ab\">https://github.com/connectbot/sshlib/commit/5c8b534f6e97db7ac0e0e579331213aa25c173ab</a></li>\n<li><a href=\"https://github.com/mscdex/ssh2/commit/97b223f8891b96d6fc054df5ab1d5a1a545da2a3\">https://github.com/mscdex/ssh2/commit/97b223f8891b96d6fc054df5ab1d5a1a545da2a3</a></li>\n<li><a href=\"https://crates.io/crates/thrussh/versions\">https://crates.io/crates/thrussh/versions</a></li>\n<li><a href=\"https://github.com/TeraTermProject/teraterm/releases/tag/v5.1\">https://github.com/TeraTermProject/teraterm/releases/tag/v5.1</a></li>\n<li><a href=\"https://github.com/connectbot/sshlib/compare/2.2.21...2.2.22\">https://github.com/connectbot/sshlib/compare/2.2.21...2.2.22</a></li>\n<li><a href=\"https://github.com/mwiede/jsch/compare/jsch-0.2.14...jsch-0.2.15\">https://github.com/mwiede/jsch/compare/jsch-0.2.14...jsch-0.2.15</a></li>\n<li><a href=\"https://github.com/proftpd/proftpd/blob/master/RELEASE_NOTES\">https://github.com/proftpd/proftpd/blob/master/RELEASE_NOTES</a></li>\n<li><a href=\"https://nest.pijul.com/pijul/thrussh/changes/D6H7OWTTMHHX6BTB3B6MNBOBX2L66CBL4LGSEUSAI2MCRCJDQFRQC\">https://nest.pijul.com/pijul/thrussh/changes/D6H7OWTTMHHX6BTB3B6MNBOBX2L66CBL4LGSEUSAI2MCRCJDQFRQC</a></li>\n<li><a href=\"https://oryx-embedded.com/download/#changelog\">https://oryx-embedded.com/download/#changelog</a></li>\n<li><a href=\"https://www.crushftp.com/crush10wiki/Wiki.jsp?page=Update\">https://www.crushftp.com/crush10wiki/Wiki.jsp?page=Update</a></li>\n<li><a href=\"https://www.netsarang.com/en/xshell-update-history/\">https://www.netsarang.com/en/xshell-update-history/</a></li>\n<li><a href=\"https://www.paramiko.org/changelog.html\">https://www.paramiko.org/changelog.html</a></li>\n<li><a href=\"https://arstechnica.com/security/2023/12/hackers-can-break-ssh-channel-integrity-using-novel-data-corruption-attack/\">https://arstechnica.com/security/2023/12/hackers-can-break-ssh-channel-integrity-using-novel-data-corruption-attack/</a></li>\n<li><a href=\"https://www.freebsd.org/security/advisories/FreeBSD-SA-23:19.openssh.asc\">https://www.freebsd.org/security/advisories/FreeBSD-SA-23:19.openssh.asc</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/12/19/5\">http://www.openwall.com/lists/oss-security/2023/12/19/5</a></li>\n<li><a href=\"http://www.openwall.com/lists/oss-security/2023/12/20/3\">http://www.openwall.com/lists/oss-security/2023/12/20/3</a></li>\n<li><a href=\"https://github.com/apache/mina-sshd/issues/445\">https://github.com/apache/mina-sshd/issues/445</a></li>\n<li><a href=\"https://github.com/hierynomus/sshj/issues/916\">https://github.com/hierynomus/sshj/issues/916</a></li>\n<li><a href=\"https://github.com/janmojzis/tinyssh/issues/81\">https://github.com/janmojzis/tinyssh/issues/81</a></li>\n<li><a href=\"https://github.com/net-ssh/net-ssh/blob/2e65064a52d73396bfc3806c9196fc8108f33cd8/CHANGES.txt#L14-L16\">https://github.com/net-ssh/net-ssh/blob/2e65064a52d73396bfc3806c9196fc8108f33cd8/CHANGES.txt#L14-L16</a></li>\n<li><a href=\"https://github.com/proftpd/proftpd/blob/0a7ea9b0ba9fcdf368374a226370d08f10397d99/RELEASE_NOTES\">https://github.com/proftpd/proftpd/blob/0a7ea9b0ba9fcdf368374a226370d08f10397d99/RELEASE_NOTES</a></li>\n<li><a href=\"https://github.com/proftpd/proftpd/blob/d21e7a2e47e9b38f709bec58e3fa711f759ad0e1/RELEASE_NOTES\">https://github.com/proftpd/proftpd/blob/d21e7a2e47e9b38f709bec58e3fa711f759ad0e1/RELEASE_NOTES</a></li>\n<li><a href=\"https://security-tracker.debian.org/tracker/source-package/trilead-ssh2\">https://security-tracker.debian.org/tracker/source-package/trilead-ssh2</a></li>\n<li><a href=\"https://www.openwall.com/lists/oss-security/2023/12/20/3\">https://www.openwall.com/lists/oss-security/2023/12/20/3</a></li>\n<li><a href=\"http://packetstormsecurity.com/files/176280/Terrapin-SSH-Connection-Weakening.html\">http://packetstormsecurity.com/files/176280/Terrapin-SSH-Connection-Weakening.html</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45x7-px36-x8w8",
            "title": "[russh] Prefix Truncation Attack against ChaCha20-Poly1305 and Encrypt-then-MAC aka Terrapin",
            "date_modified": "2023-12-21T15:54:00.000Z",
            "date_published": "2023-12-18T19:22:09.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45x7-px36-x8w8"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/71\">https://github.com/google/zerocopy/issues/71</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-rjhf-4mh8-9xjq\">https://github.com/advisories/GHSA-rjhf-4mh8-9xjq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq",
            "title": "[zerocopy] Zerocopy: Some Ref methods are unsound with some type parameters",
            "date_modified": "2023-12-18T19:18:49.000Z",
            "date_published": "2023-12-18T19:18:46.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-rjhf-4mh8-9xjq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><em>This advisory is also published as <a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">RUSTSEC-2023-0074</a>.</em></p>\n<p>The <code>Ref</code> methods <code>into_ref</code>, <code>into_mut</code>, <code>into_slice</code>, and <code>into_slice_mut</code> are unsound and may allow safe code to exhibit undefined behavior when used with <code>Ref&lt;B, T&gt;</code> where <code>B</code> is <a href=\"https://doc.rust-lang.org/core/cell/struct.Ref.html\"><code>cell::Ref</code></a> or <a href=\"https://doc.rust-lang.org/core/cell/struct.RefMut.html\"><code>cell::RefMut</code></a>. Note that these methods remain sound when used with <code>B</code> types other than <code>cell::Ref</code> or <code>cell::RefMut</code>.</p>\n<p>See <a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a> for a more in-depth analysis.</p>\n<p>The current plan is to yank the affected versions soon. See <a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a> for more detail.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/google/zerocopy/security/advisories/GHSA-3mv5-343c-w2qg</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/679\">https://github.com/google/zerocopy/issues/679</a></li>\n<li><a href=\"https://github.com/google/zerocopy/issues/716\">https://github.com/google/zerocopy/issues/716</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0074.html\">https://rustsec.org/advisories/RUSTSEC-2023-0074.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3mv5-343c-w2qg\">https://github.com/advisories/GHSA-3mv5-343c-w2qg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg",
            "title": "[zerocopy] Ref methods into_ref, into_mut, into_slice, and into_slice_mut are unsound when used with cell::Ref or cell::RefMut",
            "date_modified": "2023-12-18T17:40:52.000Z",
            "date_published": "2023-12-15T03:48:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3mv5-343c-w2qg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Default table permissions in SurrealDB were <code>FULL</code> instead of <code>NONE</code>. This would lead to tables having <code>FULL</code> permissions for <code>SELECT</code>, <code>CREATE</code>, <code>UPDATE</code> and <code>DELETE</code> unless some other permissions were specified via the <code>PERMISSIONS</code> clause.</p>\n<p>We have decided to treat this behaviour as a vulnerability due to its security implications, especially considering the lack of specific documentation and potential for confusion due to the <code>INFO FOR DB</code> statement previously not displaying default permissions. Treating it as a bug fix provides justification for a change in default behavior outside of a major release.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Any client authorized to query data in a SurrealDB instance will have full access to any tables that were defined with no explicit permissions and that are within its authorization scope (i.e. namespace or database), including creating, reading, updating and deleting data. This is specially relevant for SurrealDB instances allowing guest access with publicly exposed interfaces (e.g. HTTP REST API or WebSocket API), since a remote unauthenticated user may gain full access to any tables that were defined without any explicit permissions. Tables that were defined with explicit permissions using the <code>PERMISSIONS</code> clause are not affected.</p>\n<h3 id=\"patches\">Patches</h3>\n<ul>\n<li>Version <code>1.0.1</code> includes a patch for this specific issue. Later releases will also include the patch.</li>\n<li>Version <code>1.1.0-beta.1</code> and latest nightly releases already include the patch for this issue.</li>\n</ul>\n<p>In patched versions:</p>\n<ul>\n<li>Tables defined after the patch without explicit permissions have <code>NONE</code> permissions.</li>\n<li>Table permissions are always explicitly displayed with the <code>INFO FOR DB</code> statement.</li>\n</ul>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>In unpatched versions, this issue can be resolved by explicitly defining table permissions as shown in the following examples:</p>\n<pre><code class=\"language-sql\">-- INSECURE EXAMPLE\n-- DEFINE TABLE insecure;\n-- SECURE EXAMPLE 1\nDEFINE TABLE secure PERMISSIONS NONE;\n-- SECURE EXAMPLE 2\nDEFINE TABLE secure PERMISSIONS FOR SELECT, CREATE, UPDATE, DELETE NONE;\n-- SECURE EXAMPLE 3\nDEFINE TABLE secure PERMISSIONS FOR\n  SELECT WHERE user = $auth.id,\n  CREATE, UPDATE, DELETE NONE;\n-- SECURE EXAMPLE 4\nDEFINE TABLE secure PERMISSIONS\n  FOR select WHERE published = true OR user = $auth.id\n  FOR create, update WHERE user = $auth.id\n  FOR delete WHERE user = $auth.id OR $auth.admin = true;\n</code></pre>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/3074\">https://github.com/surrealdb/surrealdb/pull/3074</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/3083\">https://github.com/surrealdb/surrealdb/pull/3083</a></li>\n<li><a href=\"https://github.com/surrealdb/surrealdb/pull/3125\">https://github.com/surrealdb/surrealdb/pull/3125</a></li>\n<li><a href=\"https://docs.surrealdb.com/docs/surrealql/statements/define/table/\">https://docs.surrealdb.com/docs/surrealql/statements/define/table/</a></li>\n<li><a href=\"https://docs.surrealdb.com/docs/security/capabilities#guest-access\">https://docs.surrealdb.com/docs/security/capabilities#guest-access</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/surrealdb/surrealdb/security/advisories/GHSA-x5fr-7hhj-34j3\">https://github.com/surrealdb/surrealdb/security/advisories/GHSA-x5fr-7hhj-34j3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x5fr-7hhj-34j3\">https://github.com/advisories/GHSA-x5fr-7hhj-34j3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x5fr-7hhj-34j3",
            "title": "[surrealdb] Full Table Permissions by Default",
            "date_modified": "2023-12-15T03:46:37.000Z",
            "date_published": "2023-12-15T03:46:36.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x5fr-7hhj-34j3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>quiche v. 0.15.0 through 0.19.0 was discovered to be vulnerable to unbounded queuing of path validation messages, which could lead to excessive resource consumption.</p>\n<p>QUIC path validation (<a href=\"https://datatracker.ietf.org/doc/html/rfc9000#section-8.2\">RFC 9000 Section 8.2</a>) requires that the recipient of a PATH_CHALLENGE frame responds by sending a PATH_RESPONSE. An unauthenticated remote attacker can exploit the vulnerability by sending PATH_CHALLENGE frames and manipulating the connection (e.g. by restricting the peer's congestion window size) so that PATH_RESPONSE frames can only be sent at the slower rate than they are received, leading to storage of path validation data in an unbounded queue.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Quiche versions greater than 0.19.0 address this problem.</p>\n<h3 id=\"references\">References</h3>\n<p><a href=\"https://www.cve.org/CVERecord?id=CVE-2023-6193\">CVE-2023-6193</a>\n<a href=\"https://datatracker.ietf.org/doc/html/rfc9000#section-8.2\">RFC 9000 Section 8.2</a></p>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/cloudflare/quiche/security/advisories/GHSA-w3vp-jw9m-f9pm\">https://github.com/cloudflare/quiche/security/advisories/GHSA-w3vp-jw9m-f9pm</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6193\">https://nvd.nist.gov/vuln/detail/CVE-2023-6193</a></li>\n<li><a href=\"https://github.com/cloudflare/quiche/commit/ea7ecf39ae28ab24cf1785c1674dc2e8a076f9ca\">https://github.com/cloudflare/quiche/commit/ea7ecf39ae28ab24cf1785c1674dc2e8a076f9ca</a></li>\n<li><a href=\"https://datatracker.ietf.org/doc/html/rfc9000#section-8.2\">https://datatracker.ietf.org/doc/html/rfc9000#section-8.2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w3vp-jw9m-f9pm\">https://github.com/advisories/GHSA-w3vp-jw9m-f9pm</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w3vp-jw9m-f9pm",
            "title": "[quiche] Unbounded queuing of path validation messages in cloudflare-quiche",
            "date_modified": "2023-12-13T13:34:56.000Z",
            "date_published": "2023-12-13T13:34:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w3vp-jw9m-f9pm"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"summary\">Summary</h3>\n<p>As of Wasmer version v4.2.3, Wasm programs can access the filesystem outside of the sandbox.</p>\n<h3 id=\"details\">Details</h3>\n<p><a href=\"https://github.com/wasmerio/wasmer/issues/4267\">https://github.com/wasmerio/wasmer/issues/4267</a></p>\n<h3 id=\"poc\">PoC</h3>\n<p>A minimal Rust program:</p>\n<pre><code>fn main() {\n    let f = std::fs::OpenOptions::new()\n        .write(true)\n        .create_new(true)\n        .open(\"abc\")\n        .unwrap();\n}\n</code></pre>\n<p>This should be compiled with <code>cargo build --target wasm32-wasi</code>. The compiled program, when run with wasmer WITHOUT <code>--dir</code>, can still create a file in the working directory.</p>\n<h3 id=\"impact\">Impact</h3>\n<p>Service providers running untrusted Wasm code on Wasmer can unexpectedly expose the host filesystem.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/wasmerio/wasmer/security/advisories/GHSA-4mq4-7rw3-vm5j\">https://github.com/wasmerio/wasmer/security/advisories/GHSA-4mq4-7rw3-vm5j</a></li>\n<li><a href=\"https://github.com/wasmerio/wasmer/issues/4267\">https://github.com/wasmerio/wasmer/issues/4267</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4mq4-7rw3-vm5j\">https://github.com/advisories/GHSA-4mq4-7rw3-vm5j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4mq4-7rw3-vm5j",
            "title": "[wasmer-cli] Filesystem sandbox not enforced",
            "date_modified": "2023-12-13T13:32:39.000Z",
            "date_published": "2023-12-13T13:32:38.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4mq4-7rw3-vm5j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The Candid library causes a Denial of Service while parsing a specially crafted payload with <code>empty</code> data type. For example, if the payload is <code>record { * ; empty }</code> and  the canister interface expects <code>record { * }</code> then the rust candid decoder treats <code>empty</code> as an extra field required by the type.  The problem with type <code>empty</code> is that the candid rust library wrongly categorizes <code>empty</code> as a recoverable error when skipping the field and thus causing an infinite decoding loop. </p>\n<p>Canisters using affected versions of candid are exposed to denial of service by causing the decoding to run indefinitely until the canister traps due to reaching maximum instruction limit per execution round. Repeated exposure to the payload will result in degraded performance of the canister.</p>\n<p>For asset canister users, <code>dfx</code> versions <code>&gt;= 0.14.4</code> to <code>&lt;= 0.15.2-beta.0</code> ships asset canister with an affected version of candid.</p>\n<h4 id=\"unaffected\">Unaffected</h4>\n<ul>\n<li>Rust canisters using candid <code>&lt; 0.9.0</code> or <code>&gt;= 0.9.10</code> </li>\n<li>Rust canister interfaces of type other than <code>record { * }</code></li>\n<li>Motoko based canisters</li>\n<li>dfx (for asset canister) <code>&lt;= 0.14.3</code> or <code>&gt;= 0.15.2</code></li>\n</ul>\n<h3 id=\"patches\">Patches</h3>\n<p>The issue has been patched in <code>0.9.10</code>. All rust based canisters on candid versions <code>&gt;= 0.9.0</code> must upgrade their candid versions to <code>&gt;= 0.9.10</code> and deploy their canisters to mainnet as soon as possible. </p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>There is no workaround for canisters using the affected versions of candid other than upgrading to patched version.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dfinity/candid/pull/478\">dfinity/candid/pull/478</a></li>\n<li><a href=\"https://internetcomputer.org/docs/current/references/candid-ref\">Candid Library Reference</a></li>\n<li><a href=\"https://github.com/dfinity/candid/blob/master/spec/Candid.md\">Candid Specification</a></li>\n<li><a href=\"https://internetcomputer.org/docs/current/references/ic-interface-spec\">Internet Computer Specification</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j\">https://github.com/dfinity/candid/security/advisories/GHSA-7787-p7x6-fq3j</a></li>\n<li><a href=\"https://github.com/dfinity/candid/pull/478\">https://github.com/dfinity/candid/pull/478</a></li>\n<li><a href=\"https://github.com/dfinity/candid/commit/b233dbc2d2bcc79c9fc574dd5968269df680b073\">https://github.com/dfinity/candid/commit/b233dbc2d2bcc79c9fc574dd5968269df680b073</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-6245\">https://nvd.nist.gov/vuln/detail/CVE-2023-6245</a></li>\n<li><a href=\"https://github.com/dfinity/candid/blob/master/spec/Candid.md\">https://github.com/dfinity/candid/blob/master/spec/Candid.md</a></li>\n<li><a href=\"https://internetcomputer.org/docs/current/references/candid-ref\">https://internetcomputer.org/docs/current/references/candid-ref</a></li>\n<li><a href=\"https://internetcomputer.org/docs/current/references/ic-interface-spec\">https://internetcomputer.org/docs/current/references/ic-interface-spec</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0073.html\">https://rustsec.org/advisories/RUSTSEC-2023-0073.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-7787-p7x6-fq3j\">https://github.com/advisories/GHSA-7787-p7x6-fq3j</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-7787-p7x6-fq3j",
            "title": "[candid] Candid infinite decoding loop through specially crafted payload",
            "date_modified": "2023-12-13T17:34:16.000Z",
            "date_published": "2023-12-08T15:23:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-7787-p7x6-fq3j"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The <a href=\"https://people.redhat.com/~hkario/marvin/\">Marvin Attack</a> is a timing sidechannel vulnerability which allows performing RSA decryption and signing operations as an attacker with the ability to observe only the time of the decryption operation performed withthe private key.</p>\n<p>A recent survey of RSA implementations found that the Rust <code>rsa</code> crate is one of many implementations vulnerable to this attack.</p>\n<p>No fixed version is available at this time.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr\">https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr</a></li>\n<li><a href=\"https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643\">https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0071.html\">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4grx-2x9w-596c\">https://github.com/advisories/GHSA-4grx-2x9w-596c</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4grx-2x9w-596c",
            "title": "[rsa] Marvin Attack: potential key recovery through timing sidechannels",
            "date_modified": "2023-12-14T22:50:58.000Z",
            "date_published": "2023-11-28T23:28:25.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4grx-2x9w-596c"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Due to a non-constant-time implementation, information about the private key is leaked through timing information which is observable over the network. An attacker may be able to use that information to recover the key.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>No patch is yet available, however work is underway to migrate to a fully constant-time implementation.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>The only currently available workaround is to avoid using the <code>rsa</code> crate in settings where attackers are able to observe timing information, e.g. local use on a non-compromised computer is fine.</p>\n<h3 id=\"references\">References</h3>\n<p>This vulnerability was discovered as part of the \"Marvin Attack\", which revealed several implementations of RSA including OpenSSL had not properly mitigated timing sidechannel attacks.</p>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0071.html\">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>\n<li><a href=\"https://people.redhat.com/~hkario/marvin/\">https://people.redhat.com/~hkario/marvin/</a></li>\n<li><a href=\"https://github.com/RustCrypto/RSA/issues/19\">https://github.com/RustCrypto/RSA/issues/19</a></li>\n</ul>\n<h3 id=\"references-1\">References</h3>\n<ul>\n<li><a href=\"https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr\">https://github.com/RustCrypto/RSA/security/advisories/GHSA-c38w-74pg-36hr</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-49092\">https://nvd.nist.gov/vuln/detail/CVE-2023-49092</a></li>\n<li><a href=\"https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643\">https://github.com/RustCrypto/RSA/issues/19#issuecomment-1822995643</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0071.html\">https://rustsec.org/advisories/RUSTSEC-2023-0071.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c38w-74pg-36hr\">https://github.com/advisories/GHSA-c38w-74pg-36hr</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c38w-74pg-36hr",
            "title": "[rsa] Marvin Attack: potential key recovery through timing sidechannels",
            "date_modified": "2023-12-15T22:20:21.000Z",
            "date_published": "2023-11-28T23:28:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c38w-74pg-36hr"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}