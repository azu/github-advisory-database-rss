{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"workarounds\">Workarounds</h3>\n<ul>\n<li>forbid request genesis through network request</li>\n<li>forbid requesting duplicate data  through network request</li>\n</ul>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nervosnetwork/ckb/security/advisories/GHSA-p2gm-ffr3-w2xw\">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-p2gm-ffr3-w2xw</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p2gm-ffr3-w2xw\">https://github.com/advisories/GHSA-p2gm-ffr3-w2xw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p2gm-ffr3-w2xw",
            "title": "[ckb] Nervos CKB vulnerable to low-resource flood DDoS attacks through network message",
            "date_modified": "2023-02-08T18:17:09.000Z",
            "date_published": "2023-02-08T18:17:06.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p2gm-ffr3-w2xw"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>The calculation of program load cycles may be missed when executing in resume mode. Since the script execution order is now determined, this issue does not cause network splitting.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/nervosnetwork/ckb/security/advisories/GHSA-fjj4-2q73-jvgc\">https://github.com/nervosnetwork/ckb/security/advisories/GHSA-fjj4-2q73-jvgc</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-fjj4-2q73-jvgc\">https://github.com/advisories/GHSA-fjj4-2q73-jvgc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-fjj4-2q73-jvgc",
            "title": "[ckb] Nervos CKB calculation of program load cycles may be missed when executing in resume mode",
            "date_modified": "2023-02-08T18:15:28.000Z",
            "date_published": "2023-02-08T18:15:28.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-fjj4-2q73-jvgc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>tokio::io::ReadHalf&lt;T&gt;::unsplit</code> can violate the <code>Pin</code> contract</p>\n<p>The soundness issue is described in the <a href=\"https://github.com/tokio-rs/tokio/issues/5372\">tokio/issues#5372</a></p>\n<p>Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.</p>\n<p>The <code>tokio</code> feature <code>io-util</code> is also required to be enabled to trigger this\nsoundness issue.</p>\n<p>Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.</p>\n<p>Tokio before 0.2.0 used <code>futures</code> 0.1 that did not have <code>Pin</code>, so it is not\naffected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/5372\">https://github.com/tokio-rs/tokio/issues/5372</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0005.html\">https://rustsec.org/advisories/RUSTSEC-2023-0005.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4q83-7cq4-p6wg\">https://github.com/advisories/GHSA-4q83-7cq4-p6wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg",
            "title": "[tokio] `tokio::io::ReadHalf<T>::unsplit` is Unsound",
            "date_modified": "2023-02-04T00:30:37.000Z",
            "date_published": "2023-02-04T00:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>tokio::io::ReadHalf&lt;T&gt;::unsplit</code> can violate the <code>Pin</code> contract</p>\n<p>The soundness issue is described in the <a href=\"https://github.com/tokio-rs/tokio/issues/5372\">tokio/issues#5372</a></p>\n<p>Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.</p>\n<p>The <code>tokio</code> feature <code>io-util</code> is also required to be enabled to trigger this\nsoundness issue.</p>\n<p>Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.</p>\n<p>Tokio before 0.2.0 used <code>futures</code> 0.1 that did not have <code>Pin</code>, so it is not\naffected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/5372\">https://github.com/tokio-rs/tokio/issues/5372</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0005.html\">https://rustsec.org/advisories/RUSTSEC-2023-0005.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4q83-7cq4-p6wg\">https://github.com/advisories/GHSA-4q83-7cq4-p6wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg",
            "title": "[tokio] `tokio::io::ReadHalf<T>::unsplit` is Unsound",
            "date_modified": "2023-02-04T00:30:37.000Z",
            "date_published": "2023-02-04T00:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p><code>tokio::io::ReadHalf&lt;T&gt;::unsplit</code> can violate the <code>Pin</code> contract</p>\n<p>The soundness issue is described in the <a href=\"https://github.com/tokio-rs/tokio/issues/5372\">tokio/issues#5372</a></p>\n<p>Specific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.</p>\n<p>The <code>tokio</code> feature <code>io-util</code> is also required to be enabled to trigger this\nsoundness issue.</p>\n<p>Thanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.</p>\n<p>Tokio before 0.2.0 used <code>futures</code> 0.1 that did not have <code>Pin</code>, so it is not\naffected by this issue.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/5372\">https://github.com/tokio-rs/tokio/issues/5372</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0005.html\">https://rustsec.org/advisories/RUSTSEC-2023-0005.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4q83-7cq4-p6wg\">https://github.com/advisories/GHSA-4q83-7cq4-p6wg</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg",
            "title": "[tokio] `tokio::io::ReadHalf<T>::unsplit` is Unsound",
            "date_modified": "2023-02-04T00:30:37.000Z",
            "date_published": "2023-02-04T00:30:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4q83-7cq4-p6wg"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Path resolution in <code>warp::filters::fs::dir</code> didn't correctly validate Windows paths\nmeaning paths like <code>/foo/bar/c:/windows/web/screen/img101.png</code> would be allowed\nand respond with the contents of <code>c:/windows/web/screen/img101.png</code>. Thus users\ncould potentially read files anywhere on the filesystem.</p>\n<p>This only impacts Windows. Linux and other unix likes are not impacted by this.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/seanmonstar/warp/issues/937\">https://github.com/seanmonstar/warp/issues/937</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0082.html\">https://rustsec.org/advisories/RUSTSEC-2022-0082.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-8v4j-7jgf-5rg9\">https://github.com/advisories/GHSA-8v4j-7jgf-5rg9</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-8v4j-7jgf-5rg9",
            "title": "[warp] Warp vulnerable to Path Traversal via Improper validation of Windows paths",
            "date_modified": "2023-01-31T23:33:47.000Z",
            "date_published": "2023-01-31T23:33:47.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-8v4j-7jgf-5rg9"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the disrustor crate through 2020-12-17 for Rust. RingBuffer doe not properly limit the number of mutable references.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36470\">https://nvd.nist.gov/vuln/detail/CVE-2020-36470</a></li>\n<li><a href=\"https://github.com/sklose/disrustor/issues/1\">https://github.com/sklose/disrustor/issues/1</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0150.html\">https://rustsec.org/advisories/RUSTSEC-2020-0150.html</a></li>\n<li><a href=\"https://github.com/sklose/disrustor/commit/0be7aed40adbac51a50a3b95c815349a40d79ca6\">https://github.com/sklose/disrustor/commit/0be7aed40adbac51a50a3b95c815349a40d79ca6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-w9r2-qrpm-4rmj\">https://github.com/advisories/GHSA-w9r2-qrpm-4rmj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-w9r2-qrpm-4rmj",
            "title": "[disrustor] Data race in disrustor",
            "date_modified": "2023-01-24T19:02:15.000Z",
            "date_published": "2021-08-25T20:56:59.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-w9r2-qrpm-4rmj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>Affected versions of this crate unconditionally implement <code>Sync</code> for <code>SyncRef&lt;T&gt;</code>.\nThis definition allows data races if <code>&amp;T</code> is accessible through <code>&amp;SyncRef</code>.</p>\n<p><code>SyncRef&lt;T&gt;</code> derives <code>Clone</code> and <code>Debug</code>, and the default implementations of those traits access <code>&amp;T</code> by invoking <code>T::clone()</code> &amp; <code>T::fmt()</code>. It is possible to create data races &amp; undefined behavior by concurrently invoking <code>SyncRef&lt;T&gt;::clone()</code> or <code>SyncRef&lt;T&gt;::fmt()</code> from multiple threads with <code>T: !Sync</code>.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/purpleposeidon/v9/issues/1\">https://github.com/purpleposeidon/v9/issues/1</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0127.html\">https://rustsec.org/advisories/RUSTSEC-2020-0127.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-pfjq-935c-4895\">https://github.com/advisories/GHSA-pfjq-935c-4895</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-pfjq-935c-4895",
            "title": "[v9] Data races in v9",
            "date_modified": "2023-01-23T18:40:24.000Z",
            "date_published": "2021-08-25T21:00:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-pfjq-935c-4895"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href=\"https://libgit2.org/\">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>\n<p>The libgit2 team assigned <a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>\n<ul>\n<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>\n<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>\n</ul>\n<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>\n<p><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">You can learn more about this vulnerability in libgit2's advisory</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22742\">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1\">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0003.html\">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3",
            "title": "[git2] git2-rs fails to verify SSH keys by default",
            "date_modified": "2023-01-23T18:57:27.000Z",
            "date_published": "2023-01-20T23:36:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href=\"https://libgit2.org/\">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>\n<p>The libgit2 team assigned <a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>\n<ul>\n<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>\n<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>\n</ul>\n<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>\n<p><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">You can learn more about this vulnerability in libgit2's advisory</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22742\">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1\">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0003.html\">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3",
            "title": "[libgit2-sys] git2-rs fails to verify SSH keys by default",
            "date_modified": "2023-01-23T18:57:27.000Z",
            "date_published": "2023-01-20T23:36:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The git2 and libgit2-sys crates are Rust wrappers around the <a href=\"https://libgit2.org/\">libgit2</a> C library. It was discovered that libgit2 1.5.0 and below did not verify SSH host keys when establishing an SSH connection, exposing users of the library to Man-In-the-Middle attacks.</p>\n<p>The libgit2 team assigned <a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">CVE-2023-22742</a> to this vulnerability. The following versions of the libgit2-sys Rust crate have been released:</p>\n<ul>\n<li>libgit2-sys 0.14.2, updating the underlying libgit2 C library to version 1.5.1.</li>\n<li>libgit2-sys 0.13.5, updating the underlying libgit2 C library to version 1.4.5.</li>\n</ul>\n<p>A new git2 crate version has also been released, 0.16.1. This version only bumps its libgit2-sys dependency to ensure no vulnerable libgit2-sys versions are used, but contains no code changes: if you update the libgit2-sys version there is no need to also update the git2 crate version.</p>\n<p><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">You can learn more about this vulnerability in libgit2's advisory</a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq\">https://github.com/libgit2/libgit2/security/advisories/GHSA-8643-3wh5-rmjq</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/rust-lang/git2-rs/security/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22742\">https://nvd.nist.gov/vuln/detail/CVE-2023-22742</a></li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1\">https://github.com/rust-lang/git2-rs/commit/87934f87d36753ed702792ec063be7246444a8e1</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0003.html\">https://rustsec.org/advisories/RUSTSEC-2023-0003.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m4ch-rfv5-x5g3\">https://github.com/advisories/GHSA-m4ch-rfv5-x5g3</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3",
            "title": "[libgit2-sys] git2-rs fails to verify SSH keys by default",
            "date_modified": "2023-01-23T18:57:27.000Z",
            "date_published": "2023-01-20T23:36:41.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m4ch-rfv5-x5g3"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The crate has several unsafe sections that don't perform proper pointer validation.</p>\n<p>An example can be found in the following function:</p>\n<pre><code>fn section_header_raw(&amp;self) -&gt; &amp;[ET::SectionHeader] {\n    let sh_off = self.elf_header().section_header_offset() as usize;\n    let sh_num = self.elf_header().section_header_entry_num() as usize;\n    unsafe {\n        let sh_ptr = self.content().as_ptr().add(sh_off);\n        from_raw_parts(sh_ptr as *const ET::SectionHeader, sh_num)\n    }\n}\n</code></pre>\n<p>While this will work perfectly fine <em>if</em> the ELF header is valid, malicious or malformed input can contain a section header offset of an arbitrary size, meaning that the resultant pointer in the unsafe block can point to an artibrary address in the address space of the process.</p>\n<p>This can result in unpredictable behaviour, and in our fuzz testing, we discovered that it's trivial to cause SIGABRT (signal 6), or SEGV (signal 11).</p>\n<p>The function should either be marked as unsafe, with a note that the caller is responsible for providing only valid inputs, or it should ideally do the due diligence to ensure that the offset doesn't exceed the bounds of the header (and add additional checks as necessary).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/vincenthouyi/elf_rs/issues/11\">https://github.com/vincenthouyi/elf_rs/issues/11</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0079.html\">https://rustsec.org/advisories/RUSTSEC-2022-0079.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-g6pw-999w-j75m\">https://github.com/advisories/GHSA-g6pw-999w-j75m</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-g6pw-999w-j75m",
            "title": "[elf_rs] ELF header parsing library doesn't check for valid offset",
            "date_modified": "2023-01-20T22:41:03.000Z",
            "date_published": "2023-01-20T22:41:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-g6pw-999w-j75m"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>In affected versions of this crate, the lifetime of the iterator produced by <code>Vec::into_iter()</code> is not constrained to the lifetime of the <code>Bump</code> that allocated the vector's memory. Using the iterator after the <code>Bump</code> is dropped causes use-after-free accesses.</p>\n<p>The following example demonstrates memory corruption arising from a misuse of this unsoundness.</p>\n<pre><code class=\"language-rust\">use bumpalo::{collections::Vec, Bump};\n\nfn main() {\n    let bump = Bump::new();\n    let mut vec = Vec::new_in(&amp;bump);\n    vec.extend([0x01u8; 32]);\n    let into_iter = vec.into_iter();\n    drop(bump);\n\n    for _ in 0..100 {\n        let reuse_bump = Bump::new();\n        let _reuse_alloc = reuse_bump.alloc([0x41u8; 10]);\n    }\n\n    for x in into_iter {\n        print!(\"0x{:02x} \", x);\n    }\n    println!();\n}\n</code></pre>\n<p>The issue was corrected in version 3.11.1 by adding a lifetime to the <code>IntoIter</code> type, and updating the signature of <code>Vec::into_iter()</code> to constrain this lifetime.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111\">https://github.com/fitzgen/bumpalo/blob/main/CHANGELOG.md#3111</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2022-0078.html\">https://rustsec.org/advisories/RUSTSEC-2022-0078.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-f85w-wvc7-crwc\">https://github.com/advisories/GHSA-f85w-wvc7-crwc</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-f85w-wvc7-crwc",
            "title": "[bumpalo] bumpalo has use-after-free due to a lifetime error in `Vec::into_iter()`",
            "date_modified": "2023-01-20T21:54:22.000Z",
            "date_published": "2023-01-20T21:54:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-f85w-wvc7-crwc"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Multi-threaded programs were able to spoof interactive permission prompt by rewriting the prompt to suggest that program is waiting on user confirmation to unrelated action. </p>\n<p>A malicious program could clear the terminal screen after permission prompt was shown and write a generic message like so:</p>\n<pre><code>// Expected prompt\n⚠️  ┌ Deno requests read access to \"./log.txt\".\n   ├ Requested by `Deno.open()` API\n   ├ Run again with --allow-read to bypass this prompt.\n   └ Allow? [y/n] (y = yes, allow; n = no, deny) &gt;\n\n// Prompt that users would see\nDo you want to continue?\n</code></pre>\n<p>This situation impacts users who use Web Worker API and relied on interactive permission prompt. The reproduction is very timing sensitive and can’t be reliably reproduced on every try.</p>\n<p>This problem can not be exploited on systems that do not attach an interactive prompt (for example headless servers). </p>\n<h3 id=\"patches\">Patches</h3>\n<p>The problem has been fixed in Deno v1.29.3; it is recommended all users update to this version.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>Run with <code>--no-prompt</code> flag to disable interactive permission prompts.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/denoland/deno/security/advisories/GHSA-mc52-jpm2-cqh6\">https://github.com/denoland/deno/security/advisories/GHSA-mc52-jpm2-cqh6</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22499\">https://nvd.nist.gov/vuln/detail/CVE-2023-22499</a></li>\n<li><a href=\"https://github.com/denoland/deno/pull/17392\">https://github.com/denoland/deno/pull/17392</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc52-jpm2-cqh6\">https://github.com/advisories/GHSA-mc52-jpm2-cqh6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc52-jpm2-cqh6",
            "title": "[deno] Deno is vulnerable to race condition via interactive permission prompt spoofing",
            "date_modified": "2023-01-25T18:41:54.000Z",
            "date_published": "2023-01-20T16:56:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc52-jpm2-cqh6"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>v9 is a slim data engine for Data Oriented Design. An issue was discovered in the v9 crate through 2020-12-18 for Rust. There is an unconditional implementation of Sync for SyncRef.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36447\">https://nvd.nist.gov/vuln/detail/CVE-2020-36447</a></li>\n<li><a href=\"https://github.com/purpleposeidon/v9/issues/1\">https://github.com/purpleposeidon/v9/issues/1</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/v9/RUSTSEC-2020-0127.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/v9/RUSTSEC-2020-0127.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0127.html\">https://rustsec.org/advisories/RUSTSEC-2020-0127.html</a></li>\n<li><a href=\"https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7\">https://github.com/purpleposeidon/v9/commit/18847c50e5d36561cc91c996c3539ddb1eacf6c7</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3837-87vh-xq3w\">https://github.com/advisories/GHSA-3837-87vh-xq3w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3837-87vh-xq3w",
            "title": "[v9] Data race in v9",
            "date_modified": "2023-02-03T05:03:42.000Z",
            "date_published": "2021-08-25T20:57:07.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3837-87vh-xq3w"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue in the IpFile argument of rust-lang webbrowser-rs v0.8.2 allows attackers to access arbitrary files via supplying a crafted URL.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-45299\">https://nvd.nist.gov/vuln/detail/CVE-2022-45299</a></li>\n<li><a href=\"https://github.com/offalltn/CVE-2022-45299\">https://github.com/offalltn/CVE-2022-45299</a></li>\n<li><a href=\"https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3\">https://github.com/amodm/webbrowser-rs/releases/tag/v0.8.3</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-m589-mv4q-p7rj\">https://github.com/advisories/GHSA-m589-mv4q-p7rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-m589-mv4q-p7rj",
            "title": "[webbrowser] webbrowser-rs allows attackers to access arbitrary files via supplying a crafted URL",
            "date_modified": "2023-01-23T18:49:44.000Z",
            "date_published": "2023-01-13T21:30:26.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-m589-mv4q-p7rj"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the slock crate through 2020-11-17 for Rust. Slock unconditionally implements Send and Sync.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36455\">https://nvd.nist.gov/vuln/detail/CVE-2020-36455</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/issues/2\">https://github.com/BrokenLamp/slock-rs/issues/2</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/slock/RUSTSEC-2020-0135.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0135.html\">https://rustsec.org/advisories/RUSTSEC-2020-0135.html</a></li>\n<li><a href=\"https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6\">https://github.com/BrokenLamp/slock-rs/commit/719df35f55b6cab4ca2a7f840347a06ecbd8aac6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mc36-5m36-hjh5\">https://github.com/advisories/GHSA-mc36-5m36-hjh5</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5",
            "title": "[slock] Data races in slock",
            "date_modified": "2023-02-02T05:03:24.000Z",
            "date_published": "2021-08-25T20:58:00.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mc36-5m36-hjh5"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the csv-sniffer crate through 2021-01-05 for Rust. preamble_skipcount may read from uninitialized memory locations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45686\">https://nvd.nist.gov/vuln/detail/CVE-2021-45686</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/csv-sniffer/RUSTSEC-2021-0088.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0088.html\">https://rustsec.org/advisories/RUSTSEC-2021-0088.html</a></li>\n<li><a href=\"https://github.com/jblondin/csv-sniffer/pull/2\">https://github.com/jblondin/csv-sniffer/pull/2</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-9783-42pm-x5jq\">https://github.com/advisories/GHSA-9783-42pm-x5jq</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-9783-42pm-x5jq",
            "title": "[csv-sniffer] Use of Uninitialized Resource in csv-sniffer.",
            "date_modified": "2023-02-03T05:00:52.000Z",
            "date_published": "2022-01-06T22:13:58.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-9783-42pm-x5jq"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>An issue was discovered in the flumedb crate through 2021-01-07 for Rust. read_entry may read from uninitialized memory locations.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-45684\">https://nvd.nist.gov/vuln/detail/CVE-2021-45684</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/flumedb/RUSTSEC-2021-0086.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0086.html\">https://rustsec.org/advisories/RUSTSEC-2021-0086.html</a></li>\n<li><a href=\"https://github.com/sunrise-choir/flumedb-rs/pull/12\">https://github.com/sunrise-choir/flumedb-rs/pull/12</a></li>\n<li><a href=\"https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6\">https://github.com/sunrise-choir/flumedb-rs/commit/14b7440271c9d2316fab52c745e21087559364f6</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-p46c-w9m3-7qr2\">https://github.com/advisories/GHSA-p46c-w9m3-7qr2</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2",
            "title": "[flumedb] Use of Uninitialized Resource in flumedb.",
            "date_modified": "2023-02-03T05:00:50.000Z",
            "date_published": "2022-01-06T22:18:35.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-p46c-w9m3-7qr2"
            },
            "tags": [
                "severity"
            ]
        },
        {
            "content_html": "<p>The bzip2 crate before 0.4.4 for Rust allow attackers to cause a denial of service via a large file that triggers an integer overflow in <code>mem.rs</code>. NOTE: this is unrelated to the <a href=\"https://crates.io/crates/bzip2-rs\">https://crates.io/crates/bzip2-rs</a> product.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2023-22895\">https://nvd.nist.gov/vuln/detail/CVE-2023-22895</a></li>\n<li><a href=\"https://github.com/alexcrichton/bzip2-rs/pull/86\">https://github.com/alexcrichton/bzip2-rs/pull/86</a></li>\n<li><a href=\"https://crates.io/crates/bzip2/versions\">https://crates.io/crates/bzip2/versions</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2023-0004.html\">https://rustsec.org/advisories/RUSTSEC-2023-0004.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-96jv-r488-c2rj\">https://github.com/advisories/GHSA-96jv-r488-c2rj</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-96jv-r488-c2rj",
            "title": "[bzip2] bzip2 allows attackers to cause a denial of service via a large file that triggers an integer overflow",
            "date_modified": "2023-02-02T17:35:55.000Z",
            "date_published": "2023-01-10T03:30:29.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-96jv-r488-c2rj"
            },
            "tags": [
                "severity"
            ]
        }
    ]
}