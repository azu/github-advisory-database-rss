{
    "version": "https://jsonfeed.org/version/1",
    "title": "Security Advisory for Rust crates",
    "home_page_url": "https://github.com/advisories?query=type%3Areviewed+ecosystem%3Arust",
    "feed_url": "https://azu.github.io/github-advisory-database-rss/rust.json",
    "description": "Security Advisory for Rust crates on GitHub",
    "items": [
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Affected versions of lettre allowed argument injection to the sendmail command. It was possible, using forged to addresses, to pass arbitrary arguments to the sendmail executable.</p>\n<p>Depending on the implementation (original sendmail, postfix, exim, etc.) it could be possible in some cases to write email data into abritrary files (using sendmail's logging features).</p>\n<p><em>NOTE</em>: This vulnerability only affects the sendmail transport. Others, including smtp, are not affected.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The flaw is corrected by modifying the executed command to stop parsing arguments before passing the destination addresses.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">RUSTSEC-2020-0069</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">CVE-2020-28247</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">https://nvd.nist.gov/vuln/detail/CVE-2020-28247</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/pull/478/files\">https://github.com/RustSec/advisory-db/pull/478/files</a></li>\n<li><a href=\"https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b\">https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">https://rustsec.org/advisories/RUSTSEC-2020-0069.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx",
            "title": "[lettre] Argument injection in lettre",
            "date_modified": "2022-06-14T22:36:50.000Z",
            "date_published": "2021-08-25T20:56:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Affected versions of lettre allowed argument injection to the sendmail command. It was possible, using forged to addresses, to pass arbitrary arguments to the sendmail executable.</p>\n<p>Depending on the implementation (original sendmail, postfix, exim, etc.) it could be possible in some cases to write email data into abritrary files (using sendmail's logging features).</p>\n<p><em>NOTE</em>: This vulnerability only affects the sendmail transport. Others, including smtp, are not affected.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The flaw is corrected by modifying the executed command to stop parsing arguments before passing the destination addresses.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">RUSTSEC-2020-0069</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">CVE-2020-28247</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">https://nvd.nist.gov/vuln/detail/CVE-2020-28247</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/pull/478/files\">https://github.com/RustSec/advisory-db/pull/478/files</a></li>\n<li><a href=\"https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b\">https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">https://rustsec.org/advisories/RUSTSEC-2020-0069.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx",
            "title": "[lettre] Argument injection in lettre",
            "date_modified": "2022-06-14T22:36:50.000Z",
            "date_published": "2021-08-25T20:56:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>Affected versions of lettre allowed argument injection to the sendmail command. It was possible, using forged to addresses, to pass arbitrary arguments to the sendmail executable.</p>\n<p>Depending on the implementation (original sendmail, postfix, exim, etc.) it could be possible in some cases to write email data into abritrary files (using sendmail's logging features).</p>\n<p><em>NOTE</em>: This vulnerability only affects the sendmail transport. Others, including smtp, are not affected.</p>\n<h3 id=\"fix\">Fix</h3>\n<p>The flaw is corrected by modifying the executed command to stop parsing arguments before passing the destination addresses.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">RUSTSEC-2020-0069</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">CVE-2020-28247</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/lettre/lettre/security/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-28247\">https://nvd.nist.gov/vuln/detail/CVE-2020-28247</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/pull/478/files\">https://github.com/RustSec/advisory-db/pull/478/files</a></li>\n<li><a href=\"https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b\">https://github.com/lettre/lettre/pull/508/commits/bbe7cc5381c5380b54fb8bbb4f77a3725917ff0b</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0069.html\">https://rustsec.org/advisories/RUSTSEC-2020-0069.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-vc2p-r46x-m3vx\">https://github.com/advisories/GHSA-vc2p-r46x-m3vx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx",
            "title": "[lettre] Argument injection in lettre",
            "date_modified": "2022-06-14T22:36:50.000Z",
            "date_published": "2021-08-25T20:56:48.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-vc2p-r46x-m3vx"
            }
        },
        {
            "content_html": "<h3 id=\"overview\">Overview</h3>\n<p>Version 1.2.1 of the <code>libpulse-binding</code> Rust crate, released on the 15th of June 2018, fixed a pair of use-after-free issues with the objects returned by the <code>get_format_info</code> and <code>get_context</code> methods of <code>Stream</code> objects. These objects were mistakenly being constructed without setting an important flag to prevent destruction of the underlying C objects they reference upon their own destruction.</p>\n<p>This advisory is being written retrospectively, having previously only been noted in the changelog. No CVE assignment was sought.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>Users are required to update to version 1.2.1 or newer.</p>\n<p>Versions older than 1.2.1 have been yanked from crates.io. This was believed to have already been done at the time of the 1.2.1 release, but upon double checking now they were found to still be available, so has been done now (22nd October 2020).</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-ghpq-vjxw-ch5w\">https://github.com/jnqnfe/pulse-binding-rust/security/advisories/GHSA-ghpq-vjxw-ch5w</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2018-0021.html\">https://rustsec.org/advisories/RUSTSEC-2018-0021.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-ghpq-vjxw-ch5w\">https://github.com/advisories/GHSA-ghpq-vjxw-ch5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-ghpq-vjxw-ch5w",
            "title": "[libpulse-binding] Use after free in libpulse-binding",
            "date_modified": "2022-06-14T22:31:21.000Z",
            "date_published": "2021-08-25T20:56:52.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-ghpq-vjxw-ch5w"
            }
        },
        {
            "content_html": "<p>The socket2 crate has assumed <code>std::net::SocketAddrV4</code> and <code>std::net::SocketAddrV6</code> have the same memory layout as the system C representation <code>sockaddr</code>. It has simply casted the pointers to convert the socket addresses to the system representation. The standard library does not say anything about the memory layout, and this will cause invalid memory access if the standard library changes the implementation. No warnings or errors will be emitted once the change happens.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-35920\">https://nvd.nist.gov/vuln/detail/CVE-2020-35920</a></li>\n<li><a href=\"https://github.com/rust-lang/socket2-rs/issues/119\">https://github.com/rust-lang/socket2-rs/issues/119</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0079.html\">https://rustsec.org/advisories/RUSTSEC-2020-0079.html</a></li>\n<li><a href=\"https://github.com/deprecrated/net2-rs/issues/105\">https://github.com/deprecrated/net2-rs/issues/105</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0078.html\">https://rustsec.org/advisories/RUSTSEC-2020-0078.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-458v-4hrf-g3m4\">https://github.com/advisories/GHSA-458v-4hrf-g3m4</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-458v-4hrf-g3m4",
            "title": "[net2] socket2 invalidly assumes the memory layout of std::net::SocketAddr",
            "date_modified": "2022-06-14T21:18:50.000Z",
            "date_published": "2021-08-25T20:50:37.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-458v-4hrf-g3m4"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the reffers crate through 2020-12-01 for Rust. ARefss can contain a !Send,!Sync object, leading to a data race and memory corruption.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36203\">https://nvd.nist.gov/vuln/detail/CVE-2020-36203</a></li>\n<li><a href=\"https://github.com/diwic/reffers-rs/issues/7\">https://github.com/diwic/reffers-rs/issues/7</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0094.html\">https://rustsec.org/advisories/RUSTSEC-2020-0094.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-39xg-8p43-h76x\">https://github.com/advisories/GHSA-39xg-8p43-h76x</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-39xg-8p43-h76x",
            "title": "[reffers] Data races in reffers",
            "date_modified": "2022-06-14T21:09:52.000Z",
            "date_published": "2021-08-25T20:51:40.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-39xg-8p43-h76x"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the prost-types crate before 0.8.0 for Rust. An overflow can occur during conversion from Timestamp to SystemTime.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38192\">https://nvd.nist.gov/vuln/detail/CVE-2021-38192</a></li>\n<li><a href=\"https://github.com/tokio-rs/prost/issues/438\">https://github.com/tokio-rs/prost/issues/438</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0073.html\">https://rustsec.org/advisories/RUSTSEC-2021-0073.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-x4qm-mcjq-v2gf\">https://github.com/advisories/GHSA-x4qm-mcjq-v2gf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-x4qm-mcjq-v2gf",
            "title": "[prost-types] Overflow in prost-types",
            "date_modified": "2022-06-14T21:04:07.000Z",
            "date_published": "2021-08-25T20:55:53.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-x4qm-mcjq-v2gf"
            }
        },
        {
            "content_html": "<p>Affected versions of the <code>pnet</code> crate were optimized out by compiler, which caused dereference of uninitialized file descriptor which caused segfault.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/libpnet/libpnet/issues/449\">https://github.com/libpnet/libpnet/issues/449</a></li>\n<li><a href=\"https://github.com/libpnet/libpnet/pull/455\">https://github.com/libpnet/libpnet/pull/455</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2019-0037.html\">https://rustsec.org/advisories/RUSTSEC-2019-0037.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-r6ff-2q3c-v3pv\">https://github.com/advisories/GHSA-r6ff-2q3c-v3pv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-r6ff-2q3c-v3pv",
            "title": "[pnet] Compiler optimisation leads to SEGFAULT",
            "date_modified": "2022-06-14T21:03:31.000Z",
            "date_published": "2021-08-25T21:00:01.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-r6ff-2q3c-v3pv"
            }
        },
        {
            "content_html": "<p>Affected versions of stack_dst used a push_inner function that increased the internal length of the array and then called val.clone(). If the val.clone() call panics, the stack could drop an already dropped element or drop uninitialized memory. This issue was fixed in 2a4d538 by increasing the length of the array after elements are cloned.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-28035\">https://nvd.nist.gov/vuln/detail/CVE-2021-28035</a></li>\n<li><a href=\"https://github.com/thepowersgang/stack_dst-rs/issues/5\">https://github.com/thepowersgang/stack_dst-rs/issues/5</a></li>\n<li><a href=\"https://github.com/thepowersgang/stack_dst-rs/commit/2a4d538\">https://github.com/thepowersgang/stack_dst-rs/commit/2a4d538</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0033.html\">https://rustsec.org/advisories/RUSTSEC-2021-0033.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-45w7-7g63-2m5w\">https://github.com/advisories/GHSA-45w7-7g63-2m5w</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-45w7-7g63-2m5w",
            "title": "[stack_dst] Drop of uninitialized memory in stack_dst",
            "date_modified": "2022-06-14T20:51:08.000Z",
            "date_published": "2021-09-01T18:30:55.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-45w7-7g63-2m5w"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the tar crate before 0.4.36 for Rust. When symlinks are present in a TAR archive, extraction can create arbitrary directories via .. traversal.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38511\">https://nvd.nist.gov/vuln/detail/CVE-2021-38511</a></li>\n<li><a href=\"https://github.com/alexcrichton/tar-rs/issues/238\">https://github.com/alexcrichton/tar-rs/issues/238</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tar/RUSTSEC-2021-0080.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tar/RUSTSEC-2021-0080.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0080.html\">https://rustsec.org/advisories/RUSTSEC-2021-0080.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-62jx-8vmh-4mcw\">https://github.com/advisories/GHSA-62jx-8vmh-4mcw</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-62jx-8vmh-4mcw",
            "title": "[tar] Path trav in tar",
            "date_modified": "2022-06-14T20:38:47.000Z",
            "date_published": "2021-08-25T20:58:23.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-62jx-8vmh-4mcw"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the tokio crate before 1.8.1 for Rust. Upon a JoinHandle::abort, a Task may be dropped in the wrong thread.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38191\">https://nvd.nist.gov/vuln/detail/CVE-2021-38191</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/3929\">https://github.com/tokio-rs/tokio/issues/3929</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0072.html\">https://rustsec.org/advisories/RUSTSEC-2021-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2grh-hm3w-w7hv\">https://github.com/advisories/GHSA-2grh-hm3w-w7hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv",
            "title": "[tokio] Race condition in tokio",
            "date_modified": "2022-06-14T20:29:53.000Z",
            "date_published": "2021-08-25T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the tokio crate before 1.8.1 for Rust. Upon a JoinHandle::abort, a Task may be dropped in the wrong thread.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38191\">https://nvd.nist.gov/vuln/detail/CVE-2021-38191</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/3929\">https://github.com/tokio-rs/tokio/issues/3929</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0072.html\">https://rustsec.org/advisories/RUSTSEC-2021-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2grh-hm3w-w7hv\">https://github.com/advisories/GHSA-2grh-hm3w-w7hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv",
            "title": "[tokio] Race condition in tokio",
            "date_modified": "2022-06-14T20:29:53.000Z",
            "date_published": "2021-08-25T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the tokio crate before 1.8.1 for Rust. Upon a JoinHandle::abort, a Task may be dropped in the wrong thread.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38191\">https://nvd.nist.gov/vuln/detail/CVE-2021-38191</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/3929\">https://github.com/tokio-rs/tokio/issues/3929</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0072.html\">https://rustsec.org/advisories/RUSTSEC-2021-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2grh-hm3w-w7hv\">https://github.com/advisories/GHSA-2grh-hm3w-w7hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv",
            "title": "[tokio] Race condition in tokio",
            "date_modified": "2022-06-14T20:29:53.000Z",
            "date_published": "2021-08-25T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the tokio crate before 1.8.1 for Rust. Upon a JoinHandle::abort, a Task may be dropped in the wrong thread.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38191\">https://nvd.nist.gov/vuln/detail/CVE-2021-38191</a></li>\n<li><a href=\"https://github.com/tokio-rs/tokio/issues/3929\">https://github.com/tokio-rs/tokio/issues/3929</a></li>\n<li><a href=\"https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md\">https://raw.githubusercontent.com/rustsec/advisory-db/main/crates/tokio/RUSTSEC-2021-0072.md</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0072.html\">https://rustsec.org/advisories/RUSTSEC-2021-0072.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2grh-hm3w-w7hv\">https://github.com/advisories/GHSA-2grh-hm3w-w7hv</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv",
            "title": "[tokio] Race condition in tokio",
            "date_modified": "2022-06-14T20:29:53.000Z",
            "date_published": "2021-08-25T20:55:51.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2grh-hm3w-w7hv"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2020-12-10 for Rust. base::Error does not have soundness. Because of the public ptr field, a use-after-free or double-free can occur.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2020-36205\">https://nvd.nist.gov/vuln/detail/CVE-2020-36205</a></li>\n<li><a href=\"https://github.com/rtbo/rust-xcb/issues/93\">https://github.com/rtbo/rust-xcb/issues/93</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2020-0097.html\">https://rustsec.org/advisories/RUSTSEC-2020-0097.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-c8hq-x4mm-p6q6\">https://github.com/advisories/GHSA-c8hq-x4mm-p6q6</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-c8hq-x4mm-p6q6",
            "title": "[xcb] Memory handling issues in xcb",
            "date_modified": "2022-06-14T20:23:21.000Z",
            "date_published": "2021-08-25T20:50:54.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-c8hq-x4mm-p6q6"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because xcb::xproto::GetAtomNameReply::name() calls std::str::from_utf8_unchecked() on unvalidated bytes from an X server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26955\">https://nvd.nist.gov/vuln/detail/CVE-2021-26955</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/issues/653\">https://github.com/RustSec/advisory-db/issues/653</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0019.html\">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3288-cwgw-ch86\">https://github.com/advisories/GHSA-3288-cwgw-ch86</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3288-cwgw-ch86",
            "title": "[xcb] Unchecked Return Value in xcb",
            "date_modified": "2022-06-14T20:22:41.000Z",
            "date_published": "2021-08-25T20:53:22.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3288-cwgw-ch86"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because there is an out-of-bounds read in xcb::xproto::change_property(), as demonstrated by a format=32 T=u8 situation where out-of-bounds bytes are sent to an X server.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26957\">https://nvd.nist.gov/vuln/detail/CVE-2021-26957</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/issues/653\">https://github.com/RustSec/advisory-db/issues/653</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0019.html\">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-2xpg-3hx4-fm9r\">https://github.com/advisories/GHSA-2xpg-3hx4-fm9r</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-2xpg-3hx4-fm9r",
            "title": "[xcb] Out of bounds read in xcb",
            "date_modified": "2022-06-14T20:22:38.000Z",
            "date_published": "2021-08-25T20:53:20.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-2xpg-3hx4-fm9r"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because transmutation to the wrong type can happen after xcb::base::cast_event uses std::mem::transmute to return a reference to an arbitrary type.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26958\">https://nvd.nist.gov/vuln/detail/CVE-2021-26958</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/issues/653\">https://github.com/RustSec/advisory-db/issues/653</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0019.html\">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-3cj3-jrrp-9rxf\">https://github.com/advisories/GHSA-3cj3-jrrp-9rxf</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-3cj3-jrrp-9rxf",
            "title": "[xcb] Unchecked Return Value in xcb",
            "date_modified": "2022-06-14T20:22:36.000Z",
            "date_published": "2021-08-25T20:53:18.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-3cj3-jrrp-9rxf"
            }
        },
        {
            "content_html": "<p>An issue was discovered in the xcb crate through 2021-02-04 for Rust. It has a soundness violation because bytes from an X server can be interpreted as any data type returned by xcb::xproto::GetPropertyReply::value.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-26956\">https://nvd.nist.gov/vuln/detail/CVE-2021-26956</a></li>\n<li><a href=\"https://github.com/RustSec/advisory-db/issues/653\">https://github.com/RustSec/advisory-db/issues/653</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0019.html\">https://rustsec.org/advisories/RUSTSEC-2021-0019.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-mp6r-fgw2-rxfx\">https://github.com/advisories/GHSA-mp6r-fgw2-rxfx</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-mp6r-fgw2-rxfx",
            "title": "[xcb] Multiple soundness issues",
            "date_modified": "2022-06-14T20:21:56.000Z",
            "date_published": "2021-08-25T20:53:27.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-mp6r-fgw2-rxfx"
            }
        },
        {
            "content_html": "<h3 id=\"impact\">Impact</h3>\n<p>There was an invalid free and out-of-bounds read and write bug when running Wasm that uses <code>externref</code>s in Wasmtime.</p>\n<p>To trigger this bug, Wasmtime needs to be running Wasm that uses <code>externref</code>s, the host creates non-null <code>externrefs</code>, Wasmtime performs a garbage collection (GC), and there has to be a Wasm frame on the stack that is at a GC safepoint where</p>\n<ul>\n<li>there are no live references at this safepoint, and</li>\n<li>there is a safepoint with live references earlier in this frame's function.</li>\n</ul>\n<p>Under this scenario, Wasmtime would incorrectly use the GC stack map for the safepoint from earlier in the function instead of the empty safepoint. This would result in Wasmtime treating arbitrary stack slots as <code>externref</code>s that needed to be rooted for GC. At the <em>next</em> GC, it would be determined that nothing was referencing these bogus <code>externref</code>s (because nothing could ever reference them, because they are not really <code>externref</code>s) and then Wasmtime would deallocate them and run <code>&lt;ExternRef as Drop&gt;::drop</code> on them. This results in a free of memory that is not necessarily on the heap (and shouldn't be freed at this moment even if it was), as well as potential out-of-bounds reads and writes.</p>\n<p>Even though support for <code>externref</code>s (via the reference types proposal) is enabled by default, unless you are creating non-null <code>externref</code>s in your host code or explicitly triggering GCs, you cannot be affected by this bug.</p>\n<p>We have reason to believe that the effective impact of this bug is relatively small because usage of <code>externref</code> is currently quite rare.</p>\n<h3 id=\"patches\">Patches</h3>\n<p>This bug has been patched and users should upgrade to Wasmtime version 0.30.0.</p>\n<p>Additionally, we have updated <a href=\"https://github.com/bytecodealliance/wasmtime/blob/37c094faf53f1b356aab3c79d451395e4f7edb34/fuzz/fuzz_targets/table_ops.rs\">our primary <code>externref</code> fuzz target</a> such that it better exercises these code paths and we can have greater confidence in their correctness going forward.</p>\n<h3 id=\"workarounds\">Workarounds</h3>\n<p>If you cannot upgrade Wasmtime at this time, you can avoid this bug by disabling the reference types proposal by passing <code>false</code> to <a href=\"https://docs.rs/wasmtime/0.29.0/wasmtime/struct.Config.html#method.wasm_reference_types\"><code>wasmtime::Config::wasm_reference_types</code></a></p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://github.com/WebAssembly/reference-types/\">The Wasm reference types proposal, which introduces <code>externref</code></a></li>\n</ul>\n<h3 id=\"for-more-information\">For more information</h3>\n<p>If you have any questions or comments about this advisory:</p>\n<ul>\n<li>Reach out to us on <a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime\">the Bytecode Alliance Zulip chat</a></li>\n<li>Open an issue in <a href=\"https://github.com/bytecodealliance/wasmtime/\">the <code>bytecodealliance/wasmtime</code> repository</a><h3 id=\"references-1\">References</h3>\n</li>\n</ul>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49\">https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-4873-36h9-wv49</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c\">https://github.com/bytecodealliance/wasmtime/commit/398a73f0dd862dbe703212ebae8e34036a18c11c</a></li>\n<li><a href=\"https://crates.io/crates/wasmtime\">https://crates.io/crates/wasmtime</a></li>\n<li><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-39218\">https://nvd.nist.gov/vuln/detail/CVE-2021-39218</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/Z2Z33FTXFQ6EOINVEQIP4DFBG53G5XIY/</a></li>\n<li><a href=\"https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/\">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/WAVBRYDDUIY2ZR3K3FO4BVYJKIMJ5TP7/</a></li>\n<li><a href=\"https://rustsec.org/advisories/RUSTSEC-2021-0110.html\">https://rustsec.org/advisories/RUSTSEC-2021-0110.html</a></li>\n<li><a href=\"https://github.com/advisories/GHSA-4873-36h9-wv49\">https://github.com/advisories/GHSA-4873-36h9-wv49</a></li>\n</ul>\n",
            "url": "https://github.com/advisories/GHSA-4873-36h9-wv49",
            "title": "[wasmtime] Out-of-bounds read/write and invalid free with `externref`s and GC safepoints in Wasmtime ",
            "date_modified": "2022-06-14T20:20:15.000Z",
            "date_published": "2021-09-20T19:54:16.000Z",
            "author": {
                "name": "GitHub",
                "url": "https://github.com/advisories/GHSA-4873-36h9-wv49"
            }
        }
    ]
}