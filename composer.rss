<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-06-07T21:01:25.521Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-view] ZendFramework has potential Cross-site Scripting vector in multiple view helpers]]></title>
        <id>https://github.com/advisories/GHSA-m7hr-j867-3f34</id>
        <link href="https://github.com/advisories/GHSA-m7hr-j867-3f34"/>
        <updated>2024-06-07T20:58:09.000Z</updated>
        <content type="html"><![CDATA[<p>Many Zend Framework 2 view helpers were using the <code>escapeHtml()</code> view helper in order to escape HTML attributes, instead of the more appropriate <code>escapeHtmlAttr()</code>. In situations where user data and/or JavaScript is used to seed attributes, this can lead to potential cross site scripting (XSS) attack vectors.</p>
<p>Vulnerable view helpers include:</p>
<ul>
<li>All <code>Zend\Form</code> view helpers.</li>
<li>Most <code>Zend\Navigation</code> (aka <code>Zend\View\Helper\Navigation\*</code>) view helpers.</li>
<li>All "HTML Element" view helpers: <code>htmlFlash()</code>, <code>htmlPage()</code>, <code>htmlQuickTime()</code>.</li>
<li><code>Zend\View\Helper\Gravatar</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/12f89b587cd23dd781cde25c9dd2da75d8f829d7">https://github.com/zendframework/zendframework/commit/12f89b587cd23dd781cde25c9dd2da75d8f829d7</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea">https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1">https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ec6c0468514c111a244552cfb7cf575a726e017e">https://github.com/zendframework/zendframework/commit/ec6c0468514c111a244552cfb7cf575a726e017e</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-03">https://framework.zend.com/security/advisory/ZF2014-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-view/ZF2014-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-view/ZF2014-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m7hr-j867-3f34">https://github.com/advisories/GHSA-m7hr-j867-3f34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7hr-j867-3f34</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:58:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-view] ZendFramework has potential Cross-site Scripting vector in multiple view helpers]]></title>
        <id>https://github.com/advisories/GHSA-m7hr-j867-3f34</id>
        <link href="https://github.com/advisories/GHSA-m7hr-j867-3f34"/>
        <updated>2024-06-07T20:58:09.000Z</updated>
        <content type="html"><![CDATA[<p>Many Zend Framework 2 view helpers were using the <code>escapeHtml()</code> view helper in order to escape HTML attributes, instead of the more appropriate <code>escapeHtmlAttr()</code>. In situations where user data and/or JavaScript is used to seed attributes, this can lead to potential cross site scripting (XSS) attack vectors.</p>
<p>Vulnerable view helpers include:</p>
<ul>
<li>All <code>Zend\Form</code> view helpers.</li>
<li>Most <code>Zend\Navigation</code> (aka <code>Zend\View\Helper\Navigation\*</code>) view helpers.</li>
<li>All "HTML Element" view helpers: <code>htmlFlash()</code>, <code>htmlPage()</code>, <code>htmlQuickTime()</code>.</li>
<li><code>Zend\View\Helper\Gravatar</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/12f89b587cd23dd781cde25c9dd2da75d8f829d7">https://github.com/zendframework/zendframework/commit/12f89b587cd23dd781cde25c9dd2da75d8f829d7</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea">https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1">https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ec6c0468514c111a244552cfb7cf575a726e017e">https://github.com/zendframework/zendframework/commit/ec6c0468514c111a244552cfb7cf575a726e017e</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-03">https://framework.zend.com/security/advisory/ZF2014-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-view/ZF2014-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-view/ZF2014-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-m7hr-j867-3f34">https://github.com/advisories/GHSA-m7hr-j867-3f34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m7hr-j867-3f34</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:58:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework URL Rewrite vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fh7r-58q4-6387</id>
        <link href="https://github.com/advisories/GHSA-fh7r-58q4-6387"/>
        <updated>2024-06-07T20:55:33.000Z</updated>
        <content type="html"><![CDATA[<p>zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.</p>
<p>When these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2018-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2018-01.yaml</a></li>
<li><a href="https://web.archive.org/web/20210618220447/https://framework.zend.com/security/advisory/ZF2018-01">https://web.archive.org/web/20210618220447/https://framework.zend.com/security/advisory/ZF2018-01</a></li>
<li><a href="https://github.com/advisories/GHSA-fh7r-58q4-6387">https://github.com/advisories/GHSA-fh7r-58q4-6387</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fh7r-58q4-6387</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:55:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-5gmf-3c43-q73v</id>
        <link href="https://github.com/advisories/GHSA-5gmf-3c43-q73v"/>
        <updated>2024-06-07T20:50:56.000Z</updated>
        <content type="html"><![CDATA[<p><code>Zend\Debug</code>, <code>Zend\Feed\PubSubHubbub</code>, <code>Zend\Log\Formatter\Xml</code>, <code>Zend\Tag\Cloud\Decorator</code>, <code>Zend\Uri</code>, <code>Zend\View\Helper\HeadStyle, Zend\View\Helper\Navigation\Sitemap</code>, and <code>Zend\View\Helper\Placeholder\Container\AbstractStandalone</code> were not using <code>Zend\Escaper</code> when escaping HTML, HTML attributes, and/or URLs. While most were performing some escaping, because they were not using context-appropriate escaping mechanisms, they could potentially be exploited to perform Cross Site Scripting (XSS) attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/07d847b705911da6a15257f64895f69cab7ad50c">https://github.com/zendframework/zendframework/commit/07d847b705911da6a15257f64895f69cab7ad50c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/0a78cb2b633a618ac514eadef2c19ef78b1e12f2">https://github.com/zendframework/zendframework/commit/0a78cb2b633a618ac514eadef2c19ef78b1e12f2</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/27131ca9520bdf1d4c774c71459eba32f2b10733">https://github.com/zendframework/zendframework/commit/27131ca9520bdf1d4c774c71459eba32f2b10733</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6791343f8c8cd1948315a87eb15e16b57e08bc71">https://github.com/zendframework/zendframework/commit/6791343f8c8cd1948315a87eb15e16b57e08bc71</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6f57175753a238388b4811b9b0786b6d5866a208">https://github.com/zendframework/zendframework/commit/6f57175753a238388b4811b9b0786b6d5866a208</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/7f48d9edf82bcd7ece9d189d836682be83d08e91">https://github.com/zendframework/zendframework/commit/7f48d9edf82bcd7ece9d189d836682be83d08e91</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/a36406ddea52fd294b291310be00c526df6b713a">https://github.com/zendframework/zendframework/commit/a36406ddea52fd294b291310be00c526df6b713a</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ad3628bc2c05c297af4492330885d49f373e1e91">https://github.com/zendframework/zendframework/commit/ad3628bc2c05c297af4492330885d49f373e1e91</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2012-03">https://framework.zend.com/security/advisory/ZF2012-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2012-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2012-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5gmf-3c43-q73v">https://github.com/advisories/GHSA-5gmf-3c43-q73v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gmf-3c43-q73v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:50:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework potential remote code execution in zend-mail via Sendmail adapter]]></title>
        <id>https://github.com/advisories/GHSA-gff2-p6vm-3p8g</id>
        <link href="https://github.com/advisories/GHSA-gff2-p6vm-3p8g"/>
        <updated>2024-06-07T20:47:32.000Z</updated>
        <content type="html"><![CDATA[<p>When using the zend-mail component to send email via the <code>Zend\Mail\Transport\Sendmail transport</code>, a malicious user may be able to inject arbitrary parameters to the system sendmail program. The attack is performed by providing additional quote characters within an address; when unsanitized, they can be interpreted as additional command line arguments, leading to the vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/7c1e89815f5a9c016f4b8088e59b07cb2bf99dc0">https://github.com/zendframework/zendframework/commit/7c1e89815f5a9c016f4b8088e59b07cb2bf99dc0</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2016-04.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2016-04.yaml</a></li>
<li><a href="https://web.archive.org/web/20201107093523/https://framework.zend.com/security/advisory/ZF2016-04">https://web.archive.org/web/20201107093523/https://framework.zend.com/security/advisory/ZF2016-04</a></li>
<li><a href="https://github.com/advisories/GHSA-gff2-p6vm-3p8g">https://github.com/advisories/GHSA-gff2-p6vm-3p8g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gff2-p6vm-3p8g</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:47:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Potential Proxy Injection Vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-mg7h-9qfx-4r83</id>
        <link href="https://github.com/advisories/GHSA-mg7h-9qfx-4r83"/>
        <updated>2024-06-07T20:46:16.000Z</updated>
        <content type="html"><![CDATA[<p><code>Zend\Session\Validator\RemoteAddr</code> and <code>Zend\View\Helper\ServerUrl</code> were found to be improperly parsing HTTP headers for proxy information, which could potentially allow an attacker to spoof a proxied IP or host name.</p>
<p>In <code>Zend\Session\Validator\RemoteAddr</code>, if the client is behind a proxy server, the detection of the proxy URL was incorrect, and could lead to invalid results on subsequent lookups.</p>
<p>In <code>Zend\View\Helper\ServerUrl</code>, if the server lives behind a proxy, the helper would always generate a URL based on the proxy host, regardless of whether or not this was desired; additionally, it did not take into account the proxy port or protocol, if provided.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/1040acaf70d297ec7214934d8ddc3e811d249b5c">https://github.com/zendframework/zendframework/commit/1040acaf70d297ec7214934d8ddc3e811d249b5c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ad8fdc3378710b7cfbe2a271dbb0e3256cffb599">https://github.com/zendframework/zendframework/commit/ad8fdc3378710b7cfbe2a271dbb0e3256cffb599</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ada1fab92f6d5c7ad96c5a63f3196d925e3f5887">https://github.com/zendframework/zendframework/commit/ada1fab92f6d5c7ad96c5a63f3196d925e3f5887</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/b914ecdd4d17ab5b61f15ccdc02a6e9b255b15d8">https://github.com/zendframework/zendframework/commit/b914ecdd4d17ab5b61f15ccdc02a6e9b255b15d8</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/c3819abbf2c9571069c893d27ae6170bda413925">https://github.com/zendframework/zendframework/commit/c3819abbf2c9571069c893d27ae6170bda413925</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/cfaf5ea095c93f3e70343358a3a88c3924d7ed7d">https://github.com/zendframework/zendframework/commit/cfaf5ea095c93f3e70343358a3a88c3924d7ed7d</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2012-04">https://framework.zend.com/security/advisory/ZF2012-04</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2012-04.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2012-04.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-mg7h-9qfx-4r83">https://github.com/advisories/GHSA-mg7h-9qfx-4r83</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg7h-9qfx-4r83</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:46:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Information Disclosure and Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2fhr-8r8r-qp56</id>
        <link href="https://github.com/advisories/GHSA-2fhr-8r8r-qp56"/>
        <updated>2024-06-07T20:37:46.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework, <code>Zend_Captcha_Word</code> (v1) and <code>Zend\Captcha\Word</code> (v2) generate a "word" for a CAPTCHA challenge by selecting a sequence of random letters from a character set. Prior to this advisory, the selection was performed using PHP's <code>internal array_rand()</code> function. This function does not generate sufficient entropy due to its usage of <code>rand()</code> instead of more cryptographically secure methods such as <code>openssl_pseudo_random_bytes()</code>. This could potentially lead to information disclosure should an attacker be able to brute force the random number generation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/ced8ff93ef892a64885c03f5dfab3f788a219709">https://github.com/zendframework/zendframework/commit/ced8ff93ef892a64885c03f5dfab3f788a219709</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-09">https://framework.zend.com/security/advisory/ZF2015-09</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-09.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-09.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2fhr-8r8r-qp56">https://github.com/advisories/GHSA-2fhr-8r8r-qp56</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2fhr-8r8r-qp56</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:37:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework SQL injection due to execution of platform-specific SQL containing interpolations]]></title>
        <id>https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</id>
        <link href="https://github.com/advisories/GHSA-x2f4-8wxf-w3vf"/>
        <updated>2024-06-07T20:35:17.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Zend\Db</code> component in Zend Framework 2 provides platform abstraction, which is used in particular for SQL abstraction. Two methods defined in the platform interface, <code>quoteValue()</code> and <code>quoteValueList()</code>, allow users to manually quote values for creating SQL statements; these are in turn consumed by aspects of the SQL abstraction platform, including <code>Zend\Db\Sql\Sql::getSqlStringForSqlObject()</code>, and the <code>getSqlString()</code> method provided in a number of classes in the Zend\Db\Sql namespace.</p>
<p>While these methods are primarily intended for debugging and logging purposes, developers can use them to produce SQL that is then passed to the driver to execute. Due to a flaw in how the <code>quoteValue()</code> and <code>quoteValueList()</code> methods were written, this can lead to potential SQL injection.</p>
<p>The offending code is located in any of the <code>Zend\Db\Adapter\Platform*</code> objects, particularly the quoteValue() and <code>quoteValueList()</code> methods. These methods did not take into account most of the possible escapable characters that would need to be escaped when attempting to create a quoted value for interpolation into a SQL string. Moreover, these methods did value quoting without extension level coordination which, when available, takes character-sets into account when quoting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/0ef63e7db5fa30a79a58eb7c6466c6ab5c0618c5">https://github.com/zendframework/zendframework/commit/0ef63e7db5fa30a79a58eb7c6466c6ab5c0618c5</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/546074660e6e10b9191bf0dc62b524d99f71a5cd">https://github.com/zendframework/zendframework/commit/546074660e6e10b9191bf0dc62b524d99f71a5cd</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6d83777786b8e6171d82191ef917afd09fcb6601">https://github.com/zendframework/zendframework/commit/6d83777786b8e6171d82191ef917afd09fcb6601</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/870741d0c01a24ff23f9e209c8d393bd3a4115e3">https://github.com/zendframework/zendframework/commit/870741d0c01a24ff23f9e209c8d393bd3a4115e3</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/95c88c236e80b475141d227bdf7866ca40287dd1">https://github.com/zendframework/zendframework/commit/95c88c236e80b475141d227bdf7866ca40287dd1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/d1f259b9d6dbd7c3828360afcfdd3658f2163ea0">https://github.com/zendframework/zendframework/commit/d1f259b9d6dbd7c3828360afcfdd3658f2163ea0</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-03">https://framework.zend.com/security/advisory/ZF2013-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-x2f4-8wxf-w3vf">https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:35:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework SQL injection due to execution of platform-specific SQL containing interpolations]]></title>
        <id>https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</id>
        <link href="https://github.com/advisories/GHSA-x2f4-8wxf-w3vf"/>
        <updated>2024-06-07T20:35:17.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Zend\Db</code> component in Zend Framework 2 provides platform abstraction, which is used in particular for SQL abstraction. Two methods defined in the platform interface, <code>quoteValue()</code> and <code>quoteValueList()</code>, allow users to manually quote values for creating SQL statements; these are in turn consumed by aspects of the SQL abstraction platform, including <code>Zend\Db\Sql\Sql::getSqlStringForSqlObject()</code>, and the <code>getSqlString()</code> method provided in a number of classes in the Zend\Db\Sql namespace.</p>
<p>While these methods are primarily intended for debugging and logging purposes, developers can use them to produce SQL that is then passed to the driver to execute. Due to a flaw in how the <code>quoteValue()</code> and <code>quoteValueList()</code> methods were written, this can lead to potential SQL injection.</p>
<p>The offending code is located in any of the <code>Zend\Db\Adapter\Platform*</code> objects, particularly the quoteValue() and <code>quoteValueList()</code> methods. These methods did not take into account most of the possible escapable characters that would need to be escaped when attempting to create a quoted value for interpolation into a SQL string. Moreover, these methods did value quoting without extension level coordination which, when available, takes character-sets into account when quoting.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/0ef63e7db5fa30a79a58eb7c6466c6ab5c0618c5">https://github.com/zendframework/zendframework/commit/0ef63e7db5fa30a79a58eb7c6466c6ab5c0618c5</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/546074660e6e10b9191bf0dc62b524d99f71a5cd">https://github.com/zendframework/zendframework/commit/546074660e6e10b9191bf0dc62b524d99f71a5cd</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6d83777786b8e6171d82191ef917afd09fcb6601">https://github.com/zendframework/zendframework/commit/6d83777786b8e6171d82191ef917afd09fcb6601</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/870741d0c01a24ff23f9e209c8d393bd3a4115e3">https://github.com/zendframework/zendframework/commit/870741d0c01a24ff23f9e209c8d393bd3a4115e3</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/95c88c236e80b475141d227bdf7866ca40287dd1">https://github.com/zendframework/zendframework/commit/95c88c236e80b475141d227bdf7866ca40287dd1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/d1f259b9d6dbd7c3828360afcfdd3658f2163ea0">https://github.com/zendframework/zendframework/commit/d1f259b9d6dbd7c3828360afcfdd3658f2163ea0</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-03">https://framework.zend.com/security/advisory/ZF2013-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-x2f4-8wxf-w3vf">https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x2f4-8wxf-w3vf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:35:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework vulnerable to XXE/XEE attacks]]></title>
        <id>https://github.com/advisories/GHSA-qc7w-4567-84wv</id>
        <link href="https://github.com/advisories/GHSA-qc7w-4567-84wv"/>
        <updated>2024-06-07T20:30:07.000Z</updated>
        <content type="html"><![CDATA[<p>Numerous components utilizing PHP's DOMDocument, SimpleXML, and xml_parse functionality are vulnerable to two types of attacks:</p>
<ul>
<li>XML eXternal Entity (XXE) Injection attacks. The above mentioned extensions are insecure by default, allowing external entities to be specified by adding a specific DOCTYPE element to XML documents and strings. By exploiting this vulnerability an application may be coerced to open arbitrary files and/or TCP connections.</li>
<li>XML Entity Expansion (XEE) vectors, leading to Denial of Service vectors. XEE attacks occur when the XML DOCTYPE declaration includes XML entity definitions that contain either recursive or circular references; this leads to CPU and memory consumption, making Denial of Service exploits trivial to implement.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/225a8c9f1c3bc08c0bddf22486a8a39ff7186ac1">https://github.com/zendframework/zendframework/commit/225a8c9f1c3bc08c0bddf22486a8a39ff7186ac1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/5dab7b8e77741dbba56209616b7815bb04f4c561">https://github.com/zendframework/zendframework/commit/5dab7b8e77741dbba56209616b7815bb04f4c561</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/68d0756c596baeefad0b733b42ef2657d09c7f4e">https://github.com/zendframework/zendframework/commit/68d0756c596baeefad0b733b42ef2657d09c7f4e</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/bbcf41e676ef6d8f16ea9d6499050bca0787eb6c">https://github.com/zendframework/zendframework/commit/bbcf41e676ef6d8f16ea9d6499050bca0787eb6c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ee7f81cc996fb1c16c7dae23eca9ec013ab74730">https://github.com/zendframework/zendframework/commit/ee7f81cc996fb1c16c7dae23eca9ec013ab74730</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/fbeba98d5a9924b026a5dd98f679143fd6be89ea">https://github.com/zendframework/zendframework/commit/fbeba98d5a9924b026a5dd98f679143fd6be89ea</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-01">https://framework.zend.com/security/advisory/ZF2014-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qc7w-4567-84wv">https://github.com/advisories/GHSA-qc7w-4567-84wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc7w-4567-84wv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T20:30:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework vulnerable to XXE/XEE attacks]]></title>
        <id>https://github.com/advisories/GHSA-qc7w-4567-84wv</id>
        <link href="https://github.com/advisories/GHSA-qc7w-4567-84wv"/>
        <updated>2024-06-07T20:30:07.000Z</updated>
        <content type="html"><![CDATA[<p>Numerous components utilizing PHP's DOMDocument, SimpleXML, and xml_parse functionality are vulnerable to two types of attacks:</p>
<ul>
<li>XML eXternal Entity (XXE) Injection attacks. The above mentioned extensions are insecure by default, allowing external entities to be specified by adding a specific DOCTYPE element to XML documents and strings. By exploiting this vulnerability an application may be coerced to open arbitrary files and/or TCP connections.</li>
<li>XML Entity Expansion (XEE) vectors, leading to Denial of Service vectors. XEE attacks occur when the XML DOCTYPE declaration includes XML entity definitions that contain either recursive or circular references; this leads to CPU and memory consumption, making Denial of Service exploits trivial to implement.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/225a8c9f1c3bc08c0bddf22486a8a39ff7186ac1">https://github.com/zendframework/zendframework/commit/225a8c9f1c3bc08c0bddf22486a8a39ff7186ac1</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/5dab7b8e77741dbba56209616b7815bb04f4c561">https://github.com/zendframework/zendframework/commit/5dab7b8e77741dbba56209616b7815bb04f4c561</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/68d0756c596baeefad0b733b42ef2657d09c7f4e">https://github.com/zendframework/zendframework/commit/68d0756c596baeefad0b733b42ef2657d09c7f4e</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/bbcf41e676ef6d8f16ea9d6499050bca0787eb6c">https://github.com/zendframework/zendframework/commit/bbcf41e676ef6d8f16ea9d6499050bca0787eb6c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ee7f81cc996fb1c16c7dae23eca9ec013ab74730">https://github.com/zendframework/zendframework/commit/ee7f81cc996fb1c16c7dae23eca9ec013ab74730</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/fbeba98d5a9924b026a5dd98f679143fd6be89ea">https://github.com/zendframework/zendframework/commit/fbeba98d5a9924b026a5dd98f679143fd6be89ea</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-01">https://framework.zend.com/security/advisory/ZF2014-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qc7w-4567-84wv">https://github.com/advisories/GHSA-qc7w-4567-84wv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qc7w-4567-84wv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T20:30:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Potential Information Disclosure and Insufficient Entropy vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-xg9w-r469-m455</id>
        <link href="https://github.com/advisories/GHSA-xg9w-r469-m455"/>
        <updated>2024-06-07T20:27:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework 2, the <code>Zend\Math\Rand</code> component generates random bytes using the OpenSSL or Mcrypt extensions when available but will otherwise use PHP's <code>mt_rand()</code> function as a fallback. All outputs from <code>mt_rand()</code> are predictable for the same PHP process if an attacker can brute force the seed used by the Marsenne-Twister algorithm in a Seed Recovery Attack. This attack can be successfully applied with minimum effort if the attacker has access to either a random number from <code>mt_rand()</code> or a Session ID generated without using additional entropy. This makes <code>mt_rand()</code> unsuitable for generating non-trivial random bytes since it has Insufficient Entropy to protect against brute force attacks on the seed.</p>
<p>The <code>Zend\Validate\Csrf</code> component generates CSRF tokens by SHA1 hashing a salt, random number possibly generated using <code>mt_rand()</code> and a form name. Where the salt is known, an attacker can brute force the SHA1 hash with minimum effort to discover the random number when <code>mt_rand()</code> is utilised as a fallback to the OpenSSL and Mcrypt extensions. This constitutes an Information Disclosure where the recovered random number may itself be brute forced to recover the seed value and predict the output of other <code>mt_rand()</code> calls for the same PHP process. This may potentially lead to vulnerabilities in areas of an application where <code>mt_rand()</code> calls exist beyond the scope of Zend Framework.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/6975695dfdb201bda0aea02bcc11b4a85ddc89fa">https://github.com/zendframework/zendframework/commit/6975695dfdb201bda0aea02bcc11b4a85ddc89fa</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/97b98e7208f93613ab358432e56b6e2245153807">https://github.com/zendframework/zendframework/commit/97b98e7208f93613ab358432e56b6e2245153807</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-02">https://framework.zend.com/security/advisory/ZF2013-02</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-02.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-02.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-xg9w-r469-m455">https://github.com/advisories/GHSA-xg9w-r469-m455</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg9w-r469-m455</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:27:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Potential Information Disclosure and Insufficient Entropy vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-xg9w-r469-m455</id>
        <link href="https://github.com/advisories/GHSA-xg9w-r469-m455"/>
        <updated>2024-06-07T20:27:06.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework 2, the <code>Zend\Math\Rand</code> component generates random bytes using the OpenSSL or Mcrypt extensions when available but will otherwise use PHP's <code>mt_rand()</code> function as a fallback. All outputs from <code>mt_rand()</code> are predictable for the same PHP process if an attacker can brute force the seed used by the Marsenne-Twister algorithm in a Seed Recovery Attack. This attack can be successfully applied with minimum effort if the attacker has access to either a random number from <code>mt_rand()</code> or a Session ID generated without using additional entropy. This makes <code>mt_rand()</code> unsuitable for generating non-trivial random bytes since it has Insufficient Entropy to protect against brute force attacks on the seed.</p>
<p>The <code>Zend\Validate\Csrf</code> component generates CSRF tokens by SHA1 hashing a salt, random number possibly generated using <code>mt_rand()</code> and a form name. Where the salt is known, an attacker can brute force the SHA1 hash with minimum effort to discover the random number when <code>mt_rand()</code> is utilised as a fallback to the OpenSSL and Mcrypt extensions. This constitutes an Information Disclosure where the recovered random number may itself be brute forced to recover the seed value and predict the output of other <code>mt_rand()</code> calls for the same PHP process. This may potentially lead to vulnerabilities in areas of an application where <code>mt_rand()</code> calls exist beyond the scope of Zend Framework.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/6975695dfdb201bda0aea02bcc11b4a85ddc89fa">https://github.com/zendframework/zendframework/commit/6975695dfdb201bda0aea02bcc11b4a85ddc89fa</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/97b98e7208f93613ab358432e56b6e2245153807">https://github.com/zendframework/zendframework/commit/97b98e7208f93613ab358432e56b6e2245153807</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-02">https://framework.zend.com/security/advisory/ZF2013-02</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-02.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-02.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-xg9w-r469-m455">https://github.com/advisories/GHSA-xg9w-r469-m455</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xg9w-r469-m455</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:27:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework session validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-62f6-h68r-3jpw</id>
        <link href="https://github.com/advisories/GHSA-62f6-h68r-3jpw"/>
        <updated>2024-06-07T20:20:22.000Z</updated>
        <content type="html"><![CDATA[<p><code>Zend\Session</code> session validators do not work as expected if set prior to the start of a session.</p>
<p>For instance, the following test case fails (where <code>$this-&gt;manager</code> is an instance of <code>Zend\Session\SessionManager</code>):</p>
<pre><code>$this
    -&gt;manager
    -&gt;getValidatorChain()
    -&gt;attach('session.validate', array(new RemoteAddr(), 'isValid'));

$this-&gt;manager-&gt;start();

$this-&gt;assertSame(
    array(
        'Zend\Session\Validator\RemoteAddr' =3D&gt; '',
    ),
    $_SESSION['__ZF']['_VALID']
);
</code></pre>
<p>The implication is that subsequent calls to <code>Zend\Session\SessionManager#start()</code> (in later requests, assuming a session was created) will not have any validator metadata attached, which causes any validator metadata to be re-built from scratch, thus marking the session as valid.</p>
<p>An attacker is thus able to simply ignore session validators such as RemoteAddr or HttpUserAgent, since the "signature" that these validators check against is not being stored in the session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/1672aee3531205e5c1a0b96d8c680124ec93db09">https://github.com/zendframework/zendframework/commit/1672aee3531205e5c1a0b96d8c680124ec93db09</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/282135561cbf98cc93274c57966b021fd6e051b9">https://github.com/zendframework/zendframework/commit/282135561cbf98cc93274c57966b021fd6e051b9</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/5f06a1f80a1aaeac87a46bfa9b63a5a74a14866c">https://github.com/zendframework/zendframework/commit/5f06a1f80a1aaeac87a46bfa9b63a5a74a14866c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/9493d725ef869e6ce7ab78167539223396fda491">https://github.com/zendframework/zendframework/commit/9493d725ef869e6ce7ab78167539223396fda491</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ddbf43ac3fe28fe98a4104993d0cb4bffb13a026">https://github.com/zendframework/zendframework/commit/ddbf43ac3fe28fe98a4104993d0cb4bffb13a026</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/f22a83c611732fbc0328f0f887bccc075be1fd56">https://github.com/zendframework/zendframework/commit/f22a83c611732fbc0328f0f887bccc075be1fd56</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-01">https://framework.zend.com/security/advisory/ZF2015-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-62f6-h68r-3jpw">https://github.com/advisories/GHSA-62f6-h68r-3jpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62f6-h68r-3jpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:20:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework session validation vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-62f6-h68r-3jpw</id>
        <link href="https://github.com/advisories/GHSA-62f6-h68r-3jpw"/>
        <updated>2024-06-07T20:20:22.000Z</updated>
        <content type="html"><![CDATA[<p><code>Zend\Session</code> session validators do not work as expected if set prior to the start of a session.</p>
<p>For instance, the following test case fails (where <code>$this-&gt;manager</code> is an instance of <code>Zend\Session\SessionManager</code>):</p>
<pre><code>$this
    -&gt;manager
    -&gt;getValidatorChain()
    -&gt;attach('session.validate', array(new RemoteAddr(), 'isValid'));

$this-&gt;manager-&gt;start();

$this-&gt;assertSame(
    array(
        'Zend\Session\Validator\RemoteAddr' =3D&gt; '',
    ),
    $_SESSION['__ZF']['_VALID']
);
</code></pre>
<p>The implication is that subsequent calls to <code>Zend\Session\SessionManager#start()</code> (in later requests, assuming a session was created) will not have any validator metadata attached, which causes any validator metadata to be re-built from scratch, thus marking the session as valid.</p>
<p>An attacker is thus able to simply ignore session validators such as RemoteAddr or HttpUserAgent, since the "signature" that these validators check against is not being stored in the session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/1672aee3531205e5c1a0b96d8c680124ec93db09">https://github.com/zendframework/zendframework/commit/1672aee3531205e5c1a0b96d8c680124ec93db09</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/282135561cbf98cc93274c57966b021fd6e051b9">https://github.com/zendframework/zendframework/commit/282135561cbf98cc93274c57966b021fd6e051b9</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/5f06a1f80a1aaeac87a46bfa9b63a5a74a14866c">https://github.com/zendframework/zendframework/commit/5f06a1f80a1aaeac87a46bfa9b63a5a74a14866c</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/9493d725ef869e6ce7ab78167539223396fda491">https://github.com/zendframework/zendframework/commit/9493d725ef869e6ce7ab78167539223396fda491</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/ddbf43ac3fe28fe98a4104993d0cb4bffb13a026">https://github.com/zendframework/zendframework/commit/ddbf43ac3fe28fe98a4104993d0cb4bffb13a026</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/f22a83c611732fbc0328f0f887bccc075be1fd56">https://github.com/zendframework/zendframework/commit/f22a83c611732fbc0328f0f887bccc075be1fd56</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-01">https://framework.zend.com/security/advisory/ZF2015-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2015-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-62f6-h68r-3jpw">https://github.com/advisories/GHSA-62f6-h68r-3jpw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62f6-h68r-3jpw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:20:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Route Parameter Injection Via Query String in `Zend\Mvc`]]></title>
        <id>https://github.com/advisories/GHSA-jq87-2wxp-8349</id>
        <link href="https://github.com/advisories/GHSA-jq87-2wxp-8349"/>
        <updated>2024-06-07T20:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework 2, <code>Zend\Mvc\Router\Http\Query</code> is used primarily to allow appending query strings to URLs when assembled. However, due to the fact that it captures any query parameters into the RouteMatch, and the fact that RouteMatch parameters are merged with any parent routes, this can lead to overriding already captured routing parameters, bypassing constraints defined in the parents.</p>
<p>As an example, consider the following route definition:</p>
<pre><code>array(
    'user' =&gt; array(
        'type' =&gt; 'segment',
        'options' =&gt; array(
            'route' =&gt; '/user/:key',
            'defaults' =&gt; array(
                'controller' =&gt; 'UserController',
                'action'     =&gt; 'show-action',
            ),
            'constraints' =&gt; array(
                'key' =&gt; '[a-z0-9]+',
            ),
        ),
        'child_routes' =&gt; array(
            'query' =&gt; array('type' =&gt; 'query'),
        ),
    ),
)
</code></pre>
<p>If the request URI was /user/foo/?controller=SecretController&amp;key=invalid_value, the RouteMatch returned after routing would contain the following:</p>
<pre><code>array(
    'controller' =&gt; 'SecretController',
    'action'     =&gt; 'show-action',
    'key'        =&gt; 'invalid_value',
)
</code></pre>
<p>This would lead to execution of a different controller than intended, with a value for the key parameter that bypassed the constraints outlined in the parent route.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/0a7ec3407f02db29ea2ffd6daa71ead6fd151cfe">https://github.com/zendframework/zendframework/commit/0a7ec3407f02db29ea2ffd6daa71ead6fd151cfe</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/7fcb88ebc2d56f74aa943909f2b6b53f5c86b081">https://github.com/zendframework/zendframework/commit/7fcb88ebc2d56f74aa943909f2b6b53f5c86b081</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-01">https://framework.zend.com/security/advisory/ZF2013-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-jq87-2wxp-8349">https://github.com/advisories/GHSA-jq87-2wxp-8349</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jq87-2wxp-8349</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:15:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] ZendFramework Route Parameter Injection Via Query String in `Zend\Mvc`]]></title>
        <id>https://github.com/advisories/GHSA-jq87-2wxp-8349</id>
        <link href="https://github.com/advisories/GHSA-jq87-2wxp-8349"/>
        <updated>2024-06-07T20:15:50.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework 2, <code>Zend\Mvc\Router\Http\Query</code> is used primarily to allow appending query strings to URLs when assembled. However, due to the fact that it captures any query parameters into the RouteMatch, and the fact that RouteMatch parameters are merged with any parent routes, this can lead to overriding already captured routing parameters, bypassing constraints defined in the parents.</p>
<p>As an example, consider the following route definition:</p>
<pre><code>array(
    'user' =&gt; array(
        'type' =&gt; 'segment',
        'options' =&gt; array(
            'route' =&gt; '/user/:key',
            'defaults' =&gt; array(
                'controller' =&gt; 'UserController',
                'action'     =&gt; 'show-action',
            ),
            'constraints' =&gt; array(
                'key' =&gt; '[a-z0-9]+',
            ),
        ),
        'child_routes' =&gt; array(
            'query' =&gt; array('type' =&gt; 'query'),
        ),
    ),
)
</code></pre>
<p>If the request URI was /user/foo/?controller=SecretController&amp;key=invalid_value, the RouteMatch returned after routing would contain the following:</p>
<pre><code>array(
    'controller' =&gt; 'SecretController',
    'action'     =&gt; 'show-action',
    'key'        =&gt; 'invalid_value',
)
</code></pre>
<p>This would lead to execution of a different controller than intended, with a value for the key parameter that bypassed the constraints outlined in the parent route.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/0a7ec3407f02db29ea2ffd6daa71ead6fd151cfe">https://github.com/zendframework/zendframework/commit/0a7ec3407f02db29ea2ffd6daa71ead6fd151cfe</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/7fcb88ebc2d56f74aa943909f2b6b53f5c86b081">https://github.com/zendframework/zendframework/commit/7fcb88ebc2d56f74aa943909f2b6b53f5c86b081</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-01">https://framework.zend.com/security/advisory/ZF2013-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-jq87-2wxp-8349">https://github.com/advisories/GHSA-jq87-2wxp-8349</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jq87-2wxp-8349</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:15:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework has potential Cross-site Scripting vector in multiple view helpers]]></title>
        <id>https://github.com/advisories/GHSA-8q77-cv62-jj38</id>
        <link href="https://github.com/advisories/GHSA-8q77-cv62-jj38"/>
        <updated>2024-06-07T20:04:05.000Z</updated>
        <content type="html"><![CDATA[<p>Many Zend Framework 2 view helpers were using the <code>escapeHtml()</code> view helper in order to escape HTML attributes, instead of the more appropriate <code>escapeHtmlAttr()</code>. In situations where user data and/or JavaScript is used to seed attributes, this can lead to potential cross site scripting (XSS) attack vectors.</p>
<p>Vulnerable view helpers include:</p>
<ul>
<li>All <code>Zend\Form</code> view helpers.</li>
<li>Most <code>Zend\Navigation</code> (aka <code>Zend\View\Helper\Navigation\*</code>) view helpers.</li>
<li>All "HTML Element" view helpers: <code>htmlFlash()</code>, <code>htmlPage()</code>, <code>htmlQuickTime()</code>.</li>
<li><code>Zend\View\Helper\Gravatar</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea">https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1">https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-03">https://framework.zend.com/security/advisory/ZF2014-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8q77-cv62-jj38">https://github.com/advisories/GHSA-8q77-cv62-jj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8q77-cv62-jj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:04:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework has potential Cross-site Scripting vector in multiple view helpers]]></title>
        <id>https://github.com/advisories/GHSA-8q77-cv62-jj38</id>
        <link href="https://github.com/advisories/GHSA-8q77-cv62-jj38"/>
        <updated>2024-06-07T20:04:05.000Z</updated>
        <content type="html"><![CDATA[<p>Many Zend Framework 2 view helpers were using the <code>escapeHtml()</code> view helper in order to escape HTML attributes, instead of the more appropriate <code>escapeHtmlAttr()</code>. In situations where user data and/or JavaScript is used to seed attributes, this can lead to potential cross site scripting (XSS) attack vectors.</p>
<p>Vulnerable view helpers include:</p>
<ul>
<li>All <code>Zend\Form</code> view helpers.</li>
<li>Most <code>Zend\Navigation</code> (aka <code>Zend\View\Helper\Navigation\*</code>) view helpers.</li>
<li>All "HTML Element" view helpers: <code>htmlFlash()</code>, <code>htmlPage()</code>, <code>htmlQuickTime()</code>.</li>
<li><code>Zend\View\Helper\Gravatar</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea">https://github.com/zendframework/zendframework/commit/1dd4f8cede07469390eef1e629f808349fa1b5ea</a></li>
<li><a href="https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1">https://github.com/zendframework/zendframework/commit/6742ddad7a7923163cea6dd58d27d0e946a402d1</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-03">https://framework.zend.com/security/advisory/ZF2014-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2014-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8q77-cv62-jj38">https://github.com/advisories/GHSA-8q77-cv62-jj38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8q77-cv62-jj38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T20:04:04.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Zendframework Remote Address Spoofing Vector in `Zend\Http\PhpEnvironment\RemoteAddress`]]></title>
        <id>https://github.com/advisories/GHSA-xffp-6w68-4775</id>
        <link href="https://github.com/advisories/GHSA-xffp-6w68-4775"/>
        <updated>2024-06-07T20:02:10.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>Zend\Http\PhpEnvironment\RemoteAddress</code> class provides features around detecting the internet protocol (IP) address for an incoming proxied request via the X-Forwarded-For header, taking into account a provided list of trusted proxy server IPs. Prior to 2.2.5, the class was not taking into account whether or not the IP address contained in PHP's <code>$_SERVER['REMOTE_ADDR']</code> was in the trusted proxy server list.</p>
<p>The IETF draft specification indicates that if <code>$_SERVER['REMOTE_ADDR']</code> is not a trusted proxy, it must be considered the originating IP address, and the value of X-Forwarded-For must be disregarded.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zendframework/commit/bb6784461d3b23ef1db4be8cf47957ccc3b681ed">https://github.com/zendframework/zendframework/commit/bb6784461d3b23ef1db4be8cf47957ccc3b681ed</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2013-04">https://framework.zend.com/security/advisory/ZF2013-04</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-04.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework/ZF2013-04.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-xffp-6w68-4775">https://github.com/advisories/GHSA-xffp-6w68-4775</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xffp-6w68-4775</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T20:02:07.000Z</published>
    </entry>
</feed>