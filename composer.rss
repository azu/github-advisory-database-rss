<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2022-03-21T00:17:50.958Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] RCE in Symfony]]></title>
        <id>https://github.com/advisories/GHSA-754h-5r27-7x3r</id>
        <link href="https://github.com/advisories/GHSA-754h-5r27-7x3r"/>
        <updated>2022-03-18T18:31:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The <code>CachingHttpClient</code> class from the HttpClient Symfony component relies on the <code>HttpCache</code> class to handle requests. <code>HttpCache</code> uses internal headers like <code>X-Body-Eval</code> and <code>X-Body-File</code> to control the restoration of cached responses. The class was initially written with surrogate caching and ESI support in mind (all HTTP calls come from a trusted backend in that scenario). But when used by <code>CachingHttpClient</code> and if an attacker can control the response for a request being made by the <code>CachingHttpClient</code>, remote code execution is possible.</p>
<h2 id="resolution">Resolution</h2>
<p>HTTP headers designed for internal use in <code>HttpCache</code> are now stripped from remote responses before being passed to <code>HttpCache</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78">here</a> for the 4.4 branch.</p>
<h2 id="credits">Credits</h2>
<p>I would like to thank Matthias Pigulla (webfactory GmbH) for reporting and fixing the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-754h-5r27-7x3r">https://github.com/symfony/symfony/security/advisories/GHSA-754h-5r27-7x3r</a></li>
<li><a href="https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78">https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78</a></li>
<li><a href="https://packagist.org/packages/symfony/http-kernel">https://packagist.org/packages/symfony/http-kernel</a></li>
<li><a href="https://packagist.org/packages/symfony/symfony">https://packagist.org/packages/symfony/symfony</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15094">https://nvd.nist.gov/vuln/detail/CVE-2020-15094</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VAQJXAKWPMWB7OL6QPG2ZSEQZYYPU5RC/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VAQJXAKWPMWB7OL6QPG2ZSEQZYYPU5RC/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HNGUWOEETOFVH4PN3I3YO4QZHQ4AUKF3/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HNGUWOEETOFVH4PN3I3YO4QZHQ4AUKF3/</a></li>
<li><a href="https://github.com/advisories/GHSA-754h-5r27-7x3r">https://github.com/advisories/GHSA-754h-5r27-7x3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-754h-5r27-7x3r</uri>
        </author>
        <published>2020-09-02T17:29:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-kernel] RCE in Symfony]]></title>
        <id>https://github.com/advisories/GHSA-754h-5r27-7x3r</id>
        <link href="https://github.com/advisories/GHSA-754h-5r27-7x3r"/>
        <updated>2022-03-18T18:31:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="description">Description</h2>
<p>The <code>CachingHttpClient</code> class from the HttpClient Symfony component relies on the <code>HttpCache</code> class to handle requests. <code>HttpCache</code> uses internal headers like <code>X-Body-Eval</code> and <code>X-Body-File</code> to control the restoration of cached responses. The class was initially written with surrogate caching and ESI support in mind (all HTTP calls come from a trusted backend in that scenario). But when used by <code>CachingHttpClient</code> and if an attacker can control the response for a request being made by the <code>CachingHttpClient</code>, remote code execution is possible.</p>
<h2 id="resolution">Resolution</h2>
<p>HTTP headers designed for internal use in <code>HttpCache</code> are now stripped from remote responses before being passed to <code>HttpCache</code>.</p>
<p>The patch for this issue is available <a href="https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78">here</a> for the 4.4 branch.</p>
<h2 id="credits">Credits</h2>
<p>I would like to thank Matthias Pigulla (webfactory GmbH) for reporting and fixing the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/security/advisories/GHSA-754h-5r27-7x3r">https://github.com/symfony/symfony/security/advisories/GHSA-754h-5r27-7x3r</a></li>
<li><a href="https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78">https://github.com/symfony/symfony/commit/d9910e0b33a2e0f993abff41c6fbc86951b66d78</a></li>
<li><a href="https://packagist.org/packages/symfony/http-kernel">https://packagist.org/packages/symfony/http-kernel</a></li>
<li><a href="https://packagist.org/packages/symfony/symfony">https://packagist.org/packages/symfony/symfony</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-15094">https://nvd.nist.gov/vuln/detail/CVE-2020-15094</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VAQJXAKWPMWB7OL6QPG2ZSEQZYYPU5RC/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/VAQJXAKWPMWB7OL6QPG2ZSEQZYYPU5RC/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HNGUWOEETOFVH4PN3I3YO4QZHQ4AUKF3/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/HNGUWOEETOFVH4PN3I3YO4QZHQ4AUKF3/</a></li>
<li><a href="https://github.com/advisories/GHSA-754h-5r27-7x3r">https://github.com/advisories/GHSA-754h-5r27-7x3r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-754h-5r27-7x3r</uri>
        </author>
        <published>2020-09-02T17:29:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[matyhtf/framework] Path manipulation in matyhtf/framework]]></title>
        <id>https://github.com/advisories/GHSA-mh9j-v6mq-pfch</id>
        <link href="https://github.com/advisories/GHSA-mh9j-v6mq-pfch"/>
        <updated>2022-03-18T15:08:05.000Z</updated>
        <content type="html"><![CDATA[<p>matyhtf framework v3.0.5 is affected by a path manipulation vulnerability in Smarty.class.php. The issue was fixed in version 3.0.6.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-43676">https://nvd.nist.gov/vuln/detail/CVE-2021-43676</a></li>
<li><a href="https://github.com/matyhtf/framework/issues/206">https://github.com/matyhtf/framework/issues/206</a></li>
<li><a href="https://github.com/matyhtf/framework/commit/25084603b7ea771eebe263d39744fe6abf1f8d61">https://github.com/matyhtf/framework/commit/25084603b7ea771eebe263d39744fe6abf1f8d61</a></li>
<li><a href="https://github.com/advisories/GHSA-mh9j-v6mq-pfch">https://github.com/advisories/GHSA-mh9j-v6mq-pfch</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mh9j-v6mq-pfch</uri>
        </author>
        <published>2021-12-04T00:01:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nystudio107/craft-seomatic] Server-side Template Injection in nystudio107/craft-seomatic]]></title>
        <id>https://github.com/advisories/GHSA-m3xv-x3ph-mq22</id>
        <link href="https://github.com/advisories/GHSA-m3xv-x3ph-mq22"/>
        <updated>2022-03-18T13:10:15.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-side Template Injection (SSTI) vulnerability exists in Nystudio107 Seomatic prior to 3.4.12 in src/helpers/UrlHelper.php via the host header.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-44618">https://nvd.nist.gov/vuln/detail/CVE-2021-44618</a></li>
<li><a href="https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469">https://github.com/nystudio107/craft-seomatic/commit/0c5c0c0e0cb61000d12ec55ebf174745a5bf6469</a></li>
<li><a href="https://github.com/nystudio107/craft-seomatic/releases/tag/3.4.12">https://github.com/nystudio107/craft-seomatic/releases/tag/3.4.12</a></li>
<li><a href="https://github.com/advisories/GHSA-m3xv-x3ph-mq22">https://github.com/advisories/GHSA-m3xv-x3ph-mq22</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m3xv-x3ph-mq22</uri>
        </author>
        <published>2022-03-12T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyadmin/phpmyadmin] Exposure of Sensitive Information to an Unauthorized Actor in PhpMyAdmin]]></title>
        <id>https://github.com/advisories/GHSA-vx8q-j7h9-vf6q</id>
        <link href="https://github.com/advisories/GHSA-vx8q-j7h9-vf6q"/>
        <updated>2022-03-17T21:44:09.000Z</updated>
        <content type="html"><![CDATA[<p>PhpMyAdmin before 5.1.3 allows an attacker to retrieve potentially sensitive information by creating invalid requests. This affects the lang parameter, the pma_parameter, and the cookie section.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0813">https://nvd.nist.gov/vuln/detail/CVE-2022-0813</a></li>
<li><a href="https://www.incibe-cert.es/en/early-warning/security-advisories/phpmyadmin-exposure-sensitive-information">https://www.incibe-cert.es/en/early-warning/security-advisories/phpmyadmin-exposure-sensitive-information</a></li>
<li><a href="https://www.phpmyadmin.net/news/2022/2/11/phpmyadmin-4910-and-513-are-released/">https://www.phpmyadmin.net/news/2022/2/11/phpmyadmin-4910-and-513-are-released/</a></li>
<li><a href="https://github.com/advisories/GHSA-vx8q-j7h9-vf6q">https://github.com/advisories/GHSA-vx8q-j7h9-vf6q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vx8q-j7h9-vf6q</uri>
        </author>
        <published>2022-03-11T00:02:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[showdoc/showdoc] Cross-site Scripting in showdoc/showdoc]]></title>
        <id>https://github.com/advisories/GHSA-rphc-h572-2x9f</id>
        <link href="https://github.com/advisories/GHSA-rphc-h572-2x9f"/>
        <updated>2022-03-18T13:37:27.000Z</updated>
        <content type="html"><![CDATA[<p>showdoc/showdoc allows .properties files to upload which lead to stored XSS in versions prior to 2.10.4. This allows attackers to execute malicious scripts in the user's browser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0960">https://nvd.nist.gov/vuln/detail/CVE-2022-0960</a></li>
<li><a href="https://github.com/star7th/showdoc/commit/92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f">https://github.com/star7th/showdoc/commit/92bc6a83a3a60e01a0d2effb98ab47d8d7eab28f</a></li>
<li><a href="https://huntr.dev/bounties/462cd8a7-b1a9-4e93-af71-b56ba1d7ad4e">https://huntr.dev/bounties/462cd8a7-b1a9-4e93-af71-b56ba1d7ad4e</a></li>
<li><a href="https://github.com/advisories/GHSA-rphc-h572-2x9f">https://github.com/advisories/GHSA-rphc-h572-2x9f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rphc-h572-2x9f</uri>
        </author>
        <published>2022-03-15T00:00:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/grid-bundle] DQL injection through sorting parameters blocked]]></title>
        <id>https://github.com/advisories/GHSA-2xmm-g482-4439</id>
        <link href="https://github.com/advisories/GHSA-2xmm-g482-4439"/>
        <updated>2022-03-18T13:39:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Values added at the end of query sorting were passed directly to the DB. We don't know, if it could lead to direct SQL injections, however, we should not allow for easy injection of values there anyway.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in version 1.10.1 and in 1.11-rc.1</p>
<h3 id="workarounds">Workarounds</h3>
<p>You have to overwrite your <code>Sylius\Component\Grid\Sorting\Sorter.php</code> class:</p>
<pre><code class="language-php">&lt;?php

// src/App/Sorting/Sorter.php

declare(strict_types=1);

namespace App\Sorting;

use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Sylius\Component\Grid\Data\DataSourceInterface;
use Sylius\Component\Grid\Definition\Grid;
use Sylius\Component\Grid\Parameters;
use Sylius\Component\Grid\Sorting\SorterInterface;

final class Sorter implements SorterInterface
{
    public function sort(DataSourceInterface $dataSource, Grid $grid, Parameters $parameters): void
    {
        $enabledFields = $grid-&gt;getFields();
        $expressionBuilder = $dataSource-&gt;getExpressionBuilder();

        $sorting = $parameters-&gt;get('sorting', $grid-&gt;getSorting());
        $this-&gt;validateSortingParams($sorting, $enabledFields);

        foreach ($sorting as $field =&gt; $order) {
            $this-&gt;validateFieldNames($field, $enabledFields);

            $gridField = $grid-&gt;getField($field);
            $property = $gridField-&gt;getSortable();

            if (null !== $property) {
                $expressionBuilder-&gt;addOrderBy($property, $order);
            }
        }
    }

    private function validateSortingParams(array $sorting, array $enabledFields): void
    {
        foreach (array_keys($enabledFields) as $key) {
            if (array_key_exists($key, $sorting) &amp;&amp; !in_array($sorting[$key], ['asc', 'desc'])) {
                throw new BadRequestHttpException(sprintf('%s is not valid, use asc or desc instead.', $sorting[$key]));
            }
        }
    }

    private function validateFieldNames(string $fieldName, array $enabledFields): void
    {
        $enabledFieldsNames = array_keys($enabledFields);

        if (!in_array($fieldName, $enabledFieldsNames, true)) {
            throw new BadRequestHttpException(sprintf('%s is not valid field, did you mean one of these: %s?', $fieldName, implode(', ', $enabledFieldsNames)));
        }
    }
}
</code></pre>
<p>and register it in your container: </p>
<pre><code class="language-yaml"># config/services.yaml
services:
    # ...
    sylius.grid.sorter:
        class: App\Sorting\Sorter
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a><h3 id="references">References</h3>
</li>
</ul>
<ul>
<li><a href="https://github.com/Sylius/SyliusGridBundle/security/advisories/GHSA-2xmm-g482-4439">https://github.com/Sylius/SyliusGridBundle/security/advisories/GHSA-2xmm-g482-4439</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24752">https://nvd.nist.gov/vuln/detail/CVE-2022-24752</a></li>
<li><a href="https://github.com/Sylius/SyliusGridBundle/pull/222">https://github.com/Sylius/SyliusGridBundle/pull/222</a></li>
<li><a href="https://github.com/Sylius/SyliusGridBundle/commit/73d0791d0575f955e830a3da4c3345f420d2f784">https://github.com/Sylius/SyliusGridBundle/commit/73d0791d0575f955e830a3da4c3345f420d2f784</a></li>
<li><a href="https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.10.1">https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.10.1</a></li>
<li><a href="https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.11.0-RC.2">https://github.com/Sylius/SyliusGridBundle/releases/tag/v1.11.0-RC.2</a></li>
<li><a href="https://github.com/advisories/GHSA-2xmm-g482-4439">https://github.com/advisories/GHSA-2xmm-g482-4439</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2xmm-g482-4439</uri>
        </author>
        <published>2022-03-15T19:09:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microweber/microweber] Cross-site Scripting in microweber]]></title>
        <id>https://github.com/advisories/GHSA-jjp3-m93h-5jm4</id>
        <link href="https://github.com/advisories/GHSA-jjp3-m93h-5jm4"/>
        <updated>2022-03-17T21:54:01.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 1.2.12.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0928">https://nvd.nist.gov/vuln/detail/CVE-2022-0928</a></li>
<li><a href="https://github.com/microweber/microweber/commit/fc9137c031f7edec5f50d73b300919fb519c924a">https://github.com/microweber/microweber/commit/fc9137c031f7edec5f50d73b300919fb519c924a</a></li>
<li><a href="https://huntr.dev/bounties/085aafdd-ba50-44c7-9650-fa573da29bcd">https://huntr.dev/bounties/085aafdd-ba50-44c7-9650-fa573da29bcd</a></li>
<li><a href="https://github.com/advisories/GHSA-jjp3-m93h-5jm4">https://github.com/advisories/GHSA-jjp3-m93h-5jm4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jjp3-m93h-5jm4</uri>
        </author>
        <published>2022-03-12T00:00:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microweber/microweber] Unrestricted Upload of File with Dangerous Type in microweber]]></title>
        <id>https://github.com/advisories/GHSA-6vx5-cg2p-7g5v</id>
        <link href="https://github.com/advisories/GHSA-6vx5-cg2p-7g5v"/>
        <updated>2022-03-17T21:54:05.000Z</updated>
        <content type="html"><![CDATA[<p>Unrestricted Upload of File with Dangerous Type in GitHub repository microweber/microweber prior to 1.2.11.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0912">https://nvd.nist.gov/vuln/detail/CVE-2022-0912</a></li>
<li><a href="https://github.com/microweber/microweber/commit/24245297231f5dc88bb3a2b20d0e4e25b0ebc789">https://github.com/microweber/microweber/commit/24245297231f5dc88bb3a2b20d0e4e25b0ebc789</a></li>
<li><a href="https://huntr.dev/bounties/ae5bb359-7e53-498b-848e-540c05b44c54">https://huntr.dev/bounties/ae5bb359-7e53-498b-848e-540c05b44c54</a></li>
<li><a href="https://github.com/advisories/GHSA-6vx5-cg2p-7g5v">https://github.com/advisories/GHSA-6vx5-cg2p-7g5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6vx5-cg2p-7g5v</uri>
        </author>
        <published>2022-03-12T00:00:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[intelliants/subrion] Cross Site Request Forgery in intelliants/subrion]]></title>
        <id>https://github.com/advisories/GHSA-9cc3-5w85-pxvx</id>
        <link href="https://github.com/advisories/GHSA-9cc3-5w85-pxvx"/>
        <updated>2022-03-17T21:38:41.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Request Forgery (CSRF) vulnerability exists in Intelliants Subrion CMS v4.2.1 via the Members administrator function, which could let a remote unauthenticated malicious user send an authorised request to victim and successfully create an arbitrary administrator user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-18326">https://nvd.nist.gov/vuln/detail/CVE-2020-18326</a></li>
<li><a href="https://github.com/hamm0nz/CVE-2020-18326">https://github.com/hamm0nz/CVE-2020-18326</a></li>
<li><a href="https://github.com/advisories/GHSA-9cc3-5w85-pxvx">https://github.com/advisories/GHSA-9cc3-5w85-pxvx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cc3-5w85-pxvx</uri>
        </author>
        <published>2022-03-05T00:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[intelliants/subrion] Cross-site Scripting in intelliants/subrion]]></title>
        <id>https://github.com/advisories/GHSA-pcwq-7wrw-r8jv</id>
        <link href="https://github.com/advisories/GHSA-pcwq-7wrw-r8jv"/>
        <updated>2022-03-17T21:38:56.000Z</updated>
        <content type="html"><![CDATA[<p>Multilple Cross Site Scripting (XSS) vulnerability exists in Intelliants Subrion CMS v4.2.1 in the Configuration panel.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-18325">https://nvd.nist.gov/vuln/detail/CVE-2020-18325</a></li>
<li><a href="https://github.com/hamm0nz/CVE-2020-18325">https://github.com/hamm0nz/CVE-2020-18325</a></li>
<li><a href="https://github.com/advisories/GHSA-pcwq-7wrw-r8jv">https://github.com/advisories/GHSA-pcwq-7wrw-r8jv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pcwq-7wrw-r8jv</uri>
        </author>
        <published>2022-03-05T00:00:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microweber/microweber] Cross-site Scripting in microweber]]></title>
        <id>https://github.com/advisories/GHSA-5fxf-x22x-5q38</id>
        <link href="https://github.com/advisories/GHSA-5fxf-x22x-5q38"/>
        <updated>2022-03-17T22:23:53.000Z</updated>
        <content type="html"><![CDATA[<p>XSS on dynamic_text module in GitHub repository microweber/microweber prior to 1.2.11.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0929">https://nvd.nist.gov/vuln/detail/CVE-2022-0929</a></li>
<li><a href="https://github.com/microweber/microweber/commit/de6d17b52d261902653fbdd2ecefcaac82e54256">https://github.com/microweber/microweber/commit/de6d17b52d261902653fbdd2ecefcaac82e54256</a></li>
<li><a href="https://huntr.dev/bounties/66abf7ec-2dd7-4cb7-87f5-e91375883f03">https://huntr.dev/bounties/66abf7ec-2dd7-4cb7-87f5-e91375883f03</a></li>
<li><a href="https://github.com/advisories/GHSA-5fxf-x22x-5q38">https://github.com/advisories/GHSA-5fxf-x22x-5q38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5fxf-x22x-5q38</uri>
        </author>
        <published>2022-03-13T00:00:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microweber/microweber] Cross-site Scripting in microweber]]></title>
        <id>https://github.com/advisories/GHSA-2cv6-6437-39p2</id>
        <link href="https://github.com/advisories/GHSA-2cv6-6437-39p2"/>
        <updated>2022-03-17T22:23:56.000Z</updated>
        <content type="html"><![CDATA[<p>File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0930">https://nvd.nist.gov/vuln/detail/CVE-2022-0930</a></li>
<li><a href="https://github.com/microweber/microweber/commit/33eb4cc0f80c1f86388c1862a8aee1061fa5d72e">https://github.com/microweber/microweber/commit/33eb4cc0f80c1f86388c1862a8aee1061fa5d72e</a></li>
<li><a href="https://huntr.dev/bounties/d184ce19-9608-42f1-bc3d-06ece2d9a993">https://huntr.dev/bounties/d184ce19-9608-42f1-bc3d-06ece2d9a993</a></li>
<li><a href="https://github.com/advisories/GHSA-2cv6-6437-39p2">https://github.com/advisories/GHSA-2cv6-6437-39p2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2cv6-6437-39p2</uri>
        </author>
        <published>2022-03-13T00:00:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[microweber/microweber] Cross-site Scripting in microweber]]></title>
        <id>https://github.com/advisories/GHSA-3q55-66g3-p8xq</id>
        <link href="https://github.com/advisories/GHSA-3q55-66g3-p8xq"/>
        <updated>2022-03-17T22:23:50.000Z</updated>
        <content type="html"><![CDATA[<p>File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-0926">https://nvd.nist.gov/vuln/detail/CVE-2022-0926</a></li>
<li><a href="https://github.com/microweber/microweber/commit/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120">https://github.com/microweber/microweber/commit/89200cfcc2cfefe5554721e7fa3cf52f6a2a9120</a></li>
<li><a href="https://huntr.dev/bounties/dc5d1555-0108-4627-b542-93352f35fa17">https://huntr.dev/bounties/dc5d1555-0108-4627-b542-93352f35fa17</a></li>
<li><a href="https://github.com/advisories/GHSA-3q55-66g3-p8xq">https://github.com/advisories/GHSA-3q55-66g3-p8xq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3q55-66g3-p8xq</uri>
        </author>
        <published>2022-03-13T00:00:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Sylius/Sylius] Improper sanitize of SVG files during content upload ('Cross-site Scripting') in sylius/sylius]]></title>
        <id>https://github.com/advisories/GHSA-4qrp-27r3-66fj</id>
        <link href="https://github.com/advisories/GHSA-4qrp-27r3-66fj"/>
        <updated>2022-03-18T15:22:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to upload an SVG file containing XSS code in the admin panel. In order to perform an XSS attack, the file itself has to be opened in a new card (or loaded outside of the IMG tag). The problem applies both to the files opened on the admin panel and shop pages.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.9.10, 1.10.11, 1.11.2, and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If there is a need to upload an SVG image type, on-upload sanitization has to be added. The way to achieve this is to require a library that will do the trick:</p>
<pre><code>composer require enshrined/svg-sanitize
</code></pre>
<p>The second step is all about performing a file content sanitization before writing it to the filesystem. It can be done by overwriting the service:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Uploader;

use enshrined\svgSanitize\Sanitizer;
use Gaufrette\Filesystem;
use Sylius\Component\Core\Generator\ImagePathGeneratorInterface;
use Sylius\Component\Core\Generator\UploadedImagePathGenerator;
use Sylius\Component\Core\Model\ImageInterface;
use Sylius\Component\Core\Uploader\ImageUploaderInterface;
use Symfony\Component\HttpFoundation\File\File;
use Webmozart\Assert\Assert;

final class ImageUploader implements ImageUploaderInterface
{
    private const MIME_SVG_XML = 'image/svg+xml';
    private const MIME_SVG = 'image/svg';

    /** @var Filesystem */
    protected $filesystem;

    /** @var ImagePathGeneratorInterface */
    protected $imagePathGenerator;

    /** @var Sanitizer */
    protected $sanitizer;

    public function __construct(
        Filesystem $filesystem,
        ?ImagePathGeneratorInterface $imagePathGenerator = null
    ) {
        $this-&gt;filesystem = $filesystem;

        if ($imagePathGenerator === null) {
            @trigger_error(sprintf(
                'Not passing an $imagePathGenerator to %s constructor is deprecated since Sylius 1.6 and will be not possible in Sylius 2.0.', self::class
            ), \E_USER_DEPRECATED);
        }

        $this-&gt;imagePathGenerator = $imagePathGenerator ?? new UploadedImagePathGenerator();
        $this-&gt;sanitizer = new Sanitizer();
    }

    public function upload(ImageInterface $image): void
    {
        if (!$image-&gt;hasFile()) {
            return;
        }

        /** @var File $file */
        $file = $image-&gt;getFile();

        Assert::isInstanceOf($file, File::class);

        $fileContent = $this-&gt;sanitizeContent(file_get_contents($file-&gt;getPathname()), $file-&gt;getMimeType());

        if (null !== $image-&gt;getPath() &amp;&amp; $this-&gt;has($image-&gt;getPath())) {
            $this-&gt;remove($image-&gt;getPath());
        }

        do {
            $path = $this-&gt;imagePathGenerator-&gt;generate($image);
        } while ($this-&gt;isAdBlockingProne($path) || $this-&gt;filesystem-&gt;has($path));

        $image-&gt;setPath($path);

        $this-&gt;filesystem-&gt;write($image-&gt;getPath(), $fileContent);
    }

    public function remove(string $path): bool
    {
        if ($this-&gt;filesystem-&gt;has($path)) {
            return $this-&gt;filesystem-&gt;delete($path);
        }

        return false;
    }

    protected function sanitizeContent(string $fileContent, string $mimeType): string
    {
        if (self::MIME_SVG_XML === $mimeType || self::MIME_SVG === $mimeType) {
            $fileContent = $this-&gt;sanitizer-&gt;sanitize($fileContent);
        }

        return $fileContent;
    }

    private function has(string $path): bool
    {
        return $this-&gt;filesystem-&gt;has($path);
    }

    /**
     * Will return true if the path is prone to be blocked by ad blockers
     */
    private function isAdBlockingProne(string $path): bool
    {
        return strpos($path, 'ad') !== false;
    }
}
</code></pre>
<p>After that, register service in the container:</p>
<pre><code class="language-yaml">services:
    sylius.image_uploader:
        class: App\Uploader\ImageUploader
        arguments:
            - '@gaufrette.sylius_image_filesystem'
            - '@Sylius\Component\Core\Generator\ImagePathGeneratorInterface'
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj">https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.9.10">https://github.com/Sylius/Sylius/releases/tag/v1.9.10</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24749">https://nvd.nist.gov/vuln/detail/CVE-2022-24749</a></li>
<li><a href="https://github.com/advisories/GHSA-4qrp-27r3-66fj">https://github.com/advisories/GHSA-4qrp-27r3-66fj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qrp-27r3-66fj</uri>
        </author>
        <published>2022-03-14T22:38:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Sylius/Sylius] Improper sanitize of SVG files during content upload ('Cross-site Scripting') in sylius/sylius]]></title>
        <id>https://github.com/advisories/GHSA-4qrp-27r3-66fj</id>
        <link href="https://github.com/advisories/GHSA-4qrp-27r3-66fj"/>
        <updated>2022-03-18T15:22:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to upload an SVG file containing XSS code in the admin panel. In order to perform an XSS attack, the file itself has to be opened in a new card (or loaded outside of the IMG tag). The problem applies both to the files opened on the admin panel and shop pages.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.9.10, 1.10.11, 1.11.2, and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If there is a need to upload an SVG image type, on-upload sanitization has to be added. The way to achieve this is to require a library that will do the trick:</p>
<pre><code>composer require enshrined/svg-sanitize
</code></pre>
<p>The second step is all about performing a file content sanitization before writing it to the filesystem. It can be done by overwriting the service:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Uploader;

use enshrined\svgSanitize\Sanitizer;
use Gaufrette\Filesystem;
use Sylius\Component\Core\Generator\ImagePathGeneratorInterface;
use Sylius\Component\Core\Generator\UploadedImagePathGenerator;
use Sylius\Component\Core\Model\ImageInterface;
use Sylius\Component\Core\Uploader\ImageUploaderInterface;
use Symfony\Component\HttpFoundation\File\File;
use Webmozart\Assert\Assert;

final class ImageUploader implements ImageUploaderInterface
{
    private const MIME_SVG_XML = 'image/svg+xml';
    private const MIME_SVG = 'image/svg';

    /** @var Filesystem */
    protected $filesystem;

    /** @var ImagePathGeneratorInterface */
    protected $imagePathGenerator;

    /** @var Sanitizer */
    protected $sanitizer;

    public function __construct(
        Filesystem $filesystem,
        ?ImagePathGeneratorInterface $imagePathGenerator = null
    ) {
        $this-&gt;filesystem = $filesystem;

        if ($imagePathGenerator === null) {
            @trigger_error(sprintf(
                'Not passing an $imagePathGenerator to %s constructor is deprecated since Sylius 1.6 and will be not possible in Sylius 2.0.', self::class
            ), \E_USER_DEPRECATED);
        }

        $this-&gt;imagePathGenerator = $imagePathGenerator ?? new UploadedImagePathGenerator();
        $this-&gt;sanitizer = new Sanitizer();
    }

    public function upload(ImageInterface $image): void
    {
        if (!$image-&gt;hasFile()) {
            return;
        }

        /** @var File $file */
        $file = $image-&gt;getFile();

        Assert::isInstanceOf($file, File::class);

        $fileContent = $this-&gt;sanitizeContent(file_get_contents($file-&gt;getPathname()), $file-&gt;getMimeType());

        if (null !== $image-&gt;getPath() &amp;&amp; $this-&gt;has($image-&gt;getPath())) {
            $this-&gt;remove($image-&gt;getPath());
        }

        do {
            $path = $this-&gt;imagePathGenerator-&gt;generate($image);
        } while ($this-&gt;isAdBlockingProne($path) || $this-&gt;filesystem-&gt;has($path));

        $image-&gt;setPath($path);

        $this-&gt;filesystem-&gt;write($image-&gt;getPath(), $fileContent);
    }

    public function remove(string $path): bool
    {
        if ($this-&gt;filesystem-&gt;has($path)) {
            return $this-&gt;filesystem-&gt;delete($path);
        }

        return false;
    }

    protected function sanitizeContent(string $fileContent, string $mimeType): string
    {
        if (self::MIME_SVG_XML === $mimeType || self::MIME_SVG === $mimeType) {
            $fileContent = $this-&gt;sanitizer-&gt;sanitize($fileContent);
        }

        return $fileContent;
    }

    private function has(string $path): bool
    {
        return $this-&gt;filesystem-&gt;has($path);
    }

    /**
     * Will return true if the path is prone to be blocked by ad blockers
     */
    private function isAdBlockingProne(string $path): bool
    {
        return strpos($path, 'ad') !== false;
    }
}
</code></pre>
<p>After that, register service in the container:</p>
<pre><code class="language-yaml">services:
    sylius.image_uploader:
        class: App\Uploader\ImageUploader
        arguments:
            - '@gaufrette.sylius_image_filesystem'
            - '@Sylius\Component\Core\Generator\ImagePathGeneratorInterface'
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj">https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.9.10">https://github.com/Sylius/Sylius/releases/tag/v1.9.10</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24749">https://nvd.nist.gov/vuln/detail/CVE-2022-24749</a></li>
<li><a href="https://github.com/advisories/GHSA-4qrp-27r3-66fj">https://github.com/advisories/GHSA-4qrp-27r3-66fj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qrp-27r3-66fj</uri>
        </author>
        <published>2022-03-14T22:38:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Sylius/Sylius] Improper sanitize of SVG files during content upload ('Cross-site Scripting') in sylius/sylius]]></title>
        <id>https://github.com/advisories/GHSA-4qrp-27r3-66fj</id>
        <link href="https://github.com/advisories/GHSA-4qrp-27r3-66fj"/>
        <updated>2022-03-18T15:22:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to upload an SVG file containing XSS code in the admin panel. In order to perform an XSS attack, the file itself has to be opened in a new card (or loaded outside of the IMG tag). The problem applies both to the files opened on the admin panel and shop pages.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.9.10, 1.10.11, 1.11.2, and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If there is a need to upload an SVG image type, on-upload sanitization has to be added. The way to achieve this is to require a library that will do the trick:</p>
<pre><code>composer require enshrined/svg-sanitize
</code></pre>
<p>The second step is all about performing a file content sanitization before writing it to the filesystem. It can be done by overwriting the service:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Uploader;

use enshrined\svgSanitize\Sanitizer;
use Gaufrette\Filesystem;
use Sylius\Component\Core\Generator\ImagePathGeneratorInterface;
use Sylius\Component\Core\Generator\UploadedImagePathGenerator;
use Sylius\Component\Core\Model\ImageInterface;
use Sylius\Component\Core\Uploader\ImageUploaderInterface;
use Symfony\Component\HttpFoundation\File\File;
use Webmozart\Assert\Assert;

final class ImageUploader implements ImageUploaderInterface
{
    private const MIME_SVG_XML = 'image/svg+xml';
    private const MIME_SVG = 'image/svg';

    /** @var Filesystem */
    protected $filesystem;

    /** @var ImagePathGeneratorInterface */
    protected $imagePathGenerator;

    /** @var Sanitizer */
    protected $sanitizer;

    public function __construct(
        Filesystem $filesystem,
        ?ImagePathGeneratorInterface $imagePathGenerator = null
    ) {
        $this-&gt;filesystem = $filesystem;

        if ($imagePathGenerator === null) {
            @trigger_error(sprintf(
                'Not passing an $imagePathGenerator to %s constructor is deprecated since Sylius 1.6 and will be not possible in Sylius 2.0.', self::class
            ), \E_USER_DEPRECATED);
        }

        $this-&gt;imagePathGenerator = $imagePathGenerator ?? new UploadedImagePathGenerator();
        $this-&gt;sanitizer = new Sanitizer();
    }

    public function upload(ImageInterface $image): void
    {
        if (!$image-&gt;hasFile()) {
            return;
        }

        /** @var File $file */
        $file = $image-&gt;getFile();

        Assert::isInstanceOf($file, File::class);

        $fileContent = $this-&gt;sanitizeContent(file_get_contents($file-&gt;getPathname()), $file-&gt;getMimeType());

        if (null !== $image-&gt;getPath() &amp;&amp; $this-&gt;has($image-&gt;getPath())) {
            $this-&gt;remove($image-&gt;getPath());
        }

        do {
            $path = $this-&gt;imagePathGenerator-&gt;generate($image);
        } while ($this-&gt;isAdBlockingProne($path) || $this-&gt;filesystem-&gt;has($path));

        $image-&gt;setPath($path);

        $this-&gt;filesystem-&gt;write($image-&gt;getPath(), $fileContent);
    }

    public function remove(string $path): bool
    {
        if ($this-&gt;filesystem-&gt;has($path)) {
            return $this-&gt;filesystem-&gt;delete($path);
        }

        return false;
    }

    protected function sanitizeContent(string $fileContent, string $mimeType): string
    {
        if (self::MIME_SVG_XML === $mimeType || self::MIME_SVG === $mimeType) {
            $fileContent = $this-&gt;sanitizer-&gt;sanitize($fileContent);
        }

        return $fileContent;
    }

    private function has(string $path): bool
    {
        return $this-&gt;filesystem-&gt;has($path);
    }

    /**
     * Will return true if the path is prone to be blocked by ad blockers
     */
    private function isAdBlockingProne(string $path): bool
    {
        return strpos($path, 'ad') !== false;
    }
}
</code></pre>
<p>After that, register service in the container:</p>
<pre><code class="language-yaml">services:
    sylius.image_uploader:
        class: App\Uploader\ImageUploader
        arguments:
            - '@gaufrette.sylius_image_filesystem'
            - '@Sylius\Component\Core\Generator\ImagePathGeneratorInterface'
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj">https://github.com/Sylius/Sylius/security/advisories/GHSA-4qrp-27r3-66fj</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.9.10">https://github.com/Sylius/Sylius/releases/tag/v1.9.10</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24749">https://nvd.nist.gov/vuln/detail/CVE-2022-24749</a></li>
<li><a href="https://github.com/advisories/GHSA-4qrp-27r3-66fj">https://github.com/advisories/GHSA-4qrp-27r3-66fj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qrp-27r3-66fj</uri>
        </author>
        <published>2022-03-14T22:38:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Insufficient Session Expiration in Sylius]]></title>
        <id>https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</id>
        <link href="https://github.com/advisories/GHSA-mf3v-f2qq-pf9g"/>
        <updated>2022-03-18T13:11:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The reset password token was not set to null after the password was changed. This is causing behaviour in which the same token can be used several times, so it can result in a leak of the existing token and an unauthorised password change.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.10.11, 1.11.2 and above</p>
<h3 id="workarounds">Workarounds</h3>
<p>You have to overwrite your <code>Sylius\Bundle\ApiBundle\CommandHandler\ResetPasswordHandler</code> class using this code:</p>
<pre><code class="language-php">&lt;?php
declare(strict_types=1);

namespace App\CommandHandler\Account;

use Sylius\Bundle\ApiBundle\Command\Account\ResetPassword;
use Sylius\Component\Core\Model\ShopUserInterface;
use Sylius\Component\Resource\Metadata\MetadataInterface;
use Sylius\Component\User\Repository\UserRepositoryInterface;
use Sylius\Component\User\Security\PasswordUpdaterInterface;
use Symfony\Component\Messenger\Handler\MessageHandlerInterface;
use Webmozart\Assert\Assert;

final class ResetPasswordHandler implements MessageHandlerInterface
{
    private UserRepositoryInterface $userRepository;
    private MetadataInterface $metadata;
    private PasswordUpdaterInterface $passwordUpdater;

    public function __construct(
        UserRepositoryInterface $userRepository,
        MetadataInterface $metadata,
        PasswordUpdaterInterface $passwordUpdater
    ) {
        $this-&gt;userRepository = $userRepository;
        $this-&gt;metadata = $metadata;
        $this-&gt;passwordUpdater = $passwordUpdater;
    }

    public function __invoke(ResetPassword $command): void
    {
        /** @var ShopUserInterface|null $user */
        $user = $this-&gt;userRepository-&gt;findOneBy(['passwordResetToken' =&gt; $command-&gt;resetPasswordToken]);

        Assert::notNull($user, 'No user found with reset token: ' . $command-&gt;resetPasswordToken);

        $resetting = $this-&gt;metadata-&gt;getParameter('resetting');
        $lifetime = new \DateInterval($resetting['token']['ttl']);

        if (!$user-&gt;isPasswordRequestNonExpired($lifetime)) {
            throw new \InvalidArgumentException('Password reset token has expired');
        }

        if ($command-&gt;resetPasswordToken !== $user-&gt;getPasswordResetToken()) {
            throw new \InvalidArgumentException('Password reset token does not match.');
        }

        $user-&gt;setPlainPassword($command-&gt;newPassword);

        $this-&gt;passwordUpdater-&gt;updatePassword($user);
        $user-&gt;setPasswordResetToken(null);
    }
}
</code></pre>
<p>And register it in container:</p>
<pre><code class="language-yaml">
App\CommandHandler\Account\ResetPasswordHandler:
    arguments:
        - '@sylius.repository.shop_user'
        - !service
              class: Sylius\Component\Resource\Metadata\MetadataInterface
              factory: [ '@sylius.resource_registry', 'get' ]
              arguments:
                    - 'sylius.shop_user'
                    - '@sylius.security.password_updater'
    tags:
        - { name: messenger.message_handler, bus: sylius.command_bus }
        - { name: messenger.message_handler, bus: sylius_default.bus }
         
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-mf3v-f2qq-pf9g">https://github.com/Sylius/Sylius/security/advisories/GHSA-mf3v-f2qq-pf9g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24743">https://nvd.nist.gov/vuln/detail/CVE-2022-24743</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/advisories/GHSA-mf3v-f2qq-pf9g">https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</uri>
        </author>
        <published>2022-03-14T22:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Insufficient Session Expiration in Sylius]]></title>
        <id>https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</id>
        <link href="https://github.com/advisories/GHSA-mf3v-f2qq-pf9g"/>
        <updated>2022-03-18T13:11:57.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The reset password token was not set to null after the password was changed. This is causing behaviour in which the same token can be used several times, so it can result in a leak of the existing token and an unauthorised password change.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.10.11, 1.11.2 and above</p>
<h3 id="workarounds">Workarounds</h3>
<p>You have to overwrite your <code>Sylius\Bundle\ApiBundle\CommandHandler\ResetPasswordHandler</code> class using this code:</p>
<pre><code class="language-php">&lt;?php
declare(strict_types=1);

namespace App\CommandHandler\Account;

use Sylius\Bundle\ApiBundle\Command\Account\ResetPassword;
use Sylius\Component\Core\Model\ShopUserInterface;
use Sylius\Component\Resource\Metadata\MetadataInterface;
use Sylius\Component\User\Repository\UserRepositoryInterface;
use Sylius\Component\User\Security\PasswordUpdaterInterface;
use Symfony\Component\Messenger\Handler\MessageHandlerInterface;
use Webmozart\Assert\Assert;

final class ResetPasswordHandler implements MessageHandlerInterface
{
    private UserRepositoryInterface $userRepository;
    private MetadataInterface $metadata;
    private PasswordUpdaterInterface $passwordUpdater;

    public function __construct(
        UserRepositoryInterface $userRepository,
        MetadataInterface $metadata,
        PasswordUpdaterInterface $passwordUpdater
    ) {
        $this-&gt;userRepository = $userRepository;
        $this-&gt;metadata = $metadata;
        $this-&gt;passwordUpdater = $passwordUpdater;
    }

    public function __invoke(ResetPassword $command): void
    {
        /** @var ShopUserInterface|null $user */
        $user = $this-&gt;userRepository-&gt;findOneBy(['passwordResetToken' =&gt; $command-&gt;resetPasswordToken]);

        Assert::notNull($user, 'No user found with reset token: ' . $command-&gt;resetPasswordToken);

        $resetting = $this-&gt;metadata-&gt;getParameter('resetting');
        $lifetime = new \DateInterval($resetting['token']['ttl']);

        if (!$user-&gt;isPasswordRequestNonExpired($lifetime)) {
            throw new \InvalidArgumentException('Password reset token has expired');
        }

        if ($command-&gt;resetPasswordToken !== $user-&gt;getPasswordResetToken()) {
            throw new \InvalidArgumentException('Password reset token does not match.');
        }

        $user-&gt;setPlainPassword($command-&gt;newPassword);

        $this-&gt;passwordUpdater-&gt;updatePassword($user);
        $user-&gt;setPasswordResetToken(null);
    }
}
</code></pre>
<p>And register it in container:</p>
<pre><code class="language-yaml">
App\CommandHandler\Account\ResetPasswordHandler:
    arguments:
        - '@sylius.repository.shop_user'
        - !service
              class: Sylius\Component\Resource\Metadata\MetadataInterface
              factory: [ '@sylius.resource_registry', 'get' ]
              arguments:
                    - 'sylius.shop_user'
                    - '@sylius.security.password_updater'
    tags:
        - { name: messenger.message_handler, bus: sylius.command_bus }
        - { name: messenger.message_handler, bus: sylius_default.bus }
         
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-mf3v-f2qq-pf9g">https://github.com/Sylius/Sylius/security/advisories/GHSA-mf3v-f2qq-pf9g</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24743">https://nvd.nist.gov/vuln/detail/CVE-2022-24743</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/advisories/GHSA-mf3v-f2qq-pf9g">https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mf3v-f2qq-pf9g</uri>
        </author>
        <published>2022-03-14T22:30:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sensitive Information Exposure in Sylius]]></title>
        <id>https://github.com/advisories/GHSA-7563-75j9-6h5p</id>
        <link href="https://github.com/advisories/GHSA-7563-75j9-6h5p"/>
        <updated>2022-03-18T13:11:43.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Any other user can view the data if the browser tab remains open after logging out. Once someone logs out and leaves the browser open, the potential attacker may use the back button to see the content exposed on given screens. No action may be performed though, and any website refresh will block further reads. It may, however, lead to a data leak, like for example customer details, payment gateway configuration, etc.- but only if these were pages checked by the administrator. </p>
<p>This vulnerability requires full access to the computer to take advantage of it.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.9.10, 1.10.11, 1.11.2 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The application must strictly redirect to the login page even when the browser back button is pressed. Another possibility is to set more strict cache policies for restricted content (like no-store). It can be achieved with the following class:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\EventListener;

use App\SectionResolver\ShopCustomerAccountSubSection;
use Sylius\Bundle\AdminBundle\SectionResolver\AdminSection;
use Sylius\Bundle\CoreBundle\SectionResolver\SectionProviderInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\ResponseEvent;
use Symfony\Component\HttpKernel\KernelEvents;

final class CacheControlSubscriber implements EventSubscriberInterface
{
    /** @var SectionProviderInterface */
    private $sectionProvider;

    public function __construct(SectionProviderInterface $sectionProvider)
    {
        $this-&gt;sectionProvider = $sectionProvider;
    }

    public static function getSubscribedEvents(): array
    {
        return [
            KernelEvents::RESPONSE =&gt; 'setCacheControlDirectives',
        ];
    }

    public function setCacheControlDirectives(ResponseEvent $event): void
    {
        if (
            !$this-&gt;sectionProvider-&gt;getSection() instanceof AdminSection &amp;&amp;
            !$this-&gt;sectionProvider-&gt;getSection() instanceof ShopCustomerAccountSubSection
        ) {
            return;
        }

        $response = $event-&gt;getResponse();

        $response-&gt;headers-&gt;addCacheControlDirective('no-cache', true);
        $response-&gt;headers-&gt;addCacheControlDirective('max-age', '0');
        $response-&gt;headers-&gt;addCacheControlDirective('must-revalidate', true);
        $response-&gt;headers-&gt;addCacheControlDirective('no-store', true);
    }
}
</code></pre>
<p>After that register service in the container:</p>
<pre><code class="language-yaml">services:
    App\EventListener\CacheControlSubscriber:
        arguments: ['@sylius.section_resolver.uri_based_section_resolver']
        tags:
            - { name: kernel.event_subscriber, event: kernel.response }
</code></pre>
<p>The code above requires changes in <code>ShopUriBasedSectionResolver</code> in order to work. To backport mentioned logic, you need to replace the <code>Sylius\Bundle\ShopBundle\SectionResolver\ShopUriBasedSectionResolver</code> class with:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\SectionResolver;

use Sylius\Bundle\CoreBundle\SectionResolver\SectionInterface;
use Sylius\Bundle\CoreBundle\SectionResolver\UriBasedSectionResolverInterface;
use Sylius\Bundle\ShopBundle\SectionResolver\ShopSection;

final class ShopUriBasedSectionResolver implements UriBasedSectionResolverInterface
{
    /** @var string */
    private $shopCustomerAccountUri;

    public function __construct(string $shopCustomerAccountUri = 'account')
    {
        $this-&gt;shopCustomerAccountUri = $shopCustomerAccountUri;
    }

    public function getSection(string $uri): SectionInterface
    {
        if (str_contains($uri, $this-&gt;shopCustomerAccountUri)) {
            return new ShopCustomerAccountSubSection();
        }

        return new ShopSection();
    }
}
</code></pre>
<pre><code class="language-yaml">services:
    sylius.section_resolver.shop_uri_based_section_resolver:
        class: App\SectionResolver\ShopUriBasedSectionResolver
        tags:
            - { name: sylius.uri_based_section_resolver, priority: -10 }
</code></pre>
<p>You also need to define a new subsection for the Customer Account that is used in the above services:</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\SectionResolver;

use Sylius\Bundle\ShopBundle\SectionResolver\ShopSection;

class ShopCustomerAccountSubSection extends ShopSection
{
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li>Originally published at <a href="https://huntr.dev/">https://huntr.dev/</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-7563-75j9-6h5p">https://github.com/Sylius/Sylius/security/advisories/GHSA-7563-75j9-6h5p</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-24742">https://nvd.nist.gov/vuln/detail/CVE-2022-24742</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.10.11">https://github.com/Sylius/Sylius/releases/tag/v1.10.11</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.11.2">https://github.com/Sylius/Sylius/releases/tag/v1.11.2</a></li>
<li><a href="https://github.com/Sylius/Sylius/releases/tag/v1.9.10">https://github.com/Sylius/Sylius/releases/tag/v1.9.10</a></li>
<li><a href="https://github.com/advisories/GHSA-7563-75j9-6h5p">https://github.com/advisories/GHSA-7563-75j9-6h5p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7563-75j9-6h5p</uri>
        </author>
        <published>2022-03-14T22:26:58.000Z</published>
    </entry>
</feed>