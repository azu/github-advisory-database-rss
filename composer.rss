<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-05-11T17:01:10.750Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[mdanter/ecc] mdanter/ecc affected by timing vulnerability in cryptographic side-channels]]></title>
        <id>https://github.com/advisories/GHSA-3494-cfwf-56hw</id>
        <link href="https://github.com/advisories/GHSA-3494-cfwf-56hw"/>
        <updated>2024-05-10T22:01:50.000Z</updated>
        <content type="html"><![CDATA[<p>phpecc, as used in <strong>all versions</strong> of mdanter/ecc, as well as paragonie/ecc before 2.0.1, has a branch-based timing leak in Point addition. (This Composer package is also known as phpecc/phpecc on GitHub, previously known as the Matyas Danter ECC library.)</p>
<p>Paragon Initiative Enterprises <a href="https://github.com/phpecc/phpecc/issues/289">hard-forked phpecc/phpecc</a> and discovered the issue in the original code, then released v2.0.1 which fixes the vulnerability. <a href="https://github.com/phpecc/phpecc">The upstream code</a> is no longer maintained and remains vulnerable for all versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33851">https://nvd.nist.gov/vuln/detail/CVE-2024-33851</a></li>
<li><a href="https://github.com/paragonie/phpecc/releases/tag/v2.0.1">https://github.com/paragonie/phpecc/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/phpecc/phpecc/issues/289">https://github.com/phpecc/phpecc/issues/289</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/mdanter/ecc/CVE-2024-33851.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/mdanter/ecc/CVE-2024-33851.yaml</a></li>
<li><a href="https://github.com/paragonie/phpecc/releases/tag/v2.0.0">https://github.com/paragonie/phpecc/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/advisories/GHSA-3494-cfwf-56hw">https://github.com/advisories/GHSA-3494-cfwf-56hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3494-cfwf-56hw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-28T00:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[paragonie/ecc] mdanter/ecc affected by timing vulnerability in cryptographic side-channels]]></title>
        <id>https://github.com/advisories/GHSA-3494-cfwf-56hw</id>
        <link href="https://github.com/advisories/GHSA-3494-cfwf-56hw"/>
        <updated>2024-05-10T22:01:50.000Z</updated>
        <content type="html"><![CDATA[<p>phpecc, as used in <strong>all versions</strong> of mdanter/ecc, as well as paragonie/ecc before 2.0.1, has a branch-based timing leak in Point addition. (This Composer package is also known as phpecc/phpecc on GitHub, previously known as the Matyas Danter ECC library.)</p>
<p>Paragon Initiative Enterprises <a href="https://github.com/phpecc/phpecc/issues/289">hard-forked phpecc/phpecc</a> and discovered the issue in the original code, then released v2.0.1 which fixes the vulnerability. <a href="https://github.com/phpecc/phpecc">The upstream code</a> is no longer maintained and remains vulnerable for all versions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-33851">https://nvd.nist.gov/vuln/detail/CVE-2024-33851</a></li>
<li><a href="https://github.com/paragonie/phpecc/releases/tag/v2.0.1">https://github.com/paragonie/phpecc/releases/tag/v2.0.1</a></li>
<li><a href="https://github.com/phpecc/phpecc/issues/289">https://github.com/phpecc/phpecc/issues/289</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/mdanter/ecc/CVE-2024-33851.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/mdanter/ecc/CVE-2024-33851.yaml</a></li>
<li><a href="https://github.com/paragonie/phpecc/releases/tag/v2.0.0">https://github.com/paragonie/phpecc/releases/tag/v2.0.0</a></li>
<li><a href="https://github.com/advisories/GHSA-3494-cfwf-56hw">https://github.com/advisories/GHSA-3494-cfwf-56hw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3494-cfwf-56hw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-28T00:30:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius has potential Cross Site Scripting vulnerability via the "Province" field in the Checkout and Address Book]]></title>
        <id>https://github.com/advisories/GHSA-7prj-9ccr-hr3q</id>
        <link href="https://github.com/advisories/GHSA-7prj-9ccr-hr3q"/>
        <updated>2024-05-10T15:33:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to save XSS code in province field in the Checkout and Address Book and then execute it on these pages. The problem occurs when you open the address step page in the checkout or edit the address in the address book. This only affects the base UI Shop provided by Sylius.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.16, 1.13.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Create new file <code>assets/shop/sylius-province-field.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/shop/sylius-province-field.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

const getProvinceInputValue = function getProvinceInputValue(valueSelector) {
  return valueSelector == undefined ? '' : `value="${sanitizeInput(valueSelector)}"`;
};

$.fn.extend({
  provinceField() {
    const countrySelect = $('select[name$="[countryCode]"]');

    countrySelect.on('change', (event) =&gt; {
      const select = $(event.currentTarget);
      const provinceContainer = select.parents('.field').next('div.province-container');

      const provinceSelectFieldName = select.attr('name').replace('country', 'province');
      const provinceInputFieldName = select.attr('name').replace('countryCode', 'provinceName');

      const provinceSelectFieldId = select.attr('id').replace('country', 'province');
      const provinceInputFieldId = select.attr('id').replace('countryCode', 'provinceName');

      const form = select.parents('form');

      if (select.val() === '' || select.val() == undefined) {
        provinceContainer.fadeOut('slow', () =&gt; {
          provinceContainer.html('');
        });

        return;
      }

      provinceContainer.attr('data-loading', true);
      form.addClass('loading');

      $.get(provinceContainer.attr('data-url'), { countryCode: select.val() }, (response) =&gt; {
        if (!response.content) {
          provinceContainer.fadeOut('slow', () =&gt; {
            provinceContainer.html('');

            provinceContainer.removeAttr('data-loading');
            form.removeClass('loading');
          });
        } else if (response.content.indexOf('select') !== -1) {
          provinceContainer.fadeOut('slow', () =&gt; {
            const provinceSelectValue = getProvinceInputValue((
              $(provinceContainer).find('select &gt; option[selected$="selected"]').val()
            ));

            provinceContainer.html((
              response.content
                .replace('name="sylius_address_province"', `name="${provinceSelectFieldName}"${provinceSelectValue}`)
                .replace('id="sylius_address_province"', `id="${provinceSelectFieldId}"`)
                .replace('option value="" selected="selected"', 'option value=""')
                .replace(`option ${provinceSelectValue}`, `option ${provinceSelectValue}" selected="selected"`)
            ));
            provinceContainer.addClass('required');
            provinceContainer.removeAttr('data-loading');

            provinceContainer.fadeIn('fast', () =&gt; {
              form.removeClass('loading');
            });
          });
        } else {
          provinceContainer.fadeOut('slow', () =&gt; {
            const provinceInputValue = getProvinceInputValue($(provinceContainer).find('input').val());

            provinceContainer.html((
              response.content
                .replace('name="sylius_address_province"', `name="${provinceInputFieldName}"${provinceInputValue}`)
                .replace('id="sylius_address_province"', `id="${provinceInputFieldId}"`)
            ));

            provinceContainer.removeAttr('data-loading');

            provinceContainer.fadeIn('fast', () =&gt; {
              form.removeClass('loading');
            });
          });
        }
      });
    });

    if (countrySelect.val() !== '') {
      countrySelect.trigger('change');
    }

    if ($.trim($('div.province-container').text()) === '') {
      $('select.country-select').trigger('change');
    }

    const shippingAddressCheckbox = $('input[type="checkbox"][name$="[differentShippingAddress]"]');
    const shippingAddressContainer = $('#sylius-shipping-address-container');
    const toggleShippingAddress = function toggleShippingAddress() {
      shippingAddressContainer.toggle(shippingAddressCheckbox.prop('checked'));
    };
    toggleShippingAddress();
    shippingAddressCheckbox.on('change', toggleShippingAddress);
  },
});
</code></pre>
<ol start="2">
<li>Add new import in <code>assets/shop/entry.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/shop/entry.js
// ...
import './sylius-province-field';
</code></pre>
<ol start="3">
<li>Rebuild your assets:</li>
</ol>
<pre><code class="language-bash">yarn build
</code></pre>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue has been reported by @r2tunes, thank you!</p>
<h3 id="references">References</h3>
<ul>
<li>The original advisory: <a href="https://github.com/advisories/GHSA-mw82-6m2g-qh6c">https://github.com/advisories/GHSA-mw82-6m2g-qh6c</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-7prj-9ccr-hr3q">https://github.com/Sylius/Sylius/security/advisories/GHSA-7prj-9ccr-hr3q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29376">https://nvd.nist.gov/vuln/detail/CVE-2024-29376</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/fb0ecb275747e364f1d4744ed8605c57f9bd8a80">https://github.com/Sylius/Sylius/commit/fb0ecb275747e364f1d4744ed8605c57f9bd8a80</a></li>
<li><a href="https://github.com/r2tunes/Reports/blob/main/Sylius.md">https://github.com/r2tunes/Reports/blob/main/Sylius.md</a></li>
<li><a href="https://github.com/advisories/GHSA-7prj-9ccr-hr3q">https://github.com/advisories/GHSA-7prj-9ccr-hr3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7prj-9ccr-hr3q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-10T15:33:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius has potential Cross Site Scripting vulnerability via the "Province" field in the Checkout and Address Book]]></title>
        <id>https://github.com/advisories/GHSA-7prj-9ccr-hr3q</id>
        <link href="https://github.com/advisories/GHSA-7prj-9ccr-hr3q"/>
        <updated>2024-05-10T15:33:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to save XSS code in province field in the Checkout and Address Book and then execute it on these pages. The problem occurs when you open the address step page in the checkout or edit the address in the address book. This only affects the base UI Shop provided by Sylius.</p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.16, 1.13.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Create new file <code>assets/shop/sylius-province-field.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/shop/sylius-province-field.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

const getProvinceInputValue = function getProvinceInputValue(valueSelector) {
  return valueSelector == undefined ? '' : `value="${sanitizeInput(valueSelector)}"`;
};

$.fn.extend({
  provinceField() {
    const countrySelect = $('select[name$="[countryCode]"]');

    countrySelect.on('change', (event) =&gt; {
      const select = $(event.currentTarget);
      const provinceContainer = select.parents('.field').next('div.province-container');

      const provinceSelectFieldName = select.attr('name').replace('country', 'province');
      const provinceInputFieldName = select.attr('name').replace('countryCode', 'provinceName');

      const provinceSelectFieldId = select.attr('id').replace('country', 'province');
      const provinceInputFieldId = select.attr('id').replace('countryCode', 'provinceName');

      const form = select.parents('form');

      if (select.val() === '' || select.val() == undefined) {
        provinceContainer.fadeOut('slow', () =&gt; {
          provinceContainer.html('');
        });

        return;
      }

      provinceContainer.attr('data-loading', true);
      form.addClass('loading');

      $.get(provinceContainer.attr('data-url'), { countryCode: select.val() }, (response) =&gt; {
        if (!response.content) {
          provinceContainer.fadeOut('slow', () =&gt; {
            provinceContainer.html('');

            provinceContainer.removeAttr('data-loading');
            form.removeClass('loading');
          });
        } else if (response.content.indexOf('select') !== -1) {
          provinceContainer.fadeOut('slow', () =&gt; {
            const provinceSelectValue = getProvinceInputValue((
              $(provinceContainer).find('select &gt; option[selected$="selected"]').val()
            ));

            provinceContainer.html((
              response.content
                .replace('name="sylius_address_province"', `name="${provinceSelectFieldName}"${provinceSelectValue}`)
                .replace('id="sylius_address_province"', `id="${provinceSelectFieldId}"`)
                .replace('option value="" selected="selected"', 'option value=""')
                .replace(`option ${provinceSelectValue}`, `option ${provinceSelectValue}" selected="selected"`)
            ));
            provinceContainer.addClass('required');
            provinceContainer.removeAttr('data-loading');

            provinceContainer.fadeIn('fast', () =&gt; {
              form.removeClass('loading');
            });
          });
        } else {
          provinceContainer.fadeOut('slow', () =&gt; {
            const provinceInputValue = getProvinceInputValue($(provinceContainer).find('input').val());

            provinceContainer.html((
              response.content
                .replace('name="sylius_address_province"', `name="${provinceInputFieldName}"${provinceInputValue}`)
                .replace('id="sylius_address_province"', `id="${provinceInputFieldId}"`)
            ));

            provinceContainer.removeAttr('data-loading');

            provinceContainer.fadeIn('fast', () =&gt; {
              form.removeClass('loading');
            });
          });
        }
      });
    });

    if (countrySelect.val() !== '') {
      countrySelect.trigger('change');
    }

    if ($.trim($('div.province-container').text()) === '') {
      $('select.country-select').trigger('change');
    }

    const shippingAddressCheckbox = $('input[type="checkbox"][name$="[differentShippingAddress]"]');
    const shippingAddressContainer = $('#sylius-shipping-address-container');
    const toggleShippingAddress = function toggleShippingAddress() {
      shippingAddressContainer.toggle(shippingAddressCheckbox.prop('checked'));
    };
    toggleShippingAddress();
    shippingAddressCheckbox.on('change', toggleShippingAddress);
  },
});
</code></pre>
<ol start="2">
<li>Add new import in <code>assets/shop/entry.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/shop/entry.js
// ...
import './sylius-province-field';
</code></pre>
<ol start="3">
<li>Rebuild your assets:</li>
</ol>
<pre><code class="language-bash">yarn build
</code></pre>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue has been reported by @r2tunes, thank you!</p>
<h3 id="references">References</h3>
<ul>
<li>The original advisory: <a href="https://github.com/advisories/GHSA-mw82-6m2g-qh6c">https://github.com/advisories/GHSA-mw82-6m2g-qh6c</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-7prj-9ccr-hr3q">https://github.com/Sylius/Sylius/security/advisories/GHSA-7prj-9ccr-hr3q</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29376">https://nvd.nist.gov/vuln/detail/CVE-2024-29376</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/fb0ecb275747e364f1d4744ed8605c57f9bd8a80">https://github.com/Sylius/Sylius/commit/fb0ecb275747e364f1d4744ed8605c57f9bd8a80</a></li>
<li><a href="https://github.com/r2tunes/Reports/blob/main/Sylius.md">https://github.com/r2tunes/Reports/blob/main/Sylius.md</a></li>
<li><a href="https://github.com/advisories/GHSA-7prj-9ccr-hr3q">https://github.com/advisories/GHSA-7prj-9ccr-hr3q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7prj-9ccr-hr3q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-10T15:33:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius potentially vulnerable to Cross Site Scripting via "Name" field (Taxons, Products, Options, Variants) in Admin Panel]]></title>
        <id>https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</id>
        <link href="https://github.com/advisories/GHSA-v2f9-rv6w-vw8r"/>
        <updated>2024-05-10T15:33:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to execute javascript code in the Admin panel. In order to perform an XSS attack input a script into <code>Name</code> field in which of the resources: Taxons, Products, Product Options or Product Variants. The code will be executed while using an autocomplete field with one of the listed entities in the Admin Panel. Also for the taxons in the category tree on the product form. </p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.16, 1.13.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Create new file <code>assets/admin/sylius-lazy-choice-tree.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-lazy-choice-tree.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

const createRootContainer = function createRootContainer() {
  return $('&lt;div class="ui list"&gt;&lt;/div&gt;');
};

const createLeafContainerElement = function createLeafContainerElement() {
  return $('&lt;div class="list"&gt;&lt;/div&gt;');
};

const createLeafIconElement = function createLeafIconElement() {
  return $('&lt;i class="folder icon"&gt;&lt;/i&gt;');
};

const createLeafTitleElement = function createLeafTitleElement() {
  return $('&lt;div class="header"&gt;&lt;/div&gt;');
};

const createLeafTitleSpan = function createLeafTitleSpan(displayName) {
  return $(`&lt;span style="margin-right: 5px; cursor: pointer;"&gt;${displayName}&lt;/span&gt;`);
};

const createLeafContentElement = function createLeafContentElement() {
  return $('&lt;div class="content"&gt;&lt;/div&gt;');
};

$.fn.extend({
  choiceTree(type, multiple, defaultLevel) {
    const tree = this;
    const loader = tree.find('.dimmer');
    const loadedLeafs = [];
    const $input = tree.find('input[type="hidden"]');

    const createCheckboxElement = function createCheckboxElement(name, code, multi) {
      const chosenNodes = $input.val().split(',');
      let checked = '';
      if (chosenNodes.some(chosenCode =&gt; chosenCode === code)) {
        checked = 'checked="checked"';
      }
      if (multi) {
        return $(`&lt;div class="ui checkbox" data-value="${code}"&gt;&lt;input ${checked} type="checkbox" name="${type}"&gt;&lt;/div&gt;`);
      }

      return $(`&lt;div class="ui radio checkbox" data-value="${code}"&gt;&lt;input ${checked} type="radio" name="${type}"&gt;&lt;/div&gt;`);
    };

    const isLeafLoaded = function isLeafLoaded(code) {
      return loadedLeafs.some(leafCode =&gt; leafCode === code);
    };

    let createLeafFunc;

    const loadLeafAction = function loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement) {
      icon.toggleClass('open');

      if (!isLeafLoaded(parentCode)) {
        expandButton.api({
          on: 'now',
          url: tree.data('tree-leafs-url') || tree.data('taxon-leafs-url'),
          method: 'GET',
          cache: false,
          data: {
            parentCode,
          },
          beforeSend(settings) {
            loader.addClass('active');

            return settings;
          },
          onSuccess(response) {
            response.forEach((leafNode) =&gt; {
              leafContainerElement.append((
                createLeafFunc(sanitizeInput(leafNode.name), leafNode.code, leafNode.hasChildren, multiple, leafNode.level)
              ));
            });
            content.append(leafContainerElement);
            loader.removeClass('active');
            loadedLeafs.push(parentCode);

            leafContainerElement.toggle();
          },
        });
      }

      leafContainerElement.toggle();
    };

    const bindExpandLeafAction = function bindExpandLeafAction(parentCode, expandButton, content, icon, level) {
      const leafContainerElement = createLeafContainerElement();
      if (defaultLevel &gt; level) {
        loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement);
      }

      expandButton.click(() =&gt; {
        loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement);
      });
    };

    const bindCheckboxAction = function bindCheckboxAction(checkboxElement) {
      checkboxElement.checkbox({
        onChecked() {
          const { value } = checkboxElement[0].dataset;
          const checkedValues = $input.val().split(',').filter(Boolean);
          checkedValues.push(value);
          $input.val(checkedValues.join());
        },
        onUnchecked() {
          const { value } = checkboxElement[0].dataset;
          const checkedValues = $input.val().split(',').filter(Boolean);
          const i = checkedValues.indexOf(value);
          if (i !== -1) {
            checkedValues.splice(i, 1);
          }
          $input.val(checkedValues.join());
        },
      });
    };

    const createLeaf = function createLeaf(name, code, hasChildren, multipleChoice, level) {
      const displayNameElement = createLeafTitleSpan(name);
      const titleElement = createLeafTitleElement();
      const iconElement = createLeafIconElement();
      const checkboxElement = createCheckboxElement(name, code, multipleChoice);

      bindCheckboxAction(checkboxElement);

      const leafElement = $('&lt;div class="item"&gt;&lt;/div&gt;');
      const leafContentElement = createLeafContentElement();

      leafElement.append(iconElement);
      titleElement.append(displayNameElement);
      titleElement.append(checkboxElement);
      leafContentElement.append(titleElement);

      if (!hasChildren) {
        iconElement.addClass('outline');
      }
      if (hasChildren) {
        bindExpandLeafAction(code, displayNameElement, leafContentElement, iconElement, level);
      }
      leafElement.append(leafContentElement);

      return leafElement;
    };
    createLeafFunc = createLeaf;

    tree.api({
      on: 'now',
      method: 'GET',
      url: tree.data('tree-root-nodes-url') || tree.data('taxon-root-nodes-url'),
      cache: false,
      beforeSend(settings) {
        loader.addClass('active');

        return settings;
      },
      onSuccess(response) {
        const rootContainer = createRootContainer();
        response.forEach((rootNode) =&gt; {
          rootContainer.append((
            createLeaf(sanitizeInput(rootNode.name), rootNode.code, rootNode.hasChildren, multiple, rootNode.level)
          ));
        });
        tree.append(rootContainer);
        loader.removeClass('active');
      },
    });
  },
});
</code></pre>
<ol start="2">
<li>Create new file <code>assets/admin/sylius-auto-complete.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-auto-complete.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

$.fn.extend({
  autoComplete() {
    this.each((idx, el) =&gt; {
      const element = $(el);
      const criteriaName = element.data('criteria-name');
      const choiceName = element.data('choice-name');
      const choiceValue = element.data('choice-value');
      const autocompleteValue = element.find('input.autocomplete').val();
      const loadForEditUrl = element.data('load-edit-url');

      element.dropdown({
        delay: {
          search: 250,
        },
        forceSelection: false,
        saveRemoteData: false,
        verbose: true,
        apiSettings: {
          dataType: 'JSON',
          cache: false,
          beforeSend(settings) {
            /* eslint-disable-next-line no-param-reassign */
            settings.data[criteriaName] = settings.urlData.query;

            return settings;
          },
          onResponse(response) {
            let results = response.map(item =&gt; ({
              name: sanitizeInput(item[choiceName]),
              value: sanitizeInput(item[choiceValue]),
            }));

            if (!element.hasClass('multiple')) {
              results.unshift({
                name: '&amp;nbsp;',
                value: '',
              });
            }

            return {
              success: true,
              results: results,
            };
          },
        },
      });

      if (autocompleteValue.split(',').filter(String).length &gt; 0) {
        const menuElement = element.find('div.menu');

        menuElement.api({
          on: 'now',
          method: 'GET',
          url: loadForEditUrl,
          beforeSend(settings) {
            /* eslint-disable-next-line no-param-reassign */
            settings.data[choiceValue] = autocompleteValue.split(',').filter(String);

            return settings;
          },
          onSuccess(response) {
            response.forEach((item) =&gt; {
              menuElement.append((
                $(`&lt;div class="item" data-value="${item[choiceValue]}"&gt;${item[choiceName]}&lt;/div&gt;`)
              ));
            });

            element.dropdown('refresh');
            element.dropdown('set selected', element.find('input.autocomplete').val().split(',').filter(String));
          },
        });
      }
    });
  },
});
</code></pre>
<ol start="3">
<li>Create new file <code>assets/admin/sylius-product-auto-complete.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-product-auto-complete.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

$.fn.extend({
  productAutoComplete() {
    this.each((index, element) =&gt; {
      const $element = $(element);
      $element.dropdown('set selected', $element.find('input[name*="[associations]"]').val().split(',').filter(String));
    });

    this.dropdown({
      delay: {
        search: 250,
      },
      forceSelection: false,
      apiSettings: {
        dataType: 'JSON',
        cache: false,
        data: {
          criteria: { search: { type: 'contains', value: '' } },
        },
        beforeSend(settings) {
          /* eslint-disable-next-line no-param-reassign */
          settings.data.criteria.search.value = settings.urlData.query;

          return settings;
        },
        onResponse(response) {
          return {
            success: true,
            results: response._embedded.items.map(item =&gt; ({
              name: sanitizeInput(item.name),
              value: sanitizeInput(item.code),
            })),
          };
        },
      },
      onAdd(addedValue, addedText, $addedChoice) {
        const inputAssociation = $addedChoice.parents('.product-select').find('input[name*="[associations]"]');
        const associatedProductCodes = inputAssociation.val().length &gt; 0 ? inputAssociation.val().split(',').filter(String) : [];

        associatedProductCodes.push(addedValue);
        $.unique(associatedProductCodes.sort());

        inputAssociation.attr('value', associatedProductCodes.join());
      },
      onRemove(removedValue, removedText, $removedChoice) {
        const inputAssociation = $removedChoice.parents('.product-select').find('input[name*="[associations]"]');
        const associatedProductCodes = inputAssociation.val().length &gt; 0 ? inputAssociation.val().split(',').filter(String) : [];

        associatedProductCodes.splice($.inArray(removedValue, associatedProductCodes), 1);

        inputAssociation.attr('value', associatedProductCodes.join());
      },
    });
  },
});
</code></pre>
<ol start="4">
<li>Add new import in <code>assets/admin/entry.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/entry.js
// ...
import './sylius-lazy-choice-tree';
import './sylius-auto-complete';
import './sylius-product-auto-complete';
</code></pre>
<ol start="5">
<li>Rebuild your assets:</li>
</ol>
<pre><code class="language-bash">yarn build
</code></pre>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue has been reported by <a href="https://checkmarx.com">Checkmarx Research Group</a>, thank you!</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-v2f9-rv6w-vw8r">https://github.com/Sylius/Sylius/security/advisories/GHSA-v2f9-rv6w-vw8r</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/ba4b66da5af88cdb1bba6174de8bdf42f4853e12">https://github.com/Sylius/Sylius/commit/ba4b66da5af88cdb1bba6174de8bdf42f4853e12</a></li>
<li><a href="https://github.com/advisories/GHSA-v2f9-rv6w-vw8r">https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-10T15:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius potentially vulnerable to Cross Site Scripting via "Name" field (Taxons, Products, Options, Variants) in Admin Panel]]></title>
        <id>https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</id>
        <link href="https://github.com/advisories/GHSA-v2f9-rv6w-vw8r"/>
        <updated>2024-05-10T15:33:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>There is a possibility to execute javascript code in the Admin panel. In order to perform an XSS attack input a script into <code>Name</code> field in which of the resources: Taxons, Products, Product Options or Product Variants. The code will be executed while using an autocomplete field with one of the listed entities in the Admin Panel. Also for the taxons in the category tree on the product form. </p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.16, 1.13.1 and above.</p>
<h3 id="workarounds">Workarounds</h3>
<ol>
<li>Create new file <code>assets/admin/sylius-lazy-choice-tree.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-lazy-choice-tree.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

const createRootContainer = function createRootContainer() {
  return $('&lt;div class="ui list"&gt;&lt;/div&gt;');
};

const createLeafContainerElement = function createLeafContainerElement() {
  return $('&lt;div class="list"&gt;&lt;/div&gt;');
};

const createLeafIconElement = function createLeafIconElement() {
  return $('&lt;i class="folder icon"&gt;&lt;/i&gt;');
};

const createLeafTitleElement = function createLeafTitleElement() {
  return $('&lt;div class="header"&gt;&lt;/div&gt;');
};

const createLeafTitleSpan = function createLeafTitleSpan(displayName) {
  return $(`&lt;span style="margin-right: 5px; cursor: pointer;"&gt;${displayName}&lt;/span&gt;`);
};

const createLeafContentElement = function createLeafContentElement() {
  return $('&lt;div class="content"&gt;&lt;/div&gt;');
};

$.fn.extend({
  choiceTree(type, multiple, defaultLevel) {
    const tree = this;
    const loader = tree.find('.dimmer');
    const loadedLeafs = [];
    const $input = tree.find('input[type="hidden"]');

    const createCheckboxElement = function createCheckboxElement(name, code, multi) {
      const chosenNodes = $input.val().split(',');
      let checked = '';
      if (chosenNodes.some(chosenCode =&gt; chosenCode === code)) {
        checked = 'checked="checked"';
      }
      if (multi) {
        return $(`&lt;div class="ui checkbox" data-value="${code}"&gt;&lt;input ${checked} type="checkbox" name="${type}"&gt;&lt;/div&gt;`);
      }

      return $(`&lt;div class="ui radio checkbox" data-value="${code}"&gt;&lt;input ${checked} type="radio" name="${type}"&gt;&lt;/div&gt;`);
    };

    const isLeafLoaded = function isLeafLoaded(code) {
      return loadedLeafs.some(leafCode =&gt; leafCode === code);
    };

    let createLeafFunc;

    const loadLeafAction = function loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement) {
      icon.toggleClass('open');

      if (!isLeafLoaded(parentCode)) {
        expandButton.api({
          on: 'now',
          url: tree.data('tree-leafs-url') || tree.data('taxon-leafs-url'),
          method: 'GET',
          cache: false,
          data: {
            parentCode,
          },
          beforeSend(settings) {
            loader.addClass('active');

            return settings;
          },
          onSuccess(response) {
            response.forEach((leafNode) =&gt; {
              leafContainerElement.append((
                createLeafFunc(sanitizeInput(leafNode.name), leafNode.code, leafNode.hasChildren, multiple, leafNode.level)
              ));
            });
            content.append(leafContainerElement);
            loader.removeClass('active');
            loadedLeafs.push(parentCode);

            leafContainerElement.toggle();
          },
        });
      }

      leafContainerElement.toggle();
    };

    const bindExpandLeafAction = function bindExpandLeafAction(parentCode, expandButton, content, icon, level) {
      const leafContainerElement = createLeafContainerElement();
      if (defaultLevel &gt; level) {
        loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement);
      }

      expandButton.click(() =&gt; {
        loadLeafAction(parentCode, expandButton, content, icon, leafContainerElement);
      });
    };

    const bindCheckboxAction = function bindCheckboxAction(checkboxElement) {
      checkboxElement.checkbox({
        onChecked() {
          const { value } = checkboxElement[0].dataset;
          const checkedValues = $input.val().split(',').filter(Boolean);
          checkedValues.push(value);
          $input.val(checkedValues.join());
        },
        onUnchecked() {
          const { value } = checkboxElement[0].dataset;
          const checkedValues = $input.val().split(',').filter(Boolean);
          const i = checkedValues.indexOf(value);
          if (i !== -1) {
            checkedValues.splice(i, 1);
          }
          $input.val(checkedValues.join());
        },
      });
    };

    const createLeaf = function createLeaf(name, code, hasChildren, multipleChoice, level) {
      const displayNameElement = createLeafTitleSpan(name);
      const titleElement = createLeafTitleElement();
      const iconElement = createLeafIconElement();
      const checkboxElement = createCheckboxElement(name, code, multipleChoice);

      bindCheckboxAction(checkboxElement);

      const leafElement = $('&lt;div class="item"&gt;&lt;/div&gt;');
      const leafContentElement = createLeafContentElement();

      leafElement.append(iconElement);
      titleElement.append(displayNameElement);
      titleElement.append(checkboxElement);
      leafContentElement.append(titleElement);

      if (!hasChildren) {
        iconElement.addClass('outline');
      }
      if (hasChildren) {
        bindExpandLeafAction(code, displayNameElement, leafContentElement, iconElement, level);
      }
      leafElement.append(leafContentElement);

      return leafElement;
    };
    createLeafFunc = createLeaf;

    tree.api({
      on: 'now',
      method: 'GET',
      url: tree.data('tree-root-nodes-url') || tree.data('taxon-root-nodes-url'),
      cache: false,
      beforeSend(settings) {
        loader.addClass('active');

        return settings;
      },
      onSuccess(response) {
        const rootContainer = createRootContainer();
        response.forEach((rootNode) =&gt; {
          rootContainer.append((
            createLeaf(sanitizeInput(rootNode.name), rootNode.code, rootNode.hasChildren, multiple, rootNode.level)
          ));
        });
        tree.append(rootContainer);
        loader.removeClass('active');
      },
    });
  },
});
</code></pre>
<ol start="2">
<li>Create new file <code>assets/admin/sylius-auto-complete.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-auto-complete.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

$.fn.extend({
  autoComplete() {
    this.each((idx, el) =&gt; {
      const element = $(el);
      const criteriaName = element.data('criteria-name');
      const choiceName = element.data('choice-name');
      const choiceValue = element.data('choice-value');
      const autocompleteValue = element.find('input.autocomplete').val();
      const loadForEditUrl = element.data('load-edit-url');

      element.dropdown({
        delay: {
          search: 250,
        },
        forceSelection: false,
        saveRemoteData: false,
        verbose: true,
        apiSettings: {
          dataType: 'JSON',
          cache: false,
          beforeSend(settings) {
            /* eslint-disable-next-line no-param-reassign */
            settings.data[criteriaName] = settings.urlData.query;

            return settings;
          },
          onResponse(response) {
            let results = response.map(item =&gt; ({
              name: sanitizeInput(item[choiceName]),
              value: sanitizeInput(item[choiceValue]),
            }));

            if (!element.hasClass('multiple')) {
              results.unshift({
                name: '&amp;nbsp;',
                value: '',
              });
            }

            return {
              success: true,
              results: results,
            };
          },
        },
      });

      if (autocompleteValue.split(',').filter(String).length &gt; 0) {
        const menuElement = element.find('div.menu');

        menuElement.api({
          on: 'now',
          method: 'GET',
          url: loadForEditUrl,
          beforeSend(settings) {
            /* eslint-disable-next-line no-param-reassign */
            settings.data[choiceValue] = autocompleteValue.split(',').filter(String);

            return settings;
          },
          onSuccess(response) {
            response.forEach((item) =&gt; {
              menuElement.append((
                $(`&lt;div class="item" data-value="${item[choiceValue]}"&gt;${item[choiceName]}&lt;/div&gt;`)
              ));
            });

            element.dropdown('refresh');
            element.dropdown('set selected', element.find('input.autocomplete').val().split(',').filter(String));
          },
        });
      }
    });
  },
});
</code></pre>
<ol start="3">
<li>Create new file <code>assets/admin/sylius-product-auto-complete.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/sylius-product-auto-complete.js

function sanitizeInput(input) {
  const div = document.createElement('div');
  div.textContent = input;
  return div.innerHTML; // Converts text content to plain HTML, stripping any scripts
}

$.fn.extend({
  productAutoComplete() {
    this.each((index, element) =&gt; {
      const $element = $(element);
      $element.dropdown('set selected', $element.find('input[name*="[associations]"]').val().split(',').filter(String));
    });

    this.dropdown({
      delay: {
        search: 250,
      },
      forceSelection: false,
      apiSettings: {
        dataType: 'JSON',
        cache: false,
        data: {
          criteria: { search: { type: 'contains', value: '' } },
        },
        beforeSend(settings) {
          /* eslint-disable-next-line no-param-reassign */
          settings.data.criteria.search.value = settings.urlData.query;

          return settings;
        },
        onResponse(response) {
          return {
            success: true,
            results: response._embedded.items.map(item =&gt; ({
              name: sanitizeInput(item.name),
              value: sanitizeInput(item.code),
            })),
          };
        },
      },
      onAdd(addedValue, addedText, $addedChoice) {
        const inputAssociation = $addedChoice.parents('.product-select').find('input[name*="[associations]"]');
        const associatedProductCodes = inputAssociation.val().length &gt; 0 ? inputAssociation.val().split(',').filter(String) : [];

        associatedProductCodes.push(addedValue);
        $.unique(associatedProductCodes.sort());

        inputAssociation.attr('value', associatedProductCodes.join());
      },
      onRemove(removedValue, removedText, $removedChoice) {
        const inputAssociation = $removedChoice.parents('.product-select').find('input[name*="[associations]"]');
        const associatedProductCodes = inputAssociation.val().length &gt; 0 ? inputAssociation.val().split(',').filter(String) : [];

        associatedProductCodes.splice($.inArray(removedValue, associatedProductCodes), 1);

        inputAssociation.attr('value', associatedProductCodes.join());
      },
    });
  },
});
</code></pre>
<ol start="4">
<li>Add new import in <code>assets/admin/entry.js</code>:</li>
</ol>
<pre><code class="language-js">// assets/admin/entry.js
// ...
import './sylius-lazy-choice-tree';
import './sylius-auto-complete';
import './sylius-product-auto-complete';
</code></pre>
<ol start="5">
<li>Rebuild your assets:</li>
</ol>
<pre><code class="language-bash">yarn build
</code></pre>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue has been reported by <a href="https://checkmarx.com">Checkmarx Research Group</a>, thank you!</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-v2f9-rv6w-vw8r">https://github.com/Sylius/Sylius/security/advisories/GHSA-v2f9-rv6w-vw8r</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/ba4b66da5af88cdb1bba6174de8bdf42f4853e12">https://github.com/Sylius/Sylius/commit/ba4b66da5af88cdb1bba6174de8bdf42f4853e12</a></li>
<li><a href="https://github.com/advisories/GHSA-v2f9-rv6w-vw8r">https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v2f9-rv6w-vw8r</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-10T15:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[froxlor/froxlor] Blind XSS Leading to Froxlor Application Compromise]]></title>
        <id>https://github.com/advisories/GHSA-x525-54hf-xr53</id>
        <link href="https://github.com/advisories/GHSA-x525-54hf-xr53"/>
        <updated>2024-05-10T15:30:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description:</h3>
<p>A Stored Blind Cross-Site Scripting (XSS) vulnerability has been identified in the Failed Login Attempts Logging Feature of the Froxlor Application. Stored Blind XSS occurs when user input is not properly sanitized and is stored on the server, allowing an attacker to inject malicious scripts that will be executed when other users access the affected page. In this case, an unauthenticated User can inject malicious scripts in the loginname parameter on the Login attempt, which will then be executed when viewed by the Administrator in the System Logs.</p>
<p>The application protects users against XSS attacks by utilizing an xss sanitization library. But the checks of the library were bypassed by crafting an XSS Payload using data binding and interpolation of Vue.js</p>
<p>A working XSS payload was crafted which forces an administrator to add a new malicious attacker-controlled Administrator User. The Payload is:
<a href="https://github.com/froxlor/Froxlor/files/15142616/payload.txt">payload.txt</a></p>
<p>By exploiting this vulnerability, an unauthenticated attacker can force the Administrator to perform actions without the administrator even noticing anything suspicious. In one scenario, I made an exploit that forced the administrator to add an attacker-controlled Administrator into the Froxlor Application, resulting in a compromise of the Froxlor Application.</p>
<h3 id="impact">Impact:</h3>
<p>The impact of this vulnerability is severe as it allows an attacker to compromise the Froxlor Application. By exploiting this vulnerability, the attacker can perform various malicious actions such as forcing the Administrator to execute actions without their knowledge or consent. For instance, the attacker can force the Administrator to add a new administrator controlled by the attacker, thereby giving the attacker full control over the application.</p>
<p>Attackers can steal sensitive information such as login credentials, session tokens, and personally identifiable information (PII).</p>
<p>The vulnerability can lead to defacement of the Application.</p>
<h3 id="mitigation">Mitigation:</h3>
<p>Implement thorough input validation and sanitization mechanisms on all user inputs. This will help prevent malicious scripts from being stored and executed. sanitize {{ and }} to prevent data binding and interpolation of Vue.js.
Sanitize malicious Javascript functions. Etc.</p>
<h3 id="steps-to-reproduce">Steps to Reproduce:</h3>
<p><strong>Attacker Steps:</strong></p>
<ol>
<li>Provide an invalid username in Login.</li>
<li>Turn on intercept in Burp Suite.</li>
<li>In the intercepted request, add the following XSS payload as the value of loginname parameter (Copy from below file):
<a href="https://github.com/froxlor/Froxlor/files/15142616/payload.txt">payload.txt</a></li>
<li>Turn off the intercept.</li>
</ol>
<p><strong>Victim Steps:</strong>
5. Login as admin.
6. Go to System Logs, XSS payload will be executed and a popup will appear showing that the Application has been compromised.</p>
<p><strong>Attacker Step:</strong>
7. Back at the Attacker's side, log in to the newly created attacker-controlled admin account having all the privileges. The credentials will be username: <code>abcd</code> &amp; Password: <code>abcd@@1234</code></p>
<h3 id="evidence">Evidence:</h3>
<p><img alt="image" src="https://github.com/froxlor/Froxlor/assets/59286712/31cf0cb8-b0e4-46d0-a6b8-a0e22fda64b8">
<em>Figure 1: Code of Logging Invalid login attempts</em></p>
<p><img alt="image" src="https://github.com/froxlor/Froxlor/assets/59286712/6acef52a-d5ba-477d-b502-a7fe27fd5085">
<em>Figure 2: Code of saving Logs.</em></p>
<p><img alt="image" src="https://github.com/froxlor/Froxlor/assets/59286712/2adf8ae5-66be-4e22-938b-c9e5dcb764c0">
<em>Figure 3: Attacker injecting XSS payload.</em></p>
<p><img alt="image" src="https://github.com/froxlor/Froxlor/assets/59286712/d3ccf6f9-2a23-40a4-97fc-e9585553ac52">
<em>Figure 4: XSS payload Executed.</em></p>
<p><img alt="image" src="https://github.com/froxlor/Froxlor/assets/59286712/3c7f24f6-4049-49d3-978b-d83800fe8a80">
<em>Figure 5: XSS payload Reflection.</em></p>
<h3 id="video-poc">Video POC</h3>
<p><a href="https://github.com/froxlor/Froxlor/assets/59286712/7ba7d3e7-9ee9-4e64-988c-33fd4ebbca27">https://github.com/froxlor/Froxlor/assets/59286712/7ba7d3e7-9ee9-4e64-988c-33fd4ebbca27</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/froxlor/Froxlor/security/advisories/GHSA-x525-54hf-xr53">https://github.com/froxlor/Froxlor/security/advisories/GHSA-x525-54hf-xr53</a></li>
<li><a href="https://github.com/froxlor/Froxlor/commit/a862307bce5cdfb1c208b835f3e8faddd23046e6">https://github.com/froxlor/Froxlor/commit/a862307bce5cdfb1c208b835f3e8faddd23046e6</a></li>
<li><a href="https://github.com/advisories/GHSA-x525-54hf-xr53">https://github.com/advisories/GHSA-x525-54hf-xr53</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x525-54hf-xr53</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-10T15:29:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpseclib/phpseclib] phpseclib does not properly limit the ASN1 OID length]]></title>
        <id>https://github.com/advisories/GHSA-jr22-8qgm-4q87</id>
        <link href="https://github.com/advisories/GHSA-jr22-8qgm-4q87"/>
        <updated>2024-05-10T14:29:20.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in phpseclib 1.x before 1.0.23, 2.x before 2.0.47, and 3.x before 3.0.36. When processing the ASN.1 object identifier of a certificate, a sub identifier may be provided that leads to a denial of service (CPU consumption for decodeOID).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27355">https://nvd.nist.gov/vuln/detail/CVE-2024-27355</a></li>
<li><a href="https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b">https://gist.github.com/katzj/ee72f3c2a00590812b2ea3c0c8890e0b</a></li>
<li><a href="https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129">https://github.com/phpseclib/phpseclib/blob/978d081fe50ff92879c50ff143c62a143edb0117/phpseclib/File/ASN1.php#L1129</a></li>
<li><a href="https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59">https://github.com/phpseclib/phpseclib/commit/e32531001b4d62c66c3d824ccef54ffad835eb59</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2024/03/msg00002.html">https://lists.debian.org/debian-lts-announce/2024/03/msg00002.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2024/03/msg00003.html">https://lists.debian.org/debian-lts-announce/2024/03/msg00003.html</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/phpseclib/phpseclib/CVE-2024-27355.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/phpseclib/phpseclib/CVE-2024-27355.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-jr22-8qgm-4q87">https://github.com/advisories/GHSA-jr22-8qgm-4q87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jr22-8qgm-4q87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-02T00:31:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pimcore/pimcore] Pimcore TinyMCE Bundle - tinymce CVE-2024-29203, CVE-2024-29881]]></title>
        <id>https://github.com/advisories/GHSA-vjwg-28gv-pm8h</id>
        <link href="https://github.com/advisories/GHSA-vjwg-28gv-pm8h"/>
        <updated>2024-05-08T14:01:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TineMCE Bundle uses tinymce version 6.7.3. CVEs for this version exists for &lt;6.8.1:
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></p>
<h3 id="patches">Patches</h3>
<p>The package should be updated to at least 6.8.1 to avoid XSS vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade pimcore to release 11.2.3 or 11.1.6.5.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-vjwg-28gv-pm8h">https://github.com/pimcore/pimcore/security/advisories/GHSA-vjwg-28gv-pm8h</a></li>
<li><a href="https://github.com/advisories/GHSA-vjwg-28gv-pm8h">https://github.com/advisories/GHSA-vjwg-28gv-pm8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjwg-28gv-pm8h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T17:02:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pimcore/pimcore] Pimcore TinyMCE Bundle - tinymce CVE-2024-29203, CVE-2024-29881]]></title>
        <id>https://github.com/advisories/GHSA-vjwg-28gv-pm8h</id>
        <link href="https://github.com/advisories/GHSA-vjwg-28gv-pm8h"/>
        <updated>2024-05-08T14:01:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The TineMCE Bundle uses tinymce version 6.7.3. CVEs for this version exists for &lt;6.8.1:
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></p>
<h3 id="patches">Patches</h3>
<p>The package should be updated to at least 6.8.1 to avoid XSS vulnerability.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade pimcore to release 11.2.3 or 11.1.6.5.</p>
<h3 id="references">References</h3>
<p><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a>
<a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-vjwg-28gv-pm8h">https://github.com/pimcore/pimcore/security/advisories/GHSA-vjwg-28gv-pm8h</a></li>
<li><a href="https://github.com/advisories/GHSA-vjwg-28gv-pm8h">https://github.com/advisories/GHSA-vjwg-28gv-pm8h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vjwg-28gv-pm8h</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-04-24T17:02:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kimai/kimai] Kimai information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6f3v-2r2j-2rpr</id>
        <link href="https://github.com/advisories/GHSA-6f3v-2r2j-2rpr"/>
        <updated>2024-05-07T19:59:33.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in Kimai up to 2.15.0 and classified as problematic. Affected by this issue is some unknown functionality of the component Session Handler. The manipulation of the argument PHPSESSIONID leads to information disclosure. The attack may be launched remotely. The complexity of an attack is rather high. The exploitation is known to be difficult. Upgrading to version 2.16.0 is able to address this issue. It is recommended to upgrade the affected component. VDB-263318 is the identifier assigned to this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-4596">https://nvd.nist.gov/vuln/detail/CVE-2024-4596</a></li>
<li><a href="https://github.com/kimai/kimai/releases/tag/2.16.0">https://github.com/kimai/kimai/releases/tag/2.16.0</a></li>
<li><a href="https://vuldb.com/?ctiid.263318">https://vuldb.com/?ctiid.263318</a></li>
<li><a href="https://vuldb.com/?id.263318">https://vuldb.com/?id.263318</a></li>
<li><a href="https://vuldb.com/?submit.328639">https://vuldb.com/?submit.328639</a></li>
<li><a href="https://github.com/advisories/GHSA-6f3v-2r2j-2rpr">https://github.com/advisories/GHSA-6f3v-2r2j-2rpr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6f3v-2r2j-2rpr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-07T18:30:33.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mantisbt/mantisbt] MantisBT HTML Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2pm7-q8pc-xhvq</id>
        <link href="https://github.com/advisories/GHSA-2pm7-q8pc-xhvq"/>
        <updated>2024-05-07T16:27:01.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in MantisBT before 2.24.3. Improper escaping of a custom field's name allows an attacker to inject HTML and, if CSP settings permit, achieve execution of arbitrary JavaScript when attempting to update said custom field via <code>bug_actiongroup_page.php</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-25830">https://nvd.nist.gov/vuln/detail/CVE-2020-25830</a></li>
<li><a href="https://mantisbt.org/bugs/view.php?id=27304">https://mantisbt.org/bugs/view.php?id=27304</a></li>
<li><a href="http://github.com/mantisbt/mantisbt/commit/8c6f4d8859785b67fb80ac65100ac5259ed9237d">http://github.com/mantisbt/mantisbt/commit/8c6f4d8859785b67fb80ac65100ac5259ed9237d</a></li>
<li><a href="https://github.com/advisories/GHSA-2pm7-q8pc-xhvq">https://github.com/advisories/GHSA-2pm7-q8pc-xhvq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2pm7-q8pc-xhvq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:29:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tribalsystems/zenario] Zenario uses Twig filters insecurely in the Twig Snippet plugin]]></title>
        <id>https://github.com/advisories/GHSA-hr2r-w6wc-25pv</id>
        <link href="https://github.com/advisories/GHSA-hr2r-w6wc-25pv"/>
        <updated>2024-05-06T14:24:09.000Z</updated>
        <content type="html"><![CDATA[<p>Zenario before 9.5.60437 uses Twig filters insecurely in the Twig Snippet plugin, and in the site-wide HEAD and BODY elements, enabling code execution by a designer or an administrator.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34461">https://nvd.nist.gov/vuln/detail/CVE-2024-34461</a></li>
<li><a href="https://zenar.io/zenario-9/blog/zenario-9560437-patch-released">https://zenar.io/zenario-9/blog/zenario-9560437-patch-released</a></li>
<li><a href="https://github.com/TribalSystems/Zenario/commit/72afb59da34bace812bffb195d01168a357ff664">https://github.com/TribalSystems/Zenario/commit/72afb59da34bace812bffb195d01168a357ff664</a></li>
<li><a href="https://github.com/advisories/GHSA-hr2r-w6wc-25pv">https://github.com/advisories/GHSA-hr2r-w6wc-25pv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hr2r-w6wc-25pv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-04T06:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tribalsystems/zenario] Zenario's Tree Explorer tool from Organizer affected by Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-7qwj-gcjf-828f</id>
        <link href="https://github.com/advisories/GHSA-7qwj-gcjf-828f"/>
        <updated>2024-05-06T14:22:22.000Z</updated>
        <content type="html"><![CDATA[<p>The Tree Explorer tool from Organizer in Zenario before 9.5.60602 is affected by XSS. (This component was removed in 9.5.60602.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-34460">https://nvd.nist.gov/vuln/detail/CVE-2024-34460</a></li>
<li><a href="https://zenar.io/zenario-9/blog/zenario-9560602-patch-released">https://zenar.io/zenario-9/blog/zenario-9560602-patch-released</a></li>
<li><a href="https://github.com/TribalSystems/Zenario/commit/121ff6dc6c1c13e8281f078ecde47455b383ee78">https://github.com/TribalSystems/Zenario/commit/121ff6dc6c1c13e8281f078ecde47455b383ee78</a></li>
<li><a href="https://github.com/advisories/GHSA-7qwj-gcjf-828f">https://github.com/advisories/GHSA-7qwj-gcjf-828f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7qwj-gcjf-828f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-04T06:30:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[simplesamlphp/simplesamlphp] SimpleSAMLphp Session fixation issue and authentication bypass in the authcrypt module]]></title>
        <id>https://github.com/advisories/GHSA-j96g-47x2-46hv</id>
        <link href="https://github.com/advisories/GHSA-j96g-47x2-46hv"/>
        <updated>2024-05-05T05:02:21.000Z</updated>
        <content type="html"><![CDATA[<p>The secureCompare method in lib/SimpleSAML/Utils/Crypto.php in SimpleSAMLphp 1.14.13 and earlier, when used with PHP before 5.6, allows attackers to conduct session fixation attacks or possibly bypass authentication by leveraging missing character conversions before an XOR operation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-12868">https://nvd.nist.gov/vuln/detail/CVE-2017-12868</a></li>
<li><a href="https://github.com/simplesamlphp/simplesamlphp/commit/4bc629658e7b7d17c9ac3fe0da7dc5df71f1b85e">https://github.com/simplesamlphp/simplesamlphp/commit/4bc629658e7b7d17c9ac3fe0da7dc5df71f1b85e</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2017/12/msg00007.html">https://lists.debian.org/debian-lts-announce/2017/12/msg00007.html</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2018/06/msg00017.html">https://lists.debian.org/debian-lts-announce/2018/06/msg00017.html</a></li>
<li><a href="https://simplesamlphp.org/security/201705-01">https://simplesamlphp.org/security/201705-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-j96g-47x2-46hv">https://github.com/advisories/GHSA-j96g-47x2-46hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j96g-47x2-46hv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-14T03:15:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gleez/cms] Gleez Cms Cross-site Scripting in Profile Page]]></title>
        <id>https://github.com/advisories/GHSA-q9g7-pff4-548r</id>
        <link href="https://github.com/advisories/GHSA-q9g7-pff4-548r"/>
        <updated>2024-05-05T05:02:12.000Z</updated>
        <content type="html"><![CDATA[<p>Gleezcms Gleez Cms version 1.3.0 contains a Cross Site Scripting (XSS) vulnerability in Profile page that can result in injection of arbitrary web script or HTML via the profile page editor. The victim must navigate to the attacker's profile page to exploit this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-1999021">https://nvd.nist.gov/vuln/detail/CVE-2018-1999021</a></li>
<li><a href="https://github.com/gleez/cms/issues/797">https://github.com/gleez/cms/issues/797</a></li>
<li><a href="https://github.com/advisories/GHSA-q9g7-pff4-548r">https://github.com/advisories/GHSA-q9g7-pff4-548r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q9g7-pff4-548r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T02:59:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dolibarr/dolibarr] Dolibarr Cross-Site Request Forgery (CSRF) ]]></title>
        <id>https://github.com/advisories/GHSA-4qq9-qg7j-fcm9</id>
        <link href="https://github.com/advisories/GHSA-4qq9-qg7j-fcm9"/>
        <updated>2024-05-04T05:02:30.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Dolibarr. A user can store an IFRAME element (containing a user/card.php CSRF request) in his Linked Files settings page. When visited by the admin, this could completely take over the admin account. (The protection mechanism for CSRF is to check the Referer header; however, because the attack is from one of the application's own settings pages, this mechanism is bypassed.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-15062">https://nvd.nist.gov/vuln/detail/CVE-2019-15062</a></li>
<li><a href="https://github.com/Dolibarr/dolibarr/issues/11671">https://github.com/Dolibarr/dolibarr/issues/11671</a></li>
<li><a href="https://github.com/Dolibarr/dolibarr/commit/18eb2a83fe7c2d01bdb34cceec389a6f9541e1f6">https://github.com/Dolibarr/dolibarr/commit/18eb2a83fe7c2d01bdb34cceec389a6f9541e1f6</a></li>
<li><a href="https://github.com/Dolibarr/dolibarr/commit/d21e5571007d2052a6b5f80a67b6f4cac693584a">https://github.com/Dolibarr/dolibarr/commit/d21e5571007d2052a6b5f80a67b6f4cac693584a</a></li>
<li><a href="https://gauravnarwani.com/publications/CVE-2019-15062">https://gauravnarwani.com/publications/CVE-2019-15062</a></li>
<li><a href="https://github.com/advisories/GHSA-4qq9-qg7j-fcm9">https://github.com/advisories/GHSA-4qq9-qg7j-fcm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4qq9-qg7j-fcm9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T16:53:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getgrav/grav] Grav CMS Arbitrary File Deletion]]></title>
        <id>https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</id>
        <link href="https://github.com/advisories/GHSA-gpmf-q5jh-hjx4"/>
        <updated>2024-05-04T05:02:28.000Z</updated>
        <content type="html"><![CDATA[<p>The BackupDelete functionality in Grav CMS through 1.7.0-rc.17 allows an authenticated attacker to delete arbitrary files on the underlying server by exploiting a path-traversal technique. (This vulnerability can also be exploited by an unauthenticated attacker due to a lack of CSRF protection.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-29555">https://nvd.nist.gov/vuln/detail/CVE-2020-29555</a></li>
<li><a href="https://blog.bssi.fr/cve-2020-29553-cve-2020-29555-cve-2020-29556-multiple-vulnerabilities-within-cms-grav">https://blog.bssi.fr/cve-2020-29553-cve-2020-29555-cve-2020-29556-multiple-vulnerabilities-within-cms-grav</a></li>
<li><a href="https://github.com/advisories/GHSA-gpmf-q5jh-hjx4">https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:44:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getgrav/grav] Grav CMS Arbitrary File Deletion]]></title>
        <id>https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</id>
        <link href="https://github.com/advisories/GHSA-gpmf-q5jh-hjx4"/>
        <updated>2024-05-04T05:02:28.000Z</updated>
        <content type="html"><![CDATA[<p>The BackupDelete functionality in Grav CMS through 1.7.0-rc.17 allows an authenticated attacker to delete arbitrary files on the underlying server by exploiting a path-traversal technique. (This vulnerability can also be exploited by an unauthenticated attacker due to a lack of CSRF protection.)</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-29555">https://nvd.nist.gov/vuln/detail/CVE-2020-29555</a></li>
<li><a href="https://blog.bssi.fr/cve-2020-29553-cve-2020-29555-cve-2020-29556-multiple-vulnerabilities-within-cms-grav">https://blog.bssi.fr/cve-2020-29553-cve-2020-29555-cve-2020-29556-multiple-vulnerabilities-within-cms-grav</a></li>
<li><a href="https://github.com/advisories/GHSA-gpmf-q5jh-hjx4">https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gpmf-q5jh-hjx4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:44:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[topthink/framework] ThinkPHP SQL Injection vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-vcm7-88jx-3r39</id>
        <link href="https://github.com/advisories/GHSA-vcm7-88jx-3r39"/>
        <updated>2024-05-04T05:02:26.000Z</updated>
        <content type="html"><![CDATA[<p>ThinkPHP before 5.1.23 allows SQL Injection via the <code>public/index/index/test/index</code> query string.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16385">https://nvd.nist.gov/vuln/detail/CVE-2018-16385</a></li>
<li><a href="https://github.com/top-think/framework/issues/1375">https://github.com/top-think/framework/issues/1375</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/149288">https://exchange.xforce.ibmcloud.com/vulnerabilities/149288</a></li>
<li><a href="https://github.com/advisories/GHSA-vcm7-88jx-3r39">https://github.com/advisories/GHSA-vcm7-88jx-3r39</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vcm7-88jx-3r39</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-14T02:03:04.000Z</published>
    </entry>
</feed>