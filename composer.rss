<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-05-30T13:02:15.402Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig remote code execution in templates]]></title>
        <id>https://github.com/advisories/GHSA-xw83-pwrm-9j74</id>
        <link href="https://github.com/advisories/GHSA-xw83-pwrm-9j74"/>
        <updated>2024-05-30T12:39:44.000Z</updated>
        <content type="html"><![CDATA[<p>The <code>displayBlock</code> function <code>Template.php</code> in Sensio Labs Twig before 1.20.0, when Sandbox mode is enabled, allows remote attackers to execute arbitrary code via the <code>_self</code> variable in a template.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2015-7809">https://nvd.nist.gov/vuln/detail/CVE-2015-7809</a></li>
<li><a href="https://github.com/twigphp/Twig/pull/1759">https://github.com/twigphp/Twig/pull/1759</a></li>
<li><a href="http://openwall.com/lists/oss-security/2015/08/21/3">http://openwall.com/lists/oss-security/2015/08/21/3</a></li>
<li><a href="http://openwall.com/lists/oss-security/2015/10/11/2">http://openwall.com/lists/oss-security/2015/10/11/2</a></li>
<li><a href="http://symfony.com/blog/security-release-twig-1-20-0">http://symfony.com/blog/security-release-twig-1-20-0</a></li>
<li><a href="http://www.debian.org/security/2015/dsa-3343">http://www.debian.org/security/2015/dsa-3343</a></li>
<li><a href="https://github.com/twigphp/Twig/commit/30be07759a3de2558da5224f127d052ecf492e8f">https://github.com/twigphp/Twig/commit/30be07759a3de2558da5224f127d052ecf492e8f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2015-7809.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/CVE-2015-7809.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-twig-1-20-0">https://symfony.com/blog/security-release-twig-1-20-0</a></li>
<li><a href="https://github.com/advisories/GHSA-xw83-pwrm-9j74">https://github.com/advisories/GHSA-xw83-pwrm-9j74</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xw83-pwrm-9j74</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-14T02:03:50.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony2 improper IP based access control]]></title>
        <id>https://github.com/advisories/GHSA-hx53-jchx-cr52</id>
        <link href="https://github.com/advisories/GHSA-hx53-jchx-cr52"/>
        <updated>2024-05-30T12:35:52.000Z</updated>
        <content type="html"><![CDATA[<p>Damien Tournoud, from the Drupal security team, contacted us two days ago about a security issue in the Request::getClientIp() method when the trust proxy mode is enabled (Request::trustProxyData()).</p>
<p>An application is vulnerable if it uses the client IP address as returned by the Request::getClientIp() method for sensitive decisions like IP based access control.</p>
<p>To fix this security issue, the following changes have been made to all versions of Symfony2:</p>
<p>A new Request::setTrustedProxies() method has been introduced and should be used intead of Request::trustProxyData() to enable the trust proxy mode. It takes an array of trusted proxy IP addresses as its argument:</p>
<pre><code>// before (probably in your front controller script)
Request::trustProxyData();
</code></pre>
<pre><code>// after
Request::setTrustedProxies(array('1.1.1.1'));
// 1.1.1.1 being the IP address of a trusted reverse proxy
</code></pre>
<p>The Request::trustProxyData() method has been deprecated (when used, it automatically trusts the latest proxy in the chain -- which is the current remote address):</p>
<pre><code>Request::trustProxyData();
</code></pre>
<pre><code>// is equivalent to
Request::setTrustedProxies(array($request-&gt;server-&gt;get('REMOTE_ADDR')));
</code></pre>
<p>We encourage all Symfony2 users to upgrade as soon as possible. It you don't want to upgrade to the latest version yet, you can also apply the following patches:</p>
<p><a href="https://github.com/symfony/symfony/compare/fc89d6b...9ce892c.patch">Patch</a> for Symfony 2.0.19
<a href="https://github.com/symfony/symfony/compare/922c201...e5536f0.patch">Patch</a> for Symfony 2.1.4</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/commit/922c2015f61a7205180d423dce1f7365cc2d8460">https://github.com/symfony/symfony/commit/922c2015f61a7205180d423dce1f7365cc2d8460</a></li>
<li><a href="https://github.com/symfony/symfony/commit/9ce892cf4395e73b136e9b5cd1fae9e91995c93b">https://github.com/symfony/symfony/commit/9ce892cf4395e73b136e9b5cd1fae9e91995c93b</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-11-29.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-11-29.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-19-and-2-1-4">https://symfony.com/blog/security-release-symfony-2-0-19-and-2-1-4</a></li>
<li><a href="https://github.com/advisories/GHSA-hx53-jchx-cr52">https://github.com/advisories/GHSA-hx53-jchx-cr52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx53-jchx-cr52</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T12:35:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony2 improper IP based access control]]></title>
        <id>https://github.com/advisories/GHSA-hx53-jchx-cr52</id>
        <link href="https://github.com/advisories/GHSA-hx53-jchx-cr52"/>
        <updated>2024-05-30T12:35:52.000Z</updated>
        <content type="html"><![CDATA[<p>Damien Tournoud, from the Drupal security team, contacted us two days ago about a security issue in the Request::getClientIp() method when the trust proxy mode is enabled (Request::trustProxyData()).</p>
<p>An application is vulnerable if it uses the client IP address as returned by the Request::getClientIp() method for sensitive decisions like IP based access control.</p>
<p>To fix this security issue, the following changes have been made to all versions of Symfony2:</p>
<p>A new Request::setTrustedProxies() method has been introduced and should be used intead of Request::trustProxyData() to enable the trust proxy mode. It takes an array of trusted proxy IP addresses as its argument:</p>
<pre><code>// before (probably in your front controller script)
Request::trustProxyData();
</code></pre>
<pre><code>// after
Request::setTrustedProxies(array('1.1.1.1'));
// 1.1.1.1 being the IP address of a trusted reverse proxy
</code></pre>
<p>The Request::trustProxyData() method has been deprecated (when used, it automatically trusts the latest proxy in the chain -- which is the current remote address):</p>
<pre><code>Request::trustProxyData();
</code></pre>
<pre><code>// is equivalent to
Request::setTrustedProxies(array($request-&gt;server-&gt;get('REMOTE_ADDR')));
</code></pre>
<p>We encourage all Symfony2 users to upgrade as soon as possible. It you don't want to upgrade to the latest version yet, you can also apply the following patches:</p>
<p><a href="https://github.com/symfony/symfony/compare/fc89d6b...9ce892c.patch">Patch</a> for Symfony 2.0.19
<a href="https://github.com/symfony/symfony/compare/922c201...e5536f0.patch">Patch</a> for Symfony 2.1.4</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/commit/922c2015f61a7205180d423dce1f7365cc2d8460">https://github.com/symfony/symfony/commit/922c2015f61a7205180d423dce1f7365cc2d8460</a></li>
<li><a href="https://github.com/symfony/symfony/commit/9ce892cf4395e73b136e9b5cd1fae9e91995c93b">https://github.com/symfony/symfony/commit/9ce892cf4395e73b136e9b5cd1fae9e91995c93b</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-11-29.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-11-29.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-19-and-2-1-4">https://symfony.com/blog/security-release-symfony-2-0-19-and-2-1-4</a></li>
<li><a href="https://github.com/advisories/GHSA-hx53-jchx-cr52">https://github.com/advisories/GHSA-hx53-jchx-cr52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hx53-jchx-cr52</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T12:35:51.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony XML Entity Expansion security vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q2gc-gg3x-7942</id>
        <link href="https://github.com/advisories/GHSA-q2gc-gg3x-7942"/>
        <updated>2024-05-30T12:21:01.000Z</updated>
        <content type="html"><![CDATA[<p>Symfony 2.0.11 carried a [similar] XXE security fix, however, on review of ZF2 I also noted a vulnerability to XML Entity Expansion (XEE) attacks whereby all extensions making use of libxml2 have no defense against XEE Quadratic Blowup Attacks. The vulnerability is a function of there being no current method of disabling custom entities in PHP (i.e. defined internal to the XML document without using external entities). In a QBA, a long entity can be defined and then referred to multiple times in document elements, creating a memory sink with which Denial Of Service attacks against a host's RAM can be mounted. The use of the LIBXML_NOENT or equivalent option in a dependent extension amplified the impact (it doesn't actually mean "No Entities"). In addition, libxml2's innate defense against the related Exponential or Billion Laugh's XEE attacks is active only so long as the LIBXML_PARSEHUGE is NOT set (it disables libxml2's hardcoded entity recursion limit). No instances of these two options were noted, but it's worth referencing for the future.</p>
<p>Consider this (non-fatal) example:</p>

<p>]&gt;
<data>&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;</data>
Increase the length of entity, and entity count to a few hundred, and peak memory usage will waste no time spiking the moment the nodeValue for is accessed since the entities will then be expanded by a simple multiplier effect. No external entities required.</p>
<p>...</p>
<p>This can be used in combination with the usual XXE defense of calling libxml_disable_entity_loader(TRUE) and, optionally, the LIBXML_NONET option (should local filesystem access be allowable). The DOCTYPE may be removed instead of rejecting the XML outright but this would likely result in other problems with the unresolved entities. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-08-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-08-28.yaml</a></li>
<li><a href="https://github.com/symfony/symfony/blob/2.0/CHANGELOG-2.0.md">https://github.com/symfony/symfony/blob/2.0/CHANGELOG-2.0.md</a></li>
<li><a href="https://github.com/symfony/symfony/compare/352e8f583c87c709de197bb16c4053d2e87fd4cd...5bf4f92e86c34690d71e8f94350ec975909a435b.diff">https://github.com/symfony/symfony/compare/352e8f583c87c709de197bb16c4053d2e87fd4cd...5bf4f92e86c34690d71e8f94350ec975909a435b.diff</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-17-released">https://symfony.com/blog/security-release-symfony-2-0-17-released</a></li>
<li><a href="https://github.com/advisories/GHSA-q2gc-gg3x-7942">https://github.com/advisories/GHSA-q2gc-gg3x-7942</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q2gc-gg3x-7942</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T12:21:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony XML decoding attack vector through external entities]]></title>
        <id>https://github.com/advisories/GHSA-mmcv-fvq8-r9x3</id>
        <link href="https://github.com/advisories/GHSA-mmcv-fvq8-r9x3"/>
        <updated>2024-05-30T12:17:21.000Z</updated>
        <content type="html"><![CDATA[<p>The XMLEncoder component of Symfony 2.0.x fails to disable external entities when parsing XML. In the Symfony2 framework the XML class may be used to deserialize objects or as part of a client/server API. By using external entities it is possible to include arbitrary files from the file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/commit/3e64d36cbdc34acaa82e0e6318112cd2eacb6fec">https://github.com/symfony/symfony/commit/3e64d36cbdc34acaa82e0e6318112cd2eacb6fec</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-02-24.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2012-02-24.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-11-released">https://symfony.com/blog/security-release-symfony-2-0-11-released</a></li>
<li><a href="https://github.com/advisories/GHSA-mmcv-fvq8-r9x3">https://github.com/advisories/GHSA-mmcv-fvq8-r9x3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mmcv-fvq8-r9x3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T12:17:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony may allow a user to switch to using another user's identity]]></title>
        <id>https://github.com/advisories/GHSA-7mx2-7q8p-pgmw</id>
        <link href="https://github.com/advisories/GHSA-7mx2-7q8p-pgmw"/>
        <updated>2024-05-30T00:56:01.000Z</updated>
        <content type="html"><![CDATA[<p>Symfony 2.0.6 has just been released. It addresses a security vulnerability in the EntityUserProvider as provided in the Doctrine bridge.</p>
<p>If you let your users update their login/username from a form, and if you are using Doctrine as a user provider, then you are vulnerable and you should upgrade as soon as possible.</p>
<p>The issue is that it is possible for a user to switch to another one. Here is how to reproduce it: The current user changes its username via a form to another existing username. When the form is submitted, he will have a validation error (as the username already exists) but the user object in the session will still be modified to the new username. This user from the session will be used for the next requests and so the user will be switched to this other user.</p>
<p>The fix is to always refresh the user via the primary key (which cannot be updated via a form) instead of the username.</p>
<p>If you cannot upgrade immediately, please apply the following patch: <a href="https://github.com/symfony/symfony/commit/9d2ab9ca9c1762">https://github.com/symfony/symfony/commit/9d2ab9ca9c1762</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/commit/9d2ab9ca9c1762">https://github.com/symfony/symfony/commit/9d2ab9ca9c1762</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2011-11-16.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/2011-11-16.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-6">https://symfony.com/blog/security-release-symfony-2-0-6</a></li>
<li><a href="https://github.com/advisories/GHSA-7mx2-7q8p-pgmw">https://github.com/advisories/GHSA-7mx2-7q8p-pgmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7mx2-7q8p-pgmw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T00:56:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/serializer] Symfony XML decoding attack vector through external entities]]></title>
        <id>https://github.com/advisories/GHSA-j68w-pg49-f6vx</id>
        <link href="https://github.com/advisories/GHSA-j68w-pg49-f6vx"/>
        <updated>2024-05-30T00:52:21.000Z</updated>
        <content type="html"><![CDATA[<p>The XMLEncoder component of Symfony 2.0.x fails to disable external entities when parsing XML. In the Symfony2 framework the XML class may be used to deserialize objects or as part of a client/server API. By using external entities it is possible to include arbitrary files from the file system.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/serializer/commit/0943a06a663b573d7319fc1acd56d3484eaaa430">https://github.com/symfony/serializer/commit/0943a06a663b573d7319fc1acd56d3484eaaa430</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/serializer/2012-02-24.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/serializer/2012-02-24.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-11-released">https://symfony.com/blog/security-release-symfony-2-0-11-released</a></li>
<li><a href="https://github.com/advisories/GHSA-j68w-pg49-f6vx">https://github.com/advisories/GHSA-j68w-pg49-f6vx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j68w-pg49-f6vx</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T00:52:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/routing] Symfony XXE security vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-rjpm-qmq7-q85w</id>
        <link href="https://github.com/advisories/GHSA-rjpm-qmq7-q85w"/>
        <updated>2024-05-30T00:49:55.000Z</updated>
        <content type="html"><![CDATA[<p>Symfony 2.0.11 carried a [similar] XXE security fix, however, on review of ZF2 I also noted a vulnerability to XML Entity Expansion (XEE) attacks whereby all extensions making use of libxml2 have no defense against XEE Quadratic Blowup Attacks. The vulnerability is a function of there being no current method of disabling custom entities in PHP (i.e. defined internal to the XML document without using external entities). In a QBA, a long entity can be defined and then referred to multiple times in document elements, creating a memory sink with which Denial Of Service attacks against a host's RAM can be mounted. The use of the LIBXML_NOENT or equivalent option in a dependent extension amplified the impact (it doesn't actually mean "No Entities"). In addition, libxml2's innate defense against the related Exponential or Billion Laugh's XEE attacks is active only so long as the LIBXML_PARSEHUGE is NOT set (it disables libxml2's hardcoded entity recursion limit). No instances of these two options were noted, but it's worth referencing for the future.</p>
<p>Consider this (non-fatal) example:</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE data [&lt;!ENTITY a
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&gt;]&gt;
&lt;data&gt;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&lt;/data&gt;
</code></pre>
<p>Increase the length of entity, and entity count to a few hundred, and peak memory usage will waste no time spiking the moment the nodeValue for is accessed since the entities will then be expanded by a simple multiplier effect. No external entities required.</p>
<p>...</p>
<p>This can be used in combination with the usual XXE defense of calling libxml_disable_entity_loader(TRUE) and, optionally, the LIBXML_NONET option (should local filesystem access be allowable). The DOCTYPE may be removed instead of rejecting the XML outright but this would likely result in other problems with the unresolved entities. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/routing/commit/769e8e6584c5d13e7c6f51aa77a9d5f977fec463">https://github.com/symfony/routing/commit/769e8e6584c5d13e7c6f51aa77a9d5f977fec463</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/routing/2012-08-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/routing/2012-08-28.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-17-released">https://symfony.com/blog/security-release-symfony-2-0-17-released</a></li>
<li><a href="https://github.com/advisories/GHSA-rjpm-qmq7-q85w">https://github.com/advisories/GHSA-rjpm-qmq7-q85w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rjpm-qmq7-q85w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:49:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-kernel] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-kernel] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/http-kernel] Symfony allows direct access of ESI URLs behind a trusted proxy]]></title>
        <id>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</id>
        <link href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm"/>
        <updated>2024-05-30T00:46:54.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony HttpKernel component are affected by this security issue. Your application is vulnerable only if the ESI feature is enabled and there is a proxy in front of the web application.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.2 as it is not maintained anymore.</p>
<p>Description
When you enable the ESI feature and when you are using a proxy like Varnish that you configured as a trusted proxy, the <code>FragmentHandler</code> considered requests to render fragments as coming from a trusted source, even if the client was requesting them directly. Symfony can not distinguish between ESI requests done on behalf of the client by Varnish and faked fragment requests coming directly from the client.</p>
<p>To mitigate this issue, and for not-supported Symfony versions, you can use the following workaround in your Varnish configuration (<code>/_fragment</code> being the URL path prefix configured under the <code>fragment</code> setting of the framework bundle configuration):</p>
<p> Copy
sub vcl_recv {
    if (req.restarts == 0 &amp;&amp; req.url ~ "^/_fragment") {
        error 400;
    }
}
Resolution
We do not rely on trusted IPs anymore when validating a fragment request as all fragment URLs are now signed.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11831">https://github.com/symfony/symfony/pull/11831</a></li>
<li><a href="https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5">https://github.com/symfony/symfony/commit/654b1f281e09dd96ffbbd3da815411700423ecf5</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/http-kernel/CVE-2014-5245.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-5245.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-5245">https://symfony.com/cve-2014-5245</a></li>
<li><a href="https://github.com/advisories/GHSA-wvjv-p5rr-mmqm">https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wvjv-p5rr-mmqm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T00:46:52.000Z</published>
    </entry>
</feed>