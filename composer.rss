<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2022-06-10T00:23:05.037Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <entry>
        <title type="html"><![CDATA[[francoisjacquet/rosariosis] Cross-site Scripting in RosarioSIS]]></title>
        <id>https://github.com/advisories/GHSA-wjh9-344g-vc49</id>
        <link href="https://github.com/advisories/GHSA-wjh9-344g-vc49"/>
        <updated>2022-06-09T23:50:40.000Z</updated>
        <content type="html"><![CDATA[<p>Cross-site Scripting (XSS) - Stored in GitHub repository francoisjacquet/rosariosis prior to 9.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1997">https://nvd.nist.gov/vuln/detail/CVE-2022-1997</a></li>
<li><a href="https://github.com/francoisjacquet/rosariosis/commit/6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8">https://github.com/francoisjacquet/rosariosis/commit/6b22c0b5b40fad891c8cf9e7eeff3e42a35c0bf8</a></li>
<li><a href="https://huntr.dev/bounties/28861ae9-7b09-45b7-a003-eccf903db71d">https://huntr.dev/bounties/28861ae9-7b09-45b7-a003-eccf903db71d</a></li>
<li><a href="https://github.com/advisories/GHSA-wjh9-344g-vc49">https://github.com/advisories/GHSA-wjh9-344g-vc49</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wjh9-344g-vc49</uri>
        </author>
        <published>2022-06-09T00:00:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[dolibarr/dolibarr] Cross-site Scripting in Dolibarr]]></title>
        <id>https://github.com/advisories/GHSA-f2g5-426f-353q</id>
        <link href="https://github.com/advisories/GHSA-f2g5-426f-353q"/>
        <updated>2022-06-09T23:49:57.000Z</updated>
        <content type="html"><![CDATA[<p>Dolibarr 12.0.5 is vulnerable to Cross Site Scripting (XSS) via Sql Error Page.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-30875">https://nvd.nist.gov/vuln/detail/CVE-2022-30875</a></li>
<li><a href="https://github.com/mustgundogdu/Research/edit/main/Dolibar_12.0.5-ReflectedXSS,">https://github.com/mustgundogdu/Research/edit/main/Dolibar_12.0.5-ReflectedXSS,</a></li>
<li><a href="https://github.com/mustgundogdu/Research/edit/main/Dolibar_12.0.5-ReflectedXSS/README.md">https://github.com/mustgundogdu/Research/edit/main/Dolibar_12.0.5-ReflectedXSS/README.md</a></li>
<li><a href="https://github.com/advisories/GHSA-f2g5-426f-353q">https://github.com/advisories/GHSA-f2g5-426f-353q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2g5-426f-353q</uri>
        </author>
        <published>2022-06-09T00:00:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[guzzlehttp/guzzle] Failure to strip the Cookie header on change in host or HTTP downgrade]]></title>
        <id>https://github.com/advisories/GHSA-f2wf-25xc-69c9</id>
        <link href="https://github.com/advisories/GHSA-f2wf-25xc-69c9"/>
        <updated>2022-06-09T23:47:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>Cookie</code> headers on requests are sensitive information. On making a request using the <code>https</code> scheme to a server which responds with a redirect to a URI with the <code>http</code> scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the <code>Cookie</code> header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any <code>Cookie</code> header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there.</p>
<h3 id="patches">Patches</h3>
<p>Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>An alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.</p>
<h3 id="references">References</h3>
<p><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">RFC9110 Section 15.4</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please get in touch with us in <code>#guzzle</code> on the <a href="https://php-http.slack.com/">PHP HTTP Slack</a>. Do not report additional security advisories in that public channel, however - please follow our <a href="https://github.com/guzzle/guzzle/security/policy">vulnerability reporting process</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9">https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9</a></li>
<li><a href="https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8">https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx</a></li>
<li><a href="https://github.com/advisories/GHSA-f2wf-25xc-69c9">https://github.com/advisories/GHSA-f2wf-25xc-69c9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2wf-25xc-69c9</uri>
        </author>
        <published>2022-06-09T23:47:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[guzzlehttp/guzzle] Failure to strip the Cookie header on change in host or HTTP downgrade]]></title>
        <id>https://github.com/advisories/GHSA-f2wf-25xc-69c9</id>
        <link href="https://github.com/advisories/GHSA-f2wf-25xc-69c9"/>
        <updated>2022-06-09T23:47:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>Cookie</code> headers on requests are sensitive information. On making a request using the <code>https</code> scheme to a server which responds with a redirect to a URI with the <code>http</code> scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the <code>Cookie</code> header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any <code>Cookie</code> header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there.</p>
<h3 id="patches">Patches</h3>
<p>Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>An alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.</p>
<h3 id="references">References</h3>
<p><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">RFC9110 Section 15.4</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please get in touch with us in <code>#guzzle</code> on the <a href="https://php-http.slack.com/">PHP HTTP Slack</a>. Do not report additional security advisories in that public channel, however - please follow our <a href="https://github.com/guzzle/guzzle/security/policy">vulnerability reporting process</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9">https://github.com/guzzle/guzzle/security/advisories/GHSA-f2wf-25xc-69c9</a></li>
<li><a href="https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8">https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx</a></li>
<li><a href="https://github.com/advisories/GHSA-f2wf-25xc-69c9">https://github.com/advisories/GHSA-f2wf-25xc-69c9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f2wf-25xc-69c9</uri>
        </author>
        <published>2022-06-09T23:47:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[guzzlehttp/guzzle] Fix failure to strip Authorization header on HTTP downgrade]]></title>
        <id>https://github.com/advisories/GHSA-w248-ffj2-4v5q</id>
        <link href="https://github.com/advisories/GHSA-w248-ffj2-4v5q"/>
        <updated>2022-06-09T23:47:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>Authorization</code> headers on requests are sensitive information. On making a request using the <code>https</code> scheme to a server which responds with a redirect to a URI with the <code>http</code> scheme, we should not forward the <code>Authorization</code> header on. This is much the same as to how we don't forward on the header if the host changes. Prior to this fix, <code>https</code> to <code>http</code> downgrades did not result in the <code>Authorization</code> header being removed, only changes to the host.</p>
<h3 id="patches">Patches</h3>
<p>Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>An alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.</p>
<h3 id="references">References</h3>
<p><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">RFC9110 Section 15.4</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please get in touch with us in <code>#guzzle</code> on the <a href="https://php-http.slack.com/">PHP HTTP Slack</a>. Do not report additional security advisories in that public channel, however - please follow our <a href="https://github.com/guzzle/guzzle/security/policy">vulnerability reporting process</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/guzzle/guzzle/security/advisories/GHSA-w248-ffj2-4v5q">https://github.com/guzzle/guzzle/security/advisories/GHSA-w248-ffj2-4v5q</a></li>
<li><a href="https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8">https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx</a></li>
<li><a href="https://github.com/advisories/GHSA-w248-ffj2-4v5q">https://github.com/advisories/GHSA-w248-ffj2-4v5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w248-ffj2-4v5q</uri>
        </author>
        <published>2022-06-09T23:47:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[guzzlehttp/guzzle] Fix failure to strip Authorization header on HTTP downgrade]]></title>
        <id>https://github.com/advisories/GHSA-w248-ffj2-4v5q</id>
        <link href="https://github.com/advisories/GHSA-w248-ffj2-4v5q"/>
        <updated>2022-06-09T23:47:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p><code>Authorization</code> headers on requests are sensitive information. On making a request using the <code>https</code> scheme to a server which responds with a redirect to a URI with the <code>http</code> scheme, we should not forward the <code>Authorization</code> header on. This is much the same as to how we don't forward on the header if the host changes. Prior to this fix, <code>https</code> to <code>http</code> downgrades did not result in the <code>Authorization</code> header being removed, only changes to the host.</p>
<h3 id="patches">Patches</h3>
<p>Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4.</p>
<h3 id="workarounds">Workarounds</h3>
<p>An alternative approach would be to use your own redirect middleware, rather than ours, if you are unable to upgrade. If you do not require or expect redirects to be followed, one should simply disable redirects all together.</p>
<h3 id="references">References</h3>
<p><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">RFC9110 Section 15.4</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory, please get in touch with us in <code>#guzzle</code> on the <a href="https://php-http.slack.com/">PHP HTTP Slack</a>. Do not report additional security advisories in that public channel, however - please follow our <a href="https://github.com/guzzle/guzzle/security/policy">vulnerability reporting process</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/guzzle/guzzle/security/advisories/GHSA-w248-ffj2-4v5q">https://github.com/guzzle/guzzle/security/advisories/GHSA-w248-ffj2-4v5q</a></li>
<li><a href="https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8">https://github.com/guzzle/guzzle/commit/e3ff079b22820c2029d4c2a87796b6a0b8716ad8</a></li>
<li><a href="https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx">https://www.rfc-editor.org/rfc/rfc9110.html#name-redirection-3xx</a></li>
<li><a href="https://github.com/advisories/GHSA-w248-ffj2-4v5q">https://github.com/advisories/GHSA-w248-ffj2-4v5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w248-ffj2-4v5q</uri>
        </author>
        <published>2022-06-09T23:47:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[noumo/easyii] Cross-Site Request Forgery in easyii CMS]]></title>
        <id>https://github.com/advisories/GHSA-3x3w-vcjx-7796</id>
        <link href="https://github.com/advisories/GHSA-3x3w-vcjx-7796"/>
        <updated>2022-06-08T22:28:14.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in easyii CMS. It has been classified as problematic. Affected is an unknown function of the file /admin/sign/out. The manipulation leads to cross site request forgery. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-36534">https://nvd.nist.gov/vuln/detail/CVE-2020-36534</a></li>
<li><a href="https://github.com/noumo/easyii/">https://github.com/noumo/easyii/</a></li>
<li><a href="https://vuldb.com/?id.160278">https://vuldb.com/?id.160278</a></li>
<li><a href="https://github.com/advisories/GHSA-3x3w-vcjx-7796">https://github.com/advisories/GHSA-3x3w-vcjx-7796</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3x3w-vcjx-7796</uri>
        </author>
        <published>2022-06-08T00:00:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laravel/laravel] Unserialized Pop Chain in Laravel]]></title>
        <id>https://github.com/advisories/GHSA-vv7q-mfpc-qgm5</id>
        <link href="https://github.com/advisories/GHSA-vv7q-mfpc-qgm5"/>
        <updated>2022-06-08T22:27:55.000Z</updated>
        <content type="html"><![CDATA[<p>Laravel 9.1.8, when processing attacker-controlled data for deserialization, allows Remote Code Execution (RCE) via an unserialized pop chain in __destruct in Illuminate\Broadcasting\PendingBroadcast.php and __call in Faker\Generator.php.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-31279">https://nvd.nist.gov/vuln/detail/CVE-2022-31279</a></li>
<li><a href="https://github.com/1nhann/vulns/issues/3">https://github.com/1nhann/vulns/issues/3</a></li>
<li><a href="https://github.com/ambionics/phpggc/issues/118">https://github.com/ambionics/phpggc/issues/118</a></li>
<li><a href="https://inhann.top/2022/05/17/bypass_wakeup/">https://inhann.top/2022/05/17/bypass_wakeup/</a></li>
<li><a href="https://github.com/advisories/GHSA-vv7q-mfpc-qgm5">https://github.com/advisories/GHSA-vv7q-mfpc-qgm5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vv7q-mfpc-qgm5</uri>
        </author>
        <published>2022-06-08T00:00:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pocketmine/pocketmine-mp] Improperly checked IDs on itemstacks received from the client leading to server crash in PocketMine-MP]]></title>
        <id>https://github.com/advisories/GHSA-fqx3-r75h-vc89</id>
        <link href="https://github.com/advisories/GHSA-fqx3-r75h-vc89"/>
        <updated>2022-06-07T21:07:32.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Due to a workaround for unmapped network items implemented in 4.0.0-BETA5 (8ac16345a3bc099b62c1f5cfbf3b736e621c3f76), arbitrary item IDs are able to be written into an item's NBT. The intended purpose of this is to make said unmapped network items able to be moved around the inventory without issues.</p>
<p>This led to an exploit due to internal limits on the range that item IDs can occupy (-32768 - 32767), while the tag type used to represent the replacement IDs for unknown items is a <code>TAG_Int</code>, allowing a range from -(2^31) - 2^31 - 1. This leads to an uncaught exception which crashes the server.</p>
<h3 id="patches">Patches</h3>
<p>5fd685e07d61ef670584ed11a52fd5f4b99a81a7</p>
<h3 id="workarounds">Workarounds</h3>
<p>In theory this can be checked by plugins using a custom <code>TypeConverter</code>, but this is likely to be very cumbersome.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:team@pmmp.io">team@pmmp.io</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-fqx3-r75h-vc89">https://github.com/pmmp/PocketMine-MP/security/advisories/GHSA-fqx3-r75h-vc89</a></li>
<li><a href="https://github.com/pmmp/PocketMine-MP/commit/5fd685e07d61ef670584ed11a52fd5f4b99a81a7">https://github.com/pmmp/PocketMine-MP/commit/5fd685e07d61ef670584ed11a52fd5f4b99a81a7</a></li>
<li><a href="https://github.com/pmmp/PocketMine-MP/commit/8ac16345a3bc099b62c1f5cfbf3b736e621c3f76">https://github.com/pmmp/PocketMine-MP/commit/8ac16345a3bc099b62c1f5cfbf3b736e621c3f76</a></li>
<li><a href="https://github.com/advisories/GHSA-fqx3-r75h-vc89">https://github.com/advisories/GHSA-fqx3-r75h-vc89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fqx3-r75h-vc89</uri>
        </author>
        <published>2022-06-07T21:07:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/silverstripe-omnipay] Failed payment recorded has completed in Silverstripe Omnipay]]></title>
        <id>https://github.com/advisories/GHSA-48f2-m7jg-866x</id>
        <link href="https://github.com/advisories/GHSA-48f2-m7jg-866x"/>
        <updated>2022-06-06T21:24:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For a subset of Omnipay gateways (those that use intermediary states like <code>isNotification()</code> or <code>isRedirect()</code>), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data.</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched to fix this issue:</p>
<ul>
<li><code>2.5.2</code></li>
<li><code>3.0.2</code></li>
<li><code>3.1.4</code></li>
<li><code>3.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this vulnerability.</p>
<h3 id="references">References</h3>
<p>N/A.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@silverstripe.org">security@silverstripe.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x">https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b">https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-48f2-m7jg-866x">https://github.com/advisories/GHSA-48f2-m7jg-866x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48f2-m7jg-866x</uri>
        </author>
        <published>2022-06-06T21:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/silverstripe-omnipay] Failed payment recorded has completed in Silverstripe Omnipay]]></title>
        <id>https://github.com/advisories/GHSA-48f2-m7jg-866x</id>
        <link href="https://github.com/advisories/GHSA-48f2-m7jg-866x"/>
        <updated>2022-06-06T21:24:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For a subset of Omnipay gateways (those that use intermediary states like <code>isNotification()</code> or <code>isRedirect()</code>), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data.</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched to fix this issue:</p>
<ul>
<li><code>2.5.2</code></li>
<li><code>3.0.2</code></li>
<li><code>3.1.4</code></li>
<li><code>3.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this vulnerability.</p>
<h3 id="references">References</h3>
<p>N/A.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@silverstripe.org">security@silverstripe.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x">https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b">https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-48f2-m7jg-866x">https://github.com/advisories/GHSA-48f2-m7jg-866x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48f2-m7jg-866x</uri>
        </author>
        <published>2022-06-06T21:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/silverstripe-omnipay] Failed payment recorded has completed in Silverstripe Omnipay]]></title>
        <id>https://github.com/advisories/GHSA-48f2-m7jg-866x</id>
        <link href="https://github.com/advisories/GHSA-48f2-m7jg-866x"/>
        <updated>2022-06-06T21:24:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For a subset of Omnipay gateways (those that use intermediary states like <code>isNotification()</code> or <code>isRedirect()</code>), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data.</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched to fix this issue:</p>
<ul>
<li><code>2.5.2</code></li>
<li><code>3.0.2</code></li>
<li><code>3.1.4</code></li>
<li><code>3.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this vulnerability.</p>
<h3 id="references">References</h3>
<p>N/A.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@silverstripe.org">security@silverstripe.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x">https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b">https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-48f2-m7jg-866x">https://github.com/advisories/GHSA-48f2-m7jg-866x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48f2-m7jg-866x</uri>
        </author>
        <published>2022-06-06T21:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/silverstripe-omnipay] Failed payment recorded has completed in Silverstripe Omnipay]]></title>
        <id>https://github.com/advisories/GHSA-48f2-m7jg-866x</id>
        <link href="https://github.com/advisories/GHSA-48f2-m7jg-866x"/>
        <updated>2022-06-06T21:24:40.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>For a subset of Omnipay gateways (those that use intermediary states like <code>isNotification()</code> or <code>isRedirect()</code>), if the payment identifier or success URL is exposed it is possible for payments to be prematurely marked as completed without payment being taken. This is mitigated by the fact that most payment gateways hide this information from users, however some issuing banks offer flawed 3DSecure implementations that may inadvertently expose this data.</p>
<h3 id="patches">Patches</h3>
<p>The following versions have been patched to fix this issue:</p>
<ul>
<li><code>2.5.2</code></li>
<li><code>3.0.2</code></li>
<li><code>3.1.4</code></li>
<li><code>3.2.1</code></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There are no known workarounds for this vulnerability.</p>
<h3 id="references">References</h3>
<p>N/A.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@silverstripe.org">security@silverstripe.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x">https://github.com/silverstripe/silverstripe-omnipay/security/advisories/GHSA-48f2-m7jg-866x</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b">https://github.com/silverstripe/silverstripe-omnipay/commit/7dee9a1e0a5f54c2dc06e018cff3d9a19044e01b</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/2.5.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.0.2</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.1.4</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1">https://github.com/silverstripe/silverstripe-omnipay/releases/tag/3.2.1</a></li>
<li><a href="https://github.com/advisories/GHSA-48f2-m7jg-866x">https://github.com/advisories/GHSA-48f2-m7jg-866x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48f2-m7jg-866x</uri>
        </author>
        <published>2022-06-06T21:24:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[facturascripts/facturascripts] Cross-site Scripting in FacturaScripts]]></title>
        <id>https://github.com/advisories/GHSA-r7jw-mg27-j839</id>
        <link href="https://github.com/advisories/GHSA-r7jw-mg27-j839"/>
        <updated>2022-06-06T21:23:40.000Z</updated>
        <content type="html"><![CDATA[<p>FacturaScripts 2022.08 and prior is vulnerable to cross-site scripting. A patch is available on the <code>master</code> branch of the repository and anticipated to be part of version 2022.09.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-1988">https://nvd.nist.gov/vuln/detail/CVE-2022-1988</a></li>
<li><a href="https://github.com/neorazorx/facturascripts/commit/93fc65ced3847a8e0837561e9fdfa0dbace2cfcb">https://github.com/neorazorx/facturascripts/commit/93fc65ced3847a8e0837561e9fdfa0dbace2cfcb</a></li>
<li><a href="https://huntr.dev/bounties/7882a35a-b27e-4d7e-9fcc-e9e009d0b01c">https://huntr.dev/bounties/7882a35a-b27e-4d7e-9fcc-e9e009d0b01c</a></li>
<li><a href="https://github.com/advisories/GHSA-r7jw-mg27-j839">https://github.com/advisories/GHSA-r7jw-mg27-j839</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r7jw-mg27-j839</uri>
        </author>
        <published>2022-06-04T00:00:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] Command injection in librenms]]></title>
        <id>https://github.com/advisories/GHSA-23f2-vgr6-fwv7</id>
        <link href="https://github.com/advisories/GHSA-23f2-vgr6-fwv7"/>
        <updated>2022-06-03T22:28:53.000Z</updated>
        <content type="html"><![CDATA[<p>LibreNMS v22.3.0 was discovered to contain multiple command injection vulnerabilities via the service_ip, hostname, and service_param parameters.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29712">https://nvd.nist.gov/vuln/detail/CVE-2022-29712</a></li>
<li><a href="https://github.com/librenms/librenms/pull/13932">https://github.com/librenms/librenms/pull/13932</a></li>
<li><a href="https://github.com/librenms/librenms/commit/8b82341cb742e7bd4966964b399012f7ba017e0b">https://github.com/librenms/librenms/commit/8b82341cb742e7bd4966964b399012f7ba017e0b</a></li>
<li><a href="https://github.com/advisories/GHSA-23f2-vgr6-fwv7">https://github.com/advisories/GHSA-23f2-vgr6-fwv7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-23f2-vgr6-fwv7</uri>
        </author>
        <published>2022-06-03T00:01:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ibexa/core] Login timing attack in ibexa/core]]></title>
        <id>https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</id>
        <link href="https://github.com/advisories/GHSA-2x4v-g8cx-jxrq"/>
        <updated>2022-06-02T21:02:25.000Z</updated>
        <content type="html"><![CDATA[<p>Ibexa DXP is using random execution time to hinder timing attacks against user accounts, a method of discovering whether a given account exists in a system without knowing its password, thus affecting privacy. This implementation was found to not be good enough in some situations. The fix replaces this with constant time functionality, configured in the new security.yml parameter 'ibexa.security.authentication.constant_auth_time'. It will log a warning if the constant time is exceeded. If this happens the setting should be increased.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ibexa/core/security/advisories/GHSA-2x4v-g8cx-jxrq">https://github.com/ibexa/core/security/advisories/GHSA-2x4v-g8cx-jxrq</a></li>
<li><a href="https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce">https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce</a></li>
<li><a href="https://github.com/advisories/GHSA-2x4v-g8cx-jxrq">https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</uri>
        </author>
        <published>2022-06-02T21:02:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ibexa/core] Login timing attack in ibexa/core]]></title>
        <id>https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</id>
        <link href="https://github.com/advisories/GHSA-2x4v-g8cx-jxrq"/>
        <updated>2022-06-02T21:02:25.000Z</updated>
        <content type="html"><![CDATA[<p>Ibexa DXP is using random execution time to hinder timing attacks against user accounts, a method of discovering whether a given account exists in a system without knowing its password, thus affecting privacy. This implementation was found to not be good enough in some situations. The fix replaces this with constant time functionality, configured in the new security.yml parameter 'ibexa.security.authentication.constant_auth_time'. It will log a warning if the constant time is exceeded. If this happens the setting should be increased.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ibexa/core/security/advisories/GHSA-2x4v-g8cx-jxrq">https://github.com/ibexa/core/security/advisories/GHSA-2x4v-g8cx-jxrq</a></li>
<li><a href="https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce">https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce</a></li>
<li><a href="https://github.com/advisories/GHSA-2x4v-g8cx-jxrq">https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x4v-g8cx-jxrq</uri>
        </author>
        <published>2022-06-02T21:02:24.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ezsystems/ezpublish-kernel] Login timing attack in ezsystems/ezpublish-kernel]]></title>
        <id>https://github.com/advisories/GHSA-xfqg-p48g-hh94</id>
        <link href="https://github.com/advisories/GHSA-xfqg-p48g-hh94"/>
        <updated>2022-06-02T21:02:01.000Z</updated>
        <content type="html"><![CDATA[<p>Ibexa DXP is using random execution time to hinder timing attacks against user accounts, a method of discovering whether a given account exists in a system without knowing its password, thus affecting privacy. This implementation was found to not be good enough in some situations. The fix replaces this with constant time functionality, configured in the new security.yml parameter 'ibexa.security.authentication.constant_auth_time'. It will log a warning if the constant time is exceeded. If this happens the setting should be increased.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ezsystems/ezpublish-kernel/security/advisories/GHSA-xfqg-p48g-hh94">https://github.com/ezsystems/ezpublish-kernel/security/advisories/GHSA-xfqg-p48g-hh94</a></li>
<li><a href="https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce">https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce</a></li>
<li><a href="https://github.com/advisories/GHSA-xfqg-p48g-hh94">https://github.com/advisories/GHSA-xfqg-p48g-hh94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xfqg-p48g-hh94</uri>
        </author>
        <published>2022-06-02T21:02:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ezsystems/ezplatform-kernel] Login timing attack in ezsystems/ezplatform-kernel]]></title>
        <id>https://github.com/advisories/GHSA-342c-vcff-2ff2</id>
        <link href="https://github.com/advisories/GHSA-342c-vcff-2ff2"/>
        <updated>2022-06-02T20:53:45.000Z</updated>
        <content type="html"><![CDATA[<p>Ibexa DXP is using random execution time to hinder timing attacks against user accounts, a method of discovering whether a given account exists in a system without knowing its password, thus affecting privacy. This implementation was found to not be good enough in some situations. The fix replaces this with constant time functionality, configured in the new security.yml parameter 'ibexa.security.authentication.constant_auth_time'. It will log a warning if the constant time is exceeded. If this happens the setting should be increased.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-342c-vcff-2ff2">https://github.com/ezsystems/ezplatform-kernel/security/advisories/GHSA-342c-vcff-2ff2</a></li>
<li><a href="https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce">https://developers.ibexa.co/security-advisories/ibexa-sa-2022-006-vulnerabilities-in-page-builder-login-and-commerce</a></li>
<li><a href="https://github.com/advisories/GHSA-342c-vcff-2ff2">https://github.com/advisories/GHSA-342c-vcff-2ff2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-342c-vcff-2ff2</uri>
        </author>
        <published>2022-06-02T20:53:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[helloxz/imgurl] SQL injection in helloxz/imgurl]]></title>
        <id>https://github.com/advisories/GHSA-rrjv-34p5-4c7r</id>
        <link href="https://github.com/advisories/GHSA-rrjv-34p5-4c7r"/>
        <updated>2022-06-02T20:38:28.000Z</updated>
        <content type="html"><![CDATA[<p>imgurl v2.31 was discovered to contain a Blind SQL injection vulnerability via /upload/localhost.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-29305">https://nvd.nist.gov/vuln/detail/CVE-2022-29305</a></li>
<li><a href="https://github.com/helloxz/imgurl/issues/75">https://github.com/helloxz/imgurl/issues/75</a></li>
<li><a href="https://github.com/advisories/GHSA-rrjv-34p5-4c7r">https://github.com/advisories/GHSA-rrjv-34p5-4c7r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rrjv-34p5-4c7r</uri>
        </author>
        <published>2022-05-25T00:00:42.000Z</published>
    </entry>
</feed>