<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-05-17T23:02:01.526Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/neos] Neos Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-3c5g-73f7-grvm</id>
        <link href="https://github.com/advisories/GHSA-3c5g-73f7-grvm"/>
        <updated>2024-05-17T22:54:48.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-3c5g-73f7-grvm">https://github.com/advisories/GHSA-3c5g-73f7-grvm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3c5g-73f7-grvm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:54:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Information disclosure in entity security]]></title>
        <id>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</id>
        <link href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8"/>
        <updated>2024-05-17T22:54:47.000Z</updated>
        <content type="html"><![CDATA[<p>If you had used entity security and wanted to secure entities not just based on the user's role, but on some property of the user (like the company he belongs to), entity security did not work properly together with the doctrine query cache. This could lead to other users re-using SQL queries from the cache which were built for other users; and thus users could see entities which were not destined for them.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<ul>
<li>Do you use Entity Security? if no, you are not affected.</li>
<li>You disabled the Doctrine Cache (Flow_Persistence_Doctrine)? If this is the case, you are not affected.</li>
<li>You use Entity Security in custom Flow or Neos applications. Read on.<ul>
<li>If you only used Entity Security based on roles (i.e. role A was allowed to see entities, but role B was denied): In this case, you are not affected.</li>
<li>If you did more advanced stuff using Entity Security (like checking that a customer only sees his own orders; or a hotel only sees its own bookings), you very likely needed to register a custom global object in Neos.Flow.aop.globalObjects. In this case, you are affected by the issue; and need to implement the CacheAwareInterface in your global object for proper caching.</li>
</ul>
</li>
</ul>
<p>All Flow versions (starting in version 3.0, where Entity Security was introduced) were affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html">https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8">https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Information disclosure in entity security]]></title>
        <id>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</id>
        <link href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8"/>
        <updated>2024-05-17T22:54:47.000Z</updated>
        <content type="html"><![CDATA[<p>If you had used entity security and wanted to secure entities not just based on the user's role, but on some property of the user (like the company he belongs to), entity security did not work properly together with the doctrine query cache. This could lead to other users re-using SQL queries from the cache which were built for other users; and thus users could see entities which were not destined for them.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<ul>
<li>Do you use Entity Security? if no, you are not affected.</li>
<li>You disabled the Doctrine Cache (Flow_Persistence_Doctrine)? If this is the case, you are not affected.</li>
<li>You use Entity Security in custom Flow or Neos applications. Read on.<ul>
<li>If you only used Entity Security based on roles (i.e. role A was allowed to see entities, but role B was denied): In this case, you are not affected.</li>
<li>If you did more advanced stuff using Entity Security (like checking that a customer only sees his own orders; or a hotel only sees its own bookings), you very likely needed to register a custom global object in Neos.Flow.aop.globalObjects. In this case, you are affected by the issue; and need to implement the CacheAwareInterface in your global object for proper caching.</li>
</ul>
</li>
</ul>
<p>All Flow versions (starting in version 3.0, where Entity Security was introduced) were affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html">https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8">https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Information disclosure in entity security]]></title>
        <id>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</id>
        <link href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8"/>
        <updated>2024-05-17T22:54:47.000Z</updated>
        <content type="html"><![CDATA[<p>If you had used entity security and wanted to secure entities not just based on the user's role, but on some property of the user (like the company he belongs to), entity security did not work properly together with the doctrine query cache. This could lead to other users re-using SQL queries from the cache which were built for other users; and thus users could see entities which were not destined for them.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<ul>
<li>Do you use Entity Security? if no, you are not affected.</li>
<li>You disabled the Doctrine Cache (Flow_Persistence_Doctrine)? If this is the case, you are not affected.</li>
<li>You use Entity Security in custom Flow or Neos applications. Read on.<ul>
<li>If you only used Entity Security based on roles (i.e. role A was allowed to see entities, but role B was denied): In this case, you are not affected.</li>
<li>If you did more advanced stuff using Entity Security (like checking that a customer only sees his own orders; or a hotel only sees its own bookings), you very likely needed to register a custom global object in Neos.Flow.aop.globalObjects. In this case, you are affected by the issue; and need to implement the CacheAwareInterface in your global object for proper caching.</li>
</ul>
</li>
</ul>
<p>All Flow versions (starting in version 3.0, where Entity Security was introduced) were affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html">https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8">https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Information disclosure in entity security]]></title>
        <id>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</id>
        <link href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8"/>
        <updated>2024-05-17T22:54:47.000Z</updated>
        <content type="html"><![CDATA[<p>If you had used entity security and wanted to secure entities not just based on the user's role, but on some property of the user (like the company he belongs to), entity security did not work properly together with the doctrine query cache. This could lead to other users re-using SQL queries from the cache which were built for other users; and thus users could see entities which were not destined for them.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<ul>
<li>Do you use Entity Security? if no, you are not affected.</li>
<li>You disabled the Doctrine Cache (Flow_Persistence_Doctrine)? If this is the case, you are not affected.</li>
<li>You use Entity Security in custom Flow or Neos applications. Read on.<ul>
<li>If you only used Entity Security based on roles (i.e. role A was allowed to see entities, but role B was denied): In this case, you are not affected.</li>
<li>If you did more advanced stuff using Entity Security (like checking that a customer only sees his own orders; or a hotel only sees its own bookings), you very likely needed to register a custom global object in Neos.Flow.aop.globalObjects. In this case, you are affected by the issue; and need to implement the CacheAwareInterface in your global object for proper caching.</li>
</ul>
</li>
</ul>
<p>All Flow versions (starting in version 3.0, where Entity Security was introduced) were affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html">https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8">https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Information disclosure in entity security]]></title>
        <id>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</id>
        <link href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8"/>
        <updated>2024-05-17T22:54:47.000Z</updated>
        <content type="html"><![CDATA[<p>If you had used entity security and wanted to secure entities not just based on the user's role, but on some property of the user (like the company he belongs to), entity security did not work properly together with the doctrine query cache. This could lead to other users re-using SQL queries from the cache which were built for other users; and thus users could see entities which were not destined for them.</p>
<h3 id="am-i-affected">Am I affected?</h3>
<ul>
<li>Do you use Entity Security? if no, you are not affected.</li>
<li>You disabled the Doctrine Cache (Flow_Persistence_Doctrine)? If this is the case, you are not affected.</li>
<li>You use Entity Security in custom Flow or Neos applications. Read on.<ul>
<li>If you only used Entity Security based on roles (i.e. role A was allowed to see entities, but role B was denied): In this case, you are not affected.</li>
<li>If you did more advanced stuff using Entity Security (like checking that a customer only sees his own orders; or a hotel only sees its own bookings), you very likely needed to register a custom global object in Neos.Flow.aop.globalObjects. In this case, you are affected by the issue; and need to implement the CacheAwareInterface in your global object for proper caching.</li>
</ul>
</li>
</ul>
<p>All Flow versions (starting in version 3.0, where Entity Security was introduced) were affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2017-04-12.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html">https://www.neos.io/blog/flow-bugfix-releases-for-entity-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9cw3-j7wg-jwj8">https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9cw3-j7wg-jwj8</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Arbitrary file upload and XML External Entity processing]]></title>
        <id>https://github.com/advisories/GHSA-5vv7-j593-mgjc</id>
        <link href="https://github.com/advisories/GHSA-5vv7-j593-mgjc"/>
        <updated>2024-05-17T22:54:43.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that Flow 3.0.0 allows arbitrary file uploads, inlcuding server-side scripts, posing the risk of attacks. If those scripts are executed by the server when accessed through their public URL, anything not blocked through other means is possible (information disclosure, placement of backdoors, data removal, …).</p>
<p>Note: The upload of files is only possible if the application built on Flow provides means to do so, and whether or not the upload of files poses a risk is dependent on the system setup. If uploaded script files are not executed by the server, there is no risk. In versions prior to 3.0.0 the upload of files with the extension php was blocked.</p>
<p>In Flow 2.3.0 to 2.3.6 a potential XML External Entity processing vulnerability has been discovered in the MediaTypeConverter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2015-11-23.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2015-11-23.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2015-001.html">https://www.neos.io/blog/flow-sa-2015-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5vv7-j593-mgjc">https://github.com/advisories/GHSA-5vv7-j593-mgjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5vv7-j593-mgjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Neos Flow Arbitrary file upload and XML External Entity processing]]></title>
        <id>https://github.com/advisories/GHSA-5vv7-j593-mgjc</id>
        <link href="https://github.com/advisories/GHSA-5vv7-j593-mgjc"/>
        <updated>2024-05-17T22:54:43.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that Flow 3.0.0 allows arbitrary file uploads, inlcuding server-side scripts, posing the risk of attacks. If those scripts are executed by the server when accessed through their public URL, anything not blocked through other means is possible (information disclosure, placement of backdoors, data removal, …).</p>
<p>Note: The upload of files is only possible if the application built on Flow provides means to do so, and whether or not the upload of files poses a risk is dependent on the system setup. If uploaded script files are not executed by the server, there is no risk. In versions prior to 3.0.0 the upload of files with the extension php was blocked.</p>
<p>In Flow 2.3.0 to 2.3.6 a potential XML External Entity processing vulnerability has been discovered in the MediaTypeConverter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2015-11-23.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2015-11-23.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2015-001.html">https://www.neos.io/blog/flow-sa-2015-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-5vv7-j593-mgjc">https://github.com/advisories/GHSA-5vv7-j593-mgjc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5vv7-j593-mgjc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-17T22:54:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[neos/flow] Insecure deserialize Vulnerability in FLOW3]]></title>
        <id>https://github.com/advisories/GHSA-7h74-7vcw-4mwp</id>
        <link href="https://github.com/advisories/GHSA-7h74-7vcw-4mwp"/>
        <updated>2024-05-17T22:32:20.000Z</updated>
        <content type="html"><![CDATA[<p>Due to a missing signature (HMAC) for a request argument, an attacker could unserialize arbitrary objects within FLOW3.</p>
<p>To our knowledge it is neither possible to inject code through this vulnerability, nor are there exploitable objects within the FLOW3 Base Distribution. However, there might be exploitable objects within user applications.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2012-03-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/neos/flow/2012-03-28.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2012-001.html">https://www.neos.io/blog/flow-sa-2012-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-7h74-7vcw-4mwp">https://github.com/advisories/GHSA-7h74-7vcw-4mwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7h74-7vcw-4mwp</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-17T22:32:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[namshi/jose] namshi/jose - Verification bypass]]></title>
        <id>https://github.com/advisories/GHSA-4rr6-gf59-ggw5</id>
        <link href="https://github.com/advisories/GHSA-4rr6-gf59-ggw5"/>
        <updated>2024-05-17T22:31:50.000Z</updated>
        <content type="html"><![CDATA[<p>Several widely-used JSON Web Token (JWT) libraries, including node-jsonwebtoken, pyjwt, namshi/jose, php-jwt, and jsjwt, are affected by critical vulnerabilities that could allow attackers to bypass the verification step when using asymmetric keys (RS256, RS384, RS512, ES256, ES384, ES512).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-03-10.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-03-10.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-4rr6-gf59-ggw5">https://github.com/advisories/GHSA-4rr6-gf59-ggw5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4rr6-gf59-ggw5</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-17T22:31:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[namshi/jose] namshi/jose insecure JSON Web Signatures (JWS)]]></title>
        <id>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</id>
        <link href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf"/>
        <updated>2024-05-17T22:31:42.000Z</updated>
        <content type="html"><![CDATA[<p>namshi/jose allows the acceptance of unsecure JSON Web Signatures (JWS) by default. The vulnerability arises from the $allowUnsecure flag, which, when set to true during the loading of JWSes, permits tokens signed with 'none' algorithms to be processed. This behavior poses a significant security risk as it could allow an attacker to impersonate users by crafting a valid jwt token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e">https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf">https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:31:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[namshi/jose] namshi/jose insecure JSON Web Signatures (JWS)]]></title>
        <id>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</id>
        <link href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf"/>
        <updated>2024-05-17T22:31:42.000Z</updated>
        <content type="html"><![CDATA[<p>namshi/jose allows the acceptance of unsecure JSON Web Signatures (JWS) by default. The vulnerability arises from the $allowUnsecure flag, which, when set to true during the loading of JWSes, permits tokens signed with 'none' algorithms to be processed. This behavior poses a significant security risk as it could allow an attacker to impersonate users by crafting a valid jwt token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e">https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf">https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:31:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[namshi/jose] namshi/jose insecure JSON Web Signatures (JWS)]]></title>
        <id>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</id>
        <link href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf"/>
        <updated>2024-05-17T22:31:42.000Z</updated>
        <content type="html"><![CDATA[<p>namshi/jose allows the acceptance of unsecure JSON Web Signatures (JWS) by default. The vulnerability arises from the $allowUnsecure flag, which, when set to true during the loading of JWSes, permits tokens signed with 'none' algorithms to be processed. This behavior poses a significant security risk as it could allow an attacker to impersonate users by crafting a valid jwt token.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e">https://github.com/namshi/jose/commit/009f86d6ced000b806b2f602c0b7393060ebb34e</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/namshi/jose/2015-02-19.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hxhc-wmg8-xrqf">https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxhc-wmg8-xrqf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-17T22:31:42.000Z</published>
    </entry>
</feed>