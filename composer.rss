<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2023-09-12T02:06:04.328Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[openmage/magento-lts] Magento LTS's guest order "protect code" can be brute-forced too easily]]></title>
        <id>https://github.com/advisories/GHSA-9358-cpvx-c2qp</id>
        <link href="https://github.com/advisories/GHSA-9358-cpvx-c2qp"/>
        <updated>2023-09-11T20:45:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>Guest orders may be viewed without authentication using a "guest-view" cookie which contains the order's "protect_code". This code is 6 hexadecimal characters which is arguably not enough to prevent a brute-force attack. Exposing each order would require a separate brute force attack.</p>
<h1 id="patches">Patches</h1>
<p>None.</p>
<h1 id="workarounds">Workarounds</h1>
<p>Implementing rate-limiting at the web server would help mitigate the issue. In particular, a very strict rate limit (e.g. 1 per minute per IP) for the specific route (<code>sales/guest/view/</code>) would effectively mitigate the issue.</p>
<h1 id="references">References</h1>
<p>Email from Frank Rochlitzer (<a href="mailto:f.rochlitzer@b3-it.de">f.rochlitzer@b3-it.de</a>) to <a href="mailto:security@openmage.org">security@openmage.org</a>:</p>
<h2 id="summary">Summary</h2>
<p>The German Federal Office for Information Security (BSI) found the following flaw in OpenMage through a commissioned pen test:
The web application was found to accept certain requests even without prior strong authentication if the person making the request has data that is non-public but also not secret, such as easily
easily guessed transaction numbers or names.
Attacking entities could possibly exploit this to retrieve sensitive information using this easier-to-obtain data and by trying random numbers.</p>
<h2 id="details">Details</h2>
<p>Customers who place an order without an account can subsequently retrieve the order data or invoice data by specifying individual information.
Technically, the access is realized by specifying the cookie guest-view. The value of the cookie is Base64 encoded and contains a random value and the order number. The random value consists of six characters, where these are taken from the alphabet [0-9a-f]. In the best case, i.e. when using a cryptographically secure random number generator, this corresponds to an entropy of 24 bits. Furthermore, the order numbers are assigned incrementally, so that the number range can be narrowed down or an upper limit determined by placing an order.
Specifically, this results in the risk that an attacking entity can iterate over all possible values of the cookie's random value. If successful, the billing address, shipping address, payment details and the ordered items can be viewed. The attack only works for orders made as a guest.</p>
<h2 id="poc">PoC</h2>
<p>The request/response pair shows the retrieval of an order. It should be noted in particular, that the cookie is not bound to a session. The response has been formatted for formatted for readability.</p>
<p>Request:</p>
<pre><code>1 GET /magento19/index.php/default/sales/guest/view/ HTTP/1.1
2 Host: localhost.local
3 Cookie: guest-view=MzYyYzI4OjEwMDAwMDQzMQ%3D%3D;
4 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
5 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
6 Accept-Language: en-US,en;q=0.5
7 Accept-Encoding: gzip, deflate
8 Referer: https://localhost.local/magento19/index.php/default/egovs_checkout/multipage/successview/
9 Upgrade-Insecure-Requests: 1
10 Sec-Fetch-Dest: document
11 Sec-Fetch-Mode: navigate
12 Sec-Fetch-Site: same-origin
13 Sec-Fetch-User: ?1
14 Te: trailers
15 Connection: close
</code></pre>
<p>Response:</p>
<pre><code>1 HTTP/1.1 200 OK
2 Date: Tue, 13 Dec 2022 14:06:13 GMT
3 Server: Apache
4 Strict-Transport-Security: max-age=31536000; includeSubDomains
5 X-Powered-By: PHP/7.4.6
6 Set-Cookie: om_frontend=id7v84a05u8mm1j32t2kj5rbjl; expires=Tue, 13-Dec-2022 15:06:13 GMT; Max-Age=3600; path=/magento19/; domain=localhost.local; secure; HttpOnly
7 Expires: Thu, 19 Nov 1981 08:52:00 GMT
8 Cache-Control: no-store, no-cache, must-revalidate
9 Pragma: no-cache
10 Set-Cookie: om_frontend=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0; path=/magento19/; domain=localhost.local; secure; HttpOnly; SameSite=None
11 Set-Cookie: om_frontend=o42vttknheaj0sr3q0381jipdp; expires=Tue, 13-Dec-2022 15:06:13 GMT; Max-Age=3600; path=/magento19/; domain=localhost.local; secure; HttpOnly
12 Set-Cookie: guest-view=MzYyYzI4OjEwMDAwMDQzMQ%3D%3D; expires=Tue, 13-Dec-2022 14:16:13 GMT; Max-Age=600; path=/; domain=localhost.local; secure; HttpOnly; SameSite=None
13 X-Frame-Options: SAMEORIGIN
14 X-Content-Type-Options: nosniff
15 X-XSS-Protection: 1; mode=block
16 Referrer-Policy: same-origin
17 Feature-Policy: geolocation 'self'; vibrate 'none'
18 Content-Security-Policy: default-src 'self';script-src 'self' 'unsafe-inline' 'unsafeeval';
style-src 'self' 'unsafe-inline';
19 Connection: close
20 Content-Type: text/html; charset=UTF-8
21 Content-Length: 47876
22
23 &lt;!DOCTYPE html&gt;
24 &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de"&gt;
25 […]
26 &lt;div class="page-title"&gt;
27 &lt;h1&gt;Bestellung #100000431 - Ausstehende Überweisung&lt;/h1&gt;
28 &lt;/div&gt;
29 […]
30 &lt;h2 class="feature-headline"&gt;Versandadresse&lt;/h2&gt;
31 &lt;div class="feature-content"&gt;
32 &lt;address&gt;
33 Herr Vorname Nachname&lt;br&gt;
34 Straße&lt;br&gt;
35 Dresden, Brandenburg, 01067&lt;br&gt;
36 Deutschland&lt;br&gt;
37 &lt;/address&gt;
38 &lt;/div&gt;
39 […]
40 &lt;h2 class="feature-headline"&gt;Rechnungsadresse&lt;/h2&gt;
41 &lt;div class="feature-content"&gt;
42 &lt;address&gt;
43 [color]Herr Vorname Nachname&lt;br&gt;
44 Straße&lt;br&gt;
45 Dresden, Brandenburg, 01067&lt;br&gt;
46 Deutschland&lt;br&gt;[/color]
47 &lt;/address&gt;
48 &lt;/div&gt;
49 […]
50 &lt;h2 class="feature-headline"&gt;Zahlungsart&lt;/h2&gt;
51 &lt;div class="feature-content"&gt;
52 &lt;div class="block-content"&gt;
53 Vorkasse&lt;br&gt;
54 &lt;div id="bankpayment_account_info" style="font-style: italic;"&gt;Bankverbindung&lt;/div&gt;
55 &lt;table class="data-table fieldset"&gt;
56 […]
57 &lt;h2 class="sub-title"&gt;
58 &lt;span&gt;Kassenzeichen: WS1712000349&lt;/span&gt;
59 &lt;/h2&gt;
60 &lt;h2 class="sub-title"&gt;Bestellte Artikel&lt;/h2&gt;
61 […]
62 &lt;td class="order-item-product"&gt;
63 &lt;h3 class="product-name ellipsis-multi-line"&gt;Testprodukt Kreditkarte&lt;/h3&gt;
64 […]
65 &lt;span class="price"&gt;100,23 €&lt;/span&gt;
66 […]
67 &lt;/html&gt;
</code></pre>
<h2 id="impact-1">Impact</h2>
<p>Information disclosure.
Read as well as write access to sensitive information of persons or accounts and the execution of actions on their behalf must always be secured by strong authentication. This can be ensured, for example, by enforcing strong passwords or MFA.
For temporary accesses to sensitive information, temporary passwords or
authentication tokens or comparable data that an attacking entity cannot easily guess or determine should be used. Random values should have sufficient entropy so that searching the number space is impractical for attacking entities.
Furthermore, such queries should be limited by rate limiting.
The exact attack effort cannot be determined, since this requires the proportion of
the proportion of orders that were placed without an account and since the performance of the
performance of the production system is likely to differ from that of the test system.
In a test run, 1000 requests could be made within 36 seconds. Part of the execution is shown in the screenshot. The complete search of the number space for the random value would take 6 days 23 hours 46 minutes. Accordingly, the expected value is about 3.5 days. If every third order is executed without an account, the effort must be multiplied by a factor of 3.</p>
<p>Mit freundlichen Grüßen</p>
<p>Frank Rochlitzer (github: theroch)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenMage/magento-lts/security/advisories/GHSA-9358-cpvx-c2qp">https://github.com/OpenMage/magento-lts/security/advisories/GHSA-9358-cpvx-c2qp</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/commit/2a2a2fb504247e8966f8ffc2e17d614be5d43128">https://github.com/OpenMage/magento-lts/commit/2a2a2fb504247e8966f8ffc2e17d614be5d43128</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/commit/31e74ac5d670b10001f88f038046b62367f15877">https://github.com/OpenMage/magento-lts/commit/31e74ac5d670b10001f88f038046b62367f15877</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/releases/tag/v19.5.1">https://github.com/OpenMage/magento-lts/releases/tag/v19.5.1</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/releases/tag/v20.1.1">https://github.com/OpenMage/magento-lts/releases/tag/v20.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-9358-cpvx-c2qp">https://github.com/advisories/GHSA-9358-cpvx-c2qp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9358-cpvx-c2qp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-11T20:45:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[openmage/magento-lts] Magento LTS's guest order "protect code" can be brute-forced too easily]]></title>
        <id>https://github.com/advisories/GHSA-9358-cpvx-c2qp</id>
        <link href="https://github.com/advisories/GHSA-9358-cpvx-c2qp"/>
        <updated>2023-09-11T20:45:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="impact">Impact</h1>
<p>Guest orders may be viewed without authentication using a "guest-view" cookie which contains the order's "protect_code". This code is 6 hexadecimal characters which is arguably not enough to prevent a brute-force attack. Exposing each order would require a separate brute force attack.</p>
<h1 id="patches">Patches</h1>
<p>None.</p>
<h1 id="workarounds">Workarounds</h1>
<p>Implementing rate-limiting at the web server would help mitigate the issue. In particular, a very strict rate limit (e.g. 1 per minute per IP) for the specific route (<code>sales/guest/view/</code>) would effectively mitigate the issue.</p>
<h1 id="references">References</h1>
<p>Email from Frank Rochlitzer (<a href="mailto:f.rochlitzer@b3-it.de">f.rochlitzer@b3-it.de</a>) to <a href="mailto:security@openmage.org">security@openmage.org</a>:</p>
<h2 id="summary">Summary</h2>
<p>The German Federal Office for Information Security (BSI) found the following flaw in OpenMage through a commissioned pen test:
The web application was found to accept certain requests even without prior strong authentication if the person making the request has data that is non-public but also not secret, such as easily
easily guessed transaction numbers or names.
Attacking entities could possibly exploit this to retrieve sensitive information using this easier-to-obtain data and by trying random numbers.</p>
<h2 id="details">Details</h2>
<p>Customers who place an order without an account can subsequently retrieve the order data or invoice data by specifying individual information.
Technically, the access is realized by specifying the cookie guest-view. The value of the cookie is Base64 encoded and contains a random value and the order number. The random value consists of six characters, where these are taken from the alphabet [0-9a-f]. In the best case, i.e. when using a cryptographically secure random number generator, this corresponds to an entropy of 24 bits. Furthermore, the order numbers are assigned incrementally, so that the number range can be narrowed down or an upper limit determined by placing an order.
Specifically, this results in the risk that an attacking entity can iterate over all possible values of the cookie's random value. If successful, the billing address, shipping address, payment details and the ordered items can be viewed. The attack only works for orders made as a guest.</p>
<h2 id="poc">PoC</h2>
<p>The request/response pair shows the retrieval of an order. It should be noted in particular, that the cookie is not bound to a session. The response has been formatted for formatted for readability.</p>
<p>Request:</p>
<pre><code>1 GET /magento19/index.php/default/sales/guest/view/ HTTP/1.1
2 Host: localhost.local
3 Cookie: guest-view=MzYyYzI4OjEwMDAwMDQzMQ%3D%3D;
4 User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0
5 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
6 Accept-Language: en-US,en;q=0.5
7 Accept-Encoding: gzip, deflate
8 Referer: https://localhost.local/magento19/index.php/default/egovs_checkout/multipage/successview/
9 Upgrade-Insecure-Requests: 1
10 Sec-Fetch-Dest: document
11 Sec-Fetch-Mode: navigate
12 Sec-Fetch-Site: same-origin
13 Sec-Fetch-User: ?1
14 Te: trailers
15 Connection: close
</code></pre>
<p>Response:</p>
<pre><code>1 HTTP/1.1 200 OK
2 Date: Tue, 13 Dec 2022 14:06:13 GMT
3 Server: Apache
4 Strict-Transport-Security: max-age=31536000; includeSubDomains
5 X-Powered-By: PHP/7.4.6
6 Set-Cookie: om_frontend=id7v84a05u8mm1j32t2kj5rbjl; expires=Tue, 13-Dec-2022 15:06:13 GMT; Max-Age=3600; path=/magento19/; domain=localhost.local; secure; HttpOnly
7 Expires: Thu, 19 Nov 1981 08:52:00 GMT
8 Cache-Control: no-store, no-cache, must-revalidate
9 Pragma: no-cache
10 Set-Cookie: om_frontend=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; Max-Age=0; path=/magento19/; domain=localhost.local; secure; HttpOnly; SameSite=None
11 Set-Cookie: om_frontend=o42vttknheaj0sr3q0381jipdp; expires=Tue, 13-Dec-2022 15:06:13 GMT; Max-Age=3600; path=/magento19/; domain=localhost.local; secure; HttpOnly
12 Set-Cookie: guest-view=MzYyYzI4OjEwMDAwMDQzMQ%3D%3D; expires=Tue, 13-Dec-2022 14:16:13 GMT; Max-Age=600; path=/; domain=localhost.local; secure; HttpOnly; SameSite=None
13 X-Frame-Options: SAMEORIGIN
14 X-Content-Type-Options: nosniff
15 X-XSS-Protection: 1; mode=block
16 Referrer-Policy: same-origin
17 Feature-Policy: geolocation 'self'; vibrate 'none'
18 Content-Security-Policy: default-src 'self';script-src 'self' 'unsafe-inline' 'unsafeeval';
style-src 'self' 'unsafe-inline';
19 Connection: close
20 Content-Type: text/html; charset=UTF-8
21 Content-Length: 47876
22
23 &lt;!DOCTYPE html&gt;
24 &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="de" lang="de"&gt;
25 […]
26 &lt;div class="page-title"&gt;
27 &lt;h1&gt;Bestellung #100000431 - Ausstehende Überweisung&lt;/h1&gt;
28 &lt;/div&gt;
29 […]
30 &lt;h2 class="feature-headline"&gt;Versandadresse&lt;/h2&gt;
31 &lt;div class="feature-content"&gt;
32 &lt;address&gt;
33 Herr Vorname Nachname&lt;br&gt;
34 Straße&lt;br&gt;
35 Dresden, Brandenburg, 01067&lt;br&gt;
36 Deutschland&lt;br&gt;
37 &lt;/address&gt;
38 &lt;/div&gt;
39 […]
40 &lt;h2 class="feature-headline"&gt;Rechnungsadresse&lt;/h2&gt;
41 &lt;div class="feature-content"&gt;
42 &lt;address&gt;
43 [color]Herr Vorname Nachname&lt;br&gt;
44 Straße&lt;br&gt;
45 Dresden, Brandenburg, 01067&lt;br&gt;
46 Deutschland&lt;br&gt;[/color]
47 &lt;/address&gt;
48 &lt;/div&gt;
49 […]
50 &lt;h2 class="feature-headline"&gt;Zahlungsart&lt;/h2&gt;
51 &lt;div class="feature-content"&gt;
52 &lt;div class="block-content"&gt;
53 Vorkasse&lt;br&gt;
54 &lt;div id="bankpayment_account_info" style="font-style: italic;"&gt;Bankverbindung&lt;/div&gt;
55 &lt;table class="data-table fieldset"&gt;
56 […]
57 &lt;h2 class="sub-title"&gt;
58 &lt;span&gt;Kassenzeichen: WS1712000349&lt;/span&gt;
59 &lt;/h2&gt;
60 &lt;h2 class="sub-title"&gt;Bestellte Artikel&lt;/h2&gt;
61 […]
62 &lt;td class="order-item-product"&gt;
63 &lt;h3 class="product-name ellipsis-multi-line"&gt;Testprodukt Kreditkarte&lt;/h3&gt;
64 […]
65 &lt;span class="price"&gt;100,23 €&lt;/span&gt;
66 […]
67 &lt;/html&gt;
</code></pre>
<h2 id="impact-1">Impact</h2>
<p>Information disclosure.
Read as well as write access to sensitive information of persons or accounts and the execution of actions on their behalf must always be secured by strong authentication. This can be ensured, for example, by enforcing strong passwords or MFA.
For temporary accesses to sensitive information, temporary passwords or
authentication tokens or comparable data that an attacking entity cannot easily guess or determine should be used. Random values should have sufficient entropy so that searching the number space is impractical for attacking entities.
Furthermore, such queries should be limited by rate limiting.
The exact attack effort cannot be determined, since this requires the proportion of
the proportion of orders that were placed without an account and since the performance of the
performance of the production system is likely to differ from that of the test system.
In a test run, 1000 requests could be made within 36 seconds. Part of the execution is shown in the screenshot. The complete search of the number space for the random value would take 6 days 23 hours 46 minutes. Accordingly, the expected value is about 3.5 days. If every third order is executed without an account, the effort must be multiplied by a factor of 3.</p>
<p>Mit freundlichen Grüßen</p>
<p>Frank Rochlitzer (github: theroch)</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/OpenMage/magento-lts/security/advisories/GHSA-9358-cpvx-c2qp">https://github.com/OpenMage/magento-lts/security/advisories/GHSA-9358-cpvx-c2qp</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/commit/2a2a2fb504247e8966f8ffc2e17d614be5d43128">https://github.com/OpenMage/magento-lts/commit/2a2a2fb504247e8966f8ffc2e17d614be5d43128</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/commit/31e74ac5d670b10001f88f038046b62367f15877">https://github.com/OpenMage/magento-lts/commit/31e74ac5d670b10001f88f038046b62367f15877</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/releases/tag/v19.5.1">https://github.com/OpenMage/magento-lts/releases/tag/v19.5.1</a></li>
<li><a href="https://github.com/OpenMage/magento-lts/releases/tag/v20.1.1">https://github.com/OpenMage/magento-lts/releases/tag/v20.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-9358-cpvx-c2qp">https://github.com/advisories/GHSA-9358-cpvx-c2qp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9358-cpvx-c2qp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2023-09-11T20:45:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cockpit-hq/cockpit] Cockpit CMS arbitrary file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-38vf-35cg-m73w</id>
        <link href="https://github.com/advisories/GHSA-38vf-35cg-m73w"/>
        <updated>2023-09-11T18:04:49.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the Upload Asset function of Cockpit CMS v2.6.3 allows attackers to execute arbitrary code via uploading a crafted <code>.shtml</code> file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41564">https://nvd.nist.gov/vuln/detail/CVE-2023-41564</a></li>
<li><a href="https://github.com/LongHair00/Mitre_opensource_report/blob/main/CockpitCMS-StoredXSS.md">https://github.com/LongHair00/Mitre_opensource_report/blob/main/CockpitCMS-StoredXSS.md</a></li>
<li><a href="https://github.com/advisories/GHSA-38vf-35cg-m73w">https://github.com/advisories/GHSA-38vf-35cg-m73w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-38vf-35cg-m73w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-09T00:30:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mautic/core] Mautic Sessions could be hijacked due to tracking contacts by an auto-incremented ID]]></title>
        <id>https://github.com/advisories/GHSA-vfxj-qg93-7wwc</id>
        <link href="https://github.com/advisories/GHSA-vfxj-qg93-7wwc"/>
        <updated>2023-09-11T15:06:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An issue was discovered in Mautic 1.x and 2.x before 2.13.0. It is possible to systematically emulate tracking cookies per contact due to tracking the contact by their auto-incremented ID. Thus, a third party can manipulate the cookie value with +1 to systematically assume being tracked as each contact in Mautic. It is then possible to retrieve information about the contact through forms that have progressive profiling enabled.</p>
<h3 id="patches">Patches</h3>
<p>Update to 2.13.0 or later</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@mautic.org">security@mautic.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mautic/mautic/security/advisories/GHSA-vfxj-qg93-7wwc">https://github.com/mautic/mautic/security/advisories/GHSA-vfxj-qg93-7wwc</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-10189">https://nvd.nist.gov/vuln/detail/CVE-2018-10189</a></li>
<li><a href="https://github.com/mautic/mautic/releases/tag/2.13.0">https://github.com/mautic/mautic/releases/tag/2.13.0</a></li>
<li><a href="https://github.com/advisories/GHSA-vfxj-qg93-7wwc">https://github.com/advisories/GHSA-vfxj-qg93-7wwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vfxj-qg93-7wwc</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-01-19T21:16:21.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[erusev/parsedown] Parsedown Class-Name Injection]]></title>
        <id>https://github.com/advisories/GHSA-62m3-fc7f-jpp8</id>
        <link href="https://github.com/advisories/GHSA-62m3-fc7f-jpp8"/>
        <updated>2023-09-11T15:01:48.000Z</updated>
        <content type="html"><![CDATA[<p>Parsedown before 1.7.2, when safe mode is used and HTML markup is disabled, might allow attackers to execute arbitrary JavaScript code if a script (already running on the affected page) executes the contents of any element with a specific class. This occurs because spaces are permitted in code block infostrings, which interferes with the intended behavior of a single class name beginning with the language- substring.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/erusev/parsedown/issues/699">https://github.com/erusev/parsedown/issues/699</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/erusev/parsedown/CVE-2019-10905.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/erusev/parsedown/CVE-2019-10905.yaml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-10905">https://nvd.nist.gov/vuln/detail/CVE-2019-10905</a></li>
<li><a href="https://github.com/erusev/parsedown/releases/tag/1.7.2">https://github.com/erusev/parsedown/releases/tag/1.7.2</a></li>
<li><a href="https://github.com/advisories/GHSA-62m3-fc7f-jpp8">https://github.com/advisories/GHSA-62m3-fc7f-jpp8</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-62m3-fc7f-jpp8</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-03-26T00:09:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] Cross-site scripting in phpoffice/phpspreadsheet]]></title>
        <id>https://github.com/advisories/GHSA-4mqv-gcr3-pff9</id>
        <link href="https://github.com/advisories/GHSA-4mqv-gcr3-pff9"/>
        <updated>2023-09-11T15:01:32.000Z</updated>
        <content type="html"><![CDATA[<p>This affects the package phpoffice/phpspreadsheet. The library is vulnerable to XSS when creating an html output from an excel file by adding a comment on any cell. The root cause of this issue is within the HTML writer where user comments are concatenated as part of link and this is returned as HTML.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7776">https://nvd.nist.gov/vuln/detail/CVE-2020-7776</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/0ed5b800be2136bcb8fa9c1bdf59abc957a98845">https://github.com/PHPOffice/PhpSpreadsheet/commit/0ed5b800be2136bcb8fa9c1bdf59abc957a98845</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/master/src/PhpSpreadsheet/Writer/Html.php%23L1792">https://github.com/PHPOffice/PhpSpreadsheet/blob/master/src/PhpSpreadsheet/Writer/Html.php%23L1792</a></li>
<li><a href="https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-1048856">https://snyk.io/vuln/SNYK-PHP-PHPOFFICEPHPSPREADSHEET-1048856</a></li>
<li><a href="https://github.com/advisories/GHSA-4mqv-gcr3-pff9">https://github.com/advisories/GHSA-4mqv-gcr3-pff9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4mqv-gcr3-pff9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-05-06T18:53:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[laminas/laminas-http] Remote code execution in zendframework and laminas-http]]></title>
        <id>https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</id>
        <link href="https://github.com/advisories/GHSA-xx8f-qf9f-5fgw"/>
        <updated>2023-09-11T15:00:57.000Z</updated>
        <content type="html"><![CDATA[<p>Laminas Project laminas-http before 2.14.2, and Zend Framework 3.0.0, has a deserialization vulnerability that can lead to remote code execution if the content is controllable, related to the __destruct method of the Zend\Http\Response\Stream class in Stream.php. NOTE: Zend Framework is no longer supported by the maintainer. NOTE: the laminas-http vendor considers this a "vulnerability in the PHP language itself" but has added certain type checking as a way to prevent exploitation in (unrecommended) use cases where attacker-supplied data can be deserialized.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3007">https://nvd.nist.gov/vuln/detail/CVE-2021-3007</a></li>
<li><a href="https://github.com/laminas/laminas-http/pull/48">https://github.com/laminas/laminas-http/pull/48</a></li>
<li><a href="https://github.com/Ling-Yizhou/zendframework3-/blob/main/zend%20framework3%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20rce.md">https://github.com/Ling-Yizhou/zendframework3-/blob/main/zend%20framework3%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20rce.md</a></li>
<li><a href="https://github.com/laminas/laminas-http/commits/2.15.x/src/Response/Stream.php">https://github.com/laminas/laminas-http/commits/2.15.x/src/Response/Stream.php</a></li>
<li><a href="https://github.com/laminas/laminas-http/releases/tag/2.14.2">https://github.com/laminas/laminas-http/releases/tag/2.14.2</a></li>
<li><a href="https://research.checkpoint.com/2021/freakout-leveraging-newest-vulnerabilities-for-creating-a-botnet/">https://research.checkpoint.com/2021/freakout-leveraging-newest-vulnerabilities-for-creating-a-botnet/</a></li>
<li><a href="https://github.com/advisories/GHSA-xx8f-qf9f-5fgw">https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-06-08T20:11:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework] Remote code execution in zendframework and laminas-http]]></title>
        <id>https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</id>
        <link href="https://github.com/advisories/GHSA-xx8f-qf9f-5fgw"/>
        <updated>2023-09-11T15:00:57.000Z</updated>
        <content type="html"><![CDATA[<p>Laminas Project laminas-http before 2.14.2, and Zend Framework 3.0.0, has a deserialization vulnerability that can lead to remote code execution if the content is controllable, related to the __destruct method of the Zend\Http\Response\Stream class in Stream.php. NOTE: Zend Framework is no longer supported by the maintainer. NOTE: the laminas-http vendor considers this a "vulnerability in the PHP language itself" but has added certain type checking as a way to prevent exploitation in (unrecommended) use cases where attacker-supplied data can be deserialized.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-3007">https://nvd.nist.gov/vuln/detail/CVE-2021-3007</a></li>
<li><a href="https://github.com/laminas/laminas-http/pull/48">https://github.com/laminas/laminas-http/pull/48</a></li>
<li><a href="https://github.com/Ling-Yizhou/zendframework3-/blob/main/zend%20framework3%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20rce.md">https://github.com/Ling-Yizhou/zendframework3-/blob/main/zend%20framework3%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%20rce.md</a></li>
<li><a href="https://github.com/laminas/laminas-http/commits/2.15.x/src/Response/Stream.php">https://github.com/laminas/laminas-http/commits/2.15.x/src/Response/Stream.php</a></li>
<li><a href="https://github.com/laminas/laminas-http/releases/tag/2.14.2">https://github.com/laminas/laminas-http/releases/tag/2.14.2</a></li>
<li><a href="https://research.checkpoint.com/2021/freakout-leveraging-newest-vulnerabilities-for-creating-a-botnet/">https://research.checkpoint.com/2021/freakout-leveraging-newest-vulnerabilities-for-creating-a-botnet/</a></li>
<li><a href="https://github.com/advisories/GHSA-xx8f-qf9f-5fgw">https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xx8f-qf9f-5fgw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-06-08T20:11:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[bolt/bolt] Cross-site Scripting in Bolt]]></title>
        <id>https://github.com/advisories/GHSA-cj8p-53v9-2c26</id>
        <link href="https://github.com/advisories/GHSA-cj8p-53v9-2c26"/>
        <updated>2023-09-11T14:59:53.000Z</updated>
        <content type="html"><![CDATA[<p>Bolt before 3.6.10 has XSS via createFolder or createFile in <code>Controller/Async/FilesystemManager.php</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-15485">https://nvd.nist.gov/vuln/detail/CVE-2019-15485</a></li>
<li><a href="https://github.com/bolt/bolt/pull/7800">https://github.com/bolt/bolt/pull/7800</a></li>
<li><a href="https://github.com/bolt/bolt/releases/tag/v3.6.10">https://github.com/bolt/bolt/releases/tag/v3.6.10</a></li>
<li><a href="https://github.com/advisories/GHSA-cj8p-53v9-2c26">https://github.com/advisories/GHSA-cj8p-53v9-2c26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cj8p-53v9-2c26</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2019-11-08T15:28:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/ux-autocomplete] Prevent injection of invalid entity ids for "autocomplete" fields]]></title>
        <id>https://github.com/advisories/GHSA-4cpv-669c-r79x</id>
        <link href="https://github.com/advisories/GHSA-4cpv-669c-r79x"/>
        <updated>2023-09-11T21:41:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Under certain circumstances, an attacker could successfully submit an entity id for an <code>EntityType</code> that is <em>not</em> part of the valid choices.</p>
<p>Affected applications are any that use:</p>
<ul>
<li>A custom <code>query_builder</code> option to limit the valid results;
AND</li>
<li>An <code>EntityType</code> with <code>'autocomplete' =&gt; true</code> or a custom <a href="https://symfony.com/bundles/ux-autocomplete/current/index.html#usage-in-a-form-with-ajax">AsEntityAutocompleteField</a>.</li>
</ul>
<p>Under this circumstance, if an id is submitted, it is accepted even if the matching record would not be returned by the custom query built with <code>query_builder</code>.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been fixed in <code>symfony/ux-autocomplete</code> version 2.11.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Upgrade to version 2.11.2 or greater of <code>symfony/ux-autocomplete</code> or perform extra validation after submit to verify the selected option is valid.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/ux-autocomplete/security/advisories/GHSA-4cpv-669c-r79x">https://github.com/symfony/ux-autocomplete/security/advisories/GHSA-4cpv-669c-r79x</a></li>
<li><a href="https://github.com/symfony/ux-autocomplete/commit/fabcb2eee14b9e84a45b276711853a560b5d770c">https://github.com/symfony/ux-autocomplete/commit/fabcb2eee14b9e84a45b276711853a560b5d770c</a></li>
<li><a href="https://symfony.com/bundles/ux-autocomplete/current/index.html#usage-in-a-form-with-ajax">https://symfony.com/bundles/ux-autocomplete/current/index.html#usage-in-a-form-with-ajax</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/ux-autocomplete/CVE-2023-41336.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/ux-autocomplete/CVE-2023-41336.yaml</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-41336">https://nvd.nist.gov/vuln/detail/CVE-2023-41336</a></li>
<li><a href="https://github.com/advisories/GHSA-4cpv-669c-r79x">https://github.com/advisories/GHSA-4cpv-669c-r79x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4cpv-669c-r79x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2023-09-11T14:43:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mautic/core] XSS vulnerability in theme config file in Mautic]]></title>
        <id>https://github.com/advisories/GHSA-5w74-jx7m-x6hv</id>
        <link href="https://github.com/advisories/GHSA-5w74-jx7m-x6hv"/>
        <updated>2023-09-11T13:42:02.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Mautic before v2.13.0 has stored XSS via a theme config file.</p>
<h3 id="patches">Patches</h3>
<p>Update to 2.13.0 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@mautic.org">security@mautic.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mautic/mautic/security/advisories/GHSA-5w74-jx7m-x6hv">https://github.com/mautic/mautic/security/advisories/GHSA-5w74-jx7m-x6hv</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-8071">https://nvd.nist.gov/vuln/detail/CVE-2018-8071</a></li>
<li><a href="https://github.com/mautic/mautic/commit/3add236e9cc00ea9b211b52cccc4660379b2ee8b">https://github.com/mautic/mautic/commit/3add236e9cc00ea9b211b52cccc4660379b2ee8b</a></li>
<li><a href="https://github.com/mautic/mautic/releases/tag/2.13.0">https://github.com/mautic/mautic/releases/tag/2.13.0</a></li>
<li><a href="https://github.com/advisories/GHSA-5w74-jx7m-x6hv">https://github.com/advisories/GHSA-5w74-jx7m-x6hv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5w74-jx7m-x6hv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-01-19T21:16:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mautic/core] XSS vulnerability in Author URL of themes in Mautic]]></title>
        <id>https://github.com/advisories/GHSA-xcf7-cj8q-pcjm</id>
        <link href="https://github.com/advisories/GHSA-xcf7-cj8q-pcjm"/>
        <updated>2023-09-11T13:41:18.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An XSS vulnerability was discovered in Mautic 2.13.1 in the Author URL of themes.</p>
<h3 id="patches">Patches</h3>
<p>Update to 2.14 or later</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/mautic/mautic/releases/tag/2.14.0">https://github.com/mautic/mautic/releases/tag/2.14.0</a></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@mautic.org">security@mautic.org</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/mautic/mautic/security/advisories/GHSA-xcf7-cj8q-pcjm">https://github.com/mautic/mautic/security/advisories/GHSA-xcf7-cj8q-pcjm</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-11198">https://nvd.nist.gov/vuln/detail/CVE-2018-11198</a></li>
<li><a href="https://github.com/mautic/mautic/releases">https://github.com/mautic/mautic/releases</a></li>
<li><a href="https://github.com/mautic/mautic/releases/tag/2.14.0">https://github.com/mautic/mautic/releases/tag/2.14.0</a></li>
<li><a href="https://github.com/advisories/GHSA-xcf7-cj8q-pcjm">https://github.com/advisories/GHSA-xcf7-cj8q-pcjm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xcf7-cj8q-pcjm</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-01-19T21:16:14.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mautic/core] Mautic users able to download any files from server using filemanager]]></title>
        <id>https://github.com/advisories/GHSA-qpgw-2c72-4c89</id>
        <link href="https://github.com/advisories/GHSA-qpgw-2c72-4c89"/>
        <updated>2023-09-11T13:40:01.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Mautic versions 1.0.0 - 2.11.0 are vulnerable to allowing any authorized Mautic user session (must be logged into Mautic) to use the Filemanager to download any file from the server that the web user has access to.</p>
<h3 id="patches">Patches</h3>
<p>Update to 2.12.0 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@mautic.org">security@mautic.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mautic/mautic/security/advisories/GHSA-qpgw-2c72-4c89">https://github.com/mautic/mautic/security/advisories/GHSA-qpgw-2c72-4c89</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000490">https://nvd.nist.gov/vuln/detail/CVE-2017-1000490</a></li>
<li><a href="https://github.com/mautic/mautic/commit/3b01786433ae15e9a23f1eb9b0d3dfdb065b6241">https://github.com/mautic/mautic/commit/3b01786433ae15e9a23f1eb9b0d3dfdb065b6241</a></li>
<li><a href="https://github.com/mautic/mautic/releases/tag/2.12.0">https://github.com/mautic/mautic/releases/tag/2.12.0</a></li>
<li><a href="https://github.com/advisories/GHSA-qpgw-2c72-4c89">https://github.com/advisories/GHSA-qpgw-2c72-4c89</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qpgw-2c72-4c89</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-01-19T20:50:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mautic/core] Disabled users able to log in with third party SSO plugin]]></title>
        <id>https://github.com/advisories/GHSA-6x98-fx9j-7c78</id>
        <link href="https://github.com/advisories/GHSA-6x98-fx9j-7c78"/>
        <updated>2023-09-11T13:39:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Mautic versions 2.0.0 - 2.11.0 with a SSO plugin installed could allow a disabled user to still login using email address</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to 2.12.0 or later.</p>
<h3 id="workarounds">Workarounds</h3>
<p>None.</p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Email us at <a href="mailto:security@mautic.org">security@mautic.org</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/mautic/mautic/security/advisories/GHSA-6x98-fx9j-7c78">https://github.com/mautic/mautic/security/advisories/GHSA-6x98-fx9j-7c78</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-1000489">https://nvd.nist.gov/vuln/detail/CVE-2017-1000489</a></li>
<li><a href="https://github.com/mautic/mautic/commit/fd933cbef795b04cabdc50527cb18e037488fef9">https://github.com/mautic/mautic/commit/fd933cbef795b04cabdc50527cb18e037488fef9</a></li>
<li><a href="https://github.com/mautic/mautic/releases/tag/2.12.0">https://github.com/mautic/mautic/releases/tag/2.12.0</a></li>
<li><a href="https://github.com/advisories/GHSA-6x98-fx9j-7c78">https://github.com/advisories/GHSA-6x98-fx9j-7c78</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6x98-fx9j-7c78</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-01-19T21:16:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet due to incomplete fix for previous encoding issue]]></title>
        <id>https://github.com/advisories/GHSA-vvwv-h69m-wg6f</id>
        <link href="https://github.com/advisories/GHSA-vvwv-h69m-wg6f"/>
        <updated>2023-09-11T13:38:05.000Z</updated>
        <content type="html"><![CDATA[<p>PHPOffice PhpSpreadsheet before 1.8.0 has an XXE issue. The XmlScanner decodes the sheet1.xml from an .xlsx to utf-8 if something else than UTF-8 is declared in the header. This was a security measurement to prevent CVE-2018-19277 but the fix is not sufficient. By double-encoding the the xml payload to utf-7 it is possible to bypass the check for the string ?&lt;!ENTITY? and thus allowing for an xml external entity processing (XXE) attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12331">https://nvd.nist.gov/vuln/detail/CVE-2019-12331</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/master/CHANGELOG.md#180---2019-07-01">https://github.com/PHPOffice/PhpSpreadsheet/blob/master/CHANGELOG.md#180---2019-07-01</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/releases/tag/1.8.0">https://github.com/PHPOffice/PhpSpreadsheet/releases/tag/1.8.0</a></li>
<li><a href="https://herolab.usd.de/security-advisories/usd-2019-0046/">https://herolab.usd.de/security-advisories/usd-2019-0046/</a></li>
<li><a href="https://github.com/advisories/GHSA-vvwv-h69m-wg6f">https://github.com/advisories/GHSA-vvwv-h69m-wg6f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vvwv-h69m-wg6f</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-11-20T01:39:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/drupal] Drupal core third-party PEAR Archive_Tar library is vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</id>
        <link href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp"/>
        <updated>2023-09-08T14:19:07.000Z</updated>
        <content type="html"><![CDATA[<p>In Drupal Core versions 7.x prior to 7.62, 8.6.x prior to 8.6.6 and 8.5.x prior to 8.5.9; Drupal core uses the third-party PEAR Archive_Tar library. This library has released a security update which impacts some Drupal configurations. Refer to CVE-2018-1000888 for details</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-6338">https://nvd.nist.gov/vuln/detail/CVE-2019-6338</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html">https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html</a></li>
<li><a href="https://www.debian.org/security/2019/dsa-4370">https://www.debian.org/security/2019/dsa-4370</a></li>
<li><a href="https://www.drupal.org/sa-core-2019-001">https://www.drupal.org/sa-core-2019-001</a></li>
<li><a href="http://www.securityfocus.com/bid/106706">http://www.securityfocus.com/bid/106706</a></li>
<li><a href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp">https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-12-02T18:11:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/drupal] Drupal core third-party PEAR Archive_Tar library is vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</id>
        <link href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp"/>
        <updated>2023-09-08T14:19:07.000Z</updated>
        <content type="html"><![CDATA[<p>In Drupal Core versions 7.x prior to 7.62, 8.6.x prior to 8.6.6 and 8.5.x prior to 8.5.9; Drupal core uses the third-party PEAR Archive_Tar library. This library has released a security update which impacts some Drupal configurations. Refer to CVE-2018-1000888 for details</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-6338">https://nvd.nist.gov/vuln/detail/CVE-2019-6338</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html">https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html</a></li>
<li><a href="https://www.debian.org/security/2019/dsa-4370">https://www.debian.org/security/2019/dsa-4370</a></li>
<li><a href="https://www.drupal.org/sa-core-2019-001">https://www.drupal.org/sa-core-2019-001</a></li>
<li><a href="http://www.securityfocus.com/bid/106706">http://www.securityfocus.com/bid/106706</a></li>
<li><a href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp">https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-12-02T18:11:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/drupal] Drupal core third-party PEAR Archive_Tar library is vulnerable to Deserialization of Untrusted Data]]></title>
        <id>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</id>
        <link href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp"/>
        <updated>2023-09-08T14:19:07.000Z</updated>
        <content type="html"><![CDATA[<p>In Drupal Core versions 7.x prior to 7.62, 8.6.x prior to 8.6.6 and 8.5.x prior to 8.5.9; Drupal core uses the third-party PEAR Archive_Tar library. This library has released a security update which impacts some Drupal configurations. Refer to CVE-2018-1000888 for details</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2019-6338">https://nvd.nist.gov/vuln/detail/CVE-2019-6338</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/drupal/drupal/CVE-2019-6338.yaml</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html">https://lists.debian.org/debian-lts-announce/2019/02/msg00032.html</a></li>
<li><a href="https://www.debian.org/security/2019/dsa-4370">https://www.debian.org/security/2019/dsa-4370</a></li>
<li><a href="https://www.drupal.org/sa-core-2019-001">https://www.drupal.org/sa-core-2019-001</a></li>
<li><a href="http://www.securityfocus.com/bid/106706">http://www.securityfocus.com/bid/106706</a></li>
<li><a href="https://github.com/advisories/GHSA-6rmq-x2hv-vxpp">https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6rmq-x2hv-vxpp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2019-12-02T18:11:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core] Drupal core Unrestricted Upload of File with Dangerous Type]]></title>
        <id>https://github.com/advisories/GHSA-68jc-v27h-vhmw</id>
        <link href="https://github.com/advisories/GHSA-68jc-v27h-vhmw"/>
        <updated>2023-09-08T14:12:07.000Z</updated>
        <content type="html"><![CDATA[<p>Drupal core does not properly sanitize certain filenames on uploaded files, which can lead to files being interpreted as the incorrect extension and served as the wrong MIME type or executed as PHP for certain hosting configurations. This issue affects: Drupal Drupal Core 9.0 versions prior to 9.0.8, 8.9 versions prior to 8.9.9, 8.8 versions prior to 8.8.11, and 7 versions prior to 7.74.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13671">https://nvd.nist.gov/vuln/detail/CVE-2020-13671</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5KSFM672XW3X6BR7TVKRD63SLZGKK437/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5KSFM672XW3X6BR7TVKRD63SLZGKK437/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KWM4CTMEGAC4I2CHYNJVSROY4CVXVEUT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KWM4CTMEGAC4I2CHYNJVSROY4CVXVEUT/</a></li>
<li><a href="https://www.drupal.org/sa-core-2020-012">https://www.drupal.org/sa-core-2020-012</a></li>
<li><a href="https://github.com/advisories/GHSA-68jc-v27h-vhmw">https://github.com/advisories/GHSA-68jc-v27h-vhmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68jc-v27h-vhmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-10-12T16:28:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core] Drupal core Unrestricted Upload of File with Dangerous Type]]></title>
        <id>https://github.com/advisories/GHSA-68jc-v27h-vhmw</id>
        <link href="https://github.com/advisories/GHSA-68jc-v27h-vhmw"/>
        <updated>2023-09-08T14:12:07.000Z</updated>
        <content type="html"><![CDATA[<p>Drupal core does not properly sanitize certain filenames on uploaded files, which can lead to files being interpreted as the incorrect extension and served as the wrong MIME type or executed as PHP for certain hosting configurations. This issue affects: Drupal Drupal Core 9.0 versions prior to 9.0.8, 8.9 versions prior to 8.9.9, 8.8 versions prior to 8.8.11, and 7 versions prior to 7.74.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13671">https://nvd.nist.gov/vuln/detail/CVE-2020-13671</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5KSFM672XW3X6BR7TVKRD63SLZGKK437/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5KSFM672XW3X6BR7TVKRD63SLZGKK437/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KWM4CTMEGAC4I2CHYNJVSROY4CVXVEUT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/KWM4CTMEGAC4I2CHYNJVSROY4CVXVEUT/</a></li>
<li><a href="https://www.drupal.org/sa-core-2020-012">https://www.drupal.org/sa-core-2020-012</a></li>
<li><a href="https://github.com/advisories/GHSA-68jc-v27h-vhmw">https://github.com/advisories/GHSA-68jc-v27h-vhmw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-68jc-v27h-vhmw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-10-12T16:28:25.000Z</published>
    </entry>
</feed>