<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-05-15T22:01:18.819Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[illuminate/encryption] Laravel Encrypter Failure to decryption vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6wjw-qf87-fv5v</id>
        <link href="https://github.com/advisories/GHSA-6wjw-qf87-fv5v"/>
        <updated>2024-05-15T22:01:03.000Z</updated>
        <content type="html"><![CDATA[<p>A potential exploit of the Laravel Encrypter component that may cause the Encrypter to fail on decryption and unexpectedly return false.</p>
<p>To exploit this, the attacker must be able to modify the encrypted payload before it is decrypted. Depending on the code within your application, this could lead to unexpected behavior when combined with weak type comparisons, for example:</p>
<pre><code class="language-php">&lt;?php

$decyptedValue = decrypt($secret);

if ($decryptedValue == '') {
    // Code is run even though decrypted value is false...
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/illuminate/encryption/commit/51667a52bd7d135c6aa40a897656ffe9d3cd072d">https://github.com/illuminate/encryption/commit/51667a52bd7d135c6aa40a897656ffe9d3cd072d</a></li>
<li><a href="https://github.com/illuminate/encryption/commit/c80b1da6a0412bd74bd56dc80f6126f561631b05">https://github.com/illuminate/encryption/commit/c80b1da6a0412bd74bd56dc80f6126f561631b05</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/encryption/2018-03-30-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/encryption/2018-03-30-1.yaml</a></li>
<li><a href="https://medium.com/@taylorotwell/laravel-security-release-5-6-15-and-5-5-40-56f1257933a0">https://medium.com/@taylorotwell/laravel-security-release-5-6-15-and-5-5-40-56f1257933a0</a></li>
<li><a href="https://github.com/advisories/GHSA-6wjw-qf87-fv5v">https://github.com/advisories/GHSA-6wjw-qf87-fv5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wjw-qf87-fv5v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-15T22:01:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/encryption] Laravel Encrypter Failure to decryption vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6wjw-qf87-fv5v</id>
        <link href="https://github.com/advisories/GHSA-6wjw-qf87-fv5v"/>
        <updated>2024-05-15T22:01:03.000Z</updated>
        <content type="html"><![CDATA[<p>A potential exploit of the Laravel Encrypter component that may cause the Encrypter to fail on decryption and unexpectedly return false.</p>
<p>To exploit this, the attacker must be able to modify the encrypted payload before it is decrypted. Depending on the code within your application, this could lead to unexpected behavior when combined with weak type comparisons, for example:</p>
<pre><code class="language-php">&lt;?php

$decyptedValue = decrypt($secret);

if ($decryptedValue == '') {
    // Code is run even though decrypted value is false...
}
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/illuminate/encryption/commit/51667a52bd7d135c6aa40a897656ffe9d3cd072d">https://github.com/illuminate/encryption/commit/51667a52bd7d135c6aa40a897656ffe9d3cd072d</a></li>
<li><a href="https://github.com/illuminate/encryption/commit/c80b1da6a0412bd74bd56dc80f6126f561631b05">https://github.com/illuminate/encryption/commit/c80b1da6a0412bd74bd56dc80f6126f561631b05</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/encryption/2018-03-30-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/encryption/2018-03-30-1.yaml</a></li>
<li><a href="https://medium.com/@taylorotwell/laravel-security-release-5-6-15-and-5-5-40-56f1257933a0">https://medium.com/@taylorotwell/laravel-security-release-5-6-15-and-5-5-40-56f1257933a0</a></li>
<li><a href="https://github.com/advisories/GHSA-6wjw-qf87-fv5v">https://github.com/advisories/GHSA-6wjw-qf87-fv5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6wjw-qf87-fv5v</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-05-15T22:01:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/cookie] Laravel Cookie serialization vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2867-6rrm-38gr</id>
        <link href="https://github.com/advisories/GHSA-2867-6rrm-38gr"/>
        <updated>2024-05-15T21:56:11.000Z</updated>
        <content type="html"><![CDATA[<p>Laravel 5.6.30 is a security release of Laravel and is recommended as an immediate upgrade for all users. Laravel 5.6.30 also contains a breaking change to cookie encryption and serialization logic. Refer to <a href="https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30">laravel advisory</a> for more details and read the notes carefully when upgrading your application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2018-08-08-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2018-08-08-1.yaml</a></li>
<li><a href="https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30">https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30</a></li>
<li><a href="https://github.com/advisories/GHSA-2867-6rrm-38gr">https://github.com/advisories/GHSA-2867-6rrm-38gr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2867-6rrm-38gr</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-15T21:56:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/view] Laravel Cross-site Scripting vulnerability in blade templating]]></title>
        <id>https://github.com/advisories/GHSA-297g-xg4h-7w4c</id>
        <link href="https://github.com/advisories/GHSA-297g-xg4h-7w4c"/>
        <updated>2024-05-15T21:54:05.000Z</updated>
        <content type="html"><![CDATA[<p>Laravel is prone to a Cross-site Scripting vulnerability in blade templating.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/laravel/framework/pull/31945">https://github.com/laravel/framework/pull/31945</a></li>
<li><a href="https://blog.laravel.com/security-laravel-712-released">https://blog.laravel.com/security-laravel-712-released</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/view/2020-03-13-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/view/2020-03-13-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-297g-xg4h-7w4c">https://github.com/advisories/GHSA-297g-xg4h-7w4c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-297g-xg4h-7w4c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:54:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/database] Laravel Risk of mass-assignment vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-cc2w-ghc5-m5qr</id>
        <link href="https://github.com/advisories/GHSA-cc2w-ghc5-m5qr"/>
        <updated>2024-05-15T21:53:04.000Z</updated>
        <content type="html"><![CDATA[<p>Laravel 4.1.29 improves the column quoting for all database drivers. This protects your application from some mass assignment vulnerabilities when not using the fillable property on models. If you are using the fillable property on your models to protect against mass assignment, your application is not vulnerable. However, if you are using guarded and are passing a user controlled array into an "update" or "save" type function, you should upgrade to 4.1.29 immediately as your application may be at risk of mass assignment.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/database/2014-05-20.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/database/2014-05-20.yaml</a></li>
<li><a href="https://laravel.com/docs/5.1/upgrade#upgrade-4.1.29">https://laravel.com/docs/5.1/upgrade#upgrade-4.1.29</a></li>
<li><a href="https://github.com/advisories/GHSA-cc2w-ghc5-m5qr">https://github.com/advisories/GHSA-cc2w-ghc5-m5qr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc2w-ghc5-m5qr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:53:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/cookie] Laravel RCE vulnerability in "cookie" session driver]]></title>
        <id>https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</id>
        <link href="https://github.com/advisories/GHSA-2ffv-r4r9-r8xr"/>
        <updated>2024-05-15T21:52:29.000Z</updated>
        <content type="html"><![CDATA[<p>Application's using the "cookie" session driver were the primary applications affected by this vulnerability. Since we have not yet released a security release for the Laravel 5.5 version of the framework, we recommend that all applications running Laravel 5.5 and earlier do not use the "cookie" session driver in their production deployments.</p>
<p>Regarding the vulnerability, applications using the "cookie" session driver that were also exposing an encryption oracle via their application were vulnerable to remote code execution. An encryption oracle is a mechanism where arbitrary user input is encrypted and the encrypted string is later displayed or exposed to the user. This combination of scenarios lets the user generate valid Laravel signed encryption strings for any plain-text string, thus allowing them to craft Laravel session payloads when an application is using the "cookie" driver.</p>
<p>This fix prefixes cookie values with an HMAC hash of the cookie's name before encryption and then verifies a matching hash on decryption, making it impossible to craft a valid cookie payload even if an encryption oracle is exposed via the application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://blog.laravel.com/laravel-cookie-security-releases">https://blog.laravel.com/laravel-cookie-security-releases</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2020-07-27-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2020-07-27-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2ffv-r4r9-r8xr">https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-15T21:52:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/cookie] Laravel RCE vulnerability in "cookie" session driver]]></title>
        <id>https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</id>
        <link href="https://github.com/advisories/GHSA-2ffv-r4r9-r8xr"/>
        <updated>2024-05-15T21:52:29.000Z</updated>
        <content type="html"><![CDATA[<p>Application's using the "cookie" session driver were the primary applications affected by this vulnerability. Since we have not yet released a security release for the Laravel 5.5 version of the framework, we recommend that all applications running Laravel 5.5 and earlier do not use the "cookie" session driver in their production deployments.</p>
<p>Regarding the vulnerability, applications using the "cookie" session driver that were also exposing an encryption oracle via their application were vulnerable to remote code execution. An encryption oracle is a mechanism where arbitrary user input is encrypted and the encrypted string is later displayed or exposed to the user. This combination of scenarios lets the user generate valid Laravel signed encryption strings for any plain-text string, thus allowing them to craft Laravel session payloads when an application is using the "cookie" driver.</p>
<p>This fix prefixes cookie values with an HMAC hash of the cookie's name before encryption and then verifies a matching hash on decryption, making it impossible to craft a valid cookie payload even if an encryption oracle is exposed via the application.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://blog.laravel.com/laravel-cookie-security-releases">https://blog.laravel.com/laravel-cookie-security-releases</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2020-07-27-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/cookie/2020-07-27-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2ffv-r4r9-r8xr">https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2ffv-r4r9-r8xr</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-15T21:52:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[illuminate/auth] Laravel Hijacked authentication cookies vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-q4xf-7fw5-4x8v</id>
        <link href="https://github.com/advisories/GHSA-q4xf-7fw5-4x8v"/>
        <updated>2024-05-15T21:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>Laravel 4.1.26 introduces security improvements for "remember me" cookies. Before this update, if a remember cookie was hijacked by another malicious user, the cookie would remain valid for a long period of time, even after the true owner of the account reset their password, logged out, etc.</p>
<p>This change requires the addition of a new remember_token column to your users (or equivalent) database table. After this change, a fresh token will be assigned to the user each time they login to your application. The token will also be refreshed when the user logs out of the application. The implications of this change are: if a "remember me" cookie is hijacked, simply logging out of the application will invalidate the cookie.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/auth/2014-04-15.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/illuminate/auth/2014-04-15.yaml</a></li>
<li><a href="https://laravel.com/docs/5.1/upgrade#upgrade-4.1.26">https://laravel.com/docs/5.1/upgrade#upgrade-4.1.26</a></li>
<li><a href="https://github.com/advisories/GHSA-q4xf-7fw5-4x8v">https://github.com/advisories/GHSA-q4xf-7fw5-4x8v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q4xf-7fw5-4x8v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:50:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gregwar/rst] gregwar/rst Local File Inclusion Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-2gq2-m628-33xp</id>
        <link href="https://github.com/advisories/GHSA-2gq2-m628-33xp"/>
        <updated>2024-05-15T21:49:22.000Z</updated>
        <content type="html"><![CDATA[<p>A Local File Inclusion (LFI) vulnerability has been discovered in the gregwar/rst library, potentially exposing sensitive files on the server to unauthorized users. The issue arises from inadequate input validation, allowing an attacker to manipulate file paths and include arbitrary files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Gregwar/RST/pull/34">https://github.com/Gregwar/RST/pull/34</a></li>
<li><a href="https://github.com/Gregwar/RST/commit/e8d90ccbeddd91ba3abc506079661dce234f9870">https://github.com/Gregwar/RST/commit/e8d90ccbeddd91ba3abc506079661dce234f9870</a></li>
<li><a href="https://hackerone.com/reports/179034">https://hackerone.com/reports/179034</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/gregwar/rst/2016-10-31.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/gregwar/rst/2016-10-31.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2gq2-m628-33xp">https://github.com/advisories/GHSA-2gq2-m628-33xp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2gq2-m628-33xp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-15T21:49:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[gree/jose] gree/jose - "None" Algorithm treated as valid in tokens]]></title>
        <id>https://github.com/advisories/GHSA-9gxv-x7rp-r2hc</id>
        <link href="https://github.com/advisories/GHSA-9gxv-x7rp-r2hc"/>
        <updated>2024-05-15T21:47:39.000Z</updated>
        <content type="html"><![CDATA[<p>Several widely-used JSON Web Token (JWT) libraries, including node-jsonwebtoken, pyjwt, namshi/jose, php-jwt, and jsjwt, are affected by critical vulnerabilities that could allow attackers to bypass the verification step when using asymmetric keys (RS256, RS384, RS512, ES256, ES384, ES512).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/gree/jose/2016-08-30.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/gree/jose/2016-08-30.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-9gxv-x7rp-r2hc">https://github.com/advisories/GHSA-9gxv-x7rp-r2hc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9gxv-x7rp-r2hc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-15T21:47:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fuel/core] fuel/core Crypt encryption compromised.]]></title>
        <id>https://github.com/advisories/GHSA-fgrx-4637-fcf5</id>
        <link href="https://github.com/advisories/GHSA-fgrx-4637-fcf5"/>
        <updated>2024-05-15T21:46:57.000Z</updated>
        <content type="html"><![CDATA[<p>In fuel/core versions pior to 1.8.1, with the right knowledge, code, and GPU calculation power, Crypt encryption can be broken in minutes.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fuel/core/commit/59112c96d0a6f2b0ead6a57edd8ac465678bdcb0">https://github.com/fuel/core/commit/59112c96d0a6f2b0ead6a57edd8ac465678bdcb0</a></li>
<li><a href="https://fuelphp.com/security-advisories">https://fuelphp.com/security-advisories</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/fuel/core/2018-04-14-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/fuel/core/2018-04-14-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fgrx-4637-fcf5">https://github.com/advisories/GHSA-fgrx-4637-fcf5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fgrx-4637-fcf5</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:46:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fuel/core] fuel/core ImageMagick driver does not escape all shell arguments.]]></title>
        <id>https://github.com/advisories/GHSA-26hp-cgjj-m2j3</id>
        <link href="https://github.com/advisories/GHSA-26hp-cgjj-m2j3"/>
        <updated>2024-05-15T21:44:47.000Z</updated>
        <content type="html"><![CDATA[<p>This vulnerability may cause OS commands to be executed when you pass unvalidated image filenames containing specially crafted strings to the ImageMagick driver.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fuel/core/commit/95c134e9e087f3c4523fe6cd86ed4e9e1e7af91c">https://github.com/fuel/core/commit/95c134e9e087f3c4523fe6cd86ed4e9e1e7af91c</a></li>
<li><a href="https://fuelphp.com/security-advisories">https://fuelphp.com/security-advisories</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/fuel/core/2016-06-29-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/fuel/core/2016-06-29-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-26hp-cgjj-m2j3">https://github.com/advisories/GHSA-26hp-cgjj-m2j3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-26hp-cgjj-m2j3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-15T21:44:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[friendsofsymfony/user-bundle] FOSUserBundle User Identity Validation Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8wx3-8m4x-g5h4</id>
        <link href="https://github.com/advisories/GHSA-8wx3-8m4x-g5h4"/>
        <updated>2024-05-15T21:43:24.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of FOSUserBundle prior to 1.2.1 have been found to be vulnerable to a security issue related to user identity validation. Specifically, user refreshing was performed using the primary key instead of the username, leading to a potential security risk if a user is allowed to change their username. The fix in version 1.2.1 addresses this issue by loading the user using the primary key during refreshing.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfSymfony/FOSUserBundle/commit/5a36e2958068d1e6501dc8cf39bbae3ebb859d9f">https://github.com/FriendsOfSymfony/FOSUserBundle/commit/5a36e2958068d1e6501dc8cf39bbae3ebb859d9f</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2012-07-10-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2012-07-10-1.yaml</a></li>
<li><a href="https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Changelog.md">https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Changelog.md</a></li>
<li><a href="https://github.com/advisories/GHSA-8wx3-8m4x-g5h4">https://github.com/advisories/GHSA-8wx3-8m4x-g5h4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8wx3-8m4x-g5h4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:43:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[friendsofsymfony/user-bundle] FOSUserBundle Session Hijacking Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-6mjq-9x4w-m3w9</id>
        <link href="https://github.com/advisories/GHSA-6mjq-9x4w-m3w9"/>
        <updated>2024-05-15T21:42:57.000Z</updated>
        <content type="html"><![CDATA[<p>Versions of FOSUserBundle from 1.2.x to 1.2.4 have been found to contain a security vulnerability related to session hijacking. This issue has been addressed in version 1.2.4, and users are strongly advised to upgrade to the latest version to prevent potential session-related security risks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfSymfony/FOSUserBundle/commit/8e412a70cafd924ad04c7325dae423048861b955">https://github.com/FriendsOfSymfony/FOSUserBundle/commit/8e412a70cafd924ad04c7325dae423048861b955</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2012-07-10-2.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2012-07-10-2.yaml</a></li>
<li><a href="https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Changelog.md">https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Changelog.md</a></li>
<li><a href="https://github.com/advisories/GHSA-6mjq-9x4w-m3w9">https://github.com/advisories/GHSA-6mjq-9x4w-m3w9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6mjq-9x4w-m3w9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-15T21:42:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[friendsofsymfony/user-bundle] FOSUserBundle Entropy is lost in the TokenGenerator]]></title>
        <id>https://github.com/advisories/GHSA-pjx8-984p-7p3x</id>
        <link href="https://github.com/advisories/GHSA-pjx8-984p-7p3x"/>
        <updated>2024-05-15T21:42:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="description">Description</h3>
<p>Because of the usage of base_convert which looses precision for large inputs, the entropy of tokens generated by FOSUserBundle for the email confirmation and password resetting is lost. This makes these tokens much less random than they are expected to be, and so not cryptographically safe.</p>
<h3 id="resolution">Resolution</h3>
<p>The token generation logic used in the 2.0.x branch based on base64 encoding has been backported. This changes the range of characters used in the token. Any route placeholder expected to match a token generated by FOSUserBundle must be updated to allow dashes, which are not allowed by \w in regexes. A \w+ requirement should so become [\w-]+.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfSymfony/FOSUserBundle/commit/b3ebfea52065e9727508f5f8e6c9f7459a1b06d8">https://github.com/FriendsOfSymfony/FOSUserBundle/commit/b3ebfea52065e9727508f5f8e6c9f7459a1b06d8</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2014-09-04-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/user-bundle/2014-09-04-1.yaml</a></li>
<li><a href="https://symfony.com/blog/fosuserbundle-entropy-of-generated-tokens-is-lost">https://symfony.com/blog/fosuserbundle-entropy-of-generated-tokens-is-lost</a></li>
<li><a href="https://github.com/advisories/GHSA-pjx8-984p-7p3x">https://github.com/advisories/GHSA-pjx8-984p-7p3x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pjx8-984p-7p3x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:42:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[friendsofsymfony/rest-bundle] FOSRestBundle issue with broken validation of JSONP callbacks]]></title>
        <id>https://github.com/advisories/GHSA-p9fg-j6ww-953m</id>
        <link href="https://github.com/advisories/GHSA-p9fg-j6ww-953m"/>
        <updated>2024-05-15T21:41:10.000Z</updated>
        <content type="html"><![CDATA[<p>Starting with FOSRestBundle 1.2 we <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/pull/642/files#diff-431bc57ca9ca16332c0cff43ad45263cR37">switched</a> to using <a href="https://github.com/willdurand/JsonpCallbackValidator">willdurand/jsonp-callback-validator</a> for validation of JSONP callbacks. However <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/pull/665">the change was implemented</a> incorrectly validating the callback query param name, rather than its value. Anyone using the JSONP handler (which is off by default) together with FOSRestBundle 1.2.0 or 1.2.1 should update to FOSRestBundle <a href="https://github.com/FriendsOfSymfony/FOSRestBundle/releases/tag/1.2.2">1.2.2</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfSymfony/FOSRestBundle/commit/3dd7d40068360c23366fb4884c5d194c769ec2c1">https://github.com/FriendsOfSymfony/FOSRestBundle/commit/3dd7d40068360c23366fb4884c5d194c769ec2c1</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/rest-bundle/2014-01-22-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/rest-bundle/2014-01-22-1.yaml</a></li>
<li><a href="https://symfony.com/blog/fosrestbundle-security-issue-with-jsonp-handler">https://symfony.com/blog/fosrestbundle-security-issue-with-jsonp-handler</a></li>
<li><a href="https://github.com/advisories/GHSA-p9fg-j6ww-953m">https://github.com/advisories/GHSA-p9fg-j6ww-953m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9fg-j6ww-953m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:41:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[friendsofsymfony/oauth2-php] friendsofsymfony/oauth2-php open redirection in oauth]]></title>
        <id>https://github.com/advisories/GHSA-xm3x-4ph3-3x9c</id>
        <link href="https://github.com/advisories/GHSA-xm3x-4ph3-3x9c"/>
        <updated>2024-05-15T21:39:31.000Z</updated>
        <content type="html"><![CDATA[<p>An open redirection vulnerability has been identified in the friendsofsymfony/oauth2-php library, which could potentially expose users to unauthorized redirects during the OAuth authentication process. This vulnerability has been addressed by implementing an exact check for the domain and port, ensuring more secure redirection.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfSymfony/oauth2-php/commit/606b8ea1c3c927c272ac1409116332ad5a2ed94c">https://github.com/FriendsOfSymfony/oauth2-php/commit/606b8ea1c3c927c272ac1409116332ad5a2ed94c</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/oauth2-php/2020-03-03-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/friendsofsymfony/oauth2-php/2020-03-03-1.yaml</a></li>
<li><a href="https://github.com/FriendsOfSymfony/oauth2-php/releases/tag/1.3.0">https://github.com/FriendsOfSymfony/oauth2-php/releases/tag/1.3.0</a></li>
<li><a href="https://github.com/advisories/GHSA-xm3x-4ph3-3x9c">https://github.com/advisories/GHSA-xm3x-4ph3-3x9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xm3x-4ph3-3x9c</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:39:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[firebase/php-jwt] firebase/php-jwt: "None" Algorithm treated as valid on tokens]]></title>
        <id>https://github.com/advisories/GHSA-h533-5v22-8vcp</id>
        <link href="https://github.com/advisories/GHSA-h533-5v22-8vcp"/>
        <updated>2024-05-15T21:38:50.000Z</updated>
        <content type="html"><![CDATA[<p>Several widely-used JSON Web Token (JWT) libraries, including node-jsonwebtoken, pyjwt, namshi/jose, php-jwt, and jsjwt, are affected by critical vulnerabilities that could allow attackers to bypass the verification step when using asymmetric keys (RS256, RS384, RS512, ES256, ES384, ES512).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/firebase/php-jwt/commit/b2c2be6a45fda769c8c2ffe5ec4259a9d1e46e5b">https://github.com/firebase/php-jwt/commit/b2c2be6a45fda769c8c2ffe5ec4259a9d1e46e5b</a></li>
<li><a href="https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/2015/03/31/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries">https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/firebase/php-jwt/2015-04-02.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/firebase/php-jwt/2015-04-02.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h533-5v22-8vcp">https://github.com/advisories/GHSA-h533-5v22-8vcp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h533-5v22-8vcp</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-15T21:38:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ezsystems/repository-forms] eZ Platform User data disclosure]]></title>
        <id>https://github.com/advisories/GHSA-3g43-xfrw-pv5m</id>
        <link href="https://github.com/advisories/GHSA-3g43-xfrw-pv5m"/>
        <updated>2024-05-15T21:35:00.000Z</updated>
        <content type="html"><![CDATA[<p>In eZ Platform v2.3.x it is possible to bypass permission checks in a particular case. This means user data such as name and email (but not passwords or password hashes) can be read by unauthenticated users. This affects only v2.3.x. If you use v2.2.x or older you are not affected.</p>
<p>To install, use Composer to update "ezsystems/repository-forms" to the "Resolving versions" mentioned above, or apply this patch manually:
<a href="https://github.com/ezsystems/repository-forms/commit/ea82e136ec1ea40aca714abb79cc8e5bfece01e8">https://github.com/ezsystems/repository-forms/commit/ea82e136ec1ea40aca714abb79cc8e5bfece01e8</a></p>
<p>Have you found a security bug in eZ Publish or eZ Platform? See how to report it responsibly here: <a href="https://doc.ez.no/Security">https://doc.ez.no/Security</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ezsystems/repository-forms/commit/ea82e136ec1ea40aca714abb79cc8e5bfece01e8">https://github.com/ezsystems/repository-forms/commit/ea82e136ec1ea40aca714abb79cc8e5bfece01e8</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/repository-forms/2018-11-20-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/repository-forms/2018-11-20-1.yaml</a></li>
<li><a href="https://web.archive.org/web/20210614184249/http://share.ez.no/community-project/security-advisories/ezsa-2018-007-user-data-disclosure">https://web.archive.org/web/20210614184249/http://share.ez.no/community-project/security-advisories/ezsa-2018-007-user-data-disclosure</a></li>
<li><a href="http://share.ez.no/community-project/security-advisories/ezsa-2018-007-user-data-disclosure">http://share.ez.no/community-project/security-advisories/ezsa-2018-007-user-data-disclosure</a></li>
<li><a href="https://github.com/advisories/GHSA-3g43-xfrw-pv5m">https://github.com/advisories/GHSA-3g43-xfrw-pv5m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3g43-xfrw-pv5m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-15T21:34:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ezsystems/platform-ui-assets-bundle] eZ Platform Admin UI is vulnerable to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-w9p3-26fx-5mp3</id>
        <link href="https://github.com/advisories/GHSA-w9p3-26fx-5mp3"/>
        <updated>2024-05-15T21:34:20.000Z</updated>
        <content type="html"><![CDATA[<p>There is an XSS vulnerability in CKEditor, which is used by AlloyEditor, which is used in eZ Platform Admin UI. Scripts can be injected through specially crafted "protected" comments. We are not sure it is exploitable in eZ Platform, but recommend installing it to be on the safe side. It is fixed in CKEditor v4.14, AlloyEditor v2.11.9. It is distributed via Composer, for:</p>
<pre><code>eZ Platform v1.13.x: ezsystems/PlatformUIAssetsBundle v4.2.3 (included from ezsystems/PlatformUIBundle v1.13.x)

eZ Platform v2.5.13: ezsystems/ezplatform-admin-ui-assets v4.2.1

eZ Platform v3.0.*: ezsystems/ezplatform-admin-ui-assets v5.0.1

eZ Platform v3.1.2: ezsystems/ezplatform-admin-ui-assets v5.1.1
</code></pre>
<p>Drafts that are sent to trash become visible in the Review Queue, even for users that were not able to see them before this action. It's not possible to preview them, but their title and review history is displayed. This affects Enterprise Edition only, of which ezplatform-workflow is a part. This security update is distributed via Composer, for</p>
<pre><code>eZ Platform EE v2.5.13: ezsystems/ezplatform-workflow v1.1.9

eZ Platform EE v3.1.2: ezsystems/ezplatform-workflow v2.1.1
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://ezplatform.com/security-advisories/ezsa-2020-005-editor-xss-and-trashed-drafts-in-review-queue">https://ezplatform.com/security-advisories/ezsa-2020-005-editor-xss-and-trashed-drafts-in-review-queue</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/platform-ui-assets-bundle/2020-08-07-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/ezsystems/platform-ui-assets-bundle/2020-08-07-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-w9p3-26fx-5mp3">https://github.com/advisories/GHSA-w9p3-26fx-5mp3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9p3-26fx-5mp3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-15T21:34:20.000Z</published>
    </entry>
</feed>