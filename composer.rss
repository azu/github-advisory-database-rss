<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-06-10T02:14:36.662Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[zfr/zfr-oauth2-server-module] zfr authentication adapter did not verify validity of tokens]]></title>
        <id>https://github.com/advisories/GHSA-rcm4-jv5g-wccm</id>
        <link href="https://github.com/advisories/GHSA-rcm4-jv5g-wccm"/>
        <updated>2024-06-07T22:30:03.000Z</updated>
        <content type="html"><![CDATA[<p>Previous to @2ca5bb1c2f11537be8f94ca6867d8d69789e744a (release <a href="https://github.com/zf-fr/zfr-oauth2-server-module/tree/0.1.2">0.1.2</a>), tokens weren't checked for validity/expiration.</p>
<p>This potentially caused a security issue if expired tokens were not deleted after the expiration time was past, allowing anyone to still use invalidated authentication credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zf-fr/zfr-oauth2-server-module/issues/6">https://github.com/zf-fr/zfr-oauth2-server-module/issues/6</a></li>
<li><a href="https://github.com/zf-fr/zfr-oauth2-server-module/commit/2ca5bb1c2f11537be8f94ca6867d8d69789e744a">https://github.com/zf-fr/zfr-oauth2-server-module/commit/2ca5bb1c2f11537be8f94ca6867d8d69789e744a</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zfr/zfr-oauth2-server-module/2014-04-26.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zfr/zfr-oauth2-server-module/2014-04-26.yaml</a></li>
<li><a href="https://github.com/zf-fr/zfr-oauth2-server-module/tree/0.1.2">https://github.com/zf-fr/zfr-oauth2-server-module/tree/0.1.2</a></li>
<li><a href="https://github.com/advisories/GHSA-rcm4-jv5g-wccm">https://github.com/advisories/GHSA-rcm4-jv5g-wccm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rcm4-jv5g-wccm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:30:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendopenid] ZendOpenID potential security issue in login mechanism]]></title>
        <id>https://github.com/advisories/GHSA-3x57-m5p4-rgh4</id>
        <link href="https://github.com/advisories/GHSA-3x57-m5p4-rgh4"/>
        <updated>2024-06-07T22:28:46.000Z</updated>
        <content type="html"><![CDATA[<p>Using the Consumer component of ZendOpenId (or Zend_OpenId in ZF1), it is possible to login using an arbitrary OpenID account (without knowing any secret information) by using a malicious OpenID Provider. That means OpenID it is possible to login using arbitrary OpenID Identity (MyOpenID, Google, etc), which are not under the control of our own OpenID Provider. Thus, we are able to impersonate any OpenID Identity against the framework.</p>
<p>Moreover, the Consumer accepts OpenID tokens with arbitrary signed elements. The framework does not check if, for example, both openid.claimed_id and openid.endpoint_url are signed. It is just sufficient to sign one parameter. According to <a href="https://openid.net/specs/openid-authentication-2_0.html#positive_assertions">https://openid.net/specs/openid-authentication-2_0.html#positive_assertions</a>, at least op_endpoint, return_to, response_nonce, assoc_handle, and, if present in the response, claimed_id and identity, must be signed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/ZendOpenId/commit/16648e1b2acf760d0c67a8c1dd913fed0c0f61f7">https://github.com/zendframework/ZendOpenId/commit/16648e1b2acf760d0c67a8c1dd913fed0c0f61f7</a></li>
<li><a href="https://github.com/zendframework/ZendOpenId/commit/709789c1ca290771730133db4d8b8de2972b36ce">https://github.com/zendframework/ZendOpenId/commit/709789c1ca290771730133db4d8b8de2972b36ce</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-02">https://framework.zend.com/security/advisory/ZF2014-02</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendopenid/ZF2014-02.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendopenid/ZF2014-02.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-3x57-m5p4-rgh4">https://github.com/advisories/GHSA-3x57-m5p4-rgh4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3x57-m5p4-rgh4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:28:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zendframework1 Potential SQL injection in ORDER and GROUP functions]]></title>
        <id>https://github.com/advisories/GHSA-6fqw-j3vm-7f66</id>
        <link href="https://github.com/advisories/GHSA-6fqw-j3vm-7f66"/>
        <updated>2024-06-07T22:27:36.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation of ORDER BY and GROUP BY in Zend_Db_Select remained prone to SQL injection when a combination of SQL expressions and comments were used. This security patch provides a comprehensive solution that identifies and removes comments prior to checking validity of the statement to ensure no SQLi vectors occur.</p>
<p>The implementation of ORDER BY and GROUP BY in Zend_Db_Select of ZF1 is vulnerable by the following SQL injection:</p>
<pre><code>$db = Zend_Db::factory(/* options here */);
$select = new Zend_Db_Select($db);
$select-&gt;from('p');
$select-&gt;order("MD5(\"a(\");DELETE FROM p2; #)"); // same with group()
</code></pre>
<p>The above $select will render the following SQL statement:</p>
<pre><code>SELECT `p`.* FROM `p` ORDER BY MD5("a(");DELETE FROM p2; #) ASC
</code></pre>
<p>instead of the correct one:</p>
<pre><code>SELECT "p".* FROM "p" ORDER BY "MD5(""a("");DELETE FROM p2; #)" ASC
</code></pre>
<p>This security fix can be considered an improvement of the previous ZF2016-02 and ZF2014-04 advisories.</p>
<p>As a final consideration, we recommend developers either never use user input for these operations, or filter user input thoroughly prior to invoking Zend_Db. You can use the Zend_Db_Select::quoteInto() method to filter the input data, as shown in this example:</p>
<pre><code>$db    = Zend_Db::factory(...);
$input = "MD5(\"a(\");DELETE FROM p2; #)"; // user input can be an attack
$order = $db-&gt;quoteInto("SQL statement for ORDER", $input);

$select = new Zend_Db_Select($db);
$select-&gt;from('p');
$select-&gt;order($order); // same with group()
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2016-03">https://framework.zend.com/security/advisory/ZF2016-03</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2016-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2016-03.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-6fqw-j3vm-7f66">https://github.com/advisories/GHSA-6fqw-j3vm-7f66</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6fqw-j3vm-7f66</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T22:27:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zendframework Potential Information Disclosure and Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-848f-mph5-9pm9</id>
        <link href="https://github.com/advisories/GHSA-848f-mph5-9pm9"/>
        <updated>2024-06-07T22:27:03.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework, Zend_Captcha_Word (v1) and Zend\Captcha\Word (v2) generate a "word" for a CAPTCHA challenge by selecting a sequence of random letters from a character set. Prior to this advisory, the selection was performed using PHP's internal array_rand() function. This function does not generate sufficient entropy due to its usage of rand() instead of more cryptographically secure methods such as openssl_pseudo_random_bytes(). This could potentially lead to information disclosure should an attacker be able to brute force the random number generation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-09">https://framework.zend.com/security/advisory/ZF2015-09</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2015-09.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2015-09.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-848f-mph5-9pm9">https://github.com/advisories/GHSA-848f-mph5-9pm9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-848f-mph5-9pm9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:27:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] ZendFramework1 Potential Insufficient Entropy Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8xhv-gqm4-3w99</id>
        <link href="https://github.com/advisories/GHSA-8xhv-gqm4-3w99"/>
        <updated>2024-06-07T22:26:26.000Z</updated>
        <content type="html"><![CDATA[<p>We discovered several methods used to generate random numbers in ZF1 that potentially used insufficient entropy. These random number generators are used in the following method calls:</p>
<pre><code>Zend_Ldap_Attribute::createPassword
Zend_Form_Element_Hash::_generateHash
Zend_Gdata_HttpClient::filterHttpRequest
Zend_Filter_Encrypt_Mcrypt::_srand
Zend_OpenId::randomBytes
</code></pre>
<p>In each case, the methods were using rand() or mt_rand(), neither of which can generate cryptographically secure values. This could potentially lead to information disclosure should an attacker be able to brute force the random number generation.</p>
<p>Moreover, we discovered a potential security issue in the usage of the <a href="http://php.net/manual/en/function.openssl-random-pseudo-bytes.php">openssl_random_pseudo_bytes()</a> function in Zend_Crypt_Math::randBytes, reported in PHP BUG <a href="https://bugs.php.net/bug.php?id=70014">#70014</a>, and the security implications reported in a discussion <a href="https://github.com/paragonie/random_compat/issues/96">on the random_compat library.</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2016-01">https://framework.zend.com/security/advisory/ZF2016-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2016-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2016-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-8xhv-gqm4-3w99">https://github.com/advisories/GHSA-8xhv-gqm4-3w99</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8xhv-gqm4-3w99</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:26:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zendframework1 potential SQL injection vector using null byte for PDO (MsSql, SQLite)]]></title>
        <id>https://github.com/advisories/GHSA-v42g-7q2x-cw32</id>
        <link href="https://github.com/advisories/GHSA-v42g-7q2x-cw32"/>
        <updated>2024-06-07T22:25:46.000Z</updated>
        <content type="html"><![CDATA[<p>The PDO adapters of Zend Framework 1 do not filter null bytes values in SQL statements. A PDO adapter can treat null bytes in a query as a string terminator, allowing an attacker to add arbitrary SQL following a null byte, and thus create a SQL injection.</p>
<p>We tested and verified the null byte injection using pdo_dblib (FreeTDS) on a Linux environment to access a remote Microsoft SQL Server, and also tested against and noted the vector against pdo_sqlite.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-08">https://framework.zend.com/security/advisory/ZF2015-08</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2015-08.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2015-08.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-v42g-7q2x-cw32">https://github.com/advisories/GHSA-v42g-7q2x-cw32</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v42g-7q2x-cw32</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T22:25:43.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-captcha] Zend-Captcha Information Disclosure and Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mg4x-prh7-g4mx</id>
        <link href="https://github.com/advisories/GHSA-mg4x-prh7-g4mx"/>
        <updated>2024-06-07T22:25:12.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework, <code>Zend_Captcha_Word</code> (v1) and <code>Zend\Captcha\Word</code> (v2) generate a "word" for a CAPTCHA challenge by selecting a sequence of random letters from a character set. Prior to this advisory, the selection was performed using PHP's internal <code>array_rand()</code> function. This function does not generate sufficient entropy due to its usage of rand() instead of more cryptographically secure methods such as <code>openssl_pseudo_random_bytes()</code>. This could potentially lead to information disclosure should an attacker be able to brute force the random number generation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zend-captcha/commit/43c276df6e94e498bf530538aea53876a24fc47c">https://github.com/zendframework/zend-captcha/commit/43c276df6e94e498bf530538aea53876a24fc47c</a></li>
<li><a href="https://github.com/zendframework/zend-captcha/commit/5561ef813bb4ad814e835343289dc5077d2eb262">https://github.com/zendframework/zend-captcha/commit/5561ef813bb4ad814e835343289dc5077d2eb262</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-09">https://framework.zend.com/security/advisory/ZF2015-09</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-captcha/ZF2015-09.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-captcha/ZF2015-09.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-mg4x-prh7-g4mx">https://github.com/advisories/GHSA-mg4x-prh7-g4mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg4x-prh7-g4mx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:25:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-captcha] Zend-Captcha Information Disclosure and Insufficient Entropy vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-mg4x-prh7-g4mx</id>
        <link href="https://github.com/advisories/GHSA-mg4x-prh7-g4mx"/>
        <updated>2024-06-07T22:25:12.000Z</updated>
        <content type="html"><![CDATA[<p>In Zend Framework, <code>Zend_Captcha_Word</code> (v1) and <code>Zend\Captcha\Word</code> (v2) generate a "word" for a CAPTCHA challenge by selecting a sequence of random letters from a character set. Prior to this advisory, the selection was performed using PHP's internal <code>array_rand()</code> function. This function does not generate sufficient entropy due to its usage of rand() instead of more cryptographically secure methods such as <code>openssl_pseudo_random_bytes()</code>. This could potentially lead to information disclosure should an attacker be able to brute force the random number generation.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zend-captcha/commit/43c276df6e94e498bf530538aea53876a24fc47c">https://github.com/zendframework/zend-captcha/commit/43c276df6e94e498bf530538aea53876a24fc47c</a></li>
<li><a href="https://github.com/zendframework/zend-captcha/commit/5561ef813bb4ad814e835343289dc5077d2eb262">https://github.com/zendframework/zend-captcha/commit/5561ef813bb4ad814e835343289dc5077d2eb262</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2015-09">https://framework.zend.com/security/advisory/ZF2015-09</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-captcha/ZF2015-09.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-captcha/ZF2015-09.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-mg4x-prh7-g4mx">https://github.com/advisories/GHSA-mg4x-prh7-g4mx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg4x-prh7-g4mx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:25:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] ZendFramework1 Potential SQL injection in the ORDER implementation of Zend_Db_Select]]></title>
        <id>https://github.com/advisories/GHSA-2x36-qhx3-7m5f</id>
        <link href="https://github.com/advisories/GHSA-2x36-qhx3-7m5f"/>
        <updated>2024-06-07T22:24:55.000Z</updated>
        <content type="html"><![CDATA[<p>The implementation of the ORDER BY SQL statement in Zend_Db_Select of Zend Framework 1 contains a potential SQL injection when the query string passed contains parentheses.</p>
<p>For instance, the following code is affected by this issue:</p>
<pre><code>$db     = Zend_Db::factory( /* options here */ );
$select = $db-&gt;select()
    -&gt;from(array('p' =&gt; 'products'))
    -&gt;order('MD5(1); drop table products');
echo $select;
</code></pre>
<p>This code produce the string:</p>
<pre><code>SELECT "p".* FROM "products" AS "p" ORDER BY MD5(1);drop table products ASC
</code></pre>
<p>instead of the correct one:</p>
<pre><code>SELECT "p".* FROM "products" AS "p" ORDER BY "MD5(1);drop table products" ASC
</code></pre>
<p>The SQL injection occurs because we create a new Zend_Db_Expr() object, in presence of parentheses, passing directly the value without any filter on the string.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-04">https://framework.zend.com/security/advisory/ZF2014-04</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2014-04.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2014-04.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2x36-qhx3-7m5f">https://github.com/advisories/GHSA-2x36-qhx3-7m5f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2x36-qhx3-7m5f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T22:24:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zendframework potential security issue in login mechanism]]></title>
        <id>https://github.com/advisories/GHSA-9v78-h226-2rmq</id>
        <link href="https://github.com/advisories/GHSA-9v78-h226-2rmq"/>
        <updated>2024-06-07T22:24:23.000Z</updated>
        <content type="html"><![CDATA[<p>Using the Consumer component of ZendOpenId (or Zend_OpenId in ZF1), it is possible to login using an arbitrary OpenID account (without knowing any secret information) by using a malicious OpenID Provider. That means OpenID it is possible to login using arbitrary OpenID Identity (MyOpenID, Google, etc), which are not under the control of our own OpenID Provider. Thus, we are able to impersonate any OpenID Identity against the framework.</p>
<p>Moreover, the Consumer accepts OpenID tokens with arbitrary signed elements. The framework does not check if, for example, both openid.claimed_id and openid.endpoint_url are signed. It is just sufficient to sign one parameter. According to <a href="https://openid.net/specs/openid-authentication-2_0.html#positive_assertions">https://openid.net/specs/openid-authentication-2_0.html#positive_assertions</a>, at least op_endpoint, return_to, response_nonce, assoc_handle, and, if present in the response, claimed_id and identity, must be signed.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://framework.zend.com/security/advisory/ZF2014-02">https://framework.zend.com/security/advisory/ZF2014-02</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2014-02.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2014-02.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-9v78-h226-2rmq">https://github.com/advisories/GHSA-9v78-h226-2rmq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9v78-h226-2rmq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:24:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[willdurand/js-translation-bundle] willdurand/js-translation-bundle potential path traversal attack and remote code injection]]></title>
        <id>https://github.com/advisories/GHSA-x86x-qhf8-f37w</id>
        <link href="https://github.com/advisories/GHSA-x86x-qhf8-f37w"/>
        <updated>2024-06-07T22:20:29.000Z</updated>
        <content type="html"><![CDATA[<p>A path traversal and a javascript code injection vulnerabilities were identified in willdurand/js-translation-bundle versions prior to 2.1.1. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/willdurand/BazingaJsTranslationBundle/commit/7accee93569c3f3d2379f035a41ece66522801fc">https://github.com/willdurand/BazingaJsTranslationBundle/commit/7accee93569c3f3d2379f035a41ece66522801fc</a></li>
<li><a href="https://github.com/willdurand/BazingaJsTranslationBundle/commit/df6c0fd603c0192ebc5584991a52a1092c5f60bd">https://github.com/willdurand/BazingaJsTranslationBundle/commit/df6c0fd603c0192ebc5584991a52a1092c5f60bd</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml</a></li>
<li><a href="https://github.com/willdurand/BazingaJsTranslationBundle/releases/tag/v2.1.1">https://github.com/willdurand/BazingaJsTranslationBundle/releases/tag/v2.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-x86x-qhf8-f37w">https://github.com/advisories/GHSA-x86x-qhf8-f37w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x86x-qhf8-f37w</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-07T22:20:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[vrana/adminer] Adminer file disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-97h7-mf38-g9mf</id>
        <link href="https://github.com/advisories/GHSA-97h7-mf38-g9mf"/>
        <updated>2024-06-07T22:19:45.000Z</updated>
        <content type="html"><![CDATA[<p>Adminer script versions up to 4.6.2 contains file disclosure vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/vrana/adminer/commit/c564a8ef5095d26b1d7f2ebab4dc3c3516bc0c7b">https://github.com/vrana/adminer/commit/c564a8ef5095d26b1d7f2ebab4dc3c3516bc0c7b</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/vrana/adminer/2019-01-20.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/vrana/adminer/2019-01-20.yaml</a></li>
<li><a href="https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability">https://sansec.io/research/adminer-4.6.2-file-disclosure-vulnerability</a></li>
<li><a href="https://github.com/advisories/GHSA-97h7-mf38-g9mf">https://github.com/advisories/GHSA-97h7-mf38-g9mf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-97h7-mf38-g9mf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-07T22:19:44.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ua-parser/uap-php] ua-parser/uap-php ReDoS vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-78hm-5hjw-58mh</id>
        <link href="https://github.com/advisories/GHSA-78hm-5hjw-58mh"/>
        <updated>2024-06-07T22:15:44.000Z</updated>
        <content type="html"><![CDATA[<p>A regex expression in ua-parser/uap-php could lead to a ReDoS vulnerability in versions prior to 3.8.0.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/ua-parser/uap-core/pull/363">https://github.com/ua-parser/uap-core/pull/363</a></li>
<li><a href="https://github.com/ua-parser/uap-core/commit/156f7e12b215bddbaf3df4514c399d683e6cdadc">https://github.com/ua-parser/uap-core/commit/156f7e12b215bddbaf3df4514c399d683e6cdadc</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/ua-parser/uap-php/2018-12-14.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/ua-parser/uap-php/2018-12-14.yaml</a></li>
<li><a href="https://github.com/ua-parser/uap-php/commit/947f80b39130c83a3d1c75900ac1b58828ed8aef">https://github.com/ua-parser/uap-php/commit/947f80b39130c83a3d1c75900ac1b58828ed8aef</a></li>
<li><a href="https://github.com/advisories/GHSA-78hm-5hjw-58mh">https://github.com/advisories/GHSA-78hm-5hjw-58mh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-78hm-5hjw-58mh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:14:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wikimedia/parsoid] Wikimedia Parsoid vulnerable to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-5pqx-77vf-85rw</id>
        <link href="https://github.com/advisories/GHSA-5pqx-77vf-85rw"/>
        <updated>2024-06-07T22:12:20.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Wikimedia Parsoid before 0.11.1 and 0.12.x before 0.12.2. An attacker can send crafted wikitext that Utils/WTUtils.php will transform by using a  tag, bypassing sanitization steps, and potentially allowing for XSS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-30458">https://nvd.nist.gov/vuln/detail/CVE-2021-30458</a></li>
<li><a href="https://phabricator.wikimedia.org/T279451">https://phabricator.wikimedia.org/T279451</a></li>
<li><a href="https://security.gentoo.org/glsa/202107-40">https://security.gentoo.org/glsa/202107-40</a></li>
<li><a href="https://www.mediawiki.org/wiki/Parsoid">https://www.mediawiki.org/wiki/Parsoid</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/wikimedia/parsoid/CVE-2021-30458.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/wikimedia/parsoid/CVE-2021-30458.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5pqx-77vf-85rw">https://github.com/advisories/GHSA-5pqx-77vf-85rw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pqx-77vf-85rw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:47:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wikimedia/parsoid] Wikimedia Parsoid vulnerable to Cross-site Scripting (XSS)]]></title>
        <id>https://github.com/advisories/GHSA-5pqx-77vf-85rw</id>
        <link href="https://github.com/advisories/GHSA-5pqx-77vf-85rw"/>
        <updated>2024-06-07T22:12:20.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in Wikimedia Parsoid before 0.11.1 and 0.12.x before 0.12.2. An attacker can send crafted wikitext that Utils/WTUtils.php will transform by using a  tag, bypassing sanitization steps, and potentially allowing for XSS.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-30458">https://nvd.nist.gov/vuln/detail/CVE-2021-30458</a></li>
<li><a href="https://phabricator.wikimedia.org/T279451">https://phabricator.wikimedia.org/T279451</a></li>
<li><a href="https://security.gentoo.org/glsa/202107-40">https://security.gentoo.org/glsa/202107-40</a></li>
<li><a href="https://www.mediawiki.org/wiki/Parsoid">https://www.mediawiki.org/wiki/Parsoid</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/wikimedia/parsoid/CVE-2021-30458.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/wikimedia/parsoid/CVE-2021-30458.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-5pqx-77vf-85rw">https://github.com/advisories/GHSA-5pqx-77vf-85rw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5pqx-77vf-85rw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-24T17:47:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-developer-tools] Zend-developer-tools information disclosure vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-qg7m-mwxm-j3h7</id>
        <link href="https://github.com/advisories/GHSA-qg7m-mwxm-j3h7"/>
        <updated>2024-06-07T22:10:20.000Z</updated>
        <content type="html"><![CDATA[<p>The package zendframework/zend-developer-tools provides a web-based toolbar for introspecting an application. When updating the package to support PHP 7.3, a change was made that could potentially prevent toolbar entries that are enabled by default from being disabled.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zend-developer-tools/commit/ce27f4624cf947bea2d746244b1ed6de10e22f1f">https://github.com/zendframework/zend-developer-tools/commit/ce27f4624cf947bea2d746244b1ed6de10e22f1f</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2019-01">https://framework.zend.com/security/advisory/ZF2019-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-developer-tools/ZF2019-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-developer-tools/ZF2019-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-qg7m-mwxm-j3h7">https://github.com/advisories/GHSA-qg7m-mwxm-j3h7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg7m-mwxm-j3h7</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:10:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zend_Filter_StripTags vulnerable to Cross-site Scripting when comments allowed]]></title>
        <id>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</id>
        <link href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6"/>
        <updated>2024-06-07T22:09:18.000Z</updated>
        <content type="html"><![CDATA[<p>Zend_Filter_StripTags contained an optional setting to allow whitelisting HTML comments in filtered text. Microsoft Internet Explorer and several other browsers allow developers to create conditional functionality via HTML comments, including execution of script events and rendering of additional commented markup. By allowing whitelisting of HTML comments, a malicious user could potentially include XSS exploits within HTML comments that would then be rendered in the final output.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml</a></li>
<li><a href="https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03">https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6">https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:09:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zend_Filter_StripTags vulnerable to Cross-site Scripting when comments allowed]]></title>
        <id>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</id>
        <link href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6"/>
        <updated>2024-06-07T22:09:18.000Z</updated>
        <content type="html"><![CDATA[<p>Zend_Filter_StripTags contained an optional setting to allow whitelisting HTML comments in filtered text. Microsoft Internet Explorer and several other browsers allow developers to create conditional functionality via HTML comments, including execution of script events and rendering of additional commented markup. By allowing whitelisting of HTML comments, a malicious user could potentially include XSS exploits within HTML comments that would then be rendered in the final output.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml</a></li>
<li><a href="https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03">https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6">https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:09:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zend_Filter_StripTags vulnerable to Cross-site Scripting when comments allowed]]></title>
        <id>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</id>
        <link href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6"/>
        <updated>2024-06-07T22:09:18.000Z</updated>
        <content type="html"><![CDATA[<p>Zend_Filter_StripTags contained an optional setting to allow whitelisting HTML comments in filtered text. Microsoft Internet Explorer and several other browsers allow developers to create conditional functionality via HTML comments, including execution of script events and rendering of additional commented markup. By allowing whitelisting of HTML comments, a malicious user could potentially include XSS exploits within HTML comments that would then be rendered in the final output.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/ZF2010-03.yaml</a></li>
<li><a href="https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03">https://web.archive.org/web/20210411020019/https://framework.zend.com/security/advisory/ZF2010-03</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf6-mq7w-3hp6">https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf6-mq7w-3hp6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:09:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zend-diactoros] Zend-Diactoros URL Rewrite vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fq4p-86hh-42v9</id>
        <link href="https://github.com/advisories/GHSA-fq4p-86hh-42v9"/>
        <updated>2024-06-07T22:07:30.000Z</updated>
        <content type="html"><![CDATA[<p>zend-diactoros (and, by extension, Expressive), zend-http (and, by extension, Zend Framework MVC projects), and zend-feed (specifically, its PubSubHubbub sub-component) each contain a potential URL rewrite exploit. In each case, marshaling a request URI includes logic that introspects HTTP request headers that are specific to a given server-side URL rewrite mechanism.</p>
<p>When these headers are present on systems not running the specific URL rewriting mechanism, the logic would still trigger, allowing a malicious client or proxy to emulate the headers to request arbitrary content.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/zendframework/zend-diactoros/commit/3a4f44f7f89f7007f3c3e4ca69ac23874f8a4093">https://github.com/zendframework/zend-diactoros/commit/3a4f44f7f89f7007f3c3e4ca69ac23874f8a4093</a></li>
<li><a href="https://github.com/zendframework/zend-diactoros/commit/736ffa7c2bfa4a60e8a10acb316fa2ac456c5fba">https://github.com/zendframework/zend-diactoros/commit/736ffa7c2bfa4a60e8a10acb316fa2ac456c5fba</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2018-01">https://framework.zend.com/security/advisory/ZF2018-01</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-diactoros/ZF2018-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-diactoros/ZF2018-01.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fq4p-86hh-42v9">https://github.com/advisories/GHSA-fq4p-86hh-42v9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fq4p-86hh-42v9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-07T22:07:30.000Z</published>
    </entry>
</feed>