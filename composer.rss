<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-07-24T00:04:09.098Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[processwire/processwire] ProcessWire Cross Site Request Forgery vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-r9vw-cjf9-xh4x</id>
        <link href="https://github.com/advisories/GHSA-r9vw-cjf9-xh4x"/>
        <updated>2024-07-19T22:39:58.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Request Forgery vulnerability in ProcessWire v.3.0.229 allows a remote attacker to execute arbitrary code via a crafted HTML file to the comments functionality.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-41597">https://nvd.nist.gov/vuln/detail/CVE-2024-41597</a></li>
<li><a href="https://gist.github.com/DefensiumDevelopers/608be4d10b016dce0566925368a8b08c#file-cve-2024-41597-md">https://gist.github.com/DefensiumDevelopers/608be4d10b016dce0566925368a8b08c#file-cve-2024-41597-md</a></li>
<li><a href="https://github.com/advisories/GHSA-r9vw-cjf9-xh4x">https://github.com/advisories/GHSA-r9vw-cjf9-xh4x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r9vw-cjf9-xh4x</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-19T21:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[automad/automad] Automad arbitrary file upload vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-47mc-qmh2-mqj4</id>
        <link href="https://github.com/advisories/GHSA-47mc-qmh2-mqj4"/>
        <updated>2024-07-19T22:39:52.000Z</updated>
        <content type="html"><![CDATA[<p>An arbitrary file upload vulnerability in the image upload function of Automad v2.0.0 allows attackers to execute arbitrary code via a crafted file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40400">https://nvd.nist.gov/vuln/detail/CVE-2024-40400</a></li>
<li><a href="https://github.com/marcantondahmen/automad/issues/106">https://github.com/marcantondahmen/automad/issues/106</a></li>
<li><a href="https://github.com/marcantondahmen/automad/commit/112f070ccf423931c9bb2b36f9a26c345e1ef56e">https://github.com/marcantondahmen/automad/commit/112f070ccf423931c9bb2b36f9a26c345e1ef56e</a></li>
<li><a href="https://github.com/advisories/GHSA-47mc-qmh2-mqj4">https://github.com/advisories/GHSA-47mc-qmh2-mqj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-47mc-qmh2-mqj4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-19T21:31:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[craftcms/cms] Craft CMS SQL injection vulnerability via the GraphQL API endpoint]]></title>
        <id>https://github.com/advisories/GHSA-hq4f-mv3q-8wcv</id>
        <link href="https://github.com/advisories/GHSA-hq4f-mv3q-8wcv"/>
        <updated>2024-07-19T21:44:48.000Z</updated>
        <content type="html"><![CDATA[<p>Craft CMS up to v3.7.31 was discovered to contain a SQL injection vulnerability via the GraphQL API endpoint.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-37843">https://nvd.nist.gov/vuln/detail/CVE-2024-37843</a></li>
<li><a href="https://blog.smithsecurity.biz/craft-cms-unauthenticated-sqli-via-graphql">https://blog.smithsecurity.biz/craft-cms-unauthenticated-sqli-via-graphql</a></li>
<li><a href="https://github.com/advisories/GHSA-hq4f-mv3q-8wcv">https://github.com/advisories/GHSA-hq4f-mv3q-8wcv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hq4f-mv3q-8wcv</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-06-25T21:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[opencart/opencart] openCart Server-Side Template Injection (SSTI) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-xrh7-2gfq-4rcq</id>
        <link href="https://github.com/advisories/GHSA-xrh7-2gfq-4rcq"/>
        <updated>2024-07-17T23:36:51.000Z</updated>
        <content type="html"><![CDATA[<p>A Server-Side Template Injection (SSTI) vulnerability in the edit theme function of openCart project v4.0.2.3 allows attackers to execute arbitrary code via injecting a crafted payload.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40420">https://nvd.nist.gov/vuln/detail/CVE-2024-40420</a></li>
<li><a href="https://github.com/A3h1nt/CVEs/blob/main/OpenCart/Readme.md">https://github.com/A3h1nt/CVEs/blob/main/OpenCart/Readme.md</a></li>
<li><a href="https://github.com/advisories/GHSA-xrh7-2gfq-4rcq">https://github.com/advisories/GHSA-xrh7-2gfq-4rcq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xrh7-2gfq-4rcq</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-17T21:31:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/framework] Silverstripe uses TinyMCE which allows svg files linked in object tags]]></title>
        <id>https://github.com/advisories/GHSA-52cw-pvq9-9m5v</id>
        <link href="https://github.com/advisories/GHSA-52cw-pvq9-9m5v"/>
        <updated>2024-07-22T16:54:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>TinyMCE v6 has a configuration value <code>convert_unsafe_embeds</code> set to <code>false</code> which allows svg files containing javascript to be used in <code>&lt;object&gt;</code> or <code>&lt;embed&gt;</code> tags, which can be used as a vector for XSS attacks.</p>
<p>Note that <code>&lt;embed&gt;</code> tags are not allowed by default.</p>
<p>After patching the default value of <code>convert_unsafe_embeds</code> will be set to <code>true</code>. This means that <code>&lt;object&gt;</code> tags will be converted to iframes instead the next time the page is saved, which may break any pages that rely upon previously saved <code>&lt;object&gt;</code> tags. Developers can override this configuration if desired to revert to the original behaviour.</p>
<p>We reviewed the potential impact of this vulnerability within the context of Silverstripe CMS. We concluded this is a medium impact vulnerability given how TinyMCE is used by Silverstripe CMS.</p>
<h3 id="references">References:</h3>
<ul>
<li><a href="https://www.silverstripe.org/download/security-releases/ss-2024-001">https://www.silverstripe.org/download/security-releases/ss-2024-001</a></li>
<li><a href="https://github.com/advisories/GHSA-5359-pvf2-pw78">https://github.com/advisories/GHSA-5359-pvf2-pw78</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-framework/security/advisories/GHSA-52cw-pvq9-9m5v">https://github.com/silverstripe/silverstripe-framework/security/advisories/GHSA-52cw-pvq9-9m5v</a></li>
<li><a href="https://github.com/advisories/GHSA-5359-pvf2-pw78">https://github.com/advisories/GHSA-5359-pvf2-pw78</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2024-001.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/SS-2024-001.yaml</a></li>
<li><a href="https://www.silverstripe.org/download/security-releases/ss-2024-001">https://www.silverstripe.org/download/security-releases/ss-2024-001</a></li>
<li><a href="https://github.com/advisories/GHSA-52cw-pvq9-9m5v">https://github.com/advisories/GHSA-52cw-pvq9-9m5v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-52cw-pvq9-9m5v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T16:00:48.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius has a security vulnerability via adjustments API endpoint]]></title>
        <id>https://github.com/advisories/GHSA-55rf-8q29-4g43</id>
        <link href="https://github.com/advisories/GHSA-55rf-8q29-4g43"/>
        <updated>2024-07-17T19:13:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A security vulnerability was discovered in the <code>/api/v2/shop/adjustments/{id}</code> endpoint, which retrieves order adjustments based on incremental integer IDs. The vulnerability allows an attacker to enumerate valid adjustment IDs and retrieve order tokens. Using these tokens, an attacker can access guest customer order details - sensitive guest customer information. </p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.19, 1.13.4 and above. The <code>/api/v2/shop/adjustments/{id}</code> will always return <code>404</code> status.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Using YAML configuration:</p>
<p>Create <code>config/api_platform/Adjustment.yaml</code> file:</p>
<pre><code class="language-yaml"># config/api_platform/Adjustment.yaml

'%sylius.model.adjustment.class%':
    itemOperations:
        shop_get:
            controller: ApiPlatform\Core\Action\NotFoundAction
            read: false
            output: false
</code></pre>
<p>Or using XML configuration:</p>
<p>Copy the original configuration from vendor:</p>
<pre><code class="language-bash">cp vendor/sylius/sylius/src/Sylius/Bundle/ApiBundle/Resources/config/api_resources/Adjustment.xml config/api_platform
</code></pre>
<p>And change the <code>shop_get</code> operation in copied <code>config/api_platform/Adjustment.xml</code> file:</p>
<pre><code class="language-xml">&lt;!-- config/api_platform/Adjustment.xml --&gt;

...
&lt;itemOperation name="shop_get"&gt;
    &lt;attribute name="method"&gt;GET&lt;/attribute&gt;
    &lt;attribute name="path"&gt;/shop/adjustments/{id}&lt;/attribute&gt;
    &lt;attribute name="controller"&gt;ApiPlatform\Core\Action\NotFoundAction&lt;/attribute&gt;
    &lt;attribute name="read"&gt;false&lt;/attribute&gt;
    &lt;attribute name="output"&gt;false&lt;/attribute&gt;
&lt;/itemOperation&gt;
...
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-55rf-8q29-4g43">https://github.com/Sylius/Sylius/security/advisories/GHSA-55rf-8q29-4g43</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/d833b2871caa3b8d1f0a8207378bb778f0b90464">https://github.com/Sylius/Sylius/commit/d833b2871caa3b8d1f0a8207378bb778f0b90464</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40633">https://nvd.nist.gov/vuln/detail/CVE-2024-40633</a></li>
<li><a href="https://github.com/advisories/GHSA-55rf-8q29-4g43">https://github.com/advisories/GHSA-55rf-8q29-4g43</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55rf-8q29-4g43</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-17T14:32:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sylius/sylius] Sylius has a security vulnerability via adjustments API endpoint]]></title>
        <id>https://github.com/advisories/GHSA-55rf-8q29-4g43</id>
        <link href="https://github.com/advisories/GHSA-55rf-8q29-4g43"/>
        <updated>2024-07-17T19:13:35.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A security vulnerability was discovered in the <code>/api/v2/shop/adjustments/{id}</code> endpoint, which retrieves order adjustments based on incremental integer IDs. The vulnerability allows an attacker to enumerate valid adjustment IDs and retrieve order tokens. Using these tokens, an attacker can access guest customer order details - sensitive guest customer information. </p>
<h3 id="patches">Patches</h3>
<p>The issue is fixed in versions: 1.12.19, 1.13.4 and above. The <code>/api/v2/shop/adjustments/{id}</code> will always return <code>404</code> status.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Using YAML configuration:</p>
<p>Create <code>config/api_platform/Adjustment.yaml</code> file:</p>
<pre><code class="language-yaml"># config/api_platform/Adjustment.yaml

'%sylius.model.adjustment.class%':
    itemOperations:
        shop_get:
            controller: ApiPlatform\Core\Action\NotFoundAction
            read: false
            output: false
</code></pre>
<p>Or using XML configuration:</p>
<p>Copy the original configuration from vendor:</p>
<pre><code class="language-bash">cp vendor/sylius/sylius/src/Sylius/Bundle/ApiBundle/Resources/config/api_resources/Adjustment.xml config/api_platform
</code></pre>
<p>And change the <code>shop_get</code> operation in copied <code>config/api_platform/Adjustment.xml</code> file:</p>
<pre><code class="language-xml">&lt;!-- config/api_platform/Adjustment.xml --&gt;

...
&lt;itemOperation name="shop_get"&gt;
    &lt;attribute name="method"&gt;GET&lt;/attribute&gt;
    &lt;attribute name="path"&gt;/shop/adjustments/{id}&lt;/attribute&gt;
    &lt;attribute name="controller"&gt;ApiPlatform\Core\Action\NotFoundAction&lt;/attribute&gt;
    &lt;attribute name="read"&gt;false&lt;/attribute&gt;
    &lt;attribute name="output"&gt;false&lt;/attribute&gt;
&lt;/itemOperation&gt;
...
</code></pre>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/Sylius/Sylius/issues">Sylius issues</a></li>
<li>Email us at <a href="mailto:security@sylius.com">security@sylius.com</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/Sylius/Sylius/security/advisories/GHSA-55rf-8q29-4g43">https://github.com/Sylius/Sylius/security/advisories/GHSA-55rf-8q29-4g43</a></li>
<li><a href="https://github.com/Sylius/Sylius/commit/d833b2871caa3b8d1f0a8207378bb778f0b90464">https://github.com/Sylius/Sylius/commit/d833b2871caa3b8d1f0a8207378bb778f0b90464</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40633">https://nvd.nist.gov/vuln/detail/CVE-2024-40633</a></li>
<li><a href="https://github.com/advisories/GHSA-55rf-8q29-4g43">https://github.com/advisories/GHSA-55rf-8q29-4g43</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-55rf-8q29-4g43</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-17T14:32:18.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/framework] Silverstripe Framework has a Cross-site Scripting vulnerability with encoded payload]]></title>
        <id>https://github.com/advisories/GHSA-chx7-9x8h-r5mg</id>
        <link href="https://github.com/advisories/GHSA-chx7-9x8h-r5mg"/>
        <updated>2024-07-22T16:54:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A bad actor with access to edit content in the CMS could send a specifically crafted encoded payload to the server, which could be used to inject a JavaScript payload on the front end of the site. The payload would be sanitised on the client-side, but server-side sanitisation doesn't catch it.</p>
<p>The server-side sanitisation logic has been updated to sanitise against this type of attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.silverstripe.org/download/security-releases/cve-2024-32981">https://www.silverstripe.org/download/security-releases/cve-2024-32981</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-framework/security/advisories/GHSA-chx7-9x8h-r5mg">https://github.com/silverstripe/silverstripe-framework/security/advisories/GHSA-chx7-9x8h-r5mg</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-framework/commit/b8d20dc9d531550e06fd7da7a0eafa551922e2e1">https://github.com/silverstripe/silverstripe-framework/commit/b8d20dc9d531550e06fd7da7a0eafa551922e2e1</a></li>
<li><a href="https://www.silverstripe.org/download/security-releases/cve-2024-32981">https://www.silverstripe.org/download/security-releases/cve-2024-32981</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32981">https://nvd.nist.gov/vuln/detail/CVE-2024-32981</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2024-32981.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/framework/CVE-2024-32981.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-chx7-9x8h-r5mg">https://github.com/advisories/GHSA-chx7-9x8h-r5mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-chx7-9x8h-r5mg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T14:27:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[silverstripe/reports] Silverstripe Reports are still accessible even when `canView()` returns false]]></title>
        <id>https://github.com/advisories/GHSA-89q6-98xx-4ffw</id>
        <link href="https://github.com/advisories/GHSA-89q6-98xx-4ffw"/>
        <updated>2024-07-22T16:54:52.000Z</updated>
        <content type="html"><![CDATA[<p>Reports can be accessed by their direct URL by any user who has access to view the reports admin section, even if the <code>canView()</code> method for that report returns <code>false</code>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://www.silverstripe.org/download/security-releases/cve-2024-29885">https://www.silverstripe.org/download/security-releases/cve-2024-29885</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/silverstripe/silverstripe-reports/security/advisories/GHSA-89q6-98xx-4ffw">https://github.com/silverstripe/silverstripe-reports/security/advisories/GHSA-89q6-98xx-4ffw</a></li>
<li><a href="https://github.com/silverstripe/silverstripe-reports/commit/0351106c18ad4246d983b5f4e082c09c382121f4">https://github.com/silverstripe/silverstripe-reports/commit/0351106c18ad4246d983b5f4e082c09c382121f4</a></li>
<li><a href="https://www.silverstripe.org/download/security-releases/cve-2024-29885">https://www.silverstripe.org/download/security-releases/cve-2024-29885</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29885">https://nvd.nist.gov/vuln/detail/CVE-2024-29885</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/reports/CVE-2024-29885.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/silverstripe/reports/CVE-2024-29885.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-89q6-98xx-4ffw">https://github.com/advisories/GHSA-89q6-98xx-4ffw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-89q6-98xx-4ffw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-17T14:26:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[torrentpier/torrentpier] TorrentPier Deserialization of Untrusted Data vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fg86-4c2r-7wxw</id>
        <link href="https://github.com/advisories/GHSA-fg86-4c2r-7wxw"/>
        <updated>2024-07-15T21:38:59.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>In <code>torrentpier/library/includes/functions.php</code>, <code>get_tracks()</code> uses the unsafe native PHP serialization format to deserialize user-controlled cookies:</p>
<p><a href="https://github.com/torrentpier/torrentpier/blob/84f6c9f4a081d9ffff4c233098758280304bf50f/library/includes/functions.php#L41-L60">https://github.com/torrentpier/torrentpier/blob/84f6c9f4a081d9ffff4c233098758280304bf50f/library/includes/functions.php#L41-L60</a></p>
<h3 id="poc">PoC</h3>
<p>One can use <a href="https://github.com/ambionics/phpggc/"><code>phpggc</code></a> and the chain <code>Guzzle/FW1</code> to write PHP code to an arbitrary file, and execute commands on the system. For instance, the cookie <code>bb_t</code> will be deserialized when browsing to <code>viewforum.php</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/torrentpier/torrentpier/security/advisories/GHSA-fg86-4c2r-7wxw">https://github.com/torrentpier/torrentpier/security/advisories/GHSA-fg86-4c2r-7wxw</a></li>
<li><a href="https://github.com/torrentpier/torrentpier/commit/ed37e6e522f345f2b46147c6f53c1ab6dec1db9e">https://github.com/torrentpier/torrentpier/commit/ed37e6e522f345f2b46147c6f53c1ab6dec1db9e</a></li>
<li><a href="https://github.com/torrentpier/torrentpier/blob/84f6c9f4a081d9ffff4c233098758280304bf50f/library/includes/functions.php#L41-L60">https://github.com/torrentpier/torrentpier/blob/84f6c9f4a081d9ffff4c233098758280304bf50f/library/includes/functions.php#L41-L60</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-40624">https://nvd.nist.gov/vuln/detail/CVE-2024-40624</a></li>
<li><a href="https://github.com/advisories/GHSA-fg86-4c2r-7wxw">https://github.com/advisories/GHSA-fg86-4c2r-7wxw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fg86-4c2r-7wxw</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-07-15T17:48:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web-auth/webauthn-framework] The FIDO2/Webauthn Support for PHP library allows enumeration of valid usernames ]]></title>
        <id>https://github.com/advisories/GHSA-875x-g8p7-5w27</id>
        <link href="https://github.com/advisories/GHSA-875x-g8p7-5w27"/>
        <updated>2024-07-15T21:38:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The ProfileBasedRequestOptionsBuilder method returns allowedCredentials without any credentials if no username was found.</p>
<h3 id="details">Details</h3>
<p>When WebAuthn is used as the first or only authentication method, an attacker can enumerate usernames based on the absence of the <code>allowedCredentials</code> property in the assertion options response. This allows enumeration of valid or invalid usernames.</p>
<h4 id="proposal-how-to-resolve-it">Proposal how to resolve it:</h4>
<pre><code>return $this-&gt;publicKeyCredentialRequestOptionsFactory-&gt;create(
            $this-&gt;profile,
            count($allowedCredentials) &lt;= 0 ? self::getRandomCredentials(): $allowedCredentials,
            $optionsRequest-&gt;userVerification,
            $extensions
);

private static function getRandomCredentials(): array
{
        $credentialSources = [];
        for ($i = 0; $i &lt;= rand(0,1); $i++) {
            $credentialSources[] = new PublicKeyCredentialSource(
                random_bytes(32),
                "public-key",
                [],
                "basic",
                new EmptyTrustPath(),
                Uuid::v7(),
                random_bytes(77),
                Uuid::v7()-&gt;__toString(),
                rand(0, 6000),
                null
            );
        }
        return array_map(
            static fn (PublicKeyCredentialSource $credential): PublicKeyCredentialDescriptor =&gt; $credential-&gt;getPublicKeyCredentialDescriptor(),
            $credentialSources
        );
}
</code></pre>
<h3 id="poc">PoC</h3>
<p>curl <a href="https://example.com/assertion/options">https://example.com/assertion/options</a> <br>  -H 'content-type: application/json' <br>  --data-raw '{"username":"NotMeRandomUsername123"}'</p>
<h3 id="impact">Impact</h3>
<p>By knowing which usernames are valid, attackers can focus their efforts on a smaller set of potential targets, increasing the efficiency and likelihood of successful attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27">https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27</a></li>
<li><a href="https://github.com/web-auth/webauthn-framework/commit/a9d1352897fba552e659e1445a771dec2d4ed05a">https://github.com/web-auth/webauthn-framework/commit/a9d1352897fba552e659e1445a771dec2d4ed05a</a></li>
<li><a href="https://github.com/web-auth/webauthn-lib/commit/b6798de27cdedd8681fe4c9b13ace0ff2456d18b">https://github.com/web-auth/webauthn-lib/commit/b6798de27cdedd8681fe4c9b13ace0ff2456d18b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39912">https://nvd.nist.gov/vuln/detail/CVE-2024-39912</a></li>
<li><a href="https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045">https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045</a></li>
<li><a href="https://github.com/advisories/GHSA-875x-g8p7-5w27">https://github.com/advisories/GHSA-875x-g8p7-5w27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-875x-g8p7-5w27</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-15T16:37:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[web-auth/webauthn-lib] The FIDO2/Webauthn Support for PHP library allows enumeration of valid usernames ]]></title>
        <id>https://github.com/advisories/GHSA-875x-g8p7-5w27</id>
        <link href="https://github.com/advisories/GHSA-875x-g8p7-5w27"/>
        <updated>2024-07-15T21:38:22.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The ProfileBasedRequestOptionsBuilder method returns allowedCredentials without any credentials if no username was found.</p>
<h3 id="details">Details</h3>
<p>When WebAuthn is used as the first or only authentication method, an attacker can enumerate usernames based on the absence of the <code>allowedCredentials</code> property in the assertion options response. This allows enumeration of valid or invalid usernames.</p>
<h4 id="proposal-how-to-resolve-it">Proposal how to resolve it:</h4>
<pre><code>return $this-&gt;publicKeyCredentialRequestOptionsFactory-&gt;create(
            $this-&gt;profile,
            count($allowedCredentials) &lt;= 0 ? self::getRandomCredentials(): $allowedCredentials,
            $optionsRequest-&gt;userVerification,
            $extensions
);

private static function getRandomCredentials(): array
{
        $credentialSources = [];
        for ($i = 0; $i &lt;= rand(0,1); $i++) {
            $credentialSources[] = new PublicKeyCredentialSource(
                random_bytes(32),
                "public-key",
                [],
                "basic",
                new EmptyTrustPath(),
                Uuid::v7(),
                random_bytes(77),
                Uuid::v7()-&gt;__toString(),
                rand(0, 6000),
                null
            );
        }
        return array_map(
            static fn (PublicKeyCredentialSource $credential): PublicKeyCredentialDescriptor =&gt; $credential-&gt;getPublicKeyCredentialDescriptor(),
            $credentialSources
        );
}
</code></pre>
<h3 id="poc">PoC</h3>
<p>curl <a href="https://example.com/assertion/options">https://example.com/assertion/options</a> <br>  -H 'content-type: application/json' <br>  --data-raw '{"username":"NotMeRandomUsername123"}'</p>
<h3 id="impact">Impact</h3>
<p>By knowing which usernames are valid, attackers can focus their efforts on a smaller set of potential targets, increasing the efficiency and likelihood of successful attacks.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27">https://github.com/web-auth/webauthn-framework/security/advisories/GHSA-875x-g8p7-5w27</a></li>
<li><a href="https://github.com/web-auth/webauthn-framework/commit/a9d1352897fba552e659e1445a771dec2d4ed05a">https://github.com/web-auth/webauthn-framework/commit/a9d1352897fba552e659e1445a771dec2d4ed05a</a></li>
<li><a href="https://github.com/web-auth/webauthn-lib/commit/b6798de27cdedd8681fe4c9b13ace0ff2456d18b">https://github.com/web-auth/webauthn-lib/commit/b6798de27cdedd8681fe4c9b13ace0ff2456d18b</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39912">https://nvd.nist.gov/vuln/detail/CVE-2024-39912</a></li>
<li><a href="https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045">https://github.com/web-auth/webauthn-framework/commit/64de11f6cddc71e56c76e0cc4573bf94d02be045</a></li>
<li><a href="https://github.com/advisories/GHSA-875x-g8p7-5w27">https://github.com/advisories/GHSA-875x-g8p7-5w27</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-875x-g8p7-5w27</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-15T16:37:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[auth0/wordpress] Login by Auth0 plugin for WordPress vulnerable to Reflected Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-x6p7-44rh-m3rr</id>
        <link href="https://github.com/advisories/GHSA-x6p7-44rh-m3rr"/>
        <updated>2024-07-11T19:52:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The Auth0 WordPress plugin allows site administrators to opt-in to allowing the use of a <code>wle</code> parameter, which can be passed to the WordPress login page by end users. When this parameter is supplied using an expected value (which is randomly generated by the plugin, by default), the end user can fallback to using WordPress' native authentication behavior. (This is generally intended as an emergency fallback for administrators to still be able to access their dashboard in the event something goes wrong.)</p>
<p>In previous versions of the plugin, under specific conditions, this parameter could potentially accept an arbitrary string that would be improperly rendered, potentially allowing for a cross-site scripting (XSS) attack on the login page.</p>
<h3 id="patches">Patches</h3>
<p>Please upgrade to v4.6.1 of the plugin to resolve the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/auth0/wordpress/security/advisories/GHSA-x6p7-44rh-m3rr">https://github.com/auth0/wordpress/security/advisories/GHSA-x6p7-44rh-m3rr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6813">https://nvd.nist.gov/vuln/detail/CVE-2023-6813</a></li>
<li><a href="https://plugins.trac.wordpress.org/changeset?sfp_email=&amp;sfph_mail=&amp;reponame=&amp;old=3114611%40auth0&amp;new=3114611%40auth0&amp;sfp_email=&amp;sfph_mail=">https://plugins.trac.wordpress.org/changeset?sfp_email=&amp;sfph_mail=&amp;reponame=&amp;old=3114611%40auth0&amp;new=3114611%40auth0&amp;sfp_email=&amp;sfph_mail=</a></li>
<li><a href="https://www.wordfence.com/threat-intel/vulnerabilities/id/0c4e0d48-fde1-45dd-8e06-4582cf677579?source=cve">https://www.wordfence.com/threat-intel/vulnerabilities/id/0c4e0d48-fde1-45dd-8e06-4582cf677579?source=cve</a></li>
<li><a href="https://github.com/advisories/GHSA-x6p7-44rh-m3rr">https://github.com/advisories/GHSA-x6p7-44rh-m3rr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x6p7-44rh-m3rr</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-11T19:52:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[auth0/wordpress] Duplicate Advisory: Login by Auth0 plugin for WordPress vulnerable to Reflected Cross-Site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-52jw-f3jq-hhwg</id>
        <link href="https://github.com/advisories/GHSA-52jw-f3jq-hhwg"/>
        <updated>2024-07-11T19:50:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="duplicate-advisory">Duplicate Advisory</h2>
<p>This advisory has been withdrawn because it is a duplicate of GHSA-x6p7-44rh-m3rr. This link has been maintained to preserve external references.</p>
<h2 id="original-description">Original Description</h2>
<p>The Login by Auth0 plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the ‘wle’ parameter in all versions up to, and including, 4.6.0 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6813">https://nvd.nist.gov/vuln/detail/CVE-2023-6813</a></li>
<li><a href="https://plugins.trac.wordpress.org/changeset?sfp_email=&amp;sfph_mail=&amp;reponame=&amp;old=3114611%40auth0&amp;new=3114611%40auth0&amp;sfp_email=&amp;sfph_mail=">https://plugins.trac.wordpress.org/changeset?sfp_email=&amp;sfph_mail=&amp;reponame=&amp;old=3114611%40auth0&amp;new=3114611%40auth0&amp;sfp_email=&amp;sfph_mail=</a></li>
<li><a href="https://www.wordfence.com/threat-intel/vulnerabilities/id/0c4e0d48-fde1-45dd-8e06-4582cf677579?source=cve">https://www.wordfence.com/threat-intel/vulnerabilities/id/0c4e0d48-fde1-45dd-8e06-4582cf677579?source=cve</a></li>
<li><a href="https://github.com/advisories/GHSA-52jw-f3jq-hhwg">https://github.com/advisories/GHSA-52jw-f3jq-hhwg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-52jw-f3jq-hhwg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-10T09:30:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ssddanbrown/bookstack] BookStack Incorrect Access Control vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-pj36-fcrg-327j</id>
        <link href="https://github.com/advisories/GHSA-pj36-fcrg-327j"/>
        <updated>2024-07-11T17:25:09.000Z</updated>
        <content type="html"><![CDATA[<p>Incorrect access control in BookStack before v24.05.1 allows attackers to confirm existing system users and perform targeted notification email DoS via public facing forms.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-36676">https://nvd.nist.gov/vuln/detail/CVE-2024-36676</a></li>
<li><a href="https://github.com/BookStackApp/BookStack/issues/4993">https://github.com/BookStackApp/BookStack/issues/4993</a></li>
<li><a href="https://github.com/BookStackApp/BookStack/releases/tag/v24.05.1">https://github.com/BookStackApp/BookStack/releases/tag/v24.05.1</a></li>
<li><a href="https://www.bookstackapp.com/blog/bookstack-release-v24-05-1">https://www.bookstackapp.com/blog/bookstack-release-v24-05-1</a></li>
<li><a href="https://github.com/BookStackApp/BookStack/commit/69af9e0dbdefd8c6c951e8afbe2bba141d454beb">https://github.com/BookStackApp/BookStack/commit/69af9e0dbdefd8c6c951e8afbe2bba141d454beb</a></li>
<li><a href="https://github.com/advisories/GHSA-pj36-fcrg-327j">https://github.com/advisories/GHSA-pj36-fcrg-327j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pj36-fcrg-327j</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-07-10T00:30:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[privatebin/privatebin] PrivateBin allows shortening of URLs for other domains]]></title>
        <id>https://github.com/advisories/GHSA-mqqj-fx8h-437j</id>
        <link href="https://github.com/advisories/GHSA-mqqj-fx8h-437j"/>
        <updated>2024-07-12T13:22:15.000Z</updated>
        <content type="html"><![CDATA[<p>In <a href="https://github.com/PrivateBin/PrivateBin/blob/master/CHANGELOG.md#15-2022-12-11">v1.5</a> we introduced the YOURLS server-side proxy. The idea was to allow using the YOURLs URL shortener without running the YOURLs instance without authentication and/or exposing the authentication token to the public, allowing anyone to shorten any URL. With the proxy mechanism, anyone can shorten any URL pointing to the configured PrivateBin instance. The vulnerability allowed other URLs to be shortened, as long as they contain the PrivateBin instance, defeating the limit imposed by the proxy.</p>
<p>Neither the confidentially of existing pastes on the server nor the configuration options including the YOURLs token are affected.</p>
<h3 id="impact">Impact</h3>
<p>This issue only affects non-standard configurations of PrivateBin. Instances are affected if all of the following conditions are met:</p>
<ol>
<li>The PrivateBin instance enables URL shortening.</li>
<li>A YOURLs URL shortener is used and it is configured not to be public and require authentication to shorten URLs.</li>
<li>A basepath, the YOURLs proxy mechanism and an authentication token is  configured in PrivateBin to use the non-public YOURLs instance.</li>
<li>A crafted URL is sent to PrivateBins' YOURLs proxy endpoint with a URL that contains the PrivateBin instance URL as a GET-parameter or as part of the URL-fragment, but doesn't start with the instance URL (a third-party URL)</li>
</ol>
<p>The root cause is, <a href="https://github.com/PrivateBin/PrivateBin/blob/3cba170f3255de21bbebb77f6c565519ef33e8c1/lib/YourlsProxy.php#L50-L53">that the guard clause checking whether the URL to be shortened belongs to your own PrivateBin domain only checks if the PrivateBin instance is contained in the URL</a> but not if it starts with it.</p>
<p>This is a kind of authentication bypass due to incomplete filtering. This <a href="https://cwe.mitre.org/data/definitions/601.html">has a similar impact like an open redirect</a> except it does not directly redirect, but allows a further hiding of the target URL as is common and known for URL shorteners. If the URL shortener domain used is trusted by it's users, this allows hiding a malicious URL. </p>
<p>The highest impact may be that this can be used for phishing campaigns, by routing users to some kind of fake site mimicking the trusted shortener or PrivateBin domain, which could then extract sensitive data from entered data or similar. That said, this is a general concern with URL shorteners and users are advised to follow general phishing prevention attempts like verifying the domain of the site they are using and <a href="https://github.com/PrivateBin/PrivateBin?tab=readme-ov-file#what-it-doesnt-provide">using a trusted PrivateBin instance</a>.</p>
<h3 id="indicators-of-exploitation">Indicators of exploitation</h3>
<p>Check your YOURLs proxy for shortened domains that do not start with your own PrivateBin instance. Also note, that for this to be a result of an exploitation of this vulnerability, somewhere in the URL the <code>base path + ?</code> e.g. <code>https://privatebin.example/?</code> has to appear in the destination URL, as this is what the guard checked for.</p>
<h3 id="patches">Patches</h3>
<p>The problem has been patched in version 1.7.4 of PrivateBin. In addition to upgrading, users of the YOURLs proxy feature should check for the indicators of exploitation, as outlined above.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disable URL shortening, if you have been using it.</li>
<li>Only the YOURLs proxy is affected. Other URL shortening options either require a public, un-authenticated shortener, or expose the token to the client, which by design allows shortening any URL.</li>
</ul>
<h3 id="proof-of-concept">Proof of concept</h3>
<p>See <a href="https://github.com/PrivateBin/PrivateBin/blob/2c711e9d3ca21230fc68f5b4dba2a7a0592b963b/tst/YourlsProxyTest.php#L57-L62">the unit test that got introduced</a> to prevent similar regressions for an example of a URL that would circumvent the configured basepath.</p>
<p>Here is an example of how a manual exploitation would work:</p>
<p>In a PrivateBin instance hosted on <code>https://privatebin.example/</code>, with a valid URL YOURLs shortening proxy configuration using a token to prevent un-authenticated short-URL creation, send a URL shortening request for the domain <code>https://attacker.example.com/?q=https://privatebin.example/?foo#bar</code>. <code>attacker.example.com</code> is any attacker controlled, arbitrary domain.</p>
<p>You can do this by sending a GET request to <code>https://privatebin.example/shortenviayourls?link=https%3A%2F%2Fattacker.example.com%2F%3Fq%3Dhttps%3A%2F%2Fprivatebin.example%2F%3Ffoo%23bar</code>, without URL encoding this looks as follows: <code>https://privatebin.example/shortenviayourls?link=https://attacker.example.com/?q=https://privatebin.example/?foo#bar</code>.</p>
<p>On an affected setup, you will get a valid short URL, which when accessed, leads to <code>https://attacker.example.com/?foo#bar</code>, the attackers domain. On a patched system your request will get rejected and only URLs starting with <code>https://privatebin.example/?[...]</code> are allowed for shortening.</p>
<h3 id="post-mortem">Post-mortem</h3>
<p>From our limited analysis, the issue <a href="https://github.com/PrivateBin/PrivateBin/commit/0dc9ab7576d5a1296debeb788afb2ae9c72d137c">has been introduced in commit <code>0dc9ab7</code> while refactoring</a>. The use of <a href="http://php.net/manual/function.substr.php"><code>substr</code></a> got replaced by <a href="https://www.php.net/manual/function.strpos"><code>strpos</code></a>. The <a href="https://github.com/PrivateBin/PrivateBin/commit/b0f17f0a91cdebbfd6732781943f1e04ce3311f7">initial contribution</a> contained no tests, but an implementation without this flaw. All these changes got introduced <a href="https://github.com/PrivateBin/PrivateBin/pull/997">in a single pull request</a>. This follows many best practices, as tests were added and the refactoring was done in close collaboration with the original author.</p>
<p>In the future, <a href="https://github.com/PrivateBin/PrivateBin/issues/1373">we plan to switch to the more obvious, readable and understandable</a> <a href="https://www.php.net/manual/function.str-starts-with.php"><code>str_starts_with</code></a>, which is available since PHP v8. Such a better function naming and insisting on using modern functions would not only result in a better code quality, but would possibly have prevented the issue, but for backwards-compatibility with PHP 7.3, we stay on the old function for now.</p>
<h3 id="final-thoughts">Final Thoughts</h3>
<p>The project maintainers have always discouraged the use of URL shorteners and <strong>users are always safer sharing the complete, long URL to a paste</strong>, see <a href="https://github.com/PrivateBin/PrivateBin/wiki/FAQ#the-url-is-so-long-cant-i-just-use-an-url-shortener">our FAQ</a>.</p>
<p>If you need or want to provide a URL shortener option as a PrivateBin instance administrator, YOURLs is the <em>best option</em> available to use with PrivateBin, because it is the only shortener supported, through the proxy mechanism, preventing arbitrarily shortening any URLs. Running a public URL shortener instance and allowing anonymous users shortening arbitrary domains invites the shortener getting abused.</p>
<h3 id="references">References</h3>
<ul>
<li>PR to fix the vulnerability: <a href="https://github.com/PrivateBin/PrivateBin/pull/1370">https://github.com/PrivateBin/PrivateBin/pull/1370</a></li>
</ul>
<h3 id="timeline">Timeline</h3>
<ul>
<li>2024-06-28 Issue report by @nbxiglk via email</li>
<li>2024-06-29 Vulnerability reproduced by @elrido, mitigation created and shared with maintainers and issue reporter for review</li>
<li>2024-07-06 Pull request with mitigation raised</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/PrivateBin/PrivateBin/security/advisories/GHSA-mqqj-fx8h-437j">https://github.com/PrivateBin/PrivateBin/security/advisories/GHSA-mqqj-fx8h-437j</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-39899">https://nvd.nist.gov/vuln/detail/CVE-2024-39899</a></li>
<li><a href="https://github.com/PrivateBin/PrivateBin/pull/1370">https://github.com/PrivateBin/PrivateBin/pull/1370</a></li>
<li><a href="https://github.com/PrivateBin/PrivateBin/commit/0c4e810e6728f67d678458838d8430dfba4fcca4">https://github.com/PrivateBin/PrivateBin/commit/0c4e810e6728f67d678458838d8430dfba4fcca4</a></li>
<li><a href="https://github.com/advisories/GHSA-mqqj-fx8h-437j">https://github.com/advisories/GHSA-mqqj-fx8h-437j</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mqqj-fx8h-437j</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-10T14:25:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yiisoft/yii2] Reflected Cross-site Scripting in yiisoft/yii2 Debug mode]]></title>
        <id>https://github.com/advisories/GHSA-qg5r-95m4-mjgj</id>
        <link href="https://github.com/advisories/GHSA-qg5r-95m4-mjgj"/>
        <updated>2024-07-08T19:06:03.000Z</updated>
        <content type="html"><![CDATA[<p>During the internal penetration testing of our product based on Yii2, we discovered an XSS vulnerability within the framework itself. This issue is relevant for the latest version of Yii2 (2.0.49.3).</p>
<h3 id="conditions-for-vulnerability-reproduction">Conditions for vulnerability reproduction</h3>
<ul>
<li>The framework is in debug mode (YII_DEBUG set to true).</li>
<li>The php.ini setting zend.exception_ignore_args is set to Off (default value).</li>
<li>An attacker induces an exception in the application, leading to a stack trace page being displayed.</li>
</ul>
<h3 id="vulnerability-description">Vulnerability description</h3>
<p>The issue lies in the mechanism for displaying function argument values in the stack trace. The vulnerability manifests when an argument's value exceeds 32 characters. For convenience, argument values exceeding this limit are truncated and displayed with an added "...". The full argument value becomes visible when hovering over it with the mouse, as it is displayed in the title attribute of a span tag. However, the use of a double quote (") allows an attacker to break out of the title attribute's value context and inject their own attributes into the span tag, including malicious JavaScript code through event handlers such as onmousemove.</p>
<p>Demonstration example:
<a href="http://31.184.254.143/about/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%22%20onmousemove=alert(1)%20style=%22width:%20100000px;%20height:%20100000px;%20position:%20absolute;%20top:%20-10000px;%20left:%200;%22">http://31.184.254.143/about/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%22%20onmousemove=alert(1)%20style=%22width:%20100000px;%20height:%20100000px;%20position:%20absolute;%20top:%20-10000px;%20left:%200;%22</a></p>
<h3 id="impact-of-the-vulnerability">Impact of the vulnerability</h3>
<p>This vulnerability allows an attacker to execute arbitrary JavaScript code in the security context of the victim's site via a specially crafted link. This could lead to the theft of cookies (including httpOnly cookies, which are accessible on the page), content substitution, or complete takeover of user accounts.</p>
<h3 id="technical-analysis-and-mitigation-suggestion">Technical analysis and mitigation suggestion</h3>
<p>Upon analyzing the framework's source code, it was found that data handling for the title attribute is performed in the file framework/web/ErrorHandler.php. The identified problem is related to changes made in the commit <a href="https://github.com/yiisoft/yii2/commit/8cc9aeb2f0b2ffe02fb54a817064e9da75512706">https://github.com/yiisoft/yii2/commit/8cc9aeb2f0b2ffe02fb54a817064e9da75512706</a> , which led to the disabling of encoding for single and double quotes in the htmlEncode method (<a href="https://github.com/yiisoft/yii2/blob/8cc9aeb2f0b2ffe02fb54a817064e9da75512706/framework/web/ErrorHandler.php#L183">https://github.com/yiisoft/yii2/blob/8cc9aeb2f0b2ffe02fb54a817064e9da75512706/framework/web/ErrorHandler.php#L183</a>) due to the addition of the ENT_NOQUOTES flag. To address this issue while preserving the functionality intended by the commit, we suggest modifying the htmlEncode method as follows:</p>
<pre><code>    return htmlspecialchars($text, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML5, 'UTF-8');
</code></pre>
<p>This change will effectively prevent the XSS vulnerability while maintaining the targeted functionality of the previous changes.</p>
<h3 id="conclusion">Conclusion</h3>
<p>Based on the above, we strongly recommend implementing the suggested changes to the project's main code as soon as possible to protect framework users from potential attacks. I am ready to provide further information or assistance, including creating a pull request if necessary.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/yiisoft/yii2/security/advisories/GHSA-qg5r-95m4-mjgj">https://github.com/yiisoft/yii2/security/advisories/GHSA-qg5r-95m4-mjgj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-32877">https://nvd.nist.gov/vuln/detail/CVE-2024-32877</a></li>
<li><a href="https://github.com/yiisoft/yii2/commit/f7baab16e79f2369d4838ab5653c3c07ecf26615">https://github.com/yiisoft/yii2/commit/f7baab16e79f2369d4838ab5653c3c07ecf26615</a></li>
<li><a href="https://github.com/yiisoft/yii2/commit/8cc9aeb2f0b2ffe02fb54a817064e9da75512706">https://github.com/yiisoft/yii2/commit/8cc9aeb2f0b2ffe02fb54a817064e9da75512706</a></li>
<li><a href="https://github.com/yiisoft/yii2/commit/62d081f18c3602d09e7d075bba3a0ca5c313f0b4">https://github.com/yiisoft/yii2/commit/62d081f18c3602d09e7d075bba3a0ca5c313f0b4</a></li>
<li><a href="https://github.com/yiisoft/yii2/blob/2.0.49.x/framework/CHANGELOG.md#20494-june-4-2024">https://github.com/yiisoft/yii2/blob/2.0.49.x/framework/CHANGELOG.md#20494-june-4-2024</a></li>
<li><a href="https://github.com/advisories/GHSA-qg5r-95m4-mjgj">https://github.com/advisories/GHSA-qg5r-95m4-mjgj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qg5r-95m4-mjgj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-02T22:27:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[yiisoft/yii2] Unsafe Reflection in base Component class in yiisoft/yii2]]></title>
        <id>https://github.com/advisories/GHSA-cjcc-p67m-7qxm</id>
        <link href="https://github.com/advisories/GHSA-cjcc-p67m-7qxm"/>
        <updated>2024-07-08T19:05:07.000Z</updated>
        <content type="html"><![CDATA[<p>Yii2 supports attaching Behaviors to Components by setting properties having the format <code>'as &lt;behaviour-name&gt;'</code>.</p>
<p>Internally this is done using the <code>__set()</code> magic method. If the value passed to this method is not an instance of the <code>Behavior</code> class, a new object is instantiated using <code>Yii::createObject($value)</code>. However, there is no validation check that verifies that <code>$value</code> is a valid <code>Behavior</code> class name or configuration. An attacker that can control the content of the $value variable can then instantiate arbitrary classes, passing parameters to their constructors and then invoking setter methods.</p>
<h3 id="impact">Impact</h3>
<p>With some effort malicious code can be injected executed which might be anything ranging from deleting files to dropping database tables</p>
<h3 id="patches">Patches</h3>
<p>Not yet patched.</p>
<h3 id="workarounds">Workarounds</h3>
<p>No Work around available</p>
<h3 id="references">References</h3>
<p>Reported <a href="https://huntr.com/bounties/4fbdd965-02b6-42e4-b57b-f98f93415b8f?token=3bcfc5266870680af19a26170b8dbf3750e3b593ce192da8eaa6a03f96b99b52c419e15768c56f23991dc50003aa1a9e3cb3f1f9321e18bd506d68a9f937cd5b7ca90fb47967df22c8768c0c48f7206f36b583464af7e44bf93eecc5398a2764b98e02cf8e280397785106db16e4197951554eb9b9c46649f4339e2f413cf6a0197ab2e0">Here</a> </p>
<p>in case the link is dead, here is the full description</p>
<h1 id="description">Description</h1>
<p>Yii2 supports attaching Behaviors to Components by setting properties having the format  <code>'as &lt;behaviour-name&gt;'</code>.</p>
<p>Internally this is done using the  <code>__set()</code>  magic method. If the value passed to this method is not an instance of the Behavior class, a new object is instantiated using  <code>Yii::createObject($value)</code>. However, there is no validation check that verifies that  <code>$value</code>  is a valid Behavior class name or configuration. An attacker that can control the content of the  <code>$value</code>  variable can then instantiate arbitrary classes, passing parameters to their constructors and then invoking setter methods.</p>
<p>Depending on the installed dependencies various kind of attacks are possible.</p>
<h1 id="proof-of-concept">Proof of Concept</h1>
<p>A PoC application was created using  <code>composer create-project</code>, as specified in the  <a href="https://www.yiiframework.com/doc/guide/2.0/en/start-installation">getting started</a>.</p>
<p>Yii JSON parser was enabled in the configuration:</p>
<pre><code class="language-php">'parsers' =&gt; [ 'application/json' =&gt; 'yii\web\JsonParser' ]
</code></pre>
<p>A vulnerable controller was added:</p>
<pre><code class="language-php">&lt;?php

namespace app\controllers;

use yii\base\Component;
use yii\web\Controller;

class ExploitableController extends Controller
{
    public function beforeAction($action): bool
    {
        // Needed only to simplify the PoC
        $this-&gt;enableCsrfValidation = false;
        return parent::beforeAction($action);
    }

    public function actionVulnerable(): string
    {
        $fields = $this-&gt;request-&gt;post();
        $myComponent = new Component();
        foreach ($fields as $key =&gt; $value) {
            $myComponent-&gt;$key = $value;
        }
        return "";
    }
}
</code></pre>
<h2 id="executing-phpinfo">Executing phpinfo()</h2>
<p>Following command stores the content of  <code>phpinfo()</code>  inside info.html:</p>
<pre><code class="language-bash">curl -XPOST -H "Content-Type: application/json" -d '{"as hack": {"__class":"GuzzleHttp\\Psr7\\FnStream", "__construct()": [[]], "_fn_close": "phpinfo"}}' http://localhost:8080/index.php?r=exploitable%2Fvulnerable &gt; info.html
</code></pre>
<p>It leverages the fact that  <code>GuzzleHttp\Psr7\FnStream</code>  class executes  <code>call_user_func($this-&gt;_fn_close)</code>  inside  <code>__destruct()</code>. This class is a default dependency.</p>
<h2 id="executing-arbitrary-mysql-queries-blind-execution">Executing arbitrary MySQL queries (blind execution)</h2>
<p>If the application is connected to a MySQL database it is possible to exploit the  <code>PDO</code>  class to execute arbitrary SQL queries:</p>
<pre><code class="language-bash">curl -XPOST -H "Content-Type: application/json" -d '{"as hack": {"__class":"\\PDO", "__construct()": ["mysql:host=127.0.0.1;dbname=test", "test", "test", {"1002": "DROP TABLE test"}]}}' http://localhost:8080/index.php?r=exploitable%2Fvulnerable
</code></pre>
<p>Notice that the server will always return a 500 Internal Server Error (because the instantiated class is not a Behavior), however the query is executed, even if we can't receive any output from it. If the query fails we might see a PDO error message (i.e. "Table 'test.foo' doesn't exist"), depending on the app configuration.</p>
<h1 id="impact-1">Impact</h1>
<p>It is not trivial to exploit this bug, because it depends on peculiar characteristics of the target application. However, it looks that there is at least one very popular product built on Yii2 that is severely affected by this vulnerability (allowing to an anonymous user to gain admin access, with an easy exploit).</p>
<p>The consequences of the exploitation could vary from retrieving sensitive information to DoS or unauthorized access.</p>
<h1 id="occurrences">Occurrences</h1>
<p><a href="https://github.com/yiisoft/yii2/blob/2.0.48/framework/base/Component.php#L191">Component.php L191</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/yiisoft/yii2/security/advisories/GHSA-cjcc-p67m-7qxm">https://github.com/yiisoft/yii2/security/advisories/GHSA-cjcc-p67m-7qxm</a></li>
<li><a href="https://github.com/yiisoft/yii2/commit/628d406bfafb80fc32147837888c0057d89a021e">https://github.com/yiisoft/yii2/commit/628d406bfafb80fc32147837888c0057d89a021e</a></li>
<li><a href="https://github.com/yiisoft/yii2/blob/master/framework/CHANGELOG.md#2050-may-30-2024">https://github.com/yiisoft/yii2/blob/master/framework/CHANGELOG.md#2050-may-30-2024</a></li>
<li><a href="https://github.com/yiisoft/yii2/pull/20183">https://github.com/yiisoft/yii2/pull/20183</a></li>
<li><a href="https://github.com/yiisoft/yii2/commit/62d081f18c3602d09e7d075bba3a0ca5c313f0b4">https://github.com/yiisoft/yii2/commit/62d081f18c3602d09e7d075bba3a0ca5c313f0b4</a></li>
<li><a href="https://github.com/advisories/GHSA-cjcc-p67m-7qxm">https://github.com/advisories/GHSA-cjcc-p67m-7qxm</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cjcc-p67m-7qxm</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-02T22:30:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopxo/shopxo] ShopXO Server-Side Request Forgery Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c96r-38gv-grp4</id>
        <link href="https://github.com/advisories/GHSA-c96r-38gv-grp4"/>
        <updated>2024-07-08T19:04:37.000Z</updated>
        <content type="html"><![CDATA[<p>A vulnerability was found in ShopXO up to 6.1.0. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file <code>extend/base/Uploader.php</code>. The manipulation of the argument source leads to server-side request forgery. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-270367. NOTE: The original disclosure confuses CSRF with SSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-6524">https://nvd.nist.gov/vuln/detail/CVE-2024-6524</a></li>
<li><a href="https://github.com/J1rrY-learn/learn/blob/main/shopxo_ssrf.md">https://github.com/J1rrY-learn/learn/blob/main/shopxo_ssrf.md</a></li>
<li><a href="https://vuldb.com/?ctiid.270367">https://vuldb.com/?ctiid.270367</a></li>
<li><a href="https://vuldb.com/?id.270367">https://vuldb.com/?id.270367</a></li>
<li><a href="https://vuldb.com/?submit.365173">https://vuldb.com/?submit.365173</a></li>
<li><a href="https://github.com/advisories/GHSA-c96r-38gv-grp4">https://github.com/advisories/GHSA-c96r-38gv-grp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c96r-38gv-grp4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-07-05T12:31:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[shopware/platform] Shopware database password is leaked to an unauthenticated users]]></title>
        <id>https://github.com/advisories/GHSA-r4ph-mx67-x58p</id>
        <link href="https://github.com/advisories/GHSA-r4ph-mx67-x58p"/>
        <updated>2024-07-08T18:34:14.000Z</updated>
        <content type="html"><![CDATA[<p>In Shopware 6 before 6.2.3, the database password is leaked to an unauthenticated user when a DriverException occurs and verbose error handling is enabled. This vulnerability does not affect the shopware 5 release branch (<code>shopware/shopware</code> on packagist).</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-13997">https://nvd.nist.gov/vuln/detail/CVE-2020-13997</a></li>
<li><a href="https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-07-2020">https://docs.shopware.com/en/shopware-6-en/security-updates/security-update-07-2020</a></li>
<li><a href="https://www.shopware.com/en/changelog/#6-2-3">https://www.shopware.com/en/changelog/#6-2-3</a></li>
<li><a href="https://github.com/advisories/GHSA-r4ph-mx67-x58p">https://github.com/advisories/GHSA-r4ph-mx67-x58p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r4ph-mx67-x58p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-24T17:24:28.000Z</published>
    </entry>
</feed>