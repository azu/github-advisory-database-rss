<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-03-31T17:01:25.754Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[wintercms/winter] Winter CMS Server-Side Template Injection (SSTI) vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-8r5j-gm3j-cx9c</id>
        <link href="https://github.com/advisories/GHSA-8r5j-gm3j-cx9c"/>
        <updated>2024-03-29T20:15:39.000Z</updated>
        <content type="html"><![CDATA[<p>Server-side Template Injection (SSTI) vulnerability in Winter CMS v.1.2.3 allows a remote attacker to execute arbitrary code via a crafted payload to the CMS Pages field and Plugin components.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29686">https://nvd.nist.gov/vuln/detail/CVE-2024-29686</a></li>
<li><a href="https://forum.ksec.co.uk/t/webapps-winter-cms-1-2-3-server-side-template-injection-ssti-authenticated/2779">https://forum.ksec.co.uk/t/webapps-winter-cms-1-2-3-server-side-template-injection-ssti-authenticated/2779</a></li>
<li><a href="https://www.exploit-db.com/exploits/51893">https://www.exploit-db.com/exploits/51893</a></li>
<li><a href="https://github.com/advisories/GHSA-8r5j-gm3j-cx9c">https://github.com/advisories/GHSA-8r5j-gm3j-cx9c</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-8r5j-gm3j-cx9c</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-29T18:30:42.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[kimai/kimai] Kimai API returns timesheet entries a user should not be authorized to view]]></title>
        <id>https://github.com/advisories/GHSA-cj3c-5xpm-cx94</id>
        <link href="https://github.com/advisories/GHSA-cj3c-5xpm-cx94"/>
        <updated>2024-03-29T19:05:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The permission <code>view_other_timesheet</code> performs differently for the Kimai UI and the API, thus returning unexpected data through the API.</p>
<h3 id="details">Details</h3>
<p>When setting the <code>view_other_timesheet</code> permission to true, on the frontend, users can only see timesheet entries for teams they are a part of. When requesting all timesheets from the API, however, all timesheet entries are returned, regardless of whether the user shares team permissions or not.</p>
<p>Example:
There are projects P1 and P2, Teams T1 and T2, users U1 and U2 and Timesheet entries E1 and E2. U1 is team leader of team T1 and has access to P1. U2 is in Team T2 and has access to both P1 and P2. U2 creates E1 for P1 and E2 for P2.
In the UI, U1 with <code>view _other_timesheet</code> perms sees E1 as he is a part of T1 that has access to P1.
In the API, however, he has access to E1 <strong>and E2</strong>.</p>
<p>Additionally, if U1 is not a team leader T1, he does not see any timesheet from a user other than himself in the UI, but still all timesheets in the API.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>Give a user <code>view_other_timesheet</code> permission</li>
<li>The result of the UI and the API call to <code>/api/timesheets?user=all</code> differs in the data that is being returned</li>
</ul>
<p>Curl command:</p>
<pre><code class="language-bash">curl -X 'GET' \
  'https://kimai.instance.com/api/timesheets?user=all' \
  -H 'accept: application/json' \
  -H 'X-AUTH-USER: username' \
  -H 'X-AUTH-TOKEN: api_token'
</code></pre>
<h3 id="impact">Impact</h3>
<p>This is at least an insufficient granularity of access control weakness. People can see timesheet entries they are not supposed to.
This greatly affects the confidentiality of timesheet entries. </p>
<p>Restricting API access to administrators is also not a valid solution, as API access is needed, for example, to use the mobile app.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/kimai/kimai/security/advisories/GHSA-cj3c-5xpm-cx94">https://github.com/kimai/kimai/security/advisories/GHSA-cj3c-5xpm-cx94</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29200">https://nvd.nist.gov/vuln/detail/CVE-2024-29200</a></li>
<li><a href="https://github.com/kimai/kimai/releases/tag/2.13.0">https://github.com/kimai/kimai/releases/tag/2.13.0</a></li>
<li><a href="https://github.com/advisories/GHSA-cj3c-5xpm-cx94">https://github.com/advisories/GHSA-cj3c-5xpm-cx94</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cj3c-5xpm-cx94</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-29T19:05:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[codeigniter4/framework] CodeIgniter4 DoS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-39fp-mqmm-gxj6</id>
        <link href="https://github.com/advisories/GHSA-39fp-mqmm-gxj6"/>
        <updated>2024-03-29T19:41:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A vulnerability was found in the Language class that allowed DoS attacks. This vulnerability can be exploited by an attacker to consume a large amount of memory on the server.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to v4.4.7 or later. See <a href="https://codeigniter4.github.io/userguide/installation/upgrade_447.html">upgrading guide</a>.</p>
<h3 id="workarounds">Workarounds</h3>
<ul>
<li>Disabling Auto Routing prevents a known attack vector in the framework.</li>
<li>Do not pass invalid values to the <code>lang()</code> function or <code>Language</code> class.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://codeigniter4.github.io/userguide/outgoing/localization.html#language-localization">https://codeigniter4.github.io/userguide/outgoing/localization.html#language-localization</a></li>
<li><a href="https://codeigniter4.github.io/userguide/general/common_functions.html#lang">https://codeigniter4.github.io/userguide/general/common_functions.html#lang</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-39fp-mqmm-gxj6">https://github.com/codeigniter4/CodeIgniter4/security/advisories/GHSA-39fp-mqmm-gxj6</a></li>
<li><a href="https://github.com/codeigniter4/CodeIgniter4/commit/fa851acbae7ae4c5a97f8f38ae87aa0822a334c0">https://github.com/codeigniter4/CodeIgniter4/commit/fa851acbae7ae4c5a97f8f38ae87aa0822a334c0</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29904">https://nvd.nist.gov/vuln/detail/CVE-2024-29904</a></li>
<li><a href="https://github.com/advisories/GHSA-39fp-mqmm-gxj6">https://github.com/advisories/GHSA-39fp-mqmm-gxj6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-39fp-mqmm-gxj6</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-29T16:36:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce/tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling iframes]]></title>
        <id>https://github.com/advisories/GHSA-438c-3975-5x3f</id>
        <link href="https://github.com/advisories/GHSA-438c-3975-5x3f"/>
        <updated>2024-03-26T21:23:48.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A&nbsp;<a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a>&nbsp;vulnerability was discovered in TinyMCE’s content insertion code.  This allowed <code>iframe</code> elements containing malicious code to execute when inserted into the editor.  These <code>iframe</code> elements are restricted in their permissions by same-origin browser protections, but could still trigger operations such as downloading of malicious assets.</p>
<h3 id="fix">Fix</h3>
<p>TinyMCE 6.8.1 introduced a new <code>sandbox_iframes</code> boolean option which adds the <code>sandbox=""</code> attribute to every <code>iframe</code> element by default when enabled. This will prevent cross-origin, and in special cases same-origin, XSS by embedded resources in <code>iframe</code> elements. From TinyMCE 7.0.0 onwards the default value of this option is <code>true</code>.</p>
<p>In TinyMCE 7.0.0 a new <code>sandbox_iframes_exclusions</code> option was also added, allowing a list of domains to be specified that should be excluded from having the&nbsp;<code>sandbox=""</code>&nbsp;attribute applied when the&nbsp;<code>sandbox_iframes</code>&nbsp;option is enabled. By default, this option is set to an array of domains that are provided in embed code by popular websites. To sandbox <code>iframe</code> elements from every domain, set this option to <code>[]</code>.</p>
<h3 id="workarounds">Workarounds</h3>
<p>The HTTP Content-Security-Policy (CSP) <code>frame-src</code> or <code>object-src</code> can be configured to restrict or block the loading of unauthorized URLS.  Refer to the <a href="https://www.tiny.cloud/docs/tinymce/latest/tinymce-and-csp/">TinyMCE Content Security Policy Guide</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">TinyMCE 6.8.1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true">TinyMCE 7.0.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f">https://github.com/tinymce/tinymce/security/advisories/GHSA-438c-3975-5x3f</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29203">https://nvd.nist.gov/vuln/detail/CVE-2024-29203</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#sandbox_iframes-editor-option-is-now-defaulted-to-true</a></li>
<li><a href="https://github.com/advisories/GHSA-438c-3975-5x3f">https://github.com/advisories/GHSA-438c-3975-5x3f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-438c-3975-5x3f</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T21:23:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tinymce/tinymce] TinyMCE Cross-Site Scripting (XSS) vulnerability in handling external SVG files through Object or Embed elements]]></title>
        <id>https://github.com/advisories/GHSA-5359-pvf2-pw78</id>
        <link href="https://github.com/advisories/GHSA-5359-pvf2-pw78"/>
        <updated>2024-03-26T21:23:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>A <a href="https://owasp.org/www-community/attacks/xss/">cross-site scripting (XSS)</a> vulnerability was discovered in TinyMCE’s content loading and content inserting code. A SVG image could be loaded though an <code>object</code> or <code>embed</code> element and that image could potentially contain a XSS payload.</p>
<h3 id="fix">Fix</h3>
<p>TinyMCE 6.8.1 introduced a new <code>convert_unsafe_embeds</code> option to automatically convert <code>object</code> and <code>embed</code> elements respective of their <code>type</code> attribute.  From TinyMCE 7.0.0 onwards, the <code>convert_unsafe_embeds</code> option is enabled by default.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you are using TinyMCE 6.8.1 or higher, set <code>convert_unsafe_embeds</code> to true. For any earlier versions, a custom NodeFilter is recommended to remove or modify any <code>object</code> or <code>embed</code> elements. This can be added using the <code>editor.parser.addNodeFilter</code> and <code>editor.serializer.addNodeFilter</code> APIs.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>Tiny Technologies would like to thank Toni Huttunen of <a href="https://www.fraktal.fi/">Fraktal Oy</a> for discovering this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">TinyMCE 6.8.1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true">TinyMCE 7.0.0</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78">https://github.com/tinymce/tinymce/security/advisories/GHSA-5359-pvf2-pw78</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29881">https://nvd.nist.gov/vuln/detail/CVE-2024-29881</a></li>
<li><a href="https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1">https://github.com/tinymce/tinymce/commit/bcdea2ad14e3c2cea40743fb48c63bba067ae6d1</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types">https://www.tiny.cloud/docs/tinymce/6/6.8.1-release-notes/#new-convert_unsafe_embeds-option-that-controls-whether-object-and-embed-elements-will-be-converted-to-more-restrictive-alternatives-namely-img-for-image-mime-types-video-for-video-mime-types-audio-audio-mime-types-or-iframe-for-other-or-unspecified-mime-types</a></li>
<li><a href="https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true">https://www.tiny.cloud/docs/tinymce/7/7.0-release-notes/#convert_unsafe_embeds-editor-option-is-now-defaulted-to-true</a></li>
<li><a href="https://github.com/advisories/GHSA-5359-pvf2-pw78">https://github.com/advisories/GHSA-5359-pvf2-pw78</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5359-pvf2-pw78</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T21:23:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pimcore/pimcore] Pimcore Preview Documents are not restricted to logged in users anymore]]></title>
        <id>https://github.com/advisories/GHSA-5737-rqv4-v445</id>
        <link href="https://github.com/advisories/GHSA-5737-rqv4-v445"/>
        <updated>2024-03-27T10:20:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Any call with the query argument <code>?pimcore_preview=true</code> allows to view unpublished sites. Event if in incognito window. Due to the behaviour of how previews should work, this also applies to internal documents, say an intranet which could be really severe.</p>
<h3 id="details">Details</h3>
<p>In previous versions of Pimcore, session information would propagate to previews, so only a logged in user could open a preview. This no longer applies. Previews are broad open to any user and with just the hint of a restricted link one could gain access to possible confident / unreleased information.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>go to demo.pimcore.com </li>
<li>unpublish a document</li>
<li>open preview link in incognito tab</li>
<li>see how the page loads normally</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Any intranet or other restricted sites which are able to show a preview are affected. This could possibly be huge.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-5737-rqv4-v445">https://github.com/pimcore/pimcore/security/advisories/GHSA-5737-rqv4-v445</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29197">https://nvd.nist.gov/vuln/detail/CVE-2024-29197</a></li>
<li><a href="https://github.com/pimcore/pimcore/commit/3ae43fb1065f9eb62ad2f542b883858d36d57e53">https://github.com/pimcore/pimcore/commit/3ae43fb1065f9eb62ad2f542b883858d36d57e53</a></li>
<li><a href="https://github.com/advisories/GHSA-5737-rqv4-v445">https://github.com/advisories/GHSA-5737-rqv4-v445</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5737-rqv4-v445</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T19:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pimcore/pimcore] Pimcore Preview Documents are not restricted to logged in users anymore]]></title>
        <id>https://github.com/advisories/GHSA-5737-rqv4-v445</id>
        <link href="https://github.com/advisories/GHSA-5737-rqv4-v445"/>
        <updated>2024-03-27T10:20:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Any call with the query argument <code>?pimcore_preview=true</code> allows to view unpublished sites. Event if in incognito window. Due to the behaviour of how previews should work, this also applies to internal documents, say an intranet which could be really severe.</p>
<h3 id="details">Details</h3>
<p>In previous versions of Pimcore, session information would propagate to previews, so only a logged in user could open a preview. This no longer applies. Previews are broad open to any user and with just the hint of a restricted link one could gain access to possible confident / unreleased information.</p>
<h3 id="poc">PoC</h3>
<ul>
<li>go to demo.pimcore.com </li>
<li>unpublish a document</li>
<li>open preview link in incognito tab</li>
<li>see how the page loads normally</li>
</ul>
<h3 id="impact">Impact</h3>
<p>Any intranet or other restricted sites which are able to show a preview are affected. This could possibly be huge.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pimcore/pimcore/security/advisories/GHSA-5737-rqv4-v445">https://github.com/pimcore/pimcore/security/advisories/GHSA-5737-rqv4-v445</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29197">https://nvd.nist.gov/vuln/detail/CVE-2024-29197</a></li>
<li><a href="https://github.com/pimcore/pimcore/commit/3ae43fb1065f9eb62ad2f542b883858d36d57e53">https://github.com/pimcore/pimcore/commit/3ae43fb1065f9eb62ad2f542b883858d36d57e53</a></li>
<li><a href="https://github.com/advisories/GHSA-5737-rqv4-v445">https://github.com/advisories/GHSA-5737-rqv4-v445</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5737-rqv4-v445</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-26T19:32:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ stored Cross-site Scripting at user email]]></title>
        <id>https://github.com/advisories/GHSA-q7g6-xfh2-vhpx</id>
        <link href="https://github.com/advisories/GHSA-q7g6-xfh2-vhpx"/>
        <updated>2024-03-25T19:46:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>email</code> field in phpMyFAQ's user control panel page is vulnerable to stored XSS attacks due to the inadequacy of PHP's <code>FILTER_VALIDATE_EMAIL</code> function, which only validates the email format, not its content. This vulnerability enables an attacker to execute arbitrary client-side JavaScript within the context of another user's phpMyFAQ session.</p>
<h3 id="details">Details</h3>
<p>Despite using PHP's <code>FILTER_VALIDATE_EMAIL</code> function, the email field does not adequately validate the content of the email address. This means that malicious input, such as JavaScript code, can be accepted and stored in the database without being detected. When the stored data is retrieved and displayed on web pages, it is not properly sanitized to remove or neutralize any potentially harmful content, such as JavaScript code which leads to Stored XSS.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Login as any user, go to the user control panel, change email to any valid email and intercept the request.</p>
</li>
<li><p>Modify the request’s email parameter to the following payload:  <code>"&gt;&lt;svg/onload=confirm('XSS')&gt;"@x.y</code>
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/1c5a5431-773a-4e26-95ba-e2563f681ca1"></p>
</li>
<li><p>Send the request and see that the XSS is triggered in the user control panel page.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/b0328fcc-3c03-4997-8121-1f5e7cf89178"></p>
</li>
<li><p>Also affects any user who browse to "../admin/?action=user&amp;user_action=listallusers"
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/3af1add8-ea64-4350-a77e-d14da6084d4c"></p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>This allows an attacker to execute arbitrary client side JavaScript within the context of another user's phpMyFAQ session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-q7g6-xfh2-vhpx">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-q7g6-xfh2-vhpx</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/09336b0ff0e0a04aa0c97c5975651af4769d2459">https://github.com/thorsten/phpMyFAQ/commit/09336b0ff0e0a04aa0c97c5975651af4769d2459</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/de90315c9bd4ead5fe6ba5586f6b016843aa8209">https://github.com/thorsten/phpMyFAQ/commit/de90315c9bd4ead5fe6ba5586f6b016843aa8209</a></li>
<li><a href="https://github.com/advisories/GHSA-q7g6-xfh2-vhpx">https://github.com/advisories/GHSA-q7g6-xfh2-vhpx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q7g6-xfh2-vhpx</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:46:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ's File Upload Bypass at Category Image Leads to RCE]]></title>
        <id>https://github.com/advisories/GHSA-pwh2-fpfr-x5gf</id>
        <link href="https://github.com/advisories/GHSA-pwh2-fpfr-x5gf"/>
        <updated>2024-03-25T22:28:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The category image upload function in phpmyfaq is vulnerable to manipulation of the <code>Content-type</code> and <code>lang</code> parameters, allowing attackers to upload malicious files with a .php extension, potentially leading to remote code execution (RCE) on the system.</p>
<h3 id="details">Details</h3>
<p>In the file upload function of the category image, the <code>Content-type</code> can be manipulated to return an empty string for the extension and the <code>lang</code> parameter can be set to <code>.php.</code> to allow an attacker to save a file as <code>.PHP</code>. This allows the uploading of web shells which could lead to RCE on phpmyfaq.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Generate a fake .GIF file that contains a php command using the tool <code>gifsicle</code>
 a. Cmd: <code>gifsicle &lt; test1.gif --comment "&lt;?php system('whoami'); ?&gt;" &gt; output.php.gif</code></p>
<p> <img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/b9fc1f37-ce83-4ec5-88a5-5217c35caac9"></p>
<p> b. The contents of the file should look like this:<br>  <img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/6d64a5b9-238f-4b56-8de6-7a765f69b0f5"></p>
</li>
<li><p>Browse to “../phpmyfaq/admin/?action=addcategory” and upload the fake .GIF file
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/680f1c94-c4eb-4873-be05-018e745b88b2"></p>
</li>
<li><p>Intercept the upload request and modify the params below and forward it:
3a. <code>lang</code> parameter to <code>.php.</code>
3b. <code>Content-Type</code> parameter from <code>image/gif</code> to <code>image/gif2</code></p>
<p><img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/9247c5bb-8f58-41de-a5d4-83ea57e42f37"></p>
</li>
<li><p>Browse to the “/phpmyfaq/images” directory and notice that our fake .GIF file has been uploaded as a PHP file with the category number as its filename.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/1c958452-7308-4038-8d51-d65c14f3e93a"></p>
</li>
<li><p>Now we just need to browse to “../phpmyfaq/images/category--.php” and see the results of our whoami command. Hence, verifying that RCE is achieved.
 <img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/5d40afb9-0c44-458f-8440-c9c6bd916ce1"></p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Attackers can upload malicious files containing executable code, allowing them to take control of the vulnerable system. This enables them to execute arbitrary commands, steal sensitive data, disrupt services, and potentially escalate their privileges, posing significant risks to the security and integrity of the system and its data.</p>
<h3 id="occurrences">Occurrences</h3>
<p>In CategoryImage.php line 124, the getimagesize and isValidMimeType functions can be bypassed by uploading a fake .GIF file generated by gifsicle.<br><img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/357684e3-9b7f-488e-ab99-6eb0b1ec3ebc"></p>
<p>In CategoryImage.php line 85, the getFileExtension function returns an empty string when the content type doesnt match any of the following 3 mappings. Hence, its possible to just supply an invalid content type such as image/gif2 in step 3 of the PoC to make the function return an empty string. 
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/98209dc0-7bcf-4d3d-a8ea-c4b70c47249a"></p>
<p>In CategoryImage.php line 66, the getFileName function generate the filename by concatenating the categoryId, categoryName and fileExtension together. This allows us to save the file with a .PHP extension. (It should be possible to just set the payload in step 3 above to just .php but it doesnt work and im not sure why..)
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/ae987ef2-45b0-4144-b834-ba75cdd15545"></p>
<h3 id="suggested-fix">Suggested Fix</h3>
<p>I believe one of the ways to solve this vulnerability is by forcing the getFileExtension function to return one of the 3 mimetype instead of an empty string. This ensures that the uploaded file will have an image extension and will not execute as a PHP file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-pwh2-fpfr-x5gf">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-pwh2-fpfr-x5gf</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7">https://github.com/thorsten/phpMyFAQ/commit/9136883776af67dfdb0e8cf14f5e0ca22bf4f2e7</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28105">https://nvd.nist.gov/vuln/detail/CVE-2024-28105</a></li>
<li><a href="https://github.com/advisories/GHSA-pwh2-fpfr-x5gf">https://github.com/advisories/GHSA-pwh2-fpfr-x5gf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pwh2-fpfr-x5gf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:46:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ Stored Cross-site Scripting at FAQ News Content]]></title>
        <id>https://github.com/advisories/GHSA-6p68-36m6-392r</id>
        <link href="https://github.com/advisories/GHSA-6p68-36m6-392r"/>
        <updated>2024-03-25T22:28:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>By manipulating the news parameter in a POST request, an attacker can inject malicious JavaScript code. Upon browsing to the compromised news page, the XSS payload triggers.</p>
<h3 id="poc">PoC</h3>
<ol>
<li>Edit a FAQ news, intercept the request and modify the <code>news</code> parameter in the POST body with the following payload:  <code>%3cscript%3ealert('xssContent')%3c%2fscript%3e</code></li>
<li>Browse to the particular news page and the XSS should pop up.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/01312703-c54c-4ee6-9f2c-0dd1bf1b23cf"></li>
</ol>
<h3 id="impact">Impact</h3>
<p>This allows an attacker to execute arbitrary client side JavaScript within the context of another user's phpMyFAQ session</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-6p68-36m6-392r">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-6p68-36m6-392r</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/c94b3deadd87789389e1fad162bc3dd595c0e15a">https://github.com/thorsten/phpMyFAQ/commit/c94b3deadd87789389e1fad162bc3dd595c0e15a</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28106">https://nvd.nist.gov/vuln/detail/CVE-2024-28106</a></li>
<li><a href="https://github.com/advisories/GHSA-6p68-36m6-392r">https://github.com/advisories/GHSA-6p68-36m6-392r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6p68-36m6-392r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:45:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ SQL injections at insertentry & saveentry]]></title>
        <id>https://github.com/advisories/GHSA-2grw-mc9r-822r</id>
        <link href="https://github.com/advisories/GHSA-2grw-mc9r-822r"/>
        <updated>2024-03-25T22:28:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A SQL injection vulnerability has been discovered in the <code>insertentry</code> &amp; <code>saveentry</code> when modifying records due to improper escaping of the email address. This allows any authenticated user with the rights to add/edit FAQ news to exploit this vulnerability to exfiltrate data, take over accounts and in some cases, even achieve RCE.</p>
<h3 id="poc-1---sql-injection-at-insertentry">PoC 1 - SQL Injection at insertentry:</h3>
<ol>
<li><p>Browse to “/admin/?action=editentry”, edit record and save. Intercept the POST request to "/admin/?action=insertentry" and modify the email and notes parameters in the body to the payloads below:
 a. <code>email=test'/*@email.com</code>
 b. <code>notes=*/,1,1,1,1,null,1);select+pg_sleep(5)--</code></p>
</li>
<li><p>Send the request and notice the <code>pg_sleep(5)</code> command is executed with a time delay of 5 seconds in the response. This verifies that the SQL injection vulnerability exists.<br> <img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/1000482f-3b00-462a-be8a-1eb21f720aca"></p>
</li>
</ol>
<h3 id="poc-2---sql-injection-at-saveentry">PoC 2 - SQL Injection at saveentry</h3>
<ol>
<li>Browse to “/admin/?action=editentry”, edit record and save. Intercept the POST request to "/admin/?action=saveentry" and modify the email and notes parameters in the body to the payloads below:
 a. <code>email=test'/*@email.com</code>
 b. <code>*/,notes=(select+pg_sleep(5))--</code></li>
<li>Send the request and notice the <code>pg_sleep(5)</code> command is executed with a time delay of 5 seconds in the response. This verifies that the SQL injection vulnerability exists.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/b1880ad1-1461-4735-9a67-9aa4d6c19b13"></li>
</ol>
<h3 id="impact">Impact</h3>
<p>The SQL injection vulnerability discovered allows authenticated users with appropriate privileges to execute malicious SQL queries, potentially leading to data exfiltration, account takeover, and even remote code execution. Attackers can exploit the vulnerability to read sensitive data from the database, such as user credentials and system files, compromising the confidentiality and integrity of the system. Moreover, successful exploitation may enable attackers to gain unauthorized access to user accounts or execute arbitrary commands on the server, impacting both system administrators and end users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-2grw-mc9r-822r">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-2grw-mc9r-822r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28107">https://nvd.nist.gov/vuln/detail/CVE-2024-28107</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/d0fae62a72615d809e6710861c1a7f67ac893007">https://github.com/thorsten/phpMyFAQ/commit/d0fae62a72615d809e6710861c1a7f67ac893007</a></li>
<li><a href="https://github.com/advisories/GHSA-2grw-mc9r-822r">https://github.com/advisories/GHSA-2grw-mc9r-822r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2grw-mc9r-822r</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:45:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ Stored HTML Injection at contentLink]]></title>
        <id>https://github.com/advisories/GHSA-48vw-jpf8-hwqh</id>
        <link href="https://github.com/advisories/GHSA-48vw-jpf8-hwqh"/>
        <updated>2024-03-25T22:31:37.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Due to insufficient validation on the <code>contentLink</code> parameter, it is possible for unauthenticated users to inject HTML code to the page which might affect other users. <em>Also, requires that adding new FAQs is allowed for guests and that the admin doesn't check the content of a newly added FAQ.</em></p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Browse to ../phpmyfaq/index.php?action=add&amp;cat=0 , enter <code>https://test.com?p=&lt;h1&gt;HTML_INJECTION&lt;/h1&gt;</code> for the contentLink parameter.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/4925d1ab-aa64-4781-8a44-f4c30cb8499c"></p>
</li>
<li><p>Verify the HTML injection by viewing the FAQ itself, “All categories” → “CategoryName” → ”QuestionName”.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/54b077d8-fab4-4cb6-870c-f19fc25d8252"></p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Attackers can manipulate the appearance and functionality of web pages by injecting malicious HTML code. This can lead to various undesirable outcomes, such as defacing the website, redirecting users to malicious sites, or altering the content to deceive users. Additionally, unauthenticated HTML injection can compromise user privacy by displaying sensitive information or misleading content. It undermines the integrity of the application and erodes user trust, potentially resulting in loss of reputation and credibility. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-48vw-jpf8-hwqh">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-48vw-jpf8-hwqh</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/4fed1d9602f0635260f789fe85995789d94d6634">https://github.com/thorsten/phpMyFAQ/commit/4fed1d9602f0635260f789fe85995789d94d6634</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28108">https://nvd.nist.gov/vuln/detail/CVE-2024-28108</a></li>
<li><a href="https://github.com/advisories/GHSA-48vw-jpf8-hwqh">https://github.com/advisories/GHSA-48vw-jpf8-hwqh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-48vw-jpf8-hwqh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:45:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ Stored Cross-site Scripting at File Attachments]]></title>
        <id>https://github.com/advisories/GHSA-hm8r-95g3-5hj9</id>
        <link href="https://github.com/advisories/GHSA-hm8r-95g3-5hj9"/>
        <updated>2024-03-25T22:31:47.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>An attacker with admin privileges can upload an attachment containing JS code without extension and the application will render it as HTML which allows for XSS attacks.</p>
<h3 id="details">Details</h3>
<p>When attachments are uploaded without an extension, the application renders it as HTML by default. Therefore allowing attackers to upload .html files containing javascript code to perform XSS attacks. The direct file path to the uploaded attachment is also easily obtainable as it is made up of substrings of the file's MD5 hashes.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Admin users can upload attachments containing XSS payloads in files without extensions to bypass the .html extension check.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/5c3c4222-550e-44c7-95ee-fd85562fffd5"></p>
</li>
<li><p>Since the path of the uploaded file is built entirely on the file’s MD5 hash and the attachment directory, it is possible for an attacker to know the direct path of the uploaded file.</p>
</li>
</ol>
<p>  E.g file MD5 hash: 38fff51cb7248a06d6142c6bdf846831</p>
<pre><code>URL will be: http://127.0.0.1/phpmyfaq/attachments/38fff/51cb7/248a0/6d6142c6bdf846831

- /attachments
- /38fff (first 5 chars of MD5 hash)
- /51cb7 (next 5 chars of MD5 hash)
- /248a0 (next 5 chars of MD5 hash)
- /6d6142c6bdf846831 (remaining chars of MD5 hash)
</code></pre>
<ol start="3">
<li>Even though the attachment was uploaded without a file extension, it is still rendered as .html, hence triggering the XSS payload.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/663954ec-0210-4788-a841-7daa3fb547c3"></li>
</ol>
<h3 id="impact">Impact</h3>
<p>This allows an attacker to execute arbitrary client side JavaScript within the context of another user's phpMyFAQ session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-hm8r-95g3-5hj9">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-hm8r-95g3-5hj9</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-29179">https://nvd.nist.gov/vuln/detail/CVE-2024-29179</a></li>
<li><a href="https://github.com/advisories/GHSA-hm8r-95g3-5hj9">https://github.com/advisories/GHSA-hm8r-95g3-5hj9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hm8r-95g3-5hj9</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:45:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpmyfaq/phpmyfaq] phpMyFAQ SQL Injection at "Save News"]]></title>
        <id>https://github.com/advisories/GHSA-qgxx-4xv5-6hcw</id>
        <link href="https://github.com/advisories/GHSA-qgxx-4xv5-6hcw"/>
        <updated>2024-03-25T22:28:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A SQL injection vulnerability has been discovered in the the "Add News" functionality due to improper escaping of the email address. This allows any authenticated user with the rights to add/edit FAQ news to exploit this vulnerability to exfiltrate data, take over accounts and in some cases, even achieve RCE.</p>
<h3 id="details">Details</h3>
<p>The vulnerable field lies in the  <code>authorEmail</code> field which uses PHP's <code>FILTER_VALIDATE_EMAIL</code> filter. This filter is insufficient in protecting against SQL injection attacks and should still be properly escaped. However, in this version of phpMyFAQ (3.2.5), this field is not escaped properly can be used together with other fields to fully exploit the SQL injection vulnerability.</p>
<h3 id="pocs">PoCs</h3>
<p>4 PoCs are demonstrated here to illustrate the potential impacts.</p>
<h4 id="poc-1---postgres-time-based-sqli">PoC 1 - Postgres Time Based SQLi</h4>
<ol>
<li>Login as admin or any user with the rights to view and save news.</li>
<li>Navigate to "../phpmyfaq/admin/?action=news", click on "Add news", fill in some data, send and intercept the request.</li>
<li>Modify the intercepted "/admin/?action=save-news" request to look like the SS below:
 3.1 - Set the "authorEmail" field in the body to "<code>test'/*@[email.com](http://email.com/)</code>".
 3.2 - Set the "linkTitle" field in the body to "<code>*/,1,1,1,1,1,1,1);select+pg_sleep(5)--</code>".
 3.3 - Set the rest of the fields as empty and send the request.</li>
<li>Notice the 5s delay in the response time, indicating that the sleep function was executed, verifying the existence of the SQLi vulnerability.
<img alt="image" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/b19a3f88-0794-4919-a485-60f45cfc83a5"></li>
</ol>
<h4 id="poc-2---sqli-to-read-data-from-postgresdb">PoC 2 - SQLi to Read Data from PostgresDB</h4>
<ol>
<li>Steps 1 and 2 are the same as PoC 1.</li>
<li>Modify the intercepted "/admin/?action=save-news" request to look like the SS below and send the request:
 2.1 - Set the "authorEmail" field in the body to "<code>test'/*@[email.com](http://email.com/)</code>".
 2.2 - Set the "linkTitle" field in the body to "<code>*/,1,1,1,1,1,1,1);SELECT+remember_me+FROM+faquser+limit+1+offset+1%3b--</code>".
<img alt="image (1)" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/131a6b5f-cfbf-4d94-9851-73f4d9e1605a"></li>
</ol>
<h4 id="poc-3---sqli-to-read-files-from-postgresdb">PoC 3 - SQLi to Read Files from PostgresDB</h4>
<ol>
<li>Steps 1 and 2 are the same as PoC 1.</li>
<li>Modify the intercepted "/admin/?action=save-news" request to look like the SS below and send the request:
 2.1 - Set the "authorEmail" field in the body to "<code>test'/*@[email.com](http://email.com/)</code>".
 2.2 - Set the "linkTitle" field in the body to "<code>*/,1,1,1,1,1,(select+pg_read_file(CONCAT(CHR(67),CHR(58),CHR(92),CHR(87),CHR(105),CHR(110),CHR(100),CHR(111),CHR(119),CHR(115),CHR(92),CHR(119),CHR(105),CHR(110),CHR(46),CHR(105),CHR(110),CHR(105)))),1)--</code>". (<em>the CONCAT() and CHR() functions are used to bypass the escaping of single quotes, these characters in its decoded form is "select pg_read_file('C:\Windows\win.ini')"</em>)
<img alt="image (2)" src="https://github.com/thorsten/phpMyFAQ/assets/63487456/61857d4c-4eab-43e3-87fa-20eefe6553e5"></li>
</ol>
<h4 id="poc-4---sqli-to-shell">PoC 4 - SQLi to Shell</h4>
<p>It is also possible to obtain a shell if superuser is enabled on the postgres DB. These are the high level steps of the exploit chain:</p>
<ol>
<li>Create a table called "cmd_exec" to store the payload.</li>
<li>Create a function in postgres to store the command to write a web shell to the "../htdocs" directory. (This step is required as CONCAT() function cannot be used to bypass the step where; "COPY cmd_exec FROM PROGRAM '' " is run as it requires single quotes.)</li>
<li>Trigger the function to write the PHP web shell at "<code>http://&lt;URL&gt;/shell.php</code>" that takes in commands via the "?cmd=" parameter.</li>
<li>Send the Python reverse shell command via a GET request to launch the reverse shell.</li>
</ol>
<p>The video demo and the Python PoC script can be accessed from this link: <a href="https://drive.google.com/drive/folders/1BFL8GHIBxSUxu0TneYf66KjFA0A4RZga?usp=sharing">https://drive.google.com/drive/folders/1BFL8GHIBxSUxu0TneYf66KjFA0A4RZga?usp=sharing</a></p>
<h3 id="impact">Impact</h3>
<p>The SQL injection vulnerability discovered in the "Add News" functionality of the application allows authenticated users with appropriate privileges to execute malicious SQL queries, potentially leading to data exfiltration, account takeover, and even remote code execution. Attackers can exploit the vulnerability to read sensitive data from the database, such as user credentials and system files, compromising the confidentiality and integrity of the system. Moreover, successful exploitation may enable attackers to gain unauthorized access to user accounts or execute arbitrary commands on the server, impacting both system administrators and end users.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-qgxx-4xv5-6hcw">https://github.com/thorsten/phpMyFAQ/security/advisories/GHSA-qgxx-4xv5-6hcw</a></li>
<li><a href="https://github.com/thorsten/phpMyFAQ/commit/1b68a5f89fb65996c56285fa636b818de8608011">https://github.com/thorsten/phpMyFAQ/commit/1b68a5f89fb65996c56285fa636b818de8608011</a></li>
<li><a href="https://drive.google.com/drive/folders/1BFL8GHIBxSUxu0TneYf66KjFA0A4RZga?usp=sharing">https://drive.google.com/drive/folders/1BFL8GHIBxSUxu0TneYf66KjFA0A4RZga?usp=sharing</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-27299">https://nvd.nist.gov/vuln/detail/CVE-2024-27299</a></li>
<li><a href="https://github.com/advisories/GHSA-qgxx-4xv5-6hcw">https://github.com/advisories/GHSA-qgxx-4xv5-6hcw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qgxx-4xv5-6hcw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:44:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oro/customer-portal] Storefront user can access history and most viewed data from matching back-office user with the same ID]]></title>
        <id>https://github.com/advisories/GHSA-v7px-46v9-5qwp</id>
        <link href="https://github.com/advisories/GHSA-v7px-46v9-5qwp"/>
        <updated>2024-03-25T22:27:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Navigation history, most viewed and favorite navigation items are returned to storefront user in JSON navigation response if ID of storefront user matches ID of back-office user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp">https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp</a></li>
<li><a href="https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8">https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48296">https://nvd.nist.gov/vuln/detail/CVE-2023-48296</a></li>
<li><a href="https://github.com/advisories/GHSA-v7px-46v9-5qwp">https://github.com/advisories/GHSA-v7px-46v9-5qwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v7px-46v9-5qwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:43:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oro/customer-portal] Storefront user can access history and most viewed data from matching back-office user with the same ID]]></title>
        <id>https://github.com/advisories/GHSA-v7px-46v9-5qwp</id>
        <link href="https://github.com/advisories/GHSA-v7px-46v9-5qwp"/>
        <updated>2024-03-25T22:27:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Navigation history, most viewed and favorite navigation items are returned to storefront user in JSON navigation response if ID of storefront user matches ID of back-office user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp">https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp</a></li>
<li><a href="https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8">https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48296">https://nvd.nist.gov/vuln/detail/CVE-2023-48296</a></li>
<li><a href="https://github.com/advisories/GHSA-v7px-46v9-5qwp">https://github.com/advisories/GHSA-v7px-46v9-5qwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v7px-46v9-5qwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:43:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oro/customer-portal] Storefront user can access history and most viewed data from matching back-office user with the same ID]]></title>
        <id>https://github.com/advisories/GHSA-v7px-46v9-5qwp</id>
        <link href="https://github.com/advisories/GHSA-v7px-46v9-5qwp"/>
        <updated>2024-03-25T22:27:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Navigation history, most viewed and favorite navigation items are returned to storefront user in JSON navigation response if ID of storefront user matches ID of back-office user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp">https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp</a></li>
<li><a href="https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8">https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48296">https://nvd.nist.gov/vuln/detail/CVE-2023-48296</a></li>
<li><a href="https://github.com/advisories/GHSA-v7px-46v9-5qwp">https://github.com/advisories/GHSA-v7px-46v9-5qwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v7px-46v9-5qwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:43:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oro/customer-portal] Storefront user can access history and most viewed data from matching back-office user with the same ID]]></title>
        <id>https://github.com/advisories/GHSA-v7px-46v9-5qwp</id>
        <link href="https://github.com/advisories/GHSA-v7px-46v9-5qwp"/>
        <updated>2024-03-25T22:27:53.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Navigation history, most viewed and favorite navigation items are returned to storefront user in JSON navigation response if ID of storefront user matches ID of back-office user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp">https://github.com/oroinc/orocommerce/security/advisories/GHSA-v7px-46v9-5qwp</a></li>
<li><a href="https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8">https://github.com/oroinc/orocommerce/commit/41c526498012d44cd88852c63697f1ef53b61db8</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-48296">https://nvd.nist.gov/vuln/detail/CVE-2023-48296</a></li>
<li><a href="https://github.com/advisories/GHSA-v7px-46v9-5qwp">https://github.com/advisories/GHSA-v7px-46v9-5qwp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v7px-46v9-5qwp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:43:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[johnbillion/wp-crontrol] WP Crontrol vulnerable to possible RCE when combined with a pre-condition]]></title>
        <id>https://github.com/advisories/GHSA-9xvf-cjvf-ff5q</id>
        <link href="https://github.com/advisories/GHSA-9xvf-cjvf-ff5q"/>
        <updated>2024-03-25T19:41:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>WP Crontrol includes a feature that allows administrative users to create events in the WP-Cron system that store and execute PHP code <a href="https://wp-crontrol.com/docs/php-cron-events/">subject to the restrictive security permissions documented here</a>. While there is <em>no known vulnerability in this feature on its own</em>, there exists potential for this feature to be vulnerable to RCE if it were specifically targeted via vulnerability chaining that exploited a separate SQLi (or similar) vulnerability.</p>
<p>This is exploitable on a site if one of the below preconditions are met:</p>
<ul>
<li>The site is vulnerable to a writeable SQLi vulnerability in any plugin, theme, or WordPress core</li>
<li>The site's database is compromised at the hosting level</li>
<li>The site is vulnerable to a method of updating arbitrary options in the <code>wp_options</code> table</li>
<li>The site is vulnerable to a method of triggering an arbitrary action, filter, or function with control of the parameters</li>
</ul>
<h3 id="patches">Patches</h3>
<p>As a hardening measure, WP Crontrol version 1.16.2 ships with a new feature that prevents tampering of the code stored in a PHP cron event.</p>
<p>All PHP cron events are now secured via an integrity check that makes use of an HMAC to store a hash of the code alongside it when the event is saved. When the event runs, the hash is verified to ensure the code has not been tampered with. WP Crontrol will not execute the PHP code if the hash cannot be verified or if a stored hash is not present. If an attacker with database-level access were to modify the code in an event in an attempt to execute arbitrary code, the code would no longer execute.</p>
<p>Any PHP cron events that exist in the database prior to updating to version 1.16.2 will cease to execute until an administrative user re-saves them from the Cron Events screen in the admin area. A notice will be shown in the admin area informing administrative users if this is the case.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Given that one or more of the preconditions listed above are met, there are no known workarounds for this issue other than to update WP Crontrol to version 1.16.2 or later.</p>
<p>Note that neither the <code>DISALLOW_FILE_MODS</code> constant nor the <code>DISALLOW_FILE_EDIT</code> constant prevent this from being exploitable because these constants do not prevent PHP cron events from being <em>executed</em>. It's an intended feature of WP Crontrol that PHP cron events in the database will continue to run according to their schedule even if editing PHP cron events is disabled due to one of these constants being defined.</p>
<h3 id="faq">FAQ</h3>
<h4 id="is-my-site-at-risk">Is my site at risk?</h4>
<p>Your site is only at risk if at least one of the preconditions listed above are met and an attacker is actively attacking your site in order to exploit this. There is no known vulnerability in this feature on its own.</p>
<h4 id="why-is-this-classified-as-high-severity">Why is this classified as high severity?</h4>
<p>The CVSS score is used to classify the severity of a vulnerability in isolation, which in this case is high due to the possibility of RCE. The actual risk is likely to be low and is dependent entirely on one of the preconditions being met.</p>
<h4 id="how-is-this-any-different-to-an-sqli-vulnerability-that-would-allow-an-attacker-to-create-an-administrator-user-and-then-access-the-theme-or-plugin-editor">How is this any different to an SQLi vulnerability that would allow an attacker to create an Administrator user and then access the theme or plugin editor?</h4>
<p>The difference is in the handling of the <code>DISALLOW_FILE_MODS</code> and <code>DISALLOW_FILE_EDIT</code> constants. With either one of these constants defined in your wp-config.php file then the plugin and theme editors are disabled. In WP Crontrol the ability to <em>edit</em> PHP cron events in WP Crontrol is also disabled in this case, however PHP cron events in the database will continue to run according to their schedule.</p>
<h3 id="thanks">Thanks</h3>
<p>This issue was identified by John Blackbourn, the author of the WP Crontrol plugin.</p>
<p>Thanks go to:</p>
<ul>
<li>Calvin Alkan for researching and reporting many vulnerabilities in WordPress plugins and for <a href="https://snicco.io/vulnerability-disclosure">publishing the details on the snicco blog</a>. Calvin's work prompted me to investigate whether the PHP cron event functionality in WP Crontrol could be exploited when attacked via with vulnerability chaining, and he collaborated on this security advisory.</li>
<li>Joe Hoyle for collaborating on this advisory.</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/johnbillion/wp-crontrol/security/advisories/GHSA-9xvf-cjvf-ff5q">https://github.com/johnbillion/wp-crontrol/security/advisories/GHSA-9xvf-cjvf-ff5q</a></li>
<li><a href="https://github.com/johnbillion/wp-crontrol/commit/6d1fadcf6dfdd54e55feef27f916b0cfcd602405">https://github.com/johnbillion/wp-crontrol/commit/6d1fadcf6dfdd54e55feef27f916b0cfcd602405</a></li>
<li><a href="https://github.com/johnbillion/wp-crontrol/releases/tag/1.16.2">https://github.com/johnbillion/wp-crontrol/releases/tag/1.16.2</a></li>
<li><a href="https://snicco.io/vulnerability-disclosure">https://snicco.io/vulnerability-disclosure</a></li>
<li><a href="https://wp-crontrol.com/docs/php-cron-events">https://wp-crontrol.com/docs/php-cron-events</a></li>
<li><a href="https://wp-crontrol.com/help/check-php-cron-events">https://wp-crontrol.com/help/check-php-cron-events</a></li>
<li><a href="https://github.com/advisories/GHSA-9xvf-cjvf-ff5q">https://github.com/advisories/GHSA-9xvf-cjvf-ff5q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9xvf-cjvf-ff5q</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-03-25T19:41:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[oro/platform] Pinned entity creation form shows wrong data]]></title>
        <id>https://github.com/advisories/GHSA-vxq2-p937-3px3</id>
        <link href="https://github.com/advisories/GHSA-vxq2-p937-3px3"/>
        <updated>2024-03-25T22:25:06.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Logged in user can access page state data of pinned pages of other users by pageId hash.</p>
<h3 id="patch">Patch</h3>
<pre><code class="language-patch">--- src/Oro/Bundle/NavigationBundle/Controller/Api/PagestateController.php
+++ src/Oro/Bundle/NavigationBundle/Controller/Api/PagestateController.php
@@ -158,6 +158,13 @@
             AbstractPageState::generateHash($this-&gt;get('request_stack')-&gt;getCurrentRequest()-&gt;get('pageId'))
         );
 
+        if ($entity) {
+            $entity = $this-&gt;getEntity($entity-&gt;getId());
+        }
+        if (!$entity) {
+            return $this-&gt;handleNotFound();
+        }
+
         return $this-&gt;handleView($this-&gt;view($this-&gt;getState($entity), Response::HTTP_OK));
     }
 
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/oroinc/platform/security/advisories/GHSA-vxq2-p937-3px3">https://github.com/oroinc/platform/security/advisories/GHSA-vxq2-p937-3px3</a></li>
<li><a href="https://github.com/oroinc/platform/commit/cf94df7595afca052796e26b299d2ce031e289cd">https://github.com/oroinc/platform/commit/cf94df7595afca052796e26b299d2ce031e289cd</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-45824">https://nvd.nist.gov/vuln/detail/CVE-2023-45824</a></li>
<li><a href="https://github.com/advisories/GHSA-vxq2-p937-3px3">https://github.com/advisories/GHSA-vxq2-p937-3px3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vxq2-p937-3px3</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-03-25T19:39:21.000Z</published>
    </entry>
</feed>