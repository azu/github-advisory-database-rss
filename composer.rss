<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-05-30T14:01:12.478Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Privilege Escalation and SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-45wj-jv2h-jwrf</id>
        <link href="https://github.com/advisories/GHSA-45wj-jv2h-jwrf"/>
        <updated>2024-05-30T13:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>Failing to properly dissociate system related configuration from user generated configuration, the Form Framework (system extension "form") is vulnerable to SQL injection and Privilege Escalation. Basically instructions can be persisted to a form definition file that were not configured to be modified - this applies to definitions managed using the form editor module as well as direct file upload using the regular file list module. A valid backend user account as well as having system extension form activated are needed in order to exploit this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TYPO3-CMS/core/commit/5e3ed52854ea8192f1c0e2ef30f434e74ba6d253">https://github.com/TYPO3-CMS/core/commit/5e3ed52854ea8192f1c0e2ef30f434e74ba6d253</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/a0a6271dc8f715b5b6859771333d57925dfb63bc">https://github.com/TYPO3-CMS/core/commit/a0a6271dc8f715b5b6859771333d57925dfb63bc</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/e70d7c66110a0919b39bccdfdc73cbfd7f504dfc">https://github.com/TYPO3-CMS/core/commit/e70d7c66110a0919b39bccdfdc73cbfd7f504dfc</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/eddc7635fb3447f0fb69831855f4095de8e12350">https://github.com/TYPO3-CMS/core/commit/eddc7635fb3447f0fb69831855f4095de8e12350</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-3.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-3.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-003">https://typo3.org/security/advisory/typo3-core-sa-2018-003</a></li>
<li><a href="https://github.com/advisories/GHSA-45wj-jv2h-jwrf">https://github.com/advisories/GHSA-45wj-jv2h-jwrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45wj-jv2h-jwrf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:57:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Privilege Escalation and SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-45wj-jv2h-jwrf</id>
        <link href="https://github.com/advisories/GHSA-45wj-jv2h-jwrf"/>
        <updated>2024-05-30T13:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>Failing to properly dissociate system related configuration from user generated configuration, the Form Framework (system extension "form") is vulnerable to SQL injection and Privilege Escalation. Basically instructions can be persisted to a form definition file that were not configured to be modified - this applies to definitions managed using the form editor module as well as direct file upload using the regular file list module. A valid backend user account as well as having system extension form activated are needed in order to exploit this vulnerability.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TYPO3-CMS/core/commit/5e3ed52854ea8192f1c0e2ef30f434e74ba6d253">https://github.com/TYPO3-CMS/core/commit/5e3ed52854ea8192f1c0e2ef30f434e74ba6d253</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/a0a6271dc8f715b5b6859771333d57925dfb63bc">https://github.com/TYPO3-CMS/core/commit/a0a6271dc8f715b5b6859771333d57925dfb63bc</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/e70d7c66110a0919b39bccdfdc73cbfd7f504dfc">https://github.com/TYPO3-CMS/core/commit/e70d7c66110a0919b39bccdfdc73cbfd7f504dfc</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/eddc7635fb3447f0fb69831855f4095de8e12350">https://github.com/TYPO3-CMS/core/commit/eddc7635fb3447f0fb69831855f4095de8e12350</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-3.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-3.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-003">https://typo3.org/security/advisory/typo3-core-sa-2018-003</a></li>
<li><a href="https://github.com/advisories/GHSA-45wj-jv2h-jwrf">https://github.com/advisories/GHSA-45wj-jv2h-jwrf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-45wj-jv2h-jwrf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:57:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Insecure Deserialization & Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-cc97-g92w-jm65</id>
        <link href="https://github.com/advisories/GHSA-cc97-g92w-jm65"/>
        <updated>2024-05-30T13:52:10.000Z</updated>
        <content type="html"><![CDATA[<p>Phar files (formerly known as "PHP archives") can act als self extracting archives which leads to the fact that source code is executed when Phar files are invoked. The Phar file format is not limited to be stored with a dedicated file extension - "bundle.phar" would be valid as well as "bundle.txt" would be. This way, Phar files can be obfuscated as image or text file which would not be denied from being uploaded and persisted to a TYPO3 installation. Due to a missing sanitization of user input, those Phar files can be invoked by manipulated URLs in TYPO3 backend forms. A valid backend user account is needed to exploit this vulnerability. In theory the attack vector would be possible in the TYPO3 frontend as well, however no functional exploit has been identified so far.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16">https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45">https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981">https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778">https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-002">https://typo3.org/security/advisory/typo3-core-sa-2018-002</a></li>
<li><a href="https://github.com/advisories/GHSA-cc97-g92w-jm65">https://github.com/advisories/GHSA-cc97-g92w-jm65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc97-g92w-jm65</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T13:52:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Insecure Deserialization & Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-cc97-g92w-jm65</id>
        <link href="https://github.com/advisories/GHSA-cc97-g92w-jm65"/>
        <updated>2024-05-30T13:52:10.000Z</updated>
        <content type="html"><![CDATA[<p>Phar files (formerly known as "PHP archives") can act als self extracting archives which leads to the fact that source code is executed when Phar files are invoked. The Phar file format is not limited to be stored with a dedicated file extension - "bundle.phar" would be valid as well as "bundle.txt" would be. This way, Phar files can be obfuscated as image or text file which would not be denied from being uploaded and persisted to a TYPO3 installation. Due to a missing sanitization of user input, those Phar files can be invoked by manipulated URLs in TYPO3 backend forms. A valid backend user account is needed to exploit this vulnerability. In theory the attack vector would be possible in the TYPO3 frontend as well, however no functional exploit has been identified so far.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16">https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45">https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981">https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778">https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-002">https://typo3.org/security/advisory/typo3-core-sa-2018-002</a></li>
<li><a href="https://github.com/advisories/GHSA-cc97-g92w-jm65">https://github.com/advisories/GHSA-cc97-g92w-jm65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc97-g92w-jm65</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T13:52:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Insecure Deserialization & Arbitrary Code Execution]]></title>
        <id>https://github.com/advisories/GHSA-cc97-g92w-jm65</id>
        <link href="https://github.com/advisories/GHSA-cc97-g92w-jm65"/>
        <updated>2024-05-30T13:52:10.000Z</updated>
        <content type="html"><![CDATA[<p>Phar files (formerly known as "PHP archives") can act als self extracting archives which leads to the fact that source code is executed when Phar files are invoked. The Phar file format is not limited to be stored with a dedicated file extension - "bundle.phar" would be valid as well as "bundle.txt" would be. This way, Phar files can be obfuscated as image or text file which would not be denied from being uploaded and persisted to a TYPO3 installation. Due to a missing sanitization of user input, those Phar files can be invoked by manipulated URLs in TYPO3 backend forms. A valid backend user account is needed to exploit this vulnerability. In theory the attack vector would be possible in the TYPO3 frontend as well, however no functional exploit has been identified so far.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16">https://github.com/TYPO3-CMS/core/commit/81c6e9e6e49ee4f924bd340fb007d271fa44aa16</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45">https://github.com/TYPO3-CMS/core/commit/854d03841b42123ab744c2591199b76ce65a8e45</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981">https://github.com/TYPO3-CMS/core/commit/aa4e270d04313fe7d8ea508a9c694db83875e981</a></li>
<li><a href="https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778">https://github.com/TYPO3-CMS/core/commit/dd0487bd8b4ec7204dbfff2b5812d797102a1778</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-2.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-002">https://typo3.org/security/advisory/typo3-core-sa-2018-002</a></li>
<li><a href="https://github.com/advisories/GHSA-cc97-g92w-jm65">https://github.com/advisories/GHSA-cc97-g92w-jm65</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc97-g92w-jm65</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T13:52:08.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Authentication Bypass vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</id>
        <link href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3"/>
        <updated>2024-05-30T13:49:18.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that TYPO3’s Salted Password system extension (which is a mandatory system component) is vulnerable to Authentication Bypass when using hashing methods which are related by PHP class inheritance. In standard TYPO3 core distributions stored passwords using the blowfish hashing algorithm can be overridden when using MD5 as the default hashing algorithm by just knowing a valid username. Per default the Portable PHP hashing algorithm (PHPass) is used which is not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-001">https://typo3.org/security/advisory/typo3-core-sa-2018-001</a></li>
<li><a href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3">https://github.com/advisories/GHSA-x4rj-f7m6-42c3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:49:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Authentication Bypass vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</id>
        <link href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3"/>
        <updated>2024-05-30T13:49:18.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that TYPO3’s Salted Password system extension (which is a mandatory system component) is vulnerable to Authentication Bypass when using hashing methods which are related by PHP class inheritance. In standard TYPO3 core distributions stored passwords using the blowfish hashing algorithm can be overridden when using MD5 as the default hashing algorithm by just knowing a valid username. Per default the Portable PHP hashing algorithm (PHPass) is used which is not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-001">https://typo3.org/security/advisory/typo3-core-sa-2018-001</a></li>
<li><a href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3">https://github.com/advisories/GHSA-x4rj-f7m6-42c3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:49:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms-core] TYPO3 CMS Authentication Bypass vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</id>
        <link href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3"/>
        <updated>2024-05-30T13:49:18.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that TYPO3’s Salted Password system extension (which is a mandatory system component) is vulnerable to Authentication Bypass when using hashing methods which are related by PHP class inheritance. In standard TYPO3 core distributions stored passwords using the blowfish hashing algorithm can be overridden when using MD5 as the default hashing algorithm by just knowing a valid username. Per default the Portable PHP hashing algorithm (PHPass) is used which is not vulnerable.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/2018-07-12-1.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2018-001">https://typo3.org/security/advisory/typo3-core-sa-2018-001</a></li>
<li><a href="https://github.com/advisories/GHSA-x4rj-f7m6-42c3">https://github.com/advisories/GHSA-x4rj-f7m6-42c3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x4rj-f7m6-42c3</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:49:16.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[twig/twig] Twig Path Traversal vulnerability in the filesystem loader]]></title>
        <id>https://github.com/advisories/GHSA-7cvr-xhm5-x998</id>
        <link href="https://github.com/advisories/GHSA-7cvr-xhm5-x998"/>
        <updated>2024-05-30T13:42:52.000Z</updated>
        <content type="html"><![CDATA[<p>Twig is affected by path traversal vulnerability when used with Twig_Loader_Filesystem for loading Twig templates but only if the application is using non-trusted template names (names provided by a end-user for instance).</p>
<p>When affected, it is possible to go up one directory for the paths configured in the application's loader.</p>
<p>For instance, if the filesystem loader is configured with /path/to/templates as a path to look for templates, an attacker can force Twig to include a file stored in /path/to by prepending the path with /../ like in {% include "/../somefile_in_path_to" %}</p>
<p>Note that using anything else (like ../somefile, /../../somefile, or ../../somefile) won’t work and the application will return a proper exception.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/fabpot/Twig/commit/3d19a2eed53570776af313593aaeb5ad62cf4980.diff">https://github.com/fabpot/Twig/commit/3d19a2eed53570776af313593aaeb5ad62cf4980.diff</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/2013-04-08.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/twig/twig/2013-04-08.yaml</a></li>
<li><a href="https://web.archive.org/web/20130511111630/http://blog.twig.sensiolabs.org/post/47461911874/security-release-twig-1-12-3-released">https://web.archive.org/web/20130511111630/http://blog.twig.sensiolabs.org/post/47461911874/security-release-twig-1-12-3-released</a></li>
<li><a href="https://github.com/advisories/GHSA-7cvr-xhm5-x998">https://github.com/advisories/GHSA-7cvr-xhm5-x998</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7cvr-xhm5-x998</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T13:42:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[titon/framework] titon/framework vulnerable to Remote Code Execution via Chosen-Ciphertext Attack]]></title>
        <id>https://github.com/advisories/GHSA-q3jm-v27q-jfww</id>
        <link href="https://github.com/advisories/GHSA-q3jm-v27q-jfww"/>
        <updated>2024-05-30T13:41:37.000Z</updated>
        <content type="html"><![CDATA[<p>titon/framework package (which is now abandoned and no longer maintained) is vulnerable to remote code execution via Chosen-Ciphertext Attack.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/titon/framework/issues/93">https://github.com/titon/framework/issues/93</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/titon/framework/2017-11-20.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/titon/framework/2017-11-20.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-q3jm-v27q-jfww">https://github.com/advisories/GHSA-q3jm-v27q-jfww</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q3jm-v27q-jfww</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T13:41:36.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[thelia/thelia] Thelia authentication bypass vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-g8pg-33v4-9r96</id>
        <link href="https://github.com/advisories/GHSA-g8pg-33v4-9r96"/>
        <updated>2024-05-30T13:26:49.000Z</updated>
        <content type="html"><![CDATA[<p>An authentication bypass was identifed in thelia/thelia project for customer and admin. This vulnerability is present from version 2.1.0-beta1 and is fixed in 2.1.3 and 2.2.0-alpha1. </p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thelia/thelia/commit/028cfcf507cd8685772e156ec0c860034d407094">https://github.com/thelia/thelia/commit/028cfcf507cd8685772e156ec0c860034d407094</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/thelia/2015-04-13-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/thelia/2015-04-13-1.yaml</a></li>
<li><a href="https://web.archive.org/web/20160502224630/http://thelia.net/version-2-1-3-with-security-fix">https://web.archive.org/web/20160502224630/http://thelia.net/version-2-1-3-with-security-fix</a></li>
<li><a href="https://github.com/advisories/GHSA-g8pg-33v4-9r96">https://github.com/advisories/GHSA-g8pg-33v4-9r96</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g8pg-33v4-9r96</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:26:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[thelia/backoffice-default-template] Thelia BackOffice default template vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-pp7v-wxx9-hm6r</id>
        <link href="https://github.com/advisories/GHSA-pp7v-wxx9-hm6r"/>
        <updated>2024-05-30T13:21:21.000Z</updated>
        <content type="html"><![CDATA[<p>The BackOffice of Thelia (<code>error.html</code> template) has a cross-site scripting vulnerability in version 2.1.0 and 2.1.1 but not version 2.0.X. Version 2.1.2 contains a patch for the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thelia-templates/back/commit/592612899057addc2613ccddf172024588277d2d">https://github.com/thelia-templates/back/commit/592612899057addc2613ccddf172024588277d2d</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/backoffice-default-template/2015-02-24-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/backoffice-default-template/2015-02-24-1.yaml</a></li>
<li><a href="https://thelia.net/version-2-1-2-with-security-fix">https://thelia.net/version-2-1-2-with-security-fix</a></li>
<li><a href="https://web.archive.org/web/20160406004324/http://thelia.net/version-2-1-2-with-security-fix">https://web.archive.org/web/20160406004324/http://thelia.net/version-2-1-2-with-security-fix</a></li>
<li><a href="https://github.com/advisories/GHSA-pp7v-wxx9-hm6r">https://github.com/advisories/GHSA-pp7v-wxx9-hm6r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-pp7v-wxx9-hm6r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T13:21:20.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[thelia/thelia] Thelia Cross-site Scripting vulnerability in BackOffice]]></title>
        <id>https://github.com/advisories/GHSA-vq4j-qcx7-ppc6</id>
        <link href="https://github.com/advisories/GHSA-vq4j-qcx7-ppc6"/>
        <updated>2024-05-30T13:17:48.000Z</updated>
        <content type="html"><![CDATA[<p>The BackOffice of Thelia (<code>error.html</code> template) has a cross-site scripting vulnerability in version 2.1.0 and 2.1.1 but not version 2.0.X. Version 2.1.2 contains a patch for the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/thelia/thelia/commit/e7c9c3be1d580067cba102f1f9530baf067c1e5d">https://github.com/thelia/thelia/commit/e7c9c3be1d580067cba102f1f9530baf067c1e5d</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/thelia/2015-02-24-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/thelia/thelia/2015-02-24-1.yaml</a></li>
<li><a href="https://web.archive.org/web/20160406004324/http://thelia.net/version-2-1-2-with-security-fix">https://web.archive.org/web/20160406004324/http://thelia.net/version-2-1-2-with-security-fix</a></li>
<li><a href="https://github.com/advisories/GHSA-vq4j-qcx7-ppc6">https://github.com/advisories/GHSA-vq4j-qcx7-ppc6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vq4j-qcx7-ppc6</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-05-30T13:17:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[terminal42/contao-tablelookupwizard] terminal42/contao-tablelookupwizard possible SQL injection in widget field value]]></title>
        <id>https://github.com/advisories/GHSA-7fpj-wc8v-9cgc</id>
        <link href="https://github.com/advisories/GHSA-7fpj-wc8v-9cgc"/>
        <updated>2024-05-30T13:12:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="impact">Impact</h2>
<p>The currently selected widget values were not correctly sanitized before passing it to the database, leading to an SQL injection possibility.</p>
<h2 id="patches">Patches</h2>
<p>The issue has been patched in tablelookupwizard version 3.3.5 and version 4.0.0.</p>
<h2 id="for-more-information">For more information</h2>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="https://github.com/terminal42/contao-tablelookupwizard">https://github.com/terminal42/contao-tablelookupwizard</a></li>
<li>Email us at <a href="mailto:info@terminal42.ch">info@terminal42.ch</a></li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/terminal42/contao-tablelookupwizard/security/advisories/GHSA-v3mr-gp7j-pw5w">https://github.com/terminal42/contao-tablelookupwizard/security/advisories/GHSA-v3mr-gp7j-pw5w</a></li>
<li><a href="https://github.com/terminal42/contao-tablelookupwizard/commit/a5e723a28f110b7df8ffc4175cef9b061d3cc717">https://github.com/terminal42/contao-tablelookupwizard/commit/a5e723a28f110b7df8ffc4175cef9b061d3cc717</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/terminal42/contao-tablelookupwizard/2022-02-04-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/terminal42/contao-tablelookupwizard/2022-02-04-1.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-7fpj-wc8v-9cgc">https://github.com/advisories/GHSA-7fpj-wc8v-9cgc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7fpj-wc8v-9cgc</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-05-30T13:12:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/validator] symfony/validator XML Entity Expansion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-4vf2-qfg3-7598</id>
        <link href="https://github.com/advisories/GHSA-4vf2-qfg3-7598"/>
        <updated>2024-05-30T13:10:54.000Z</updated>
        <content type="html"><![CDATA[<p>Symfony 2.0.11 carried a [similar] XXE security fix, however, on review of ZF2 I also noted a vulnerability to XML Entity Expansion (XEE) attacks whereby all extensions making use of libxml2 have no defense against XEE Quadratic Blowup Attacks. The vulnerability is a function of there being no current method of disabling custom entities in PHP (i.e. defined internal to the XML document without using external entities). In a QBA, a long entity can be defined and then referred to multiple times in document elements, creating a memory sink with which Denial Of Service attacks against a host's RAM can be mounted. The use of the LIBXML_NOENT or equivalent option in a dependent extension amplified the impact (it doesn't actually mean "No Entities"). In addition, libxml2's innate defense against the related Exponential or Billion Laugh's XEE attacks is active only so long as the LIBXML_PARSEHUGE is NOT set (it disables libxml2's hardcoded entity recursion limit). No instances of these two options were noted, but it's worth referencing for the future.</p>
<p>Consider this (non-fatal) example:</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE data [&lt;!ENTITY a
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&gt;]&gt;
&lt;data&gt;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&lt;/data&gt;
</code></pre>
<p>Increase the length of entity, and entity count to a few hundred, and peak memory usage will waste no time spiking the moment the nodeValue for is accessed since the entities will then be expanded by a simple multiplier effect. No external entities required.</p>
<p>...</p>
<p>This can be used in combination with the usual XXE defense of calling libxml_disable_entity_loader(TRUE) and, optionally, the LIBXML_NONET option (should local filesystem access be allowable). The DOCTYPE may be removed instead of rejecting the XML outright but this would likely result in other problems with the unresolved entities. "</p>
<p>If you cannot upgrade to the latest Symfony version, you can also apply this <a href="https://github.com/symfony/symfony/compare/352e8f583c87c709de197bb16c4053d2e87fd4cd...5bf4f92e86c34690d71e8f94350ec975909a435b.diff">patch</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/validator/commit/b5a30be97ac47181fa5c420bc70a924dff71a5c0">https://github.com/symfony/validator/commit/b5a30be97ac47181fa5c420bc70a924dff71a5c0</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/2012-08-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/2012-08-28.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-17-released">https://symfony.com/blog/security-release-symfony-2-0-17-released</a></li>
<li><a href="https://github.com/advisories/GHSA-4vf2-qfg3-7598">https://github.com/advisories/GHSA-4vf2-qfg3-7598</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4vf2-qfg3-7598</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:10:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/translation] symfony/translation XML Entity Expansion vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-f75p-x5vm-83qp</id>
        <link href="https://github.com/advisories/GHSA-f75p-x5vm-83qp"/>
        <updated>2024-05-30T13:02:44.000Z</updated>
        <content type="html"><![CDATA[<p>Symfony 2.0.11 carried a [similar] XXE security fix, however, on review of ZF2 I also noted a vulnerability to XML Entity Expansion (XEE) attacks whereby all extensions making use of libxml2 have no defense against XEE Quadratic Blowup Attacks. The vulnerability is a function of there being no current method of disabling custom entities in PHP (i.e. defined internal to the XML document without using external entities). In a QBA, a long entity can be defined and then referred to multiple times in document elements, creating a memory sink with which Denial Of Service attacks against a host's RAM can be mounted. The use of the LIBXML_NOENT or equivalent option in a dependent extension amplified the impact (it doesn't actually mean "No Entities"). In addition, libxml2's innate defense against the related Exponential or Billion Laugh's XEE attacks is active only so long as the LIBXML_PARSEHUGE is NOT set (it disables libxml2's hardcoded entity recursion limit). No instances of these two options were noted, but it's worth referencing for the future.</p>
<p>Consider this (non-fatal) example:</p>
<pre><code>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE data [&lt;!ENTITY a
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"&gt;]&gt;
&lt;data&gt;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&lt;/data&gt;
</code></pre>
<p>Increase the length of entity, and entity count to a few hundred, and peak memory usage will waste no time spiking the moment the nodeValue for is accessed since the entities will then be expanded by a simple multiplier effect. No external entities required.</p>
<p>...</p>
<p>This can be used in combination with the usual XXE defense of calling libxml_disable_entity_loader(TRUE) and, optionally, the LIBXML_NONET option (should local filesystem access be allowable). The DOCTYPE may be removed instead of rejecting the XML outright but this would likely result in other problems with the unresolved entities. "</p>
<p>If you cannot upgrade to the latest Symfony version, you can also apply this <a href="https://github.com/symfony/symfony/compare/352e8f583c87c709de197bb16c4053d2e87fd4cd...5bf4f92e86c34690d71e8f94350ec975909a435b.diff">patch</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/translation/commit/178b3eba474a706f25473d38e23e74b048417c8d">https://github.com/symfony/translation/commit/178b3eba474a706f25473d38e23e74b048417c8d</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/translation/2012-08-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/translation/2012-08-28.yaml</a></li>
<li><a href="https://symfony.com/blog/security-release-symfony-2-0-17-released">https://symfony.com/blog/security-release-symfony-2-0-17-released</a></li>
<li><a href="https://github.com/advisories/GHSA-f75p-x5vm-83qp">https://github.com/advisories/GHSA-f75p-x5vm-83qp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-f75p-x5vm-83qp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:02:41.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/web-profiler-bundle] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony Cross-Site Request Forgery vulnerability in the Web Profiler]]></title>
        <id>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</id>
        <link href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw"/>
        <updated>2024-05-30T13:00:02.000Z</updated>
        <content type="html"><![CDATA[<p>All 2.0.X, 2.1.X, 2.2.X, 2.3.X, 2.4.X, and 2.5.X versions of the Symfony WebProfiler bundle are affected by this security issue.</p>
<p>This issue has been fixed in Symfony 2.3.19, 2.4.9, and 2.5.4. Note that no fixes are provided for Symfony 2.0, 2.1, and 2.2 as they are not maintained anymore.</p>
<h3 id="description">Description</h3>
<p>The Symfony Web Profiler is a great development tool, but it should not be enabled on production servers. If it is enabled in production, it must be properly secured so that only authorized people have access to it. Developers must be very cautious about this as the Web Profiler gives many sensitive information about a Symfony project and any attackers can exploit many of them. Just to name a few sensitive information: user logins, user cookies, executed SQL statements, ...</p>
<p>That being said, the import/export feature of the web profiler is exploitable even if the Web Profiler is secured as the form to import a profiler is not protected against CSRF attacks. Combined with the fact that profiles are imported as a PHP serialized string, it makes your application vulnerable to code injection.</p>
<h3 id="resolution">Resolution</h3>
<p>As the import/export feature of the Web Profiler is not that useful, and because PHP <code>serialize/unserialize</code> functions have a long history of vulnerabilities, I decided to remove this feature from the Web interface and move it as CLI commands.</p>
<p>If you were relying on this feature, you now need to use the <code>profiler:import</code> and <code>profiler:export</code> Symfony commands provided by the WebProfiler bundle from the command line interface.</p>
<p>Those commands are not enabled by default and must be activated explicitly. For Symfony 2.4+, you can import them in your <code>app/config.yml</code> configuration file:</p>
<pre><code>import:
   - { resource: "%kernel.root_dir%/../vendor/symfony/symfony/src/Symfony/Bundle/WebProfilerBundle/Resources/config/commands.xml" }
</code></pre>
<p>For Symfony 2.3, you can use the following snippet of code in <code>app/console</code>:</p>
<pre><code>$kernel = new AppKernel($env, $debug);
$application = new Application($kernel);
if ($kernel-&gt;getContainer()-&gt;has('profiler')) {
    $profiler = $kernel-&gt;getContainer()-&gt;get('profiler');
    $application-&gt;add(new ImportCommand($profiler));
    $application-&gt;add(new ExportCommand($profiler));
}
$application-&gt;run($input);
</code></pre>
<p>At this point, I want to reiterate that you should never enable the Symfony Web Profiler on your production servers as this is a development tool. And if you need to enable it, double-check that it is properly secured.</p>
<p>The patch for this issue is available here: <a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/symfony/symfony/pull/11832">https://github.com/symfony/symfony/pull/11832</a></li>
<li><a href="https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02">https://github.com/symfony/symfony/commit/f38536ab79058f6a934426c41170256ba9623a02</a></li>
<li><a href="https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36">https://github.com/symfony/web-profiler-bundle/commit/5b589ba83faf7eb20cec50725cd657075aebdd36</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2014-6072.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/web-profiler-bundle/CVE-2014-6072.yaml</a></li>
<li><a href="https://symfony.com/cve-2014-6072">https://symfony.com/cve-2014-6072</a></li>
<li><a href="https://github.com/advisories/GHSA-v35g-4rrw-h4fw">https://github.com/advisories/GHSA-v35g-4rrw-h4fw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v35g-4rrw-h4fw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-05-30T13:00:01.000Z</published>
    </entry>
</feed>