<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-02-07T19:01:10.619Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[simplesamlphp/simplesamlphp] SimpleSAMLphp XSS Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-fv7m-wc3v-wr3w</id>
        <link href="https://github.com/advisories/GHSA-fv7m-wc3v-wr3w"/>
        <updated>2024-02-07T18:57:07.000Z</updated>
        <content type="html"><![CDATA[<p>The consentAdmin module in SimpleSAMLphp through 1.14.15 is vulnerable to a Cross-Site Scripting attack, allowing an attacker to craft links that could execute arbitrary JavaScript code on the victim's web browser.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-18121">https://nvd.nist.gov/vuln/detail/CVE-2017-18121</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2018/02/msg00008.html">https://lists.debian.org/debian-lts-announce/2018/02/msg00008.html</a></li>
<li><a href="https://simplesamlphp.org/security/201709-01">https://simplesamlphp.org/security/201709-01</a></li>
<li><a href="https://www.debian.org/security/2018/dsa-4127">https://www.debian.org/security/2018/dsa-4127</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-fv7m-wc3v-wr3w">https://github.com/advisories/GHSA-fv7m-wc3v-wr3w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fv7m-wc3v-wr3w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:04:10.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[smarty/smarty] Smarty Path Traversal Vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-65j5-vpm7-6xp4</id>
        <link href="https://github.com/advisories/GHSA-65j5-vpm7-6xp4"/>
        <updated>2024-02-07T18:54:27.000Z</updated>
        <content type="html"><![CDATA[<p>Smarty before 3.1.33-dev-4 allows attackers to bypass the trusted_dir protection mechanism via a <code>file:./../</code> substring in an include statement.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2018-16831">https://nvd.nist.gov/vuln/detail/CVE-2018-16831</a></li>
<li><a href="https://github.com/smarty-php/smarty/issues/486">https://github.com/smarty-php/smarty/issues/486</a></li>
<li><a href="https://github.com/smarty-php/smarty/commit/f9ca3c63d1250bb56b2bda609dcc9dd81f0065f8">https://github.com/smarty-php/smarty/commit/f9ca3c63d1250bb56b2bda609dcc9dd81f0065f8</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/smarty/smarty/CVE-2018-16831.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/smarty/smarty/CVE-2018-16831.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-65j5-vpm7-6xp4">https://github.com/advisories/GHSA-65j5-vpm7-6xp4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-65j5-vpm7-6xp4</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-14T01:58:46.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony collectionCascaded and collectionCascadedDeeply fields security bypass]]></title>
        <id>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</id>
        <link href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5"/>
        <updated>2024-02-07T18:53:52.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Validator component, if <code>Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache</code> is enabled (or any other cache implementing <code>Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface</code>), some information is lost during serialization (the <code>collectionCascaded</code> and the <code>collectionCascadedDeeply</code> fields).</p>
<p>As a consequence, arrays or traversable objects stored in fields using the <code>@Valid</code> constraint are not traversed by the validator as soon as the validator configuration is loaded from the cache.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4751">https://nvd.nist.gov/vuln/detail/CVE-2013-4751</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/86364">https://exchange.xforce.ibmcloud.com/vulnerabilities/86364</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html</a></li>
<li><a href="http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709">https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml</a></li>
<li><a href="https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5">https://github.com/advisories/GHSA-q8j7-fjh7-25v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-05T00:28:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony collectionCascaded and collectionCascadedDeeply fields security bypass]]></title>
        <id>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</id>
        <link href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5"/>
        <updated>2024-02-07T18:53:52.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Validator component, if <code>Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache</code> is enabled (or any other cache implementing <code>Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface</code>), some information is lost during serialization (the <code>collectionCascaded</code> and the <code>collectionCascadedDeeply</code> fields).</p>
<p>As a consequence, arrays or traversable objects stored in fields using the <code>@Valid</code> constraint are not traversed by the validator as soon as the validator configuration is loaded from the cache.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4751">https://nvd.nist.gov/vuln/detail/CVE-2013-4751</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/86364">https://exchange.xforce.ibmcloud.com/vulnerabilities/86364</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html</a></li>
<li><a href="http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709">https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml</a></li>
<li><a href="https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5">https://github.com/advisories/GHSA-q8j7-fjh7-25v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-05T00:28:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony collectionCascaded and collectionCascadedDeeply fields security bypass]]></title>
        <id>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</id>
        <link href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5"/>
        <updated>2024-02-07T18:53:52.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Validator component, if <code>Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache</code> is enabled (or any other cache implementing <code>Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface</code>), some information is lost during serialization (the <code>collectionCascaded</code> and the <code>collectionCascadedDeeply</code> fields).</p>
<p>As a consequence, arrays or traversable objects stored in fields using the <code>@Valid</code> constraint are not traversed by the validator as soon as the validator configuration is loaded from the cache.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4751">https://nvd.nist.gov/vuln/detail/CVE-2013-4751</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/86364">https://exchange.xforce.ibmcloud.com/vulnerabilities/86364</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html</a></li>
<li><a href="http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709">https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml</a></li>
<li><a href="https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5">https://github.com/advisories/GHSA-q8j7-fjh7-25v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-05T00:28:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[symfony/symfony] Symfony collectionCascaded and collectionCascadedDeeply fields security bypass]]></title>
        <id>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</id>
        <link href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5"/>
        <updated>2024-02-07T18:53:52.000Z</updated>
        <content type="html"><![CDATA[<p>When using the Validator component, if <code>Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache</code> is enabled (or any other cache implementing <code>Symfony\\Component\\Validator\\Mapping\\Cache\\CacheInterface</code>), some information is lost during serialization (the <code>collectionCascaded</code> and the <code>collectionCascadedDeeply</code> fields).</p>
<p>As a consequence, arrays or traversable objects stored in fields using the <code>@Valid</code> constraint are not traversed by the validator as soon as the validator configuration is loaded from the cache.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-4751">https://nvd.nist.gov/vuln/detail/CVE-2013-4751</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-4751</a></li>
<li><a href="https://exchange.xforce.ibmcloud.com/vulnerabilities/86364">https://exchange.xforce.ibmcloud.com/vulnerabilities/86364</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114380.html</a></li>
<li><a href="http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html">http://lists.fedoraproject.org/pipermail/package-announce/2013-August/114436.html</a></li>
<li><a href="http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709">https://web.archive.org/web/20200228181137/http://www.securityfocus.com/bid/61709</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/symfony/CVE-2013-4751.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/validator/CVE-2013-4751.yaml</a></li>
<li><a href="https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released">https://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released</a></li>
<li><a href="https://github.com/advisories/GHSA-q8j7-fjh7-25v5">https://github.com/advisories/GHSA-q8j7-fjh7-25v5</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q8j7-fjh7-25v5</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-05T00:28:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[zendframework/zendframework1] Zend Framework Allows SQL Injection]]></title>
        <id>https://github.com/advisories/GHSA-p9hp-3gpv-52w3</id>
        <link href="https://github.com/advisories/GHSA-p9hp-3gpv-52w3"/>
        <updated>2024-02-07T18:53:07.000Z</updated>
        <content type="html"><![CDATA[<p>The (1) order and (2) group methods in Zend_Db_Select in the Zend Framework before 1.12.19 might allow remote attackers to conduct SQL injection attacks via vectors related to use of the character pattern <code>[\w]*</code> in a regular expression.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-6233">https://nvd.nist.gov/vuln/detail/CVE-2016-6233</a></li>
<li><a href="https://framework.zend.com/security/advisory/ZF2016-02">https://framework.zend.com/security/advisory/ZF2016-02</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2JUKFTI6ABK7ZN7IEAGPCLAHCFANMID2/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/2JUKFTI6ABK7ZN7IEAGPCLAHCFANMID2/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/N27AV6AL6B4KGEP3VIMIHQ5LFAKF5FTU/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/N27AV6AL6B4KGEP3VIMIHQ5LFAKF5FTU/</a></li>
<li><a href="https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UR5HXNGIUSSIZKMSZYMPBEPZEZTYFTIT/">https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UR5HXNGIUSSIZKMSZYMPBEPZEZTYFTIT/</a></li>
<li><a href="https://security.gentoo.org/glsa/201804-10">https://security.gentoo.org/glsa/201804-10</a></li>
<li><a href="https://web.archive.org/web/20210123152547/http://www.securityfocus.com/bid/91802">https://web.archive.org/web/20210123152547/http://www.securityfocus.com/bid/91802</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/CVE-2016-6233.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zendframework1/CVE-2016-6233.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-p9hp-3gpv-52w3">https://github.com/advisories/GHSA-p9hp-3gpv-52w3</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p9hp-3gpv-52w3</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2022-05-14T02:19:45.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[wp-cli/wp-cli] Improper Certificate Validation in WP-CLI framework]]></title>
        <id>https://github.com/advisories/GHSA-rwgm-f83r-v3qj</id>
        <link href="https://github.com/advisories/GHSA-rwgm-f83r-v3qj"/>
        <updated>2024-02-07T18:52:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>An improper error handling in HTTPS requests management in WP-CLI version 0.12.0 and later allows remote attackers able to intercept the communication to remotely disable the certificate verification on WP-CLI side, gaining full control over the communication content, including the ability to impersonate update servers and push malicious updates towards WordPress instances controlled by the vulnerable WP-CLI agent, or push malicious updates toward WP-CLI itself.</p>
<h3 id="patches">Patches</h3>
<p>The vulnerability stems from the fact that the default behavior of <code>WP_CLI\Utils\http_request()</code> when encountering a TLS handshake error is to disable certificate validation and retry the same request.</p>
<p>The default behavior has been changed with version 2.5.0 of WP-CLI and the <code>wp-cli/wp-cli</code> framework (via <a href="https://github.com/wp-cli/wp-cli/pull/5523">https://github.com/wp-cli/wp-cli/pull/5523</a>) so that the <code>WP_CLI\Utils\http_request()</code> method accepts an <code>$insecure</code> option that is <code>false</code> by default and consequently that a TLS handshake failure is a hard error by default. This new default is a breaking change and ripples through to all consumers of <code>WP_CLI\Utils\http_request()</code>, including those in separate WP-CLI bundled or third-party packages.</p>
<p><a href="https://github.com/wp-cli/wp-cli/pull/5523">https://github.com/wp-cli/wp-cli/pull/5523</a> has also added an <code>--insecure</code> flag to the <code>cli update</code> command to counter this breaking change.</p>
<p>Subsequent PRs on the command repositories have added an <code>--insecure</code> flag to the appropriate commands on the following repositories to counter the breaking change:</p>
<ul>
<li><a href="https://github.com/wp-cli/config-command/pull/128">https://github.com/wp-cli/config-command/pull/128</a></li>
<li><a href="https://github.com/wp-cli/core-command/pull/186">https://github.com/wp-cli/core-command/pull/186</a></li>
<li><a href="https://github.com/wp-cli/extension-command/pull/287">https://github.com/wp-cli/extension-command/pull/287</a></li>
<li><a href="https://github.com/wp-cli/checksum-command/pull/86">https://github.com/wp-cli/checksum-command/pull/86</a></li>
<li><a href="https://github.com/wp-cli/package-command/pull/138">https://github.com/wp-cli/package-command/pull/138</a></li>
</ul>
<h3 id="workarounds">Workarounds</h3>
<p>There is no direct workaround for the default insecure behavior of <code>wp-cli/wp-cli</code> versions before 2.5.0.</p>
<p>The workaround for dealing with the breaking change in the commands directly affected by the new secure default behavior is to add the <code>--insecure</code> flag to manually opt-in to the previous insecure behavior.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://cwe.mitre.org/data/definitions/295.html">CWE: Improper Certificate Validation</a></li>
</ul>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Join the <code>#cli</code> channel in the <a href="https://make.wordpress.org/chat/">WordPress.org Slack</a> to ask questions or provide feedback.</li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj">https://github.com/wp-cli/wp-cli/security/advisories/GHSA-rwgm-f83r-v3qj</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-29504">https://nvd.nist.gov/vuln/detail/CVE-2021-29504</a></li>
<li><a href="https://github.com/wp-cli/checksum-command/pull/86">https://github.com/wp-cli/checksum-command/pull/86</a></li>
<li><a href="https://github.com/wp-cli/config-command/pull/128">https://github.com/wp-cli/config-command/pull/128</a></li>
<li><a href="https://github.com/wp-cli/core-command/pull/186">https://github.com/wp-cli/core-command/pull/186</a></li>
<li><a href="https://github.com/wp-cli/extension-command/pull/287">https://github.com/wp-cli/extension-command/pull/287</a></li>
<li><a href="https://github.com/wp-cli/package-command/pull/138">https://github.com/wp-cli/package-command/pull/138</a></li>
<li><a href="https://github.com/wp-cli/wp-cli/pull/5523">https://github.com/wp-cli/wp-cli/pull/5523</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/wp-cli/wp-cli/CVE-2021-29504.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/wp-cli/wp-cli/CVE-2021-29504.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-rwgm-f83r-v3qj">https://github.com/advisories/GHSA-rwgm-f83r-v3qj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwgm-f83r-v3qj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2021-05-19T23:03:11.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3fluid/fluid] Cross-Site Scripting through Fluid view helper arguments]]></title>
        <id>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</id>
        <link href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf"/>
        <updated>2024-02-07T18:52:31.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC:C</code> (5.7)</li>
<li>CWE-79</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Three XSS vulnerabilities have been detected in Fluid:</p>
<ol>
<li>TagBasedViewHelper allowed XSS throug maliciously crafted <code>additionalAttributes</code> arrays by creating keys with attribute-closing quotes followed by HTML. When rendering such attributes, TagBuilder would not escape the keys.</li>
<li>ViewHelpers which used the <code>CompileWithContentArgumentAndRenderStatic</code> trait, and which declared <code>escapeOutput = false</code>, would receive the content argument in unescaped format.</li>
<li>Subclasses of AbstractConditionViewHelper would receive the <code>then</code> and <code>else</code> arguments in unescaped format.</li>
</ol>
<h3 id="solution">Solution</h3>
<p>Update to versions 2.0.8, 2.1.7, 2.2.4, 2.3.7, 2.4.4, 2.5.11 or 2.6.10 of this <code>typo3fluid/fluid</code> package that fix the problem described.</p>
<p>Updated versions of this package are bundled in following TYPO3 (<code>typo3/cms-core</code>) releases:</p>
<ul>
<li>TYPO3 v9.5.23 (using typo3fluid/fluid v2.6.10)</li>
<li>TYPO3 v10.4.10 (using typo3fluid/fluid v2.6.10)</li>
</ul>
<p>The specific vulnerabilities are prevented by:</p>
<ol>
<li>Explicitly escaping keys found in the <code>additionalAttributes</code> array passed to a TagBasedViewHelper before using them as attribute names.</li>
<li>Detecting "content argument" on ViewHelpers using the trait CompileWithContentArgumentAndRenderStatic and escaping it based on the state of <code>escapeChildren</code> when <code>escapeOutput</code> is toggled off. Escaping still will not occur if explicitly disabled by an enclosing ViewHelper. This homogenises escaping behavior of "content arguments" so the same strategy is used whether the "content" argument is passed as argument or child content.</li>
<li>Explicitly defining the <code>then</code> and <code>else</code> arguments on AbstractConditionViewHelper subclasses as escaped and applying escaping in all cases where escaping is not explicitly disabled by an enclosing ViewHelper.</li>
</ol>
<h3 id="affected-cases">Affected cases</h3>
<ol>
<li>The fix for TagBasedViewHelper does not affect any valid use cases; it only prevents use of maliciously crafted attribute/value arrays passed as <code>additionalAttributes</code>.</li>
<li>Any case where a ViewHelper with a "content argument" and which defines <code>escapeOutput = false</code> is used with the content argument instead of passing variables as child node - e.g. <code>&lt;v:h content="{variable}" /&gt;</code> instead of <code>&lt;v:h&gt;{variable}&lt;/v:h&gt;</code> to intentionally circumvent escaping of any HTML in <code>{variable}</code>.</li>
<li>Any case where a condition ViewHelper is used with <code>then</code> or <code>else</code> arguments to render a variable containing HTML, excluding cases where the variable is intentionally unescaped - e.g. <code>&lt;f:if condition="1" then="{variable -&gt; f:format.raw()}" /&gt;</code>, and excluding any cases where a ViewHelper is used as argument value and the ViewHelper intentionally disables escaping - e.g. <code>&lt;f:if condition="1" then="{f:render(section: 'MySection')}" /&gt;</code> does not escape the <code>then</code> argument because <code>f:render</code> disables output escaping.</li>
</ol>
<p>Cases 2 and 3 can be mitigated to allow variables with HTML to not be escaped, by intentionally disabling escaping by chaining the variable used in the argument with <code>f:format.raw</code> as described in case 3. Note that this constitutes a potential security issue, for which the template author is solely responsible. Example: <code>&lt;f:if condition="1" then="{intentionalHtmlVariable}" /&gt;</code> can allow HTML in <code>{intentionalHtmlVariable}</code> by adding <code>-&gt; f:format.raw()</code> - to become <code>&lt;f:if condition="1" then="{intentionalHtmlVariable -&gt; f:format.raw()}" /&gt;</code>.</p>
<p>Custom ViewHelpers which use <code>CompileWithContentArgumentAndRenderStatic</code> can alternatively pass a 6th argument with value <code>false</code> to the call to <code>registerArgument</code> which registers the "content argument", which explicitly disables escaping of the argument value: <code>$this-&gt;registerArgument('arg', 'string', 'My argument', false, null, false);</code>. Note that this constitutes a potential security issue for which the ViewHelper author is solely responsible. <strong>Variables containing HTML should only be allowed after taking great care to prevent XSS through other means, e.g. sanitising the variable before it is assigned to Fluid or only allowing such variables to come from trusted sources.</strong></p>
<h3 id="credits">Credits</h3>
<p>Thanks to Jonas Eberle and Sinan Sekerci (Dreamlab Technologies) who reported this issue and to TYPO3 core merger Claus Due who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">TYPO3-CORE-SA-2020-009</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/TYPO3/Fluid/security/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-26216">https://nvd.nist.gov/vuln/detail/CVE-2020-26216</a></li>
<li><a href="https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc">https://github.com/TYPO3/Fluid/commit/f20db4e74cf9803c6cffca2ed2f03e1b0b89d0dc</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2020-009">https://typo3.org/security/advisory/typo3-core-sa-2020-009</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3fluid/fluid/CVE-2020-26216.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hpjm-3ww5-6cpf">https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hpjm-3ww5-6cpf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2020-11-18T21:06:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms] Moodle cross-site scripting (XSS) vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</id>
        <link href="https://github.com/advisories/GHSA-j6c3-3c4w-qv8p"/>
        <updated>2024-02-07T18:52:06.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple cross-site scripting (XSS) vulnerabilities in Flowplayer Flash before 3.2.17, as used in Moodle through 2.3.11, 2.4.x before 2.4.9, 2.5.x before 2.5.5, and 2.6.x before 2.6.2, allow remote attackers to inject arbitrary web script or HTML by (1) providing a crafted playerId or (2) referencing an external domain, a related issue to CVE-2013-7342.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-7341">https://nvd.nist.gov/vuln/detail/CVE-2013-7341</a></li>
<li><a href="https://github.com/flowplayer/flash/issues/121">https://github.com/flowplayer/flash/issues/121</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=256420">https://moodle.org/mod/forum/discuss.php?d=256420</a></li>
<li><a href="http://flash.flowplayer.org/documentation/version-history.html">http://flash.flowplayer.org/documentation/version-history.html</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-43344">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-43344</a></li>
<li><a href="http://openwall.com/lists/oss-security/2014/03/17/1">http://openwall.com/lists/oss-security/2014/03/17/1</a></li>
<li><a href="https://github.com/moodle/moodle/commit/98d135fea3006334093efa822205d4b2c3fd8ff9">https://github.com/moodle/moodle/commit/98d135fea3006334093efa822205d4b2c3fd8ff9</a></li>
<li><a href="https://github.com/moodle/moodle/commit/9f2967e301d123d11625f3b6948e1ee538086791">https://github.com/moodle/moodle/commit/9f2967e301d123d11625f3b6948e1ee538086791</a></li>
<li><a href="https://github.com/moodle/moodle/commit/c3cd5e1db9de4f1a634492d99990534e30518066">https://github.com/moodle/moodle/commit/c3cd5e1db9de4f1a634492d99990534e30518066</a></li>
<li><a href="https://github.com/moodle/moodle/commit/d65634044ebaa738f55bdec521beb42844d6916a">https://github.com/moodle/moodle/commit/d65634044ebaa738f55bdec521beb42844d6916a</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2013-7341.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2013-7341.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2015-007">https://typo3.org/security/advisory/typo3-core-sa-2015-007</a></li>
<li><a href="https://github.com/advisories/GHSA-j6c3-3c4w-qv8p">https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms] Moodle cross-site scripting (XSS) vulnerabilities]]></title>
        <id>https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</id>
        <link href="https://github.com/advisories/GHSA-j6c3-3c4w-qv8p"/>
        <updated>2024-02-07T18:52:06.000Z</updated>
        <content type="html"><![CDATA[<p>Multiple cross-site scripting (XSS) vulnerabilities in Flowplayer Flash before 3.2.17, as used in Moodle through 2.3.11, 2.4.x before 2.4.9, 2.5.x before 2.5.5, and 2.6.x before 2.6.2, allow remote attackers to inject arbitrary web script or HTML by (1) providing a crafted playerId or (2) referencing an external domain, a related issue to CVE-2013-7342.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2013-7341">https://nvd.nist.gov/vuln/detail/CVE-2013-7341</a></li>
<li><a href="https://github.com/flowplayer/flash/issues/121">https://github.com/flowplayer/flash/issues/121</a></li>
<li><a href="https://moodle.org/mod/forum/discuss.php?d=256420">https://moodle.org/mod/forum/discuss.php?d=256420</a></li>
<li><a href="http://flash.flowplayer.org/documentation/version-history.html">http://flash.flowplayer.org/documentation/version-history.html</a></li>
<li><a href="http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-43344">http://git.moodle.org/gw?p=moodle.git&amp;a=search&amp;h=HEAD&amp;st=commit&amp;s=MDL-43344</a></li>
<li><a href="http://openwall.com/lists/oss-security/2014/03/17/1">http://openwall.com/lists/oss-security/2014/03/17/1</a></li>
<li><a href="https://github.com/moodle/moodle/commit/98d135fea3006334093efa822205d4b2c3fd8ff9">https://github.com/moodle/moodle/commit/98d135fea3006334093efa822205d4b2c3fd8ff9</a></li>
<li><a href="https://github.com/moodle/moodle/commit/9f2967e301d123d11625f3b6948e1ee538086791">https://github.com/moodle/moodle/commit/9f2967e301d123d11625f3b6948e1ee538086791</a></li>
<li><a href="https://github.com/moodle/moodle/commit/c3cd5e1db9de4f1a634492d99990534e30518066">https://github.com/moodle/moodle/commit/c3cd5e1db9de4f1a634492d99990534e30518066</a></li>
<li><a href="https://github.com/moodle/moodle/commit/d65634044ebaa738f55bdec521beb42844d6916a">https://github.com/moodle/moodle/commit/d65634044ebaa738f55bdec521beb42844d6916a</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2013-7341.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2013-7341.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2015-007">https://typo3.org/security/advisory/typo3-core-sa-2015-007</a></li>
<li><a href="https://github.com/advisories/GHSA-j6c3-3c4w-qv8p">https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-j6c3-3c4w-qv8p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-13T01:12:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms] Cross-Site Scripting via Rich-Text Content]]></title>
        <id>https://github.com/advisories/GHSA-c5c9-8c6m-727v</id>
        <link href="https://github.com/advisories/GHSA-c5c9-8c6m-727v"/>
        <updated>2024-02-07T18:51:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC</code> (5.7)</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Failing to properly parse, sanitize and encode malicious rich-text content, the content rendering process in the website frontend is vulnerable to cross-site scripting. Corresponding rendering instructions via TypoScript functionality <em><a href="https://docs.typo3.org/m/typo3/reference-typoscript/10.4/en-us/Functions/Htmlparser.html">HTMLparser</a></em> do not consider all potentially malicious HTML tag &amp; attribute combinations per default.</p>
<p>In addition, the lack of comprehensive default node configuration for rich-text fields in the backend user interface fosters this malfunction.</p>
<p>In default scenarios, a valid backend user account is needed to exploit this vulnerability. In case custom plugins used in the website frontend accept and reflect rich-text content submitted by users, no authentication is required.</p>
<h3 id="solution">Solution</h3>
<p>Update to TYPO3 versions 7.6.53 ELTS, 8.7.42 ELTS, 9.5.29, 10.4.19, 11.3.2 that fix the problem described above.</p>
<p>Custom package <em><a href="https://github.com/TYPO3/html-sanitizer">typo3/html-sanitizer</a></em> - based on allow-lists only - takes care of sanitizing potentially malicious markup. The default behavior is based on safe and commonly used markup - however, this can be extended or restricted further in case it is necessary for individual scenarios.</p>
<p>During the frontend rendering process, sanitization is applied to the default TypoScript path <code>lib.parseFunc</code>, which is implicitly used by the Fluid view-helper instruction <code>f:format.html</code>. Rich-text data persisted using the backend user interface is sanitized as well. Implementation details are explained in corresponding <a href="https://docs.typo3.org/c/typo3/cms-core/master/en-us/Changelog/9.5.x/Important-94484-IntroduceHTMLSanitizer.html">ChangeLog documentation</a>.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to Benjamin Stiber, Gert-Jan Jansma, Gábor Ács-Kurucz, Alexander Kellner, Richie Lee, Nina Rösch who reported this issue, and to TYPO3 security team member Oliver Hader, as well as TYPO3 contributor Susanne Moog who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">TYPO3-CORE-SA-2021-013</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32768">https://nvd.nist.gov/vuln/detail/CVE-2021-32768</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">https://typo3.org/security/advisory/typo3-core-sa-2021-013</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-c5c9-8c6m-727v">https://github.com/advisories/GHSA-c5c9-8c6m-727v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5c9-8c6m-727v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-19T15:53:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms] Cross-Site Scripting via Rich-Text Content]]></title>
        <id>https://github.com/advisories/GHSA-c5c9-8c6m-727v</id>
        <link href="https://github.com/advisories/GHSA-c5c9-8c6m-727v"/>
        <updated>2024-02-07T18:51:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC</code> (5.7)</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Failing to properly parse, sanitize and encode malicious rich-text content, the content rendering process in the website frontend is vulnerable to cross-site scripting. Corresponding rendering instructions via TypoScript functionality <em><a href="https://docs.typo3.org/m/typo3/reference-typoscript/10.4/en-us/Functions/Htmlparser.html">HTMLparser</a></em> do not consider all potentially malicious HTML tag &amp; attribute combinations per default.</p>
<p>In addition, the lack of comprehensive default node configuration for rich-text fields in the backend user interface fosters this malfunction.</p>
<p>In default scenarios, a valid backend user account is needed to exploit this vulnerability. In case custom plugins used in the website frontend accept and reflect rich-text content submitted by users, no authentication is required.</p>
<h3 id="solution">Solution</h3>
<p>Update to TYPO3 versions 7.6.53 ELTS, 8.7.42 ELTS, 9.5.29, 10.4.19, 11.3.2 that fix the problem described above.</p>
<p>Custom package <em><a href="https://github.com/TYPO3/html-sanitizer">typo3/html-sanitizer</a></em> - based on allow-lists only - takes care of sanitizing potentially malicious markup. The default behavior is based on safe and commonly used markup - however, this can be extended or restricted further in case it is necessary for individual scenarios.</p>
<p>During the frontend rendering process, sanitization is applied to the default TypoScript path <code>lib.parseFunc</code>, which is implicitly used by the Fluid view-helper instruction <code>f:format.html</code>. Rich-text data persisted using the backend user interface is sanitized as well. Implementation details are explained in corresponding <a href="https://docs.typo3.org/c/typo3/cms-core/master/en-us/Changelog/9.5.x/Important-94484-IntroduceHTMLSanitizer.html">ChangeLog documentation</a>.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to Benjamin Stiber, Gert-Jan Jansma, Gábor Ács-Kurucz, Alexander Kellner, Richie Lee, Nina Rösch who reported this issue, and to TYPO3 security team member Oliver Hader, as well as TYPO3 contributor Susanne Moog who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">TYPO3-CORE-SA-2021-013</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32768">https://nvd.nist.gov/vuln/detail/CVE-2021-32768</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">https://typo3.org/security/advisory/typo3-core-sa-2021-013</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-c5c9-8c6m-727v">https://github.com/advisories/GHSA-c5c9-8c6m-727v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5c9-8c6m-727v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-19T15:53:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/cms] Cross-Site Scripting via Rich-Text Content]]></title>
        <id>https://github.com/advisories/GHSA-c5c9-8c6m-727v</id>
        <link href="https://github.com/advisories/GHSA-c5c9-8c6m-727v"/>
        <updated>2024-02-07T18:51:56.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h3 id="meta">Meta</h3>
<ul>
<li>CVSS: <code>CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N/E:F/RL:O/RC</code> (5.7)</li>
</ul>
</blockquote>
<h3 id="problem">Problem</h3>
<p>Failing to properly parse, sanitize and encode malicious rich-text content, the content rendering process in the website frontend is vulnerable to cross-site scripting. Corresponding rendering instructions via TypoScript functionality <em><a href="https://docs.typo3.org/m/typo3/reference-typoscript/10.4/en-us/Functions/Htmlparser.html">HTMLparser</a></em> do not consider all potentially malicious HTML tag &amp; attribute combinations per default.</p>
<p>In addition, the lack of comprehensive default node configuration for rich-text fields in the backend user interface fosters this malfunction.</p>
<p>In default scenarios, a valid backend user account is needed to exploit this vulnerability. In case custom plugins used in the website frontend accept and reflect rich-text content submitted by users, no authentication is required.</p>
<h3 id="solution">Solution</h3>
<p>Update to TYPO3 versions 7.6.53 ELTS, 8.7.42 ELTS, 9.5.29, 10.4.19, 11.3.2 that fix the problem described above.</p>
<p>Custom package <em><a href="https://github.com/TYPO3/html-sanitizer">typo3/html-sanitizer</a></em> - based on allow-lists only - takes care of sanitizing potentially malicious markup. The default behavior is based on safe and commonly used markup - however, this can be extended or restricted further in case it is necessary for individual scenarios.</p>
<p>During the frontend rendering process, sanitization is applied to the default TypoScript path <code>lib.parseFunc</code>, which is implicitly used by the Fluid view-helper instruction <code>f:format.html</code>. Rich-text data persisted using the backend user interface is sanitized as well. Implementation details are explained in corresponding <a href="https://docs.typo3.org/c/typo3/cms-core/master/en-us/Changelog/9.5.x/Important-94484-IntroduceHTMLSanitizer.html">ChangeLog documentation</a>.</p>
<h3 id="credits">Credits</h3>
<p>Thanks to Benjamin Stiber, Gert-Jan Jansma, Gábor Ács-Kurucz, Alexander Kellner, Richie Lee, Nina Rösch who reported this issue, and to TYPO3 security team member Oliver Hader, as well as TYPO3 contributor Susanne Moog who fixed the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">TYPO3-CORE-SA-2021-013</a></li>
</ul>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/TYPO3.CMS/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v">https://github.com/TYPO3/typo3/security/advisories/GHSA-c5c9-8c6m-727v</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32768">https://nvd.nist.gov/vuln/detail/CVE-2021-32768</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-core-sa-2021-013">https://typo3.org/security/advisory/typo3-core-sa-2021-013</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms-core/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/cms/CVE-2021-32768.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-c5c9-8c6m-727v">https://github.com/advisories/GHSA-c5c9-8c6m-727v</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c5c9-8c6m-727v</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2021-08-19T15:53:12.000Z</published>
    </entry>
</feed>