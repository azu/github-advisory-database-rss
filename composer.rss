<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/composer.rss</id>
    <title>Security Advisory for PHP packages hosted at packagist.org</title>
    <updated>2024-06-06T04:01:27.008Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Acomposer"/>
    <subtitle>Security Advisory for PHP packages hosted at packagist.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[typo3/swiftmailer] typo3 Security fix for Flow Swift Mailer package]]></title>
        <id>https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</id>
        <link href="https://github.com/advisories/GHSA-xjw3-5r5c-m5ph"/>
        <updated>2024-06-05T20:47:53.000Z</updated>
        <content type="html"><![CDATA[<p>A remote code execution vulnerability has been found in the Swift Mailer library (swiftmailer/swiftmailer) recently. See this advisory for details. If you are not using the default mail() transport, this particular problem  does not affect you. Upgrading is of course still recommended!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/swiftmailer/2017-01-06.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/swiftmailer/2017-01-06.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2017-01.html">https://www.neos.io/blog/flow-sa-2017-01.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xjw3-5r5c-m5ph">https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T20:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/swiftmailer] typo3 Security fix for Flow Swift Mailer package]]></title>
        <id>https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</id>
        <link href="https://github.com/advisories/GHSA-xjw3-5r5c-m5ph"/>
        <updated>2024-06-05T20:47:53.000Z</updated>
        <content type="html"><![CDATA[<p>A remote code execution vulnerability has been found in the Swift Mailer library (swiftmailer/swiftmailer) recently. See this advisory for details. If you are not using the default mail() transport, this particular problem  does not affect you. Upgrading is of course still recommended!</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/swiftmailer/2017-01-06.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/swiftmailer/2017-01-06.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2017-01.html">https://www.neos.io/blog/flow-sa-2017-01.html</a></li>
<li><a href="https://github.com/advisories/GHSA-xjw3-5r5c-m5ph">https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-xjw3-5r5c-m5ph</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T20:47:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Insecure Unserialize Vulnerability in FLOW3]]></title>
        <id>https://github.com/advisories/GHSA-m2hp-5x78-74mg</id>
        <link href="https://github.com/advisories/GHSA-m2hp-5x78-74mg"/>
        <updated>2024-06-05T20:47:07.000Z</updated>
        <content type="html"><![CDATA[<p>Due to a missing signature (HMAC) for a request argument, an attacker could unserialize arbitrary objects within FLOW3.</p>
<p>To our knowledge it is neither possible to inject code through this vulnerability, nor are there exploitable objects within the FLOW3 Base Distribution. However, there might be exploitable objects within user applications.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2012-03-28.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2012-03-28.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2012-001.html">https://www.neos.io/blog/flow-sa-2012-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-m2hp-5x78-74mg">https://github.com/advisories/GHSA-m2hp-5x78-74mg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m2hp-5x78-74mg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T20:47:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/neos] typo3 Information Disclosure Security Note]]></title>
        <id>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</id>
        <link href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2"/>
        <updated>2024-06-05T18:33:03.000Z</updated>
        <content type="html"><![CDATA[<p>Due to reports it has been validated that internal workspaces in Neos are accessible without authentication. Some users assumed this is a planned feature but it is not. A workspace preview should be an additional feature with respective security measures in place.</p>
<p>Note that this only allows reading of internal workspaces not writing. And for clarification, an internal workspace is a workspace that is non public and doesn't have an owner.</p>
<p>Given that an internal workspace exists in your installation, it is possible to view a page in context of that workspace by opening a link in this format:</p>
<p><a href="https://domain/path/to/page.html@workspace-name">https://domain/path/to/page.html@workspace-name</a></p>
<p>The issue is quite problematic when exploited but at the same time slightly less impactful than it sounds. First of all there is no default internal workspace, so the issue affects only workspaces created by users. That also means the workspace-name, which will also always include a hash is individual to a project and an exploiter must get hold of the workspace-name including the hash. This is non trivial as there is no indication of the existence of it, but obviously brute force and educated guessed can be made.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/neos/2019-06-17.yaml</a></li>
<li><a href="https://www.neos.io/blog/neos-workspace-disclosure-security.html">https://www.neos.io/blog/neos-workspace-disclosure-security.html</a></li>
<li><a href="https://github.com/advisories/GHSA-g4xv-r3qw-v3q2">https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-g4xv-r3qw-v3q2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-06-05T18:33:01.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Typo3 Arbitrary file upload and XML External Entity processing]]></title>
        <id>https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</id>
        <link href="https://github.com/advisories/GHSA-2p4f-vc9q-r5vp"/>
        <updated>2024-06-05T18:26:36.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that Flow 3.0.0 allows arbitrary file uploads, inlcuding server-side scripts, posing the risk of attacks. If those scripts are executed by the server when accessed through their public URL, anything not blocked through other means is possible (information disclosure, placement of backdoors, data removal, …).</p>
<p>Note: The upload of files is only possible if the application built on Flow provides means to do so, and whether or not the upload of files poses a risk is dependent on the system setup. If uploaded script files are not executed by the server, there is no risk. In versions prior to 3.0.0 the upload of files with the extension php was blocked.</p>
<p>In Flow 2.3.0 to 2.3.6 a potential XML External Entity processing vulnerability has been discovered in the MediaTypeConverter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2015-11-23.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2015-11-23.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2015-001.html">https://www.neos.io/blog/flow-sa-2015-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2p4f-vc9q-r5vp">https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T18:26:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Typo3 Arbitrary file upload and XML External Entity processing]]></title>
        <id>https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</id>
        <link href="https://github.com/advisories/GHSA-2p4f-vc9q-r5vp"/>
        <updated>2024-06-05T18:26:36.000Z</updated>
        <content type="html"><![CDATA[<p>It has been discovered that Flow 3.0.0 allows arbitrary file uploads, inlcuding server-side scripts, posing the risk of attacks. If those scripts are executed by the server when accessed through their public URL, anything not blocked through other means is possible (information disclosure, placement of backdoors, data removal, …).</p>
<p>Note: The upload of files is only possible if the application built on Flow provides means to do so, and whether or not the upload of files poses a risk is dependent on the system setup. If uploaded script files are not executed by the server, there is no risk. In versions prior to 3.0.0 the upload of files with the extension php was blocked.</p>
<p>In Flow 2.3.0 to 2.3.6 a potential XML External Entity processing vulnerability has been discovered in the MediaTypeConverter.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2015-11-23.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2015-11-23.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2015-001.html">https://www.neos.io/blog/flow-sa-2015-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-2p4f-vc9q-r5vp">https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2p4f-vc9q-r5vp</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T18:26:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/phar-stream-wrapper] By-passing Protection of PharStreamWrapper Interceptor]]></title>
        <id>https://github.com/advisories/GHSA-4v5g-8pq2-32m2</id>
        <link href="https://github.com/advisories/GHSA-4v5g-8pq2-32m2"/>
        <updated>2024-06-05T17:30:02.000Z</updated>
        <content type="html"><![CDATA[<p>Insecure deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application. In July 2018, the vulnerability of insecure deserialization when executing Phar archives was addressed by removing the known attack vector in the TYPO3 core. For more details read the corresponding TYPO3 advisory.</p>
<p>In addition, a new interceptor was introduced to protect possible (but unknown) vulnerabilities in 3rd party components like TYPO3 extensions. Basically, the PharStreamWrapper intercepts direct invocations of Phar archives and allows or denies further processing based on individual rules.</p>
<p>Recently, the PharStreamWrapper was extracted from the TYPO3 core and released as standalone package under the MIT license. It is now available for any PHP driven project.</p>
<p>The stream wrapper overwrites the existing Phar handling of PHP, applies its own assertions and then restores the native PHP Phar handling for the corresponding commands (e.g. file_exists, include, fopen) to continue processing. After that, the native PHP Phar handling gets disabled and is overwritten by the logic of the PharStreamWrapper again. This is the only way to control invocations of Phar archives as PHP only allows a single handler for each corresponding stream.</p>
<p>We were informed that exception and error handlers in custom applications (e.g. TYPO3 extensions) sometimes didn't return to the original operating sequence of the PharStreamWrapper. A possible consequence was that the unprotected native PHP Phar handling remained active and therefore became vulnerable for the basic issue of insecure deserialization again.</p>
<p>Examples
Take a look at the following examples showing how the handling is by-passed in custom application code.</p>
<p>Scenario A: Exception thrown from code organized in a Phar archive</p>
<pre><code>try {
    include('phar://path-to-archive/good-archive.phar');
} catch (\Throwable $throwable) {
    // not doing much here, continue execution
}
// the insecure value can be anything that is or was user-submitted
// and cannot be trusted in terms of security, $_GET is just used as example
$insecureValue = $_GET['path'];
// the value might be 'phar://path-to-archive/malicious-archive.phar'
file_exists($insecureValue);
</code></pre>
<p>Scenario B: Errors converted to exceptions and thrown when interacting with archive contents</p>
<pre><code>// set error handler in order to convert errors to exceptions
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) {
   throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});
// interacting with Phar archive
try {
   $resource = opendir('phar://path-to-archive/good-archive.phar/non-existing-path/');
   closedir($resource);
} catch (\Throwable $throwable) {
   // not doing much here, continue execution
}
// the insecure value can be anything that is or was user-submitted
// and cannot be trusted in terms of security, $_GET is just used as example
$insecureValue = $_GET['path'];
// the value might be 'phar://path-to-archive/malicious-archive.phar'
file_exists($insecureValue);
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/phar-stream-wrapper/2018-10-18-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/phar-stream-wrapper/2018-10-18-1.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-psa-2018-001">https://typo3.org/security/advisory/typo3-psa-2018-001</a></li>
<li><a href="https://github.com/advisories/GHSA-4v5g-8pq2-32m2">https://github.com/advisories/GHSA-4v5g-8pq2-32m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v5g-8pq2-32m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:30:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/phar-stream-wrapper] By-passing Protection of PharStreamWrapper Interceptor]]></title>
        <id>https://github.com/advisories/GHSA-4v5g-8pq2-32m2</id>
        <link href="https://github.com/advisories/GHSA-4v5g-8pq2-32m2"/>
        <updated>2024-06-05T17:30:02.000Z</updated>
        <content type="html"><![CDATA[<p>Insecure deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of an application. In July 2018, the vulnerability of insecure deserialization when executing Phar archives was addressed by removing the known attack vector in the TYPO3 core. For more details read the corresponding TYPO3 advisory.</p>
<p>In addition, a new interceptor was introduced to protect possible (but unknown) vulnerabilities in 3rd party components like TYPO3 extensions. Basically, the PharStreamWrapper intercepts direct invocations of Phar archives and allows or denies further processing based on individual rules.</p>
<p>Recently, the PharStreamWrapper was extracted from the TYPO3 core and released as standalone package under the MIT license. It is now available for any PHP driven project.</p>
<p>The stream wrapper overwrites the existing Phar handling of PHP, applies its own assertions and then restores the native PHP Phar handling for the corresponding commands (e.g. file_exists, include, fopen) to continue processing. After that, the native PHP Phar handling gets disabled and is overwritten by the logic of the PharStreamWrapper again. This is the only way to control invocations of Phar archives as PHP only allows a single handler for each corresponding stream.</p>
<p>We were informed that exception and error handlers in custom applications (e.g. TYPO3 extensions) sometimes didn't return to the original operating sequence of the PharStreamWrapper. A possible consequence was that the unprotected native PHP Phar handling remained active and therefore became vulnerable for the basic issue of insecure deserialization again.</p>
<p>Examples
Take a look at the following examples showing how the handling is by-passed in custom application code.</p>
<p>Scenario A: Exception thrown from code organized in a Phar archive</p>
<pre><code>try {
    include('phar://path-to-archive/good-archive.phar');
} catch (\Throwable $throwable) {
    // not doing much here, continue execution
}
// the insecure value can be anything that is or was user-submitted
// and cannot be trusted in terms of security, $_GET is just used as example
$insecureValue = $_GET['path'];
// the value might be 'phar://path-to-archive/malicious-archive.phar'
file_exists($insecureValue);
</code></pre>
<p>Scenario B: Errors converted to exceptions and thrown when interacting with archive contents</p>
<pre><code>// set error handler in order to convert errors to exceptions
set_error_handler(function($errno, $errstr, $errfile, $errline, array $errcontext) {
   throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
});
// interacting with Phar archive
try {
   $resource = opendir('phar://path-to-archive/good-archive.phar/non-existing-path/');
   closedir($resource);
} catch (\Throwable $throwable) {
   // not doing much here, continue execution
}
// the insecure value can be anything that is or was user-submitted
// and cannot be trusted in terms of security, $_GET is just used as example
$insecureValue = $_GET['path'];
// the value might be 'phar://path-to-archive/malicious-archive.phar'
file_exists($insecureValue);
</code></pre>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/phar-stream-wrapper/2018-10-18-1.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/phar-stream-wrapper/2018-10-18-1.yaml</a></li>
<li><a href="https://typo3.org/security/advisory/typo3-psa-2018-001">https://typo3.org/security/advisory/typo3-psa-2018-001</a></li>
<li><a href="https://github.com/advisories/GHSA-4v5g-8pq2-32m2">https://github.com/advisories/GHSA-4v5g-8pq2-32m2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-4v5g-8pq2-32m2</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:30:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Time-Based Information Disclosure Vulnerability in Flow]]></title>
        <id>https://github.com/advisories/GHSA-r6mm-wmhf-849m</id>
        <link href="https://github.com/advisories/GHSA-r6mm-wmhf-849m"/>
        <updated>2024-06-05T17:28:47.000Z</updated>
        <content type="html"><![CDATA[<p>The PersistedUsernamePasswordProvider was prone to a information disclosure of account existance based on timing attacks as the hashing of passwords was only done in case an account was found. We changed the core so that the provider always does a password comparison in case credentials were submitted at all.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2016-001.html">https://www.neos.io/blog/flow-sa-2016-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r6mm-wmhf-849m">https://github.com/advisories/GHSA-r6mm-wmhf-849m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6mm-wmhf-849m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:28:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Time-Based Information Disclosure Vulnerability in Flow]]></title>
        <id>https://github.com/advisories/GHSA-r6mm-wmhf-849m</id>
        <link href="https://github.com/advisories/GHSA-r6mm-wmhf-849m"/>
        <updated>2024-06-05T17:28:47.000Z</updated>
        <content type="html"><![CDATA[<p>The PersistedUsernamePasswordProvider was prone to a information disclosure of account existance based on timing attacks as the hashing of passwords was only done in case an account was found. We changed the core so that the provider always does a password comparison in case credentials were submitted at all.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2016-001.html">https://www.neos.io/blog/flow-sa-2016-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r6mm-wmhf-849m">https://github.com/advisories/GHSA-r6mm-wmhf-849m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6mm-wmhf-849m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:28:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Time-Based Information Disclosure Vulnerability in Flow]]></title>
        <id>https://github.com/advisories/GHSA-r6mm-wmhf-849m</id>
        <link href="https://github.com/advisories/GHSA-r6mm-wmhf-849m"/>
        <updated>2024-06-05T17:28:47.000Z</updated>
        <content type="html"><![CDATA[<p>The PersistedUsernamePasswordProvider was prone to a information disclosure of account existance based on timing attacks as the hashing of passwords was only done in case an account was found. We changed the core so that the provider always does a password comparison in case credentials were submitted at all.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2016-001.html">https://www.neos.io/blog/flow-sa-2016-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r6mm-wmhf-849m">https://github.com/advisories/GHSA-r6mm-wmhf-849m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6mm-wmhf-849m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:28:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[typo3/flow] Time-Based Information Disclosure Vulnerability in Flow]]></title>
        <id>https://github.com/advisories/GHSA-r6mm-wmhf-849m</id>
        <link href="https://github.com/advisories/GHSA-r6mm-wmhf-849m"/>
        <updated>2024-06-05T17:28:47.000Z</updated>
        <content type="html"><![CDATA[<p>The PersistedUsernamePasswordProvider was prone to a information disclosure of account existance based on timing attacks as the hashing of passwords was only done in case an account was found. We changed the core so that the provider always does a password comparison in case credentials were submitted at all.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml">https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2016-11-01.yaml</a></li>
<li><a href="https://www.neos.io/blog/flow-sa-2016-001.html">https://www.neos.io/blog/flow-sa-2016-001.html</a></li>
<li><a href="https://github.com/advisories/GHSA-r6mm-wmhf-849m">https://github.com/advisories/GHSA-r6mm-wmhf-849m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-r6mm-wmhf-849m</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-06-05T17:28:47.000Z</published>
    </entry>
</feed>